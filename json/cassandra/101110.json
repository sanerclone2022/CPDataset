[{"authorTime":"2016-12-20 06:14:40","codes":[{"authorDate":"2016-12-20 06:14:40","commitOrder":3,"curCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new ClientEncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2016-12-20 06:14:40","endLine":193,"groupId":"25980","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessagePayloadBeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c2/7593bddfd214153b469ccf9edf1c3bb06009a8.src","preCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new ClientEncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2016-12-20 06:14:40","commitOrder":3,"curCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2016-12-20 06:14:40","endLine":262,"groupId":"22056","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMessagePayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c2/7593bddfd214153b469ccf9edf1c3bb06009a8.src","preCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"MB"}],"commitId":"a3008c879e8606d3f83bd6aaa5e308dc3c03bfd7","commitMessage":"@@@Allow sending keyspace independent of query string\n\nPatch by Sandeep Tamhankar; reviewed by Tyler Hobbs for CASSANDRA-10145\n","date":"2016-12-20 06:14:40","modifiedFileCount":"15","status":"M","submitter":"Sandeep Tamhankar"},{"authorTime":"2016-12-20 06:45:07","codes":[{"authorDate":"2016-12-20 06:14:40","commitOrder":4,"curCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new ClientEncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2016-12-20 06:14:40","endLine":193,"groupId":"25980","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessagePayloadBeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c2/7593bddfd214153b469ccf9edf1c3bb06009a8.src","preCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new ClientEncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2016-12-20 06:45:07","commitOrder":4,"curCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\");\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2016-12-20 06:45:07","endLine":181,"groupId":"22056","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMessagePayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cf/bfd399425659aca29cb9a15ed7172b4debbe40.src","preCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"2218d216368212ea571a82ba5cb39e5387a22c14","commitMessage":"@@@Revert \"Allow sending keyspace independent of query string\"\n\nThis reverts commit a3008c879e8606d3f83bd6aaa5e308dc3c03bfd7.\n","date":"2016-12-20 06:45:07","modifiedFileCount":"15","status":"M","submitter":"Tyler Hobbs"},{"authorTime":"2017-04-13 02:56:35","codes":[{"authorDate":"2016-12-20 06:14:40","commitOrder":5,"curCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new ClientEncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2016-12-20 06:14:40","endLine":193,"groupId":"25980","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessagePayloadBeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c2/7593bddfd214153b469ccf9edf1c3bb06009a8.src","preCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new ClientEncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2017-04-13 02:56:35","commitOrder":5,"curCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2017-04-13 02:56:35","endLine":262,"groupId":"22056","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMessagePayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c2/7593bddfd214153b469ccf9edf1c3bb06009a8.src","preCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\");\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"1f533260a01552790aff0f5f2f8f2f0aee8dbf10","commitMessage":"@@@Change protocol to allow sending key space independent of query string\n\npatch by Sandeep Tamhankar; reviewed by Tyler Hobbs + Robert Stupp for CASSANDRA-10145\n","date":"2017-04-13 02:56:35","modifiedFileCount":"15","status":"M","submitter":"Sandeep Tamhankar"},{"authorTime":"2016-05-13 20:34:03","codes":[{"authorDate":"2016-05-13 20:34:03","commitOrder":6,"curCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new ClientEncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2017-10-11 22:15:29","endLine":193,"groupId":"25980","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessagePayloadBeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/81/7cb06b70ef47417ff1caeff85da30e7d1162c2.src","preCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new ClientEncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2016-05-13 20:34:03","commitOrder":6,"curCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2017-10-11 22:15:29","endLine":262,"groupId":"22056","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMessagePayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/81/7cb06b70ef47417ff1caeff85da30e7d1162c2.src","preCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"922dbdb658b1693973926026b213153d05b4077c","commitMessage":"@@@Add result set metadata to prepared statement MD5 hash calculation\n\nPatch by Alex Petrov; reviewed by Robert Stupp for CASSANDRA-10786","date":"2017-10-11 22:15:29","modifiedFileCount":"19","status":"M","submitter":"Alex Petrov"},{"authorTime":"2016-05-13 20:34:03","codes":[{"authorDate":"2017-02-15 21:41:30","commitOrder":7,"curCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new EncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2017-11-03 20:06:38","endLine":193,"groupId":"25980","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessagePayloadBeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5b/8067e2db0c8a4de7d9dd67c175552a8884b085.src","preCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new ClientEncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2016-05-13 20:34:03","commitOrder":7,"curCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2017-10-11 22:15:29","endLine":262,"groupId":"22056","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMessagePayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/81/7cb06b70ef47417ff1caeff85da30e7d1162c2.src","preCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"260846685b6129a324a7cb7396da135fee85ec04","commitMessage":"@@@Node to Node encryption transitional mode\n\npatch by jasobrown; reviewed by Stefan Podkowinski for CASSANDRA-10404\n","date":"2017-11-03 20:06:38","modifiedFileCount":"23","status":"M","submitter":"Jason Brown"},{"authorTime":"2017-03-10 23:18:33","codes":[{"authorDate":"2017-03-10 23:18:33","commitOrder":8,"curCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new EncryptionOptions());\n            try\n            {\n                client.connect(false, false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2018-09-02 05:41:37","endLine":192,"groupId":"25980","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessagePayloadBeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a2/ee6fb3a020ae4a8031500fbbc0388907534401.src","preCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new EncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2017-03-10 23:18:33","commitOrder":8,"curCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false, false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2018-09-02 05:41:37","endLine":261,"groupId":"22056","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testMessagePayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a2/ee6fb3a020ae4a8031500fbbc0388907534401.src","preCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"65fb17a88bd096b1e952ccca31ad709759644a1b","commitMessage":"@@@Add checksumming to the native protocol\n\nPatch my Michael Kjellman and Sam Tunnicliffe; reviewed by Dinesh Joshi\nand Jordan West for CASSANDRA-13304\n","date":"2018-09-02 05:41:37","modifiedFileCount":"17","status":"M","submitter":"Sam Tunnicliffe"},{"authorTime":"2020-12-02 01:54:06","codes":[{"authorDate":"2020-12-02 01:54:06","commitOrder":9,"curCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new EncryptionOptions());\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2020-12-02 02:49:06","endLine":192,"groupId":"101110","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMessagePayloadBeta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ce/e842761d50066d71f332e12761a38b23c3db3d.src","preCode":"    public void testMessagePayloadBeta() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(),\n                                                   nativePort,\n                                                   ProtocolVersion.V5,\n                                                   true,\n                                                   new EncryptionOptions());\n            try\n            {\n                client.connect(false, false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryOptions queryOptions = QueryOptions.create(\n                  QueryOptions.DEFAULT.getConsistency(),\n                  QueryOptions.DEFAULT.getValues(),\n                  QueryOptions.DEFAULT.skipMetadata(),\n                  QueryOptions.DEFAULT.getPageSize(),\n                  QueryOptions.DEFAULT.getPagingState(),\n                  QueryOptions.DEFAULT.getSerialConsistency(),\n                  ProtocolVersion.V5,\n                  KEYSPACE);\n                QueryMessage queryMessage = new QueryMessage(\"CREATE TABLE atable (pk int PRIMARY KEY, v text)\",\n                                                             queryOptions);\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM atable\", KEYSPACE);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             queryOptions);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-12-02 01:54:06","commitOrder":9,"curCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","date":"2020-12-02 02:49:06","endLine":261,"groupId":"101110","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testMessagePayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ce/e842761d50066d71f332e12761a38b23c3db3d.src","preCode":"    public void testMessagePayload() throws Throwable\n    {\n        QueryHandler queryHandler = (QueryHandler) cqlQueryHandlerField.get(null);\n        cqlQueryHandlerField.set(null, new TestQueryHandler());\n        try\n        {\n            requireNetwork();\n\n            Assert.assertSame(TestQueryHandler.class, ClientState.getCQLQueryHandler().getClass());\n\n            SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort);\n            try\n            {\n                client.connect(false, false);\n\n                Map<String, ByteBuffer> reqMap;\n                Map<String, ByteBuffer> respMap;\n\n                QueryMessage queryMessage = new QueryMessage(\n                                                            \"CREATE TABLE \" + KEYSPACE + \".atable (pk int PRIMARY KEY, v text)\",\n                                                            QueryOptions.DEFAULT\n                );\n                PrepareMessage prepareMessage = new PrepareMessage(\"SELECT * FROM \" + KEYSPACE + \".atable\", null);\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(42));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(42));\n                queryMessage.setCustomPayload(reqMap);\n                Message.Response queryResponse = client.execute(queryMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, queryResponse.getCustomPayload());\n\n                reqMap = Collections.singletonMap(\"foo\", bytes(43));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(43));\n                prepareMessage.setCustomPayload(reqMap);\n                ResultMessage.Prepared prepareResponse = (ResultMessage.Prepared) client.execute(prepareMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, prepareResponse.getCustomPayload());\n\n                ExecuteMessage executeMessage = new ExecuteMessage(prepareResponse.statementId, prepareResponse.resultMetadataId, QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(44));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(44));\n                executeMessage.setCustomPayload(reqMap);\n                Message.Response executeResponse = client.execute(executeMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, executeResponse.getCustomPayload());\n\n                BatchMessage batchMessage = new BatchMessage(BatchStatement.Type.UNLOGGED,\n                                                             Collections.<Object>singletonList(\"INSERT INTO \" + KEYSPACE + \".atable (pk,v) VALUES (1, 'foo')\"),\n                                                             Collections.singletonList(Collections.<ByteBuffer>emptyList()),\n                                                             QueryOptions.DEFAULT);\n                reqMap = Collections.singletonMap(\"foo\", bytes(45));\n                responsePayload = respMap = Collections.singletonMap(\"bar\", bytes(45));\n                batchMessage.setCustomPayload(reqMap);\n                Message.Response batchResponse = client.execute(batchMessage);\n                payloadEquals(reqMap, requestPayload);\n                payloadEquals(respMap, batchResponse.getCustomPayload());\n            }\n            finally\n            {\n                client.close();\n            }\n        }\n        finally\n        {\n            cqlQueryHandlerField.set(null, queryHandler);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/MessagePayloadTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"a7c4ba9eeecb365e7c4753d8eaab747edd9a632a","commitMessage":"@@@Improve checksumming and compression in protocol V5\n\nThis reverts the changes made to the native protocol V5 wire format in\nCASSANDRA-13304 and subsequent follow up JIRAs (CASSANDRA-15556 &\nCASSANDRA-14716). The framing format has been re-implemented based on the\ninternode messaging format developed in CASSANDRA-15066.\n\nOPTIONS and STARTUP messages are unframed (i.e. identical to the V4 format).\nAfter sending its response to a STARTUP message.  the server modifies the\npipeline and all further messages are sent (and should be expected by the\nclient to be received) in the format determined by the protocol version of\nthe STARTUP message.\n\nPatch by Sam Tunnicliffe; reviewed by Alex Petrov and Caleb Rackliffe\nfor CASSANDRA-15299\n","date":"2020-12-02 02:49:06","modifiedFileCount":"36","status":"M","submitter":"Sam Tunnicliffe"}]
