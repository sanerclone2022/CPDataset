[{"authorTime":"2018-07-04 03:07:11","codes":[{"authorDate":"2018-07-04 03:07:11","commitOrder":1,"curCode":"        private Keyspace setupSchemaAndKeySpace()\n        {\n            SchemaLoader.prepareServer();\n            SchemaLoader.createKeyspace(KEYSPACE,\n                                        KeyspaceParams.simple(1),\n                                        SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD),\n                                        SchemaLoader.compositeIndexCFMD(KEYSPACE, CF_INDEXED, true),\n                                        SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARDLOWINDEXINTERVAL)\n                                                    .minIndexInterval(8)\n                                                    .maxIndexInterval(256)\n                                                    .caching(CachingParams.CACHE_NOTHING));\n\n            return Keyspace.open(KEYSPACE);\n        }\n","date":"2018-07-28 00:50:25","endLine":189,"groupId":"4785","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupSchemaAndKeySpace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/31/92bccddefda318797e102ed39c7fc6fed3b18e.src","preCode":"        private Keyspace setupSchemaAndKeySpace()\n        {\n            SchemaLoader.prepareServer();\n            SchemaLoader.createKeyspace(KEYSPACE,\n                                        KeyspaceParams.simple(1),\n                                        SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD),\n                                        SchemaLoader.compositeIndexCFMD(KEYSPACE, CF_INDEXED, true),\n                                        SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARDLOWINDEXINTERVAL)\n                                                    .minIndexInterval(8)\n                                                    .maxIndexInterval(256)\n                                                    .caching(CachingParams.CACHE_NOTHING));\n\n            return Keyspace.open(KEYSPACE);\n        }\n","realPath":"test/microbench/org/apache/cassandra/test/microbench/ZeroCopyStreamingBenchmark.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"B"},{"authorDate":"2018-07-04 03:07:11","commitOrder":1,"curCode":"    public static void defineSchemaAndPrepareSSTable()\n    {\n        SchemaLoader.prepareServer();\n        SchemaLoader.createKeyspace(KEYSPACE,\n                                    KeyspaceParams.simple(1),\n                                    SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD),\n                                    SchemaLoader.compositeIndexCFMD(KEYSPACE, CF_INDEXED, true),\n                                    SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARDLOWINDEXINTERVAL)\n                                                .minIndexInterval(8)\n                                                .maxIndexInterval(256)\n                                                .caching(CachingParams.CACHE_NOTHING));\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        store = keyspace.getColumnFamilyStore(\"Standard1\");\n\n        \r\n        CompactionManager.instance.disableAutoCompaction();\n        for (int j = 0; j < 10; j++)\n        {\n            new RowUpdateBuilder(store.metadata(), j, String.valueOf(j))\n            .clustering(\"0\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n        }\n        store.forceBlockingFlush();\n        CompactionManager.instance.performMaximal(store, false);\n\n        sstable = store.getLiveSSTables().iterator().next();\n    }\n","date":"2018-07-28 00:50:25","endLine":107,"groupId":"4785","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"defineSchemaAndPrepareSSTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/94/7f9687f4a0a36f1c8632d254ab9028e8ab63f0.src","preCode":"    public static void defineSchemaAndPrepareSSTable()\n    {\n        SchemaLoader.prepareServer();\n        SchemaLoader.createKeyspace(KEYSPACE,\n                                    KeyspaceParams.simple(1),\n                                    SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD),\n                                    SchemaLoader.compositeIndexCFMD(KEYSPACE, CF_INDEXED, true),\n                                    SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARDLOWINDEXINTERVAL)\n                                                .minIndexInterval(8)\n                                                .maxIndexInterval(256)\n                                                .caching(CachingParams.CACHE_NOTHING));\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        store = keyspace.getColumnFamilyStore(\"Standard1\");\n\n        \r\n        CompactionManager.instance.disableAutoCompaction();\n        for (int j = 0; j < 10; j++)\n        {\n            new RowUpdateBuilder(store.metadata(), j, String.valueOf(j))\n            .clustering(\"0\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n        }\n        store.forceBlockingFlush();\n        CompactionManager.instance.performMaximal(store, false);\n\n        sstable = store.getLiveSSTables().iterator().next();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/streaming/CassandraEntireSSTableStreamWriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"47a12c52a313258307ab88392f75c5866d9a2bb1","commitMessage":"@@@Stream entire SSTables when possible\n\npatch by Dinesh Joshi; reviewed by Aleksey Yeschenko and Ariel Weisberg\nfor CASSANDRA-14566\n","date":"2018-07-28 00:50:25","modifiedFileCount":"39","status":"B","submitter":"Dinesh A. Joshi"},{"authorTime":"2020-09-10 07:36:57","codes":[{"authorDate":"2018-07-04 03:07:11","commitOrder":2,"curCode":"        private Keyspace setupSchemaAndKeySpace()\n        {\n            SchemaLoader.prepareServer();\n            SchemaLoader.createKeyspace(KEYSPACE,\n                                        KeyspaceParams.simple(1),\n                                        SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD),\n                                        SchemaLoader.compositeIndexCFMD(KEYSPACE, CF_INDEXED, true),\n                                        SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARDLOWINDEXINTERVAL)\n                                                    .minIndexInterval(8)\n                                                    .maxIndexInterval(256)\n                                                    .caching(CachingParams.CACHE_NOTHING));\n\n            return Keyspace.open(KEYSPACE);\n        }\n","date":"2018-07-28 00:50:25","endLine":189,"groupId":"1096","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupSchemaAndKeySpace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/31/92bccddefda318797e102ed39c7fc6fed3b18e.src","preCode":"        private Keyspace setupSchemaAndKeySpace()\n        {\n            SchemaLoader.prepareServer();\n            SchemaLoader.createKeyspace(KEYSPACE,\n                                        KeyspaceParams.simple(1),\n                                        SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD),\n                                        SchemaLoader.compositeIndexCFMD(KEYSPACE, CF_INDEXED, true),\n                                        SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARDLOWINDEXINTERVAL)\n                                                    .minIndexInterval(8)\n                                                    .maxIndexInterval(256)\n                                                    .caching(CachingParams.CACHE_NOTHING));\n\n            return Keyspace.open(KEYSPACE);\n        }\n","realPath":"test/microbench/org/apache/cassandra/test/microbench/ZeroCopyStreamingBenchmark.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"N"},{"authorDate":"2020-09-10 07:36:57","commitOrder":2,"curCode":"    public static void defineSchemaAndPrepareSSTable()\n    {\n        SchemaLoader.prepareServer();\n        SchemaLoader.createKeyspace(KEYSPACE,\n                                    KeyspaceParams.simple(1),\n                                    SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD),\n                                    SchemaLoader.compositeIndexCFMD(KEYSPACE, CF_INDEXED, true),\n                                    SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARDLOWINDEXINTERVAL)\n                                                .minIndexInterval(8)\n                                                .maxIndexInterval(256)\n                                                .caching(CachingParams.CACHE_NOTHING));\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        store = keyspace.getColumnFamilyStore(\"Standard1\");\n\n        \r\n        CompactionManager.instance.disableAutoCompaction();\n        for (int j = 0; j < 10; j++)\n        {\n            new RowUpdateBuilder(store.metadata(), j, String.valueOf(j))\n            .clustering(\"0\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n        }\n        store.forceBlockingFlush();\n        CompactionManager.instance.performMaximal(store, false);\n\n        sstable = store.getLiveSSTables().iterator().next();\n        descriptor = sstable.descriptor;\n    }\n","date":"2020-09-10 10:59:24","endLine":110,"groupId":"1096","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"defineSchemaAndPrepareSSTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/58/d26c11adb9eb9df09219c627c1a0ed02432b4d.src","preCode":"    public static void defineSchemaAndPrepareSSTable()\n    {\n        SchemaLoader.prepareServer();\n        SchemaLoader.createKeyspace(KEYSPACE,\n                                    KeyspaceParams.simple(1),\n                                    SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD),\n                                    SchemaLoader.compositeIndexCFMD(KEYSPACE, CF_INDEXED, true),\n                                    SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARDLOWINDEXINTERVAL)\n                                                .minIndexInterval(8)\n                                                .maxIndexInterval(256)\n                                                .caching(CachingParams.CACHE_NOTHING));\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        store = keyspace.getColumnFamilyStore(\"Standard1\");\n\n        \r\n        CompactionManager.instance.disableAutoCompaction();\n        for (int j = 0; j < 10; j++)\n        {\n            new RowUpdateBuilder(store.metadata(), j, String.valueOf(j))\n            .clustering(\"0\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n        }\n        store.forceBlockingFlush();\n        CompactionManager.instance.performMaximal(store, false);\n\n        sstable = store.getLiveSSTables().iterator().next();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/streaming/CassandraEntireSSTableStreamWriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"f3bf0775a5a8bce228289c22b96d0c922cf2cb0d","commitMessage":"@@@Mutating sstable component may race with entire-sstable-streaming(ZCS) causing checksum validation failure\n\npatch by Zhao Yang; reviewed by Blake Eggleston.  Caleb Rackliffe.  David Capwell.  Benjamin Lerer for CASSANDRA-15861\n","date":"2020-09-10 10:59:24","modifiedFileCount":"38","status":"M","submitter":"Zhao Yang"}]
