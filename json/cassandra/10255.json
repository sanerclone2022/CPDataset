[{"authorTime":"2020-12-02 01:54:06","codes":[{"authorDate":"2020-12-02 01:54:06","commitOrder":1,"curCode":"    public static Function<ClientResourceLimits.Allocator, ClientResourceLimits.ResourceProvider> observableResourceProvider(final CQLConnectionTest.AllocationObserver observer)\n    {\n        return allocator ->\n        {\n            final ClientResourceLimits.ResourceProvider.Default delegate = new ClientResourceLimits.ResourceProvider.Default(allocator);\n            return new ClientResourceLimits.ResourceProvider()\n            {\n                public ResourceLimits.Limit globalLimit()\n                {\n                    return observer.global(delegate.globalLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue globalWaitQueue()\n                {\n                    return delegate.globalWaitQueue();\n                }\n\n                public ResourceLimits.Limit endpointLimit()\n                {\n                    return observer.endpoint(delegate.endpointLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue endpointWaitQueue()\n                {\n                    return delegate.endpointWaitQueue();\n                }\n\n                public void release()\n                {\n                    delegate.release();\n                }\n            };\n        };\n    }\n","date":"2020-12-02 02:49:06","endLine":152,"groupId":"23036","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"observableResourceProvider","params":"(finalCQLConnectionTest.AllocationObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e7/798e1ce5e99aa81c818a65db0684124ab70969.src","preCode":"    public static Function<ClientResourceLimits.Allocator, ClientResourceLimits.ResourceProvider> observableResourceProvider(final CQLConnectionTest.AllocationObserver observer)\n    {\n        return allocator ->\n        {\n            final ClientResourceLimits.ResourceProvider.Default delegate = new ClientResourceLimits.ResourceProvider.Default(allocator);\n            return new ClientResourceLimits.ResourceProvider()\n            {\n                public ResourceLimits.Limit globalLimit()\n                {\n                    return observer.global(delegate.globalLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue globalWaitQueue()\n                {\n                    return delegate.globalWaitQueue();\n                }\n\n                public ResourceLimits.Limit endpointLimit()\n                {\n                    return observer.endpoint(delegate.endpointLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue endpointWaitQueue()\n                {\n                    return delegate.endpointWaitQueue();\n                }\n\n                public void release()\n                {\n                    delegate.release();\n                }\n            };\n        };\n    }\n","realPath":"test/burn/org/apache/cassandra/transport/BurnTestUtil.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2020-12-02 01:54:06","commitOrder":1,"curCode":"        protected ClientResourceLimits.ResourceProvider resourceProvider(ClientResourceLimits.Allocator limits)\n        {\n            final ClientResourceLimits.ResourceProvider.Default delegate =\n                new ClientResourceLimits.ResourceProvider.Default(limits);\n\n            if (null == allocationObserver)\n                return delegate;\n\n            return new ClientResourceLimits.ResourceProvider()\n            {\n                public ResourceLimits.Limit globalLimit()\n                {\n                    return allocationObserver.global(delegate.globalLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue globalWaitQueue()\n                {\n                    return delegate.globalWaitQueue();\n                }\n\n                public ResourceLimits.Limit endpointLimit()\n                {\n                    return allocationObserver.endpoint(delegate.endpointLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue endpointWaitQueue()\n                {\n                    return delegate.endpointWaitQueue();\n                }\n\n                public void release()\n                {\n                    delegate.release();\n                }\n            };\n        }\n","date":"2020-12-02 02:49:06","endLine":575,"groupId":"23036","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resourceProvider","params":"(ClientResourceLimits.Allocatorlimits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/46/f6ca6f4a133d91a28c7d1ab3120301cc09d3c1.src","preCode":"        protected ClientResourceLimits.ResourceProvider resourceProvider(ClientResourceLimits.Allocator limits)\n        {\n            final ClientResourceLimits.ResourceProvider.Default delegate =\n                new ClientResourceLimits.ResourceProvider.Default(limits);\n\n            if (null == allocationObserver)\n                return delegate;\n\n            return new ClientResourceLimits.ResourceProvider()\n            {\n                public ResourceLimits.Limit globalLimit()\n                {\n                    return allocationObserver.global(delegate.globalLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue globalWaitQueue()\n                {\n                    return delegate.globalWaitQueue();\n                }\n\n                public ResourceLimits.Limit endpointLimit()\n                {\n                    return allocationObserver.endpoint(delegate.endpointLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue endpointWaitQueue()\n                {\n                    return delegate.endpointWaitQueue();\n                }\n\n                public void release()\n                {\n                    delegate.release();\n                }\n            };\n        }\n","realPath":"test/unit/org/apache/cassandra/transport/CQLConnectionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"B"}],"commitId":"a7c4ba9eeecb365e7c4753d8eaab747edd9a632a","commitMessage":"@@@Improve checksumming and compression in protocol V5\n\nThis reverts the changes made to the native protocol V5 wire format in\nCASSANDRA-13304 and subsequent follow up JIRAs (CASSANDRA-15556 &\nCASSANDRA-14716). The framing format has been re-implemented based on the\ninternode messaging format developed in CASSANDRA-15066.\n\nOPTIONS and STARTUP messages are unframed (i.e. identical to the V4 format).\nAfter sending its response to a STARTUP message.  the server modifies the\npipeline and all further messages are sent (and should be expected by the\nclient to be received) in the format determined by the protocol version of\nthe STARTUP message.\n\nPatch by Sam Tunnicliffe; reviewed by Alex Petrov and Caleb Rackliffe\nfor CASSANDRA-15299\n","date":"2020-12-02 02:49:06","modifiedFileCount":"36","status":"B","submitter":"Sam Tunnicliffe"},{"authorTime":"2021-08-19 23:55:58","codes":[{"authorDate":"2021-08-19 23:55:58","commitOrder":2,"curCode":"    public static Function<ClientResourceLimits.Allocator, ClientResourceLimits.ResourceProvider> observableResourceProvider(final CQLConnectionTest.AllocationObserver observer)\n    {\n        return allocator ->\n        {\n            final ClientResourceLimits.ResourceProvider.Default delegate = new ClientResourceLimits.ResourceProvider.Default(allocator);\n            return new ClientResourceLimits.ResourceProvider()\n            {\n                public ResourceLimits.Limit globalLimit()\n                {\n                    return observer.global(delegate.globalLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue globalWaitQueue()\n                {\n                    return delegate.globalWaitQueue();\n                }\n\n                public ResourceLimits.Limit endpointLimit()\n                {\n                    return observer.endpoint(delegate.endpointLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue endpointWaitQueue()\n                {\n                    return delegate.endpointWaitQueue();\n                }\n\n                @Override\n                public NonBlockingRateLimiter requestRateLimiter()\n                {\n                    return NO_OP_LIMITER;\n                }\n                \n                public void release()\n                {\n                    delegate.release();\n                }\n            };\n        };\n    }\n","date":"2021-08-19 23:55:58","endLine":161,"groupId":"10255","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"observableResourceProvider","params":"(finalCQLConnectionTest.AllocationObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c8/017d151f69b34eb143dc361994a7bec2fe4edb.src","preCode":"    public static Function<ClientResourceLimits.Allocator, ClientResourceLimits.ResourceProvider> observableResourceProvider(final CQLConnectionTest.AllocationObserver observer)\n    {\n        return allocator ->\n        {\n            final ClientResourceLimits.ResourceProvider.Default delegate = new ClientResourceLimits.ResourceProvider.Default(allocator);\n            return new ClientResourceLimits.ResourceProvider()\n            {\n                public ResourceLimits.Limit globalLimit()\n                {\n                    return observer.global(delegate.globalLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue globalWaitQueue()\n                {\n                    return delegate.globalWaitQueue();\n                }\n\n                public ResourceLimits.Limit endpointLimit()\n                {\n                    return observer.endpoint(delegate.endpointLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue endpointWaitQueue()\n                {\n                    return delegate.endpointWaitQueue();\n                }\n\n                public void release()\n                {\n                    delegate.release();\n                }\n            };\n        };\n    }\n","realPath":"test/burn/org/apache/cassandra/transport/BurnTestUtil.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2021-08-19 23:55:58","commitOrder":2,"curCode":"        protected ClientResourceLimits.ResourceProvider resourceProvider(ClientResourceLimits.Allocator limits)\n        {\n            final ClientResourceLimits.ResourceProvider.Default delegate =\n                new ClientResourceLimits.ResourceProvider.Default(limits);\n\n            if (null == allocationObserver)\n                return delegate;\n\n            return new ClientResourceLimits.ResourceProvider()\n            {\n                public ResourceLimits.Limit globalLimit()\n                {\n                    return allocationObserver.global(delegate.globalLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue globalWaitQueue()\n                {\n                    return delegate.globalWaitQueue();\n                }\n\n                public ResourceLimits.Limit endpointLimit()\n                {\n                    return allocationObserver.endpoint(delegate.endpointLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue endpointWaitQueue()\n                {\n                    return delegate.endpointWaitQueue();\n                }\n\n                @Override\n                public NonBlockingRateLimiter requestRateLimiter()\n                {\n                    return NO_OP_LIMITER;\n                }\n                \n                public void release()\n                {\n                    delegate.release();\n                }\n            };\n        }\n","date":"2021-08-19 23:55:58","endLine":772,"groupId":"10255","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resourceProvider","params":"(ClientResourceLimits.Allocatorlimits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/73/950ae31d0aa7b19ffb1f80de11eaed0eccdb38.src","preCode":"        protected ClientResourceLimits.ResourceProvider resourceProvider(ClientResourceLimits.Allocator limits)\n        {\n            final ClientResourceLimits.ResourceProvider.Default delegate =\n                new ClientResourceLimits.ResourceProvider.Default(limits);\n\n            if (null == allocationObserver)\n                return delegate;\n\n            return new ClientResourceLimits.ResourceProvider()\n            {\n                public ResourceLimits.Limit globalLimit()\n                {\n                    return allocationObserver.global(delegate.globalLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue globalWaitQueue()\n                {\n                    return delegate.globalWaitQueue();\n                }\n\n                public ResourceLimits.Limit endpointLimit()\n                {\n                    return allocationObserver.endpoint(delegate.endpointLimit());\n                }\n\n                public AbstractMessageHandler.WaitQueue endpointWaitQueue()\n                {\n                    return delegate.endpointWaitQueue();\n                }\n\n                public void release()\n                {\n                    delegate.release();\n                }\n            };\n        }\n","realPath":"test/unit/org/apache/cassandra/transport/CQLConnectionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":731,"status":"M"}],"commitId":"d220d24994400d4342f5281f1a51514a6ae8c2fd","commitMessage":"@@@Request-Based Native Transport Rate-Limiting\n\npatch by Caleb Rackliffe; reviewed by Benedict Elliott Smith and Josh McKenzie for CASSANDRA-16663\n","date":"2021-08-19 23:55:58","modifiedFileCount":"21","status":"M","submitter":"Caleb Rackliffe"}]
