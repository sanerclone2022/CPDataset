[{"authorTime":"2015-03-18 18:10:31","codes":[{"authorDate":"2015-03-18 18:10:31","commitOrder":1,"curCode":"    protected void fillCF(ColumnFamilyStore cfs, String keyspace, String columnFamily, int rowsPerSSTable)\n    {\n        for (int i = 0; i < rowsPerSSTable; i++)\n        {\n            String key = String.valueOf(i);\n            ColumnFamily cf = ArrayBackedSortedColumns.factory.create(keyspace, columnFamily);\n            cf.addColumn(column(\"c1\", \"1\", 1L));\n            cf.addColumn(column(\"c2\", \"2\", 1L));\n            Mutation rm = new Mutation(keyspace, ByteBufferUtil.bytes(key), cf);\n            rm.apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","date":"2015-03-18 18:10:31","endLine":378,"groupId":"27001","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fillCF","params":"(ColumnFamilyStorecfs@Stringkeyspace@StringcolumnFamily@introwsPerSSTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/84/8978bb9c0ca4b3e70ac800c2f121aa6a086926.src","preCode":"    protected void fillCF(ColumnFamilyStore cfs, String keyspace, String columnFamily, int rowsPerSSTable)\n    {\n        for (int i = 0; i < rowsPerSSTable; i++)\n        {\n            String key = String.valueOf(i);\n            ColumnFamily cf = ArrayBackedSortedColumns.factory.create(keyspace, columnFamily);\n            cf.addColumn(column(\"c1\", \"1\", 1L));\n            cf.addColumn(column(\"c2\", \"2\", 1L));\n            Mutation rm = new Mutation(keyspace, ByteBufferUtil.bytes(key), cf);\n            rm.apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/VerifyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"B"},{"authorDate":"2015-03-18 18:10:31","commitOrder":1,"curCode":"    protected void fillCounterCF(ColumnFamilyStore cfs, String keyspace, String columnFamily, int rowsPerSSTable) throws WriteTimeoutException\n    {\n        for (int i = 0; i < rowsPerSSTable; i++)\n        {\n            String key = String.valueOf(i);\n            ColumnFamily cf = ArrayBackedSortedColumns.factory.create(keyspace, columnFamily);\n            Mutation rm = new Mutation(keyspace, ByteBufferUtil.bytes(key), cf);\n            rm.addCounter(columnFamily, cellname(\"Column1\"), 100);\n            CounterMutation cm = new CounterMutation(rm, ConsistencyLevel.ONE);\n            cm.apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","date":"2015-03-18 18:10:31","endLine":393,"groupId":"27004","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fillCounterCF","params":"(ColumnFamilyStorecfs@Stringkeyspace@StringcolumnFamily@introwsPerSSTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/84/8978bb9c0ca4b3e70ac800c2f121aa6a086926.src","preCode":"    protected void fillCounterCF(ColumnFamilyStore cfs, String keyspace, String columnFamily, int rowsPerSSTable) throws WriteTimeoutException\n    {\n        for (int i = 0; i < rowsPerSSTable; i++)\n        {\n            String key = String.valueOf(i);\n            ColumnFamily cf = ArrayBackedSortedColumns.factory.create(keyspace, columnFamily);\n            Mutation rm = new Mutation(keyspace, ByteBufferUtil.bytes(key), cf);\n            rm.addCounter(columnFamily, cellname(\"Column1\"), 100);\n            CounterMutation cm = new CounterMutation(rm, ConsistencyLevel.ONE);\n            cm.apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/VerifyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"B"}],"commitId":"21bdf8700601f8150e8c13e0b4f71e061822c802","commitMessage":"@@@nodetool command to validate all sstables in a node\n\npatch by jeff jirsa; reviewed by branimir for CASSANDRA-5791\n","date":"2015-03-18 18:10:31","modifiedFileCount":"9","status":"B","submitter":"Jeff Jirsa"},{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":2,"curCode":"    protected void fillCF(ColumnFamilyStore cfs, int partitionsPerSSTable)\n    {\n        for (int i = 0; i < partitionsPerSSTable; i++)\n        {\n            UpdateBuilder.create(cfs.metadata, String.valueOf(i))\n                         .newRow(\"c1\").add(\"val\", \"1\")\n                         .newRow(\"c2\").add(\"val\", \"2\")\n                         .apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","date":"2015-06-30 18:47:01","endLine":367,"groupId":"28444","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fillCF","params":"(ColumnFamilyStorecfs@intpartitionsPerSSTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/27/2d40f296e17f736a537473b2232e52d8d40be8.src","preCode":"    protected void fillCF(ColumnFamilyStore cfs, String keyspace, String columnFamily, int rowsPerSSTable)\n    {\n        for (int i = 0; i < rowsPerSSTable; i++)\n        {\n            String key = String.valueOf(i);\n            ColumnFamily cf = ArrayBackedSortedColumns.factory.create(keyspace, columnFamily);\n            cf.addColumn(column(\"c1\", \"1\", 1L));\n            cf.addColumn(column(\"c2\", \"2\", 1L));\n            Mutation rm = new Mutation(keyspace, ByteBufferUtil.bytes(key), cf);\n            rm.apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/VerifyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"},{"authorDate":"2014-09-02 00:54:46","commitOrder":2,"curCode":"    protected void fillCounterCF(ColumnFamilyStore cfs, int partitionsPerSSTable) throws WriteTimeoutException\n    {\n        for (int i = 0; i < partitionsPerSSTable; i++)\n        {\n            UpdateBuilder.create(cfs.metadata, String.valueOf(i))\n                         .newRow(\"c1\").add(\"val\", 100L)\n                         .apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","date":"2015-06-30 18:47:01","endLine":379,"groupId":"28444","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fillCounterCF","params":"(ColumnFamilyStorecfs@intpartitionsPerSSTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/27/2d40f296e17f736a537473b2232e52d8d40be8.src","preCode":"    protected void fillCounterCF(ColumnFamilyStore cfs, String keyspace, String columnFamily, int rowsPerSSTable) throws WriteTimeoutException\n    {\n        for (int i = 0; i < rowsPerSSTable; i++)\n        {\n            String key = String.valueOf(i);\n            ColumnFamily cf = ArrayBackedSortedColumns.factory.create(keyspace, columnFamily);\n            Mutation rm = new Mutation(keyspace, ByteBufferUtil.bytes(key), cf);\n            rm.addCounter(columnFamily, cellname(\"Column1\"), 100);\n            CounterMutation cm = new CounterMutation(rm, ConsistencyLevel.ONE);\n            cm.apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/VerifyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"}],"commitId":"a991b64811f4d6adb6c7b31c0df52288eb06cf19","commitMessage":"@@@Storage engine refactor.  a.k.a CASSANDRA-8099\n\nInitial patch.  see ticket for details\n","date":"2015-06-30 18:47:01","modifiedFileCount":"374","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":3,"curCode":"    protected void fillCF(ColumnFamilyStore cfs, int partitionsPerSSTable)\n    {\n        for (int i = 0; i < partitionsPerSSTable; i++)\n        {\n            UpdateBuilder.create(cfs.metadata(), String.valueOf(i))\n                         .newRow(\"c1\").add(\"val\", \"1\")\n                         .newRow(\"c2\").add(\"val\", \"2\")\n                         .apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","date":"2017-01-28 06:17:46","endLine":365,"groupId":"10594","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fillCF","params":"(ColumnFamilyStorecfs@intpartitionsPerSSTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b7/7d56dce53206389b5f5df495b033128a1c30d3.src","preCode":"    protected void fillCF(ColumnFamilyStore cfs, int partitionsPerSSTable)\n    {\n        for (int i = 0; i < partitionsPerSSTable; i++)\n        {\n            UpdateBuilder.create(cfs.metadata, String.valueOf(i))\n                         .newRow(\"c1\").add(\"val\", \"1\")\n                         .newRow(\"c2\").add(\"val\", \"2\")\n                         .apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/VerifyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":3,"curCode":"    protected void fillCounterCF(ColumnFamilyStore cfs, int partitionsPerSSTable) throws WriteTimeoutException\n    {\n        for (int i = 0; i < partitionsPerSSTable; i++)\n        {\n            UpdateBuilder.create(cfs.metadata(), String.valueOf(i))\n                         .newRow(\"c1\").add(\"val\", 100L)\n                         .apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","date":"2017-01-28 06:17:46","endLine":377,"groupId":"10594","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fillCounterCF","params":"(ColumnFamilyStorecfs@intpartitionsPerSSTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b7/7d56dce53206389b5f5df495b033128a1c30d3.src","preCode":"    protected void fillCounterCF(ColumnFamilyStore cfs, int partitionsPerSSTable) throws WriteTimeoutException\n    {\n        for (int i = 0; i < partitionsPerSSTable; i++)\n        {\n            UpdateBuilder.create(cfs.metadata, String.valueOf(i))\n                         .newRow(\"c1\").add(\"val\", 100L)\n                         .apply();\n        }\n\n        cfs.forceBlockingFlush();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/VerifyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"}]
