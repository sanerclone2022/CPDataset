[{"authorTime":"2016-03-28 06:24:29","codes":[{"authorDate":"2016-03-28 06:24:29","commitOrder":2,"curCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, 4096, BufferType.ON_HEAP))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","date":"2016-03-28 06:24:29","endLine":160,"groupId":"23442","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildSerializeAndIterate","params":"(TokenTreeBuilderbuilder@SortedMap<Long@LongSet>tokenMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/18/9e9c648a872bb410375c4447c3abcf63897380.src","preCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, 4096, BufferType.ON_HEAP))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"MB"},{"authorDate":"2016-03-28 06:24:29","commitOrder":2,"curCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongOpenHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, 4096, BufferType.ON_HEAP))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","date":"2016-03-28 06:24:29","endLine":581,"groupId":"23446","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateTree","params":"(finallongminToken@finallongmaxToken@booleanisStatic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/18/9e9c648a872bb410375c4447c3abcf63897380.src","preCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongOpenHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, 4096, BufferType.ON_HEAP))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"MB"}],"commitId":"b6ff7f6c0d2849676efe05422e7c0d5bf0949a3e","commitMessage":"@@@Merge branch 'cassandra-3.5' into trunk\n","date":"2016-03-28 06:24:29","modifiedFileCount":"12","status":"M","submitter":"Pavel Yaskevich"},{"authorTime":"2016-06-27 09:51:10","codes":[{"authorDate":"2016-06-27 09:51:10","commitOrder":3,"curCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","date":"2016-06-27 09:55:47","endLine":163,"groupId":"23442","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildSerializeAndIterate","params":"(TokenTreeBuilderbuilder@SortedMap<Long@LongSet>tokenMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b2/6bb443ff0bb8ed5f79f300f090d864cf4acf3b.src","preCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, 4096, BufferType.ON_HEAP))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2016-06-27 09:51:10","commitOrder":3,"curCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongOpenHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","date":"2016-06-27 09:55:47","endLine":653,"groupId":"27144","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateTree","params":"(finallongminToken@finallongmaxToken@booleanisStatic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b2/6bb443ff0bb8ed5f79f300f090d864cf4acf3b.src","preCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongOpenHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, 4096, BufferType.ON_HEAP))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"M"}],"commitId":"fb221095cb2a18cf8f027a8a084700d606bb9ca3","commitMessage":"@@@Remove DatabaseDescriptor dependency from Sequentialwriter\n\npatch by yukim; reviewed by snazy for CASSANDRA-11579\n","date":"2016-06-27 09:55:47","modifiedFileCount":"21","status":"M","submitter":"Yuki Morishita"},{"authorTime":"2016-06-27 00:21:08","codes":[{"authorDate":"2016-06-27 00:21:08","commitOrder":4,"curCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, KeyOffsets> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KeyConverter.instance);\n        final Iterator<Map.Entry<Long, KeyOffsets>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, KeyOffsets> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","date":"2016-09-06 13:17:11","endLine":180,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildSerializeAndIterate","params":"(TokenTreeBuilderbuilder@SortedMap<Long@KeyOffsets>tokenMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7c/2498c586c4e747f3e7839d5d5afd1e17b1d071.src","preCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2016-06-27 00:21:08","commitOrder":4,"curCode":"    private TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, KeyOffsets> toks = new TreeMap<Long, KeyOffsets>()\n        {{\n            for (long i = minToken; i <= maxToken; i++)\n            {\n                KeyOffsets offsetSet = new KeyOffsets();\n                offsetSet.put(i, KeyOffsets.asArray(i + 5));\n                put(i, offsetSet);\n            }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","date":"2016-09-06 13:17:11","endLine":655,"groupId":"27144","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"generateTree","params":"(finallongminToken@finallongmaxToken@booleanisStatic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7c/2498c586c4e747f3e7839d5d5afd1e17b1d071.src","preCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongOpenHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":621,"status":"M"}],"commitId":"7d857b46fb070548bf5e5f6ff81db588f08ec22a","commitMessage":"@@@Add row offset support to SASI\n\nPatch by Alex Petrov; reviewed by Pavel Yaskevich for CASSANDRA-11990\n","date":"2016-09-06 13:17:11","modifiedFileCount":"34","status":"M","submitter":"Alex Petrov"},{"authorTime":"2016-11-18 07:27:14","codes":[{"authorDate":"2016-11-18 07:27:14","commitOrder":5,"curCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","date":"2016-11-18 07:27:14","endLine":173,"groupId":"23442","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildSerializeAndIterate","params":"(TokenTreeBuilderbuilder@SortedMap<Long@LongSet>tokenMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/92/7e1658063c572d573ec74ce08865a47b3aebf6.src","preCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, KeyOffsets> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KeyConverter.instance);\n        final Iterator<Map.Entry<Long, KeyOffsets>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, KeyOffsets> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2016-11-18 07:27:14","commitOrder":5,"curCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongOpenHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","date":"2016-11-18 07:27:14","endLine":663,"groupId":"27144","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"generateTree","params":"(finallongminToken@finallongmaxToken@booleanisStatic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/92/7e1658063c572d573ec74ce08865a47b3aebf6.src","preCode":"    private TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, KeyOffsets> toks = new TreeMap<Long, KeyOffsets>()\n        {{\n            for (long i = minToken; i <= maxToken; i++)\n            {\n                KeyOffsets offsetSet = new KeyOffsets();\n                offsetSet.put(i, KeyOffsets.asArray(i + 5));\n                put(i, offsetSet);\n            }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"}],"commitId":"f55d1b9f02a0c5b10fd1527440dd2b0371f91fe0","commitMessage":"@@@Merge branch 'cassandra-3.X' into trunk\n","date":"2016-11-18 07:27:14","modifiedFileCount":"34","status":"M","submitter":"Pavel Yaskevich"},{"authorTime":"2017-09-13 02:04:30","codes":[{"authorDate":"2017-09-13 02:04:30","commitOrder":6,"curCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = FileUtils.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","date":"2018-07-27 00:20:00","endLine":178,"groupId":"23442","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"buildSerializeAndIterate","params":"(TokenTreeBuilderbuilder@SortedMap<Long@LongSet>tokenMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/72/b9e0d3382626d42b7c1bc2f7dc25c21ef62d8c.src","preCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2017-09-13 02:04:30","commitOrder":6,"curCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongOpenHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = FileUtils.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","date":"2018-07-27 00:20:00","endLine":671,"groupId":"8487","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"generateTree","params":"(finallongminToken@finallongmaxToken@booleanisStatic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/72/b9e0d3382626d42b7c1bc2f7dc25c21ef62d8c.src","preCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongOpenHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = File.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"M"}],"commitId":"6ba2fb9395226491872b41312d978a169f36fcdb","commitMessage":"@@@Make C* compile and run on Java 11 and Java 8\n\npatch by Robert Stupp; reviewed by Jason Brown for CASSANDRA-9608\n","date":"2018-07-27 00:20:00","modifiedFileCount":"79","status":"M","submitter":"Robert Stupp"},{"authorTime":"2020-01-29 01:19:11","codes":[{"authorDate":"2017-09-13 02:04:30","commitOrder":7,"curCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = FileUtils.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","date":"2018-07-27 00:20:00","endLine":178,"groupId":"101066","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"buildSerializeAndIterate","params":"(TokenTreeBuilderbuilder@SortedMap<Long@LongSet>tokenMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/72/b9e0d3382626d42b7c1bc2f7dc25c21ef62d8c.src","preCode":"    public void buildSerializeAndIterate(TokenTreeBuilder builder, SortedMap<Long, LongSet> tokenMap) throws Exception\n    {\n\n        builder.finish();\n        final File treeFile = FileUtils.createTempFile(\"token-tree-iterate-test1\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        final RandomAccessReader reader = RandomAccessReader.open(treeFile);\n        final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader));\n\n        final Iterator<Token> tokenIterator = tokenTree.iterator(KEY_CONVERTER);\n        final Iterator<Map.Entry<Long, LongSet>> listIterator = tokenMap.entrySet().iterator();\n        while (tokenIterator.hasNext() && listIterator.hasNext())\n        {\n            Token treeNext = tokenIterator.next();\n            Map.Entry<Long, LongSet> listNext = listIterator.next();\n\n            Assert.assertEquals(listNext.getKey(), treeNext.get());\n            Assert.assertEquals(convert(listNext.getValue()), convert(treeNext));\n        }\n\n        Assert.assertFalse(\"token iterator not finished\", tokenIterator.hasNext());\n        Assert.assertFalse(\"list iterator not finished\", listIterator.hasNext());\n\n        reader.close();\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"N"},{"authorDate":"2020-01-29 01:19:11","commitOrder":7,"curCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = FileUtils.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","date":"2020-02-13 01:21:05","endLine":678,"groupId":"101066","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"generateTree","params":"(finallongminToken@finallongmaxToken@booleanisStatic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/43/39a62438266aeba5a8eb7fda010b15c956def9.src","preCode":"    private static TokenTree generateTree(final long minToken, final long maxToken, boolean isStatic) throws IOException\n    {\n        final SortedMap<Long, LongSet> toks = new TreeMap<Long, LongSet>()\n        {{\n                for (long i = minToken; i <= maxToken; i++)\n                {\n                    LongSet offsetSet = new LongOpenHashSet();\n                    offsetSet.add(i);\n                    put(i, offsetSet);\n                }\n        }};\n\n        final TokenTreeBuilder builder = isStatic ? new StaticTokenTreeBuilder(new FakeCombinedTerm(toks)) : new DynamicTokenTreeBuilder(toks);\n        builder.finish();\n        final File treeFile = FileUtils.createTempFile(\"token-tree-get-test\", \"tt\");\n        treeFile.deleteOnExit();\n\n        try (SequentialWriter writer = new SequentialWriter(treeFile, DEFAULT_OPT))\n        {\n            builder.write(writer);\n            writer.sync();\n        }\n\n        RandomAccessReader reader = null;\n\n        try\n        {\n            reader = RandomAccessReader.open(treeFile);\n            return new TokenTree(new MappedBuffer(reader));\n        }\n        finally\n        {\n            FileUtils.closeQuietly(reader);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/disk/TokenTreeTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"M"}],"commitId":"3f2a248da11448ed9fd38467e4b353ed4df4888f","commitMessage":"@@@Update hppc library to version 0.8.1\n\nPatch by Ekaterina Dimitrova.  reviewed by brandonwilliams for CASSANDRA-12995\n","date":"2020-02-13 01:21:05","modifiedFileCount":"15","status":"M","submitter":"Ekaterina Dimitrova"}]
