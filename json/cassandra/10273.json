[{"authorTime":"2017-02-16 02:47:24","codes":[{"authorDate":"2017-02-16 02:47:24","commitOrder":1,"curCode":"    public void incrementalStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, prs.getRepairedAt(), prs.isIncremental);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst, prs.isIncremental);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n        Assert.assertEquals(prs.repairedAt, plan.getRepairedAt());\n\n    }\n","date":"2017-02-18 05:57:17","endLine":74,"groupId":"29353","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"incrementalStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/90/988ae6b95a8f484c64871584cfe3d69ca81bc7.src","preCode":"    public void incrementalStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, prs.getRepairedAt(), prs.isIncremental);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst, prs.isIncremental);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n        Assert.assertEquals(prs.repairedAt, plan.getRepairedAt());\n\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2017-02-16 02:47:24","commitOrder":1,"curCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, prs.getRepairedAt(), prs.isIncremental);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst, prs.isIncremental);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n        Assert.assertEquals(ActiveRepairService.UNREPAIRED_SSTABLE, plan.getRepairedAt());\n    }\n","date":"2017-02-18 05:57:17","endLine":88,"groupId":"29353","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fullStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/90/988ae6b95a8f484c64871584cfe3d69ca81bc7.src","preCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, prs.getRepairedAt(), prs.isIncremental);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst, prs.isIncremental);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n        Assert.assertEquals(ActiveRepairService.UNREPAIRED_SSTABLE, plan.getRepairedAt());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"c878b6968be88fa89fb1d1d0212411bcbc4fae7c","commitMessage":"@@@StreamPlan for incremental repairs flushing memtables unnecessarily\nPatch by Blake Eggleston; Reviewed by Marcus Eriksson for CASSANDRA-13226\n","date":"2017-02-18 05:57:17","modifiedFileCount":"8","status":"B","submitter":"Blake Eggleston"},{"authorTime":"2017-04-08 01:38:56","codes":[{"authorDate":"2017-04-08 01:38:56","commitOrder":2,"curCode":"    public void incrementalStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, desc.sessionId);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","date":"2017-04-21 07:31:22","endLine":72,"groupId":"29353","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"incrementalStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5f/13e3d26fa50ad865548859821c175e3383c861.src","preCode":"    public void incrementalStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, prs.getRepairedAt(), prs.isIncremental);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst, prs.isIncremental);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n        Assert.assertEquals(prs.repairedAt, plan.getRepairedAt());\n\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2017-04-08 01:38:56","commitOrder":2,"curCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, null);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","date":"2017-04-21 07:31:22","endLine":85,"groupId":"29353","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fullStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5f/13e3d26fa50ad865548859821c175e3383c861.src","preCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, prs.getRepairedAt(), prs.isIncremental);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst, prs.isIncremental);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n        Assert.assertEquals(ActiveRepairService.UNREPAIRED_SSTABLE, plan.getRepairedAt());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"9308159bc87d29c33e64dbcfcefa948d7f5643dd","commitMessage":"@@@Cleanup isIncremental/repairedAt usage\n\nPatch by Blake Eggleston; reviewed by Marcus Eriksson for CASSANDRA-13430\n","date":"2017-04-21 07:31:22","modifiedFileCount":"32","status":"M","submitter":"Blake Eggleston"},{"authorTime":"2017-02-24 01:35:04","codes":[{"authorDate":"2017-02-24 01:35:04","commitOrder":3,"curCode":"    public void incrementalStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, desc.sessionId, PreviewKind.NONE);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","date":"2017-04-25 00:21:33","endLine":73,"groupId":"16486","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"incrementalStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f4/33f2e42e99dbb10a852282a0a845333771d706.src","preCode":"    public void incrementalStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, desc.sessionId);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2017-02-24 01:35:04","commitOrder":3,"curCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, null, PreviewKind.NONE);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","date":"2017-04-25 00:21:33","endLine":86,"groupId":"16486","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fullStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f4/33f2e42e99dbb10a852282a0a845333771d706.src","preCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges());\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, null);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"4cfaf855c404256a9dd281d5066cc076232d72ff","commitMessage":"@@@Add repair streaming preview\n\nPatch by Blake Eggleston; Reviewed by Marcus Eriksson for CASSANDRA-13257\n","date":"2017-04-25 00:21:33","modifiedFileCount":"49","status":"M","submitter":"Blake Eggleston"},{"authorTime":"2017-12-07 20:55:44","codes":[{"authorDate":"2017-12-07 20:55:44","commitOrder":4,"curCode":"    public void incrementalStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, desc.sessionId, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","date":"2017-12-07 20:55:56","endLine":74,"groupId":"16486","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"incrementalStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f0/ff0e0c119c2ae609b79073d607242e71fcad3f.src","preCode":"    public void incrementalStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, desc.sessionId, PreviewKind.NONE);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2017-12-07 20:55:44","commitOrder":4,"curCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, null, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","date":"2017-12-07 20:55:56","endLine":87,"groupId":"16486","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"fullStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f0/ff0e0c119c2ae609b79073d607242e71fcad3f.src","preCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request, null, PreviewKind.NONE);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"cb56d9fc3c773abbefa2044ce41ddbfb7717e0cb","commitMessage":"@@@Add option to optimize Merkle tree comparison across replicas\n\nPatch by marcuse; reviewed by Blake Eggleston for CASSANDRA-3200\n","date":"2017-12-07 20:55:56","modifiedFileCount":"15","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2018-04-20 08:23:19","codes":[{"authorDate":"2018-04-20 08:23:19","commitOrder":5,"curCode":"    public void incrementalStreamPlan()\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, desc.sessionId, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","date":"2018-04-23 07:35:47","endLine":74,"groupId":"16486","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"incrementalStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b8/45e936d12a15d78b9f6470aa4edcdb66a57807.src","preCode":"    public void incrementalStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, desc.sessionId, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-04-20 08:23:19","commitOrder":5,"curCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, null, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","date":"2018-04-23 07:35:47","endLine":87,"groupId":"16486","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"fullStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b8/45e936d12a15d78b9f6470aa4edcdb66a57807.src","preCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, null, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.src, request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"63945228fc0fabea2cfcf1f1b4d0a29ed3964107","commitMessage":"@@@Use the correct IP/Port for Streaming when localAddress is left unbound\n\npatch by Dinesh Joshi; reviewed by jasobrown for CASSANDRA-14389\n","date":"2018-04-23 07:35:47","modifiedFileCount":"22","status":"M","submitter":"Dinesh A. Joshi"},{"authorTime":"2020-11-13 16:47:38","codes":[{"authorDate":"2020-11-13 16:47:38","commitOrder":6,"curCode":"    public void incrementalStreamPlan()\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE, false);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, desc.sessionId, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","date":"2020-12-01 19:39:25","endLine":74,"groupId":"16486","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"incrementalStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/10/57a671482162885d4af3eef825088527ca76e8.src","preCode":"    public void incrementalStreamPlan()\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, desc.sessionId, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-11-13 16:47:38","commitOrder":6,"curCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE, false);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, null, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","date":"2020-12-01 19:39:25","endLine":87,"groupId":"16486","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"fullStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/10/57a671482162885d4af3eef825088527ca76e8.src","preCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, null, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"22abff779df097e0ef38180442e9c680b3d41187","commitMessage":"@@@Optimised repair streaming improvements\n\nPatch by marcuse; reviewed by Sam Tunnicliffe for CASSANDRA-16274\n","date":"2020-12-01 19:39:25","modifiedFileCount":"22","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2020-11-13 16:47:38","codes":[{"authorDate":"2021-03-17 22:28:05","commitOrder":7,"curCode":"    public void incrementalStreamPlan() throws NoSuchRepairSessionException\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE, false);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, desc.sessionId, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","date":"2021-07-22 05:21:23","endLine":74,"groupId":"10273","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"incrementalStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e2/ddedea4e876595a13ff6db32b969d66249e94b.src","preCode":"    public void incrementalStreamPlan()\n    {\n        UUID sessionID = registerSession(cfs, true, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE, false);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, desc.sessionId, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertFalse(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-11-13 16:47:38","commitOrder":7,"curCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE, false);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, null, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","date":"2020-12-01 19:39:25","endLine":87,"groupId":"10273","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"fullStreamPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/10/57a671482162885d4af3eef825088527ca76e8.src","preCode":"    public void fullStreamPlan() throws Exception\n    {\n        UUID sessionID = registerSession(cfs, false, true);\n        ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(sessionID);\n        RepairJobDesc desc = new RepairJobDesc(sessionID, UUIDGen.getTimeUUID(), ks, tbl, prs.getRanges());\n        SyncRequest request = new SyncRequest(desc, PARTICIPANT1, PARTICIPANT2, PARTICIPANT3, prs.getRanges(), PreviewKind.NONE, false);\n        StreamingRepairTask task = new StreamingRepairTask(desc, request.initiator, request.src, request.dst, request.ranges, null, PreviewKind.NONE, false);\n\n        StreamPlan plan = task.createStreamPlan(request.dst);\n        Assert.assertTrue(plan.getFlushBeforeTransfer());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/StreamingRepairTaskTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"f49c29ee8c7374a05e32be01cb0046236d5309e6","commitMessage":"@@@Reduce the log level on \"expected\" repair exceptions\n\npatch by Caleb Rackliffe and Marcus Eriksson; reviewed by Josh McKenzie for CASSANDRA-16775\n","date":"2021-07-22 05:21:23","modifiedFileCount":"30","status":"M","submitter":"Marcus Eriksson"}]
