[{"authorTime":"2017-09-05 06:36:12","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":3,"curCode":"    public void testDropExpiredSSTables() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ByteBuffer value = ByteBuffer.wrap(new byte[100]);\n\n        \r\n        DecoratedKey key = Util.dk(String.valueOf(\"expired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), 1, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();\n        Thread.sleep(10);\n\n        key = Util.dk(String.valueOf(\"nonexpired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        assertEquals(cfs.getLiveSSTables().size(), 2);\n\n        Map<String, String> options = new HashMap<>();\n\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, \"30\");\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, \"SECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, \"MILLISECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, \"0\");\n        TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n        twcs.startup();\n        assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)));\n        Thread.sleep(2000);\n        AbstractCompactionTask t = twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000));\n        assertNotNull(t);\n        assertEquals(1, Iterables.size(t.transaction.originals()));\n        SSTableReader sstable = t.transaction.originals().iterator().next();\n        assertEquals(sstable, expiredSSTable);\n        t.transaction.abort();\n    }\n","date":"2017-01-28 06:17:46","endLine":269,"groupId":"3339","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropExpiredSSTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/93/0fc793f68503f14a6af630759c85a2d753df4c.src","preCode":"    public void testDropExpiredSSTables() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ByteBuffer value = ByteBuffer.wrap(new byte[100]);\n\n        \r\n        DecoratedKey key = Util.dk(String.valueOf(\"expired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), 1, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();\n        Thread.sleep(10);\n\n        key = Util.dk(String.valueOf(\"nonexpired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        assertEquals(cfs.getLiveSSTables().size(), 2);\n\n        Map<String, String> options = new HashMap<>();\n\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, \"30\");\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, \"SECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, \"MILLISECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, \"0\");\n        TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n        twcs.startup();\n        assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)));\n        Thread.sleep(2000);\n        AbstractCompactionTask t = twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000));\n        assertNotNull(t);\n        assertEquals(1, Iterables.size(t.transaction.originals()));\n        SSTableReader sstable = t.transaction.originals().iterator().next();\n        assertEquals(sstable, expiredSSTable);\n        t.transaction.abort();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"NB"},{"authorDate":"2017-09-05 06:36:12","commitOrder":3,"curCode":"    public void testDropOverlappingExpiredSSTables() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ByteBuffer value = ByteBuffer.wrap(new byte[100]);\n\n        \r\n        DecoratedKey key = Util.dk(String.valueOf(\"expired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), 1, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();\n        Thread.sleep(10);\n\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis() - 1000, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n        key = Util.dk(String.valueOf(\"nonexpired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        assertEquals(cfs.getLiveSSTables().size(), 2);\n\n        Map<String, String> options = new HashMap<>();\n\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, \"30\");\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, \"SECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, \"MILLISECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, \"0\");\n        TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n\n        twcs.startup();\n        assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)));\n        Thread.sleep(2000);\n        assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000)));\n\n        options.put(TimeWindowCompactionStrategyOptions.UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_KEY, \"true\");\n        twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n\n        twcs.startup();\n        AbstractCompactionTask t = twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000));\n        assertNotNull(t);\n        assertEquals(1, Iterables.size(t.transaction.originals()));\n        SSTableReader sstable = t.transaction.originals().iterator().next();\n        assertEquals(sstable, expiredSSTable);\n        twcs.shutdown();\n        t.transaction.abort();\n    }\n","date":"2017-09-05 06:38:48","endLine":346,"groupId":"3339","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropOverlappingExpiredSSTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/89/dd2f59b162efcead95c0315d68f7dff8923bc9.src","preCode":"    public void testDropOverlappingExpiredSSTables() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ByteBuffer value = ByteBuffer.wrap(new byte[100]);\n\n        \r\n        DecoratedKey key = Util.dk(String.valueOf(\"expired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), 1, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();\n        Thread.sleep(10);\n\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis() - 1000, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n        key = Util.dk(String.valueOf(\"nonexpired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        assertEquals(cfs.getLiveSSTables().size(), 2);\n\n        Map<String, String> options = new HashMap<>();\n\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, \"30\");\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, \"SECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, \"MILLISECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, \"0\");\n        TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n\n        twcs.startup();\n        assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)));\n        Thread.sleep(2000);\n        assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000)));\n\n        options.put(TimeWindowCompactionStrategyOptions.UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_KEY, \"true\");\n        twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n\n        twcs.startup();\n        AbstractCompactionTask t = twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000));\n        assertNotNull(t);\n        assertEquals(1, Iterables.size(t.transaction.originals()));\n        SSTableReader sstable = t.transaction.originals().iterator().next();\n        assertEquals(sstable, expiredSSTable);\n        twcs.shutdown();\n        t.transaction.abort();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"B"}],"commitId":"10d5b7b2f77fb7c25e288f42f7fb64b3131fad35","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2017-09-05 06:38:48","modifiedFileCount":"5","status":"M","submitter":"Mick Semb Wever"},{"authorTime":"2021-06-01 23:27:33","codes":[{"authorDate":"2021-06-01 23:27:33","commitOrder":4,"curCode":"    public void testDropExpiredSSTables() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ByteBuffer value = ByteBuffer.wrap(new byte[100]);\n\n        \r\n        DecoratedKey key = Util.dk(\"expired\");\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), TTL_SECONDS, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();\n        Thread.sleep(10);\n\n        \r\n        key = Util.dk(\"nonexpired\");\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        assertEquals(cfs.getLiveSSTables().size(), 2);\n\n        Map<String, String> options = new HashMap<>();\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, \"30\");\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, \"SECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, \"MILLISECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, \"0\");\n        TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n\n        twcs.startup();\n        assertNull(twcs.getNextBackgroundTask(nowInSeconds()));\n\n        \r\n        Thread.sleep(TimeUnit.SECONDS.toMillis(TTL_SECONDS + 1));\n        AbstractCompactionTask t = twcs.getNextBackgroundTask(nowInSeconds());\n        assertNotNull(t);\n        assertEquals(1, Iterables.size(t.transaction.originals()));\n        SSTableReader sstable = t.transaction.originals().iterator().next();\n        assertEquals(sstable, expiredSSTable);\n        t.transaction.abort();\n    }\n","date":"2021-06-01 23:27:33","endLine":298,"groupId":"10798","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropExpiredSSTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/8f/d25e700316f88bfda49f619f9f8a0dc5458e8c.src","preCode":"    public void testDropExpiredSSTables() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ByteBuffer value = ByteBuffer.wrap(new byte[100]);\n\n        \r\n        DecoratedKey key = Util.dk(String.valueOf(\"expired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), 1, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();\n        Thread.sleep(10);\n\n        key = Util.dk(String.valueOf(\"nonexpired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        assertEquals(cfs.getLiveSSTables().size(), 2);\n\n        Map<String, String> options = new HashMap<>();\n\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, \"30\");\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, \"SECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, \"MILLISECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, \"0\");\n        TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n        twcs.startup();\n        assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)));\n        Thread.sleep(2000);\n        AbstractCompactionTask t = twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000));\n        assertNotNull(t);\n        assertEquals(1, Iterables.size(t.transaction.originals()));\n        SSTableReader sstable = t.transaction.originals().iterator().next();\n        assertEquals(sstable, expiredSSTable);\n        t.transaction.abort();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2021-06-01 23:27:33","commitOrder":4,"curCode":"    public void testDropOverlappingExpiredSSTables() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        long timestamp = System.currentTimeMillis();\n        ByteBuffer value = ByteBuffer.wrap(new byte[100]);\n\n        \r\n        DecoratedKey key = Util.dk(\"expired\");\n        new RowUpdateBuilder(cfs.metadata(), timestamp, TTL_SECONDS, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();\n        Thread.sleep(10);\n\n        \r\n        new RowUpdateBuilder(cfs.metadata(), timestamp - 1000, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n        key = Util.dk(\"nonexpired\");\n        new RowUpdateBuilder(cfs.metadata(), timestamp, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        assertEquals(cfs.getLiveSSTables().size(), 2);\n\n        Map<String, String> options = new HashMap<>();\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, \"30\");\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, \"SECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, \"MILLISECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, \"0\");\n        TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n\n        twcs.startup();\n        assertNull(twcs.getNextBackgroundTask(nowInSeconds()));\n\n        \r\n        Thread.sleep(TimeUnit.SECONDS.toMillis(TTL_SECONDS + 1));\n        assertNull(twcs.getNextBackgroundTask(nowInSeconds()));\n\n        options.put(TimeWindowCompactionStrategyOptions.UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_KEY, \"true\");\n        twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n\n        twcs.startup();\n        AbstractCompactionTask t = twcs.getNextBackgroundTask(nowInSeconds());\n        assertNotNull(t);\n        assertEquals(1, Iterables.size(t.transaction.originals()));\n        SSTableReader sstable = t.transaction.originals().iterator().next();\n        assertEquals(sstable, expiredSSTable);\n        twcs.shutdown();\n        t.transaction.abort();\n    }\n","date":"2021-06-01 23:27:33","endLine":362,"groupId":"10798","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropOverlappingExpiredSSTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/8f/d25e700316f88bfda49f619f9f8a0dc5458e8c.src","preCode":"    public void testDropOverlappingExpiredSSTables() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ByteBuffer value = ByteBuffer.wrap(new byte[100]);\n\n        \r\n        DecoratedKey key = Util.dk(String.valueOf(\"expired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), 1, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();\n        Thread.sleep(10);\n\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis() - 1000, key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n        key = Util.dk(String.valueOf(\"nonexpired\"));\n        new RowUpdateBuilder(cfs.metadata(), System.currentTimeMillis(), key.getKey())\n            .clustering(\"column\")\n            .add(\"val\", value).build().applyUnsafe();\n\n        cfs.forceBlockingFlush();\n        assertEquals(cfs.getLiveSSTables().size(), 2);\n\n        Map<String, String> options = new HashMap<>();\n\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, \"30\");\n        options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, \"SECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, \"MILLISECONDS\");\n        options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, \"0\");\n        TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n\n        twcs.startup();\n        assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)));\n        Thread.sleep(2000);\n        assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000)));\n\n        options.put(TimeWindowCompactionStrategyOptions.UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_KEY, \"true\");\n        twcs = new TimeWindowCompactionStrategy(cfs, options);\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n            twcs.addSSTable(sstable);\n\n        twcs.startup();\n        AbstractCompactionTask t = twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000));\n        assertNotNull(t);\n        assertEquals(1, Iterables.size(t.transaction.originals()));\n        SSTableReader sstable = t.transaction.originals().iterator().next();\n        assertEquals(sstable, expiredSSTable);\n        twcs.shutdown();\n        t.transaction.abort();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"4697e119afa42fd6c25a79e1700b4443535e63ca","commitMessage":"@@@Merge branch 'cassandra-4.0' into trunk\n","date":"2021-06-01 23:27:33","modifiedFileCount":"1","status":"M","submitter":"Andr?s de la Pe?a"}]
