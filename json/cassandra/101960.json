[{"authorTime":"2014-01-31 01:21:53","codes":[{"authorDate":"2013-08-14 14:45:34","commitOrder":2,"curCode":"    public void testMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        SSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","date":"2013-08-14 14:45:34","endLine":286,"groupId":"10165","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/37/87b3eafd8883c38465ea2c8cc95a512f37101e.src","preCode":"    public void testMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        SSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"NB"},{"authorDate":"2014-01-31 01:21:53","commitOrder":2,"curCode":"    public void testSingleKeyMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        SSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(\n                101, 109,\n                201, 209),\n                null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","date":"2014-01-31 01:21:53","endLine":316,"groupId":"21075","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleKeyMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/76/065bde35bc03ba88624690c34fef3acb5be64b.src","preCode":"    public void testSingleKeyMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        SSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(\n                101, 109,\n                201, 209),\n                null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"}],"commitId":"b5a3303f354492b38a74dea3b49d8e916007ed58","commitMessage":"@@@Merge branch 'cassandra-2.0' into trunk\n","date":"2014-01-31 01:21:53","modifiedFileCount":"2","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2014-09-03 00:49:01","codes":[{"authorDate":"2014-09-03 00:49:01","commitOrder":3,"curCode":"    public void testMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ICompactionScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","date":"2014-10-23 23:10:55","endLine":300,"groupId":"10165","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0d/7d3c910b83f3a890b2c5499317aa80c5a85842.src","preCode":"    public void testMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        SSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2014-09-03 00:49:01","commitOrder":3,"curCode":"    public void testSingleKeyMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ICompactionScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","date":"2014-10-23 23:10:55","endLine":328,"groupId":"21075","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleKeyMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0d/7d3c910b83f3a890b2c5499317aa80c5a85842.src","preCode":"    public void testSingleKeyMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        SSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"0368e97ee4a807cb832a90c590ae5c65a98730c1","commitMessage":"@@@Extend Descriptor to include a format value and refactor reader/writer apis\n\npatch by tjake; reviewed by Marcus Eriksson for CASSANDRA-7443\n","date":"2014-10-23 23:10:55","modifiedFileCount":"130","status":"M","submitter":"Jake Luciani"},{"authorTime":"2014-12-17 05:03:05","codes":[{"authorDate":"2014-12-17 05:03:05","commitOrder":4,"curCode":"    public void testMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","date":"2014-12-17 05:03:05","endLine":299,"groupId":"10165","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9d/a895e9952ac69f3c9e55aefb26abded2a44c75.src","preCode":"    public void testMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ICompactionScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2014-12-17 05:03:05","commitOrder":4,"curCode":"    public void testSingleKeyMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","date":"2014-12-17 05:03:05","endLine":327,"groupId":"21075","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleKeyMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9d/a895e9952ac69f3c9e55aefb26abded2a44c75.src","preCode":"    public void testSingleKeyMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ICompactionScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ICompactionScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"bee53d72a530aab2949d12bd9d2320b76811c85a","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n\nConflicts:\n\tsrc/java/org/apache/cassandra/db/compaction/AbstractCompactionStrategy.java\n\tsrc/java/org/apache/cassandra/db/compaction/CompactionIterable.java\n\tsrc/java/org/apache/cassandra/db/compaction/CompactionManager.java\n\tsrc/java/org/apache/cassandra/db/compaction/LeveledCompactionStrategy.java\n\tsrc/java/org/apache/cassandra/db/compaction/WrappingCompactionStrategy.java\n\tsrc/java/org/apache/cassandra/io/sstable/format/SSTableReader.java\n\tsrc/java/org/apache/cassandra/io/sstable/format/big/BigTableScanner.java\n\tsrc/java/org/apache/cassandra/tools/SSTableExport.java\n\ttest/unit/org/apache/cassandra/db/compaction/AntiCompactionTest.java\n\ttest/unit/org/apache/cassandra/db/compaction/CompactionsTest.java\n\ttest/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java\n\ttest/unit/org/apache/cassandra/db/compaction/TTLExpiryTest.java\n\ttest/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java\n\ttest/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java\n\ttest/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java\n\ttest/unit/org/apache/cassandra/io/sstable/SSTableUtils.java\n","date":"2014-12-17 05:03:05","modifiedFileCount":"18","status":"M","submitter":"Joshua McKenzie"},{"authorTime":"2015-04-03 19:32:42","codes":[{"authorDate":"2015-04-03 19:32:42","commitOrder":5,"curCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","date":"2015-04-03 19:32:42","endLine":418,"groupId":"10165","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f8/b808dd485f5755ba404753c033c5be3ed2e6b3.src","preCode":"    public void testMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2015-04-03 19:32:42","commitOrder":5,"curCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","date":"2015-04-03 19:32:42","endLine":446,"groupId":"21075","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleKeyMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f8/b808dd485f5755ba404753c033c5be3ed2e6b3.src","preCode":"    public void testSingleKeyMultipleRanges()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"4e29b7a9a4736e7e70757dc514849c5af7e2d7d1","commitMessage":"@@@Share file handles between all instances of a SegmentedFile\n\npatch by stefania; reviewed by benedict for CASSANDRA-8893\n","date":"2015-04-03 19:32:42","modifiedFileCount":"28","status":"M","submitter":"Stefania Alborghetti"},{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":6,"curCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(store.metadata, i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(null);\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","date":"2015-06-30 18:47:01","endLine":439,"groupId":"10165","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/45/bca51246ec6d9024492ea56b08a4ca9e56cb48.src","preCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2014-09-02 00:54:46","commitOrder":6,"curCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(store.metadata, 205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(null);\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","date":"2015-06-30 18:47:01","endLine":467,"groupId":"27751","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleKeyMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/45/bca51246ec6d9024492ea56b08a4ca9e56cb48.src","preCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"M"}],"commitId":"a991b64811f4d6adb6c7b31c0df52288eb06cf19","commitMessage":"@@@Storage engine refactor.  a.k.a CASSANDRA-8099\n\nInitial patch.  see ticket for details\n","date":"2015-06-30 18:47:01","modifiedFileCount":"374","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2015-06-28 21:49:09","codes":[{"authorDate":"2015-06-28 21:49:09","commitOrder":7,"curCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(store.metadata, i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(null);\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","date":"2015-07-28 17:28:31","endLine":437,"groupId":"10165","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/27/2b62fbd973f6a874c30eb39c7da5daa670a5bb.src","preCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(store.metadata, i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(null);\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"},{"authorDate":"2015-06-28 21:49:09","commitOrder":7,"curCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(store.metadata, 205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(null);\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","date":"2015-07-28 17:28:31","endLine":465,"groupId":"27751","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleKeyMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/27/2b62fbd973f6a874c30eb39c7da5daa670a5bb.src","preCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(store.metadata, 205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getSSTables().size());\n        SSTableReader sstable = store.getSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(null);\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"}],"commitId":"ad8cad7c4d05fd5dea68fb274c81a102533ebe36","commitMessage":"@@@Make choice of SSTableReader types explicit\n\nAll accessors of a collection of SSTableReader must now\nspecify whether they desire the LIVE or CANONICAL set.  so\nthat no internal clients are accidentally exposed to a partial\nsstable they are not capable of safely handling.\n\npatch by benedict; reviewed by marcus for CASSANDRA-9699\n","date":"2015-07-28 17:28:31","modifiedFileCount":"60","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2016-02-25 01:55:18","codes":[{"authorDate":"2016-02-25 01:55:18","commitOrder":8,"curCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(store.metadata, i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(RateLimiter.create(Double.MAX_VALUE));\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","date":"2016-02-25 01:55:18","endLine":439,"groupId":"10165","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d7/3c278edf26a9ff5651e50f545694793b79a5e1.src","preCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(store.metadata, i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(null);\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2016-02-25 01:55:18","commitOrder":8,"curCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(store.metadata, 205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(RateLimiter.create(Double.MAX_VALUE));\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","date":"2016-02-25 01:55:18","endLine":467,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleKeyMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d7/3c278edf26a9ff5651e50f545694793b79a5e1.src","preCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(store.metadata, 205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(null);\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"M"}],"commitId":"c94a9f2362a8f87e9b1ec048a54ec570c61b29fe","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2016-02-25 01:55:18","modifiedFileCount":"8","status":"M","submitter":"Yuki Morishita"},{"authorTime":"2016-10-18 07:25:58","codes":[{"authorDate":"2016-10-18 07:25:58","commitOrder":9,"curCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(store.metadata, i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001));\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259));\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>());\n        assertFalse(scanner.hasNext());\n    }\n","date":"2016-10-18 07:25:58","endLine":429,"groupId":"28360","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/59/4efe926abbe4f45d758d055a58c430fc3ca3a4.src","preCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(store.metadata, i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(RateLimiter.create(Double.MAX_VALUE));\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209),\n                                                        null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159),\n                                     null);\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259),\n                                     null);\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>(), null);\n        assertFalse(scanner.hasNext());\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2016-10-18 07:25:58","commitOrder":9,"curCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(store.metadata, 205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209));\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","date":"2016-10-18 07:25:58","endLine":457,"groupId":"30281","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleKeyMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/59/4efe926abbe4f45d758d055a58c430fc3ca3a4.src","preCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(store.metadata, 205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner(RateLimiter.create(Double.MAX_VALUE));\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209), null);\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"}],"commitId":"f2a354763877cfeaf1dd017b84a7c8ee9eafd885","commitMessage":"@@@Clean up the SSTableReader#getScanner API wrt removal of RateLimiter\n\npatch by agrasso reviewed by dbrosius for cassandra-12422\n","date":"2016-10-18 07:25:58","modifiedFileCount":"9","status":"M","submitter":"Anthony Grasso"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":10,"curCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(store.metadata(), i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001));\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259));\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>());\n        assertFalse(scanner.hasNext());\n    }\n","date":"2017-01-28 06:17:46","endLine":428,"groupId":"101960","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/35/3b1ade28461387c3430bf69bd7823f827590fc.src","preCode":"    public void testMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        for (int i = 0; i < 3; i++)\n            for (int j = 2; j < 10; j++)\n                insertRowWithKey(store.metadata, i * 100 + j);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(1, 9,\n                                                                   101, 109,\n                                                                   201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(101, 109,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 9,\n                                                101, 109));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                101, 109,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 20,\n                                                101, 109,\n                                                201, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n\n        \r\n        scanner = sstable.getScanner(makeRanges(1, 5,\n                                                6, 205,\n                                                206, 209));\n        assertScanContainsRanges(scanner,\n                                 2, 5,\n                                 7, 9,\n                                 102, 109,\n                                 202, 205,\n                                 207, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                2, 20,\n                                                101, 109,\n                                                150, 159,\n                                                201, 209,\n                                                1000, 1001));\n        assertScanContainsRanges(scanner,\n                                 3, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(201, 209,\n                                                1, 20,\n                                                201, 209,\n                                                101, 109,\n                                                1000, 1001,\n                                                150, 159));\n        assertScanContainsRanges(scanner,\n                                 2, 9,\n                                 102, 109,\n                                 202, 209);\n\n        \r\n        scanner = sstable.getScanner(makeRanges(0, 1,\n                                                150, 159,\n                                                250, 259));\n        assertFalse(scanner.hasNext());\n\n        \r\n        scanner = sstable.getScanner(new ArrayList<Range<Token>>());\n        assertFalse(scanner.hasNext());\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":10,"curCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(store.metadata(), 205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209));\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","date":"2017-01-28 06:17:46","endLine":456,"groupId":"101960","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleKeyMultipleRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/35/3b1ade28461387c3430bf69bd7823f827590fc.src","preCode":"    public void testSingleKeyMultipleRanges() throws IOException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(TABLE);\n        store.clearUnsafe();\n\n        \r\n        store.disableAutoCompaction();\n\n        insertRowWithKey(store.metadata, 205);\n        store.forceBlockingFlush();\n\n        assertEquals(1, store.getLiveSSTables().size());\n        SSTableReader sstable = store.getLiveSSTables().iterator().next();\n\n        \r\n        ISSTableScanner fullScanner = sstable.getScanner();\n        assertScanContainsRanges(fullScanner, 205, 205);\n\n        \r\n        ISSTableScanner scanner = sstable.getScanner(makeRanges(101, 109,\n                                                                   201, 209));\n\n        \r\n        assertScanContainsRanges(scanner, 205, 205);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableScannerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"}]
