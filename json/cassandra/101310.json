[{"authorTime":"2011-03-03 03:39:49","codes":[{"authorDate":"2011-03-03 03:39:49","commitOrder":1,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","date":"2011-03-03 03:39:49","endLine":474,"groupId":"31683","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ef/7037e981a97645c5d130bc908dbfa1dcea5e54.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"B"},{"authorDate":"2011-03-03 03:39:49","commitOrder":1,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(endpointTokens.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(keyTokens.get(1)));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","date":"2011-03-03 03:39:49","endLine":604,"groupId":"31690","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ef/7037e981a97645c5d130bc908dbfa1dcea5e54.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(endpointTokens.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(keyTokens.get(1)));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":567,"status":"B"}],"commitId":"133acbb5910a47767adb6bcd198d5671fe1af611","commitMessage":"@@@optimize node movement within the same arc of the ring\npatch by Pavel Yaskevich; reviewed by Nick Bailey for CASSANDRA-1427\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@1076349 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-03-03 03:39:49","modifiedFileCount":"9","status":"B","submitter":"Jonathan Ellis"},{"authorTime":"2011-10-13 13:14:05","codes":[{"authorDate":"2011-03-03 03:39:49","commitOrder":2,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","date":"2011-03-03 03:39:49","endLine":474,"groupId":"31683","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ef/7037e981a97645c5d130bc908dbfa1dcea5e54.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"N"},{"authorDate":"2011-10-13 13:14:05","commitOrder":2,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(endpointTokens.get(2), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(keyTokens.get(1), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","date":"2011-10-13 13:14:05","endLine":612,"groupId":"31974","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/80/47841bf1307a6177fc164d6c72d5a43a6d1a28.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(endpointTokens.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(keyTokens.get(1)));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"M"}],"commitId":"e32c9879a1324e09d445d9cb8d71930359619616","commitMessage":"@@@merge from 1.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@1182654 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-10-13 13:14:05","modifiedFileCount":"64","status":"M","submitter":"Jonathan Ellis"},{"authorTime":"2012-03-18 18:17:28","codes":[{"authorDate":"2012-03-18 18:17:28","commitOrder":3,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","date":"2012-03-18 18:17:28","endLine":486,"groupId":"31683","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fa/a9e18b6c3375bd54e06d67257b975250924af3.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2012-03-18 18:17:28","commitOrder":3,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(endpointTokens.get(2), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(keyTokens.get(1), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","date":"2012-03-18 18:17:28","endLine":608,"groupId":"31974","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fa/a9e18b6c3375bd54e06d67257b975250924af3.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(endpointTokens.get(2), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(keyTokens.get(1), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n\n        ss.setPartitionerUnsafe(oldPartitioner);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"M"}],"commitId":"15ae2f6306406e8c68dbffe2987886c314665114","commitMessage":"@@@Merge branch 'cassandra-1.1' into trunk\n\nConflicts:\n\tsrc/java/org/apache/cassandra/db/migration/AddColumnFamily.java\n\tsrc/java/org/apache/cassandra/db/migration/AddKeyspace.java\n\tsrc/java/org/apache/cassandra/db/migration/DropColumnFamily.java\n\tsrc/java/org/apache/cassandra/db/migration/DropKeyspace.java\n\tsrc/java/org/apache/cassandra/db/migration/Migration.java\n\tsrc/java/org/apache/cassandra/db/migration/MigrationHelper.java\n\tsrc/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java\n\tsrc/java/org/apache/cassandra/db/migration/UpdateKeyspace.java\n\ttest/unit/org/apache/cassandra/io/sstable/SSTableTest.java\n","date":"2012-03-18 18:17:28","modifiedFileCount":"79","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2012-05-03 07:47:13","codes":[{"authorDate":"2012-05-03 07:47:13","commitOrder":4,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4), hostIds.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1), hostIds.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3), hostIds.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3), hostIds.get(2)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2), hostIds.get(3)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","date":"2012-05-03 07:47:13","endLine":490,"groupId":"13014","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/be/53b530e020e3edc15511fa006483b901591b28.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"M"},{"authorDate":"2012-05-03 07:47:13","commitOrder":4,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(endpointTokens.get(2), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1), hostIds.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(keyTokens.get(1), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","date":"2012-05-03 07:47:13","endLine":615,"groupId":"13019","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/be/53b530e020e3edc15511fa006483b901591b28.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(endpointTokens.get(2), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(keyTokens.get(1), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"}],"commitId":"ad685c4615b08725488fdf26c1dd248cfe196cf8","commitMessage":"@@@gossip host ID; Maintain a mapping of endpoint to ID\n\nPatch by eevans; reviewed by Brandon Williams for CASSANDRA-4120\n","date":"2012-05-03 07:47:13","modifiedFileCount":"13","status":"M","submitter":"Eric Evans"},{"authorTime":"2012-07-19 02:27:56","codes":[{"authorDate":"2012-07-19 02:27:56","commitOrder":5,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4)), hostIds.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1)), hostIds.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3)), hostIds.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3)),\n                                                                               hostIds.get(2)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2)),\n                                                                               hostIds.get(3)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","date":"2012-07-19 02:27:56","endLine":508,"groupId":"31683","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/3b/76c2ce6e52524a36af9cb9358c2dcdfe8e32e9.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4), hostIds.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1), hostIds.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3), hostIds.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3), hostIds.get(2)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2), hostIds.get(3)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"M"},{"authorDate":"2012-07-19 02:27:56","commitOrder":5,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1)), hostIds.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","date":"2012-07-19 02:27:56","endLine":637,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/3b/76c2ce6e52524a36af9cb9358c2dcdfe8e32e9.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(endpointTokens.get(2), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1), hostIds.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(keyTokens.get(1), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":601,"status":"M"}],"commitId":"66b96ee5357b639729b6f220b1d5453027b866c6","commitMessage":"@@@virtual nodes support for bootstrap and decommission\n\nPatch by Sam Overton and eevans; reviewed by Brandon Williams for CASSANDRA-4122\n","date":"2012-07-19 02:27:56","modifiedFileCount":"16","status":"M","submitter":"Eric Evans"},{"authorTime":"2012-09-04 23:41:58","codes":[{"authorDate":"2012-09-04 23:41:58","commitOrder":6,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(4))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(2))));\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2))));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","date":"2012-09-04 23:41:58","endLine":512,"groupId":"6391","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7e/2130c0f275c79a5e80a61d671cdac78954403b.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4)), hostIds.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1)), hostIds.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3)), hostIds.get(2)));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3)),\n                                                                               hostIds.get(2)));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2)),\n                                                                               hostIds.get(3)));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"},{"authorDate":"2012-09-04 23:41:58","commitOrder":6,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","date":"2012-09-04 23:41:58","endLine":645,"groupId":"6393","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7e/2130c0f275c79a5e80a61d671cdac78954403b.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1)), hostIds.get(3)));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"}],"commitId":"b475bc69b7e6d08e6d12527578552e67e8c0f88a","commitMessage":"@@@Binary encoding of tokens.\nAlso promotes new gossip states: HOST_ID and TOKENS\nPatch by brandonwilliams.  reviewed by eevans for CASSANDRA-4383\n","date":"2012-09-04 23:41:58","modifiedFileCount":"12","status":"M","submitter":"Brandon Williams"},{"authorTime":"2013-10-20 09:09:18","codes":[{"authorDate":"2013-10-20 09:09:18","commitOrder":7,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(4))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(3)));\n        assertNull(tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(2))));\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2))));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(keyTokens.get(3), tmd.getToken(hosts.get(2)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(keyTokens.get(2), tmd.getToken(hosts.get(3)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","date":"2013-10-20 09:09:18","endLine":512,"groupId":"5015","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9f/f08154d0c6ccd32246b281660ab5f3cc2f8bcb.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(4))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(2))));\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2))));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"},{"authorDate":"2013-10-20 09:09:18","commitOrder":7,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertEquals(1, tmd.getBootstrapTokens().size());\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","date":"2013-10-20 09:09:18","endLine":645,"groupId":"4019","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9f/f08154d0c6ccd32246b281660ab5f3cc2f8bcb.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertTrue(tmd.getBootstrapTokens().size() == 1);\n        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"}],"commitId":"d32f1eb2128296b2077db6bffa226535852c47b9","commitMessage":"@@@merge\n","date":"2013-10-20 09:09:18","modifiedFileCount":"5","status":"M","submitter":"Jonathan Ellis"},{"authorTime":"2014-11-21 23:58:28","codes":[{"authorDate":"2014-11-21 23:58:28","commitOrder":8,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(4))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(3)));\n        assertNull(tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(2))));\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2))));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(keyTokens.get(3), tmd.getToken(hosts.get(2)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(keyTokens.get(2), tmd.getToken(hosts.get(3)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","date":"2014-11-21 23:58:28","endLine":523,"groupId":"5015","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/4a/09b7ad0b29a15938d4bf396d054f3d1fd5f01c.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(4))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(3)));\n        assertNull(tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(2))));\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2))));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(keyTokens.get(3), tmd.getToken(hosts.get(2)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(keyTokens.get(2), tmd.getToken(hosts.get(3)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"M"},{"authorDate":"2014-11-21 23:58:28","commitOrder":8,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertEquals(1, tmd.getBootstrapTokens().size());\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","date":"2014-11-21 23:58:28","endLine":656,"groupId":"4019","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/4a/09b7ad0b29a15938d4bf396d054f3d1fd5f01c.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = new RandomPartitioner();\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertEquals(1, tmd.getBootstrapTokens().size());\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"M"}],"commitId":"07893d704598f7cbbc316c9a65a8c415e5404dfa","commitMessage":"@@@Remove hidden references to partitioner in Tokens\n\nPatch by blambov; reviewed by jmckenzie for CASSANDRA-8244\n","date":"2014-11-21 23:58:28","modifiedFileCount":"65","status":"M","submitter":"Branimir Lambov"},{"authorTime":"2017-11-10 00:33:48","codes":[{"authorDate":"2017-11-10 00:33:48","commitOrder":9,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddressAndPort> hosts = new ArrayList<>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(4))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(3)));\n        assertNull(tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(2))));\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2))));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(keyTokens.get(3), tmd.getToken(hosts.get(2)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(keyTokens.get(2), tmd.getToken(hosts.get(3)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","date":"2018-01-26 03:32:24","endLine":538,"groupId":"5015","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/8d/dc4f03df2c0dbf50fd7ecf0d869e3f7ac955af.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(4))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(3)));\n        assertNull(tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(2))));\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2))));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(keyTokens.get(3), tmd.getToken(hosts.get(2)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(keyTokens.get(2), tmd.getToken(hosts.get(3)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"M"},{"authorDate":"2017-11-10 00:33:48","commitOrder":9,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddressAndPort> hosts = new ArrayList<>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertEquals(1, tmd.getBootstrapTokens().size());\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","date":"2018-01-26 03:32:24","endLine":671,"groupId":"4019","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/8d/dc4f03df2c0dbf50fd7ecf0d869e3f7ac955af.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddress> hosts = new ArrayList<InetAddress>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertEquals(1, tmd.getBootstrapTokens().size());\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":633,"status":"M"}],"commitId":"59b5b6bef0fa76bf5740b688fcd4d9cf525760d0","commitMessage":"@@@Allow storage port to be configurable per node\n\nPatch by Ariel Weisberg; Reviewed by Jason Brown for CASSANDRA-7544\n","date":"2018-01-26 03:32:24","modifiedFileCount":"308","status":"M","submitter":"Ariel Weisberg"},{"authorTime":"2021-06-16 03:53:17","codes":[{"authorDate":"2021-06-16 03:53:17","commitOrder":10,"curCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        Gossiper.instance.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddressAndPort> hosts = new ArrayList<>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(4))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(3)));\n        assertNull(tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(2))));\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2))));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(keyTokens.get(3), tmd.getToken(hosts.get(2)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(keyTokens.get(2), tmd.getToken(hosts.get(3)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","date":"2021-06-16 03:53:17","endLine":536,"groupId":"101310","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"testStateJumpToBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/02/d625c05961c8b046c7a67039aa10feb8eb0bec.src","preCode":"    public void testStateJumpToBootstrap() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddressAndPort> hosts = new ArrayList<>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.leaving(Collections.singleton(endpointTokens.get(2))));\n\n        \r\n        \r\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertTrue(tmd.isLeaving(hosts.get(2)));\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(4))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(4))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2),\n                    ApplicationState.STATUS,\n                    valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(3))));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(hosts.get(2), tmd.getBootstrapTokens().get(keyTokens.get(3)));\n        assertNull(tmd.getBootstrapTokens().get(keyTokens.get(4)));\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(2))));\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(3))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(Collections.singleton(keyTokens.get(2))));\n\n        assertTrue(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n        assertEquals(keyTokens.get(3), tmd.getToken(hosts.get(2)));\n        assertTrue(tmd.isMember(hosts.get(3)));\n        assertFalse(tmd.isLeaving(hosts.get(3)));\n        assertEquals(keyTokens.get(2), tmd.getToken(hosts.get(3)));\n\n        assertTrue(tmd.getBootstrapTokens().isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"M"},{"authorDate":"2021-06-16 03:53:17","commitOrder":10,"curCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        Gossiper.instance.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddressAndPort> hosts = new ArrayList<>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertEquals(1, tmd.getBootstrapTokens().size());\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","date":"2021-06-16 03:53:17","endLine":672,"groupId":"101310","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"testStateJumpToLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/02/d625c05961c8b046c7a67039aa10feb8eb0bec.src","preCode":"    public void testStateJumpToLeft() throws UnknownHostException\n    {\n        StorageService ss = StorageService.instance;\n        TokenMetadata tmd = ss.getTokenMetadata();\n        tmd.clearUnsafe();\n        IPartitioner partitioner = RandomPartitioner.instance;\n        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);\n\n        ArrayList<Token> endpointTokens = new ArrayList<Token>();\n        ArrayList<Token> keyTokens = new ArrayList<Token>();\n        List<InetAddressAndPort> hosts = new ArrayList<>();\n        List<UUID> hostIds = new ArrayList<UUID>();\n\n        \r\n        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 7);\n\n        \r\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(endpointTokens.get(2)), Gossiper.computeExpireTime()));\n\n        assertFalse(tmd.isMember(hosts.get(2)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(3), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));\n\n        assertFalse(tmd.isMember(hosts.get(3)));\n        assertEquals(1, tmd.getBootstrapTokens().size());\n        assertEquals(hosts.get(3), tmd.getBootstrapTokens().get(keyTokens.get(1)));\n\n        \r\n        Gossiper.instance.injectApplicationState(hosts.get(2), ApplicationState.TOKENS, valueFactory.tokens(Collections.singleton(keyTokens.get(1))));\n        ss.onChange(hosts.get(2), ApplicationState.STATUS,\n                valueFactory.left(Collections.singleton(keyTokens.get(1)), Gossiper.computeExpireTime()));\n\n        assertTrue(tmd.getBootstrapTokens().size() == 0);\n        assertFalse(tmd.isMember(hosts.get(2)));\n        assertFalse(tmd.isLeaving(hosts.get(2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":633,"status":"M"}],"commitId":"597558f4e3743c8887434b526377900de3ba3f3f","commitMessage":"@@@Merge branch 'cassandra-4.0' into trunk\n","date":"2021-06-16 03:53:17","modifiedFileCount":"2","status":"M","submitter":"Brandon Williams"}]
