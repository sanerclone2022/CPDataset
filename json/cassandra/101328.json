[{"authorTime":"2014-09-17 22:48:14","codes":[{"authorDate":"2014-09-17 22:48:14","commitOrder":1,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.newKeyspace(\"Keyspace1\", \"NetworkTopologyStrategy\", configOptions, false);\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","date":"2014-09-17 22:48:14","endLine":257,"groupId":"20699","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/84/b7a3c7d71c55f36d0ef7580c7b7c5caa81fe63.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.newKeyspace(\"Keyspace1\", \"NetworkTopologyStrategy\", configOptions, false);\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"B"},{"authorDate":"2014-09-17 22:48:14","commitOrder":1,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.newKeyspace(\"Keyspace1\", \"NetworkTopologyStrategy\", configOptions, false);\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","date":"2014-09-17 22:48:14","endLine":399,"groupId":"5686","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithVnodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/84/b7a3c7d71c55f36d0ef7580c7b7c5caa81fe63.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.newKeyspace(\"Keyspace1\", \"NetworkTopologyStrategy\", configOptions, false);\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"B"}],"commitId":"87ba0dc1bce26ab97f5dd26edfd4a5c91ef9df48","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n","date":"2014-09-17 22:48:14","modifiedFileCount":"3","status":"B","submitter":"Yuki Morishita"},{"authorTime":"2015-07-01 01:38:39","codes":[{"authorDate":"2015-07-01 01:38:39","commitOrder":2,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(KeyspaceParams.Replication.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","date":"2015-07-01 21:36:12","endLine":265,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/3e/c6264d6ec566f8cdf6e94247aecdf258fc7f1a.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.newKeyspace(\"Keyspace1\", \"NetworkTopologyStrategy\", configOptions, false);\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2015-07-01 01:38:39","commitOrder":2,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(KeyspaceParams.Replication.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","date":"2015-07-01 21:36:12","endLine":409,"groupId":"5686","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithVnodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/3e/c6264d6ec566f8cdf6e94247aecdf258fc7f1a.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.newKeyspace(\"Keyspace1\", \"NetworkTopologyStrategy\", configOptions, false);\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"31e3f612b113a76ca8c04a3a86aa6df3915ad055","commitMessage":"@@@Factor out KSMetaData.KeyspaceParams\n\npatch by Aleksey Yeschenko; reviewed by Robert Stupp for CASSANDRA-9677\n","date":"2015-07-01 21:36:12","modifiedFileCount":"91","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2015-07-01 22:18:12","codes":[{"authorDate":"2015-07-01 22:18:12","commitOrder":3,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(KeyspaceParams.Replication.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceMetadata(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","date":"2015-07-01 23:55:10","endLine":265,"groupId":"4632","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/62/4ec29c3d10bbb9e77cc7819347153e133ba38e.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(KeyspaceParams.Replication.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2015-07-01 22:18:12","commitOrder":3,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(KeyspaceParams.Replication.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceMetadata(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","date":"2015-07-01 23:55:10","endLine":409,"groupId":"5686","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithVnodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/62/4ec29c3d10bbb9e77cc7819347153e133ba38e.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(KeyspaceParams.Replication.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KSMetaData meta = KSMetaData.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceDefinition(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"a89597da137ad55a5a1b5268ff414c3c1effce10","commitMessage":"@@@Rename and move config.KSMetaData to schema.KeyspaceMetadata\n\npatch by Aleksey Yeschenko; reviewed by Robert Stupp for CASSANDRA-9677\n","date":"2015-07-01 23:55:10","modifiedFileCount":"41","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2015-08-04 17:16:04","codes":[{"authorDate":"2015-08-04 17:16:04","commitOrder":4,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceMetadata(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","date":"2015-08-04 17:16:04","endLine":339,"groupId":"5685","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/39/2b6f4976877ba7245ab16361ee491acbcb301e.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(KeyspaceParams.Replication.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceMetadata(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"},{"authorDate":"2015-08-04 17:16:04","commitOrder":4,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceMetadata(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","date":"2015-08-04 17:16:04","endLine":483,"groupId":"5686","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithVnodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/39/2b6f4976877ba7245ab16361ee491acbcb301e.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(KeyspaceParams.Replication.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceMetadata(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"}],"commitId":"becee6ae4a04f76d5998de1814c9d6e0164d998d","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-08-04 17:16:04","modifiedFileCount":"79","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":5,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","date":"2017-01-28 06:17:46","endLine":348,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/3e/f7bbb6de291b8ea037f35b8fc30a7be4ccb026.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceMetadata(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":5,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","date":"2017-01-28 06:17:46","endLine":492,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithVnodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/3e/f7bbb6de291b8ea037f35b8fc30a7be4ccb026.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.setKeyspaceMetadata(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2017-11-10 00:33:48","codes":[{"authorDate":"2017-11-10 00:33:48","commitOrder":6,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddressAndPort.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddressAndPort.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddressAndPort.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddressAndPort.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddressAndPort.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","date":"2018-01-26 03:32:24","endLine":348,"groupId":"2377","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/38/84f5adb70adab7af48b019870a028dbcfc158c.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddress.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddress.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddress.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddress.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddress.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"},{"authorDate":"2017-11-10 00:33:48","commitOrder":6,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddressAndPort, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddressAndPort, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","date":"2018-01-26 03:32:24","endLine":492,"groupId":"2368","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithVnodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/38/84f5adb70adab7af48b019870a028dbcfc158c.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddress, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddress.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddress, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddress.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"}],"commitId":"59b5b6bef0fa76bf5740b688fcd4d9cf525760d0","commitMessage":"@@@Allow storage port to be configurable per node\n\nPatch by Ariel Weisberg; Reviewed by Jason Brown for CASSANDRA-7544\n","date":"2018-01-26 03:32:24","modifiedFileCount":"308","status":"M","submitter":"Ariel Weisberg"},{"authorTime":"2021-04-09 15:55:27","codes":[{"authorDate":"2021-04-09 15:55:27","commitOrder":7,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddressAndPort.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddressAndPort.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddressAndPort.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddressAndPort.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.1\"));\n        Assertions.assertThat(primaryRanges).isEmpty();\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddressAndPort.getByName(\"127.0.0.2\"));\n        Assertions.assertThat(primaryRanges).isEmpty();\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.4\"));\n        Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(2);\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\")));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.5\"));\n        Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(2);\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\")));\n    }\n","date":"2021-04-13 17:30:13","endLine":395,"groupId":"101328","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/071b400b71d84e6a8a426f7589c08567c4d92a.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n        \r\n        metadata.updateNormalToken(new StringToken(\"A\"), InetAddressAndPort.getByName(\"127.0.0.1\"));\n        metadata.updateNormalToken(new StringToken(\"C\"), InetAddressAndPort.getByName(\"127.0.0.2\"));\n        \r\n        metadata.updateNormalToken(new StringToken(\"B\"), InetAddressAndPort.getByName(\"127.0.0.4\"));\n        metadata.updateNormalToken(new StringToken(\"D\"), InetAddressAndPort.getByName(\"127.0.0.5\"));\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.1\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,\n                                                                                   InetAddressAndPort.getByName(\"127.0.0.2\"));\n        assertTrue(primaryRanges.isEmpty());\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.4\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 2);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"},{"authorDate":"2021-04-09 15:55:27","commitOrder":7,"curCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddressAndPort, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddressAndPort, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.1\"));\n        Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(8);\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\")));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.2\"));\n        Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(4);\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\")));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.4\"));\n        Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(4);\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\")));\n        \r\n        \r\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\")));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.5\"));\n        Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(8);\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\")));\n        \r\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\")));\n        \r\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\")));\n        \r\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\")));\n        Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\")));\n    }\n","date":"2021-04-13 17:30:13","endLine":539,"groupId":"101328","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryRangeForEndpointWithinDCWithVnodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/071b400b71d84e6a8a426f7589c08567c4d92a.src","preCode":"    public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception\n    {\n        TokenMetadata metadata = StorageService.instance.getTokenMetadata();\n        metadata.clearUnsafe();\n\n        \r\n        Multimap<InetAddressAndPort, Token> dc1 = HashMultimap.create();\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.1\"), new StringToken(\"A\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.1\"), new StringToken(\"E\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.1\"), new StringToken(\"H\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.2\"), new StringToken(\"C\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.2\"), new StringToken(\"I\"));\n        dc1.put(InetAddressAndPort.getByName(\"127.0.0.2\"), new StringToken(\"J\"));\n        metadata.updateNormalTokens(dc1);\n\n        \r\n        Multimap<InetAddressAndPort, Token> dc2 = HashMultimap.create();\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.4\"), new StringToken(\"B\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.4\"), new StringToken(\"G\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.4\"), new StringToken(\"L\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.5\"), new StringToken(\"D\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.5\"), new StringToken(\"F\"));\n        dc2.put(InetAddressAndPort.getByName(\"127.0.0.5\"), new StringToken(\"K\"));\n        metadata.updateNormalTokens(dc2);\n\n        Map<String, String> configOptions = new HashMap<>();\n        configOptions.put(\"DC1\", \"1\");\n        configOptions.put(\"DC2\", \"2\");\n        configOptions.put(ReplicationParams.CLASS, \"NetworkTopologyStrategy\");\n\n        Keyspace.clear(\"Keyspace1\");\n        KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\", KeyspaceParams.create(false, configOptions));\n        Schema.instance.load(meta);\n\n        \r\n        Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.1\"));\n        assertEquals(8, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.2\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n\n        \r\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.4\"));\n        assertEquals(4, primaryRanges.size());\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"), new StringToken(\"B\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"F\"), new StringToken(\"G\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"K\"), new StringToken(\"L\"))));\n        \r\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"L\"), new StringToken(\"A\"))));\n\n        primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddressAndPort.getByName(\"127.0.0.5\"));\n        assertTrue(primaryRanges.size() == 8);\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"), new StringToken(\"D\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"E\"), new StringToken(\"F\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"J\"), new StringToken(\"K\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"), new StringToken(\"E\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"G\"), new StringToken(\"H\"))));\n        \r\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"), new StringToken(\"C\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"H\"), new StringToken(\"I\"))));\n        assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"I\"), new StringToken(\"J\"))));\n    }\n","realPath":"test/unit/org/apache/cassandra/service/StorageServiceServerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"}],"commitId":"44f5b8adf53f31c793a35387004f26f87c8b936d","commitMessage":"@@@Flaky StorageServiceServerTest\n\npatch by Berenguer Blasi; reviewed by Michael Semb Wever for CASSANDRA-16569\n","date":"2021-04-13 17:30:13","modifiedFileCount":"1","status":"M","submitter":"Bereng"}]
