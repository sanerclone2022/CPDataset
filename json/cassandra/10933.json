[{"authorTime":"2015-12-04 17:10:42","codes":[{"authorDate":"2015-12-04 17:10:42","commitOrder":1,"curCode":"    Row makeRow(Clustering clustering, String colValue)\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(cfm, defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","date":"2015-12-04 17:10:42","endLine":109,"groupId":"11987","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeRow","params":"(Clusteringclustering@StringcolValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f2/15331f6ea07dbd5adffbb171e7e7f5cd66d98e.src","preCode":"    Row makeRow(Clustering clustering, String colValue)\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(cfm, defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2015-12-04 17:10:42","commitOrder":1,"curCode":"    Row makeStaticRow()\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(cfm, defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","date":"2015-12-04 17:10:42","endLine":118,"groupId":"11988","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeStaticRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f2/15331f6ea07dbd5adffbb171e7e7f5cd66d98e.src","preCode":"    Row makeStaticRow()\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(cfm, defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"}],"commitId":"220f253fb30809f55368a30e2594735bc8362718","commitMessage":"@@@Merge branch 'cassandra-3.1' into trunk\n","date":"2015-12-04 17:10:42","modifiedFileCount":"3","status":"B","submitter":"Sylvain Lebresne"},{"authorTime":"2016-03-07 22:01:17","codes":[{"authorDate":"2016-03-07 22:01:17","commitOrder":2,"curCode":"    Row makeRow(Clustering clustering, String colValue)\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","date":"2016-03-07 22:01:17","endLine":109,"groupId":"11987","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"makeRow","params":"(Clusteringclustering@StringcolValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6c/bab7ac65abcbee08821b07747772d54a7d9bb7.src","preCode":"    Row makeRow(Clustering clustering, String colValue)\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(cfm, defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2016-03-07 22:01:17","commitOrder":2,"curCode":"    Row makeStaticRow()\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","date":"2016-03-07 22:01:17","endLine":118,"groupId":"29621","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeStaticRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6c/bab7ac65abcbee08821b07747772d54a7d9bb7.src","preCode":"    Row makeStaticRow()\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(cfm, defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"e017f9494844234fa73848890347f59c622cea40","commitMessage":"@@@Allow to remove TTLs on table with default_time_to_live\n\npatch by Benjamin Lerer; reviewed by Tyler Hobbs for CASSANDRA-11207\n","date":"2016-03-07 22:01:17","modifiedFileCount":"30","status":"M","submitter":"Benjamin Lerer"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":3,"curCode":"    Row makeRow(Clustering clustering, String colValue)\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","date":"2017-01-28 06:17:46","endLine":108,"groupId":"11987","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"makeRow","params":"(Clusteringclustering@StringcolValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7b/dfdb521279e43120640f7e8f1546ffa5fc7f6d.src","preCode":"    Row makeRow(Clustering clustering, String colValue)\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":3,"curCode":"    Row makeStaticRow()\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","date":"2017-01-28 06:17:46","endLine":117,"groupId":"29621","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"makeStaticRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7b/dfdb521279e43120640f7e8f1546ffa5fc7f6d.src","preCode":"    Row makeStaticRow()\n    {\n        ColumnDefinition defCol = cfm.getColumnDefinition(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2018-07-27 02:11:17","codes":[{"authorDate":"2018-07-27 02:11:17","commitOrder":4,"curCode":"    Row makeRow(Clustering clustering, String colValue)\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder();\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","date":"2018-08-23 21:14:07","endLine":108,"groupId":"15864","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"makeRow","params":"(Clusteringclustering@StringcolValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/625480803b70707c0bd8d89cddf05307d284ca.src","preCode":"    Row makeRow(Clustering clustering, String colValue)\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2018-07-27 02:11:17","commitOrder":4,"curCode":"    Row makeStaticRow()\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder();\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","date":"2018-08-23 21:14:07","endLine":117,"groupId":"7441","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"makeStaticRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/625480803b70707c0bd8d89cddf05307d284ca.src","preCode":"    Row makeStaticRow()\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder(TIMESTAMP);\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"e225c88a65f2e8091f8ea6212c291416674882a1","commitMessage":"@@@Cell reconciliation should not depend on nowInSec\n\npatch by Benedict; reviewed by Aleksey for CASSANDRA-14592\n","date":"2018-08-23 21:14:07","modifiedFileCount":"28","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2018-07-27 02:11:17","codes":[{"authorDate":"2019-10-16 04:04:26","commitOrder":5,"curCode":"    Row makeRow(Clustering<?> clustering, String colValue)\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder();\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","date":"2020-09-14 23:32:44","endLine":133,"groupId":"10933","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"makeRow","params":"(Clustering<?>clustering@StringcolValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ef/fc54fcfcb6b32123631b11e6bb91c1d0e727e0.src","preCode":"    Row makeRow(Clustering clustering, String colValue)\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder();\n        row.newRow(clustering);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(colValue)));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2018-07-27 02:11:17","commitOrder":5,"curCode":"    Row makeStaticRow()\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder();\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","date":"2018-08-23 21:14:07","endLine":117,"groupId":"10933","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"makeStaticRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/625480803b70707c0bd8d89cddf05307d284ca.src","preCode":"    Row makeStaticRow()\n    {\n        ColumnMetadata defCol = metadata.getColumn(new ColumnIdentifier(\"static_col\", true));\n        Row.Builder row = BTreeRow.unsortedBuilder();\n        row.newRow(Clustering.STATIC_CLUSTERING);\n        row.addCell(BufferCell.live(defCol, TIMESTAMP, ByteBufferUtil.bytes(\"static value\")));\n        return row.build();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/partition/PartitionImplementationTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"}],"commitId":"ccab496d2d37c86341d364dea6c27513fda27331","commitMessage":"@@@Add byte array backed cells\n\nPatch by Blake Eggleston; reviewed by Caleb Rackliffe and Marcus Eriksson for CASSANDRA-15393\n","date":"2020-09-14 23:32:44","modifiedFileCount":"278","status":"M","submitter":"Blake Eggleston"}]
