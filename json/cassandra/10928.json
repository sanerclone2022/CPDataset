[{"authorTime":"2021-03-01 20:48:32","codes":[{"authorDate":"2021-03-01 20:48:32","commitOrder":1,"curCode":"    public void testSelectIndividualCells()\n    {\n        ColumnFilter filter = ColumnFilter.selectionBuilder().select(v2, path1).select(v2, path3).build();\n        testRoundTrips(filter);\n        assertEquals(\"[v2[1], v2[3]]\", filter.toString());\n        assertFetchedQueried(true, true, filter, v2);\n        assertFetchedQueried(false, false, filter, v1, s1, s2);\n        assertCellFetchedQueried(true, true, filter, v2, path1, path3);\n        assertCellFetchedQueried(false, false, filter, v2, path0, path2, path4);\n        assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n    }\n","date":"2021-03-01 20:48:32","endLine":222,"groupId":"14006","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectIndividualCells","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a9/6aa57e16442e94530ea996f66846c7d2ed0b5e.src","preCode":"    public void testSelectIndividualCells()\n    {\n        ColumnFilter filter = ColumnFilter.selectionBuilder().select(v2, path1).select(v2, path3).build();\n        testRoundTrips(filter);\n        assertEquals(\"[v2[1], v2[3]]\", filter.toString());\n        assertFetchedQueried(true, true, filter, v2);\n        assertFetchedQueried(false, false, filter, v1, s1, s2);\n        assertCellFetchedQueried(true, true, filter, v2, path1, path3);\n        assertCellFetchedQueried(false, false, filter, v2, path0, path2, path4);\n        assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2021-03-01 20:48:32","commitOrder":1,"curCode":"    public void testSelectCellSlice()\n    {\n        ColumnFilter filter = ColumnFilter.selectionBuilder().slice(v2, path1, path3).build();\n        testRoundTrips(filter);\n        assertEquals(\"[v2[1:3]]\", filter.toString());\n        assertFetchedQueried(true, true, filter, v2);\n        assertFetchedQueried(false, false, filter, v1, s1, s2);\n        assertCellFetchedQueried(true, true, filter, v2, path1, path2, path3);\n        assertCellFetchedQueried(false, false, filter, v2, path0, path4);\n        assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n    }\n","date":"2021-03-01 20:48:32","endLine":248,"groupId":"14016","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectCellSlice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a9/6aa57e16442e94530ea996f66846c7d2ed0b5e.src","preCode":"    public void testSelectCellSlice()\n    {\n        ColumnFilter filter = ColumnFilter.selectionBuilder().slice(v2, path1, path3).build();\n        testRoundTrips(filter);\n        assertEquals(\"[v2[1:3]]\", filter.toString());\n        assertFetchedQueried(true, true, filter, v2);\n        assertFetchedQueried(false, false, filter, v1, s1, s2);\n        assertCellFetchedQueried(true, true, filter, v2, path1, path2, path3);\n        assertCellFetchedQueried(false, false, filter, v2, path0, path4);\n        assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"B"}],"commitId":"d1f3d40afc5d20bab70c6200508baa3cd9409458","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2021-03-01 20:48:32","modifiedFileCount":"13","status":"B","submitter":"Andr?s de la Pe?a"},{"authorTime":"2021-03-11 01:34:20","codes":[{"authorDate":"2021-03-11 01:34:20","commitOrder":2,"curCode":"    public void testSelectIndividualCells()\n    {\n        ColumnFilter filter = ColumnFilter.selectionBuilder().select(v2, path1).select(v2, path3).build();\n        testRoundTrips(filter);\n        assertEquals(\"[v2[1], v2[3]]\", filter.toString());\n        assertEquals(\"v2[1], v2[3]\", filter.toCQLString());\n        assertFetchedQueried(true, true, filter, v2);\n        assertFetchedQueried(false, false, filter, v1, s1, s2);\n        assertCellFetchedQueried(true, true, filter, v2, path1, path3);\n        assertCellFetchedQueried(false, false, filter, v2, path0, path2, path4);\n        assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n    }\n","date":"2021-03-11 01:34:20","endLine":250,"groupId":"10928","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectIndividualCells","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/19/4a92fce9917d4aa1ec68af16bfabd4a7115a7a.src","preCode":"    public void testSelectIndividualCells()\n    {\n        ColumnFilter filter = ColumnFilter.selectionBuilder().select(v2, path1).select(v2, path3).build();\n        testRoundTrips(filter);\n        assertEquals(\"[v2[1], v2[3]]\", filter.toString());\n        assertFetchedQueried(true, true, filter, v2);\n        assertFetchedQueried(false, false, filter, v1, s1, s2);\n        assertCellFetchedQueried(true, true, filter, v2, path1, path3);\n        assertCellFetchedQueried(false, false, filter, v2, path0, path2, path4);\n        assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2021-03-11 01:34:20","commitOrder":2,"curCode":"    public void testSelectCellSlice()\n    {\n        ColumnFilter filter = ColumnFilter.selectionBuilder().slice(v2, path1, path3).build();\n        testRoundTrips(filter);\n        assertEquals(\"[v2[1:3]]\", filter.toString());\n        assertEquals(\"v2[1:3]\", filter.toCQLString());\n        assertFetchedQueried(true, true, filter, v2);\n        assertFetchedQueried(false, false, filter, v1, s1, s2);\n        assertCellFetchedQueried(true, true, filter, v2, path1, path2, path3);\n        assertCellFetchedQueried(false, false, filter, v2, path0, path4);\n        assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n    }\n","date":"2021-03-11 01:34:20","endLine":278,"groupId":"10928","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectCellSlice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/19/4a92fce9917d4aa1ec68af16bfabd4a7115a7a.src","preCode":"    public void testSelectCellSlice()\n    {\n        ColumnFilter filter = ColumnFilter.selectionBuilder().slice(v2, path1, path3).build();\n        testRoundTrips(filter);\n        assertEquals(\"[v2[1:3]]\", filter.toString());\n        assertFetchedQueried(true, true, filter, v2);\n        assertFetchedQueried(false, false, filter, v1, s1, s2);\n        assertCellFetchedQueried(true, true, filter, v2, path1, path2, path3);\n        assertCellFetchedQueried(false, false, filter, v2, path0, path4);\n        assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"0e990d7231f6152e95d5c21a6660594fc9a507bb","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2021-03-11 01:34:20","modifiedFileCount":"4","status":"M","submitter":"Andr?s de la Pe?a"}]
