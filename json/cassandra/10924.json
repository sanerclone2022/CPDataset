[{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":1,"curCode":"    public void testIntersectsSingleSlice()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 4, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1, 2));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 3, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 3, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 3));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 3));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 2, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 2, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 2), makeBound(ek, 1, 1, 3));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(2, 2, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n    }\n","date":"2015-06-30 18:47:01","endLine":310,"groupId":"367","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersectsSingleSlice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2f/07a240c31472fe341c49aad79cfedc550f7fdd.src","preCode":"    public void testIntersectsSingleSlice()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 4, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1, 2));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 3, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 3, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 3));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 3));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 2, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 2, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 2), makeBound(ek, 1, 1, 3));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(2, 2, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/SliceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2014-09-02 00:54:46","commitOrder":1,"curCode":"    public void testDifferentMinMaxLengths()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 2, 3));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1, 2, 3), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3, 4, 5));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 0, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n    }\n","date":"2015-06-30 18:47:01","endLine":352,"groupId":"367","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDifferentMinMaxLengths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2f/07a240c31472fe341c49aad79cfedc550f7fdd.src","preCode":"    public void testDifferentMinMaxLengths()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 2, 3));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1, 2, 3), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3, 4, 5));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 0, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/SliceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"B"}],"commitId":"a991b64811f4d6adb6c7b31c0df52288eb06cf19","commitMessage":"@@@Storage engine refactor.  a.k.a CASSANDRA-8099\n\nInitial patch.  see ticket for details\n","date":"2015-06-30 18:47:01","modifiedFileCount":"374","status":"B","submitter":"Sylvain Lebresne"},{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2018-11-07 07:50:05","commitOrder":2,"curCode":"    public void testIntersectsSingleSlice()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 4, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1, 2));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n    }\n","date":"2018-11-07 07:50:33","endLine":266,"groupId":"367","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersectsSingleSlice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/91/88c94f7c47eec1321c7401cee6cef2c9357cd7.src","preCode":"    public void testIntersectsSingleSlice()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 4, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1, 2));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 3, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 3, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 3));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 3));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 2, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 2, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2, 0), makeBound(ek, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 2), makeBound(ek, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 2), makeBound(ek, 1, 1, 3));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(2, 2, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/SliceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2014-09-02 00:54:46","commitOrder":2,"curCode":"    public void testDifferentMinMaxLengths()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 2, 3));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1, 2, 3), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3, 4, 5));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 0, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n    }\n","date":"2015-06-30 18:47:01","endLine":352,"groupId":"367","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDifferentMinMaxLengths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2f/07a240c31472fe341c49aad79cfedc550f7fdd.src","preCode":"    public void testDifferentMinMaxLengths()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 2, 3));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1, 2, 3), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3, 4, 5));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 0, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/SliceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"N"}],"commitId":"3ebeef6d21d5feeb5305335b8ec9a7a3b3ef6311","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2018-11-07 07:50:33","modifiedFileCount":"4","status":"M","submitter":"Blake Eggleston"},{"authorTime":"2018-10-26 04:12:02","codes":[{"authorDate":"2018-10-26 04:12:02","commitOrder":3,"curCode":"    public void testIntersectsSingleSlice()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 4, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1, 2));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n    }\n","date":"2018-12-14 06:20:45","endLine":267,"groupId":"10924","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersectsSingleSlice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6c/0450007ad98958208e55acbf65fe6be7588506.src","preCode":"    public void testIntersectsSingleSlice()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 1, 1), columnNames(3, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 4, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 4, 0), makeBound(ek, 1));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(0, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(1, 1, 1)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1, 2));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2, 0, 0), makeBound(ek, 3));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 1, 1));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 2, 0, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 0, 0)));\n\n        \r\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames()));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(2, 0, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 0, 0), makeBound(ek, 0, 0, 0));\n        assertFalse(slice.intersects(cc, columnNames(1, 1, 0), columnNames(3, 0, 0)));\n\n        slice = Slice.make(makeBound(sk, 1, 1, 1), makeBound(ek, 1, 1, 0));\n        assertTrue(slice.intersects(cc, columnNames(1, 0, 0), columnNames(2, 2, 2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/SliceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2018-10-26 04:12:02","commitOrder":3,"curCode":"    public void testDifferentMinMaxLengths()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 2, 3));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1, 2, 3), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3, 4, 5));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 0, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n    }\n","date":"2018-12-14 06:20:45","endLine":309,"groupId":"10924","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDifferentMinMaxLengths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6c/0450007ad98958208e55acbf65fe6be7588506.src","preCode":"    public void testDifferentMinMaxLengths()\n    {\n        List<AbstractType<?>> types = new ArrayList<>();\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        types.add(Int32Type.instance);\n        ClusteringComparator cc = new ClusteringComparator(types);\n\n        ClusteringPrefix.Kind sk = ClusteringPrefix.Kind.INCL_START_BOUND;\n        ClusteringPrefix.Kind ek = ClusteringPrefix.Kind.INCL_END_BOUND;\n\n        \r\n        Slice slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n\n        slice = Slice.make(makeBound(sk), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1), makeBound(ek, 1));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 1, 2, 3));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 1, 2, 3), makeBound(ek, 2));\n        assertTrue(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        \r\n        slice = Slice.make(makeBound(sk, 2), makeBound(ek, 3, 4, 5));\n        assertFalse(slice.intersects(cc, columnNames(), columnNames(1)));\n\n        slice = Slice.make(makeBound(sk, 0), makeBound(ek, 0, 1, 2));\n        assertFalse(slice.intersects(cc, columnNames(1), columnNames(1, 2)));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/SliceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"}],"commitId":"a41b861fa4d4acfbcce13dd62b1e8f48be22f8ed","commitMessage":"@@@Catch empty/invalid bounds in SelectStatement\n\nPatch by Blake Eggleston; Reviewed by Aleksey Yeschenko for CASSANDRA-14849\n","date":"2018-12-14 06:20:45","modifiedFileCount":"4","status":"M","submitter":"Blake Eggleston"}]
