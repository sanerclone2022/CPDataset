[{"authorTime":"2015-06-09 17:08:24","codes":[{"authorDate":"2015-06-09 17:08:24","commitOrder":1,"curCode":"    public void testDifferentSizeBuffersOnOneChunk()\n    {\n        int[] sizes = new int[] {\n            5, 1024, 4096, 8, 16000, 78, 512, 256, 63, 55, 89, 90, 255, 32, 2048, 128\n        };\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += BufferPool.currentChunk().roundUp(buffer.capacity());\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.currentChunk();\n        assertNotNull(chunk);\n\n        Random rnd = new Random();\n        rnd.setSeed(298347529L);\n        while (!buffers.isEmpty())\n        {\n            int index = rnd.nextInt(buffers.size());\n            ByteBuffer buffer = buffers.remove(index);\n\n            BufferPool.put(buffer);\n        }\n\n        assertEquals(null, BufferPool.currentChunk());\n        assertEquals(0, chunk.free());\n    }\n","date":"2015-06-09 17:08:24","endLine":368,"groupId":"14794","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDifferentSizeBuffersOnOneChunk","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/20/8cd32d6a3b3b75bc429ab469ff2a6aad74780a.src","preCode":"    public void testDifferentSizeBuffersOnOneChunk()\n    {\n        int[] sizes = new int[] {\n            5, 1024, 4096, 8, 16000, 78, 512, 256, 63, 55, 89, 90, 255, 32, 2048, 128\n        };\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += BufferPool.currentChunk().roundUp(buffer.capacity());\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.currentChunk();\n        assertNotNull(chunk);\n\n        Random rnd = new Random();\n        rnd.setSeed(298347529L);\n        while (!buffers.isEmpty())\n        {\n            int index = rnd.nextInt(buffers.size());\n            ByteBuffer buffer = buffers.remove(index);\n\n            BufferPool.put(buffer);\n        }\n\n        assertEquals(null, BufferPool.currentChunk());\n        assertEquals(0, chunk.free());\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/memory/BufferPoolTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"B"},{"authorDate":"2015-06-09 17:08:24","commitOrder":1,"curCode":"    public void testChunkExhausted()\n    {\n        final int size = BufferPool.CHUNK_SIZE / 64; \r\n        int[] sizes = new int[128];\n        Arrays.fill(sizes, size);\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += buffer.capacity();\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.currentChunk();\n        assertNotNull(chunk);\n\n        for (int i = 0; i < sizes.length; i++)\n        {\n            BufferPool.put(buffers.get(i));\n        }\n\n        assertEquals(null, BufferPool.currentChunk());\n        assertEquals(0, chunk.free());\n    }\n","date":"2015-06-09 17:08:24","endLine":402,"groupId":"14793","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testChunkExhausted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/20/8cd32d6a3b3b75bc429ab469ff2a6aad74780a.src","preCode":"    public void testChunkExhausted()\n    {\n        final int size = BufferPool.CHUNK_SIZE / 64; \r\n        int[] sizes = new int[128];\n        Arrays.fill(sizes, size);\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += buffer.capacity();\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.currentChunk();\n        assertNotNull(chunk);\n\n        for (int i = 0; i < sizes.length; i++)\n        {\n            BufferPool.put(buffers.get(i));\n        }\n\n        assertEquals(null, BufferPool.currentChunk());\n        assertEquals(0, chunk.free());\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/memory/BufferPoolTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"B"}],"commitId":"17dd4ccc785426d756949f00001b78dc8b76ea66","commitMessage":"@@@Remove FileCacheService.  instead pooling buffers\n\npatch by stefania and benedict for CASSANDRA-8897\n","date":"2015-06-09 17:08:24","modifiedFileCount":"20","status":"B","submitter":"stefania"},{"authorTime":"2019-06-12 23:26:54","codes":[{"authorDate":"2019-06-12 23:26:54","commitOrder":2,"curCode":"    public void testDifferentSizeBuffersOnOneChunk()\n    {\n        int[] sizes = new int[] {\n            5, 1024, 4096, 8, 16000, 78, 512, 256, 63, 55, 89, 90, 255, 32, 2048, 128\n        };\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += BufferPool.unsafeCurrentChunk().roundUp(buffer.capacity());\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        Random rnd = new Random();\n        rnd.setSeed(298347529L);\n        while (buffers.size() > 1)\n        {\n            int index = rnd.nextInt(buffers.size());\n            ByteBuffer buffer = buffers.remove(index);\n\n            BufferPool.put(buffer);\n        }\n        BufferPool.put(buffers.remove(0));\n\n        assertEquals(null, BufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","date":"2019-06-12 23:26:54","endLine":376,"groupId":"14794","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDifferentSizeBuffersOnOneChunk","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/62/cb33b91ba545d61a05404c638a60688a92f6c0.src","preCode":"    public void testDifferentSizeBuffersOnOneChunk()\n    {\n        int[] sizes = new int[] {\n            5, 1024, 4096, 8, 16000, 78, 512, 256, 63, 55, 89, 90, 255, 32, 2048, 128\n        };\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += BufferPool.currentChunk().roundUp(buffer.capacity());\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.currentChunk();\n        assertNotNull(chunk);\n\n        Random rnd = new Random();\n        rnd.setSeed(298347529L);\n        while (!buffers.isEmpty())\n        {\n            int index = rnd.nextInt(buffers.size());\n            ByteBuffer buffer = buffers.remove(index);\n\n            BufferPool.put(buffer);\n        }\n\n        assertEquals(null, BufferPool.currentChunk());\n        assertEquals(0, chunk.free());\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/memory/BufferPoolTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"},{"authorDate":"2019-06-12 23:26:54","commitOrder":2,"curCode":"    public void testChunkExhausted()\n    {\n        final int size = BufferPool.NORMAL_CHUNK_SIZE / 64; \r\n        int[] sizes = new int[128];\n        Arrays.fill(sizes, size);\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += buffer.capacity();\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        for (int i = 0; i < sizes.length; i++)\n        {\n            BufferPool.put(buffers.get(i));\n        }\n\n        assertEquals(null, BufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","date":"2019-06-12 23:26:54","endLine":410,"groupId":"14793","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testChunkExhausted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/62/cb33b91ba545d61a05404c638a60688a92f6c0.src","preCode":"    public void testChunkExhausted()\n    {\n        final int size = BufferPool.CHUNK_SIZE / 64; \r\n        int[] sizes = new int[128];\n        Arrays.fill(sizes, size);\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += buffer.capacity();\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.currentChunk();\n        assertNotNull(chunk);\n\n        for (int i = 0; i < sizes.length; i++)\n        {\n            BufferPool.put(buffers.get(i));\n        }\n\n        assertEquals(null, BufferPool.currentChunk());\n        assertEquals(0, chunk.free());\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/memory/BufferPoolTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"M"}],"commitId":"310a48efcfdc0fb77fbd5fd6e734bf17667f617d","commitMessage":"@@@Rewrite the internode messaging subsystem\n\npatch by Aleksey Yeschenko and Benedict Elliott Smith; reviewed by Alex\nPetrov.  Aleksey Yeschenko.  and Benedict Elliott Smith for CASSANDRA-15066\n\nCo-authored-by: Aleksey Yeschenko <aleksey@apache.org>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\n","date":"2019-06-12 23:26:54","modifiedFileCount":"253","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2019-11-05 00:53:30","codes":[{"authorDate":"2019-11-05 00:53:30","commitOrder":3,"curCode":"    public void testDifferentSizeBuffersOnOneChunk()\n    {\n        int[] sizes = new int[] {\n            5, 1024, 4096, 8, 16000, 78, 512, 256, 63, 55, 89, 90, 255, 32, 2048, 128\n        };\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i], BufferType.OFF_HEAP);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += BufferPool.unsafeCurrentChunk().roundUp(buffer.capacity());\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        Random rnd = new Random();\n        rnd.setSeed(298347529L);\n        while (buffers.size() > 1)\n        {\n            int index = rnd.nextInt(buffers.size());\n            ByteBuffer buffer = buffers.remove(index);\n\n            BufferPool.put(buffer);\n        }\n        BufferPool.put(buffers.remove(0));\n\n        assertEquals(null, BufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","date":"2020-04-08 08:06:41","endLine":362,"groupId":"14794","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDifferentSizeBuffersOnOneChunk","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/85/ca2d0bc14dacaba75cb6632ccb357cd2abe46d.src","preCode":"    public void testDifferentSizeBuffersOnOneChunk()\n    {\n        int[] sizes = new int[] {\n            5, 1024, 4096, 8, 16000, 78, 512, 256, 63, 55, 89, 90, 255, 32, 2048, 128\n        };\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += BufferPool.unsafeCurrentChunk().roundUp(buffer.capacity());\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        Random rnd = new Random();\n        rnd.setSeed(298347529L);\n        while (buffers.size() > 1)\n        {\n            int index = rnd.nextInt(buffers.size());\n            ByteBuffer buffer = buffers.remove(index);\n\n            BufferPool.put(buffer);\n        }\n        BufferPool.put(buffers.remove(0));\n\n        assertEquals(null, BufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/memory/BufferPoolTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"},{"authorDate":"2019-11-05 00:53:30","commitOrder":3,"curCode":"    public void testChunkExhausted()\n    {\n        final int size = BufferPool.NORMAL_CHUNK_SIZE / 64; \r\n        int[] sizes = new int[128];\n        Arrays.fill(sizes, size);\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i], BufferType.OFF_HEAP);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += buffer.capacity();\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        for (int i = 0; i < sizes.length; i++)\n        {\n            BufferPool.put(buffers.get(i));\n        }\n\n        assertEquals(null, BufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","date":"2020-04-08 08:06:41","endLine":396,"groupId":"14793","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testChunkExhausted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/85/ca2d0bc14dacaba75cb6632ccb357cd2abe46d.src","preCode":"    public void testChunkExhausted()\n    {\n        final int size = BufferPool.NORMAL_CHUNK_SIZE / 64; \r\n        int[] sizes = new int[128];\n        Arrays.fill(sizes, size);\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i]);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += buffer.capacity();\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        for (int i = 0; i < sizes.length; i++)\n        {\n            BufferPool.put(buffers.get(i));\n        }\n\n        assertEquals(null, BufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/memory/BufferPoolTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"443bca18839268cd100930b380e0534b052a8c89","commitMessage":"@@@LARGE_MESSAGE connection allocates heap buffer when BufferPool exhausted\n\npatch by Benedict; reviewed by David Capwell for CASSANDRA-15358\n","date":"2020-04-08 08:06:41","modifiedFileCount":"8","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2020-10-15 22:53:44","codes":[{"authorDate":"2020-10-15 22:53:44","commitOrder":4,"curCode":"    public void testDifferentSizeBuffersOnOneChunk()\n    {\n        int[] sizes = new int[] {\n            5, 1024, 4096, 8, 16000, 78, 512, 256, 63, 55, 89, 90, 255, 32, 2048, 128\n        };\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = bufferPool.get(sizes[i], BufferType.OFF_HEAP);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += bufferPool.unsafeCurrentChunk().roundUp(buffer.capacity());\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = bufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        Random rnd = new Random();\n        rnd.setSeed(298347529L);\n        while (buffers.size() > 1)\n        {\n            int index = rnd.nextInt(buffers.size());\n            ByteBuffer buffer = buffers.remove(index);\n\n            bufferPool.put(buffer);\n        }\n        bufferPool.put(buffers.remove(0));\n\n        assertEquals(null, bufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","date":"2020-10-15 22:55:06","endLine":351,"groupId":"101214","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testDifferentSizeBuffersOnOneChunk","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/eb/3cc1b47a8bd23484a53ed5c6e566bf84cfd536.src","preCode":"    public void testDifferentSizeBuffersOnOneChunk()\n    {\n        int[] sizes = new int[] {\n            5, 1024, 4096, 8, 16000, 78, 512, 256, 63, 55, 89, 90, 255, 32, 2048, 128\n        };\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i], BufferType.OFF_HEAP);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += BufferPool.unsafeCurrentChunk().roundUp(buffer.capacity());\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        Random rnd = new Random();\n        rnd.setSeed(298347529L);\n        while (buffers.size() > 1)\n        {\n            int index = rnd.nextInt(buffers.size());\n            ByteBuffer buffer = buffers.remove(index);\n\n            BufferPool.put(buffer);\n        }\n        BufferPool.put(buffers.remove(0));\n\n        assertEquals(null, BufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/memory/BufferPoolTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"},{"authorDate":"2020-10-15 22:53:44","commitOrder":4,"curCode":"    public void testChunkExhausted()\n    {\n        final int size = BufferPool.NORMAL_CHUNK_SIZE / 64; \r\n        int[] sizes = new int[128];\n        Arrays.fill(sizes, size);\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = bufferPool.get(sizes[i], BufferType.OFF_HEAP);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += buffer.capacity();\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = bufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        for (int i = 0; i < sizes.length; i++)\n        {\n            bufferPool.put(buffers.get(i));\n        }\n\n        assertEquals(null, bufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","date":"2020-10-15 22:55:06","endLine":385,"groupId":"101214","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testChunkExhausted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/eb/3cc1b47a8bd23484a53ed5c6e566bf84cfd536.src","preCode":"    public void testChunkExhausted()\n    {\n        final int size = BufferPool.NORMAL_CHUNK_SIZE / 64; \r\n        int[] sizes = new int[128];\n        Arrays.fill(sizes, size);\n\n        int sum = 0;\n        List<ByteBuffer> buffers = new ArrayList<>(sizes.length);\n        for (int i = 0; i < sizes.length; i++)\n        {\n            ByteBuffer buffer = BufferPool.get(sizes[i], BufferType.OFF_HEAP);\n            assertNotNull(buffer);\n            assertTrue(buffer.capacity() >= sizes[i]);\n            buffers.add(buffer);\n\n            sum += buffer.capacity();\n        }\n\n        \r\n        assertTrue(sum <= BufferPool.GlobalPool.MACRO_CHUNK_SIZE);\n\n        BufferPool.Chunk chunk = BufferPool.unsafeCurrentChunk();\n        assertNotNull(chunk);\n\n        for (int i = 0; i < sizes.length; i++)\n        {\n            BufferPool.put(buffers.get(i));\n        }\n\n        assertEquals(null, BufferPool.unsafeCurrentChunk());\n        assertEquals(0, chunk.free());\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/memory/BufferPoolTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"699a1f74fcc1da1952da6b2b0309c9e2474c67f4","commitMessage":"@@@CASSANDRA-15229: Segregate Network and Chunk Cache BufferPools and Recirculate Partially Freed Chunks\n\n* initiate multiple buffer pool for different lifespan and usages\n  - Chunk Cache Buffer Pool - conf.file_cache_size_in_mb=512mb\n  - Networking Buffer Pool - conf.temporary_cache_size_in_mb=128mb\n\n* Add overflowSize and usedSize to buffer pool metrics\n\n* re-circulate buffer pool Chunk for ChunkCache whenever it has free space.  even thoughput it may not be able to allocate due to fragmentation\n\npatch by Zhao Yang; reviewed by Caleb Rackliffe and Aleksey Yeschenko for CASSANDRA-15229\n","date":"2020-10-15 22:55:06","modifiedFileCount":"28","status":"M","submitter":"Zhao Yang"}]
