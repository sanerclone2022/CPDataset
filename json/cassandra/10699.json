[{"authorTime":"2016-03-09 22:27:25","codes":[{"authorDate":"2015-09-04 20:47:22","commitOrder":18,"curCode":"    public void testResolve()\n    {\n        ColumnDefinition defA = cfm.getColumnDefinition(new ColumnIdentifier(\"a\", true));\n        ColumnDefinition defB = cfm.getColumnDefinition(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(cfm.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, cfm, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, cfm, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, cfm, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        PartitionUpdate update = PartitionUpdate.singleRowUpdate(cfm, dk, row);\n\n        Unfiltered unfiltered = update.unfilteredIterator().next();\n        assertTrue(unfiltered.kind() == Unfiltered.Kind.ROW);\n        row = (Row) unfiltered;\n        assertEquals(\"a2\", defA.cellValueType().getString(row.getCell(defA).value()));\n        assertEquals(\"b1\", defB.cellValueType().getString(row.getCell(defB).value()));\n        assertEquals(2, row.columns().size());\n    }\n","date":"2015-09-04 20:47:22","endLine":145,"groupId":"21813","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResolve","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0a/f183c3d633cdac007b822761877136cb51d109.src","preCode":"    public void testResolve()\n    {\n        ColumnDefinition defA = cfm.getColumnDefinition(new ColumnIdentifier(\"a\", true));\n        ColumnDefinition defB = cfm.getColumnDefinition(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(cfm.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, cfm, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, cfm, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, cfm, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        PartitionUpdate update = PartitionUpdate.singleRowUpdate(cfm, dk, row);\n\n        Unfiltered unfiltered = update.unfilteredIterator().next();\n        assertTrue(unfiltered.kind() == Unfiltered.Kind.ROW);\n        row = (Row) unfiltered;\n        assertEquals(\"a2\", defA.cellValueType().getString(row.getCell(defA).value()));\n        assertEquals(\"b1\", defB.cellValueType().getString(row.getCell(defB).value()));\n        assertEquals(2, row.columns().size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"NB"},{"authorDate":"2016-03-09 22:27:25","commitOrder":18,"curCode":"    public void testHashCode()\n    {\n        ColumnDefinition defA = cfm.getColumnDefinition(new ColumnIdentifier(\"a\", true));\n        ColumnDefinition defB = cfm.getColumnDefinition(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(cfm.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, cfm, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, cfm, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, cfm, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        Map<Row, Integer> map = new HashMap<>();\n        map.put(row, 1);\n        assertEquals(Integer.valueOf(1), map.get(row));\n    }\n","date":"2016-03-09 22:27:25","endLine":186,"groupId":"21813","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/30/a4f982bca394d1a904c898f2a9899465a5857b.src","preCode":"    public void testHashCode()\n    {\n        ColumnDefinition defA = cfm.getColumnDefinition(new ColumnIdentifier(\"a\", true));\n        ColumnDefinition defB = cfm.getColumnDefinition(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(cfm.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, cfm, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, cfm, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, cfm, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        Map<Row, Integer> map = new HashMap<>();\n        map.put(row, 1);\n        assertEquals(Integer.valueOf(1), map.get(row));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"}],"commitId":"9841cb72bcd8a41c2e3db40371358607ad252207","commitMessage":"@@@Merge branch 'cassandra-3.5' into trunk\n","date":"2016-03-09 22:27:25","modifiedFileCount":"2","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":19,"curCode":"    public void testResolve()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        PartitionUpdate update = PartitionUpdate.singleRowUpdate(metadata, dk, row);\n\n        Unfiltered unfiltered = update.unfilteredIterator().next();\n        assertTrue(unfiltered.kind() == Unfiltered.Kind.ROW);\n        row = (Row) unfiltered;\n        assertEquals(\"a2\", defA.cellValueType().getString(row.getCell(defA).value()));\n        assertEquals(\"b1\", defB.cellValueType().getString(row.getCell(defB).value()));\n        assertEquals(2, row.columns().size());\n    }\n","date":"2017-01-28 06:17:46","endLine":150,"groupId":"12840","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResolve","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/34857a3f3f8ec2c5def07faa657ab518c3ded1.src","preCode":"    public void testResolve()\n    {\n        ColumnDefinition defA = cfm.getColumnDefinition(new ColumnIdentifier(\"a\", true));\n        ColumnDefinition defB = cfm.getColumnDefinition(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(cfm.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, cfm, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, cfm, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, cfm, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        PartitionUpdate update = PartitionUpdate.singleRowUpdate(cfm, dk, row);\n\n        Unfiltered unfiltered = update.unfilteredIterator().next();\n        assertTrue(unfiltered.kind() == Unfiltered.Kind.ROW);\n        row = (Row) unfiltered;\n        assertEquals(\"a2\", defA.cellValueType().getString(row.getCell(defA).value()));\n        assertEquals(\"b1\", defB.cellValueType().getString(row.getCell(defB).value()));\n        assertEquals(2, row.columns().size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":19,"curCode":"    public void testHashCode()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        Map<Row, Integer> map = new HashMap<>();\n        map.put(row, 1);\n        assertEquals(Integer.valueOf(1), map.get(row));\n    }\n","date":"2017-01-28 06:17:46","endLine":189,"groupId":"12840","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/34857a3f3f8ec2c5def07faa657ab518c3ded1.src","preCode":"    public void testHashCode()\n    {\n        ColumnDefinition defA = cfm.getColumnDefinition(new ColumnIdentifier(\"a\", true));\n        ColumnDefinition defB = cfm.getColumnDefinition(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(cfm.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, cfm, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, cfm, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, cfm, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        Map<Row, Integer> map = new HashMap<>();\n        map.put(row, 1);\n        assertEquals(Integer.valueOf(1), map.get(row));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2018-07-27 02:11:17","codes":[{"authorDate":"2018-07-27 02:11:17","commitOrder":20,"curCode":"    public void testResolve()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder();\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        PartitionUpdate update = PartitionUpdate.singleRowUpdate(metadata, dk, row);\n\n        Unfiltered unfiltered = update.unfilteredIterator().next();\n        assertTrue(unfiltered.kind() == Unfiltered.Kind.ROW);\n        row = (Row) unfiltered;\n        assertEquals(\"a2\", defA.cellValueType().getString(row.getCell(defA).value()));\n        assertEquals(\"b1\", defB.cellValueType().getString(row.getCell(defB).value()));\n        assertEquals(2, row.columns().size());\n    }\n","date":"2018-08-23 21:14:07","endLine":150,"groupId":"12840","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testResolve","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fe/5429945c127d2b1b89b4027d3244c412100bc1.src","preCode":"    public void testResolve()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        PartitionUpdate update = PartitionUpdate.singleRowUpdate(metadata, dk, row);\n\n        Unfiltered unfiltered = update.unfilteredIterator().next();\n        assertTrue(unfiltered.kind() == Unfiltered.Kind.ROW);\n        row = (Row) unfiltered;\n        assertEquals(\"a2\", defA.cellValueType().getString(row.getCell(defA).value()));\n        assertEquals(\"b1\", defB.cellValueType().getString(row.getCell(defB).value()));\n        assertEquals(2, row.columns().size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2018-07-27 02:11:17","commitOrder":20,"curCode":"    public void testHashCode()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder();\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        Map<Row, Integer> map = new HashMap<>();\n        map.put(row, 1);\n        assertEquals(Integer.valueOf(1), map.get(row));\n    }\n","date":"2018-08-23 21:14:07","endLine":189,"groupId":"12840","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fe/5429945c127d2b1b89b4027d3244c412100bc1.src","preCode":"    public void testHashCode()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder(nowInSeconds);\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        Map<Row, Integer> map = new HashMap<>();\n        map.put(row, 1);\n        assertEquals(Integer.valueOf(1), map.get(row));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"e225c88a65f2e8091f8ea6212c291416674882a1","commitMessage":"@@@Cell reconciliation should not depend on nowInSec\n\npatch by Benedict; reviewed by Aleksey for CASSANDRA-14592\n","date":"2018-08-23 21:14:07","modifiedFileCount":"28","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2018-07-27 02:11:17","codes":[{"authorDate":"2019-10-16 04:04:26","commitOrder":21,"curCode":"    public void testResolve()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder();\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        PartitionUpdate update = PartitionUpdate.singleRowUpdate(metadata, dk, row);\n\n        Unfiltered unfiltered = update.unfilteredIterator().next();\n        assertTrue(unfiltered.kind() == Unfiltered.Kind.ROW);\n        row = (Row) unfiltered;\n        assertEquals(\"a2\", defA.cellValueType().getString(row.getCell(defA).buffer()));\n        assertEquals(\"b1\", defB.cellValueType().getString(row.getCell(defB).buffer()));\n        assertEquals(2, row.columns().size());\n    }\n","date":"2020-09-14 23:32:44","endLine":150,"groupId":"10699","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testResolve","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/41/1eecb47660a4b643194197cb4ba15c3f51afac.src","preCode":"    public void testResolve()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder();\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        PartitionUpdate update = PartitionUpdate.singleRowUpdate(metadata, dk, row);\n\n        Unfiltered unfiltered = update.unfilteredIterator().next();\n        assertTrue(unfiltered.kind() == Unfiltered.Kind.ROW);\n        row = (Row) unfiltered;\n        assertEquals(\"a2\", defA.cellValueType().getString(row.getCell(defA).value()));\n        assertEquals(\"b1\", defB.cellValueType().getString(row.getCell(defB).value()));\n        assertEquals(2, row.columns().size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2018-07-27 02:11:17","commitOrder":21,"curCode":"    public void testHashCode()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder();\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        Map<Row, Integer> map = new HashMap<>();\n        map.put(row, 1);\n        assertEquals(Integer.valueOf(1), map.get(row));\n    }\n","date":"2018-08-23 21:14:07","endLine":189,"groupId":"10699","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fe/5429945c127d2b1b89b4027d3244c412100bc1.src","preCode":"    public void testHashCode()\n    {\n        ColumnMetadata defA = metadata.getColumn(new ColumnIdentifier(\"a\", true));\n        ColumnMetadata defB = metadata.getColumn(new ColumnIdentifier(\"b\", true));\n\n        Row.Builder builder = BTreeRow.unsortedBuilder();\n        builder.newRow(metadata.comparator.make(\"c1\"));\n        writeSimpleCellValue(builder, defA, \"a1\", 0);\n        writeSimpleCellValue(builder, defA, \"a2\", 1);\n        writeSimpleCellValue(builder, defB, \"b1\", 1);\n        Row row = builder.build();\n\n        Map<Row, Integer> map = new HashMap<>();\n        map.put(row, 1);\n        assertEquals(Integer.valueOf(1), map.get(row));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"}],"commitId":"ccab496d2d37c86341d364dea6c27513fda27331","commitMessage":"@@@Add byte array backed cells\n\nPatch by Blake Eggleston; reviewed by Caleb Rackliffe and Marcus Eriksson for CASSANDRA-15393\n","date":"2020-09-14 23:32:44","modifiedFileCount":"278","status":"M","submitter":"Blake Eggleston"}]
