[{"authorTime":"2015-06-25 00:13:15","codes":[{"authorDate":"2015-06-25 00:13:15","commitOrder":1,"curCode":"    public void testIndexesOnComplexPrimaryKey() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (pk0 int, pk1 int, ck0 int, ck1 int, ck2 int, value int, PRIMARY KEY ((pk0, pk1), ck0, ck1, ck2))\");\n\n        execute(\"CREATE INDEX ON %s (pk0)\");\n        execute(\"CREATE INDEX ON %s (ck0)\");\n        execute(\"CREATE INDEX ON %s (ck1)\");\n        execute(\"CREATE INDEX ON %s (ck2)\");\n\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (0, 1, 2, 3, 4, 5)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (1, 2, 3, 4, 5, 0)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (2, 3, 4, 5, 0, 1)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (3, 4, 5, 0, 1, 2)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (4, 5, 0, 1, 2, 3)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (5, 0, 1, 2, 3, 4)\");\n\n        assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 2\"),\n                   row(1));\n\n        assertRows(execute(\"SELECT value FROM %s WHERE ck0 = 0\"),\n                   row(3));\n\n        assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 3 AND pk1 = 4 AND ck1 = 0\"),\n                   row(2));\n\n        assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 5 AND pk1 = 0 AND ck0 = 1 AND ck2 = 3 ALLOW FILTERING\"),\n                   row(4));\n    }\n","date":"2015-06-25 00:13:15","endLine":309,"groupId":"16656","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexesOnComplexPrimaryKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0b/812c60c7b6a9d7ec7e83f81f401f4cc5b25d2c.src","preCode":"    public void testIndexesOnComplexPrimaryKey() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (pk0 int, pk1 int, ck0 int, ck1 int, ck2 int, value int, PRIMARY KEY ((pk0, pk1), ck0, ck1, ck2))\");\n\n        execute(\"CREATE INDEX ON %s (pk0)\");\n        execute(\"CREATE INDEX ON %s (ck0)\");\n        execute(\"CREATE INDEX ON %s (ck1)\");\n        execute(\"CREATE INDEX ON %s (ck2)\");\n\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (0, 1, 2, 3, 4, 5)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (1, 2, 3, 4, 5, 0)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (2, 3, 4, 5, 0, 1)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (3, 4, 5, 0, 1, 2)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (4, 5, 0, 1, 2, 3)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (5, 0, 1, 2, 3, 4)\");\n\n        assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 2\"),\n                   row(1));\n\n        assertRows(execute(\"SELECT value FROM %s WHERE ck0 = 0\"),\n                   row(3));\n\n        assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 3 AND pk1 = 4 AND ck1 = 0\"),\n                   row(2));\n\n        assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 5 AND pk1 = 0 AND ck0 = 1 AND ck2 = 3 ALLOW FILTERING\"),\n                   row(4));\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"B"},{"authorDate":"2015-06-25 00:13:15","commitOrder":1,"curCode":"    public void testIndexOnKeyWithReverseClustering() throws Throwable\n    {\n        createTable(\" CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY ((k1, k2), v) ) WITH CLUSTERING ORDER BY (v DESC)\");\n\n        createIndex(\"CREATE INDEX ON %s (k2)\");\n\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 0, 1)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 1, 2)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 0, 3)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (1, 0, 4)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (1, 1, 5)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (2, 0, 7)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (2, 1, 8)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (3, 0, 1)\");\n\n        assertRows(execute(\"SELECT * FROM %s WHERE k2 = 0 AND v >= 2 ALLOW FILTERING\"),\n                   row(2, 0, 7),\n                   row(0, 0, 3),\n                   row(1, 0, 4));\n    }\n","date":"2015-06-25 00:13:15","endLine":432,"groupId":"31348","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOnKeyWithReverseClustering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0b/812c60c7b6a9d7ec7e83f81f401f4cc5b25d2c.src","preCode":"    public void testIndexOnKeyWithReverseClustering() throws Throwable\n    {\n        createTable(\" CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY ((k1, k2), v) ) WITH CLUSTERING ORDER BY (v DESC)\");\n\n        createIndex(\"CREATE INDEX ON %s (k2)\");\n\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 0, 1)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 1, 2)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 0, 3)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (1, 0, 4)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (1, 1, 5)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (2, 0, 7)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (2, 1, 8)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (3, 0, 1)\");\n\n        assertRows(execute(\"SELECT * FROM %s WHERE k2 = 0 AND v >= 2 ALLOW FILTERING\"),\n                   row(2, 0, 7),\n                   row(0, 0, 3),\n                   row(1, 0, 4));\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"B"}],"commitId":"bc9b0be321b34c55366a61418b94e9bae6ddb26b","commitMessage":"@@@Merge branch 'cassandra-2.2' into trunk\n","date":"2015-06-25 00:13:15","modifiedFileCount":"16","status":"B","submitter":"Josh McKenzie"},{"authorTime":"2016-09-21 23:08:58","codes":[{"authorDate":"2016-09-21 23:08:58","commitOrder":2,"curCode":"    public void testIndexesOnComplexPrimaryKey() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (pk0 int, pk1 int, ck0 int, ck1 int, ck2 int, value int, PRIMARY KEY ((pk0, pk1), ck0, ck1, ck2))\");\n\n        execute(\"CREATE INDEX ON %s (pk0)\");\n        execute(\"CREATE INDEX ON %s (ck0)\");\n        execute(\"CREATE INDEX ON %s (ck1)\");\n        execute(\"CREATE INDEX ON %s (ck2)\");\n\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (0, 1, 2, 3, 4, 5)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (1, 2, 3, 4, 5, 0)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (2, 3, 4, 5, 0, 1)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (3, 4, 5, 0, 1, 2)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (4, 5, 0, 1, 2, 3)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (5, 0, 1, 2, 3, 4)\");\n\n        beforeAndAfterFlush(() -> {\n            assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 2\"),\n                       row(1));\n\n            assertRows(execute(\"SELECT value FROM %s WHERE ck0 = 0\"),\n                       row(3));\n\n            assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 3 AND pk1 = 4 AND ck1 = 0\"),\n                       row(2));\n\n            assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 5 AND pk1 = 0 AND ck0 = 1 AND ck2 = 3 ALLOW FILTERING\"),\n                       row(4));\n        });\n    }\n","date":"2016-09-21 23:30:18","endLine":365,"groupId":"101598","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexesOnComplexPrimaryKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5c/b76c913468acfd6bfa34825fe2a8fa7878c4ce.src","preCode":"    public void testIndexesOnComplexPrimaryKey() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (pk0 int, pk1 int, ck0 int, ck1 int, ck2 int, value int, PRIMARY KEY ((pk0, pk1), ck0, ck1, ck2))\");\n\n        execute(\"CREATE INDEX ON %s (pk0)\");\n        execute(\"CREATE INDEX ON %s (ck0)\");\n        execute(\"CREATE INDEX ON %s (ck1)\");\n        execute(\"CREATE INDEX ON %s (ck2)\");\n\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (0, 1, 2, 3, 4, 5)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (1, 2, 3, 4, 5, 0)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (2, 3, 4, 5, 0, 1)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (3, 4, 5, 0, 1, 2)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (4, 5, 0, 1, 2, 3)\");\n        execute(\"INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (5, 0, 1, 2, 3, 4)\");\n\n        assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 2\"),\n                   row(1));\n\n        assertRows(execute(\"SELECT value FROM %s WHERE ck0 = 0\"),\n                   row(3));\n\n        assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 3 AND pk1 = 4 AND ck1 = 0\"),\n                   row(2));\n\n        assertRows(execute(\"SELECT value FROM %s WHERE pk0 = 5 AND pk1 = 0 AND ck0 = 1 AND ck2 = 3 ALLOW FILTERING\"),\n                   row(4));\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2016-09-21 23:08:58","commitOrder":2,"curCode":"    public void testIndexOnKeyWithReverseClustering() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY ((k1, k2), v) ) WITH CLUSTERING ORDER BY (v DESC)\");\n\n        createIndex(\"CREATE INDEX ON %s (k2)\");\n\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 0, 1)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 1, 2)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 0, 3)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (1, 0, 4)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (1, 1, 5)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (2, 0, 7)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (2, 1, 8)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (3, 0, 1)\");\n\n        beforeAndAfterFlush(() -> {\n            assertRows(execute(\"SELECT * FROM %s WHERE k2 = 0 AND v >= 2 ALLOW FILTERING\"),\n                       row(2, 0, 7),\n                       row(0, 0, 3),\n                       row(1, 0, 4));\n        });\n    }\n","date":"2016-09-21 23:30:18","endLine":494,"groupId":"101598","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOnKeyWithReverseClustering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5c/b76c913468acfd6bfa34825fe2a8fa7878c4ce.src","preCode":"    public void testIndexOnKeyWithReverseClustering() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY ((k1, k2), v) ) WITH CLUSTERING ORDER BY (v DESC)\");\n\n        createIndex(\"CREATE INDEX ON %s (k2)\");\n\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 0, 1)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 1, 2)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (0, 0, 3)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (1, 0, 4)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (1, 1, 5)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (2, 0, 7)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (2, 1, 8)\");\n        execute(\"INSERT INTO %s (k1, k2, v) VALUES (3, 0, 1)\");\n\n        assertRows(execute(\"SELECT * FROM %s WHERE k2 = 0 AND v >= 2 ALLOW FILTERING\"),\n                   row(2, 0, 7),\n                   row(0, 0, 3),\n                   row(1, 0, 4));\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"}],"commitId":"bcd274f7c04e2cb9fe9a8155428dfa7212fe3a70","commitMessage":"@@@Ninja: add beforeAndAfterFlush to 2i and filtering tests.","date":"2016-09-21 23:30:18","modifiedFileCount":"2","status":"M","submitter":"Alex Petrov"}]
