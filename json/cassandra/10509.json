[{"authorTime":"2013-07-25 00:07:31","codes":[{"authorDate":"2013-07-25 00:07:31","commitOrder":11,"curCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved(store);\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","date":"2013-07-25 00:07:31","endLine":98,"groupId":"18697","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyCacheLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/10/bcedd05f3c80f7106315daf123a09840c760dc.src","preCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved(store);\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"MB"},{"authorDate":"2013-07-25 00:07:31","commitOrder":11,"curCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","date":"2013-07-25 00:07:31","endLine":182,"groupId":"23042","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertKeyCacheSize","params":"(intexpected@Stringkeyspace@StringcolumnFamily)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/10/bcedd05f3c80f7106315daf123a09840c760dc.src","preCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"}],"commitId":"813577e32b7e9a40ff1e71875d019eda44c84586","commitMessage":"@@@Merge branch 'cassandra-1.2' into trunk\n\nConflicts:\n\ttest/unit/org/apache/cassandra/db/KeyCacheTest.java\n","date":"2013-07-25 00:07:31","modifiedFileCount":"7","status":"M","submitter":"Yuki Morishita"},{"authorTime":"2013-07-25 00:07:31","codes":[{"authorDate":"2014-06-21 01:55:35","commitOrder":12,"curCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        SchemaLoader.readData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved(store);\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","date":"2014-06-21 01:55:35","endLine":119,"groupId":"18697","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyCacheLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0d/3fa631e677a9505217a820aa8fadc80598f019.src","preCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved(store);\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2013-07-25 00:07:31","commitOrder":12,"curCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","date":"2013-07-25 00:07:31","endLine":182,"groupId":"23042","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertKeyCacheSize","params":"(intexpected@Stringkeyspace@StringcolumnFamily)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/10/bcedd05f3c80f7106315daf123a09840c760dc.src","preCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"N"}],"commitId":"d2a3827a65f208eae7aed129dcb6dc582ac1f3d5","commitMessage":"@@@Reduce unit test times due to schema loading\n\nPatch by Lyuben Todorov; reviewed by Tyler Hobbs for CASSANDRA-6968\n","date":"2014-06-21 01:55:35","modifiedFileCount":"92","status":"M","submitter":"lyubent"},{"authorTime":"2015-01-22 03:50:35","codes":[{"authorDate":"2015-01-22 03:50:35","commitOrder":13,"curCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        SchemaLoader.readData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved(store);\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","date":"2015-01-22 03:50:35","endLine":121,"groupId":"1620","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyCacheLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c3/70e4f8d13e6c7cf085fd30466b99003b648810.src","preCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        SchemaLoader.readData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved(store);\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2015-01-22 03:50:35","commitOrder":13,"curCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","date":"2015-01-22 03:50:35","endLine":221,"groupId":"2597","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertKeyCacheSize","params":"(intexpected@Stringkeyspace@StringcolumnFamily)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c3/70e4f8d13e6c7cf085fd30466b99003b648810.src","preCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (KeyCacheKey k : CacheService.instance.keyCache.getKeySet())\n        {\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"dfd78d0e90b9995872b00f6f33afc180f2b7cba1","commitMessage":"@@@Serializing Row cache alternative.  fully off heap\n\nPatch by Robert Stupp.  reviewed by Ariel Weisberg for CASSANDRA-7438\n","date":"2015-01-22 03:50:35","modifiedFileCount":"14","status":"M","submitter":"Robert Stupp"},{"authorTime":"2015-01-22 03:50:35","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":14,"curCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, COLUMN_FAMILY2, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved(store);\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","date":"2015-06-30 18:47:01","endLine":124,"groupId":"1620","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyCacheLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/76/de839349e30e5572c7256417746b654ad851d5.src","preCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        SchemaLoader.readData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved(store);\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2015-01-22 03:50:35","commitOrder":14,"curCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","date":"2015-01-22 03:50:35","endLine":221,"groupId":"2597","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertKeyCacheSize","params":"(intexpected@Stringkeyspace@StringcolumnFamily)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c3/70e4f8d13e6c7cf085fd30466b99003b648810.src","preCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"a991b64811f4d6adb6c7b31c0df52288eb06cf19","commitMessage":"@@@Storage engine refactor.  a.k.a CASSANDRA-8099\n\nInitial patch.  see ticket for details\n","date":"2015-06-30 18:47:01","modifiedFileCount":"374","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2015-01-22 03:50:35","codes":[{"authorDate":"2015-09-17 04:00:57","commitOrder":15,"curCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, COLUMN_FAMILY2, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved();\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","date":"2015-09-17 04:00:57","endLine":120,"groupId":"1620","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyCacheLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/4d/b87038407524dc9db7d469d90addb04ceb6c3e.src","preCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, COLUMN_FAMILY2, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved(store);\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2015-01-22 03:50:35","commitOrder":15,"curCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","date":"2015-01-22 03:50:35","endLine":221,"groupId":"2597","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertKeyCacheSize","params":"(intexpected@Stringkeyspace@StringcolumnFamily)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c3/70e4f8d13e6c7cf085fd30466b99003b648810.src","preCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"10b11835ac01d769a70c408a92eacca00d06ce47","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-09-17 04:00:57","modifiedFileCount":"25","status":"M","submitter":"Robert Stupp"},{"authorTime":"2015-01-22 03:50:35","codes":[{"authorDate":"2015-10-09 20:58:54","commitOrder":16,"curCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved();\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","date":"2015-10-09 20:58:54","endLine":126,"groupId":"1620","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyCacheLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/5d30e90ca8e43607a0a73d63c6b0f8d3f34497.src","preCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, COLUMN_FAMILY2, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved();\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2015-01-22 03:50:35","commitOrder":16,"curCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","date":"2015-01-22 03:50:35","endLine":221,"groupId":"2597","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"assertKeyCacheSize","params":"(intexpected@Stringkeyspace@StringcolumnFamily)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c3/70e4f8d13e6c7cf085fd30466b99003b648810.src","preCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"f8358b8ea7fa1f668e5b4b733e2e6ab77891a7cb","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-10-09 20:58:54","modifiedFileCount":"1","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2015-01-22 03:50:35","codes":[{"authorDate":"2016-04-21 22:48:26","commitOrder":17,"curCode":"    private void testKeyCacheLoad(String cf) throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(cf);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, cf);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, cf, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, cf, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, cf);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<>();\n        Map<KeyCacheKey, RowIndexEntry.IndexInfoRetriever> savedInfoMap = new HashMap<>();\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(cf))\n            {\n                RowIndexEntry rie = CacheService.instance.keyCache.get(k);\n                savedMap.put(k, rie);\n                SSTableReader sstr = readerForKey(k);\n                savedInfoMap.put(k, rie.openWithIndex(sstr.getIndexFile()));\n            }\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, cf);\n\n        CacheService.instance.keyCache.loadSaved();\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, cf);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndexCount(), actual.columnsIndexCount());\n            for (int i = 0; i < expected.columnsIndexCount(); i++)\n            {\n                SSTableReader actualSstr = readerForKey(entry.getKey());\n                try (RowIndexEntry.IndexInfoRetriever actualIir = actual.openWithIndex(actualSstr.getIndexFile()))\n                {\n                    RowIndexEntry.IndexInfoRetriever expectedIir = savedInfoMap.get(entry.getKey());\n                    assertEquals(expectedIir.columnsIndex(i), actualIir.columnsIndex(i));\n                }\n            }\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n\n        savedInfoMap.values().forEach(iir -> {\n            try\n            {\n                if (iir != null)\n                    iir.close();\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        });\n    }\n","date":"2016-04-21 22:48:26","endLine":169,"groupId":"10509","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyCacheLoad","params":"(Stringcf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ad/a6b5b67aada8eac663eb525bc10cab5f1923ea.src","preCode":"    public void testKeyCacheLoad() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COLUMN_FAMILY2);\n\n        \r\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        SchemaLoader.insertData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        store.forceBlockingFlush();\n\n        \r\n        readData(KEYSPACE1, COLUMN_FAMILY2, 0, 100);\n        assertKeyCacheSize(100, KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        Map<KeyCacheKey, RowIndexEntry> savedMap = new HashMap<KeyCacheKey, RowIndexEntry>();\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(KEYSPACE1) && k.desc.cfname.equals(COLUMN_FAMILY2))\n                savedMap.put(k, CacheService.instance.keyCache.get(k));\n        }\n\n        \r\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.invalidateKeyCache();\n        assertKeyCacheSize(0, KEYSPACE1, COLUMN_FAMILY2);\n\n        CacheService.instance.keyCache.loadSaved();\n        assertKeyCacheSize(savedMap.size(), KEYSPACE1, COLUMN_FAMILY2);\n\n        \r\n        for (Map.Entry<KeyCacheKey, RowIndexEntry> entry : savedMap.entrySet())\n        {\n            RowIndexEntry expected = entry.getValue();\n            RowIndexEntry actual = CacheService.instance.keyCache.get(entry.getKey());\n            assertEquals(expected.position, actual.position);\n            assertEquals(expected.columnsIndex(), actual.columnsIndex());\n            if (expected.isIndexed())\n            {\n                assertEquals(expected.deletionTime(), actual.deletionTime());\n            }\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2015-01-22 03:50:35","commitOrder":17,"curCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","date":"2015-01-22 03:50:35","endLine":221,"groupId":"10509","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"assertKeyCacheSize","params":"(intexpected@Stringkeyspace@StringcolumnFamily)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c3/70e4f8d13e6c7cf085fd30466b99003b648810.src","preCode":"    private void assertKeyCacheSize(int expected, String keyspace, String columnFamily)\n    {\n        int size = 0;\n        for (Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n             iter.hasNext();)\n        {\n            KeyCacheKey k = iter.next();\n            if (k.desc.ksname.equals(keyspace) && k.desc.cfname.equals(columnFamily))\n                size++;\n        }\n        assertEquals(expected, size);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"ef5bbedd687d75923e9a20fde9d2f78b4535241d","commitMessage":"@@@Support large partitions on the 3.0 sstable format\n\npatch by Robert Stupp; reviewed by T Jake Luciani for CASSANDRA-11206\n","date":"2016-04-21 22:48:26","modifiedFileCount":"31","status":"M","submitter":"Robert Stupp"}]
