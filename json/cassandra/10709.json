[{"authorTime":"2014-02-17 12:09:57","codes":[{"authorDate":"2015-05-01 02:15:57","commitOrder":8,"curCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 4);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n    }\n","date":"2015-05-01 02:15:57","endLine":255,"groupId":"15649","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testScrubOneRowWithCorruptedKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/12/8d1b0cff1e5772c4de05ba32d96f13770cb01c.src","preCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 4);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"},{"authorDate":"2014-02-17 12:09:57","commitOrder":8,"curCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 10);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n\n        CompactionManager.instance.performScrub(cfs, false);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n    }\n","date":"2014-02-17 12:09:57","endLine":167,"groupId":"27466","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScrubMultiRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/eb/dce0e8586343eb0e2289cfae77fc7ba73b1b5d.src","preCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 10);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n\n        CompactionManager.instance.performScrub(cfs, false);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"NB"}],"commitId":"49b089893b5407ba42dad389804ff21d535a8537","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n","date":"2015-05-01 02:15:57","modifiedFileCount":"4","status":"M","submitter":"Tyler Hobbs"},{"authorTime":"2015-05-19 22:00:17","codes":[{"authorDate":"2015-05-19 22:00:17","commitOrder":9,"curCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 4);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n    }\n","date":"2015-05-19 22:00:17","endLine":261,"groupId":"15649","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testScrubOneRowWithCorruptedKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a5/af823df6e3c35f96d623f4960b3bc0e71eeeb6.src","preCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 4);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2015-05-19 22:00:17","commitOrder":9,"curCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 10);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n    }\n","date":"2015-05-19 22:00:17","endLine":316,"groupId":"27466","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScrubMultiRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a5/af823df6e3c35f96d623f4960b3bc0e71eeeb6.src","preCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 10);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n\n        CompactionManager.instance.performScrub(cfs, false);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"5c413ef76062da188ff661064ef45a02b5e5beda","commitMessage":"@@@Merge branch 'cassandra-2.2' into trunk\n","date":"2015-05-19 22:00:17","modifiedFileCount":"9","status":"M","submitter":"Yuki Morishita"},{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":10,"curCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 4);\n        assertOrderedAll(cfs, 4);\n\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        assertOrderedAll(cfs, 4);\n    }\n","date":"2015-06-30 18:47:01","endLine":257,"groupId":"22754","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testScrubOneRowWithCorruptedKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5f/0e3ac2fd558cfe7cdb9b97dcd0bb93994239b0.src","preCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 4);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(4, rows.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2014-09-02 00:54:46","commitOrder":10,"curCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 10);\n        assertOrderedAll(cfs, 10);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        assertOrderedAll(cfs, 10);\n    }\n","date":"2015-06-30 18:47:01","endLine":290,"groupId":"6308","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testScrubMultiRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5f/0e3ac2fd558cfe7cdb9b97dcd0bb93994239b0.src","preCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        List<Row> rows;\n\n        \r\n        fillCF(cfs, 10);\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        rows = cfs.getRangeSlice(Util.range(\"\", \"\"), null, new IdentityQueryFilter(), 1000);\n        assertEquals(10, rows.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"}],"commitId":"a991b64811f4d6adb6c7b31c0df52288eb06cf19","commitMessage":"@@@Storage engine refactor.  a.k.a CASSANDRA-8099\n\nInitial patch.  see ticket for details\n","date":"2015-06-30 18:47:01","modifiedFileCount":"374","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2015-06-28 21:49:09","commitOrder":11,"curCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 4);\n        assertOrderedAll(cfs, 4);\n\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        assertOrderedAll(cfs, 4);\n    }\n","date":"2015-07-28 17:28:31","endLine":250,"groupId":"22754","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testScrubOneRowWithCorruptedKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9b/62590329d512f60ecb32d453660ef984ea9513.src","preCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 4);\n        assertOrderedAll(cfs, 4);\n\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        assertOrderedAll(cfs, 4);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"},{"authorDate":"2014-09-02 00:54:46","commitOrder":11,"curCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 10);\n        assertOrderedAll(cfs, 10);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        assertOrderedAll(cfs, 10);\n    }\n","date":"2015-06-30 18:47:01","endLine":290,"groupId":"6308","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testScrubMultiRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5f/0e3ac2fd558cfe7cdb9b97dcd0bb93994239b0.src","preCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 10);\n        assertOrderedAll(cfs, 10);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        assertOrderedAll(cfs, 10);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"N"}],"commitId":"ad8cad7c4d05fd5dea68fb274c81a102533ebe36","commitMessage":"@@@Make choice of SSTableReader types explicit\n\nAll accessors of a collection of SSTableReader must now\nspecify whether they desire the LIVE or CANONICAL set.  so\nthat no internal clients are accidentally exposed to a partial\nsstable they are not capable of safely handling.\n\npatch by benedict; reviewed by marcus for CASSANDRA-9699\n","date":"2015-07-28 17:28:31","modifiedFileCount":"60","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2016-03-29 17:10:28","codes":[{"authorDate":"2016-03-29 17:10:28","commitOrder":12,"curCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 4);\n        assertOrderedAll(cfs, 4);\n\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false, true, 2);\n\n        \r\n        assertOrderedAll(cfs, 4);\n    }\n","date":"2016-03-29 17:10:28","endLine":249,"groupId":"22754","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testScrubOneRowWithCorruptedKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a7/3666845365d8a1497d69b6dedcea4504390453.src","preCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 4);\n        assertOrderedAll(cfs, 4);\n\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        assertOrderedAll(cfs, 4);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2016-03-29 17:10:28","commitOrder":12,"curCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 10);\n        assertOrderedAll(cfs, 10);\n\n        CompactionManager.instance.performScrub(cfs, false, true, 2);\n\n        \r\n        assertOrderedAll(cfs, 10);\n    }\n","date":"2016-03-29 17:10:28","endLine":282,"groupId":"6308","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testScrubMultiRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a7/3666845365d8a1497d69b6dedcea4504390453.src","preCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 10);\n        assertOrderedAll(cfs, 10);\n\n        CompactionManager.instance.performScrub(cfs, false, true);\n\n        \r\n        assertOrderedAll(cfs, 10);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"f04224707d29544228e791f0b532a9969da2820b","commitMessage":"@@@Merge branch 'cassandra-3.5' into trunk\n","date":"2016-03-29 17:10:28","modifiedFileCount":"11","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2021-03-23 16:24:04","codes":[{"authorDate":"2021-03-23 16:24:04","commitOrder":13,"curCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n\n        \r\n        fillCF(cfs, 4);\n        assertOrderedAll(cfs, 4);\n\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false, true, 2);\n\n        \r\n        assertOrderedAll(cfs, 4);\n    }\n","date":"2021-04-06 20:53:03","endLine":296,"groupId":"10709","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testScrubOneRowWithCorruptedKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/1b/425051f8594e70b004dfb80d4ddf9d93b6b58c.src","preCode":"    public void testScrubOneRowWithCorruptedKey() throws IOException, ExecutionException, InterruptedException, ConfigurationException\n    {\n        \r\n        assumeTrue(!Boolean.parseBoolean(System.getProperty(\"cassandra.test.compression\", \"false\")));\n\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 4);\n        assertOrderedAll(cfs, 4);\n\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        overrideWithGarbage(sstable, 0, 2);\n\n        CompactionManager.instance.performScrub(cfs, false, true, 2);\n\n        \r\n        assertOrderedAll(cfs, 4);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"},{"authorDate":"2021-03-23 16:24:04","commitOrder":13,"curCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n\n        \r\n        fillCF(cfs, 10);\n        assertOrderedAll(cfs, 10);\n\n        CompactionManager.instance.performScrub(cfs, false, true, 2);\n\n        \r\n        assertOrderedAll(cfs, 10);\n    }\n","date":"2021-04-06 20:53:03","endLine":327,"groupId":"10709","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testScrubMultiRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/1b/425051f8594e70b004dfb80d4ddf9d93b6b58c.src","preCode":"    public void testScrubMultiRow() throws ExecutionException, InterruptedException\n    {\n        CompactionManager.instance.disableAutoCompaction();\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.clearUnsafe();\n\n        \r\n        fillCF(cfs, 10);\n        assertOrderedAll(cfs, 10);\n\n        CompactionManager.instance.performScrub(cfs, false, true, 2);\n\n        \r\n        assertOrderedAll(cfs, 10);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ScrubTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"6115a02021c86028c0cc5a510452454cc8b4d2c2","commitMessage":"@@@CASSANDRA-16532 Fix flaky testSkipScrubCorruptedCounterRowWithTool\n\npatch by Berenguer Blasi; reviewed by Andr?s de la Pe?a for CASSANDRA-16532\n","date":"2021-04-06 20:53:03","modifiedFileCount":"1","status":"M","submitter":"Bereng"}]
