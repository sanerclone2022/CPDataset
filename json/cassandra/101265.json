[{"authorTime":"2018-02-24 12:16:16","codes":[{"authorDate":"2018-02-24 12:16:16","commitOrder":1,"curCode":"    public void testCqlPrepareQueryError()\n    {\n        createTable(\"CREATE TABLE %s (id int primary key, v1 text, v2 text)\");\n        String cql = \"INSERT INTO \" + KEYSPACE + '.' + currentTable() + \" (id, v1, v2) VALUES (?,?,?)\";\n        try\n        {\n            Session session = sessionNet();\n\n            PreparedStatement pstmt = session.prepare(cql);\n            AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n            assertLogEntry(cql, AuditLogEntryType.PREPARE_STATEMENT, logEntry, false);\n\n            dropTable(\"DROP TABLE %s\");\n            ResultSet rs = session.execute(pstmt.bind(1, \"insert_audit\", \"test\"));\n            Assert.fail(\"should not succeed\");\n        }\n        catch (NoHostAvailableException e)\n        {\n            \r\n        }\n\n        AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, null);\n        logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, cql);\n        assertEquals(0, ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.size());\n    }\n","date":"2018-05-11 20:44:16","endLine":568,"groupId":"18458","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCqlPrepareQueryError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/40/eadf87a245e6dbf60d10d9792ab1725c6ac8b7.src","preCode":"    public void testCqlPrepareQueryError()\n    {\n        createTable(\"CREATE TABLE %s (id int primary key, v1 text, v2 text)\");\n        String cql = \"INSERT INTO \" + KEYSPACE + '.' + currentTable() + \" (id, v1, v2) VALUES (?,?,?)\";\n        try\n        {\n            Session session = sessionNet();\n\n            PreparedStatement pstmt = session.prepare(cql);\n            AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n            assertLogEntry(cql, AuditLogEntryType.PREPARE_STATEMENT, logEntry, false);\n\n            dropTable(\"DROP TABLE %s\");\n            ResultSet rs = session.execute(pstmt.bind(1, \"insert_audit\", \"test\"));\n            Assert.fail(\"should not succeed\");\n        }\n        catch (NoHostAvailableException e)\n        {\n            \r\n        }\n\n        AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, null);\n        logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, cql);\n        assertEquals(0, ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/audit/AuditLoggerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":542,"status":"B"},{"authorDate":"2018-02-24 12:16:16","commitOrder":1,"curCode":"    public void testCqlPrepareQuerySyntaxError()\n    {\n        String cql = \"INSERT INTO \" + KEYSPACE + '.' + \"foo\" + \"(id, v1, v2) VALES (?,?,?)\";\n        try\n        {\n            createTable(\"CREATE TABLE %s (id int primary key, v1 text, v2 text)\");\n            Session session = sessionNet();\n            PreparedStatement pstmt = session.prepare(cql);\n            ResultSet rs = session.execute(pstmt.bind(1, \"insert_audit\", \"test\"));\n            Assert.fail(\"should not succeed\");\n        }\n        catch (SyntaxError e)\n        {\n            \r\n        }\n        AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, cql);\n        assertEquals(0, ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.size());\n    }\n","date":"2018-05-11 20:44:16","endLine":589,"groupId":"32377","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCqlPrepareQuerySyntaxError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/40/eadf87a245e6dbf60d10d9792ab1725c6ac8b7.src","preCode":"    public void testCqlPrepareQuerySyntaxError()\n    {\n        String cql = \"INSERT INTO \" + KEYSPACE + '.' + \"foo\" + \"(id, v1, v2) VALES (?,?,?)\";\n        try\n        {\n            createTable(\"CREATE TABLE %s (id int primary key, v1 text, v2 text)\");\n            Session session = sessionNet();\n            PreparedStatement pstmt = session.prepare(cql);\n            ResultSet rs = session.execute(pstmt.bind(1, \"insert_audit\", \"test\"));\n            Assert.fail(\"should not succeed\");\n        }\n        catch (SyntaxError e)\n        {\n            \r\n        }\n        AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, cql);\n        assertEquals(0, ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/audit/AuditLoggerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":571,"status":"B"}],"commitId":"f56871b88be1e8965f166769c12cfa43313bac74","commitMessage":"@@@Audit logging for database activity\n\npatch by Vinay Chella; reviewed by jasobrown for CASSANDRA-12151\n","date":"2018-05-11 20:44:16","modifiedFileCount":"57","status":"B","submitter":"Vinay Chella"},{"authorTime":"2019-03-08 22:56:21","codes":[{"authorDate":"2019-03-08 22:56:21","commitOrder":2,"curCode":"    public void testCqlPrepareQueryError()\n    {\n        createTable(\"CREATE TABLE %s (id int primary key, v1 text, v2 text)\");\n        String cql = \"INSERT INTO \" + KEYSPACE + '.' + currentTable() + \" (id, v1, v2) VALUES (?,?,?)\";\n        try\n        {\n            Session session = sessionNet();\n\n            PreparedStatement pstmt = session.prepare(cql);\n            AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.instance.getLogger()).inMemQueue.poll();\n            assertLogEntry(cql, AuditLogEntryType.PREPARE_STATEMENT, logEntry, false);\n\n            dropTable(\"DROP TABLE %s\");\n            ResultSet rs = session.execute(pstmt.bind(1, \"insert_audit\", \"test\"));\n            Assert.fail(\"should not succeed\");\n        }\n        catch (NoHostAvailableException e)\n        {\n            \r\n        }\n\n        AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.instance.getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, null);\n        logEntry = ((InMemoryAuditLogger) AuditLogManager.instance.getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, cql);\n        assertEquals(0, ((InMemoryAuditLogger) AuditLogManager.instance.getLogger()).inMemQueue.size());\n    }\n","date":"2020-04-16 20:19:54","endLine":594,"groupId":"101265","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCqlPrepareQueryError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e3/b93ecaaf2ccae06d3072c735f939bdfb233f07.src","preCode":"    public void testCqlPrepareQueryError()\n    {\n        createTable(\"CREATE TABLE %s (id int primary key, v1 text, v2 text)\");\n        String cql = \"INSERT INTO \" + KEYSPACE + '.' + currentTable() + \" (id, v1, v2) VALUES (?,?,?)\";\n        try\n        {\n            Session session = sessionNet();\n\n            PreparedStatement pstmt = session.prepare(cql);\n            AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n            assertLogEntry(cql, AuditLogEntryType.PREPARE_STATEMENT, logEntry, false);\n\n            dropTable(\"DROP TABLE %s\");\n            ResultSet rs = session.execute(pstmt.bind(1, \"insert_audit\", \"test\"));\n            Assert.fail(\"should not succeed\");\n        }\n        catch (NoHostAvailableException e)\n        {\n            \r\n        }\n\n        AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, null);\n        logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, cql);\n        assertEquals(0, ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/audit/AuditLoggerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"M"},{"authorDate":"2019-03-08 22:56:21","commitOrder":2,"curCode":"    public void testCqlPrepareQuerySyntaxError()\n    {\n        String cql = \"INSERT INTO \" + KEYSPACE + '.' + \"foo\" + \"(id, v1, v2) VALES (?,?,?)\";\n        try\n        {\n            createTable(\"CREATE TABLE %s (id int primary key, v1 text, v2 text)\");\n            Session session = sessionNet();\n            PreparedStatement pstmt = session.prepare(cql);\n            ResultSet rs = session.execute(pstmt.bind(1, \"insert_audit\", \"test\"));\n            Assert.fail(\"should not succeed\");\n        }\n        catch (SyntaxError e)\n        {\n            \r\n        }\n        AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.instance.getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, cql);\n        assertEquals(0, ((InMemoryAuditLogger) AuditLogManager.instance.getLogger()).inMemQueue.size());\n    }\n","date":"2020-04-16 20:19:54","endLine":615,"groupId":"101265","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCqlPrepareQuerySyntaxError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e3/b93ecaaf2ccae06d3072c735f939bdfb233f07.src","preCode":"    public void testCqlPrepareQuerySyntaxError()\n    {\n        String cql = \"INSERT INTO \" + KEYSPACE + '.' + \"foo\" + \"(id, v1, v2) VALES (?,?,?)\";\n        try\n        {\n            createTable(\"CREATE TABLE %s (id int primary key, v1 text, v2 text)\");\n            Session session = sessionNet();\n            PreparedStatement pstmt = session.prepare(cql);\n            ResultSet rs = session.execute(pstmt.bind(1, \"insert_audit\", \"test\"));\n            Assert.fail(\"should not succeed\");\n        }\n        catch (SyntaxError e)\n        {\n            \r\n        }\n        AuditLogEntry logEntry = ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.poll();\n        assertLogEntry(logEntry, cql);\n        assertEquals(0, ((InMemoryAuditLogger) AuditLogManager.getInstance().getLogger()).inMemQueue.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/audit/AuditLoggerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":597,"status":"M"}],"commitId":"5242f7d4306f034f32e26834df06ff7fc85a3c16","commitMessage":"@@@Fix issues in audit / full query log interactions\n\nPatch by marcuse; reviewed by Aleksey Yeschenko and Per Otterstr?m for CASSANDRA-14772\n","date":"2020-04-16 20:19:54","modifiedFileCount":"41","status":"M","submitter":"Marcus Eriksson"}]
