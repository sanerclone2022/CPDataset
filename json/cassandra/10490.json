[{"authorTime":"2018-03-11 01:16:46","codes":[{"authorDate":"2018-03-11 01:16:46","commitOrder":1,"curCode":"    public void callbackSuccess() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), FULL_RANGE);\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result));\n\n        Assert.assertEquals(1, cb.submittedCompactions.size());\n        Assert.assertTrue(cb.submittedCompactions.contains(cfm.id));\n    }\n","date":"2018-04-07 07:11:14","endLine":293,"groupId":"11080","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"callbackSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/26/9a725eaad47125a8c8efca6b4618e79b2aeaa4.src","preCode":"    public void callbackSuccess() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), FULL_RANGE);\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result));\n\n        Assert.assertEquals(1, cb.submittedCompactions.size());\n        Assert.assertTrue(cb.submittedCompactions.contains(cfm.id));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/repair/PendingAntiCompactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"B"},{"authorDate":"2018-03-11 01:16:46","commitOrder":1,"curCode":"    public void callbackNullResult() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n        Assert.assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS, result.txn.state());\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), FULL_RANGE);\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result, null));\n\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        Assert.assertEquals(Transactional.AbstractTransactional.State.ABORTED, result.txn.state());\n    }\n","date":"2018-04-07 07:11:14","endLine":317,"groupId":"18890","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"callbackNullResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/26/9a725eaad47125a8c8efca6b4618e79b2aeaa4.src","preCode":"    public void callbackNullResult() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n        Assert.assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS, result.txn.state());\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), FULL_RANGE);\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result, null));\n\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        Assert.assertEquals(Transactional.AbstractTransactional.State.ABORTED, result.txn.state());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/repair/PendingAntiCompactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"}],"commitId":"c5a7fcaa8e00083d6f74967c40474aef07b0d21a","commitMessage":"@@@Abstract repair for pluggable storage\n\nPatch by Blake Eggleston; Reviewed by Jason Brown for CASSANDRA-14116\n","date":"2018-04-07 07:11:14","modifiedFileCount":"11","status":"B","submitter":"Blake Eggleston"},{"authorTime":"2018-07-06 06:10:40","codes":[{"authorDate":"2018-07-06 06:10:40","commitOrder":2,"curCode":"    public void callbackSuccess() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, NO_RANGES));\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result));\n\n        Assert.assertEquals(1, cb.submittedCompactions.size());\n        Assert.assertTrue(cb.submittedCompactions.contains(cfm.id));\n    }\n","date":"2018-09-01 09:34:22","endLine":301,"groupId":"28458","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"callbackSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/37/4a7602a159abb9b29f080464bdd13e31b7e525.src","preCode":"    public void callbackSuccess() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), FULL_RANGE);\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result));\n\n        Assert.assertEquals(1, cb.submittedCompactions.size());\n        Assert.assertTrue(cb.submittedCompactions.contains(cfm.id));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/repair/PendingAntiCompactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"},{"authorDate":"2018-07-06 06:10:40","commitOrder":2,"curCode":"    public void callbackNullResult() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n        Assert.assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS, result.txn.state());\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, Collections.emptyList()));\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result, null));\n\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        Assert.assertEquals(Transactional.AbstractTransactional.State.ABORTED, result.txn.state());\n    }\n","date":"2018-09-01 09:34:22","endLine":325,"groupId":"18890","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"callbackNullResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/37/4a7602a159abb9b29f080464bdd13e31b7e525.src","preCode":"    public void callbackNullResult() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n        Assert.assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS, result.txn.state());\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), FULL_RANGE);\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result, null));\n\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        Assert.assertEquals(Transactional.AbstractTransactional.State.ABORTED, result.txn.state());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/repair/PendingAntiCompactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"}],"commitId":"f7431b432875e334170ccdb19934d05545d2cebd","commitMessage":"@@@Transient Replication and Cheap Quorums\n\nPatch by Blake Eggleston.  Benedict Elliott Smith.  Marcus Eriksson.  Alex Petrov.  Ariel Weisberg; Reviewed by Blake Eggleston.  Marcus Eriksson.  Benedict Elliott Smith.  Alex Petrov.  Ariel Weisberg for CASSANDRA-14404\n\nCo-authored-by: Blake Eggleston <bdeggleston@gmail.com>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\nCo-authored-by: Marcus Eriksson <marcuse@apache.org>\nCo-authored-by: Alex Petrov <oleksandr.petrov@gmail.com>\n","date":"2018-09-01 09:34:22","modifiedFileCount":"230","status":"M","submitter":"Ariel Weisberg"},{"authorTime":"2018-12-19 00:01:02","codes":[{"authorDate":"2018-12-19 00:01:02","commitOrder":3,"curCode":"    public void callbackSuccess() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, NO_RANGES));\n        assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result));\n\n        assertEquals(1, cb.submittedCompactions.size());\n        assertTrue(cb.submittedCompactions.contains(cfm.id));\n    }\n","date":"2019-01-17 15:01:16","endLine":302,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"callbackSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/38/5deac398e8ec2d24a7a659a06a95c1931dfd97.src","preCode":"    public void callbackSuccess() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, NO_RANGES));\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result));\n\n        Assert.assertEquals(1, cb.submittedCompactions.size());\n        Assert.assertTrue(cb.submittedCompactions.contains(cfm.id));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/repair/PendingAntiCompactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2018-12-19 00:01:02","commitOrder":3,"curCode":"    public void callbackNullResult() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n        assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS, result.txn.state());\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, Collections.emptyList()));\n        assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result, null));\n\n        assertTrue(cb.submittedCompactions.isEmpty());\n        assertEquals(Transactional.AbstractTransactional.State.ABORTED, result.txn.state());\n    }\n","date":"2019-01-17 15:01:16","endLine":326,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"callbackNullResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/38/5deac398e8ec2d24a7a659a06a95c1931dfd97.src","preCode":"    public void callbackNullResult() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n        Assert.assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS, result.txn.state());\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, Collections.emptyList()));\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result, null));\n\n        Assert.assertTrue(cb.submittedCompactions.isEmpty());\n        Assert.assertEquals(Transactional.AbstractTransactional.State.ABORTED, result.txn.state());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/repair/PendingAntiCompactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"}],"commitId":"6e27e65f150ed6cc6a7205b9d7c89a763f3256fa","commitMessage":"@@@Only cancel conflicting compactions when starting anticompactions and sub range compactions\n\nPatch by marcuse; reviewed by Blake Eggleston for CASSANDRA-14935\n","date":"2019-01-17 15:01:16","modifiedFileCount":"41","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2019-01-30 21:58:45","codes":[{"authorDate":"2019-01-30 21:58:45","commitOrder":4,"curCode":"    public void callbackSuccess() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID(), 0, 0);\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        assertNotNull(result);\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, NO_RANGES));\n        assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result));\n\n        assertEquals(1, cb.submittedCompactions.size());\n        assertTrue(cb.submittedCompactions.contains(cfm.id));\n    }\n","date":"2019-01-31 16:07:37","endLine":305,"groupId":"10490","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"callbackSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/1d/4a97f428f92e7485f83c7121c030f539347df1.src","preCode":"    public void callbackSuccess() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, NO_RANGES));\n        assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result));\n\n        assertEquals(1, cb.submittedCompactions.size());\n        assertTrue(cb.submittedCompactions.contains(cfm.id));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/repair/PendingAntiCompactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2019-01-30 21:58:45","commitOrder":4,"curCode":"    public void callbackNullResult() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID(), 0, 0);\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        assertNotNull(result);\n        assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS, result.txn.state());\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, Collections.emptyList()));\n        assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result, null));\n\n        assertTrue(cb.submittedCompactions.isEmpty());\n        assertEquals(Transactional.AbstractTransactional.State.ABORTED, result.txn.state());\n    }\n","date":"2019-01-31 16:07:37","endLine":329,"groupId":"10490","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"callbackNullResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/1d/4a97f428f92e7485f83c7121c030f539347df1.src","preCode":"    public void callbackNullResult() throws Exception\n    {\n        cfs.disableAutoCompaction();\n        makeSSTables(2);\n\n        PendingAntiCompaction.AcquisitionCallable acquisitionCallable = new PendingAntiCompaction.AcquisitionCallable(cfs, FULL_RANGE, UUIDGen.getTimeUUID());\n        PendingAntiCompaction.AcquireResult result = acquisitionCallable.call();\n        Assert.assertNotNull(result);\n        assertEquals(Transactional.AbstractTransactional.State.IN_PROGRESS, result.txn.state());\n\n        InstrumentedAcquisitionCallback cb = new InstrumentedAcquisitionCallback(UUIDGen.getTimeUUID(), atEndpoint(FULL_RANGE, Collections.emptyList()));\n        assertTrue(cb.submittedCompactions.isEmpty());\n        cb.apply(Lists.newArrayList(result, null));\n\n        assertTrue(cb.submittedCompactions.isEmpty());\n        assertEquals(Transactional.AbstractTransactional.State.ABORTED, result.txn.state());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/repair/PendingAntiCompactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"}],"commitId":"7f634feb7cf1fdb135133946ffd75efa681b8cb7","commitMessage":"@@@Avoid leaking threads when remote nodes fail anticompaction and rate limit anticompactions\n\nPatch by marcuse; reviewed by Blake Eggleston for CASSANDRA-15002\n","date":"2019-01-31 16:07:37","modifiedFileCount":"6","status":"M","submitter":"Marcus Eriksson"}]
