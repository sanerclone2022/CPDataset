[{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":5,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-06-30 18:47:01","endLine":127,"groupId":"2655","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2d/0303ae3f843c869db022c1423b089e0fef02b6.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"},{"authorDate":"2014-09-02 00:54:46","commitOrder":5,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-06-30 18:47:01","endLine":324,"groupId":"11393","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2d/0303ae3f843c869db022c1423b089e0fef02b6.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"MB"}],"commitId":"a991b64811f4d6adb6c7b31c0df52288eb06cf19","commitMessage":"@@@Storage engine refactor.  a.k.a CASSANDRA-8099\n\nInitial patch.  see ticket for details\n","date":"2015-06-30 18:47:01","modifiedFileCount":"374","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2015-07-17 02:33:28","codes":[{"authorDate":"2015-07-17 02:33:28","commitOrder":6,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.partitionCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.partitionCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-07-17 02:47:50","endLine":123,"groupId":"2655","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/62/89c963eb4b5ca02ac1d80d6a5a5d9888f881e6.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2015-07-17 02:33:28","commitOrder":6,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.partitionCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.partitionCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-07-17 02:47:50","endLine":320,"groupId":"11393","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/62/89c963eb4b5ca02ac1d80d6a5a5d9888f881e6.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"0bd5170c4ff55c9f3307602de031d77883731883","commitMessage":"@@@Metrics should use up to date nomenclature\n\npatch by Stefania Alborghetti; reviewed by yukim for CASSANDRA-9448\n","date":"2015-07-17 02:47:50","modifiedFileCount":"38","status":"M","submitter":"Stefania Alborghetti"},{"authorTime":"2015-06-30 21:58:02","codes":[{"authorDate":"2015-06-30 21:58:02","commitOrder":7,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.partitionCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.partitionCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-07-23 00:05:09","endLine":119,"groupId":"2655","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/88/3149f30428ff1812374156f46d264623c10650.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.partitionCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.partitionCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2015-06-30 21:58:02","commitOrder":7,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.partitionCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.partitionCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-07-23 00:05:09","endLine":316,"groupId":"11393","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/88/3149f30428ff1812374156f46d264623c10650.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.partitionCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.partitionCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (Cell c : r)\n            {\n                assertEquals(c.value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"2457599427d361314dce4833abeb5cd4915d0b06","commitMessage":"@@@Simplify some 8099's implementations\n\npatch by slebresne; reviewed by iamalesky for CASSANDRA-9705\n","date":"2015-07-23 00:05:09","modifiedFileCount":"148","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2015-07-24 06:34:35","codes":[{"authorDate":"2015-07-24 06:34:35","commitOrder":8,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-07-24 06:34:35","endLine":119,"groupId":"2655","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b5/3f62cd1b121e3dc844c9451752c695c8bfce16.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.partitionCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.partitionCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2015-07-24 06:34:35","commitOrder":8,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-07-24 06:34:35","endLine":316,"groupId":"11393","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b5/3f62cd1b121e3dc844c9451752c695c8bfce16.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.partitionCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.partitionCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.partitionCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.partitionCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"eae3b02649789f1993147d5580a7b20794212319","commitMessage":"@@@Reverted partitionCache metric names to rowCache.  CASSANDRA-9448\n","date":"2015-07-24 06:34:35","modifiedFileCount":"3","status":"M","submitter":"Stefania Alborghetti"},{"authorTime":"2015-07-03 21:38:40","codes":[{"authorDate":"2015-07-03 21:38:40","commitOrder":9,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-07-31 19:42:47","endLine":119,"groupId":"2655","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b8/9b792bcac9e75446ca29632c72e05c17891700.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2015-07-03 21:38:40","commitOrder":9,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-07-31 19:42:47","endLine":316,"groupId":"11393","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b8/9b792bcac9e75446ca29632c72e05c17891700.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"69f77cbddd4c74448f227e9aceef84d345118184","commitMessage":"@@@Stop accessing the partitioner directly via StorageService\n\nChanges the way the partitioner is accessed. Partitioner is now stored\nand accessed according to the reason for needing it:\n* if it is to access a table / prepare a statement.  the partitioner\nrelevant to this table can be found in its CFMetaData.\n* if it is to route messages to the relevant member of the cluster.  the\npartitioner in TokenMetadata is to be used.\n\npatch by Branimir Lambov; reviewed by Aleksey Yeschenko for\nCASSANDRA-8143\n","date":"2015-07-31 19:42:47","modifiedFileCount":"125","status":"M","submitter":"Branimir Lambov"},{"authorTime":"2015-08-01 01:24:52","codes":[{"authorDate":"2015-08-01 01:24:52","commitOrder":10,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-08-01 01:24:52","endLine":119,"groupId":"2655","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b5/3f62cd1b121e3dc844c9451752c695c8bfce16.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2015-08-01 01:24:52","commitOrder":10,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-08-01 01:24:52","endLine":316,"groupId":"11393","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b5/3f62cd1b121e3dc844c9451752c695c8bfce16.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"a22ce89e868644ea04f0f3dacec05fff1673a345","commitMessage":"@@@Revert \"Stop accessing the partitioner directly via StorageService\"\n\nThis reverts commit 69f77cbddd4c74448f227e9aceef84d345118184.\n","date":"2015-08-01 01:24:52","modifiedFileCount":"125","status":"M","submitter":"Jonathan Ellis"},{"authorTime":"2015-08-01 06:33:20","codes":[{"authorDate":"2015-08-01 06:33:20","commitOrder":11,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-08-01 06:33:51","endLine":119,"groupId":"2655","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b8/9b792bcac9e75446ca29632c72e05c17891700.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2015-08-01 06:33:20","commitOrder":11,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-08-01 06:33:51","endLine":316,"groupId":"11393","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b8/9b792bcac9e75446ca29632c72e05c17891700.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.partitioner.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"0a08525ad236f78df05c854dead62f300eae271d","commitMessage":"@@@Revert \"Revert \"Stop accessing the partitioner directly via StorageService\"\"\n\nThis reverts commit a22ce89e868644ea04f0f3dacec05fff1673a345.\n","date":"2015-08-01 06:33:51","modifiedFileCount":"125","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2015-09-17 04:00:57","codes":[{"authorDate":"2015-09-17 04:00:57","commitOrder":12,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.ksAndCFName, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-09-17 04:00:57","endLine":118,"groupId":"2655","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d4/07f7afaaeddda07cb4d9bebfbc1fe5a73e68c6.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2015-09-17 04:00:57","commitOrder":12,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.ksAndCFName, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2015-09-17 04:00:57","endLine":350,"groupId":"11393","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d4/07f7afaaeddda07cb4d9bebfbc1fe5a73e68c6.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.cfId, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"10b11835ac01d769a70c408a92eacca00d06ce47","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-09-17 04:00:57","modifiedFileCount":"25","status":"M","submitter":"Robert Stupp"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":13,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata(), dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata(), System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2017-01-28 06:17:46","endLine":128,"groupId":"21883","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fe/e3f2c102fb032ba0b7b80aa0d0d053ac60685e.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.ksAndCFName, dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":13,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata(), dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata(), System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2017-01-28 06:17:46","endLine":473,"groupId":"11393","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fe/e3f2c102fb032ba0b7b80aa0d0d053ac60685e.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata.ksAndCFName, dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata, System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2019-10-16 04:04:26","codes":[{"authorDate":"2019-10-16 04:04:26","commitOrder":14,"curCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata(), dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata(), System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell<?>)c).buffer(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","date":"2020-09-14 23:32:44","endLine":129,"groupId":"10912","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"testRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/59/ce2134542597ede315860d291ccdbaf1d890d9.src","preCode":"    public void testRoundTrip() throws Exception\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata(), dk);\n\n        RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata(), System.currentTimeMillis(), key);\n        rub.clustering(String.valueOf(0));\n        rub.add(\"val\", ByteBufferUtil.bytes(\"val\" + 0));\n        rub.build().applyUnsafe();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(1).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(1, cachedCf.rowCount());\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(\"val\" + 0));\n            }\n        }\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-10-16 04:04:26","commitOrder":14,"curCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata(), dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata(), System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            ValueAccessors.assertDataEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell<?>)c).buffer(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","date":"2020-09-14 23:32:44","endLine":474,"groupId":"10912","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"testRowCacheRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/59/ce2134542597ede315860d291ccdbaf1d890d9.src","preCode":"    public void testRowCacheRange()\n    {\n        CompactionManager.instance.disableAutoCompaction();\n\n        Keyspace keyspace = Keyspace.open(KEYSPACE_CACHED);\n        String cf = \"CachedIntCF\";\n        ColumnFamilyStore cachedStore  = keyspace.getColumnFamilyStore(cf);\n        long startRowCacheHits = cachedStore.metric.rowCacheHit.getCount();\n        long startRowCacheOutOfRange = cachedStore.metric.rowCacheHitOutOfRange.getCount();\n        \r\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        CacheService.instance.setRowCacheCapacityInMB(1);\n\n        ByteBuffer key = ByteBufferUtil.bytes(\"rowcachekey\");\n        DecoratedKey dk = cachedStore.decorateKey(key);\n        RowCacheKey rck = new RowCacheKey(cachedStore.metadata(), dk);\n        String values[] = new String[200];\n        for (int i = 0; i < 200; i++)\n        {\n            RowUpdateBuilder rub = new RowUpdateBuilder(cachedStore.metadata(), System.currentTimeMillis(), key);\n            rub.clustering(String.valueOf(i));\n            values[i] = \"val\" + i;\n            rub.add(\"val\", ByteBufferUtil.bytes(values[i]));\n            rub.build().applyUnsafe();\n        }\n        Arrays.sort(values);\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(10).build());\n        assertEquals(++startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).fromIncl(String.valueOf(210)).toExcl(String.valueOf(215)).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(101).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n        assertEquals(++startRowCacheOutOfRange, cachedStore.metric.rowCacheHitOutOfRange.getCount());\n\n\n        CacheService.instance.invalidateRowCache();\n\n        \r\n        Util.getAll(Util.cmd(cachedStore, dk).withLimit(105).build());\n        assertEquals(startRowCacheHits, cachedStore.metric.rowCacheHit.getCount());\n\n        \r\n        CachedPartition cachedCf = (CachedPartition)CacheService.instance.rowCache.get(rck);\n        assertEquals(cachedCf.rowCount(), 100);\n        int i = 0;\n\n        for (Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()), Slices.ALL, false)))\n        {\n            Row r = (Row) unfiltered;\n\n            assertEquals(r.clustering().get(0), ByteBufferUtil.bytes(values[i].substring(3)));\n\n            for (ColumnData c : r)\n            {\n                assertEquals(((Cell)c).value(), ByteBufferUtil.bytes(values[i]));\n            }\n            i++;\n        }\n\n        cachedStore.truncateBlocking();\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RowCacheTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"ccab496d2d37c86341d364dea6c27513fda27331","commitMessage":"@@@Add byte array backed cells\n\nPatch by Blake Eggleston; reviewed by Caleb Rackliffe and Marcus Eriksson for CASSANDRA-15393\n","date":"2020-09-14 23:32:44","modifiedFileCount":"278","status":"M","submitter":"Blake Eggleston"}]
