[{"authorTime":"2010-04-17 00:44:47","codes":[{"authorDate":"2010-04-17 00:44:47","commitOrder":1,"curCode":"    public void testBigRandom() {\n        int size = 10 * 1000 * 1000;\n        bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);\n        FilterTest.testFalsePositives(bf,\n                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n    }\n","date":"2010-04-17 00:44:47","endLine":49,"groupId":"1500","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigRandom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/53/201877a5e551bfe32f43dfd430ee6dc0868a3b.src","preCode":"    public void testBigRandom() {\n        int size = 10 * 1000 * 1000;\n        bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);\n        FilterTest.testFalsePositives(bf,\n                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"},{"authorDate":"2010-04-17 00:44:47","commitOrder":1,"curCode":"    public void timeit() {\n        int size = 300 * FilterTest.ELEMENTS;\n        bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);\n        for (int i = 0; i < 10; i++) {\n            FilterTest.testFalsePositives(bf,\n                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n            bf.clear();\n        }\n    }\n","date":"2010-04-17 00:44:47","endLine":61,"groupId":"1500","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timeit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/53/201877a5e551bfe32f43dfd430ee6dc0868a3b.src","preCode":"    public void timeit() {\n        int size = 300 * FilterTest.ELEMENTS;\n        bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);\n        for (int i = 0; i < 10; i++) {\n            FilterTest.testFalsePositives(bf,\n                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n            bf.clear();\n        }\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"0a9a17e5cbf202a26b3cc21f71b389c149fd71f2","commitMessage":"@@@add long-test ant target for compaction speed test and larger bloom filter tests [formerly commented out].  patch by Stu Hood; reviewed by Jeremy Hanna for CASSANDRA-985\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@934992 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-04-17 00:44:47","modifiedFileCount":"1","status":"B","submitter":"Jonathan Ellis"},{"authorTime":"2010-12-25 01:59:20","codes":[{"authorDate":"2010-12-25 01:59:20","commitOrder":2,"curCode":"    public void testBigRandom()\n    {\n        int size = 10 * 1000 * 1000;\n        bf = BloomFilter.getFilter(size, FilterTestHelper.spec.bucketsPerElement);\n        FilterTestHelper.testFalsePositives(bf,\n                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n    }\n","date":"2010-12-25 01:59:20","endLine":51,"groupId":"1502","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigRandom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b8/8f74f0dc9c5b1da5da809fe0bca5f6724e8f56.src","preCode":"    public void testBigRandom() {\n        int size = 10 * 1000 * 1000;\n        bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);\n        FilterTest.testFalsePositives(bf,\n                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                      new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2010-12-25 01:59:20","commitOrder":2,"curCode":"    public void timeit()\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        bf = BloomFilter.getFilter(size, FilterTestHelper.spec.bucketsPerElement);\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf,\n                                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n            bf.clear();\n        }\n    }\n","date":"2010-12-25 01:59:20","endLine":65,"groupId":"1500","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timeit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b8/8f74f0dc9c5b1da5da809fe0bca5f6724e8f56.src","preCode":"    public void timeit() {\n        int size = 300 * FilterTest.ELEMENTS;\n        bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);\n        for (int i = 0; i < 10; i++) {\n            FilterTest.testFalsePositives(bf,\n                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                          new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n            bf.clear();\n        }\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"6b60d81f0e0c51d823f0c935d169cb60a39597f1","commitMessage":"@@@merge from 0.7\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@1052543 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-25 01:59:20","modifiedFileCount":"18","status":"M","submitter":"Jonathan Ellis"},{"authorTime":"2012-03-17 06:52:06","codes":[{"authorDate":"2012-03-17 06:52:06","commitOrder":3,"curCode":"    public void testBigRandom(FilterFactory.Type type)\n    {\n        int size = 10 * 1000 * 1000;\n        Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type);\n        double fp = FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","date":"2012-03-17 06:56:58","endLine":50,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigRandom","params":"(FilterFactory.Typetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d4/a4c34d23b12e1eec55f219fd366b6c6b512684.src","preCode":"    public void testBigRandom()\n    {\n        int size = 10 * 1000 * 1000;\n        bf = BloomFilter.getFilter(size, FilterTestHelper.spec.bucketsPerElement);\n        FilterTestHelper.testFalsePositives(bf,\n                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2012-03-17 06:52:06","commitOrder":3,"curCode":"    public void timeit(FilterFactory.Type type)\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                    new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp/10);\n    }\n","date":"2012-03-17 06:56:58","endLine":65,"groupId":"1500","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"timeit","params":"(FilterFactory.Typetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d4/a4c34d23b12e1eec55f219fd366b6c6b512684.src","preCode":"    public void timeit()\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        bf = BloomFilter.getFilter(size, FilterTestHelper.spec.bucketsPerElement);\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf,\n                                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n            bf.clear();\n        }\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"d765b246e72e7bb455e9ec9440ae735b1ee8543f","commitMessage":"@@@update MurmurHash to version 3\npatch by Vijay; reviewed by Pavel Yaskevich for CASSANDRA-2975\n","date":"2012-03-17 06:56:58","modifiedFileCount":"20","status":"M","submitter":"Pavel Yaskevich"},{"authorTime":"2012-10-31 23:54:47","codes":[{"authorDate":"2012-10-31 23:54:47","commitOrder":4,"curCode":"    public void testBigRandom(FilterFactory.Type type)\n    {\n        int size = 10 * 1000 * 1000;\n        Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);\n        double fp = FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","date":"2012-11-01 00:22:47","endLine":50,"groupId":"32064","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigRandom","params":"(FilterFactory.Typetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/06/ad6428bb7e95c3b8ae3af89a5df0c4e3c65c06.src","preCode":"    public void testBigRandom(FilterFactory.Type type)\n    {\n        int size = 10 * 1000 * 1000;\n        Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type);\n        double fp = FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2012-10-31 23:54:47","commitOrder":4,"curCode":"    public void timeit(FilterFactory.Type type)\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                    new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp/10);\n    }\n","date":"2012-11-01 00:22:47","endLine":65,"groupId":"1500","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"timeit","params":"(FilterFactory.Typetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/06/ad6428bb7e95c3b8ae3af89a5df0c4e3c65c06.src","preCode":"    public void timeit(FilterFactory.Type type)\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                    new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp/10);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"dc37dea745fe89d70819d649c823d9bfcb0d7577","commitMessage":"@@@off-heap bloom filters for row keys\npatch by vijay; reviewed by jbellis for CASSANDRA-4865\n","date":"2012-11-01 00:22:47","modifiedFileCount":"18","status":"M","submitter":"Jonathan Ellis"},{"authorTime":"2012-10-28 01:16:25","codes":[{"authorDate":"2012-10-28 01:16:25","commitOrder":5,"curCode":"    public void testBigRandom(FilterFactory.Type type)\n    {\n        int size = 10 * 1000 * 1000;\n        IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);\n        double fp = FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","date":"2012-11-02 00:29:19","endLine":50,"groupId":"32064","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigRandom","params":"(FilterFactory.Typetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/94/caa9720789c4078213133810adcd6c83081b75.src","preCode":"    public void testBigRandom(FilterFactory.Type type)\n    {\n        int size = 10 * 1000 * 1000;\n        Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);\n        double fp = FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2012-10-28 01:16:25","commitOrder":5,"curCode":"    public void timeit(FilterFactory.Type type)\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                    new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp/10);\n    }\n","date":"2012-11-02 00:29:19","endLine":65,"groupId":"1500","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"timeit","params":"(FilterFactory.Typetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/94/caa9720789c4078213133810adcd6c83081b75.src","preCode":"    public void timeit(FilterFactory.Type type)\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                    new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp/10);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"a15500e742b7c18804ead7ef338d6fa39b9ba984","commitMessage":"@@@convert abstract class Filter to IFilter\n","date":"2012-11-02 00:29:19","modifiedFileCount":"39","status":"M","submitter":"Jonathan Ellis"},{"authorTime":"2013-04-27 02:17:32","codes":[{"authorDate":"2013-04-27 02:17:32","commitOrder":6,"curCode":"    public void testBigRandom()\n    {\n        int size = 10 * 1000 * 1000;\n        IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);\n        double fp = FilterTestHelper.testFalsePositives(bf,\n                                                        new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                        new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","date":"2013-04-27 02:17:39","endLine":54,"groupId":"32064","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigRandom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/8d/916a04fc82f03219add762c66974cb294a4b13.src","preCode":"    public void testBigRandom(FilterFactory.Type type)\n    {\n        int size = 10 * 1000 * 1000;\n        IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);\n        double fp = FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                            new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2013-04-27 02:17:32","commitOrder":6,"curCode":"    public void timeit()\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf,\n                                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp / 10);\n    }\n","date":"2013-04-27 02:17:39","endLine":71,"groupId":"1500","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"timeit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/8d/916a04fc82f03219add762c66974cb294a4b13.src","preCode":"    public void timeit(FilterFactory.Type type)\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                    new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp/10);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"7f2c3a8e40f97c626def5c510d77c1da3d9ae926","commitMessage":"@@@Removed compatibility with pre-1.2.5 sstables and network messages\npatch by jbellis; reviewed by marcuse for CASSANDRA-5511\n","date":"2013-04-27 02:17:39","modifiedFileCount":"74","status":"M","submitter":"Jonathan Ellis"},{"authorTime":"2015-07-05 23:14:36","codes":[{"authorDate":"2015-07-05 23:14:36","commitOrder":7,"curCode":"    private static void testBigRandom(boolean oldBfHashOrder)\n    {\n        int size = 10 * 1000 * 1000;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);\n        double fp = testFalsePositives(bf,\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive for oldBfHashOrder={}: {}\", oldBfHashOrder, fp);\n    }\n","date":"2015-07-05 23:14:36","endLine":68,"groupId":"13216","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigRandom","params":"(booleanoldBfHashOrder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c5/0296d678debb52c2c04ac0ac918aa172ac68e7.src","preCode":"    public void testBigRandom()\n    {\n        int size = 10 * 1000 * 1000;\n        IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);\n        double fp = FilterTestHelper.testFalsePositives(bf,\n                                                        new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                        new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2015-07-05 23:14:36","commitOrder":7,"curCode":"    private static void timeit(boolean oldBfHashOrder)\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            testFalsePositives(bf,\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive for oldBfHashOrder={}: {}\", oldBfHashOrder, sumfp / 10);\n    }\n","date":"2015-07-05 23:14:36","endLine":200,"groupId":"1500","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"timeit","params":"(booleanoldBfHashOrder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c5/0296d678debb52c2c04ac0ac918aa172ac68e7.src","preCode":"    public void timeit()\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            FilterTestHelper.testFalsePositives(bf,\n                                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp / 10);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"23fd75f27c40462636f09920719b5dcbef5b8f36","commitMessage":"@@@Bloom filter false positive ratio is not honoured\n\npatch by Robert Stupp.  reviewed by Benedict Elliott-Smith for CASSANDRA-8413\n","date":"2015-07-05 23:14:36","modifiedFileCount":"13","status":"M","submitter":"Robert Stupp"},{"authorTime":"2016-09-27 21:26:15","codes":[{"authorDate":"2016-09-27 21:26:15","commitOrder":8,"curCode":"    public void testBigRandom()\n    {\n        int size = 10 * 1000 * 1000;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);\n        double fp = testFalsePositives(bf,\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","date":"2016-11-30 17:23:18","endLine":58,"groupId":"3477","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigRandom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/10/dd5a64fea7794cbd94fd34d5852cceb56c758b.src","preCode":"    private static void testBigRandom(boolean oldBfHashOrder)\n    {\n        int size = 10 * 1000 * 1000;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);\n        double fp = testFalsePositives(bf,\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive for oldBfHashOrder={}: {}\", oldBfHashOrder, fp);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2016-09-27 21:26:15","commitOrder":8,"curCode":"    public void timeit()\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            testFalsePositives(bf,\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp / 10);\n    }\n","date":"2016-11-30 17:23:18","endLine":174,"groupId":"1500","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"timeit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/10/dd5a64fea7794cbd94fd34d5852cceb56c758b.src","preCode":"    private static void timeit(boolean oldBfHashOrder)\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            testFalsePositives(bf,\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive for oldBfHashOrder={}: {}\", oldBfHashOrder, sumfp / 10);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"4a2464192e9e69457f5a5ecf26c094f9298bf069","commitMessage":"@@@Remove pre-3.0 compatibility code for 4.0\n\npatch by Sylvain Lebresne; reviewed by Aleksey Yeschenko for CASSANDRA-12716\n","date":"2016-11-30 17:23:18","modifiedFileCount":"122","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2018-01-14 08:56:16","codes":[{"authorDate":"2018-01-14 08:56:16","commitOrder":9,"curCode":"    public void testBigRandom()\n    {\n        int size = 10 * 1000 * 1000;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement);\n        double fp = testFalsePositives(bf,\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","date":"2018-01-18 06:16:31","endLine":58,"groupId":"1079","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"testBigRandom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d9/98e4d8cf10457e69b866354e0d9b8c2f48a1cd.src","preCode":"    public void testBigRandom()\n    {\n        int size = 10 * 1000 * 1000;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);\n        double fp = testFalsePositives(bf,\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n        logger.info(\"Bloom filter false positive: {}\", fp);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2018-01-14 08:56:16","commitOrder":9,"curCode":"    public void timeit()\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            testFalsePositives(bf,\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp / 10);\n    }\n","date":"2018-01-18 06:16:31","endLine":174,"groupId":"1079","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"timeit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d9/98e4d8cf10457e69b866354e0d9b8c2f48a1cd.src","preCode":"    public void timeit()\n    {\n        int size = 300 * FilterTestHelper.ELEMENTS;\n        IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);\n        double sumfp = 0;\n        for (int i = 0; i < 10; i++)\n        {\n            testFalsePositives(bf,\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),\n                               new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));\n\n            bf.clear();\n        }\n        logger.info(\"Bloom filter mean false positive: {}\", sumfp / 10);\n    }\n","realPath":"test/long/org/apache/cassandra/utils/LongBloomFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"7533ff089ab913262e7a540cc778d7f67ce17ce1","commitMessage":"@@@Remove unused on-heap Bloomfilter implementation\n\npatch by Jay Zhuang; reviewed by jasobrown for CASSANDRA-14152\n","date":"2018-01-18 06:16:31","modifiedFileCount":"8","status":"M","submitter":"Jay Zhuang"}]
