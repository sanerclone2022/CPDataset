[{"authorTime":"2020-10-19 22:31:20","codes":[{"authorDate":"2020-10-19 22:31:20","commitOrder":1,"curCode":"    public void testEmptyRangeQueriesWithStaticRow()\n    {\n        tester().createTable(\"CREATE TABLE %s(k int, c int, s int static, PRIMARY KEY (k, c)) \" +\n                             \"WITH CLUSTERING ORDER BY (c %s) AND read_repair='%s'\")\n                .mutate(1, \"DELETE FROM %s USING TIMESTAMP 1 WHERE k=0 AND c>0 AND c<3\")\n                .mutate(1, \"INSERT INTO %s (k, s) VALUES (0, 0)\")\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c>1 and c<=1\", 1)\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c>2 and c<=2\", 0)\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, null, 0))\n                .mutate(2, \"DELETE FROM %s WHERE k=0 AND c>0 AND c<3\")\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, null, 0));\n    }\n","date":"2020-10-19 22:31:20","endLine":144,"groupId":"13865","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyRangeQueriesWithStaticRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a8/fb978bd998c0f665a858455f94265dacb45edc.src","preCode":"    public void testEmptyRangeQueriesWithStaticRow()\n    {\n        tester().createTable(\"CREATE TABLE %s(k int, c int, s int static, PRIMARY KEY (k, c)) \" +\n                             \"WITH CLUSTERING ORDER BY (c %s) AND read_repair='%s'\")\n                .mutate(1, \"DELETE FROM %s USING TIMESTAMP 1 WHERE k=0 AND c>0 AND c<3\")\n                .mutate(1, \"INSERT INTO %s (k, s) VALUES (0, 0)\")\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c>1 and c<=1\", 1)\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c>2 and c<=2\", 0)\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, null, 0))\n                .mutate(2, \"DELETE FROM %s WHERE k=0 AND c>0 AND c<3\")\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, null, 0));\n    }\n","realPath":"test/distributed/org/apache/cassandra/distributed/test/ReadRepairEmptyRangeTombstonesTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2020-10-19 22:31:20","commitOrder":1,"curCode":"    public void testPointQueriesWithRowsContainedInTombstoneRange()\n    {\n        tester().createTable(\"CREATE TABLE %s(k int, c int, PRIMARY KEY (k, c)) \" +\n                             \"WITH CLUSTERING ORDER BY (c %s) AND read_repair='%s'\")\n                .mutate(1, \"DELETE FROM %s USING TIMESTAMP 1 WHERE k=0 AND c>0 AND c<3\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 0)\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 1)\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 2)\")\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=1\", 1, row(0, 1))\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=2\", 1, row(0, 2))\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=3\", 0)\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, 1), row(0, 2))\n                .mutate(2, \"DELETE FROM %s WHERE k=0 AND c>0 AND c<3\")\n                .assertRowsInternal(\"SELECT * FROM %s\");\n    }\n","date":"2020-10-19 22:31:20","endLine":239,"groupId":"13862","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPointQueriesWithRowsContainedInTombstoneRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a8/fb978bd998c0f665a858455f94265dacb45edc.src","preCode":"    public void testPointQueriesWithRowsContainedInTombstoneRange()\n    {\n        tester().createTable(\"CREATE TABLE %s(k int, c int, PRIMARY KEY (k, c)) \" +\n                             \"WITH CLUSTERING ORDER BY (c %s) AND read_repair='%s'\")\n                .mutate(1, \"DELETE FROM %s USING TIMESTAMP 1 WHERE k=0 AND c>0 AND c<3\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 0)\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 1)\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 2)\")\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=1\", 1, row(0, 1))\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=2\", 1, row(0, 2))\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=3\", 0)\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, 1), row(0, 2))\n                .mutate(2, \"DELETE FROM %s WHERE k=0 AND c>0 AND c<3\")\n                .assertRowsInternal(\"SELECT * FROM %s\");\n    }\n","realPath":"test/distributed/org/apache/cassandra/distributed/test/ReadRepairEmptyRangeTombstonesTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"B"}],"commitId":"83b41b6b69b6f020401ecb94137d0cf6fa2b67e4","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n\n# Conflicts:\n#\tCHANGES.txt\n#\tsrc/java/org/apache/cassandra/db/filter/ColumnFilter.java\n#\ttest/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java\n","date":"2020-10-19 22:31:20","modifiedFileCount":"8","status":"B","submitter":"Andr?s de la Pe?a"},{"authorTime":"2020-10-19 22:31:20","codes":[{"authorDate":"2021-02-10 22:39:41","commitOrder":2,"curCode":"    public void testEmptyRangeQueriesWithStaticRow()\n    {\n        tester().createTable(\"CREATE TABLE %s(k int, c int, s int static, PRIMARY KEY (k, c)) \" +\n                             \"WITH CLUSTERING ORDER BY (c %s) AND read_repair='%s'\")\n                .mutate(1, \"DELETE FROM %s USING TIMESTAMP 1 WHERE k=0 AND c>0 AND c<3\")\n                .mutate(1, \"INSERT INTO %s (k, s) VALUES (0, 0)\")\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c>1 and c<=1\", 0)\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c>2 and c<=2\", 0)\n                .assertRowsInternal(\"SELECT * FROM %s\")\n                .mutate(2, \"DELETE FROM %s WHERE k=0 AND c>0 AND c<3\")\n                .assertRowsInternal(\"SELECT * FROM %s\");\n    }\n","date":"2021-03-09 22:01:15","endLine":143,"groupId":"10163","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testEmptyRangeQueriesWithStaticRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/7b128e89cbdf4fb38bd7f5f50ae9aa09f79e5c.src","preCode":"    public void testEmptyRangeQueriesWithStaticRow()\n    {\n        tester().createTable(\"CREATE TABLE %s(k int, c int, s int static, PRIMARY KEY (k, c)) \" +\n                             \"WITH CLUSTERING ORDER BY (c %s) AND read_repair='%s'\")\n                .mutate(1, \"DELETE FROM %s USING TIMESTAMP 1 WHERE k=0 AND c>0 AND c<3\")\n                .mutate(1, \"INSERT INTO %s (k, s) VALUES (0, 0)\")\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c>1 and c<=1\", 1)\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c>2 and c<=2\", 0)\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, null, 0))\n                .mutate(2, \"DELETE FROM %s WHERE k=0 AND c>0 AND c<3\")\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, null, 0));\n    }\n","realPath":"test/distributed/org/apache/cassandra/distributed/test/ReadRepairEmptyRangeTombstonesTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-10-19 22:31:20","commitOrder":2,"curCode":"    public void testPointQueriesWithRowsContainedInTombstoneRange()\n    {\n        tester().createTable(\"CREATE TABLE %s(k int, c int, PRIMARY KEY (k, c)) \" +\n                             \"WITH CLUSTERING ORDER BY (c %s) AND read_repair='%s'\")\n                .mutate(1, \"DELETE FROM %s USING TIMESTAMP 1 WHERE k=0 AND c>0 AND c<3\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 0)\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 1)\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 2)\")\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=1\", 1, row(0, 1))\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=2\", 1, row(0, 2))\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=3\", 0)\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, 1), row(0, 2))\n                .mutate(2, \"DELETE FROM %s WHERE k=0 AND c>0 AND c<3\")\n                .assertRowsInternal(\"SELECT * FROM %s\");\n    }\n","date":"2020-10-19 22:31:20","endLine":239,"groupId":"10163","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPointQueriesWithRowsContainedInTombstoneRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a8/fb978bd998c0f665a858455f94265dacb45edc.src","preCode":"    public void testPointQueriesWithRowsContainedInTombstoneRange()\n    {\n        tester().createTable(\"CREATE TABLE %s(k int, c int, PRIMARY KEY (k, c)) \" +\n                             \"WITH CLUSTERING ORDER BY (c %s) AND read_repair='%s'\")\n                .mutate(1, \"DELETE FROM %s USING TIMESTAMP 1 WHERE k=0 AND c>0 AND c<3\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 0)\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 1)\")\n                .mutate(1, \"INSERT INTO %s (k, c) VALUES (0, 2)\")\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=1\", 1, row(0, 1))\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=2\", 1, row(0, 2))\n                .assertRowsDistributed(\"SELECT * FROM %s WHERE k=0 AND c=3\", 0)\n                .assertRowsInternal(\"SELECT * FROM %s\", row(0, 1), row(0, 2))\n                .mutate(2, \"DELETE FROM %s WHERE k=0 AND c>0 AND c<3\")\n                .assertRowsInternal(\"SELECT * FROM %s\");\n    }\n","realPath":"test/distributed/org/apache/cassandra/distributed/test/ReadRepairEmptyRangeTombstonesTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"N"}],"commitId":"9bc8d0b452aeb7aaa2005e710fc3de0998172738","commitMessage":"@@@Avoid executing commands that have guaranteed empty bounds in slices filter\n\nPatch by Alex Petrov; reviewed by Marcus Eriksson and Aleksey Yeschenko for CASSANDRA-16435.\n","date":"2021-03-09 22:01:15","modifiedFileCount":"9","status":"M","submitter":"Alex Petrov"}]
