[{"authorTime":"2013-06-28 02:35:18","codes":[{"authorDate":"2013-06-28 02:35:18","commitOrder":1,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        rm = new RowMutation(\"Keyspace1\", ROW.key);\n        rm.delete(\"Standard1\", ByteBufferUtil.bytes(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col5\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col4\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col5\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col6\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col95\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col0\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2013-06-28 02:35:18","endLine":338,"groupId":"2755","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fa/ee4e714f93312985944478039fe10a821c0325.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        rm = new RowMutation(\"Keyspace1\", ROW.key);\n        rm.delete(\"Standard1\", ByteBufferUtil.bytes(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col5\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col4\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col5\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col6\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col95\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col0\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"},{"authorDate":"2013-06-28 02:35:18","commitOrder":1,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col2\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2013-06-28 02:35:18","endLine":372,"groupId":"25829","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fa/ee4e714f93312985944478039fe10a821c0325.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col2\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"B"}],"commitId":"0e96e585837c277073779a5f004fbb1e245964af","commitMessage":"@@@Rename Table to Keyspace\n\npatch by Jeremiah Jordan; reviewed by Aleksey Yeschenko for\nCASSANDRA-5613\n","date":"2013-06-28 02:35:18","modifiedFileCount":"182","status":"B","submitter":"Aleksey Yeschenko"},{"authorTime":"2013-10-29 18:03:52","codes":[{"authorDate":"2013-10-29 18:03:52","commitOrder":2,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        rm = new RowMutation(\"Keyspace1\", ROW.key);\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2013-12-18 00:03:21","endLine":320,"groupId":"23135","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/1c/392c91169a1c8072400d444a545480587a8def.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        rm = new RowMutation(\"Keyspace1\", ROW.key);\n        rm.delete(\"Standard1\", ByteBufferUtil.bytes(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col5\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col4\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col5\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col6\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col95\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col0\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"},{"authorDate":"2013-10-29 18:03:52","commitOrder":2,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2013-12-18 00:03:21","endLine":354,"groupId":"25829","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/1c/392c91169a1c8072400d444a545480587a8def.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, ByteBufferUtil.bytes(\"col2\"), ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"362cc05352ec67e707e0ac790732e96a15e63f6b","commitMessage":"@@@Push composites support in the storage engine\n\npatch by slebresne; reviewed by benedict for CASSANDRA-5417\n","date":"2013-12-18 00:03:21","modifiedFileCount":"205","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2013-12-22 05:37:43","codes":[{"authorDate":"2013-12-22 05:37:43","commitOrder":3,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        rm = new Mutation(\"Keyspace1\", ROW.key);\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2013-12-22 05:37:43","endLine":317,"groupId":"23135","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ef/69518e71c775683bec2434d8252e3cdddfebc0.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        rm = new RowMutation(\"Keyspace1\", ROW.key);\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2013-12-22 05:37:43","commitOrder":3,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2013-12-22 05:37:43","endLine":351,"groupId":"25829","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ef/69518e71c775683bec2434d8252e3cdddfebc0.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        RowMutation rm = new RowMutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"6bbb13b9b0fe62de2a2140055af2ea6968c73ccc","commitMessage":"@@@Rename RowMutation->Mutation in preparation for Row->Partition\n","date":"2013-12-22 05:37:43","modifiedFileCount":"91","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2014-02-11 06:59:15","codes":[{"authorDate":"2014-02-11 06:59:15","commitOrder":4,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        rm = new Mutation(\"Keyspace1\", ROW.key);\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2014-02-12 01:35:31","endLine":317,"groupId":"23135","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ca/aff65317054f16db790ffcc2a715324ae0929a.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        rm = new Mutation(\"Keyspace1\", ROW.key);\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2014-02-11 06:59:15","commitOrder":4,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2014-02-12 01:35:31","endLine":351,"groupId":"25829","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ca/aff65317054f16db790ffcc2a715324ae0929a.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"5204575022030ce2e899edf36847fc3744f3d0ca","commitMessage":"@@@Replace TMBSC usage with ABSC and kill TMBSC\n","date":"2014-02-12 01:35:31","modifiedFileCount":"33","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2014-04-29 20:07:34","codes":[{"authorDate":"2014-04-29 20:07:34","commitOrder":5,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.getKey(), cf);\n        rm.apply();\n\n        rm = new Mutation(\"Keyspace1\", ROW.getKey());\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2014-04-29 20:07:34","endLine":316,"groupId":"23135","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/12/e6d9f669ec6f8b84118ece43d8e7c39b803e89.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        rm = new Mutation(\"Keyspace1\", ROW.key);\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"},{"authorDate":"2014-04-29 20:07:34","commitOrder":5,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.getKey(), cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2014-04-29 20:07:34","endLine":350,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/12/e6d9f669ec6f8b84118ece43d8e7c39b803e89.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.key, cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"7d7610fdb3fecda4868bb86a302d7e3707608300","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n\nConflicts:\n\tsrc/java/org/apache/cassandra/cql/QueryProcessor.java\n","date":"2014-04-29 20:07:34","modifiedFileCount":"161","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2014-06-21 01:55:35","codes":[{"authorDate":"2014-06-21 01:55:35","commitOrder":6,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACE1, \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(KEYSPACE1, ROW.getKey(), cf);\n        rm.apply();\n\n        rm = new Mutation(KEYSPACE1, ROW.getKey());\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2014-06-21 01:55:35","endLine":352,"groupId":"23135","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a7/1b0dd14fadc037034f77f2d7d4cab30d787206.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.getKey(), cf);\n        rm.apply();\n\n        rm = new Mutation(\"Keyspace1\", ROW.getKey());\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2014-06-21 01:55:35","commitOrder":6,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACE1, \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(KEYSPACE1, ROW.getKey(), cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2014-06-21 01:55:35","endLine":386,"groupId":"25829","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a7/1b0dd14fadc037034f77f2d7d4cab30d787206.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(\"Keyspace1\", \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(\"Keyspace1\", ROW.getKey(), cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"}],"commitId":"d2a3827a65f208eae7aed129dcb6dc582ac1f3d5","commitMessage":"@@@Reduce unit test times due to schema loading\n\nPatch by Lyuben Todorov; reviewed by Tyler Hobbs for CASSANDRA-6968\n","date":"2014-06-21 01:55:35","modifiedFileCount":"92","status":"M","submitter":"lyubent"},{"authorTime":"2014-07-10 04:41:13","codes":[{"authorDate":"2014-07-10 04:41:13","commitOrder":7,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACE1, \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(KEYSPACE1, ROW.getKey(), cf);\n        rm.applyUnsafe();\n\n        rm = new Mutation(KEYSPACE1, ROW.getKey());\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.applyUnsafe();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2014-07-10 04:42:11","endLine":352,"groupId":"23135","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/27/a4e20235cff392e793d47ed9eb713fe27ee550.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACE1, \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(KEYSPACE1, ROW.getKey(), cf);\n        rm.apply();\n\n        rm = new Mutation(KEYSPACE1, ROW.getKey());\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2014-07-10 04:41:13","commitOrder":7,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACE1, \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(KEYSPACE1, ROW.getKey(), cf);\n        rm.applyUnsafe();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","date":"2014-07-10 04:42:11","endLine":386,"groupId":"25829","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/27/a4e20235cff392e793d47ed9eb713fe27ee550.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACE1, \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(KEYSPACE1, ROW.getKey(), cf);\n        rm.apply();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"}],"commitId":"b453f0897bac7f8e928588d7b288ea3e65082353","commitMessage":"@@@Use unsafe mutations where possible in unit tests\n\nPatch by Lyuben Todorov; reviewed by Tyler Hobbs for CASSANDRA-6969\n","date":"2014-07-10 04:42:11","modifiedFileCount":"36","status":"M","submitter":"lyubent"},{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":8,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        String tableName = createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);\n\n        for (int i = 1; i < 10; i++)\n        {\n            if (i == 6 || i == 8)\n                continue;\n            execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", i, i);\n        }\n\n        execute(\"DELETE FROM %s WHERE a = ? AND b = ?\", \"0\", 4);\n\n        for (int round = 0; round < 2; round++)\n        {\n\n            ClusteringIndexSliceFilter filter = slices(cfs, 5, null, false);\n            SinglePartitionSliceCommand command = singlePartitionSlice(cfs, \"0\", filter, 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 4, null, false), 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 5, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, true), 2);\n            assertRowsInResult(cfs, command, 9, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 95, null, false), 2);\n            assertRowsInResult(cfs, command);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 0, true), 2);\n            assertRowsInResult(cfs, command);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","date":"2015-06-30 18:47:01","endLine":317,"groupId":"31362","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fd/d4f0c56591a134d5347328b327fe18d0da2941.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row1\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACE1, \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        cf.addColumn(column(\"col4\", \"val4\", 1L));\n        cf.addColumn(column(\"col5\", \"val5\", 1L));\n        cf.addColumn(column(\"col7\", \"val7\", 1L));\n        cf.addColumn(column(\"col9\", \"val9\", 1L));\n        Mutation rm = new Mutation(KEYSPACE1, ROW.getKey(), cf);\n        rm.applyUnsafe();\n\n        rm = new Mutation(KEYSPACE1, ROW.getKey());\n        rm.delete(\"Standard1\", cellname(\"col4\"), 2L);\n        rm.applyUnsafe();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col4\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col4\", \"col5\", \"col7\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col5\", \"col7\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col5\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col6\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col3\", \"col4\", \"col5\");\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col7\", \"col9\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col95\"), Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf);\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col0\"), Composites.EMPTY, true, 2, System.currentTimeMillis());\n                assertColumns(cf);\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2014-09-02 00:54:46","commitOrder":8,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        String tableName = createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);\n\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 0, 0);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TTL 60\", \"0\", 1, 1);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 2, 2);\n\n        for (int round = 0; round < 2; round++)\n        {\n            SinglePartitionSliceCommand command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, false), 2);\n            assertRowsInResult(cfs, command, 0, 1);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 1, null, false), 1);\n            assertRowsInResult(cfs, command, 1);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","date":"2015-06-30 18:47:01","endLine":341,"groupId":"31363","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fd/d4f0c56591a134d5347328b327fe18d0da2941.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        final Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        final ColumnFamilyStore cfStore = keyspace.getColumnFamilyStore(\"Standard1\");\n        final DecoratedKey ROW = Util.dk(\"row5\");\n\n        ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACE1, \"Standard1\");\n        cf.addColumn(column(\"col1\", \"val1\", 1L));\n        cf.addColumn(expiringColumn(\"col2\", \"val2\", 1L, 60)); \r\n        cf.addColumn(column(\"col3\", \"val3\", 1L));\n        Mutation rm = new Mutation(KEYSPACE1, ROW.getKey(), cf);\n        rm.applyUnsafe();\n\n        Runnable verify = new WrappedRunnable()\n        {\n            public void runMayThrow() throws Exception\n            {\n                ColumnFamily cf;\n\n                cf = cfStore.getColumnFamily(ROW, Composites.EMPTY, Composites.EMPTY, false, 2, System.currentTimeMillis());\n                assertColumns(cf, \"col1\", \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE), \"col1\");\n\n                cf = cfStore.getColumnFamily(ROW, cellname(\"col2\"), Composites.EMPTY, false, 1, System.currentTimeMillis());\n                assertColumns(cf, \"col2\");\n                assertColumns(ColumnFamilyStore.removeDeleted(cf, Integer.MAX_VALUE));\n            }\n        };\n\n        reTest(keyspace.getColumnFamilyStore(\"Standard1\"), verify);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"a991b64811f4d6adb6c7b31c0df52288eb06cf19","commitMessage":"@@@Storage engine refactor.  a.k.a CASSANDRA-8099\n\nInitial patch.  see ticket for details\n","date":"2015-06-30 18:47:01","modifiedFileCount":"374","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2015-11-02 22:16:57","codes":[{"authorDate":"2015-11-02 22:16:57","commitOrder":9,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        String tableName = createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);\n\n        for (int i = 1; i < 10; i++)\n        {\n            if (i == 6 || i == 8)\n                continue;\n            execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", i, i);\n        }\n\n        execute(\"DELETE FROM %s WHERE a = ? AND b = ?\", \"0\", 4);\n\n        for (int round = 0; round < 2; round++)\n        {\n\n            ClusteringIndexSliceFilter filter = slices(cfs, 5, null, false);\n            SinglePartitionReadCommand command = singlePartitionSlice(cfs, \"0\", filter, 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 4, null, false), 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 5, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, true), 2);\n            assertRowsInResult(cfs, command, 9, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 95, null, false), 2);\n            assertRowsInResult(cfs, command);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 0, true), 2);\n            assertRowsInResult(cfs, command);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","date":"2015-11-02 22:16:57","endLine":320,"groupId":"31362","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/c275325a3521ee14d152ccd5c377a808a1aeae.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        String tableName = createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);\n\n        for (int i = 1; i < 10; i++)\n        {\n            if (i == 6 || i == 8)\n                continue;\n            execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", i, i);\n        }\n\n        execute(\"DELETE FROM %s WHERE a = ? AND b = ?\", \"0\", 4);\n\n        for (int round = 0; round < 2; round++)\n        {\n\n            ClusteringIndexSliceFilter filter = slices(cfs, 5, null, false);\n            SinglePartitionSliceCommand command = singlePartitionSlice(cfs, \"0\", filter, 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 4, null, false), 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 5, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, true), 2);\n            assertRowsInResult(cfs, command, 9, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 95, null, false), 2);\n            assertRowsInResult(cfs, command);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 0, true), 2);\n            assertRowsInResult(cfs, command);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2015-11-02 22:16:57","commitOrder":9,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        String tableName = createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);\n\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 0, 0);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TTL 60\", \"0\", 1, 1);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 2, 2);\n\n        for (int round = 0; round < 2; round++)\n        {\n            SinglePartitionReadCommand command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, false), 2);\n            assertRowsInResult(cfs, command, 0, 1);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 1, null, false), 1);\n            assertRowsInResult(cfs, command, 1);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","date":"2015-11-02 22:16:57","endLine":344,"groupId":"31363","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/c275325a3521ee14d152ccd5c377a808a1aeae.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        String tableName = createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);\n\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 0, 0);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TTL 60\", \"0\", 1, 1);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 2, 2);\n\n        for (int round = 0; round < 2; round++)\n        {\n            SinglePartitionSliceCommand command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, false), 2);\n            assertRowsInResult(cfs, command, 0, 1);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 1, null, false), 1);\n            assertRowsInResult(cfs, command, 1);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"b1f2d14f4484ba9d6f4a84d7e0daef600fdcb7db","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-11-02 22:16:57","modifiedFileCount":"19","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2017-03-30 19:38:23","codes":[{"authorDate":"2017-03-30 19:38:23","commitOrder":10,"curCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = getCurrentColumnFamilyStore();\n\n        for (int i = 1; i < 10; i++)\n        {\n            if (i == 6 || i == 8)\n                continue;\n            execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", i, i);\n        }\n\n        execute(\"DELETE FROM %s WHERE a = ? AND b = ?\", \"0\", 4);\n\n        for (int round = 0; round < 2; round++)\n        {\n\n            ClusteringIndexSliceFilter filter = slices(cfs, 5, null, false);\n            SinglePartitionReadCommand command = singlePartitionSlice(cfs, \"0\", filter, 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 4, null, false), 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 5, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, true), 2);\n            assertRowsInResult(cfs, command, 9, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 95, null, false), 2);\n            assertRowsInResult(cfs, command);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 0, true), 2);\n            assertRowsInResult(cfs, command);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","date":"2017-03-30 19:38:23","endLine":339,"groupId":"10497","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSliceFromBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ae/4dec9f5449dc22316ae4050d6c840699d32162.src","preCode":"    public void testGetSliceFromBasic() throws Throwable\n    {\n        \r\n        String tableName = createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);\n\n        for (int i = 1; i < 10; i++)\n        {\n            if (i == 6 || i == 8)\n                continue;\n            execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", i, i);\n        }\n\n        execute(\"DELETE FROM %s WHERE a = ? AND b = ?\", \"0\", 4);\n\n        for (int round = 0; round < 2; round++)\n        {\n\n            ClusteringIndexSliceFilter filter = slices(cfs, 5, null, false);\n            SinglePartitionReadCommand command = singlePartitionSlice(cfs, \"0\", filter, 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 4, null, false), 2);\n            assertRowsInResult(cfs, command, 5, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 5, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 6, true), 2);\n            assertRowsInResult(cfs, command, 5, 3);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, true), 2);\n            assertRowsInResult(cfs, command, 9, 7);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 95, null, false), 2);\n            assertRowsInResult(cfs, command);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, 0, true), 2);\n            assertRowsInResult(cfs, command);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2017-03-30 19:38:23","commitOrder":10,"curCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = getCurrentColumnFamilyStore();\n\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 0, 0);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TTL 60\", \"0\", 1, 1);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 2, 2);\n\n        for (int round = 0; round < 2; round++)\n        {\n            SinglePartitionReadCommand command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, false), 2);\n            assertRowsInResult(cfs, command, 0, 1);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 1, null, false), 1);\n            assertRowsInResult(cfs, command, 1);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","date":"2017-03-30 19:38:23","endLine":362,"groupId":"10497","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSliceWithExpiration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ae/4dec9f5449dc22316ae4050d6c840699d32162.src","preCode":"    public void testGetSliceWithExpiration() throws Throwable\n    {\n        \r\n        String tableName = createTable(\"CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))\");\n        final ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);\n\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 0, 0);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TTL 60\", \"0\", 1, 1);\n        execute(\"INSERT INTO %s (a, b, c) VALUES (?, ?, ?)\", \"0\", 2, 2);\n\n        for (int round = 0; round < 2; round++)\n        {\n            SinglePartitionReadCommand command = singlePartitionSlice(cfs, \"0\", slices(cfs, null, null, false), 2);\n            assertRowsInResult(cfs, command, 0, 1);\n\n            command = singlePartitionSlice(cfs, \"0\", slices(cfs, 1, null, false), 1);\n            assertRowsInResult(cfs, command, 1);\n\n            if (round == 0)\n                cfs.forceBlockingFlush();\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/KeyspaceTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"}],"commitId":"bb4c5c3c4adf4c76e53fed297036489cee1a2768","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n\n# Conflicts:\n#\ttest/unit/org/apache/cassandra/db/KeyspaceTest.java\n","date":"2017-03-30 19:38:23","modifiedFileCount":"1","status":"M","submitter":"Branimir Lambov"}]
