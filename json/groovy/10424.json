[{"authorTime":"2019-05-19 17:04:42","codes":[{"authorDate":"2019-05-19 17:04:42","commitOrder":1,"curCode":"    private void addListenerToProperty(SourceUnit source, AnnotationNode node, AnnotatedNode parent) {\n        ClassNode declaringClass = parent.getDeclaringClass();\n        FieldNode field = ((FieldNode) parent);\n        String fieldName = field.getName();\n        for (PropertyNode propertyNode : declaringClass.getProperties()) {\n            boolean bindable = BindableASTTransformation.hasBindableAnnotation(parent)\n                    || BindableASTTransformation.hasBindableAnnotation(parent.getDeclaringClass());\n\n            if (propertyNode.getName().equals(fieldName)) {\n                if (field.isStatic()) {\n                    \r\n                    source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                            new SyntaxException(\"@groovy.beans.Vetoable cannot annotate a static property.\",\n                                    node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                            source));\n                } else {\n                    createListenerSetter(source, bindable, declaringClass, propertyNode);\n                }\n                return;\n            }\n        }\n        \r\n        source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                new SyntaxException(\"@groovy.beans.Vetoable must be on a property, not a field.  Try removing the private, protected, or public modifier.\",\n                        node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                source));\n    }\n","date":"2019-05-19 17:04:42","endLine":149,"groupId":"10883","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenerToProperty","params":"(SourceUnitsource@AnnotationNodenode@AnnotatedNodeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/31/5c01476b79bb931b70c53cfa93d3d1bc8c5088.src","preCode":"    private void addListenerToProperty(SourceUnit source, AnnotationNode node, AnnotatedNode parent) {\n        ClassNode declaringClass = parent.getDeclaringClass();\n        FieldNode field = ((FieldNode) parent);\n        String fieldName = field.getName();\n        for (PropertyNode propertyNode : declaringClass.getProperties()) {\n            boolean bindable = BindableASTTransformation.hasBindableAnnotation(parent)\n                    || BindableASTTransformation.hasBindableAnnotation(parent.getDeclaringClass());\n\n            if (propertyNode.getName().equals(fieldName)) {\n                if (field.isStatic()) {\n                    \r\n                    source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                            new SyntaxException(\"@groovy.beans.Vetoable cannot annotate a static property.\",\n                                    node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                            source));\n                } else {\n                    createListenerSetter(source, bindable, declaringClass, propertyNode);\n                }\n                return;\n            }\n        }\n        \r\n        source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                new SyntaxException(\"@groovy.beans.Vetoable must be on a property, not a field.  Try removing the private, protected, or public modifier.\",\n                        node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                source));\n    }\n","realPath":"src/main/java/groovy/beans/VetoableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"},{"authorDate":"2019-05-19 17:04:42","commitOrder":1,"curCode":"    private void addListenerToProperty(SourceUnit source, AnnotationNode node, ClassNode declaringClass, FieldNode field) {\n        String fieldName = field.getName();\n        for (PropertyNode propertyNode : declaringClass.getProperties()) {\n            if (propertyNode.getName().equals(fieldName)) {\n                if (field.isStatic()) {\n                    \r\n                    source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                            new SyntaxException(\"@groovy.beans.Bindable cannot annotate a static property.\",\n                                    node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                            source));\n                } else {\n                    if (needsPropertyChangeSupport(declaringClass, source)) {\n                        addPropertyChangeSupport(declaringClass);\n                    }\n                    createListenerSetter(declaringClass, propertyNode);\n                }\n                return;\n            }\n        }\n        \r\n        source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                new SyntaxException(\"@groovy.beans.Bindable must be on a property, not a field.  Try removing the private, protected, or public modifier.\",\n                        node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                source));\n    }\n","date":"2019-05-19 17:04:42","endLine":158,"groupId":"6331","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenerToProperty","params":"(SourceUnitsource@AnnotationNodenode@ClassNodedeclaringClass@FieldNodefield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/474f9470f816240f3fd9732c74dda5b16667ad.src","preCode":"    private void addListenerToProperty(SourceUnit source, AnnotationNode node, ClassNode declaringClass, FieldNode field) {\n        String fieldName = field.getName();\n        for (PropertyNode propertyNode : declaringClass.getProperties()) {\n            if (propertyNode.getName().equals(fieldName)) {\n                if (field.isStatic()) {\n                    \r\n                    source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                            new SyntaxException(\"@groovy.beans.Bindable cannot annotate a static property.\",\n                                    node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                            source));\n                } else {\n                    if (needsPropertyChangeSupport(declaringClass, source)) {\n                        addPropertyChangeSupport(declaringClass);\n                    }\n                    createListenerSetter(declaringClass, propertyNode);\n                }\n                return;\n            }\n        }\n        \r\n        source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                new SyntaxException(\"@groovy.beans.Bindable must be on a property, not a field.  Try removing the private, protected, or public modifier.\",\n                        node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                source));\n    }\n","realPath":"src/main/java/groovy/beans/BindableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"86f5c8216b5d0f042408bdc4ae5d6a7baa247c95","commitMessage":"@@@move some java files from src/main/groovy to src/main/java and fix up some Javadoc assertion tests that weren't running\n","date":"2019-05-19 17:04:42","modifiedFileCount":"0","status":"B","submitter":"Paul King"},{"authorTime":"2020-04-11 18:41:04","codes":[{"authorDate":"2020-04-11 18:41:04","commitOrder":2,"curCode":"    private void addListenerToProperty(SourceUnit source, AnnotationNode node, AnnotatedNode parent) {\n        ClassNode declaringClass = parent.getDeclaringClass();\n        FieldNode field = ((FieldNode) parent);\n        String fieldName = field.getName();\n        for (PropertyNode propertyNode : declaringClass.getProperties()) {\n            boolean bindable = BindableASTTransformation.hasBindableAnnotation(parent)\n                    || BindableASTTransformation.hasBindableAnnotation(parent.getDeclaringClass());\n\n            if (propertyNode.getName().equals(fieldName)) {\n                if (field.isStatic()) {\n                    \r\n                    source.getErrorCollector().addErrorAndContinue(\"@groovy.beans.Vetoable cannot annotate a static property.\", node, source);\n                } else {\n                    createListenerSetter(source, bindable, declaringClass, propertyNode);\n                }\n                return;\n            }\n        }\n        \r\n        source.getErrorCollector().addErrorAndContinue(\"@groovy.beans.Vetoable must be on a property, not a field.  Try removing the private, protected, or public modifier.\", node, source);\n    }\n","date":"2020-04-11 19:09:54","endLine":138,"groupId":"10424","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenerToProperty","params":"(SourceUnitsource@AnnotationNodenode@AnnotatedNodeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/5e/35dffb024ff1f7ce1532c71c4ecc6acd542071.src","preCode":"    private void addListenerToProperty(SourceUnit source, AnnotationNode node, AnnotatedNode parent) {\n        ClassNode declaringClass = parent.getDeclaringClass();\n        FieldNode field = ((FieldNode) parent);\n        String fieldName = field.getName();\n        for (PropertyNode propertyNode : declaringClass.getProperties()) {\n            boolean bindable = BindableASTTransformation.hasBindableAnnotation(parent)\n                    || BindableASTTransformation.hasBindableAnnotation(parent.getDeclaringClass());\n\n            if (propertyNode.getName().equals(fieldName)) {\n                if (field.isStatic()) {\n                    \r\n                    source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                            new SyntaxException(\"@groovy.beans.Vetoable cannot annotate a static property.\",\n                                    node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                            source));\n                } else {\n                    createListenerSetter(source, bindable, declaringClass, propertyNode);\n                }\n                return;\n            }\n        }\n        \r\n        source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                new SyntaxException(\"@groovy.beans.Vetoable must be on a property, not a field.  Try removing the private, protected, or public modifier.\",\n                        node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                source));\n    }\n","realPath":"src/main/java/groovy/beans/VetoableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2020-04-11 18:41:04","commitOrder":2,"curCode":"    private void addListenerToProperty(SourceUnit source, AnnotationNode node, ClassNode declaringClass, FieldNode field) {\n        String fieldName = field.getName();\n        for (PropertyNode propertyNode : declaringClass.getProperties()) {\n            if (propertyNode.getName().equals(fieldName)) {\n                if (field.isStatic()) {\n                    \r\n                    source.getErrorCollector().addErrorAndContinue(\"@groovy.beans.Bindable cannot annotate a static property.\", node, source);\n                } else {\n                    if (needsPropertyChangeSupport(declaringClass, source)) {\n                        addPropertyChangeSupport(declaringClass);\n                    }\n                    createListenerSetter(declaringClass, propertyNode);\n                }\n                return;\n            }\n        }\n        \r\n        source.getErrorCollector().addErrorAndContinue(\"@groovy.beans.Bindable must be on a property, not a field.  Try removing the private, protected, or public modifier.\", node, source);\n    }\n","date":"2020-04-11 19:09:54","endLine":147,"groupId":"10424","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenerToProperty","params":"(SourceUnitsource@AnnotationNodenode@ClassNodedeclaringClass@FieldNodefield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/65/f0062c9e05cf31d9932f04803e7bca0fdbab4c.src","preCode":"    private void addListenerToProperty(SourceUnit source, AnnotationNode node, ClassNode declaringClass, FieldNode field) {\n        String fieldName = field.getName();\n        for (PropertyNode propertyNode : declaringClass.getProperties()) {\n            if (propertyNode.getName().equals(fieldName)) {\n                if (field.isStatic()) {\n                    \r\n                    source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                            new SyntaxException(\"@groovy.beans.Bindable cannot annotate a static property.\",\n                                    node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                            source));\n                } else {\n                    if (needsPropertyChangeSupport(declaringClass, source)) {\n                        addPropertyChangeSupport(declaringClass);\n                    }\n                    createListenerSetter(declaringClass, propertyNode);\n                }\n                return;\n            }\n        }\n        \r\n        source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(\n                new SyntaxException(\"@groovy.beans.Bindable must be on a property, not a field.  Try removing the private, protected, or public modifier.\",\n                        node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()),\n                source));\n    }\n","realPath":"src/main/java/groovy/beans/BindableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"38f10257e3b7315b72d866b7c2d172a70d82b574","commitMessage":"@@@Eliminate duplicated code in AST transformations\n","date":"2020-04-11 19:09:54","modifiedFileCount":"7","status":"M","submitter":"Daniel Sun"}]
