[{"authorTime":"2017-12-14 16:49:51","codes":[{"authorDate":"2017-12-14 16:49:51","commitOrder":1,"curCode":"    protected void loadFromRes(String name) throws IOException {\n        final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        reader.accept(cw, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), name);\n    }\n","date":"2017-12-14 18:15:44","endLine":90,"groupId":"10261","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadFromRes","params":"(Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/0a/6a08289b9e8670740860542bd0e7ebb2d51ff5.src","preCode":"    protected void loadFromRes(String name) throws IOException {\n        final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        reader.accept(cw, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), name);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"},{"authorDate":"2017-12-14 16:49:51","commitOrder":1,"curCode":"    private void loadAbstract() throws IOException {\n        final InputStream asStream = GroovySunClassLoader.class.getClass().getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        final ClassVisitor cv = new ClassVisitor(4, cw) {\n            public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n            }            \n        };\n        reader.accept(cv, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n    }\n","date":"2017-12-14 18:15:44","endLine":72,"groupId":"10466","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadAbstract","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/f4/e9050d734d84712be9ca0996936fd7ede80191.src","preCode":"    private void loadAbstract() throws IOException {\n        final InputStream asStream = GroovySunClassLoader.class.getClass().getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        final ClassVisitor cv = new ClassVisitor(4, cw) {\n            public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n            }            \n        };\n        reader.accept(cv, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n    }\n","realPath":"src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"b25d0e55ddac82fa2127c69fb1ca10555975a2a5","commitMessage":"@@@Move Java source set into `src/main/java`\n","date":"2017-12-14 18:15:44","modifiedFileCount":"2","status":"B","submitter":"Cedric Champeau"},{"authorTime":"2019-04-06 01:59:08","codes":[{"authorDate":"2017-12-14 16:49:51","commitOrder":2,"curCode":"    protected void loadFromRes(String name) throws IOException {\n        final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        reader.accept(cw, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), name);\n    }\n","date":"2017-12-14 18:15:44","endLine":90,"groupId":"10261","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadFromRes","params":"(Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/0a/6a08289b9e8670740860542bd0e7ebb2d51ff5.src","preCode":"    protected void loadFromRes(String name) throws IOException {\n        final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        reader.accept(cw, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), name);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2019-04-06 01:59:08","commitOrder":2,"curCode":"    private void loadAbstract() throws IOException {\n        final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        final ClassVisitor cv = new ClassVisitor(4, cw) {\n            public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n            }            \n        };\n        reader.accept(cv, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n    }\n","date":"2019-04-06 02:01:20","endLine":72,"groupId":"10466","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadAbstract","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/71/fd21e2480d4250569af81a4da59b95a314dd8f.src","preCode":"    private void loadAbstract() throws IOException {\n        final InputStream asStream = GroovySunClassLoader.class.getClass().getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        final ClassVisitor cv = new ClassVisitor(4, cw) {\n            public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n            }            \n        };\n        reader.accept(cv, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n    }\n","realPath":"src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"4b7001b1f1e80d0f57ecc410996bc9015b595b70","commitMessage":"@@@Trivial refactoring: Avoid calling 'getClass()' on Class instance\n","date":"2019-04-06 02:01:20","modifiedFileCount":"1","status":"M","submitter":"Daniel Sun"},{"authorTime":"2019-11-29 12:15:59","codes":[{"authorDate":"2017-12-14 16:49:51","commitOrder":3,"curCode":"    protected void loadFromRes(String name) throws IOException {\n        final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        reader.accept(cw, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), name);\n    }\n","date":"2017-12-14 18:15:44","endLine":90,"groupId":"10261","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"loadFromRes","params":"(Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/0a/6a08289b9e8670740860542bd0e7ebb2d51ff5.src","preCode":"    protected void loadFromRes(String name) throws IOException {\n        final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        reader.accept(cw, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), name);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2019-11-29 12:15:59","commitOrder":3,"curCode":"    private void loadAbstract() throws IOException {\n        final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        final ClassVisitor cv = new ClassVisitor(CompilerConfiguration.ASM_API_VERSION, cw) {\n            public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n            }            \n        };\n        reader.accept(cv, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n    }\n","date":"2019-11-29 13:33:51","endLine":71,"groupId":"154","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadAbstract","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/7b/9e9ca5767e53ad0de2ee2fb2211866ba124f38.src","preCode":"    private void loadAbstract() throws IOException {\n        final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        final ClassVisitor cv = new ClassVisitor(4, cw) {\n            public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n            }            \n        };\n        reader.accept(cv, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n    }\n","realPath":"src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"a75b89a6271c1b424814af0d7993224ff77204ca","commitMessage":"@@@Fix hardcoded ASM API version\n","date":"2019-11-29 13:33:51","modifiedFileCount":"1","status":"M","submitter":"Daniel.Sun"},{"authorTime":"2019-11-29 12:19:41","codes":[{"authorDate":"2019-11-29 12:19:41","commitOrder":4,"curCode":"    protected void loadFromRes(String name) throws IOException {\n        try (final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            reader.accept(cw, ClassWriter.COMPUTE_MAXS);\n            define(cw.toByteArray(), name);\n        }\n    }\n","date":"2019-11-29 13:33:54","endLine":88,"groupId":"3918","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"loadFromRes","params":"(Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/b8/e9c1cf8c8044568395c923b48e6a5a4aa4941e.src","preCode":"    protected void loadFromRes(String name) throws IOException {\n        final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        reader.accept(cw, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), name);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2019-11-29 12:19:41","commitOrder":4,"curCode":"    private void loadAbstract() throws IOException {\n        try (final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            final ClassVisitor cv = new ClassVisitor(CompilerConfiguration.ASM_API_VERSION, cw) {\n                public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                    super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n                }\n            };\n            reader.accept(cv, ClassWriter.COMPUTE_MAXS);\n            define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n        }\n    }\n","date":"2019-11-29 13:33:54","endLine":71,"groupId":"154","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadAbstract","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/07/a39d11e68a6137831b306d0604766534047b63.src","preCode":"    private void loadAbstract() throws IOException {\n        final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"));\n        ClassReader reader = new ClassReader(asStream);\n        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n        final ClassVisitor cv = new ClassVisitor(CompilerConfiguration.ASM_API_VERSION, cw) {\n            public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n            }            \n        };\n        reader.accept(cv, ClassWriter.COMPUTE_MAXS);\n        asStream.close();\n        define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n    }\n","realPath":"src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"35d5a6ce505d2a9680d69a4007576e9bfeff37f7","commitMessage":"@@@Handle resources robustly\n","date":"2019-11-29 13:33:54","modifiedFileCount":"2","status":"M","submitter":"Daniel.Sun"},{"authorTime":"2020-02-20 22:11:03","codes":[{"authorDate":"2020-02-20 22:11:03","commitOrder":5,"curCode":"    protected void loadFromRes(String name) throws IOException {\n        try (final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            reader.accept(cw, ClassReader.SKIP_DEBUG);\n            define(cw.toByteArray(), name);\n        }\n    }\n","date":"2020-02-21 10:07:23","endLine":87,"groupId":"3918","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"loadFromRes","params":"(Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/6a/e9d71e484f4c772ca1f5c793e1be423ad697f9.src","preCode":"    protected void loadFromRes(String name) throws IOException {\n        try (final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            reader.accept(cw, ClassWriter.COMPUTE_MAXS);\n            define(cw.toByteArray(), name);\n        }\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-02-20 22:11:03","commitOrder":5,"curCode":"    private void loadAbstract(int parsingOptions) throws IOException {\n        try (final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            final ClassVisitor cv = new ClassVisitor(CompilerConfiguration.ASM_API_VERSION, cw) {\n                public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                    super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n                }\n            };\n            reader.accept(cv, parsingOptions);\n            define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n        }\n    }\n","date":"2020-02-21 10:07:23","endLine":74,"groupId":"154","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadAbstract","params":"(intparsingOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/3d/504bf94c1884a20bdc2e2ba99bd45c7e47c549.src","preCode":"    private void loadAbstract() throws IOException {\n        try (final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            final ClassVisitor cv = new ClassVisitor(CompilerConfiguration.ASM_API_VERSION, cw) {\n                public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                    super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n                }\n            };\n            reader.accept(cv, ClassWriter.COMPUTE_MAXS);\n            define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n        }\n    }\n","realPath":"src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"5c61675c9f15815baded155dd3364b6d8279dcc8","commitMessage":"@@@GROOVY-9409: org.codehaus.groovy.runtime.callsite.GroovySunClassLoader is unusable\n","date":"2020-02-21 10:07:23","modifiedFileCount":"2","status":"M","submitter":"Paul King"},{"authorTime":"2020-10-01 03:22:05","codes":[{"authorDate":"2020-02-20 22:11:03","commitOrder":6,"curCode":"    protected void loadFromRes(String name) throws IOException {\n        try (final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            reader.accept(cw, ClassReader.SKIP_DEBUG);\n            define(cw.toByteArray(), name);\n        }\n    }\n","date":"2020-02-21 10:07:23","endLine":87,"groupId":"10440","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"loadFromRes","params":"(Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/6a/e9d71e484f4c772ca1f5c793e1be423ad697f9.src","preCode":"    protected void loadFromRes(String name) throws IOException {\n        try (final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            reader.accept(cw, ClassReader.SKIP_DEBUG);\n            define(cw.toByteArray(), name);\n        }\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/SunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"},{"authorDate":"2020-10-01 03:22:05","commitOrder":6,"curCode":"    private void loadAbstract(int parsingOptions) throws IOException {\n        try (final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            final ClassVisitor cv = new ClassVisitor(CompilerConfiguration.ASM_API_VERSION, cw) {\n                @Override\n                public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                    super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n                }\n            };\n            reader.accept(cv, parsingOptions);\n            define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n        }\n    }\n","date":"2020-10-01 03:22:05","endLine":75,"groupId":"10440","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"loadAbstract","params":"(intparsingOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/dd/c4232959f39e7098b59983c4f815a931ec93ee.src","preCode":"    private void loadAbstract(int parsingOptions) throws IOException {\n        try (final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(\"org.codehaus.groovy.runtime.callsite.AbstractCallSite\"))) {\n            ClassReader reader = new ClassReader(asStream);\n            final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n            final ClassVisitor cv = new ClassVisitor(CompilerConfiguration.ASM_API_VERSION, cw) {\n                public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n                    super.visit(version, access, name, signature, \"sun/reflect/GroovyMagic\", interfaces);\n                }\n            };\n            reader.accept(cv, parsingOptions);\n            define(cw.toByteArray(), \"org.codehaus.groovy.runtime.callsite.AbstractCallSite\");\n        }\n    }\n","realPath":"src/main/java/org/codehaus/groovy/runtime/callsite/GroovySunClassLoader.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"5744d6ed8de9a44024ad6881dcf4e2bbd7dff9ba","commitMessage":"@@@add missing @Override annotations\n","date":"2020-10-01 03:22:05","modifiedFileCount":"512","status":"M","submitter":"Paul King"}]
