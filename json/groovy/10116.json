[{"authorTime":"2012-01-03 18:33:34","codes":[{"authorDate":"2012-01-03 18:33:34","commitOrder":1,"curCode":"    public synchronized void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        }\n        finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2012-01-03 18:33:34","endLine":2491,"groupId":"6877","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cacheConnection","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ad/45d32bdfd9ccb351104ef1784678dfe88b74b2.src","preCode":"    public synchronized void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        }\n        finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":2475,"status":"B"},{"authorDate":"2012-01-03 18:33:34","commitOrder":1,"curCode":"    public synchronized void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Error e) {\n            handleError(connection, e);\n            throw e;\n        } finally {\n            if (connection != null) connection.setAutoCommit(savedAutoCommit);\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2012-01-03 18:33:34","endLine":2530,"groupId":"2824","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"withTransaction","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ad/45d32bdfd9ccb351104ef1784678dfe88b74b2.src","preCode":"    public synchronized void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Error e) {\n            handleError(connection, e);\n            throw e;\n        } finally {\n            if (connection != null) connection.setAutoCommit(savedAutoCommit);\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":2501,"status":"B"}],"commitId":"69639add1581ea88308320dca84fb05d7ce2e770","commitMessage":"@@@add skeleton for groovy-sql module\n","date":"2012-01-03 18:33:34","modifiedFileCount":"1","status":"B","submitter":"Paul King"},{"authorTime":"2013-07-17 13:36:09","codes":[{"authorDate":"2012-01-03 18:33:34","commitOrder":2,"curCode":"    public synchronized void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        }\n        finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2012-01-03 18:33:34","endLine":2491,"groupId":"6877","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cacheConnection","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ad/45d32bdfd9ccb351104ef1784678dfe88b74b2.src","preCode":"    public synchronized void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        }\n        finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":2475,"status":"N"},{"authorDate":"2013-07-17 13:36:09","commitOrder":2,"curCode":"    public synchronized void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Error e) {\n            handleError(connection, e);\n            throw e;\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(savedAutoCommit);\n                }\n                catch (SQLException e) {\n                    LOG.finest(\"Caught exception resetting auto commit: \" + e.getMessage() + \" - continuing\");\n                }\n            }\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2013-07-17 13:36:09","endLine":3083,"groupId":"2824","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"withTransaction","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/b0/e56667343a845e560068afe1a532a219ae8d9c.src","preCode":"    public synchronized void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Error e) {\n            handleError(connection, e);\n            throw e;\n        } finally {\n            if (connection != null) connection.setAutoCommit(savedAutoCommit);\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":3047,"status":"M"}],"commitId":"e7513a086427e5617a9934c289623f6758a7cab3","commitMessage":"@@@Merge pull request #218 from PascalSchumacher/GROOVY-6262\n\nGROOVY-6262: Sql.withTransaction setAutoCommit in finally not wrapped in...","date":"2013-07-17 13:36:09","modifiedFileCount":"1","status":"M","submitter":"PascalSchumacher"},{"authorTime":"2014-05-26 15:16:28","codes":[{"authorDate":"2012-01-03 18:33:34","commitOrder":3,"curCode":"    public synchronized void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        }\n        finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2012-01-03 18:33:34","endLine":2491,"groupId":"6877","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"cacheConnection","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ad/45d32bdfd9ccb351104ef1784678dfe88b74b2.src","preCode":"    public synchronized void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        }\n        finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":2475,"status":"N"},{"authorDate":"2014-05-26 15:16:28","commitOrder":3,"curCode":"    public synchronized void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Error e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Exception e) {\n            handleError(connection, e);\n            throw new SQLException(\"Unexpected exception during transaction\", e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(savedAutoCommit);\n                }\n                catch (SQLException e) {\n                    LOG.finest(\"Caught exception resetting auto commit: \" + e.getMessage() + \" - continuing\");\n                }\n            }\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2014-05-26 15:16:28","endLine":3414,"groupId":"2824","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"withTransaction","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/9e/069fbbafb39730232bd0a7132072da53873de0.src","preCode":"    public synchronized void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Error e) {\n            handleError(connection, e);\n            throw e;\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(savedAutoCommit);\n                }\n                catch (SQLException e) {\n                    LOG.finest(\"Caught exception resetting auto commit: \" + e.getMessage() + \" - continuing\");\n                }\n            }\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":3375,"status":"M"}],"commitId":"ed9bc1fa5efc4e4d3619ef7a53c2721742dc9e69","commitMessage":"@@@Merge pull request #426 from paulk-asert/groovy6437\n\nGROOVY-6437: Sql.withTransaction() doesn't rollback on checked exception...","date":"2014-05-26 15:16:28","modifiedFileCount":"1","status":"M","submitter":"Paul King"},{"authorTime":"2015-12-02 02:58:04","codes":[{"authorDate":"2015-12-02 02:58:04","commitOrder":4,"curCode":"    public void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        } finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2015-12-02 02:58:04","endLine":3507,"groupId":"6877","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"cacheConnection","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/3a/f3023e0947f5b66e3e301546e28fdffa9860e2.src","preCode":"    public synchronized void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        } finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":3492,"status":"M"},{"authorDate":"2015-12-02 02:58:04","commitOrder":4,"curCode":"    public void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Error e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Exception e) {\n            handleError(connection, e);\n            throw new SQLException(\"Unexpected exception during transaction\", e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(savedAutoCommit);\n                }\n                catch (SQLException e) {\n                    LOG.finest(\"Caught exception resetting auto commit: \" + e.getMessage() + \" - continuing\");\n                }\n            }\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2015-12-02 02:58:04","endLine":3556,"groupId":"2824","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"withTransaction","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/3a/f3023e0947f5b66e3e301546e28fdffa9860e2.src","preCode":"    public synchronized void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Error e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Exception e) {\n            handleError(connection, e);\n            throw new SQLException(\"Unexpected exception during transaction\", e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(savedAutoCommit);\n                }\n                catch (SQLException e) {\n                    LOG.finest(\"Caught exception resetting auto commit: \" + e.getMessage() + \" - continuing\");\n                }\n            }\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":3517,"status":"M"}],"commitId":"103519a38826ee5fe27d832d0086571c2c89a429","commitMessage":"@@@GROOVY-7673: Remove synchronized methods of groovy.sql.Sql and document it as not thread-safe\n","date":"2015-12-02 02:58:04","modifiedFileCount":"1","status":"M","submitter":"pascalschumacher"},{"authorTime":"2018-08-26 17:44:19","codes":[{"authorDate":"2015-12-02 02:58:04","commitOrder":5,"curCode":"    public void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        } finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2015-12-02 02:58:04","endLine":3507,"groupId":"6877","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"cacheConnection","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/3a/f3023e0947f5b66e3e301546e28fdffa9860e2.src","preCode":"    public void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        } finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":3492,"status":"N"},{"authorDate":"2018-08-26 17:44:19","commitOrder":5,"curCode":"    public void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException | Error | RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Exception e) {\n            handleError(connection, e);\n            throw new SQLException(\"Unexpected exception during transaction\", e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(savedAutoCommit);\n                }\n                catch (SQLException e) {\n                    LOG.finest(\"Caught exception resetting auto commit: \" + e.getMessage() + \" - continuing\");\n                }\n            }\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2018-08-26 17:44:19","endLine":3602,"groupId":"6672","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"withTransaction","params":"(Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/6c/6db970a735da0db7abd6ff2f849be732990f90.src","preCode":"    public void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Error e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Exception e) {\n            handleError(connection, e);\n            throw new SQLException(\"Unexpected exception during transaction\", e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(savedAutoCommit);\n                }\n                catch (SQLException e) {\n                    LOG.finest(\"Caught exception resetting auto commit: \" + e.getMessage() + \" - continuing\");\n                }\n            }\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":3569,"status":"M"}],"commitId":"cc3b001ce5838259007c45b57ef2cf79462d2c88","commitMessage":"@@@Minor refactoring: Identical 'catch' branches in 'try' statement\n","date":"2018-08-26 17:44:19","modifiedFileCount":"10","status":"M","submitter":"Daniel Sun"},{"authorTime":"2019-09-04 00:07:22","codes":[{"authorDate":"2019-09-04 00:07:22","commitOrder":6,"curCode":"    public void cacheConnection(@ClosureParams(value=SimpleType.class, options=\"java.sql.Connection\") Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        } finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2019-09-10 07:58:00","endLine":3481,"groupId":"10116","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"cacheConnection","params":"(@ClosureParams(value=SimpleType.class@options=\"java.sql.Connection\")Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/e7/e45dc403926a4429c84064941132e92d2ddf3d.src","preCode":"    public void cacheConnection(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        try {\n            connection = createConnection();\n            callClosurePossiblyWithConnection(closure, connection);\n        } finally {\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":3466,"status":"M"},{"authorDate":"2019-09-04 00:07:22","commitOrder":6,"curCode":"    public void withTransaction(@ClosureParams(value=SimpleType.class, options=\"java.sql.Connection\") Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException | Error | RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Exception e) {\n            handleError(connection, e);\n            throw new SQLException(\"Unexpected exception during transaction\", e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(savedAutoCommit);\n                }\n                catch (SQLException e) {\n                    LOG.finest(\"Caught exception resetting auto commit: \" + e.getMessage() + \" - continuing\");\n                }\n            }\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","date":"2019-09-10 07:58:00","endLine":3524,"groupId":"10116","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"withTransaction","params":"(@ClosureParams(value=SimpleType.class@options=\"java.sql.Connection\")Closureclosure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/e7/e45dc403926a4429c84064941132e92d2ddf3d.src","preCode":"    public void withTransaction(Closure closure) throws SQLException {\n        boolean savedCacheConnection = cacheConnection;\n        cacheConnection = true;\n        Connection connection = null;\n        boolean savedAutoCommit = true;\n        try {\n            connection = createConnection();\n            savedAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            callClosurePossiblyWithConnection(closure, connection);\n            connection.commit();\n        } catch (SQLException | Error | RuntimeException e) {\n            handleError(connection, e);\n            throw e;\n        } catch (Exception e) {\n            handleError(connection, e);\n            throw new SQLException(\"Unexpected exception during transaction\", e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(savedAutoCommit);\n                }\n                catch (SQLException e) {\n                    LOG.finest(\"Caught exception resetting auto commit: \" + e.getMessage() + \" - continuing\");\n                }\n            }\n            cacheConnection = false;\n            closeResources(connection, null);\n            cacheConnection = savedCacheConnection;\n            if (dataSource != null && !cacheConnection) {\n                useConnection = null;\n            }\n        }\n    }\n","realPath":"subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":3491,"status":"M"}],"commitId":"2572c62f06621330babf0f008c1a4021242f41ef","commitMessage":"@@@GROOVY-9229.  GROOVY-9233: added missing closure parameter metadata","date":"2019-09-10 07:58:00","modifiedFileCount":"1","status":"M","submitter":"Eric Milles"}]
