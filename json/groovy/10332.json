[{"authorTime":"2005-07-17 04:00:28","codes":[{"authorDate":"2005-07-17 04:00:28","commitOrder":5,"curCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"java.lang.Object\");\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(\"Object\", \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, \"void\", parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2005-07-17 04:00:28","endLine":90,"groupId":"8708","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/99/6c24220e4bf8119ec37ba08c14c0176e9e7219.src","preCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"java.lang.Object\");\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(\"Object\", \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, \"void\", parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2005-07-17 04:00:28","commitOrder":5,"curCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"java.lang.Object\");\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(\"Object[]\", \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(\"i\", Type.DYNAMIC_TYPE, new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, \"void\", parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2005-07-17 04:00:28","endLine":121,"groupId":"8708","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/99/6c24220e4bf8119ec37ba08c14c0176e9e7219.src","preCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"java.lang.Object\");\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(\"Object[]\", \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(\"i\", Type.DYNAMIC_TYPE, new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, \"void\", parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"MB"}],"commitId":"2e3549665d97d6a096117f15fe9800dfb3e6ae19","commitMessage":"@@@Fix bugs about the closures and methods with object array paramaters.\n(GROOVY-584.  GROOVY-886.  GROOVY-888.  GROOVY-918.  GROOVY-930.  and GROOVY-931)\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2557 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2005-07-17 04:00:28","modifiedFileCount":"14","status":"M","submitter":"Pilho Kim"},{"authorTime":"2005-09-13 03:51:26","codes":[{"authorDate":"2005-09-13 03:51:26","commitOrder":6,"curCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(Type.makeType(\"Foo\"), ACC_PUBLIC, Type.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(Type.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, Type.VOID_TYPE, parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2005-09-13 03:51:26","endLine":90,"groupId":"8708","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/93/f921698e13bb1f9bedf9797b6c816572bcc26f.src","preCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"java.lang.Object\");\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(\"Object\", \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, \"void\", parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2005-09-13 03:51:26","commitOrder":6,"curCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(Type.makeType(\"Foo\"), ACC_PUBLIC, Type.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(Type.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(\"i\", Type.DYNAMIC_TYPE, new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, Type.VOID_TYPE, parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2005-09-13 03:51:26","endLine":121,"groupId":"8708","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/93/f921698e13bb1f9bedf9797b6c816572bcc26f.src","preCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"java.lang.Object\");\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(\"Object[]\", \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(\"i\", Type.DYNAMIC_TYPE, new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, \"void\", parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"0e621fdecf3e8ab9db2fe9eea10bae5d2dc4b695","commitMessage":"@@@This patch removes many string descriptons of types from the class generator and enfocres the usage of the class Type instead. A new interface is introduced for nodes which are possible variables\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2840 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2005-09-13 03:51:26","modifiedFileCount":"68","status":"M","submitter":"Jochen Theodorou"},{"authorTime":"2005-11-14 00:42:14","codes":[{"authorDate":"2005-11-14 00:42:14","commitOrder":7,"curCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2005-11-14 00:42:14","endLine":90,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/84/75801de46ea7440e97f11352cd3e2796047585.src","preCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(Type.makeType(\"Foo\"), ACC_PUBLIC, Type.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(Type.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, Type.VOID_TYPE, parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2005-11-14 00:42:14","commitOrder":7,"curCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(\"i\", ClassHelper.DYNAMIC_TYPE, new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2005-11-14 00:42:14","endLine":121,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/84/75801de46ea7440e97f11352cd3e2796047585.src","preCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(Type.makeType(\"Foo\"), ACC_PUBLIC, Type.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(Type.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(\"i\", Type.DYNAMIC_TYPE, new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, Type.VOID_TYPE, parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"6c3182f6fc7becd9aebc7c1b64d9005cba17eb39","commitMessage":"@@@this committ removes the class org.codehaus.groovy.ast.Type completely and transferes its functuanality to ClassNode and ClassHelper. A ClassNode can now be a primitive type or any other type created with an class file available. ClassNodes can now be primary.  which means they are the a result of a class definiton in a file - unlike a ClassNode created from a Class. All phases till actual class creation should work on ClassNode instead of Class. So all Class handling code in ACG is transformed to ahndle ClassNode instead. A ClassNode can contain a redirect now. This is used when multiple names point to the same ClassNode. This mechanism was used instead of a replacing like with the Type class. This was needed because all class resolving code is transfered into a single phase right after creation of the groovy ast and to avoid creation of huge amounts of code to replace a ClassNode in statements and expressions.\nThe Compiler is now able to enqueue source files. This means when ever a compiler phase found out it is necessary to compile another source file it can put this file into the compiler using the addSource method of CompilationUnit and leave the rest to the compiler. The compiler will then go back to the initialization phase and proceed to the goal phase ignoring all already handled files but  the new added file.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3104 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2005-11-14 00:42:14","modifiedFileCount":"82","status":"M","submitter":"Jochen Theodorou"},{"authorTime":"2005-12-16 02:39:38","codes":[{"authorDate":"2005-12-16 02:39:38","commitOrder":8,"curCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2005-12-16 02:39:38","endLine":90,"groupId":"8708","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c8/c13441dcb5246dd1d0bf2ca1dd8f68e513c14d.src","preCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2005-12-16 02:39:38","commitOrder":8,"curCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(\"i\", ClassHelper.DYNAMIC_TYPE, new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2005-12-16 02:39:38","endLine":121,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c8/c13441dcb5246dd1d0bf2ca1dd8f68e513c14d.src","preCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(\"i\", ClassHelper.DYNAMIC_TYPE, new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"4feb7dea597ed08800b5345a6c393a89bc2c8c2b","commitMessage":"@@@tests adapted to new MethodNode constructor\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3279 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2005-12-16 02:39:38","modifiedFileCount":"5","status":"M","submitter":"Jochen Theodorou"},{"authorTime":"2006-01-19 08:07:02","codes":[{"authorDate":"2005-12-16 02:39:38","commitOrder":9,"curCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2005-12-16 02:39:38","endLine":90,"groupId":"8708","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c8/c13441dcb5246dd1d0bf2ca1dd8f68e513c14d.src","preCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[] {value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2006-01-19 08:07:02","commitOrder":9,"curCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(new Parameter(ClassHelper.OBJECT_TYPE,\"i\"), new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2006-01-19 08:07:02","endLine":121,"groupId":"1088","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/9b/39e70b477ccab3388cb34f15b5819871167420.src","preCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(\"i\", ClassHelper.DYNAMIC_TYPE, new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"7b3da89aa7961b6b574ac759ee5442838a972fbc","commitMessage":"@@@this commit contains the reimplementation of the scoping. The complete scoping is removed from the ACG. Additionally some code from the ACG is transfered in a Helper that manges labels.  scopes and variable creation in a stack. All checks from JSRVariableScopeCodeVisitor are transfered into the ClassCompletion verifier or the new VariableScopeVisitor. Additionally some checks for labels were added with the LabelVerifier. ACG was changed so a DeclarationExpression will no longer create a local variable and if a variable is a filed or protperty accessed from inside a closure ACG will no longer try to access that field directly. Instead the closure has to resolve these cases at runtime.\n\nNote: this commit should pass the tests but is imcomplete due to missing tests.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3419 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2006-01-19 08:07:02","modifiedFileCount":"60","status":"M","submitter":"Jochen Theodorou"},{"authorTime":"2019-05-08 17:23:18","codes":[{"authorDate":"2019-05-08 17:23:18","commitOrder":10,"curCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.getDeclaredConstructor().newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[]{value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2019-05-08 18:17:02","endLine":57,"groupId":"8708","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/16/5d1a3c6c129436a629b810e3546603c64ce641.src","preCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[]{value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2019-05-08 17:23:18","commitOrder":10,"curCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(new Parameter(ClassHelper.OBJECT_TYPE, \"i\"), new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.getDeclaredConstructor().newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2019-05-08 18:17:02","endLine":88,"groupId":"1088","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/16/5d1a3c6c129436a629b810e3546603c64ce641.src","preCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(new Parameter(ClassHelper.OBJECT_TYPE, \"i\"), new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"29115fb7c9fe8eb19de7073b9133a5651686449e","commitMessage":"@@@minor refactor: avoid deprecated method usage\n","date":"2019-05-08 18:17:02","modifiedFileCount":"29","status":"M","submitter":"Paul King"},{"authorTime":"2019-11-06 17:04:59","codes":[{"authorDate":"2019-11-06 17:04:59","commitOrder":11,"curCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.getDeclaredConstructor().newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = Integer.valueOf(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[]{value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2019-11-06 18:07:30","endLine":57,"groupId":"10332","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testNonLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c3/7dbdf412465a2bba99e1211e77ba2c52f9ff98.src","preCode":"    public void testNonLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, \"coll\")};\n\n        Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"));\n        classNode.addMethod(new MethodNode(\"oneParamDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.getDeclaredConstructor().newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method without looping\");\n        Object value = new Integer(10000);\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"oneParamDemo\", new Object[]{value});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2019-11-06 17:04:59","commitOrder":11,"curCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(new Parameter(ClassHelper.OBJECT_TYPE, \"i\"), new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.getDeclaredConstructor().newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {Integer.valueOf(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","date":"2019-11-06 18:07:30","endLine":88,"groupId":"10332","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c3/7dbdf412465a2bba99e1211e77ba2c52f9ff98.src","preCode":"    public void testLoop() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addConstructor(new ConstructorNode(ACC_PUBLIC, null));\n\n        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(), \"coll\")};\n\n        Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"));\n\n        ForStatement statement = new ForStatement(new Parameter(ClassHelper.OBJECT_TYPE, \"i\"), new VariableExpression(\"coll\"), loopStatement);\n        classNode.addMethod(new MethodNode(\"iterateDemo\", ACC_PUBLIC, ClassHelper.VOID_TYPE, parameters, ClassNode.EMPTY_ARRAY, statement));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.getDeclaredConstructor().newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        System.out.println(\"################ Now about to invoke a method with looping\");\n        Object[] array = {new Integer(1234), \"abc\", \"def\"};\n\n        try {\n            InvokerHelper.invokeMethod(bean, \"iterateDemo\", new Object[]{array});\n        } catch (InvokerInvocationException e) {\n            System.out.println(\"Caught: \" + e.getCause());\n            e.getCause().printStackTrace();\n            fail(\"Should not have thrown an exception\");\n        }\n        System.out.println(\"################ Done\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/ForTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"f1a0d190dd3bc84d5760cd44d5bd051ddca3a31b","commitMessage":"@@@refactor code\n\nI refactor some code about new java version and some unnecessary\nobjects that I leant from effective java item6.\n\n--Make progress every day!\n","date":"2019-11-06 18:07:30","modifiedFileCount":"17","status":"M","submitter":"mattisonchao"}]
