[{"authorTime":"2007-11-19 21:19:47","codes":[{"authorDate":"2007-11-19 21:19:47","commitOrder":1,"curCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.newInstance(true);\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","date":"2007-11-19 21:19:47","endLine":190,"groupId":"10390","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyConstructor1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/6c/1c06ce746042fda116e4b6f7c6b1dc00a62a92.src","preCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.newInstance(true);\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"},{"authorDate":"2007-11-19 21:19:47","commitOrder":1,"curCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","date":"2007-11-19 21:19:47","endLine":246,"groupId":"10395","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyConstructor2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/6c/1c06ce746042fda116e4b6f7c6b1dc00a62a92.src","preCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"}],"commitId":"c759adcb1f5b8e429169c5e471931e4cf6dee41c","commitMessage":"@@@fixes GROOVY-2267 + GROOVY-1360 based on a patch provided by Jim White.  removes the JSR settings in CompilerConfiguration\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@9308 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2007-11-19 21:19:47","modifiedFileCount":"3","status":"B","submitter":"Jochen Theodorou"},{"authorTime":"2015-06-10 22:34:22","codes":[{"authorDate":"2015-06-10 22:34:22","commitOrder":2,"curCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.newInstance(true);\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","date":"2015-06-11 10:47:58","endLine":192,"groupId":"3343","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyConstructor1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/63/6008ad7ba0d1842d88b8f6ccec69794b506ea8.src","preCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.newInstance(true);\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2015-06-10 22:34:22","commitOrder":2,"curCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(false, init.getParameters());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","date":"2015-06-11 10:47:58","endLine":250,"groupId":"3345","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyConstructor2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/63/6008ad7ba0d1842d88b8f6ccec69794b506ea8.src","preCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"4a2496048f40a06660d4fc730514bae4293d162e","commitMessage":"@@@GROOVY-7423: Added access to Method parameter names at runtime.\n","date":"2015-06-11 10:47:58","modifiedFileCount":"1","status":"M","submitter":"Nick Grealy"},{"authorTime":"2016-03-03 01:58:45","codes":[{"authorDate":"2016-03-03 01:58:45","commitOrder":3,"curCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.newInstance(true);\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","date":"2016-03-12 00:08:58","endLine":177,"groupId":"6071","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyConstructor1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/3b/e37cc643a12233be60c862c0db90e06852d92d.src","preCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.newInstance(true);\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2016-03-03 01:58:45","commitOrder":3,"curCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(false, init.getParameters());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","date":"2016-03-12 00:08:58","endLine":230,"groupId":"5404","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyConstructor2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/3b/e37cc643a12233be60c862c0db90e06852d92d.src","preCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final PrintWriter initOut = new PrintWriter(System.out);\n        init.setOutput(initOut);\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(false, init.getParameters());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, init.getOutput());\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initOut, config.getOutput());\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"09b8aa2963633403c75f8fbc93c2956e2ecf2743","commitMessage":"@@@Deprecate CompilerConfiguration.output (closes #277)\n\nas it is not used for anything.\n","date":"2016-03-12 00:08:58","modifiedFileCount":"3","status":"M","submitter":"Jan Mat?jka"},{"authorTime":"2016-03-03 01:58:45","codes":[{"authorDate":"2016-09-07 03:14:56","commitOrder":4,"curCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.newInstance();\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","date":"2016-09-11 10:10:03","endLine":177,"groupId":"6071","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyConstructor1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/7d/67307526c1406260bd68d7796e88ccd00db44f.src","preCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.newInstance(true);\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2016-03-03 01:58:45","commitOrder":4,"curCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(false, init.getParameters());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","date":"2016-03-12 00:08:58","endLine":230,"groupId":"5404","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyConstructor2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/3b/e37cc643a12233be60c862c0db90e06852d92d.src","preCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(false, init.getParameters());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"N"}],"commitId":"4241dce7a8f13713165bb19107935c1e463d8a6f","commitMessage":"@@@Remove outdated parser loading logic. (closes #415)\n\nIt looks like a long time ago there were two Groovy parsers.  a ?Classic?\nand Antlr.  The Antlr one was loaded using reflection.  while the classic\none was simply instantiated.  The reflection logic was kept after\ndefinitely switching to Antlr (cf. ebeff74).  although it is still\nnormally instantiated if reflection fails.\n\nThis commit simply removes all the reflection stuff.\n","date":"2016-09-11 10:10:03","modifiedFileCount":"3","status":"M","submitter":"S?bastien Le Callonnec"},{"authorTime":"2016-03-03 01:58:45","codes":[{"authorDate":"2019-09-29 06:58:06","commitOrder":5,"curCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.antlr4(init);\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","date":"2019-09-29 06:58:06","endLine":176,"groupId":"6071","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyConstructor1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/41/1aaadcdabc77bfb9d7cccfe18090357f83ebf0.src","preCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.newInstance();\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2016-03-03 01:58:45","commitOrder":5,"curCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(false, init.getParameters());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","date":"2016-03-12 00:08:58","endLine":230,"groupId":"5404","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyConstructor2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/3b/e37cc643a12233be60c862c0db90e06852d92d.src","preCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(false, init.getParameters());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"N"}],"commitId":"47200defa9e48e2664123d1193a979545fa09e93","commitMessage":"@@@prepare for removal of antlr2 parser\n","date":"2019-09-29 06:58:06","modifiedFileCount":"1","status":"M","submitter":"Paul King"},{"authorTime":"2020-01-20 06:07:11","codes":[{"authorDate":"2020-01-20 06:07:11","commitOrder":6,"curCode":"    public void testCopyConstructor1() {\n        CompilerConfiguration init = new CompilerConfiguration();\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n        init.setDefaultScriptExtension(\".jpp\");\n        init.setJointCompilationOptions(Collections.singletonMap(\"somekey\", \"somevalue\"));\n        ParserPluginFactory pluginFactory = ParserPluginFactory.antlr4(init);\n        init.setPluginFactory(pluginFactory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(Boolean.FALSE, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        assertEquals(\"File1\", init.getClasspath().get(0));\n        assertEquals(\"Somewhere\", init.getClasspath().get(1));\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", init.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, init.getPluginFactory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.TRUE, config.getDebug());\n        assertEquals(Boolean.FALSE, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.TRUE, config.getRecompileGroovySource());\n        assertEquals(\"File1\", config.getClasspath().get(0));\n        assertEquals(\"Somewhere\", config.getClasspath().get(1));\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", config.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, config.getPluginFactory());\n    }\n","date":"2020-01-20 06:07:35","endLine":157,"groupId":"3279","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyConstructor1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c2/9e97309c3a96a1d99eb4441ddbe7a8f4cda56c.src","preCode":"    public void testCopyConstructor1() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.POST_JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n        init.setDefaultScriptExtension(\".jpp\");\n\n        final Map initJoint = new HashMap();\n        initJoint.put(\"somekey\", \"somevalue\");\n        init.setJointCompilationOptions(initJoint);\n\n        final ParserPluginFactory initPPF = ParserPluginFactory.antlr4(init);\n        init.setPluginFactory(initPPF);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(false, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(initJoint, init.getJointCompilationOptions());\n        assertEquals(initPPF, init.getPluginFactory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(true, config.getDebug());\n        assertEquals(false, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.POST_JDK5, config.getTargetBytecode());\n        assertEquals(true, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(\"File1\", listCP.get(0));\n            assertEquals(\"Somewhere\", listCP.get(1));\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(initJoint, config.getJointCompilationOptions());\n        assertEquals(initPPF, config.getPluginFactory());\n\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-01-20 06:07:11","commitOrder":6,"curCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.FALSE, init.getDebug());\n        assertEquals(Boolean.FALSE, init.getParameters());\n        assertEquals(Boolean.TRUE, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.FALSE, init.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), init.getClasspath());\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.FALSE, config.getDebug());\n        assertEquals(Boolean.TRUE, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.FALSE, config.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), config.getClasspath());\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n    }\n","date":"2020-01-20 06:07:35","endLine":205,"groupId":"767","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyConstructor2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c2/9e97309c3a96a1d99eb4441ddbe7a8f4cda56c.src","preCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.PRE_JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n\n        final File initTDFile = new File(\"A wandering path\");\n        init.setTargetDirectory(initTDFile);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(false, init.getDebug());\n        assertEquals(false, init.getParameters());\n        assertEquals(true, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, init.getTargetBytecode());\n        assertEquals(false, init.getRecompileGroovySource());\n        {\n            final List listCP = init.getClasspath();\n            assertNotNull(listCP);\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, init.getTargetDirectory());\n\n        final CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(false, config.getDebug());\n        assertEquals(true, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.PRE_JDK5, config.getTargetBytecode());\n        assertEquals(false, config.getRecompileGroovySource());\n        {\n            final List listCP = config.getClasspath();\n            assertEquals(0, listCP.size());\n        }\n        assertEquals(initTDFile, config.getTargetDirectory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"4ed12ade3866662ea3cf5c9dc88f7277234c2415","commitMessage":"@@@GROOVY-9368: joint compilation options are null by default","date":"2020-01-20 06:07:35","modifiedFileCount":"2","status":"M","submitter":"Eric Milles"},{"authorTime":"2020-01-20 06:07:11","codes":[{"authorDate":"2020-01-20 06:46:51","commitOrder":7,"curCode":"    public void testCopyConstructor1() {\n        CompilerConfiguration init = new CompilerConfiguration();\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n        init.setDefaultScriptExtension(\".jpp\");\n        init.setJointCompilationOptions(Collections.singletonMap(\"somekey\", \"somevalue\"));\n        ParserPluginFactory pluginFactory = ParserPluginFactory.antlr4(init);\n        init.setPluginFactory(pluginFactory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.TRUE, init.getDebug());\n        assertEquals(Boolean.TRUE, init.getParameters());\n        assertEquals(Boolean.FALSE, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.TRUE, init.getRecompileGroovySource());\n        assertEquals(\"File1\", init.getClasspath().get(0));\n        assertEquals(\"Somewhere\", init.getClasspath().get(1));\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", init.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, init.getPluginFactory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.TRUE, config.getDebug());\n        assertEquals(Boolean.FALSE, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.TRUE, config.getRecompileGroovySource());\n        assertEquals(\"File1\", config.getClasspath().get(0));\n        assertEquals(\"Somewhere\", config.getClasspath().get(1));\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", config.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, config.getPluginFactory());\n    }\n","date":"2020-01-20 06:46:51","endLine":155,"groupId":"3279","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyConstructor1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/bc/ea2a174b8de002411012dc379bd1904ecf7d82.src","preCode":"    public void testCopyConstructor1() {\n        CompilerConfiguration init = new CompilerConfiguration();\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n        init.setDefaultScriptExtension(\".jpp\");\n        init.setJointCompilationOptions(Collections.singletonMap(\"somekey\", \"somevalue\"));\n        ParserPluginFactory pluginFactory = ParserPluginFactory.antlr4(init);\n        init.setPluginFactory(pluginFactory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(true, init.getDebug());\n        assertEquals(true, init.getParameters());\n        assertEquals(Boolean.FALSE, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(true, init.getRecompileGroovySource());\n        assertEquals(\"File1\", init.getClasspath().get(0));\n        assertEquals(\"Somewhere\", init.getClasspath().get(1));\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", init.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, init.getPluginFactory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.TRUE, config.getDebug());\n        assertEquals(Boolean.FALSE, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.TRUE, config.getRecompileGroovySource());\n        assertEquals(\"File1\", config.getClasspath().get(0));\n        assertEquals(\"Somewhere\", config.getClasspath().get(1));\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", config.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, config.getPluginFactory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-01-20 06:07:11","commitOrder":7,"curCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.FALSE, init.getDebug());\n        assertEquals(Boolean.FALSE, init.getParameters());\n        assertEquals(Boolean.TRUE, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.FALSE, init.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), init.getClasspath());\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.FALSE, config.getDebug());\n        assertEquals(Boolean.TRUE, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.FALSE, config.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), config.getClasspath());\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n    }\n","date":"2020-01-20 06:07:35","endLine":205,"groupId":"767","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyConstructor2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c2/9e97309c3a96a1d99eb4441ddbe7a8f4cda56c.src","preCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.FALSE, init.getDebug());\n        assertEquals(Boolean.FALSE, init.getParameters());\n        assertEquals(Boolean.TRUE, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.FALSE, init.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), init.getClasspath());\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.FALSE, config.getDebug());\n        assertEquals(Boolean.TRUE, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.FALSE, config.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), config.getClasspath());\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"}],"commitId":"3405219599df308d49abd816ca348ca00e022b4a","commitMessage":"@@@fix for indy builds","date":"2020-01-20 06:46:51","modifiedFileCount":"1","status":"M","submitter":"Eric Milles"},{"authorTime":"2020-01-20 06:07:11","codes":[{"authorDate":"2020-01-20 20:38:50","commitOrder":8,"curCode":"    public void testCopyConstructor1() {\n        CompilerConfiguration init = new CompilerConfiguration();\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n        init.setDefaultScriptExtension(\".jpp\");\n        init.setJointCompilationOptions(Collections.singletonMap(\"somekey\", \"somevalue\"));\n        ParserPluginFactory pluginFactory = ParserPluginFactory.antlr4();\n        init.setPluginFactory(pluginFactory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.TRUE, init.getDebug());\n        assertEquals(Boolean.TRUE, init.getParameters());\n        assertEquals(Boolean.FALSE, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.TRUE, init.getRecompileGroovySource());\n        assertEquals(\"File1\", init.getClasspath().get(0));\n        assertEquals(\"Somewhere\", init.getClasspath().get(1));\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", init.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, init.getPluginFactory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.TRUE, config.getDebug());\n        assertEquals(Boolean.FALSE, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.TRUE, config.getRecompileGroovySource());\n        assertEquals(\"File1\", config.getClasspath().get(0));\n        assertEquals(\"Somewhere\", config.getClasspath().get(1));\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", config.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, config.getPluginFactory());\n    }\n","date":"2020-01-26 01:23:04","endLine":156,"groupId":"3279","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyConstructor1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/90/561b75fc55281a99852f3a014c22654ef3ec4a.src","preCode":"    public void testCopyConstructor1() {\n        CompilerConfiguration init = new CompilerConfiguration();\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n        init.setDefaultScriptExtension(\".jpp\");\n        init.setJointCompilationOptions(Collections.singletonMap(\"somekey\", \"somevalue\"));\n        ParserPluginFactory pluginFactory = ParserPluginFactory.antlr4(init);\n        init.setPluginFactory(pluginFactory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.TRUE, init.getDebug());\n        assertEquals(Boolean.TRUE, init.getParameters());\n        assertEquals(Boolean.FALSE, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.TRUE, init.getRecompileGroovySource());\n        assertEquals(\"File1\", init.getClasspath().get(0));\n        assertEquals(\"Somewhere\", init.getClasspath().get(1));\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", init.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, init.getPluginFactory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.TRUE, config.getDebug());\n        assertEquals(Boolean.FALSE, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.TRUE, config.getRecompileGroovySource());\n        assertEquals(\"File1\", config.getClasspath().get(0));\n        assertEquals(\"Somewhere\", config.getClasspath().get(1));\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", config.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, config.getPluginFactory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-01-20 06:07:11","commitOrder":8,"curCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.FALSE, init.getDebug());\n        assertEquals(Boolean.FALSE, init.getParameters());\n        assertEquals(Boolean.TRUE, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.FALSE, init.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), init.getClasspath());\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.FALSE, config.getDebug());\n        assertEquals(Boolean.TRUE, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.FALSE, config.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), config.getClasspath());\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n    }\n","date":"2020-01-20 06:07:35","endLine":205,"groupId":"767","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyConstructor2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c2/9e97309c3a96a1d99eb4441ddbe7a8f4cda56c.src","preCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.FALSE, init.getDebug());\n        assertEquals(Boolean.FALSE, init.getParameters());\n        assertEquals(Boolean.TRUE, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.FALSE, init.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), init.getClasspath());\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.FALSE, config.getDebug());\n        assertEquals(Boolean.TRUE, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.FALSE, config.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), config.getClasspath());\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"}],"commitId":"6a7bf3677c0e7488f5dd2ae89c4bd21420392cfb","commitMessage":"@@@remove need for compiler config from parser creation","date":"2020-01-26 01:23:04","modifiedFileCount":"8","status":"M","submitter":"Eric Milles"},{"authorTime":"2020-06-13 17:36:01","codes":[{"authorDate":"2020-06-13 17:36:01","commitOrder":9,"curCode":"    public void testCopyConstructor1() {\n        CompilerConfiguration init = new CompilerConfiguration();\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n        File targetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(targetDirectory);\n        init.setDefaultScriptExtension(\".jpp\");\n        init.setJointCompilationOptions(Collections.singletonMap(\"somekey\", \"somevalue\"));\n        init.addCompilationCustomizers(new ImportCustomizer().addStarImports(\"groovy.transform\"));\n        ParserPluginFactory pluginFactory = ParserPluginFactory.antlr4();\n        init.setPluginFactory(pluginFactory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.TRUE, init.getDebug());\n        assertEquals(Boolean.TRUE, init.getParameters());\n        assertEquals(Boolean.FALSE, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.TRUE, init.getRecompileGroovySource());\n        assertEquals(\"File1\", init.getClasspath().get(0));\n        assertEquals(\"Somewhere\", init.getClasspath().get(1));\n        assertEquals(targetDirectory, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", init.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, init.getPluginFactory());\n        assertEquals(1, init.getCompilationCustomizers().size());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.TRUE, config.getDebug());\n        assertEquals(Boolean.FALSE, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.TRUE, config.getRecompileGroovySource());\n        assertEquals(\"File1\", config.getClasspath().get(0));\n        assertEquals(\"Somewhere\", config.getClasspath().get(1));\n        assertEquals(targetDirectory, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", config.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, config.getPluginFactory());\n        \r\n\r\n    }\n","date":"2020-06-13 17:36:18","endLine":161,"groupId":"10330","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyConstructor1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/af/3308fe7ff99cda11ee899696ae9f7e4c68e484.src","preCode":"    public void testCopyConstructor1() {\n        CompilerConfiguration init = new CompilerConfiguration();\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(true);\n        init.setParameters(true);\n        init.setVerbose(false);\n        init.setTolerance(720);\n        init.setMinimumRecompilationInterval(234);\n        init.setScriptBaseClass(\"blarg.foo.WhatSit\");\n        init.setSourceEncoding(\"LEAD-123\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(true);\n        init.setClasspath(\"File1\" + File.pathSeparator + \"Somewhere\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n        init.setDefaultScriptExtension(\".jpp\");\n        init.setJointCompilationOptions(Collections.singletonMap(\"somekey\", \"somevalue\"));\n        ParserPluginFactory pluginFactory = ParserPluginFactory.antlr4();\n        init.setPluginFactory(pluginFactory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.TRUE, init.getDebug());\n        assertEquals(Boolean.TRUE, init.getParameters());\n        assertEquals(Boolean.FALSE, init.getVerbose());\n        assertEquals(720, init.getTolerance());\n        assertEquals(234, init.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", init.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.TRUE, init.getRecompileGroovySource());\n        assertEquals(\"File1\", init.getClasspath().get(0));\n        assertEquals(\"Somewhere\", init.getClasspath().get(1));\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n        assertEquals(\".jpp\", init.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", init.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, init.getPluginFactory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.TRUE, config.getDebug());\n        assertEquals(Boolean.FALSE, config.getVerbose());\n        assertEquals(720, config.getTolerance());\n        assertEquals(234, config.getMinimumRecompilationInterval());\n        assertEquals(\"blarg.foo.WhatSit\", config.getScriptBaseClass());\n        assertEquals(\"LEAD-123\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.TRUE, config.getRecompileGroovySource());\n        assertEquals(\"File1\", config.getClasspath().get(0));\n        assertEquals(\"Somewhere\", config.getClasspath().get(1));\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n        assertEquals(\".jpp\", config.getDefaultScriptExtension());\n        assertEquals(\"somevalue\", config.getJointCompilationOptions().get(\"somekey\"));\n        assertEquals(pluginFactory, config.getPluginFactory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-06-13 17:36:01","commitOrder":9,"curCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n        File targetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(targetDirectory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.FALSE, init.getDebug());\n        assertEquals(Boolean.FALSE, init.getParameters());\n        assertEquals(Boolean.TRUE, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.FALSE, init.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), init.getClasspath());\n        assertEquals(targetDirectory, init.getTargetDirectory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.FALSE, config.getDebug());\n        assertEquals(Boolean.TRUE, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.FALSE, config.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), config.getClasspath());\n        assertEquals(targetDirectory, config.getTargetDirectory());\n    }\n","date":"2020-06-13 17:36:18","endLine":209,"groupId":"10330","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyConstructor2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/af/3308fe7ff99cda11ee899696ae9f7e4c68e484.src","preCode":"    public void testCopyConstructor2() {\n        final CompilerConfiguration init = new CompilerConfiguration();\n\n        init.setWarningLevel(WarningMessage.POSSIBLE_ERRORS);\n        init.setDebug(false);\n        init.setParameters(false);\n        init.setVerbose(true);\n        init.setTolerance(55);\n        init.setMinimumRecompilationInterval(975);\n        init.setScriptBaseClass(\"\");\n        init.setSourceEncoding(\"Gutenberg\");\n        init.setTargetBytecode(CompilerConfiguration.JDK5);\n        init.setRecompileGroovySource(false);\n        init.setClasspath(\"\");\n        File tergetDirectory = new File(\"A wandering path\");\n        init.setTargetDirectory(tergetDirectory);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, init.getWarningLevel());\n        assertEquals(Boolean.FALSE, init.getDebug());\n        assertEquals(Boolean.FALSE, init.getParameters());\n        assertEquals(Boolean.TRUE, init.getVerbose());\n        assertEquals(55, init.getTolerance());\n        assertEquals(975, init.getMinimumRecompilationInterval());\n        assertEquals(\"\", init.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", init.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, init.getTargetBytecode());\n        assertEquals(Boolean.FALSE, init.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), init.getClasspath());\n        assertEquals(tergetDirectory, init.getTargetDirectory());\n\n        \r\n\n        CompilerConfiguration config = new CompilerConfiguration(init);\n\n        assertEquals(WarningMessage.POSSIBLE_ERRORS, config.getWarningLevel());\n        assertEquals(Boolean.FALSE, config.getDebug());\n        assertEquals(Boolean.TRUE, config.getVerbose());\n        assertEquals(55, config.getTolerance());\n        assertEquals(975, config.getMinimumRecompilationInterval());\n        assertEquals(\"\", config.getScriptBaseClass());\n        assertEquals(\"Gutenberg\", config.getSourceEncoding());\n        assertEquals(CompilerConfiguration.JDK5, config.getTargetBytecode());\n        assertEquals(Boolean.FALSE, config.getRecompileGroovySource());\n        assertEquals(Collections.emptyList(), config.getClasspath());\n        assertEquals(tergetDirectory, config.getTargetDirectory());\n    }\n","realPath":"src/test/org/codehaus/groovy/control/CompilerConfigurationTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"9038ccb498fe725549a9b90e2fc3244e4564000f","commitMessage":"@@@GROOVY-9585 preparatory work plus fix typo\n","date":"2020-06-13 17:36:18","modifiedFileCount":"2","status":"M","submitter":"Paul King"}]
