[{"authorTime":"2020-07-19 19:24:24","codes":[{"authorDate":"2020-07-19 19:24:24","commitOrder":1,"curCode":"    private void visitAbstractBaseClassesForInterfaceMethodNodes(ClassNode origin, ClassNode superClass) {\n        if (superClass == null) return;\n        if (!Modifier.isAbstract(superClass.getModifiers())) return;\n\n        for (ClassNode interfaceClassNode : superClass.getInterfaces()) {\n            List<MethodNode> methodNodes = new ArrayList<MethodNode>();\n            methodNodes.addAll(interfaceClassNode.getMethods());\n\n            for (MethodNode interfaceMethodNode : methodNodes) {\n                final List<AnnotationNode> annotationNodes = AnnotationUtils.hasMetaAnnotations(interfaceMethodNode, ContractElement.class.getName());\n                if (annotationNodes == null || annotationNodes.isEmpty()) continue;\n\n                MethodNode implementingMethodNode = superClass.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n\n                \r\n                \r\n                if (implementingMethodNode != null) continue;\n\n                MethodNode implementationInOriginClassNode = origin.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n                if (implementationInOriginClassNode == null) continue;\n\n                handleMethodNode(implementationInOriginClassNode, annotationNodes);\n            }\n        }\n    }\n","date":"2020-08-06 14:20:13","endLine":117,"groupId":"12083","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitAbstractBaseClassesForInterfaceMethodNodes","params":"(ClassNodeorigin@ClassNodesuperClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ec/cdae975afa2dcf11919d3b5ada30a458a7835c.src","preCode":"    private void visitAbstractBaseClassesForInterfaceMethodNodes(ClassNode origin, ClassNode superClass) {\n        if (superClass == null) return;\n        if (!Modifier.isAbstract(superClass.getModifiers())) return;\n\n        for (ClassNode interfaceClassNode : superClass.getInterfaces()) {\n            List<MethodNode> methodNodes = new ArrayList<MethodNode>();\n            methodNodes.addAll(interfaceClassNode.getMethods());\n\n            for (MethodNode interfaceMethodNode : methodNodes) {\n                final List<AnnotationNode> annotationNodes = AnnotationUtils.hasMetaAnnotations(interfaceMethodNode, ContractElement.class.getName());\n                if (annotationNodes == null || annotationNodes.isEmpty()) continue;\n\n                MethodNode implementingMethodNode = superClass.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n\n                \r\n                \r\n                if (implementingMethodNode != null) continue;\n\n                MethodNode implementationInOriginClassNode = origin.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n                if (implementationInOriginClassNode == null) continue;\n\n                handleMethodNode(implementationInOriginClassNode, annotationNodes);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-contracts/src/main/java/org/apache/groovy/contracts/ast/visitor/AnnotationProcessorVisitor.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2020-07-19 19:24:24","commitOrder":1,"curCode":"    private void visitInterfaces(final ClassNode classNode, final ClassNode[] interfaces) {\n        for (ClassNode interfaceClassNode : interfaces) {\n            List<MethodNode> methodNodes = new ArrayList<MethodNode>();\n            methodNodes.addAll(interfaceClassNode.getMethods());\n\n            \r\n            for (MethodNode interfaceMethodNode : methodNodes) {\n                MethodNode implementingMethodNode = classNode.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n                if (implementingMethodNode == null) continue;\n\n                final List<AnnotationNode> annotationNodes = AnnotationUtils.hasMetaAnnotations(interfaceMethodNode, ContractElement.class.getName());\n                handleInterfaceMethodNode(classNode, implementingMethodNode, annotationNodes);\n            }\n\n            visitInterfaces(classNode, interfaceClassNode.getInterfaces());\n        }\n    }\n","date":"2020-08-06 14:20:13","endLine":135,"groupId":"12081","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitInterfaces","params":"(finalClassNodeclassNode@finalClassNode[]interfaces)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ec/cdae975afa2dcf11919d3b5ada30a458a7835c.src","preCode":"    private void visitInterfaces(final ClassNode classNode, final ClassNode[] interfaces) {\n        for (ClassNode interfaceClassNode : interfaces) {\n            List<MethodNode> methodNodes = new ArrayList<MethodNode>();\n            methodNodes.addAll(interfaceClassNode.getMethods());\n\n            \r\n            for (MethodNode interfaceMethodNode : methodNodes) {\n                MethodNode implementingMethodNode = classNode.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n                if (implementingMethodNode == null) continue;\n\n                final List<AnnotationNode> annotationNodes = AnnotationUtils.hasMetaAnnotations(interfaceMethodNode, ContractElement.class.getName());\n                handleInterfaceMethodNode(classNode, implementingMethodNode, annotationNodes);\n            }\n\n            visitInterfaces(classNode, interfaceClassNode.getInterfaces());\n        }\n    }\n","realPath":"subprojects/groovy-contracts/src/main/java/org/apache/groovy/contracts/ast/visitor/AnnotationProcessorVisitor.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"2c8fc42710a5527911c21ca37aea7b6c83d954f9","commitMessage":"@@@GROOVY-9671: Absorb GContracts project into Groovy project - initial code checkin (closes #1337)\n\nCo-authored-by: Paul King <paulk@asert.com.au>\n","date":"2020-08-06 14:20:13","modifiedFileCount":"1","status":"B","submitter":"Andre Steingress"},{"authorTime":"2021-04-21 10:35:31","codes":[{"authorDate":"2021-04-21 10:35:31","commitOrder":2,"curCode":"    private void visitAbstractBaseClassesForInterfaceMethodNodes(ClassNode origin, ClassNode superClass) {\n        if (superClass == null) return;\n        if (!Modifier.isAbstract(superClass.getModifiers())) return;\n\n        for (ClassNode interfaceClassNode : superClass.getInterfaces()) {\n            List<MethodNode> methodNodes = new ArrayList<MethodNode>(interfaceClassNode.getMethods());\n\n            for (MethodNode interfaceMethodNode : methodNodes) {\n                final List<AnnotationNode> annotationNodes = AnnotationUtils.hasMetaAnnotations(interfaceMethodNode, ContractElement.class.getName());\n                if (annotationNodes == null || annotationNodes.isEmpty()) continue;\n\n                MethodNode implementingMethodNode = superClass.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n\n                \r\n                \r\n                if (implementingMethodNode != null) continue;\n\n                MethodNode implementationInOriginClassNode = origin.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n                if (implementationInOriginClassNode == null) continue;\n\n                handleMethodNode(implementationInOriginClassNode, annotationNodes);\n            }\n        }\n    }\n","date":"2021-04-21 10:35:31","endLine":115,"groupId":"1049","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitAbstractBaseClassesForInterfaceMethodNodes","params":"(ClassNodeorigin@ClassNodesuperClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/73/64de948fe9efc311282370681e0bf1aca22d53.src","preCode":"    private void visitAbstractBaseClassesForInterfaceMethodNodes(ClassNode origin, ClassNode superClass) {\n        if (superClass == null) return;\n        if (!Modifier.isAbstract(superClass.getModifiers())) return;\n\n        for (ClassNode interfaceClassNode : superClass.getInterfaces()) {\n            List<MethodNode> methodNodes = new ArrayList<MethodNode>();\n            methodNodes.addAll(interfaceClassNode.getMethods());\n\n            for (MethodNode interfaceMethodNode : methodNodes) {\n                final List<AnnotationNode> annotationNodes = AnnotationUtils.hasMetaAnnotations(interfaceMethodNode, ContractElement.class.getName());\n                if (annotationNodes == null || annotationNodes.isEmpty()) continue;\n\n                MethodNode implementingMethodNode = superClass.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n\n                \r\n                \r\n                if (implementingMethodNode != null) continue;\n\n                MethodNode implementationInOriginClassNode = origin.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n                if (implementationInOriginClassNode == null) continue;\n\n                handleMethodNode(implementationInOriginClassNode, annotationNodes);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-contracts/src/main/java/org/apache/groovy/contracts/ast/visitor/AnnotationProcessorVisitor.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2021-04-21 10:35:31","commitOrder":2,"curCode":"    private void visitInterfaces(final ClassNode classNode, final ClassNode[] interfaces) {\n        for (ClassNode interfaceClassNode : interfaces) {\n            List<MethodNode> methodNodes = new ArrayList<MethodNode>(interfaceClassNode.getMethods());\n\n            \r\n            for (MethodNode interfaceMethodNode : methodNodes) {\n                MethodNode implementingMethodNode = classNode.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n                if (implementingMethodNode == null) continue;\n\n                final List<AnnotationNode> annotationNodes = AnnotationUtils.hasMetaAnnotations(interfaceMethodNode, ContractElement.class.getName());\n                handleInterfaceMethodNode(classNode, implementingMethodNode, annotationNodes);\n            }\n\n            visitInterfaces(classNode, interfaceClassNode.getInterfaces());\n        }\n    }\n","date":"2021-04-21 10:35:31","endLine":132,"groupId":"1049","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitInterfaces","params":"(finalClassNodeclassNode@finalClassNode[]interfaces)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/73/64de948fe9efc311282370681e0bf1aca22d53.src","preCode":"    private void visitInterfaces(final ClassNode classNode, final ClassNode[] interfaces) {\n        for (ClassNode interfaceClassNode : interfaces) {\n            List<MethodNode> methodNodes = new ArrayList<MethodNode>();\n            methodNodes.addAll(interfaceClassNode.getMethods());\n\n            \r\n            for (MethodNode interfaceMethodNode : methodNodes) {\n                MethodNode implementingMethodNode = classNode.getMethod(interfaceMethodNode.getName(), interfaceMethodNode.getParameters());\n                if (implementingMethodNode == null) continue;\n\n                final List<AnnotationNode> annotationNodes = AnnotationUtils.hasMetaAnnotations(interfaceMethodNode, ContractElement.class.getName());\n                handleInterfaceMethodNode(classNode, implementingMethodNode, annotationNodes);\n            }\n\n            visitInterfaces(classNode, interfaceClassNode.getInterfaces());\n        }\n    }\n","realPath":"subprojects/groovy-contracts/src/main/java/org/apache/groovy/contracts/ast/visitor/AnnotationProcessorVisitor.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"e45d05e3c4c8c021b9b629749502a9133ce050a2","commitMessage":"@@@Trivial refactoring: remove redundant `addAll` method calls\n","date":"2021-04-21 10:35:31","modifiedFileCount":"1","status":"M","submitter":"Daniel Sun"}]
