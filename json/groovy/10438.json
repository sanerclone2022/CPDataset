[{"authorTime":"2017-12-14 16:49:51","codes":[{"authorDate":"2017-12-14 16:49:51","commitOrder":1,"curCode":"    public CallSite createPojoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(pojoCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compilePojoMethod(this);\n                }\n                if (constr != null) {\n                    pojoCallSiteConstructor = new SoftReference<Constructor> (constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n        return new PojoMetaMethodSite.PojoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","date":"2017-12-14 18:15:44","endLine":294,"groupId":"1498","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createPojoMetaMethodSite","params":"(CallSitesite@MetaClassImplmetaClass@Class[]params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/58/314e264628263f3f409b2c9da53a56c325bab4.src","preCode":"    public CallSite createPojoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(pojoCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compilePojoMethod(this);\n                }\n                if (constr != null) {\n                    pojoCallSiteConstructor = new SoftReference<Constructor> (constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n        return new PojoMetaMethodSite.PojoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/CachedMethod.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"B"},{"authorDate":"2017-12-14 16:49:51","commitOrder":1,"curCode":"    public CallSite createStaticMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(staticCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compileStaticMethod(this);\n                }\n                if (constr != null) {\n                    staticCallSiteConstructor = new SoftReference<Constructor> (constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n\n        return new StaticMetaMethodSite.StaticMetaMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","date":"2017-12-14 18:15:44","endLine":323,"groupId":"1498","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createStaticMetaMethodSite","params":"(CallSitesite@MetaClassImplmetaClass@Class[]params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/58/314e264628263f3f409b2c9da53a56c325bab4.src","preCode":"    public CallSite createStaticMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(staticCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compileStaticMethod(this);\n                }\n                if (constr != null) {\n                    staticCallSiteConstructor = new SoftReference<Constructor> (constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n\n        return new StaticMetaMethodSite.StaticMetaMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/CachedMethod.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"B"}],"commitId":"b25d0e55ddac82fa2127c69fb1ca10555975a2a5","commitMessage":"@@@Move Java source set into `src/main/java`\n","date":"2017-12-14 18:15:44","modifiedFileCount":"2","status":"B","submitter":"Cedric Champeau"},{"authorTime":"2018-08-26 00:43:55","codes":[{"authorDate":"2018-08-26 00:43:55","commitOrder":2,"curCode":"    public CallSite createPojoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(pojoCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compilePojoMethod(this);\n                }\n                if (constr != null) {\n                    pojoCallSiteConstructor = new SoftReference<>(constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n        return new PojoMetaMethodSite.PojoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","date":"2018-08-26 00:43:56","endLine":293,"groupId":"4601","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createPojoMetaMethodSite","params":"(CallSitesite@MetaClassImplmetaClass@Class[]params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ae/70f1069bf804c39aacecb287d4bf1d4f0ffebe.src","preCode":"    public CallSite createPojoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(pojoCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compilePojoMethod(this);\n                }\n                if (constr != null) {\n                    pojoCallSiteConstructor = new SoftReference<Constructor> (constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n        return new PojoMetaMethodSite.PojoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/CachedMethod.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2018-08-26 00:43:55","commitOrder":2,"curCode":"    public CallSite createStaticMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(staticCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compileStaticMethod(this);\n                }\n                if (constr != null) {\n                    staticCallSiteConstructor = new SoftReference<>(constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n\n        return new StaticMetaMethodSite.StaticMetaMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","date":"2018-08-26 00:43:56","endLine":322,"groupId":"4601","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createStaticMetaMethodSite","params":"(CallSitesite@MetaClassImplmetaClass@Class[]params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ae/70f1069bf804c39aacecb287d4bf1d4f0ffebe.src","preCode":"    public CallSite createStaticMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(staticCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compileStaticMethod(this);\n                }\n                if (constr != null) {\n                    staticCallSiteConstructor = new SoftReference<Constructor> (constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n\n        return new StaticMetaMethodSite.StaticMetaMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/CachedMethod.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"}],"commitId":"72fd40785c0e83972a4daf2ee941fd0cdd1f7c96","commitMessage":"@@@Minor refactoring: Explicit type can be replaced with <>\n","date":"2018-08-26 00:43:56","modifiedFileCount":"201","status":"M","submitter":"Daniel Sun"},{"authorTime":"2018-08-26 01:02:52","codes":[{"authorDate":"2018-08-26 01:02:52","commitOrder":3,"curCode":"    public CallSite createPojoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(pojoCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compilePojoMethod(this);\n                }\n                if (constr != null) {\n                    pojoCallSiteConstructor = new SoftReference<Constructor> (constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n        return new PojoMetaMethodSite.PojoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","date":"2018-08-26 01:02:52","endLine":293,"groupId":"10438","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createPojoMetaMethodSite","params":"(CallSitesite@MetaClassImplmetaClass@Class[]params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/1c/8f3b3d43e16ad1eaba4845725247c1f55994c8.src","preCode":"    public CallSite createPojoMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(pojoCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compilePojoMethod(this);\n                }\n                if (constr != null) {\n                    pojoCallSiteConstructor = new SoftReference<>(constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n        return new PojoMetaMethodSite.PojoCachedMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/CachedMethod.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2018-08-26 01:02:52","commitOrder":3,"curCode":"    public CallSite createStaticMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(staticCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compileStaticMethod(this);\n                }\n                if (constr != null) {\n                    staticCallSiteConstructor = new SoftReference<Constructor> (constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n\n        return new StaticMetaMethodSite.StaticMetaMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","date":"2018-08-26 01:02:52","endLine":322,"groupId":"10438","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createStaticMetaMethodSite","params":"(CallSitesite@MetaClassImplmetaClass@Class[]params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/1c/8f3b3d43e16ad1eaba4845725247c1f55994c8.src","preCode":"    public CallSite createStaticMetaMethodSite(CallSite site, MetaClassImpl metaClass, Class[] params) {\n        if (!skipCompiled) {\n            Constructor constr = getConstructor(staticCallSiteConstructor);\n            if (constr==null) {\n                if (CallSiteGenerator.isCompilable(this)) {\n                  constr = CallSiteGenerator.compileStaticMethod(this);\n                }\n                if (constr != null) {\n                    staticCallSiteConstructor = new SoftReference<>(constr);\n                } else {\n                    skipCompiled = true;\n                }\n            }\n    \n            if (constr!=null) {\n                try {\n                    return (CallSite) constr.newInstance(site, metaClass, this, params, constr);\n                } catch (Error e) {\n                    skipCompiled=true;\n                    throw e;\n                } catch (Throwable e) {\n                    skipCompiled=true;\n                }\n            }\n        }\n\n        return new StaticMetaMethodSite.StaticMetaMethodSiteNoUnwrapNoCoerce(site, metaClass, this, params);\n    }\n","realPath":"src/main/java/org/codehaus/groovy/reflection/CachedMethod.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"}],"commitId":"6ef32353d7a76af89de62311ac751924bb419d12","commitMessage":"@@@Revert \"Minor refactoring: Explicit type can be replaced with <>\"\n\nThis reverts commit 72fd407\n","date":"2018-08-26 01:02:52","modifiedFileCount":"201","status":"M","submitter":"Daniel Sun"}]
