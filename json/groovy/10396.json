[{"authorTime":"2019-05-19 17:04:42","codes":[{"authorDate":"2019-05-19 17:04:42","commitOrder":1,"curCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    ConstantExpression.NULL);\n        }\n","date":"2019-05-19 17:04:42","endLine":113,"groupId":"11763","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"wrapLoggingMethodCall","params":"(ExpressionlogVariable@StringmethodName@ExpressionoriginalExpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/d9/a8a8a43a8752b6427b320f84e46a73caade190.src","preCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    ConstantExpression.NULL);\n        }\n","realPath":"src/main/java/groovy/util/logging/Log4j2.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2019-05-19 17:04:42","commitOrder":1,"curCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    ConstantExpression.NULL);\n        }\n","date":"2019-05-19 17:04:42","endLine":113,"groupId":"11763","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"wrapLoggingMethodCall","params":"(ExpressionlogVariable@StringmethodName@ExpressionoriginalExpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/4f/7da0743eabece716f5a7dcd0582031fce5aa7d.src","preCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    ConstantExpression.NULL);\n        }\n","realPath":"src/main/java/groovy/util/logging/Slf4j.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"86f5c8216b5d0f042408bdc4ae5d6a7baa247c95","commitMessage":"@@@move some java files from src/main/groovy to src/main/java and fix up some Javadoc assertion tests that weren't running\n","date":"2019-05-19 17:04:42","modifiedFileCount":"0","status":"B","submitter":"Paul King"},{"authorTime":"2019-08-06 13:50:11","codes":[{"authorDate":"2019-08-06 13:50:11","commitOrder":2,"curCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    nullX());\n        }\n","date":"2019-08-06 13:50:31","endLine":115,"groupId":"11763","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"wrapLoggingMethodCall","params":"(ExpressionlogVariable@StringmethodName@ExpressionoriginalExpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/0d/4e20fc00130e49e0f926215450f429eb9b14d5.src","preCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    ConstantExpression.NULL);\n        }\n","realPath":"src/main/java/groovy/util/logging/Log4j2.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-08-06 13:50:11","commitOrder":2,"curCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    nullX());\n        }\n","date":"2019-08-06 13:50:31","endLine":115,"groupId":"11763","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"wrapLoggingMethodCall","params":"(ExpressionlogVariable@StringmethodName@ExpressionoriginalExpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/97/60caaff93a6113f4e9011248f4e7c208b0c3c6.src","preCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    ConstantExpression.NULL);\n        }\n","realPath":"src/main/java/groovy/util/logging/Slf4j.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"73314d6291ff64a00e91fd3cf351cd7ef69cf7cd","commitMessage":"@@@GROOVY-9153: follow-up refactor - further cases which could cause issues down the track\n","date":"2019-08-06 13:50:31","modifiedFileCount":"20","status":"M","submitter":"Paul King"},{"authorTime":"2019-10-25 23:57:17","codes":[{"authorDate":"2019-10-25 23:57:17","commitOrder":3,"curCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return ternaryX(condition, originalExpression, nullX());\n        }\n","date":"2019-10-25 23:57:17","endLine":111,"groupId":"10396","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"wrapLoggingMethodCall","params":"(ExpressionlogVariable@StringmethodName@ExpressionoriginalExpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/08/f57fc34d58f081c4f7e5b9a028efb9b0340550.src","preCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    nullX());\n        }\n","realPath":"src/main/java/groovy/util/logging/Log4j2.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2019-10-25 23:57:17","commitOrder":3,"curCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return ternaryX(condition, originalExpression, nullX());\n        }\n","date":"2019-10-25 23:57:17","endLine":111,"groupId":"10396","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"wrapLoggingMethodCall","params":"(ExpressionlogVariable@StringmethodName@ExpressionoriginalExpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/5e/e7218a9d1f7229e289b6bb68aa186151347fbc.src","preCode":"        public Expression wrapLoggingMethodCall(Expression logVariable, String methodName, Expression originalExpression) {\n            MethodCallExpression condition = new MethodCallExpression(\n                    logVariable,\n                    \"is\" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1) + \"Enabled\",\n                    ArgumentListExpression.EMPTY_ARGUMENTS);\n            condition.setImplicitThis(false);\n\n            return new TernaryExpression(\n                    new BooleanExpression(condition),\n                    originalExpression,\n                    nullX());\n        }\n","realPath":"src/main/java/groovy/util/logging/Slf4j.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"0427a74cb313700e50e7789e739631767ebb0e60","commitMessage":"@@@minor refactor of nullX() usage","date":"2019-10-25 23:57:17","modifiedFileCount":"7","status":"M","submitter":"Eric Milles"}]
