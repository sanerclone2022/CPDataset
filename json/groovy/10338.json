[{"authorTime":"2003-09-11 22:11:56","codes":[{"authorDate":"2003-09-11 22:11:56","commitOrder":1,"curCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"java.lang.Object\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2003-09-11 22:11:56","endLine":89,"groupId":"3173","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/11/570662b3f58c1e5890611a92aba0b62f981fd0.src","preCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"java.lang.Object\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2003-09-11 22:11:56","commitOrder":1,"curCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"org.codehaus.groovy.runtime.DummyBean\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2003-09-11 22:11:56","endLine":108,"groupId":"3173","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInheritedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/11/570662b3f58c1e5890611a92aba0b62f981fd0.src","preCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"org.codehaus.groovy.runtime.DummyBean\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"}],"commitId":"408b29851d7bbe4d343340832297e4be7e0c5578","commitMessage":"@@@refactored the source tree to make things a little cleaner.\n\nnow have the more normal src/main and src/test trees\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@34 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2003-09-11 22:11:56","modifiedFileCount":"0","status":"B","submitter":"James Strachan"},{"authorTime":"2003-09-12 06:41:35","codes":[{"authorDate":"2003-09-12 06:41:35","commitOrder":2,"curCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"java.lang.Object\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2003-09-12 06:41:35","endLine":89,"groupId":"3173","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ec/59ab2f0490932886f1e11ac69cc2df0115e5b8.src","preCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"java.lang.Object\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2003-09-12 06:41:35","commitOrder":2,"curCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"org.codehaus.groovy.runtime.DummyBean\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2003-09-12 06:41:35","endLine":108,"groupId":"3173","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInheritedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/ec/59ab2f0490932886f1e11ac69cc2df0115e5b8.src","preCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, \"org.codehaus.groovy.runtime.DummyBean\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"f604e00970231c359771075b86642ea275c5bf1f","commitMessage":"@@@Nearly got all the test passing again after having to change the stack processing mechanism somewhat to handle more complex statement blocks\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@68 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2003-09-12 06:41:35","modifiedFileCount":"4","status":"M","submitter":"James Strachan"},{"authorTime":"2003-10-06 12:48:22","codes":[{"authorDate":"2003-10-06 12:48:22","commitOrder":3,"curCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"java.lang.Object\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", \"Foo\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2003-10-06 12:48:22","endLine":89,"groupId":"3173","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/d0/f23912008f9afe1cf40fd43cb18d3d63359197.src","preCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"java.lang.Object\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2003-10-06 12:48:22","commitOrder":3,"curCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"org.codehaus.groovy.runtime.DummyBean\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", \"Foo\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2003-10-06 12:48:22","endLine":108,"groupId":"3173","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInheritedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/d0/f23912008f9afe1cf40fd43cb18d3d63359197.src","preCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"org.codehaus.groovy.runtime.DummyBean\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"bc3e65b5e6d0b0c10c946a20dcae67e2f61aeaf5","commitMessage":"@@@Fairly large refactoring - the statements and expressions are now all named properly to make bob happier and have been refactored into sub packages to make it easier to see whats going on.\n\nI hope this doesn't cause any merge conflicts for you bob\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@176 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2003-10-06 12:48:22","modifiedFileCount":"31","status":"M","submitter":"James Strachan"},{"authorTime":"2003-11-29 14:56:15","codes":[{"authorDate":"2003-11-29 14:56:15","commitOrder":4,"curCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"java.lang.Object\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", \"Foo\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, \"java.lang.String\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2003-11-29 14:56:15","endLine":89,"groupId":"3173","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/f2/1aef5a5c90084cca335511ad603b0de6bd35f3.src","preCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"java.lang.Object\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", \"Foo\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2003-11-29 14:56:15","commitOrder":4,"curCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"org.codehaus.groovy.runtime.DummyBean\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", \"Foo\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, \"java.lang.String\");\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2003-11-29 14:56:15","endLine":108,"groupId":"3173","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testInheritedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/f2/1aef5a5c90084cca335511ad603b0de6bd35f3.src","preCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"org.codehaus.groovy.runtime.DummyBean\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", \"Foo\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", Modifier.PRIVATE, \"java.lang.String\");\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"18698831cbb263a1766ae047a5e0b96879925f25","commitMessage":"@@@Groovy-61 PROGRESS: Implemented a form of regular expressions for groovy that more naturally integrates with the current lexer and parser.  Regular expression matching can be done like:\n\nstring ~= regex string\n\nThis expression returns a java.util.regex.Matcher that you can then manipulate as you see fit.  This form:\n\nstring ~== regex string\n\nReturns a boolean based on whether string is fully matched by regex string.  Also implemented is asIterator for Matcher so that you can use it with closures:\n\n(\"cheesecheese\" ~= \"cheese\").each({x | println(x)})\n\nPrints two 'cheese' lines.  See the unit tests for more examples in RegularExpressionsTest.groovy.\n\nAlso within this change is a minor change to increase classloader support.  I think that James is going to redo that in the future anyway.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@332 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2003-11-29 14:56:15","modifiedFileCount":"10","status":"M","submitter":"Sam Pullara"},{"authorTime":"2005-09-13 03:51:26","codes":[{"authorDate":"2005-09-13 03:51:26","commitOrder":5,"curCode":"    public void testProperties() throws Exception {\n        ClassNode classNode =new ClassNode(Type.makeType(\"Foo\"), ACC_PUBLIC+ACC_SUPER, Type.OBJECT_TYPE);\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, Type.STRING_TYPE, Type.makeType(\"Foo\"), null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, Type.STRING_TYPE);\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2005-09-13 03:51:26","endLine":90,"groupId":"10918","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/58/0d92b35267a5159ac99e2a215a08d33ff7032c.src","preCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"java.lang.Object\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", \"Foo\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, \"java.lang.String\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2005-09-13 03:51:26","commitOrder":5,"curCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(Type.makeType(\"Foo\"), ACC_PUBLIC+ACC_SUPER, Type.makeType(\"org.codehaus.groovy.runtime.DummyBean\"));\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, Type.STRING_TYPE, Type.makeType(\"Foo\"), null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, Type.STRING_TYPE);\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2005-09-13 03:51:26","endLine":109,"groupId":"10918","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testInheritedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/58/0d92b35267a5159ac99e2a215a08d33ff7032c.src","preCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, \"org.codehaus.groovy.runtime.DummyBean\");\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, \"java.lang.String\", \"Foo\", null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, \"java.lang.String\");\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"0e621fdecf3e8ab9db2fe9eea10bae5d2dc4b695","commitMessage":"@@@This patch removes many string descriptons of types from the class generator and enfocres the usage of the class Type instead. A new interface is introduced for nodes which are possible variables\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2840 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2005-09-13 03:51:26","modifiedFileCount":"68","status":"M","submitter":"Jochen Theodorou"},{"authorTime":"2005-11-14 00:42:14","codes":[{"authorDate":"2005-11-14 00:42:14","commitOrder":6,"curCode":"    public void testProperties() throws Exception {\n        ClassNode classNode =new ClassNode(\"Foo\", ACC_PUBLIC+ACC_SUPER, ClassHelper.OBJECT_TYPE);\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2005-11-14 00:42:14","endLine":91,"groupId":"3439","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c8/31dd8bf4ca4b9ff4bdea85bbbaba153e9e23f0.src","preCode":"    public void testProperties() throws Exception {\n        ClassNode classNode =new ClassNode(Type.makeType(\"Foo\"), ACC_PUBLIC+ACC_SUPER, Type.OBJECT_TYPE);\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, Type.STRING_TYPE, Type.makeType(\"Foo\"), null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, Type.STRING_TYPE);\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2005-11-14 00:42:14","commitOrder":6,"curCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC+ACC_SUPER, ClassHelper.make(DummyBean.class));\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2005-11-14 00:42:14","endLine":110,"groupId":"3439","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testInheritedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c8/31dd8bf4ca4b9ff4bdea85bbbaba153e9e23f0.src","preCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(Type.makeType(\"Foo\"), ACC_PUBLIC+ACC_SUPER, Type.makeType(\"org.codehaus.groovy.runtime.DummyBean\"));\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, Type.STRING_TYPE, Type.makeType(\"Foo\"), null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, Type.STRING_TYPE);\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"6c3182f6fc7becd9aebc7c1b64d9005cba17eb39","commitMessage":"@@@this committ removes the class org.codehaus.groovy.ast.Type completely and transferes its functuanality to ClassNode and ClassHelper. A ClassNode can now be a primitive type or any other type created with an class file available. ClassNodes can now be primary.  which means they are the a result of a class definiton in a file - unlike a ClassNode created from a Class. All phases till actual class creation should work on ClassNode instead of Class. So all Class handling code in ACG is transformed to ahndle ClassNode instead. A ClassNode can contain a redirect now. This is used when multiple names point to the same ClassNode. This mechanism was used instead of a replacing like with the Type class. This was needed because all class resolving code is transfered into a single phase right after creation of the groovy ast and to avoid creation of huge amounts of code to replace a ClassNode in statements and expressions.\nThe Compiler is now able to enqueue source files. This means when ever a compiler phase found out it is necessary to compile another source file it can put this file into the compiler using the addSource method of CompilationUnit and leave the rest to the compiler. The compiler will then go back to the initialization phase and proceed to the goal phase ignoring all already handled files but  the new added file.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3104 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2005-11-14 00:42:14","modifiedFileCount":"82","status":"M","submitter":"Jochen Theodorou"},{"authorTime":"2007-12-24 17:18:06","codes":[{"authorDate":"2007-12-24 17:18:06","commitOrder":7,"curCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2007-12-24 17:18:06","endLine":90,"groupId":"3439","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/21/5713dc3e11c9208175597a8cfc525e0c856b64.src","preCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, ClassHelper.OBJECT_TYPE);\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2007-12-24 17:18:06","commitOrder":7,"curCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.make(DummyBean.class));\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2007-12-24 17:18:06","endLine":109,"groupId":"3439","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testInheritedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/21/5713dc3e11c9208175597a8cfc525e0c856b64.src","preCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, ClassHelper.make(DummyBean.class));\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"5be0d766dc7f5f7d331d97c93d73ba902968772a","commitMessage":"@@@GROOVY-1464: exclude synchronized as a modifier for interfaces and classes\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@9999 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2007-12-24 17:18:06","modifiedFileCount":"4","status":"M","submitter":"Paul King"},{"authorTime":"2007-12-25 09:32:58","codes":[{"authorDate":"2007-12-25 09:32:58","commitOrder":8,"curCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, ClassHelper.OBJECT_TYPE);\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2007-12-25 09:32:58","endLine":90,"groupId":"3439","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/e9/9c9c1a9ecb2271387be88bf1cc3507fe157e12.src","preCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.OBJECT_TYPE);\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2007-12-25 09:32:58","commitOrder":8,"curCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, ClassHelper.make(DummyBean.class));\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2007-12-25 09:32:58","endLine":109,"groupId":"3439","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testInheritedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/e9/9c9c1a9ecb2271387be88bf1cc3507fe157e12.src","preCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC, ClassHelper.make(DummyBean.class));\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"b981dc1247c96ebfe077162bd981664fdf722202","commitMessage":"@@@GROOVY-1464: additional checks on invalid modifiers (plus some refactoring of earlier changes for this issue)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@10007 a5544e8c-8a19-0410-ba12-f9af4593a198\n","date":"2007-12-25 09:32:58","modifiedFileCount":"5","status":"M","submitter":"Paul King"},{"authorTime":"2019-05-08 17:23:18","codes":[{"authorDate":"2019-05-08 17:23:18","commitOrder":9,"curCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, ClassHelper.OBJECT_TYPE);\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.getDeclaredConstructor().newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2019-05-08 18:17:02","endLine":58,"groupId":"10338","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"testProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/31/834cac901052f7289aa3cca973fd5b961dc35f.src","preCode":"    public void testProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, ClassHelper.OBJECT_TYPE);\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2019-05-08 17:23:18","commitOrder":9,"curCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, ClassHelper.make(DummyBean.class));\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.getDeclaredConstructor().newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","date":"2019-05-08 18:17:02","endLine":77,"groupId":"10338","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"testInheritedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/31/834cac901052f7289aa3cca973fd5b961dc35f.src","preCode":"    public void testInheritedProperties() throws Exception {\n        ClassNode classNode = new ClassNode(\"Foo\", ACC_PUBLIC + ACC_SUPER, ClassHelper.make(DummyBean.class));\n        classNode.addProperty(new PropertyNode(\"bar\", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));\n\n        Class fooClass = loadClass(classNode);\n        assertTrue(\"Loaded a new class\", fooClass != null);\n\n        Object bean = fooClass.newInstance();\n        assertTrue(\"Managed to create bean\", bean != null);\n\n        assertField(fooClass, \"bar\", 0, ClassHelper.STRING_TYPE);\n\n        assertGetProperty(bean, \"name\", \"James\");\n        assertSetProperty(bean, \"name\", \"Bob\");\n\n        assertGetProperty(bean, \"bar\", null);\n        assertSetProperty(bean, \"bar\", \"newValue\");\n    }\n","realPath":"src/test/org/codehaus/groovy/classgen/PropertyTest.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"29115fb7c9fe8eb19de7073b9133a5651686449e","commitMessage":"@@@minor refactor: avoid deprecated method usage\n","date":"2019-05-08 18:17:02","modifiedFileCount":"29","status":"M","submitter":"Paul King"}]
