[{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2012-03-31 06:56:00","commitOrder":2,"curCode":"    private void runCompiler(String[] commandLine) {\n     \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            PosixParser cliParser = new PosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\")) tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, false);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            if (failOnError) {\n                log(message, Project.MSG_INFO);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log(message, Project.MSG_ERR);\n            }\n        }\n    }\n","date":"2012-03-31 06:56:00","endLine":967,"groupId":"340","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/97/a9080c6240196f6acf8335c372c7fd16a933f6.src","preCode":"    private void runCompiler(String[] commandLine) {\n     \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            PosixParser cliParser = new PosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\")) tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, false);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            if (failOnError) {\n                log(message, Project.MSG_INFO);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log(message, Project.MSG_ERR);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":920,"status":"B"},{"authorDate":"2012-01-07 15:06:07","commitOrder":2,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"NB"}],"commitId":"322578724aac0b5d7a60e85313471e1046c766ba","commitMessage":"@@@merge from master\n","date":"2012-03-31 06:56:00","modifiedFileCount":"74","status":"M","submitter":"Paul King"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2012-11-29 17:53:16","commitOrder":3,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            PosixParser cliParser = new PosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, false);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2012-11-29 17:53:16","endLine":1065,"groupId":"340","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/2c/bd70f93d3f53a9a526a6d02b4dea6b0200d168.src","preCode":"    private void runCompiler(String[] commandLine) {\n     \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            PosixParser cliParser = new PosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\")) tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, false);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            if (failOnError) {\n                log(message, Project.MSG_INFO);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log(message, Project.MSG_ERR);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1017,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":3,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"3daa485e8e8bd31c921175948157e3e3ce49bf70","commitMessage":"@@@Merge remote-tracking branch 'remotes/upstream/master' into stc-refactor\n\nConflicts:\n\tsrc/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java\n","date":"2012-11-29 17:53:16","modifiedFileCount":"28","status":"M","submitter":"Cedric Champeau"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2012-12-17 06:47:13","commitOrder":4,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, false);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2012-12-17 06:51:35","endLine":1063,"groupId":"340","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/69/ab477d8d31e5bf1b6d29eaaf47518d2d60618f.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            PosixParser cliParser = new PosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, false);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1015,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":4,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"d1e5b5946b689cf78b61002c266a89a3106e8336","commitMessage":"@@@GROOVY-5191: Running script with '--enoding' param and some script parameters\n","date":"2012-12-17 06:51:35","modifiedFileCount":"4","status":"M","submitter":"Paul King"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2013-01-04 12:43:23","commitOrder":5,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, false);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2013-01-04 12:59:07","endLine":1072,"groupId":"340","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/11/2bfcb69349f513057f0dafab9fa880f7896085.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, false);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1019,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":5,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"47accbcdf4f94dceafba0c2701851f3e89f8cdbd","commitMessage":"@@@GROOVY-5877: Provide a flag for the groovyc ant task to control whether it searches the classpath for source files (prefactoring work to clean up some flags that weren't being set properly and a couple of typos)\n","date":"2013-01-04 12:59:07","modifiedFileCount":"1","status":"M","submitter":"Paul King"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2013-01-04 12:56:20","commitOrder":6,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2013-01-04 12:59:10","endLine":1103,"groupId":"6442","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/9b/59ea0f39e4047a9f85aaca347175078e72d523.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, false);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1050,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":6,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"9a5ec37a090a3b46fc3b4f3659624c46ca104a74","commitMessage":"@@@GROOVY-5877: Provide a flag for the groovyc ant task to control whether it searches the classpath for source files\n","date":"2013-01-04 12:59:10","modifiedFileCount":"2","status":"M","submitter":"Paul King"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2013-02-07 19:22:12","commitOrder":7,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyInternalPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2013-02-07 19:22:12","endLine":1128,"groupId":"6442","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/50/142238b9a1331df17396e2677179a9080d8f74.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1075,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":7,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"3e1261ccfdbb7c1253d8d2d6598a839c86d8cc48","commitMessage":"@@@Merge branch 'master' of https://github.com/groovy/groovy-core\n","date":"2013-02-07 19:22:12","modifiedFileCount":"11","status":"M","submitter":"aalmiray"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2014-05-06 05:26:21","commitOrder":8,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyInternalPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2014-05-06 05:26:21","endLine":1129,"groupId":"6442","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/0f/e4f549352f2ab8a1b67a37092809c9c47da91b.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyInternalPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.info(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1076,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":8,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"d685a246218dfdbd4f1b399a16563228f1d2a0e6","commitMessage":"@@@Merge pull request #409 from lujke/groovyc_q_flag_reporting\n\nMake groovyc log build failure at the error level with failOnError ","date":"2014-05-06 05:26:21","modifiedFileCount":"1","status":"M","submitter":"Paul King"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2015-06-07 20:54:59","commitOrder":9,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2015-06-07 20:54:59","endLine":1190,"groupId":"6442","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/e9/56c90092ef01171bdcc826368c183ea18e450a.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new GroovyInternalPosixParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1137,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":9,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"2740896d3d4acbec63c399a7e6f28142964c5091","commitMessage":"@@@refactor: replace GroovyInternalPosixParser with DefaultParser\n","date":"2015-06-07 20:54:59","modifiedFileCount":"4","status":"M","submitter":"Paul King"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2016-04-23 11:41:31","commitOrder":10,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2016-04-23 11:41:31","endLine":1223,"groupId":"8065","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/2e/8faaf5c75e30cf044db54cbeba1977b05bb8e6.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors && !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1170,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":10,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"6f2a09585f6469623560ca52b50b058903f4b71f","commitMessage":"@@@GROOVY-7827: Allow groovyc ant task to select all available target bytecode versions (minor tweaks to PR#307)\n","date":"2016-04-23 11:41:31","modifiedFileCount":"1","status":"M","submitter":"paulk"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2017-08-23 17:07:24","commitOrder":11,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n              GroovyClassLoader loader = buildClassLoaderFor();\n              try {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);\n              } finally {\n                if (loader != null)\n                  loader.close();\n              }\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2017-09-14 08:13:13","endLine":1229,"groupId":"0","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/4d/4ffb22f86f14dbb921ba4309ae225f15e5253f.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(), filenames, forceLookupUnnamedFiles);\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1170,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":11,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"4e3ee3cb0ebdc11b5bbfef5be9040b28593463f9","commitMessage":"@@@Groovyc did not correctly release resources hold by GroovyClassLoader.\n","date":"2017-09-14 08:13:13","modifiedFileCount":"1","status":"M","submitter":"Marcus Berndt"},{"authorTime":"2012-01-07 15:06:07","codes":[{"authorDate":"2017-08-25 14:17:49","commitOrder":12,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                try (GroovyClassLoader loader = buildClassLoaderFor()) {\n                    FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);\n                }\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2017-09-14 08:13:44","endLine":1225,"groupId":"6442","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/d6/9dcb477be3309ba121a322c5a1139a389e5f8b.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n              GroovyClassLoader loader = buildClassLoaderFor();\n              try {\n                FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);\n              } finally {\n                if (loader != null)\n                  loader.close();\n              }\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1170,"status":"M"},{"authorDate":"2012-01-07 15:06:07","commitOrder":12,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2012-01-07 15:06:07","endLine":166,"groupId":"3994","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/4fdb419e9186b3fb260bbc2db1c27f8f5b4ad3.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"abfde7ef53d5d2185a53e5d43c16214691f0266e","commitMessage":"@@@Closing the GroovyClassLoader is now realized by\ntry-with-resources. (closes #595)\n\nOld Methode makeCompileUnit is added for API compatibility and marked as deprecated.\n","date":"2017-09-14 08:13:44","modifiedFileCount":"1","status":"M","submitter":"Marcus Berndt"},{"authorTime":"2018-01-05 12:29:21","codes":[{"authorDate":"2018-01-05 12:29:21","commitOrder":13,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                try (GroovyClassLoader loader = buildClassLoaderFor()) {\n                    FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);\n                }\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            Writer writer = new StringBuilderWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2018-01-05 12:29:21","endLine":1239,"groupId":"6442","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/58/cd3e779f5f9a10c00c4bce09242259d70a15c7.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                try (GroovyClassLoader loader = buildClassLoaderFor()) {\n                    FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);\n                }\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            StringWriter writer = new StringWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1184,"status":"M"},{"authorDate":"2018-01-05 12:29:21","commitOrder":13,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        Writer writer = new StringBuilderWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2018-01-05 12:29:21","endLine":174,"groupId":"3994","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/e7/e90250ea149ba48ecb47dcbfc43de57e8fdf18.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        StringWriter writer = new StringWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"3d4ab7122f9c2c0ee7066c2d9811838202df3280","commitMessage":"@@@Use `StringBuilderWriter` instead\n","date":"2018-01-05 12:29:21","modifiedFileCount":"22","status":"M","submitter":"sunlan"},{"authorTime":"2018-01-05 12:29:21","codes":[{"authorDate":"2018-05-06 15:21:17","commitOrder":14,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            FileSystemCompiler.CompilationOptions options = new FileSystemCompiler.CompilationOptions();\n            CommandLine parser = FileSystemCompiler.configureParser(options);\n            parser.parseArgs(commandLine);\n            configuration = options.toCompilerConfiguration();\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = options.generateFileNames();\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                try (GroovyClassLoader loader = buildClassLoaderFor()) {\n                    FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);\n                }\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            Writer writer = new StringBuilderWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2018-05-17 18:42:47","endLine":1230,"groupId":"8998","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/7a/60ac8e9a596969ec4a2b0a9aebc56f881ac809.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            Options options = FileSystemCompiler.createCompilationOptions();\n\n            CommandLineParser cliParser = new DefaultParser();\n\n            CommandLine cli;\n            cli = cliParser.parse(options, commandLine);\n\n            configuration = FileSystemCompiler.generateCompilerConfigurationFromOptions(cli);\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = FileSystemCompiler.generateFileNamesFromOptions(cli);\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                try (GroovyClassLoader loader = buildClassLoaderFor()) {\n                    FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);\n                }\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            Writer writer = new StringBuilderWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1179,"status":"M"},{"authorDate":"2018-01-05 12:29:21","commitOrder":14,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        Writer writer = new StringBuilderWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2018-01-05 12:29:21","endLine":174,"groupId":"3994","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/e7/e90250ea149ba48ecb47dcbfc43de57e8fdf18.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        Writer writer = new StringBuilderWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"96bac63a3176160090d4ca2f87a4cbf0c9b978ea","commitMessage":"@@@GROOVY-8567 Migrate Groovyc to picocli\n","date":"2018-05-17 18:42:47","modifiedFileCount":"2","status":"M","submitter":"Remko Popma"},{"authorTime":"2018-01-05 12:29:21","codes":[{"authorDate":"2019-11-12 02:46:38","commitOrder":15,"curCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            FileSystemCompiler.CompilationOptions options = new FileSystemCompiler.CompilationOptions();\n            CommandLine parser = FileSystemCompiler.configureParser(options);\n            parser.parseArgs(commandLine);\n            configuration = options.toCompilerConfiguration();\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            \r\n            String[] fileNames = options.generateFileNames();\n            boolean fileNameErrors = (fileNames == null || !FileSystemCompiler.validateFiles(fileNames));\n            if (!fileNameErrors) {\n                try (GroovyClassLoader loader = buildClassLoaderFor()) {\n                    FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), fileNames, forceLookupUnnamedFiles);\n                }\n            }\n        } catch (Exception e) {\n            Throwable t = e;\n            if (e.getClass() == RuntimeException.class && e.getCause() != null) {\n                \r\n                t = e.getCause();\n            }\n            Writer writer = new StringBuilderWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","date":"2019-11-12 03:41:46","endLine":1243,"groupId":"107","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"runCompiler","params":"(String[]commandLine)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/a7/d41af036dfb41770e0f0071ee758dc67b5ee33.src","preCode":"    private void runCompiler(String[] commandLine) {\n        \r\n        try {\n            FileSystemCompiler.CompilationOptions options = new FileSystemCompiler.CompilationOptions();\n            CommandLine parser = FileSystemCompiler.configureParser(options);\n            parser.parseArgs(commandLine);\n            configuration = options.toCompilerConfiguration();\n            configuration.setScriptExtensions(getScriptExtensions());\n            String tmpExtension = getScriptExtension();\n            if (tmpExtension.startsWith(\"*.\"))\n                tmpExtension = tmpExtension.substring(1);\n            configuration.setDefaultScriptExtension(tmpExtension);\n\n            \r\n            String[] filenames = options.generateFileNames();\n            boolean fileNameErrors = filenames == null;\n\n            fileNameErrors = fileNameErrors || !FileSystemCompiler.validateFiles(filenames);\n\n            if (targetBytecode != null) {\n                configuration.setTargetBytecode(targetBytecode);\n            }\n\n            if (!fileNameErrors) {\n                try (GroovyClassLoader loader = buildClassLoaderFor()) {\n                    FileSystemCompiler.doCompilation(configuration, makeCompileUnit(loader), filenames, forceLookupUnnamedFiles);\n                }\n            }\n\n        } catch (Exception re) {\n            Throwable t = re;\n            if ((re.getClass() == RuntimeException.class) && (re.getCause() != null)) {\n                \r\n                t = re.getCause();\n            }\n            Writer writer = new StringBuilderWriter();\n            new ErrorReporter(t, false).write(new PrintWriter(writer));\n            String message = writer.toString();\n\n            taskSuccess = false;\n            if (errorProperty != null) {\n                getProject().setNewProperty(errorProperty, \"true\");\n            }\n\n            if (failOnError) {\n                log.error(message);\n                throw new BuildException(\"Compilation Failed\", t, getLocation());\n            } else {\n                log.error(message);\n            }\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovyc.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"M"},{"authorDate":"2018-01-05 12:29:21","commitOrder":15,"curCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        Writer writer = new StringBuilderWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","date":"2018-01-05 12:29:21","endLine":174,"groupId":"107","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"handleException","params":"(finalExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/e7/e90250ea149ba48ecb47dcbfc43de57e8fdf18.src","preCode":"    protected void handleException(final Exception e) throws BuildException {\n        assert e != null;\n        \n        Writer writer = new StringBuilderWriter();\n        new ErrorReporter(e, false).write(new PrintWriter(writer));\n        String message = writer.toString();\n\n        if (failOnError) {\n            throw new BuildException(message, e, getLocation());\n        }\n        else {\n            log.error(message);\n        }\n    }\n","realPath":"subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/CompileTaskSupport.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"81d8ac64923b9d514b3c49295a7f28241bbb46d4","commitMessage":"@@@minor edits","date":"2019-11-12 03:41:46","modifiedFileCount":"3","status":"M","submitter":"Eric Milles"}]
