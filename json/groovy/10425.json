[{"authorTime":"2019-05-19 17:04:42","codes":[{"authorDate":"2019-05-19 17:04:42","commitOrder":1,"curCode":"    private static void wrapSetterMethod(ClassNode classNode, boolean bindable, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(\"set\" + capitalize(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            Expression proposedValue = varX(setter.getParameters()[0].getName());\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"fireVetoableChange\", args(\n                    constX(propertyName), oldValue, proposedValue))));\n\n            \r\n            block.addStatement(code);\n\n            if (bindable) {\n                \r\n                block.addStatement(declS(newValue, callThisX(getterName)));\n\n                \r\n                block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n            }\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","date":"2019-05-19 17:04:42","endLine":203,"groupId":"10079","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"wrapSetterMethod","params":"(ClassNodeclassNode@booleanbindable@StringpropertyName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/31/5c01476b79bb931b70c53cfa93d3d1bc8c5088.src","preCode":"    private static void wrapSetterMethod(ClassNode classNode, boolean bindable, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(\"set\" + capitalize(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            Expression proposedValue = varX(setter.getParameters()[0].getName());\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"fireVetoableChange\", args(\n                    constX(propertyName), oldValue, proposedValue))));\n\n            \r\n            block.addStatement(code);\n\n            if (bindable) {\n                \r\n                block.addStatement(declS(newValue, callThisX(getterName)));\n\n                \r\n                block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n            }\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","realPath":"src/main/java/groovy/beans/VetoableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"},{"authorDate":"2019-05-19 17:04:42","commitOrder":1,"curCode":"    private static void wrapSetterMethod(ClassNode classNode, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(\"set\" + capitalize(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(code);\n\n            \r\n            block.addStatement(declS(newValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","date":"2019-05-19 17:04:42","endLine":212,"groupId":"8891","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"wrapSetterMethod","params":"(ClassNodeclassNode@StringpropertyName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/60/474f9470f816240f3fd9732c74dda5b16667ad.src","preCode":"    private static void wrapSetterMethod(ClassNode classNode, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(\"set\" + capitalize(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(code);\n\n            \r\n            block.addStatement(declS(newValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","realPath":"src/main/java/groovy/beans/BindableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"86f5c8216b5d0f042408bdc4ae5d6a7baa247c95","commitMessage":"@@@move some java files from src/main/groovy to src/main/java and fix up some Javadoc assertion tests that weren't running\n","date":"2019-05-19 17:04:42","modifiedFileCount":"0","status":"B","submitter":"Paul King"},{"authorTime":"2020-06-15 16:14:02","codes":[{"authorDate":"2020-06-15 16:14:02","commitOrder":2,"curCode":"    private static void wrapSetterMethod(ClassNode classNode, boolean bindable, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(getSetterName(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            Expression proposedValue = varX(setter.getParameters()[0].getName());\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"fireVetoableChange\", args(\n                    constX(propertyName), oldValue, proposedValue))));\n\n            \r\n            block.addStatement(code);\n\n            if (bindable) {\n                \r\n                block.addStatement(declS(newValue, callThisX(getterName)));\n\n                \r\n                block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n            }\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","date":"2020-06-15 16:14:02","endLine":193,"groupId":"10079","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"wrapSetterMethod","params":"(ClassNodeclassNode@booleanbindable@StringpropertyName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/32/e3854b4304d6c8feba8b9fe5a891c40c9a478f.src","preCode":"    private static void wrapSetterMethod(ClassNode classNode, boolean bindable, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(\"set\" + capitalize(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            Expression proposedValue = varX(setter.getParameters()[0].getName());\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"fireVetoableChange\", args(\n                    constX(propertyName), oldValue, proposedValue))));\n\n            \r\n            block.addStatement(code);\n\n            if (bindable) {\n                \r\n                block.addStatement(declS(newValue, callThisX(getterName)));\n\n                \r\n                block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n            }\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","realPath":"src/main/java/groovy/beans/VetoableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2020-06-15 16:14:02","commitOrder":2,"curCode":"    private static void wrapSetterMethod(ClassNode classNode, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(getSetterName(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(code);\n\n            \r\n            block.addStatement(declS(newValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","date":"2020-06-15 16:14:02","endLine":202,"groupId":"8891","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"wrapSetterMethod","params":"(ClassNodeclassNode@StringpropertyName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/f2/0dbc11e881a05672c8c66a56aa14d26626a149.src","preCode":"    private static void wrapSetterMethod(ClassNode classNode, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(\"set\" + capitalize(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(code);\n\n            \r\n            block.addStatement(declS(newValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","realPath":"src/main/java/groovy/beans/BindableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"0e36e803f4e89a18b805fb709819fa54104aecc0","commitMessage":"@@@minor refactor: eliminate dup code for getting setter name\n","date":"2020-06-15 16:14:02","modifiedFileCount":"13","status":"M","submitter":"Paul King"},{"authorTime":"2020-09-16 12:40:10","codes":[{"authorDate":"2020-09-16 12:40:10","commitOrder":3,"curCode":"    private static void wrapSetterMethod(ClassNode classNode, boolean bindable, PropertyNode propertyNode) {\n        String getterName = propertyNode.getGetterName();\n        String propertyName = propertyNode.getName();\n        MethodNode setter = classNode.getSetterMethod(propertyNode.getSetterName());\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            Expression proposedValue = varX(setter.getParameters()[0].getName());\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"fireVetoableChange\", args(\n                    constX(propertyName), oldValue, proposedValue))));\n\n            \r\n            block.addStatement(code);\n\n            if (bindable) {\n                \r\n                block.addStatement(declS(newValue, callThisX(getterName)));\n\n                \r\n                block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n            }\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","date":"2020-09-20 12:05:32","endLine":192,"groupId":"10079","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"wrapSetterMethod","params":"(ClassNodeclassNode@booleanbindable@PropertyNodepropertyNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/7b/531dced434f1c42f4e2cca0594677c93f74d89.src","preCode":"    private static void wrapSetterMethod(ClassNode classNode, boolean bindable, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(getSetterName(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            Expression proposedValue = varX(setter.getParameters()[0].getName());\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"fireVetoableChange\", args(\n                    constX(propertyName), oldValue, proposedValue))));\n\n            \r\n            block.addStatement(code);\n\n            if (bindable) {\n                \r\n                block.addStatement(declS(newValue, callThisX(getterName)));\n\n                \r\n                block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n            }\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","realPath":"src/main/java/groovy/beans/VetoableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2020-09-16 12:40:10","commitOrder":3,"curCode":"    private static void wrapSetterMethod(ClassNode classNode, PropertyNode propertyNode) {\n        String getterName = propertyNode.getGetterName();\n        MethodNode setter = classNode.getSetterMethod(propertyNode.getSetterName());\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(code);\n\n            \r\n            block.addStatement(declS(newValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyNode.getName()), oldValue, newValue))));\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","date":"2020-09-20 12:05:32","endLine":200,"groupId":"10347","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"wrapSetterMethod","params":"(ClassNodeclassNode@PropertyNodepropertyNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/c0/e863d2afb489210d201b79723867f31f4b0657.src","preCode":"    private static void wrapSetterMethod(ClassNode classNode, String propertyName) {\n        String getterName = \"get\" + capitalize(propertyName);\n        MethodNode setter = classNode.getSetterMethod(getSetterName(propertyName));\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(code);\n\n            \r\n            block.addStatement(declS(newValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","realPath":"src/main/java/groovy/beans/BindableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"3c02115abd414f865d31e7dc146becf94c7310e5","commitMessage":"@@@GROOVY-9744: PropertyNode should be enriched to support getter/setter names (closes #1370)\n","date":"2020-09-20 12:05:32","modifiedFileCount":"12","status":"M","submitter":"Paul King"},{"authorTime":"2020-09-22 13:05:50","codes":[{"authorDate":"2020-09-22 13:05:50","commitOrder":4,"curCode":"    private static void wrapSetterMethod(ClassNode classNode, boolean bindable, PropertyNode propertyNode) {\n        String getterName = propertyNode.getGetterNameOrDefault();\n        String propertyName = propertyNode.getName();\n        MethodNode setter = classNode.getSetterMethod(propertyNode.getSetterNameOrDefault());\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            Expression proposedValue = varX(setter.getParameters()[0].getName());\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"fireVetoableChange\", args(\n                    constX(propertyName), oldValue, proposedValue))));\n\n            \r\n            block.addStatement(code);\n\n            if (bindable) {\n                \r\n                block.addStatement(declS(newValue, callThisX(getterName)));\n\n                \r\n                block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n            }\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","date":"2020-09-22 13:06:14","endLine":192,"groupId":"10425","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"wrapSetterMethod","params":"(ClassNodeclassNode@booleanbindable@PropertyNodepropertyNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/b8/15bae53d97bd342c66cfce9dd3c98b41a8ecbc.src","preCode":"    private static void wrapSetterMethod(ClassNode classNode, boolean bindable, PropertyNode propertyNode) {\n        String getterName = propertyNode.getGetterName();\n        String propertyName = propertyNode.getName();\n        MethodNode setter = classNode.getSetterMethod(propertyNode.getSetterName());\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            Expression proposedValue = varX(setter.getParameters()[0].getName());\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"fireVetoableChange\", args(\n                    constX(propertyName), oldValue, proposedValue))));\n\n            \r\n            block.addStatement(code);\n\n            if (bindable) {\n                \r\n                block.addStatement(declS(newValue, callThisX(getterName)));\n\n                \r\n                block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyName), oldValue, newValue))));\n            }\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","realPath":"src/main/java/groovy/beans/VetoableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2020-09-22 13:05:50","commitOrder":4,"curCode":"    private static void wrapSetterMethod(ClassNode classNode, PropertyNode propertyNode) {\n        String getterName = propertyNode.getGetterNameOrDefault();\n        MethodNode setter = classNode.getSetterMethod(propertyNode.getSetterNameOrDefault());\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(code);\n\n            \r\n            block.addStatement(declS(newValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyNode.getName()), oldValue, newValue))));\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","date":"2020-09-22 13:06:14","endLine":200,"groupId":"10425","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"wrapSetterMethod","params":"(ClassNodeclassNode@PropertyNodepropertyNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-groovy-10-0.7/blobInfo/CC_OUT/blobs/e1/9abfed079bd84e789d71def4cfb7f47d94216d.src","preCode":"    private static void wrapSetterMethod(ClassNode classNode, PropertyNode propertyNode) {\n        String getterName = propertyNode.getGetterName();\n        MethodNode setter = classNode.getSetterMethod(propertyNode.getSetterName());\n\n        if (setter != null) {\n            \r\n            Statement code = setter.getCode();\n\n            Expression oldValue = localVarX(\"$oldValue\");\n            Expression newValue = localVarX(\"$newValue\");\n            BlockStatement block = new BlockStatement();\n\n            \r\n            block.addStatement(declS(oldValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(code);\n\n            \r\n            block.addStatement(declS(newValue, callThisX(getterName)));\n\n            \r\n            block.addStatement(stmt(callThisX(\"firePropertyChange\", args(constX(propertyNode.getName()), oldValue, newValue))));\n\n            \r\n            setter.setCode(block);\n        }\n    }\n","realPath":"src/main/java/groovy/beans/BindableASTTransformation.java","repoName":"groovy","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"360fbc532e4412fd4802dc4e07a3ca885ef83a54","commitMessage":"@@@GROOVY-9744: additional refactoring\n","date":"2020-09-22 13:06:14","modifiedFileCount":"9","status":"M","submitter":"Paul King"}]
