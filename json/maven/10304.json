[{"authorTime":"2010-04-18 19:36:37","codes":[{"authorDate":"2009-11-11 23:46:56","commitOrder":2,"curCode":"    private void injectSession( ArtifactResolutionRequest request )\n    {\n        MavenSession session = legacySupport.getSession();\n\n        if ( session != null )\n        {\n            request.setOffline( session.isOffline() );\n            request.setServers( session.getRequest().getServers() );\n            request.setMirrors( session.getRequest().getMirrors() );\n            request.setProxies( session.getRequest().getProxies() );\n            request.setTransferListener( session.getRequest().getTransferListener() );\n        }\n    }\n","date":"2009-11-11 23:46:56","endLine":87,"groupId":"3360","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"injectSession","params":"(ArtifactResolutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/95/f9b76588318081e324cc0028b35f4796256ef0.src","preCode":"    private void injectSession( ArtifactResolutionRequest request )\n    {\n        MavenSession session = legacySupport.getSession();\n\n        if ( session != null )\n        {\n            request.setOffline( session.isOffline() );\n            request.setServers( session.getRequest().getServers() );\n            request.setMirrors( session.getRequest().getMirrors() );\n            request.setProxies( session.getRequest().getProxies() );\n            request.setTransferListener( session.getRequest().getTransferListener() );\n        }\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"NB"},{"authorDate":"2010-04-18 19:36:37","commitOrder":2,"curCode":"    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,\n                                       Collection<String> scopesToResolve, MavenSession session,\n                                       Set<String> projectIds )\n        throws ArtifactResolutionException, ArtifactNotFoundException\n    {\n        Set<Artifact> resolved = new LinkedHashSet<Artifact>();\n\n        if ( projects == null || projects.isEmpty() )\n        {\n            return resolved;\n        }\n\n        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() ) &&\n            ( scopesToResolve == null || scopesToResolve.isEmpty() ) )\n        {\n            return resolved;\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter( scopesToResolve );\n\n        CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter( scopesToCollect );\n        collectionScopeFilter = new CumulativeScopeArtifactFilter( collectionScopeFilter, resolutionScopeFilter );\n\n        ArtifactResolutionRequest request =\n            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true ).setCollectionFilter(\n                collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter ).setLocalRepository(\n                session.getLocalRepository() ).setOffline( session.isOffline() ).setForceUpdate(\n                session.getRequest().isUpdateSnapshots() ).setCache( session.getRepositoryCache() );\n        request.setTransferListener( session.getRequest().getTransferListener() );\n        request.setServers( session.getRequest().getServers() );\n        request.setMirrors( session.getRequest().getMirrors() );\n        request.setProxies( session.getRequest().getProxies() );\n\n        for ( MavenProject project : projects )\n        {\n            request.setArtifact( new ProjectArtifact( project ) );\n            request.setArtifactDependencies( project.getDependencyArtifacts() );\n            request.setManagedVersionMap( project.getManagedVersionMap() );\n            request.setRemoteRepositories( project.getRemoteArtifactRepositories() );\n\n            ArtifactResolutionResult result = repositorySystem.resolve( request );\n\n            try\n            {\n                resolutionErrorHandler.throwErrors( request, result );\n            }\n            catch ( MultipleArtifactsNotFoundException e )\n            {\n\n                Collection<Artifact> missing = new HashSet<Artifact>( e.getMissingArtifacts() );\n\n                for ( Iterator<Artifact> it = missing.iterator(); it.hasNext(); )\n                {\n                    String key = ArtifactUtils.key( it.next() );\n                    if ( projectIds.contains( key ) )\n                    {\n                        it.remove();\n                    }\n                }\n\n                if ( !missing.isEmpty() )\n                {\n                    throw e;\n                }\n            }\n\n            resolved.addAll( result.getArtifacts() );\n        }\n\n        return resolved;\n    }\n","date":"2010-04-18 19:36:37","endLine":189,"groupId":"1842","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveImpl","params":"(Collection<?extendsMavenProject>projects@Collection<String>scopesToCollect@Collection<String>scopesToResolve@MavenSessionsession@Set<String>projectIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/37/a42329a6df67e102a9c28ae6c3d300119a5beb.src","preCode":"    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,\n                                       Collection<String> scopesToResolve, MavenSession session,\n                                       Set<String> projectIds )\n        throws ArtifactResolutionException, ArtifactNotFoundException\n    {\n        Set<Artifact> resolved = new LinkedHashSet<Artifact>();\n\n        if ( projects == null || projects.isEmpty() )\n        {\n            return resolved;\n        }\n\n        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() ) &&\n            ( scopesToResolve == null || scopesToResolve.isEmpty() ) )\n        {\n            return resolved;\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter( scopesToResolve );\n\n        CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter( scopesToCollect );\n        collectionScopeFilter = new CumulativeScopeArtifactFilter( collectionScopeFilter, resolutionScopeFilter );\n\n        ArtifactResolutionRequest request =\n            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true ).setCollectionFilter(\n                collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter ).setLocalRepository(\n                session.getLocalRepository() ).setOffline( session.isOffline() ).setForceUpdate(\n                session.getRequest().isUpdateSnapshots() ).setCache( session.getRepositoryCache() );\n        request.setTransferListener( session.getRequest().getTransferListener() );\n        request.setServers( session.getRequest().getServers() );\n        request.setMirrors( session.getRequest().getMirrors() );\n        request.setProxies( session.getRequest().getProxies() );\n\n        for ( MavenProject project : projects )\n        {\n            request.setArtifact( new ProjectArtifact( project ) );\n            request.setArtifactDependencies( project.getDependencyArtifacts() );\n            request.setManagedVersionMap( project.getManagedVersionMap() );\n            request.setRemoteRepositories( project.getRemoteArtifactRepositories() );\n\n            ArtifactResolutionResult result = repositorySystem.resolve( request );\n\n            try\n            {\n                resolutionErrorHandler.throwErrors( request, result );\n            }\n            catch ( MultipleArtifactsNotFoundException e )\n            {\n\n                Collection<Artifact> missing = new HashSet<Artifact>( e.getMissingArtifacts() );\n\n                for ( Iterator<Artifact> it = missing.iterator(); it.hasNext(); )\n                {\n                    String key = ArtifactUtils.key( it.next() );\n                    if ( projectIds.contains( key ) )\n                    {\n                        it.remove();\n                    }\n                }\n\n                if ( !missing.isEmpty() )\n                {\n                    throw e;\n                }\n            }\n\n            resolved.addAll( result.getArtifacts() );\n        }\n\n        return resolved;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"69c68d06c53ec9c35265e4c0140bf6714874a9ae","commitMessage":"@@@[MNG-4633] Reactor artifact resolution in weave mode\n\nResolves artifacts from within reactor build.\nNo longer requires artifacts to be present in local repository before building weave mode ;)\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@935334 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-04-18 19:36:37","modifiedFileCount":"12","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2010-04-18 19:36:37","codes":[{"authorDate":"2010-05-18 23:49:14","commitOrder":3,"curCode":"    private void injectSession( ArtifactResolutionRequest request )\n    {\n        MavenSession session = legacySupport.getSession();\n\n        if ( session != null )\n        {\n            request.setOffline( session.isOffline() );\n            request.setForceUpdate( session.getRequest().isUpdateSnapshots() );\n            request.setServers( session.getRequest().getServers() );\n            request.setMirrors( session.getRequest().getMirrors() );\n            request.setProxies( session.getRequest().getProxies() );\n            request.setTransferListener( session.getRequest().getTransferListener() );\n        }\n    }\n","date":"2010-05-18 23:49:14","endLine":88,"groupId":"3360","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"injectSession","params":"(ArtifactResolutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0c/c4d29095f870cdb5c4d6819c20f08693636766.src","preCode":"    private void injectSession( ArtifactResolutionRequest request )\n    {\n        MavenSession session = legacySupport.getSession();\n\n        if ( session != null )\n        {\n            request.setOffline( session.isOffline() );\n            request.setServers( session.getRequest().getServers() );\n            request.setMirrors( session.getRequest().getMirrors() );\n            request.setProxies( session.getRequest().getProxies() );\n            request.setTransferListener( session.getRequest().getTransferListener() );\n        }\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2010-04-18 19:36:37","commitOrder":3,"curCode":"    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,\n                                       Collection<String> scopesToResolve, MavenSession session,\n                                       Set<String> projectIds )\n        throws ArtifactResolutionException, ArtifactNotFoundException\n    {\n        Set<Artifact> resolved = new LinkedHashSet<Artifact>();\n\n        if ( projects == null || projects.isEmpty() )\n        {\n            return resolved;\n        }\n\n        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() ) &&\n            ( scopesToResolve == null || scopesToResolve.isEmpty() ) )\n        {\n            return resolved;\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter( scopesToResolve );\n\n        CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter( scopesToCollect );\n        collectionScopeFilter = new CumulativeScopeArtifactFilter( collectionScopeFilter, resolutionScopeFilter );\n\n        ArtifactResolutionRequest request =\n            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true ).setCollectionFilter(\n                collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter ).setLocalRepository(\n                session.getLocalRepository() ).setOffline( session.isOffline() ).setForceUpdate(\n                session.getRequest().isUpdateSnapshots() ).setCache( session.getRepositoryCache() );\n        request.setTransferListener( session.getRequest().getTransferListener() );\n        request.setServers( session.getRequest().getServers() );\n        request.setMirrors( session.getRequest().getMirrors() );\n        request.setProxies( session.getRequest().getProxies() );\n\n        for ( MavenProject project : projects )\n        {\n            request.setArtifact( new ProjectArtifact( project ) );\n            request.setArtifactDependencies( project.getDependencyArtifacts() );\n            request.setManagedVersionMap( project.getManagedVersionMap() );\n            request.setRemoteRepositories( project.getRemoteArtifactRepositories() );\n\n            ArtifactResolutionResult result = repositorySystem.resolve( request );\n\n            try\n            {\n                resolutionErrorHandler.throwErrors( request, result );\n            }\n            catch ( MultipleArtifactsNotFoundException e )\n            {\n\n                Collection<Artifact> missing = new HashSet<Artifact>( e.getMissingArtifacts() );\n\n                for ( Iterator<Artifact> it = missing.iterator(); it.hasNext(); )\n                {\n                    String key = ArtifactUtils.key( it.next() );\n                    if ( projectIds.contains( key ) )\n                    {\n                        it.remove();\n                    }\n                }\n\n                if ( !missing.isEmpty() )\n                {\n                    throw e;\n                }\n            }\n\n            resolved.addAll( result.getArtifacts() );\n        }\n\n        return resolved;\n    }\n","date":"2010-04-18 19:36:37","endLine":189,"groupId":"1842","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveImpl","params":"(Collection<?extendsMavenProject>projects@Collection<String>scopesToCollect@Collection<String>scopesToResolve@MavenSessionsession@Set<String>projectIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/37/a42329a6df67e102a9c28ae6c3d300119a5beb.src","preCode":"    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,\n                                       Collection<String> scopesToResolve, MavenSession session,\n                                       Set<String> projectIds )\n        throws ArtifactResolutionException, ArtifactNotFoundException\n    {\n        Set<Artifact> resolved = new LinkedHashSet<Artifact>();\n\n        if ( projects == null || projects.isEmpty() )\n        {\n            return resolved;\n        }\n\n        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() ) &&\n            ( scopesToResolve == null || scopesToResolve.isEmpty() ) )\n        {\n            return resolved;\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter( scopesToResolve );\n\n        CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter( scopesToCollect );\n        collectionScopeFilter = new CumulativeScopeArtifactFilter( collectionScopeFilter, resolutionScopeFilter );\n\n        ArtifactResolutionRequest request =\n            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true ).setCollectionFilter(\n                collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter ).setLocalRepository(\n                session.getLocalRepository() ).setOffline( session.isOffline() ).setForceUpdate(\n                session.getRequest().isUpdateSnapshots() ).setCache( session.getRepositoryCache() );\n        request.setTransferListener( session.getRequest().getTransferListener() );\n        request.setServers( session.getRequest().getServers() );\n        request.setMirrors( session.getRequest().getMirrors() );\n        request.setProxies( session.getRequest().getProxies() );\n\n        for ( MavenProject project : projects )\n        {\n            request.setArtifact( new ProjectArtifact( project ) );\n            request.setArtifactDependencies( project.getDependencyArtifacts() );\n            request.setManagedVersionMap( project.getManagedVersionMap() );\n            request.setRemoteRepositories( project.getRemoteArtifactRepositories() );\n\n            ArtifactResolutionResult result = repositorySystem.resolve( request );\n\n            try\n            {\n                resolutionErrorHandler.throwErrors( request, result );\n            }\n            catch ( MultipleArtifactsNotFoundException e )\n            {\n\n                Collection<Artifact> missing = new HashSet<Artifact>( e.getMissingArtifacts() );\n\n                for ( Iterator<Artifact> it = missing.iterator(); it.hasNext(); )\n                {\n                    String key = ArtifactUtils.key( it.next() );\n                    if ( projectIds.contains( key ) )\n                    {\n                        it.remove();\n                    }\n                }\n\n                if ( !missing.isEmpty() )\n                {\n                    throw e;\n                }\n            }\n\n            resolved.addAll( result.getArtifacts() );\n        }\n\n        return resolved;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"40028e7a188f165149af5dca73de72b8342a47ec","commitMessage":"@@@[MNG-4679] [regression] command line option \"-update-snapshots\" does not work for dependency:copy-dependencies\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@945715 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-18 23:49:14","modifiedFileCount":"2","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2010-08-25 06:46:07","codes":[{"authorDate":"2010-08-25 06:46:07","commitOrder":4,"curCode":"    private void injectSession( ArtifactResolutionRequest request )\n    {\n        MavenSession session = legacySupport.getSession();\n\n        if ( session != null )\n        {\n            request.setOffline( session.isOffline() );\n            request.setForceUpdate( session.getRequest().isUpdateSnapshots() );\n            request.setServers( session.getRequest().getServers() );\n            request.setMirrors( session.getRequest().getMirrors() );\n            request.setProxies( session.getRequest().getProxies() );\n        }\n    }\n","date":"2010-08-25 06:46:07","endLine":87,"groupId":"3360","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"injectSession","params":"(ArtifactResolutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/65/1d46e8cea3a899bb949eedfcc69efd2985b2db.src","preCode":"    private void injectSession( ArtifactResolutionRequest request )\n    {\n        MavenSession session = legacySupport.getSession();\n\n        if ( session != null )\n        {\n            request.setOffline( session.isOffline() );\n            request.setForceUpdate( session.getRequest().isUpdateSnapshots() );\n            request.setServers( session.getRequest().getServers() );\n            request.setMirrors( session.getRequest().getMirrors() );\n            request.setProxies( session.getRequest().getProxies() );\n            request.setTransferListener( session.getRequest().getTransferListener() );\n        }\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2010-08-25 06:46:07","commitOrder":4,"curCode":"    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,\n                                       Collection<String> scopesToResolve, MavenSession session,\n                                       Set<String> projectIds )\n        throws ArtifactResolutionException, ArtifactNotFoundException\n    {\n        Set<Artifact> resolved = new LinkedHashSet<Artifact>();\n\n        if ( projects == null || projects.isEmpty() )\n        {\n            return resolved;\n        }\n\n        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() ) &&\n            ( scopesToResolve == null || scopesToResolve.isEmpty() ) )\n        {\n            return resolved;\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter( scopesToResolve );\n\n        CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter( scopesToCollect );\n        collectionScopeFilter = new CumulativeScopeArtifactFilter( collectionScopeFilter, resolutionScopeFilter );\n\n        ArtifactResolutionRequest request =\n            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true ).setCollectionFilter(\n                collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter ).setLocalRepository(\n                session.getLocalRepository() ).setOffline( session.isOffline() ).setForceUpdate(\n                session.getRequest().isUpdateSnapshots() );\n        request.setServers( session.getRequest().getServers() );\n        request.setMirrors( session.getRequest().getMirrors() );\n        request.setProxies( session.getRequest().getProxies() );\n\n        for ( MavenProject project : projects )\n        {\n            request.setArtifact( new ProjectArtifact( project ) );\n            request.setArtifactDependencies( project.getDependencyArtifacts() );\n            request.setManagedVersionMap( project.getManagedVersionMap() );\n            request.setRemoteRepositories( project.getRemoteArtifactRepositories() );\n\n            ArtifactResolutionResult result = repositorySystem.resolve( request );\n\n            try\n            {\n                resolutionErrorHandler.throwErrors( request, result );\n            }\n            catch ( MultipleArtifactsNotFoundException e )\n            {\n\n                Collection<Artifact> missing = new HashSet<Artifact>( e.getMissingArtifacts() );\n\n                for ( Iterator<Artifact> it = missing.iterator(); it.hasNext(); )\n                {\n                    String key = ArtifactUtils.key( it.next() );\n                    if ( projectIds.contains( key ) )\n                    {\n                        it.remove();\n                    }\n                }\n\n                if ( !missing.isEmpty() )\n                {\n                    throw e;\n                }\n            }\n\n            resolved.addAll( result.getArtifacts() );\n        }\n\n        return resolved;\n    }\n","date":"2010-08-25 06:46:07","endLine":188,"groupId":"3360","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveImpl","params":"(Collection<?extendsMavenProject>projects@Collection<String>scopesToCollect@Collection<String>scopesToResolve@MavenSessionsession@Set<String>projectIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/c5/3cb97838432a3ad0e4bb86b266342cc8f764b4.src","preCode":"    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,\n                                       Collection<String> scopesToResolve, MavenSession session,\n                                       Set<String> projectIds )\n        throws ArtifactResolutionException, ArtifactNotFoundException\n    {\n        Set<Artifact> resolved = new LinkedHashSet<Artifact>();\n\n        if ( projects == null || projects.isEmpty() )\n        {\n            return resolved;\n        }\n\n        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() )\n            && ( scopesToResolve == null || scopesToResolve.isEmpty() ) )\n        {\n            return resolved;\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter( scopesToResolve );\n\n        CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter( scopesToCollect );\n        collectionScopeFilter = new CumulativeScopeArtifactFilter( collectionScopeFilter, resolutionScopeFilter );\n\n        ArtifactResolutionRequest request =\n            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true )\n                .setCollectionFilter( collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter )\n                .setLocalRepository( session.getLocalRepository() ).setOffline( session.isOffline() )\n                .setForceUpdate( session.getRequest().isUpdateSnapshots() ).setCache( session.getRepositoryCache() );\n        request.setTransferListener( session.getRequest().getTransferListener() );\n        request.setServers( session.getRequest().getServers() );\n        request.setMirrors( session.getRequest().getMirrors() );\n        request.setProxies( session.getRequest().getProxies() );\n\n        for ( MavenProject project : projects )\n        {\n            request.setArtifact( new ProjectArtifact( project ) );\n            request.setArtifactDependencies( project.getDependencyArtifacts() );\n            request.setManagedVersionMap( project.getManagedVersionMap() );\n            request.setRemoteRepositories( project.getRemoteArtifactRepositories() );\n\n            ArtifactResolutionResult result = repositorySystem.resolve( request );\n\n            try\n            {\n                resolutionErrorHandler.throwErrors( request, result );\n            }\n            catch ( MultipleArtifactsNotFoundException e )\n            {\n\n                Collection<Artifact> missing = new HashSet<Artifact>( e.getMissingArtifacts() );\n\n                for ( Iterator<Artifact> it = missing.iterator(); it.hasNext(); )\n                {\n                    String key = ArtifactUtils.key( it.next() );\n                    if ( projectIds.contains( key ) )\n                    {\n                        it.remove();\n                    }\n                }\n\n                if ( !missing.isEmpty() )\n                {\n                    throw e;\n                }\n            }\n\n            resolved.addAll( result.getArtifacts() );\n        }\n\n        return resolved;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"6c37a89744149e68f198429fb7eac70fe1707360","commitMessage":"@@@[MNG-4756] Aether integration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-08-25 06:46:07","modifiedFileCount":"102","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2010-08-25 06:46:07","commitOrder":5,"curCode":"    private void injectSession( ArtifactResolutionRequest request )\n    {\n        MavenSession session = legacySupport.getSession();\n\n        if ( session != null )\n        {\n            request.setOffline( session.isOffline() );\n            request.setForceUpdate( session.getRequest().isUpdateSnapshots() );\n            request.setServers( session.getRequest().getServers() );\n            request.setMirrors( session.getRequest().getMirrors() );\n            request.setProxies( session.getRequest().getProxies() );\n        }\n    }\n","date":"2010-08-25 06:46:07","endLine":87,"groupId":"10304","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"injectSession","params":"(ArtifactResolutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/65/1d46e8cea3a899bb949eedfcc69efd2985b2db.src","preCode":"    private void injectSession( ArtifactResolutionRequest request )\n    {\n        MavenSession session = legacySupport.getSession();\n\n        if ( session != null )\n        {\n            request.setOffline( session.isOffline() );\n            request.setForceUpdate( session.getRequest().isUpdateSnapshots() );\n            request.setServers( session.getRequest().getServers() );\n            request.setMirrors( session.getRequest().getMirrors() );\n            request.setProxies( session.getRequest().getProxies() );\n        }\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/resolver/DefaultLegacyArtifactCollector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2015-03-06 14:12:21","commitOrder":5,"curCode":"    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,\n                                       Collection<String> scopesToResolve, MavenSession session,\n                                       Set<String> projectIds )\n        throws ArtifactResolutionException, ArtifactNotFoundException\n    {\n        Set<Artifact> resolved = new LinkedHashSet<>();\n\n        if ( projects == null || projects.isEmpty() )\n        {\n            return resolved;\n        }\n\n        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() )\n            && ( scopesToResolve == null || scopesToResolve.isEmpty() ) )\n        {\n            return resolved;\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter( scopesToResolve );\n\n        CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter( scopesToCollect );\n        collectionScopeFilter = new CumulativeScopeArtifactFilter( collectionScopeFilter, resolutionScopeFilter );\n\n        ArtifactResolutionRequest request =\n            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true ).setCollectionFilter(\n                collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter ).setLocalRepository(\n                session.getLocalRepository() ).setOffline( session.isOffline() ).setForceUpdate(\n                session.getRequest().isUpdateSnapshots() );\n        request.setServers( session.getRequest().getServers() );\n        request.setMirrors( session.getRequest().getMirrors() );\n        request.setProxies( session.getRequest().getProxies() );\n\n        for ( MavenProject project : projects )\n        {\n            request.setArtifact( new ProjectArtifact( project ) );\n            request.setArtifactDependencies( project.getDependencyArtifacts() );\n            request.setManagedVersionMap( project.getManagedVersionMap() );\n            request.setRemoteRepositories( project.getRemoteArtifactRepositories() );\n\n            ArtifactResolutionResult result = repositorySystem.resolve( request );\n\n            try\n            {\n                resolutionErrorHandler.throwErrors( request, result );\n            }\n            catch ( MultipleArtifactsNotFoundException e )\n            {\n\n                Collection<Artifact> missing = new HashSet<>( e.getMissingArtifacts() );\n\n                for ( Iterator<Artifact> it = missing.iterator(); it.hasNext(); )\n                {\n                    String key = ArtifactUtils.key( it.next() );\n                    if ( projectIds.contains( key ) )\n                    {\n                        it.remove();\n                    }\n                }\n\n                if ( !missing.isEmpty() )\n                {\n                    throw e;\n                }\n            }\n\n            resolved.addAll( result.getArtifacts() );\n        }\n\n        return resolved;\n    }\n","date":"2015-06-20 16:56:07","endLine":190,"groupId":"10304","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveImpl","params":"(Collection<?extendsMavenProject>projects@Collection<String>scopesToCollect@Collection<String>scopesToResolve@MavenSessionsession@Set<String>projectIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/be/7c97a8cc8a9474aaedba359b20015f4bbd5ccd.src","preCode":"    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,\n                                       Collection<String> scopesToResolve, MavenSession session,\n                                       Set<String> projectIds )\n        throws ArtifactResolutionException, ArtifactNotFoundException\n    {\n        Set<Artifact> resolved = new LinkedHashSet<Artifact>();\n\n        if ( projects == null || projects.isEmpty() )\n        {\n            return resolved;\n        }\n\n        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() )\n            && ( scopesToResolve == null || scopesToResolve.isEmpty() ) )\n        {\n            return resolved;\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter( scopesToResolve );\n\n        CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter( scopesToCollect );\n        collectionScopeFilter = new CumulativeScopeArtifactFilter( collectionScopeFilter, resolutionScopeFilter );\n\n        ArtifactResolutionRequest request =\n            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true ).setCollectionFilter(\n                collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter ).setLocalRepository(\n                session.getLocalRepository() ).setOffline( session.isOffline() ).setForceUpdate(\n                session.getRequest().isUpdateSnapshots() );\n        request.setServers( session.getRequest().getServers() );\n        request.setMirrors( session.getRequest().getMirrors() );\n        request.setProxies( session.getRequest().getProxies() );\n\n        for ( MavenProject project : projects )\n        {\n            request.setArtifact( new ProjectArtifact( project ) );\n            request.setArtifactDependencies( project.getDependencyArtifacts() );\n            request.setManagedVersionMap( project.getManagedVersionMap() );\n            request.setRemoteRepositories( project.getRemoteArtifactRepositories() );\n\n            ArtifactResolutionResult result = repositorySystem.resolve( request );\n\n            try\n            {\n                resolutionErrorHandler.throwErrors( request, result );\n            }\n            catch ( MultipleArtifactsNotFoundException e )\n            {\n\n                Collection<Artifact> missing = new HashSet<Artifact>( e.getMissingArtifacts() );\n\n                for ( Iterator<Artifact> it = missing.iterator(); it.hasNext(); )\n                {\n                    String key = ArtifactUtils.key( it.next() );\n                    if ( projectIds.contains( key ) )\n                    {\n                        it.remove();\n                    }\n                }\n\n                if ( !missing.isEmpty() )\n                {\n                    throw e;\n                }\n            }\n\n            resolved.addAll( result.getArtifacts() );\n        }\n\n        return resolved;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/DefaultProjectDependenciesResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"}]
