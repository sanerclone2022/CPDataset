[{"authorTime":"2016-01-31 02:17:34","codes":[{"authorDate":"2016-01-31 02:17:34","commitOrder":1,"curCode":"    public ModelSource resolveModel( final Dependency dependency )\n        throws UnresolvableModelException\n    {\n        try\n        {\n            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), \"\",\n                                                           \"pom\", dependency.getVersion() );\n\n            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );\n            versionRangeRequest.setTrace( trace );\n\n            final VersionRangeResult versionRangeResult =\n                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );\n\n            if ( versionRangeResult.getHighestVersion() == null )\n            {\n                throw new UnresolvableModelException(\n                    String.format( \"No versions matched the requested dependency version range '%s'\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            if ( versionRangeResult.getVersionConstraint() != null\n                     && versionRangeResult.getVersionConstraint().getRange() != null\n                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )\n            {\n                \r\n                throw new UnresolvableModelException(\n                    String.format( \"The requested dependency version range '%s' does not specify an upper bound\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );\n\n            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n        }\n        catch ( VersionRangeResolutionException e )\n        {\n            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),\n                                                  dependency.getVersion(), e );\n\n        }\n    }\n","date":"2017-03-09 01:24:18","endLine":280,"groupId":"1273","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveModel","params":"(finalDependencydependency)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3e/82eb9a4cdab8d6074aba352ae0753424fb8666.src","preCode":"    public ModelSource resolveModel( final Dependency dependency )\n        throws UnresolvableModelException\n    {\n        try\n        {\n            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), \"\",\n                                                           \"pom\", dependency.getVersion() );\n\n            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );\n            versionRangeRequest.setTrace( trace );\n\n            final VersionRangeResult versionRangeResult =\n                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );\n\n            if ( versionRangeResult.getHighestVersion() == null )\n            {\n                throw new UnresolvableModelException(\n                    String.format( \"No versions matched the requested dependency version range '%s'\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            if ( versionRangeResult.getVersionConstraint() != null\n                     && versionRangeResult.getVersionConstraint().getRange() != null\n                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )\n            {\n                \r\n                throw new UnresolvableModelException(\n                    String.format( \"The requested dependency version range '%s' does not specify an upper bound\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );\n\n            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n        }\n        catch ( VersionRangeResolutionException e )\n        {\n            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),\n                                                  dependency.getVersion(), e );\n\n        }\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"B"},{"authorDate":"2016-01-31 02:17:34","commitOrder":1,"curCode":"    public ModelSource resolveModel( final Dependency dependency )\n        throws UnresolvableModelException\n    {\n        try\n        {\n            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), \"\",\n                                                           \"pom\", dependency.getVersion() );\n\n            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );\n            versionRangeRequest.setTrace( trace );\n\n            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );\n\n            if ( versionRangeResult.getHighestVersion() == null )\n            {\n                throw new UnresolvableModelException(\n                    String.format( \"No versions matched the requested dependency version range '%s'\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            if ( versionRangeResult.getVersionConstraint() != null\n                     && versionRangeResult.getVersionConstraint().getRange() != null\n                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )\n            {\n                \r\n                throw new UnresolvableModelException(\n                    String.format( \"The requested dependency version range '%s' does not specify an upper bound\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );\n\n            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n        }\n        catch ( VersionRangeResolutionException e )\n        {\n            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),\n                                                  dependency.getVersion(), e );\n\n        }\n    }\n","date":"2017-03-09 01:24:18","endLine":298,"groupId":"1273","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveModel","params":"(finalDependencydependency)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3a/31d338660d80222c541a69ba2962f975883762.src","preCode":"    public ModelSource resolveModel( final Dependency dependency )\n        throws UnresolvableModelException\n    {\n        try\n        {\n            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), \"\",\n                                                           \"pom\", dependency.getVersion() );\n\n            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );\n            versionRangeRequest.setTrace( trace );\n\n            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );\n\n            if ( versionRangeResult.getHighestVersion() == null )\n            {\n                throw new UnresolvableModelException(\n                    String.format( \"No versions matched the requested dependency version range '%s'\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            if ( versionRangeResult.getVersionConstraint() != null\n                     && versionRangeResult.getVersionConstraint().getRange() != null\n                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )\n            {\n                \r\n                throw new UnresolvableModelException(\n                    String.format( \"The requested dependency version range '%s' does not specify an upper bound\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );\n\n            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n        }\n        catch ( VersionRangeResolutionException e )\n        {\n            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),\n                                                  dependency.getVersion(), e );\n\n        }\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"}],"commitId":"ab800b0cfae4e3ca9453304e3b9727ba4a4b712b","commitMessage":"@@@[MNG-6182] ModelResolver interface enhancements.\n","date":"2017-03-09 01:24:18","modifiedFileCount":"3","status":"B","submitter":"Christian Schulte"},{"authorTime":"2020-06-23 03:24:49","codes":[{"authorDate":"2016-01-31 02:17:34","commitOrder":2,"curCode":"    public ModelSource resolveModel( final Dependency dependency )\n        throws UnresolvableModelException\n    {\n        try\n        {\n            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), \"\",\n                                                           \"pom\", dependency.getVersion() );\n\n            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );\n            versionRangeRequest.setTrace( trace );\n\n            final VersionRangeResult versionRangeResult =\n                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );\n\n            if ( versionRangeResult.getHighestVersion() == null )\n            {\n                throw new UnresolvableModelException(\n                    String.format( \"No versions matched the requested dependency version range '%s'\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            if ( versionRangeResult.getVersionConstraint() != null\n                     && versionRangeResult.getVersionConstraint().getRange() != null\n                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )\n            {\n                \r\n                throw new UnresolvableModelException(\n                    String.format( \"The requested dependency version range '%s' does not specify an upper bound\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );\n\n            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n        }\n        catch ( VersionRangeResolutionException e )\n        {\n            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),\n                                                  dependency.getVersion(), e );\n\n        }\n    }\n","date":"2017-03-09 01:24:18","endLine":280,"groupId":"12144","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveModel","params":"(finalDependencydependency)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3e/82eb9a4cdab8d6074aba352ae0753424fb8666.src","preCode":"    public ModelSource resolveModel( final Dependency dependency )\n        throws UnresolvableModelException\n    {\n        try\n        {\n            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), \"\",\n                                                           \"pom\", dependency.getVersion() );\n\n            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );\n            versionRangeRequest.setTrace( trace );\n\n            final VersionRangeResult versionRangeResult =\n                versionRangeResolver.resolveVersionRange( session, versionRangeRequest );\n\n            if ( versionRangeResult.getHighestVersion() == null )\n            {\n                throw new UnresolvableModelException(\n                    String.format( \"No versions matched the requested dependency version range '%s'\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            if ( versionRangeResult.getVersionConstraint() != null\n                     && versionRangeResult.getVersionConstraint().getRange() != null\n                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )\n            {\n                \r\n                throw new UnresolvableModelException(\n                    String.format( \"The requested dependency version range '%s' does not specify an upper bound\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );\n\n            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n        }\n        catch ( VersionRangeResolutionException e )\n        {\n            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),\n                                                  dependency.getVersion(), e );\n\n        }\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"},{"authorDate":"2020-06-23 03:24:49","commitOrder":2,"curCode":"    public ModelSource resolveModel( final Dependency dependency )\n        throws UnresolvableModelException\n    {\n        try\n        {\n            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), \"\",\n                                                           \"pom\", dependency.getVersion() );\n\n            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );\n            versionRangeRequest.setTrace( trace );\n\n            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );\n\n            if ( versionRangeResult.getHighestVersion() == null )\n            {\n                throw new UnresolvableModelException(\n                    String.format( \"No versions matched the requested dependency version range '%s'\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            if ( versionRangeResult.getVersionConstraint() != null\n                     && versionRangeResult.getVersionConstraint().getRange() != null\n                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )\n            {\n                \r\n                throw new UnresolvableModelException(\n                    String.format( \"The requested dependency version range '%s' does not specify an upper bound\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );\n            \n            if ( modelPool != null )\n            {\n                Model model =\n                    modelPool.get( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n                if ( model != null )\n                {\n                    return new FileModelSource( model.getPomFile() );\n                }\n            }\n\n            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n        }\n        catch ( VersionRangeResolutionException e )\n        {\n            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),\n                                                  dependency.getVersion(), e );\n\n        }\n    }\n","date":"2020-06-23 03:24:49","endLine":297,"groupId":"12144","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveModel","params":"(finalDependencydependency)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/bc/c3730e72bbf037197807e0175d5c53a75f7678.src","preCode":"    public ModelSource resolveModel( final Dependency dependency )\n        throws UnresolvableModelException\n    {\n        try\n        {\n            final Artifact artifact = new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), \"\",\n                                                           \"pom\", dependency.getVersion() );\n\n            final VersionRangeRequest versionRangeRequest = new VersionRangeRequest( artifact, repositories, context );\n            versionRangeRequest.setTrace( trace );\n\n            final VersionRangeResult versionRangeResult = resolver.resolveVersionRange( session, versionRangeRequest );\n\n            if ( versionRangeResult.getHighestVersion() == null )\n            {\n                throw new UnresolvableModelException(\n                    String.format( \"No versions matched the requested dependency version range '%s'\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            if ( versionRangeResult.getVersionConstraint() != null\n                     && versionRangeResult.getVersionConstraint().getRange() != null\n                     && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null )\n            {\n                \r\n                throw new UnresolvableModelException(\n                    String.format( \"The requested dependency version range '%s' does not specify an upper bound\",\n                                   dependency.getVersion() ),\n                    dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n\n            }\n\n            dependency.setVersion( versionRangeResult.getHighestVersion().toString() );\n\n            return resolveModel( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );\n        }\n        catch ( VersionRangeResolutionException e )\n        {\n            throw new UnresolvableModelException( e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(),\n                                                  dependency.getVersion(), e );\n\n        }\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"bdec668de9c600165bb69c95b6ea0625d9f74fb0","commitMessage":"@@@[MNG-6656] Introduce base for build/consumer pom\n","date":"2020-06-23 03:24:49","modifiedFileCount":"17","status":"M","submitter":"rfscholte"}]
