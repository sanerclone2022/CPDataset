[{"authorTime":"2014-09-04 02:48:28","codes":[{"authorDate":"2014-09-04 02:48:28","commitOrder":1,"curCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<MavenProject>( projects.size() );\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        selectedProject = project;\n                        break;\n                    }\n                }\n\n                if ( selectedProject != null )\n                {\n                    selectedProjects.add( selectedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            boolean makeUpstream = false;\n            boolean makeDownstream = false;\n\n            if ( MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeDownstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_BOTH.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n                makeDownstream = true;\n            }\n            else if ( StringUtils.isNotEmpty( request.getMakeBehavior() ) )\n            {\n                throw new MavenExecutionException( \"Invalid reactor make behavior: \" + request.getMakeBehavior(),\n                                                   request.getPom() );\n            }\n\n            if ( makeUpstream || makeDownstream )\n            {\n                for ( MavenProject selectedProject : new ArrayList<MavenProject>( selectedProjects ) )\n                {\n                    if ( makeUpstream )\n                    {\n                        selectedProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );\n                    }\n                    if ( makeDownstream )\n                    {\n                        selectedProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );\n                    }\n                }\n            }\n\n            result = new ArrayList<MavenProject>( selectedProjects.size() );\n\n            for ( MavenProject project : projects )\n            {\n                if ( selectedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","date":"2015-03-02 04:39:30","endLine":235,"groupId":"5951","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"trimSelectedProjects","params":"(List<MavenProject>projects@ProjectDependencyGraphgraph@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0a/602ba66635cfaafcbdf0aebe87dace38080701.src","preCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<MavenProject>( projects.size() );\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        selectedProject = project;\n                        break;\n                    }\n                }\n\n                if ( selectedProject != null )\n                {\n                    selectedProjects.add( selectedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            boolean makeUpstream = false;\n            boolean makeDownstream = false;\n\n            if ( MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeDownstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_BOTH.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n                makeDownstream = true;\n            }\n            else if ( StringUtils.isNotEmpty( request.getMakeBehavior() ) )\n            {\n                throw new MavenExecutionException( \"Invalid reactor make behavior: \" + request.getMakeBehavior(),\n                                                   request.getPom() );\n            }\n\n            if ( makeUpstream || makeDownstream )\n            {\n                for ( MavenProject selectedProject : new ArrayList<MavenProject>( selectedProjects ) )\n                {\n                    if ( makeUpstream )\n                    {\n                        selectedProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );\n                    }\n                    if ( makeDownstream )\n                    {\n                        selectedProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );\n                    }\n                }\n            }\n\n            result = new ArrayList<MavenProject>( selectedProjects.size() );\n\n            for ( MavenProject project : projects )\n            {\n                if ( selectedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"},{"authorDate":"2014-09-04 02:48:28","commitOrder":1,"curCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> excludedProjects = new LinkedHashSet<MavenProject>( projects.size() );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        excludedProject = project;\n                        break;\n                    }\n                }\n\n                if ( excludedProject != null )\n                {\n                    excludedProjects.add( excludedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            result = new ArrayList<MavenProject>( projects.size() );\n            for ( MavenProject project : projects )\n            {\n                if ( !excludedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","date":"2015-03-02 04:39:30","endLine":288,"groupId":"5951","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"trimExcludedProjects","params":"(List<MavenProject>projects@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0a/602ba66635cfaafcbdf0aebe87dace38080701.src","preCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> excludedProjects = new LinkedHashSet<MavenProject>( projects.size() );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        excludedProject = project;\n                        break;\n                    }\n                }\n\n                if ( excludedProject != null )\n                {\n                    excludedProjects.add( excludedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            result = new ArrayList<MavenProject>( projects.size() );\n            for ( MavenProject project : projects )\n            {\n                if ( !excludedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"}],"commitId":"be3fb200326208ca4b8c41ebf16d5ae6b8049792","commitMessage":"@@@MNG-5775 Make the project graph building code pluggable to allow for new/different implementations.\n","date":"2015-03-02 04:39:30","modifiedFileCount":"15","status":"B","submitter":"Jason van Zyl"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":2,"curCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>( projects.size() );\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        selectedProject = project;\n                        break;\n                    }\n                }\n\n                if ( selectedProject != null )\n                {\n                    selectedProjects.add( selectedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            boolean makeUpstream = false;\n            boolean makeDownstream = false;\n\n            if ( MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeDownstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_BOTH.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n                makeDownstream = true;\n            }\n            else if ( StringUtils.isNotEmpty( request.getMakeBehavior() ) )\n            {\n                throw new MavenExecutionException( \"Invalid reactor make behavior: \" + request.getMakeBehavior(),\n                                                   request.getPom() );\n            }\n\n            if ( makeUpstream || makeDownstream )\n            {\n                for ( MavenProject selectedProject : new ArrayList<>( selectedProjects ) )\n                {\n                    if ( makeUpstream )\n                    {\n                        selectedProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );\n                    }\n                    if ( makeDownstream )\n                    {\n                        selectedProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );\n                    }\n                }\n            }\n\n            result = new ArrayList<>( selectedProjects.size() );\n\n            for ( MavenProject project : projects )\n            {\n                if ( selectedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","date":"2015-06-20 16:56:07","endLine":236,"groupId":"5951","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"trimSelectedProjects","params":"(List<MavenProject>projects@ProjectDependencyGraphgraph@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/68/0d58469393bc45fc73388d11d6b7a5828ba9af.src","preCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<MavenProject>( projects.size() );\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        selectedProject = project;\n                        break;\n                    }\n                }\n\n                if ( selectedProject != null )\n                {\n                    selectedProjects.add( selectedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            boolean makeUpstream = false;\n            boolean makeDownstream = false;\n\n            if ( MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeDownstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_BOTH.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n                makeDownstream = true;\n            }\n            else if ( StringUtils.isNotEmpty( request.getMakeBehavior() ) )\n            {\n                throw new MavenExecutionException( \"Invalid reactor make behavior: \" + request.getMakeBehavior(),\n                                                   request.getPom() );\n            }\n\n            if ( makeUpstream || makeDownstream )\n            {\n                for ( MavenProject selectedProject : new ArrayList<MavenProject>( selectedProjects ) )\n                {\n                    if ( makeUpstream )\n                    {\n                        selectedProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );\n                    }\n                    if ( makeDownstream )\n                    {\n                        selectedProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );\n                    }\n                }\n            }\n\n            result = new ArrayList<MavenProject>( selectedProjects.size() );\n\n            for ( MavenProject project : projects )\n            {\n                if ( selectedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2015-03-06 14:12:21","commitOrder":2,"curCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> excludedProjects = new LinkedHashSet<>( projects.size() );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        excludedProject = project;\n                        break;\n                    }\n                }\n\n                if ( excludedProject != null )\n                {\n                    excludedProjects.add( excludedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            result = new ArrayList<>( projects.size() );\n            for ( MavenProject project : projects )\n            {\n                if ( !excludedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","date":"2015-06-20 16:56:07","endLine":289,"groupId":"5951","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"trimExcludedProjects","params":"(List<MavenProject>projects@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/68/0d58469393bc45fc73388d11d6b7a5828ba9af.src","preCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> excludedProjects = new LinkedHashSet<MavenProject>( projects.size() );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        excludedProject = project;\n                        break;\n                    }\n                }\n\n                if ( excludedProject != null )\n                {\n                    excludedProjects.add( excludedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            result = new ArrayList<MavenProject>( projects.size() );\n            for ( MavenProject project : projects )\n            {\n                if ( !excludedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2020-04-24 18:01:27","commitOrder":3,"curCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            result = new ArrayList<>( projects.size() );\n\n            File reactorDirectory = null;\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>( projects.size() );\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        selectedProject = project;\n                        break;\n                    }\n                }\n\n                if ( selectedProject != null )\n                {\n                    selectedProjects.add( selectedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            result.addAll( selectedProjects );\n\n            result = includeAlsoMakeTransitively( result, request, graph );\n        }\n\n        return result;\n    }\n","date":"2020-04-24 18:01:27","endLine":187,"groupId":"378","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"trimSelectedProjects","params":"(List<MavenProject>projects@ProjectDependencyGraphgraph@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/99/f0266a1bbc026f11e37f7d278f7d2ee57a38e4.src","preCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>( projects.size() );\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        selectedProject = project;\n                        break;\n                    }\n                }\n\n                if ( selectedProject != null )\n                {\n                    selectedProjects.add( selectedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            boolean makeUpstream = false;\n            boolean makeDownstream = false;\n\n            if ( MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals( request.getMakeBehavior() ) )\n            {\n                makeDownstream = true;\n            }\n            else if ( MavenExecutionRequest.REACTOR_MAKE_BOTH.equals( request.getMakeBehavior() ) )\n            {\n                makeUpstream = true;\n                makeDownstream = true;\n            }\n            else if ( StringUtils.isNotEmpty( request.getMakeBehavior() ) )\n            {\n                throw new MavenExecutionException( \"Invalid reactor make behavior: \" + request.getMakeBehavior(),\n                                                   request.getPom() );\n            }\n\n            if ( makeUpstream || makeDownstream )\n            {\n                for ( MavenProject selectedProject : new ArrayList<>( selectedProjects ) )\n                {\n                    if ( makeUpstream )\n                    {\n                        selectedProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );\n                    }\n                    if ( makeDownstream )\n                    {\n                        selectedProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );\n                    }\n                }\n            }\n\n            result = new ArrayList<>( selectedProjects.size() );\n\n            for ( MavenProject project : projects )\n            {\n                if ( selectedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2015-03-06 14:12:21","commitOrder":3,"curCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> excludedProjects = new LinkedHashSet<>( projects.size() );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        excludedProject = project;\n                        break;\n                    }\n                }\n\n                if ( excludedProject != null )\n                {\n                    excludedProjects.add( excludedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            result = new ArrayList<>( projects.size() );\n            for ( MavenProject project : projects )\n            {\n                if ( !excludedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","date":"2015-06-20 16:56:07","endLine":289,"groupId":"5951","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"trimExcludedProjects","params":"(List<MavenProject>projects@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/68/0d58469393bc45fc73388d11d6b7a5828ba9af.src","preCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> excludedProjects = new LinkedHashSet<>( projects.size() );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        excludedProject = project;\n                        break;\n                    }\n                }\n\n                if ( excludedProject != null )\n                {\n                    excludedProjects.add( excludedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            result = new ArrayList<>( projects.size() );\n            for ( MavenProject project : projects )\n            {\n                if ( !excludedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"N"}],"commitId":"f6c07d9358252bb4e9b0ad13c2729c6a42d0a4e8","commitMessage":"@@@[MNG-6863] --also-make is being ignored when calling --resume-from\n\n[MNG-6676] Resume reactor build after skipped project using -pl !X -rf X combination\n\nCo-authored-by: Martin Kanters <Martin.Kanters@infosupport.com>","date":"2020-04-24 18:01:27","modifiedFileCount":"1","status":"M","submitter":"Martin Kanters"},{"authorTime":"2020-06-21 04:39:29","codes":[{"authorDate":"2020-06-21 04:39:29","commitOrder":4,"curCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>( request.getSelectedProjects().size(), 1 );\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException(\n                                \"Could not find the selected project in the reactor: \" + selector, request.getPom() ) );\n                selectedProjects.add( selectedProject );\n            }\n\n            result = new ArrayList<>( selectedProjects );\n\n            result = includeAlsoMakeTransitively( result, request, graph );\n\n            \r\n            List<MavenProject> sortedProjects = graph.getSortedProjects();\n            result.sort( comparing( sortedProjects::indexOf ) );\n        }\n\n        return result;\n    }\n","date":"2020-06-21 04:39:29","endLine":180,"groupId":"4391","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"trimSelectedProjects","params":"(List<MavenProject>projects@ProjectDependencyGraphgraph@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/16/4c3dcd0ea194220870cf27247e91728d77ae38.src","preCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            result = new ArrayList<>( projects.size() );\n\n            File reactorDirectory = null;\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>( projects.size() );\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        selectedProject = project;\n                        break;\n                    }\n                }\n\n                if ( selectedProject != null )\n                {\n                    selectedProjects.add( selectedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            result.addAll( selectedProjects );\n\n            result = includeAlsoMakeTransitively( result, request, graph );\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2020-06-21 04:39:29","commitOrder":4,"curCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            result = new ArrayList<>( projects );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException( \"Could not find the selected project in \"\n                                + \"the reactor: \" + selector, request.getPom() ) );\n                result.remove( excludedProject );\n            }\n        }\n\n        return result;\n    }\n","date":"2020-06-21 04:39:29","endLine":232,"groupId":"6310","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"trimExcludedProjects","params":"(List<MavenProject>projects@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/16/4c3dcd0ea194220870cf27247e91728d77ae38.src","preCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = null;\n\n            if ( request.getBaseDirectory() != null )\n            {\n                reactorDirectory = new File( request.getBaseDirectory() );\n            }\n\n            Collection<MavenProject> excludedProjects = new LinkedHashSet<>( projects.size() );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = null;\n\n                for ( MavenProject project : projects )\n                {\n                    if ( isMatchingProject( project, selector, reactorDirectory ) )\n                    {\n                        excludedProject = project;\n                        break;\n                    }\n                }\n\n                if ( excludedProject != null )\n                {\n                    excludedProjects.add( excludedProject );\n                }\n                else\n                {\n                    throw new MavenExecutionException( \"Could not find the selected project in the reactor: \"\n                        + selector, request.getPom() );\n                }\n            }\n\n            result = new ArrayList<>( projects.size() );\n            for ( MavenProject project : projects )\n            {\n                if ( !excludedProjects.contains( project ) )\n                {\n                    result.add( project );\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"1e217703a8f6d6378e8a92c57878f53368b289af","commitMessage":"@@@[MNG-6863] Support --also-make flag in combination with --resume-from.\n\nAuthor: Martin Kanters <Martin.Kanters@infosupport.com>\n","date":"2020-06-21 04:39:29","modifiedFileCount":"2","status":"M","submitter":"rfscholte"},{"authorTime":"2020-06-21 04:39:29","codes":[{"authorDate":"2020-10-22 03:25:41","commitOrder":5,"curCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>();\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException(\n                                \"Could not find the selected project in the reactor: \" + selector, request.getPom() ) );\n                selectedProjects.add( selectedProject );\n\n                List<MavenProject> children = selectedProject.getCollectedProjects();\n                if ( children != null )\n                {\n                    selectedProjects.addAll( children );\n                }\n            }\n\n            result = new ArrayList<>( selectedProjects );\n\n            result = includeAlsoMakeTransitively( result, request, graph );\n\n            \r\n            List<MavenProject> sortedProjects = graph.getSortedProjects();\n            result.sort( comparing( sortedProjects::indexOf ) );\n        }\n\n        return result;\n    }\n","date":"2020-10-22 03:25:41","endLine":211,"groupId":"4391","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"trimSelectedProjects","params":"(List<MavenProject>projects@ProjectDependencyGraphgraph@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/14/f114d640986a3e5561a59d3bc4691f490b01e6.src","preCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>( request.getSelectedProjects().size(), 1 );\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException(\n                                \"Could not find the selected project in the reactor: \" + selector, request.getPom() ) );\n                selectedProjects.add( selectedProject );\n            }\n\n            result = new ArrayList<>( selectedProjects );\n\n            result = includeAlsoMakeTransitively( result, request, graph );\n\n            \r\n            List<MavenProject> sortedProjects = graph.getSortedProjects();\n            result.sort( comparing( sortedProjects::indexOf ) );\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2020-06-21 04:39:29","commitOrder":5,"curCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            result = new ArrayList<>( projects );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException( \"Could not find the selected project in \"\n                                + \"the reactor: \" + selector, request.getPom() ) );\n                result.remove( excludedProject );\n            }\n        }\n\n        return result;\n    }\n","date":"2020-06-21 04:39:29","endLine":232,"groupId":"6310","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"trimExcludedProjects","params":"(List<MavenProject>projects@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/16/4c3dcd0ea194220870cf27247e91728d77ae38.src","preCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            result = new ArrayList<>( projects );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException( \"Could not find the selected project in \"\n                                + \"the reactor: \" + selector, request.getPom() ) );\n                result.remove( excludedProject );\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"N"}],"commitId":"8913502589acbbd51f5403666c239633c5e06f2d","commitMessage":"@@@Merge branch 'master' of https://gitbox.apache.org/repos/asf/maven\n","date":"2020-10-22 03:25:41","modifiedFileCount":"9","status":"M","submitter":"rfscholte"},{"authorTime":"2021-02-20 18:37:17","codes":[{"authorDate":"2020-10-22 03:25:41","commitOrder":6,"curCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>();\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException(\n                                \"Could not find the selected project in the reactor: \" + selector, request.getPom() ) );\n                selectedProjects.add( selectedProject );\n\n                List<MavenProject> children = selectedProject.getCollectedProjects();\n                if ( children != null )\n                {\n                    selectedProjects.addAll( children );\n                }\n            }\n\n            result = new ArrayList<>( selectedProjects );\n\n            result = includeAlsoMakeTransitively( result, request, graph );\n\n            \r\n            List<MavenProject> sortedProjects = graph.getSortedProjects();\n            result.sort( comparing( sortedProjects::indexOf ) );\n        }\n\n        return result;\n    }\n","date":"2020-10-22 03:25:41","endLine":211,"groupId":"4391","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"trimSelectedProjects","params":"(List<MavenProject>projects@ProjectDependencyGraphgraph@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/14/f114d640986a3e5561a59d3bc4691f490b01e6.src","preCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>();\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException(\n                                \"Could not find the selected project in the reactor: \" + selector, request.getPom() ) );\n                selectedProjects.add( selectedProject );\n\n                List<MavenProject> children = selectedProject.getCollectedProjects();\n                if ( children != null )\n                {\n                    selectedProjects.addAll( children );\n                }\n            }\n\n            result = new ArrayList<>( selectedProjects );\n\n            result = includeAlsoMakeTransitively( result, request, graph );\n\n            \r\n            List<MavenProject> sortedProjects = graph.getSortedProjects();\n            result.sort( comparing( sortedProjects::indexOf ) );\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"N"},{"authorDate":"2021-02-20 18:37:17","commitOrder":6,"curCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            result = new ArrayList<>( projects );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException( \"Could not find the selected project in \"\n                                + \"the reactor: \" + selector, request.getPom() ) );\n\n                boolean isExcludedProjectRemoved = result.remove( excludedProject );\n\n                if ( isExcludedProjectRemoved )\n                {\n                    List<MavenProject> children = excludedProject.getCollectedProjects();\n                    if ( children != null )\n                    {\n                        result.removeAll( children );\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n","date":"2021-03-22 20:16:42","endLine":273,"groupId":"6310","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"trimExcludedProjects","params":"(List<MavenProject>projects@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/49/d52af421f534eb1c97f550bc49c48a567859a8.src","preCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            result = new ArrayList<>( projects );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException( \"Could not find the selected project in \"\n                                + \"the reactor: \" + selector, request.getPom() ) );\n                result.remove( excludedProject );\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"a02834611bad3442ad073b10f1dee2322916f1f3","commitMessage":"@@@[MNG-7102] The child modules of excluded projects are now excluded as well.  making the behavior consistent with MNG-6981.\n","date":"2021-03-22 20:16:42","modifiedFileCount":"2","status":"M","submitter":"Martin Kanters"},{"authorTime":"2021-02-12 22:14:02","codes":[{"authorDate":"2021-02-12 22:14:02","commitOrder":7,"curCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        ProjectActivation projectActivation = request.getProjectActivation();\n        Set<String> requiredSelectors = projectActivation.getRequiredActiveProjectSelectors();\n        Set<String> optionalSelectors = projectActivation.getOptionalActiveProjectSelectors();\n        if ( !requiredSelectors.isEmpty() || !optionalSelectors.isEmpty() )\n        {\n            Set<MavenProject> selectedProjects = new HashSet<>( requiredSelectors.size() + optionalSelectors.size() );\n            selectedProjects.addAll( getProjectsBySelectors( request, projects, requiredSelectors, true ) );\n            selectedProjects.addAll( getProjectsBySelectors( request, projects, optionalSelectors, false ) );\n\n            \r\n            if ( !selectedProjects.isEmpty() )\n            {\n                result = new ArrayList<>( selectedProjects );\n\n                result = includeAlsoMakeTransitively( result, request, graph );\n\n                \r\n                List<MavenProject> sortedProjects = graph.getSortedProjects();\n                result.sort( comparing( sortedProjects::indexOf ) );\n            }\n        }\n\n        return result;\n    }\n","date":"2021-03-22 21:41:59","endLine":203,"groupId":"2882","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"trimSelectedProjects","params":"(List<MavenProject>projects@ProjectDependencyGraphgraph@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e7/47868394615d31ee4318ba966a5ccbd691058f.src","preCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getSelectedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            Collection<MavenProject> selectedProjects = new LinkedHashSet<>();\n\n            for ( String selector : request.getSelectedProjects() )\n            {\n                MavenProject selectedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException(\n                                \"Could not find the selected project in the reactor: \" + selector, request.getPom() ) );\n                selectedProjects.add( selectedProject );\n\n                List<MavenProject> children = selectedProject.getCollectedProjects();\n                if ( children != null )\n                {\n                    selectedProjects.addAll( children );\n                }\n            }\n\n            result = new ArrayList<>( selectedProjects );\n\n            result = includeAlsoMakeTransitively( result, request, graph );\n\n            \r\n            List<MavenProject> sortedProjects = graph.getSortedProjects();\n            result.sort( comparing( sortedProjects::indexOf ) );\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2021-02-12 22:14:02","commitOrder":7,"curCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        ProjectActivation projectActivation = request.getProjectActivation();\n        Set<String> requiredSelectors = projectActivation.getRequiredInactiveProjectSelectors();\n        Set<String> optionalSelectors = projectActivation.getOptionalInactiveProjectSelectors();\n        if ( !requiredSelectors.isEmpty() || !optionalSelectors.isEmpty() )\n        {\n            Set<MavenProject> excludedProjects = new HashSet<>( requiredSelectors.size() + optionalSelectors.size() );\n            excludedProjects.addAll( getProjectsBySelectors( request, projects, requiredSelectors, true ) );\n            excludedProjects.addAll( getProjectsBySelectors( request, projects, optionalSelectors, false ) );\n\n            result = new ArrayList<>( projects );\n\n            for ( MavenProject excludedProject : excludedProjects )\n            {\n                boolean isExcludedProjectRemoved = result.remove( excludedProject );\n\n                if ( isExcludedProjectRemoved )\n                {\n                    List<MavenProject> children = excludedProject.getCollectedProjects();\n                    if ( children != null )\n                    {\n                        result.removeAll( children );\n                    }\n                }\n            }\n\n            if ( result.isEmpty() )\n            {\n                boolean isPlural = excludedProjects.size() > 1;\n                String message = String.format( \"The project exclusion%s in --projects/-pl resulted in an \"\n                        + \"empty reactor, please correct %s.\", isPlural ? \"s\" : \"\", isPlural ? \"them\" : \"it\" );\n                throw new MavenExecutionException( message, request.getPom() );\n            }\n        }\n\n        return result;\n    }\n","date":"2021-03-22 21:41:59","endLine":312,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"trimExcludedProjects","params":"(List<MavenProject>projects@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e7/47868394615d31ee4318ba966a5ccbd691058f.src","preCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        if ( !request.getExcludedProjects().isEmpty() )\n        {\n            File reactorDirectory = getReactorDirectory( request );\n\n            result = new ArrayList<>( projects );\n\n            for ( String selector : request.getExcludedProjects() )\n            {\n                MavenProject excludedProject = projects.stream()\n                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )\n                        .findFirst()\n                        .orElseThrow( () -> new MavenExecutionException( \"Could not find the selected project in \"\n                                + \"the reactor: \" + selector, request.getPom() ) );\n\n                boolean isExcludedProjectRemoved = result.remove( excludedProject );\n\n                if ( isExcludedProjectRemoved )\n                {\n                    List<MavenProject> children = excludedProject.getCollectedProjects();\n                    if ( children != null )\n                    {\n                        result.removeAll( children );\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"c3cf29438e3d65d6ee5c5726f8611af99d9a649a","commitMessage":"@@@[MNG-6511] Optional project selection\n\nCloses #446.\n","date":"2021-03-22 21:41:59","modifiedFileCount":"9","status":"M","submitter":"Maarten Mulders"},{"authorTime":"2021-03-22 23:10:05","codes":[{"authorDate":"2021-02-12 22:14:02","commitOrder":8,"curCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        ProjectActivation projectActivation = request.getProjectActivation();\n        Set<String> requiredSelectors = projectActivation.getRequiredActiveProjectSelectors();\n        Set<String> optionalSelectors = projectActivation.getOptionalActiveProjectSelectors();\n        if ( !requiredSelectors.isEmpty() || !optionalSelectors.isEmpty() )\n        {\n            Set<MavenProject> selectedProjects = new HashSet<>( requiredSelectors.size() + optionalSelectors.size() );\n            selectedProjects.addAll( getProjectsBySelectors( request, projects, requiredSelectors, true ) );\n            selectedProjects.addAll( getProjectsBySelectors( request, projects, optionalSelectors, false ) );\n\n            \r\n            if ( !selectedProjects.isEmpty() )\n            {\n                result = new ArrayList<>( selectedProjects );\n\n                result = includeAlsoMakeTransitively( result, request, graph );\n\n                \r\n                List<MavenProject> sortedProjects = graph.getSortedProjects();\n                result.sort( comparing( sortedProjects::indexOf ) );\n            }\n        }\n\n        return result;\n    }\n","date":"2021-03-22 21:41:59","endLine":203,"groupId":"10666","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"trimSelectedProjects","params":"(List<MavenProject>projects@ProjectDependencyGraphgraph@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e7/47868394615d31ee4318ba966a5ccbd691058f.src","preCode":"    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        ProjectActivation projectActivation = request.getProjectActivation();\n        Set<String> requiredSelectors = projectActivation.getRequiredActiveProjectSelectors();\n        Set<String> optionalSelectors = projectActivation.getOptionalActiveProjectSelectors();\n        if ( !requiredSelectors.isEmpty() || !optionalSelectors.isEmpty() )\n        {\n            Set<MavenProject> selectedProjects = new HashSet<>( requiredSelectors.size() + optionalSelectors.size() );\n            selectedProjects.addAll( getProjectsBySelectors( request, projects, requiredSelectors, true ) );\n            selectedProjects.addAll( getProjectsBySelectors( request, projects, optionalSelectors, false ) );\n\n            \r\n            if ( !selectedProjects.isEmpty() )\n            {\n                result = new ArrayList<>( selectedProjects );\n\n                result = includeAlsoMakeTransitively( result, request, graph );\n\n                \r\n                List<MavenProject> sortedProjects = graph.getSortedProjects();\n                result.sort( comparing( sortedProjects::indexOf ) );\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"},{"authorDate":"2021-03-22 23:10:05","commitOrder":8,"curCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,\n                                                     MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        ProjectActivation projectActivation = request.getProjectActivation();\n        Set<String> requiredSelectors = projectActivation.getRequiredInactiveProjectSelectors();\n        Set<String> optionalSelectors = projectActivation.getOptionalInactiveProjectSelectors();\n        if ( !requiredSelectors.isEmpty() || !optionalSelectors.isEmpty() )\n        {\n            Set<MavenProject> excludedProjects = new HashSet<>( requiredSelectors.size() + optionalSelectors.size() );\n            List<MavenProject> allProjects = graph.getAllProjects();\n            excludedProjects.addAll( getProjectsBySelectors( request, allProjects, requiredSelectors, true ) );\n            excludedProjects.addAll( getProjectsBySelectors( request, allProjects, optionalSelectors, false ) );\n\n            result = new ArrayList<>( projects );\n            result.removeAll( excludedProjects );\n\n            if ( result.isEmpty() )\n            {\n                boolean isPlural = excludedProjects.size() > 1;\n                String message = String.format( \"The project exclusion%s in --projects/-pl resulted in an \"\n                        + \"empty reactor, please correct %s.\", isPlural ? \"s\" : \"\", isPlural ? \"them\" : \"it\" );\n                throw new MavenExecutionException( message, request.getPom() );\n            }\n        }\n\n        return result;\n    }\n","date":"2021-03-28 00:38:05","endLine":301,"groupId":"10666","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"trimExcludedProjects","params":"(List<MavenProject>projects@ProjectDependencyGraphgraph@MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0d/bd03956104b8e4ed03f83077f848112f3e0192.src","preCode":"    private List<MavenProject> trimExcludedProjects( List<MavenProject> projects, MavenExecutionRequest request )\n        throws MavenExecutionException\n    {\n        List<MavenProject> result = projects;\n\n        ProjectActivation projectActivation = request.getProjectActivation();\n        Set<String> requiredSelectors = projectActivation.getRequiredInactiveProjectSelectors();\n        Set<String> optionalSelectors = projectActivation.getOptionalInactiveProjectSelectors();\n        if ( !requiredSelectors.isEmpty() || !optionalSelectors.isEmpty() )\n        {\n            Set<MavenProject> excludedProjects = new HashSet<>( requiredSelectors.size() + optionalSelectors.size() );\n            excludedProjects.addAll( getProjectsBySelectors( request, projects, requiredSelectors, true ) );\n            excludedProjects.addAll( getProjectsBySelectors( request, projects, optionalSelectors, false ) );\n\n            result = new ArrayList<>( projects );\n\n            for ( MavenProject excludedProject : excludedProjects )\n            {\n                boolean isExcludedProjectRemoved = result.remove( excludedProject );\n\n                if ( isExcludedProjectRemoved )\n                {\n                    List<MavenProject> children = excludedProject.getCollectedProjects();\n                    if ( children != null )\n                    {\n                        result.removeAll( children );\n                    }\n                }\n            }\n\n            if ( result.isEmpty() )\n            {\n                boolean isPlural = excludedProjects.size() > 1;\n                String message = String.format( \"The project exclusion%s in --projects/-pl resulted in an \"\n                        + \"empty reactor, please correct %s.\", isPlural ? \"s\" : \"\", isPlural ? \"them\" : \"it\" );\n                throw new MavenExecutionException( message, request.getPom() );\n            }\n        }\n\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/graph/DefaultGraphBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"c4cd93d55fc78d335512095c263ed00f8c0faede","commitMessage":"@@@[MNG-7102] Exclude all children of aggregators.  even if the aggregator was already removed from the reactor.\n","date":"2021-03-28 00:38:05","modifiedFileCount":"2","status":"M","submitter":"Martin Kanters"}]
