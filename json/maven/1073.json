[{"authorTime":"2009-06-01 06:42:47","codes":[{"authorDate":"2009-06-17 23:00:06","commitOrder":2,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","date":"2009-06-17 23:00:06","endLine":156,"groupId":"3661","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/d6/96c4bd74dc84ce1f608a482d3cc1a70bd216de.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2009-06-01 06:42:47","commitOrder":2,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","date":"2009-06-01 06:42:47","endLine":115,"groupId":"868","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/02/0d7adff62a16be2b897ea02593ecfcd1a503f3.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"NB"}],"commitId":"3843481a3b472322f27137c7751ebfb350b055e6","commitMessage":"@@@o Fixed order of inherited plugins\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@785644 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-06-17 23:00:06","modifiedFileCount":"4","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-09-01 05:31:01","codes":[{"authorDate":"2009-06-17 23:00:06","commitOrder":3,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","date":"2009-06-17 23:00:06","endLine":156,"groupId":"3661","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/d6/96c4bd74dc84ce1f608a482d3cc1a70bd216de.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"},{"authorDate":"2009-09-01 05:31:01","commitOrder":3,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>( merged );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                        unmanaged.remove( key );\n                    }\n                    merged.put( key, element );\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Iterator<Plugin> it = pluginMgmt.getPlugins().iterator(); it.hasNext(); )\n                        {\n                            Plugin managedPlugin = it.next();\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","date":"2009-09-01 05:31:01","endLine":151,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3b/e0394f26d36d9f4a275c9e17197701c2dca030.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"26f1a5bfdaeb398d432bb6e8f8f5ce6c2d9a5882","commitMessage":"@@@[MNG-4332] [regression] Default plugin executions contributed by packaging execute after executions from plugin management\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@809751 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-09-01 05:31:01","modifiedFileCount":"8","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-09-08 03:15:51","codes":[{"authorDate":"2009-06-17 23:00:06","commitOrder":4,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","date":"2009-06-17 23:00:06","endLine":156,"groupId":"3661","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/d6/96c4bd74dc84ce1f608a482d3cc1a70bd216de.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"},{"authorDate":"2009-09-08 03:15:51","commitOrder":4,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>( merged );\n\n                Map<Object, List<Plugin>> predecessors = new HashMap<Object, List<Plugin>>();\n\n                List<Plugin> pending = new ArrayList<Plugin>( tgt.size() );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                        unmanaged.remove( key );\n                        merged.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Iterator<Plugin> it = pluginMgmt.getPlugins().iterator(); it.hasNext(); )\n                        {\n                            Plugin managedPlugin = it.next();\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n\n                for ( Map.Entry<Object, Plugin> entry : merged.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n\n                    result.add( entry.getValue() );\n                }\n\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-09-08 03:15:51","endLine":182,"groupId":"5976","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3a/e3eb9c9a4092a0075369beebc7e3f0d5c57ea7.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>( merged );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                        unmanaged.remove( key );\n                    }\n                    merged.put( key, element );\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Iterator<Plugin> it = pluginMgmt.getPlugins().iterator(); it.hasNext(); )\n                        {\n                            Plugin managedPlugin = it.next();\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"b614de42531d9efa76c717056431de95eeca6374","commitMessage":"@@@[MNG-4341] [regression] Plugins are not executed in POM order\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@812259 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-09-08 03:15:51","modifiedFileCount":"2","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-09-08 23:24:19","codes":[{"authorDate":"2009-06-17 23:00:06","commitOrder":5,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","date":"2009-06-17 23:00:06","endLine":156,"groupId":"3661","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/d6/96c4bd74dc84ce1f608a482d3cc1a70bd216de.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"},{"authorDate":"2009-09-08 23:24:19","commitOrder":5,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>();\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        unmanaged.put( key, element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Iterator<Plugin> it = pluginMgmt.getPlugins().iterator(); it.hasNext(); )\n                        {\n                            Plugin managedPlugin = it.next();\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-09-08 23:24:19","endLine":157,"groupId":"3661","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/02/6cd101185332c0380d2acdc1aec9c8428e084f.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>( merged );\n\n                Map<Object, List<Plugin>> predecessors = new HashMap<Object, List<Plugin>>();\n\n                List<Plugin> pending = new ArrayList<Plugin>( tgt.size() );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                        unmanaged.remove( key );\n                        merged.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Iterator<Plugin> it = pluginMgmt.getPlugins().iterator(); it.hasNext(); )\n                        {\n                            Plugin managedPlugin = it.next();\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n\n                for ( Map.Entry<Object, Plugin> entry : merged.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n\n                    result.add( entry.getValue() );\n                }\n\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"73d7e4f891b73066a13b6382556b9e53b20c2944","commitMessage":"@@@[MNG-4344] [regression] Managed executions of plugins introduced by default lifecycle bindings execute before explicitly defined plugins\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@812550 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-09-08 23:24:19","modifiedFileCount":"1","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-09-08 23:24:19","codes":[{"authorDate":"2009-09-11 06:47:12","commitOrder":6,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","date":"2009-09-11 06:47:12","endLine":153,"groupId":"4210","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0a/497d51951681cb07d3ec63332a291881781288.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )\n                {\n                    ReportPlugin element = it.next();\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2009-09-08 23:24:19","commitOrder":6,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>();\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        unmanaged.put( key, element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Iterator<Plugin> it = pluginMgmt.getPlugins().iterator(); it.hasNext(); )\n                        {\n                            Plugin managedPlugin = it.next();\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-09-08 23:24:19","endLine":157,"groupId":"3661","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/02/6cd101185332c0380d2acdc1aec9c8428e084f.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>();\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        unmanaged.put( key, element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Iterator<Plugin> it = pluginMgmt.getPlugins().iterator(); it.hasNext(); )\n                        {\n                            Plugin managedPlugin = it.next();\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"}],"commitId":"05b59c8935981b1876f096bba0362401ed9cd4d7","commitMessage":"@@@fixed errors reported by Checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@813627 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-09-11 06:47:12","modifiedFileCount":"12","status":"M","submitter":"Herve Boutemy"},{"authorTime":"2013-06-12 04:21:54","codes":[{"authorDate":"2009-09-11 06:47:12","commitOrder":7,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","date":"2009-09-11 06:47:12","endLine":153,"groupId":"4210","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0a/497d51951681cb07d3ec63332a291881781288.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"},{"authorDate":"2013-06-12 04:21:54","commitOrder":7,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        unmanaged.put( key, element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2013-06-12 04:21:54","endLine":159,"groupId":"1765","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/c3/b3753c77b5054bcdf0fd1e43109aa69ac0152f.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>();\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        unmanaged.put( key, element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Iterator<Plugin> it = pluginMgmt.getPlugins().iterator(); it.hasNext(); )\n                        {\n                            Plugin managedPlugin = it.next();\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"d92746dc25bdce073571cf6fd8f78d6573fe75f0","commitMessage":"@@@Code cleanup - Maven requires Java 5+ : Replace for and while loops by for each\n","date":"2013-06-12 04:21:54","modifiedFileCount":"20","status":"M","submitter":"Arnaud He?ritier"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":8,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<>( merged.values() ) );\n            }\n        }\n","date":"2015-06-20 16:56:07","endLine":211,"groupId":"767","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/ae/d837bf2b89479b2f150add0c77f684687d621d.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2015-03-06 14:12:21","commitOrder":8,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        unmanaged.put( key, element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2015-06-20 16:56:07","endLine":158,"groupId":"1765","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/14/01e30a1e094abd0a646655b49204ebce2e7ebf.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<Object, Plugin>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        unmanaged.put( key, element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2019-01-14 02:18:30","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":9,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<>( merged.values() ) );\n            }\n        }\n","date":"2015-06-20 16:56:07","endLine":211,"groupId":"767","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/ae/d837bf2b89479b2f150add0c77f684687d621d.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"N"},{"authorDate":"2019-01-14 02:18:30","commitOrder":9,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> added = new LinkedHashMap<>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        added.put( key, element );\n                    }\n                }\n\n                if ( !added.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin addedPlugin = added.get( key );\n                            if ( addedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, addedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2019-01-14 02:18:30","endLine":162,"groupId":"1765","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0a/3660b33819e94d2aee02888ba142d896c1e113.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> unmanaged = new LinkedHashMap<>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        unmanaged.put( key, element );\n                    }\n                }\n\n                if ( !unmanaged.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin unmanagedPlugin = unmanaged.get( key );\n                            if ( unmanagedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, unmanagedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"fdf5d921a36cd41dbee43b6b89e96d22d8895cdb","commitMessage":"@@@renamed variables for better understanding","date":"2019-01-14 02:18:30","modifiedFileCount":"1","status":"M","submitter":"Herv? Boutemy"},{"authorTime":"2019-12-21 22:03:04","codes":[{"authorDate":"2019-12-21 22:03:04","commitOrder":10,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<>( merged.values() ) );\n            }\n        }\n","date":"2019-12-21 22:03:04","endLine":218,"groupId":"1765","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/2f/9553b81e6a15600fd28339f6def4b5d0a2e70e.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-12-21 22:03:04","commitOrder":10,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> added = new LinkedHashMap<>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey().apply( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        added.put( key, element );\n                    }\n                }\n\n                if ( !added.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey().apply( managedPlugin );\n                            Plugin addedPlugin = added.get( key );\n                            if ( addedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, addedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2019-12-21 22:03:04","endLine":162,"groupId":"1765","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/6e/c379a19b55f6427b147b3b7a8dea45ba447c09.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> added = new LinkedHashMap<>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        added.put( key, element );\n                    }\n                }\n\n                if ( !added.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey( managedPlugin );\n                            Plugin addedPlugin = added.get( key );\n                            if ( addedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, addedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"11b8b2d5d4f327ad3e38275015a3aafbdc2c2c5c","commitMessage":"@@@[MNG-6824] ModelMerger is broken\nFix modules\nApply Java 8 Functions\n","date":"2019-12-21 22:03:04","modifiedFileCount":"7","status":"M","submitter":"rfscholte"},{"authorTime":"2019-01-14 18:50:57","codes":[{"authorDate":"2019-12-21 22:03:04","commitOrder":11,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<>( merged.values() ) );\n            }\n        }\n","date":"2019-12-21 22:03:04","endLine":218,"groupId":"1765","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/2f/9553b81e6a15600fd28339f6def4b5d0a2e70e.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"},{"authorDate":"2019-01-14 18:50:57","commitOrder":11,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> added = new LinkedHashMap<>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey().apply( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        added.put( key, element );\n                    }\n                }\n\n                if ( !added.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey().apply( managedPlugin );\n                            Plugin addedPlugin = \r\n                                ( managedPlugin.getVersion() == null ) ? added.get( key ) : added.remove( key );\n                            if ( addedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, addedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n\n                    if ( !added.isEmpty() )\n                    {\n                        \r\n                        context.put( NO_VERSION_PLUGINS, added.values() );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2020-02-06 15:58:05","endLine":188,"groupId":"1765","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/86/07909988d9d60f02c8b7085a51dacfaea31961.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> added = new LinkedHashMap<>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey().apply( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        added.put( key, element );\n                    }\n                }\n\n                if ( !added.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey().apply( managedPlugin );\n                            Plugin addedPlugin = added.get( key );\n                            if ( addedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, addedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"d9bf929c74c7e72da22610d92bd53707a0588179","commitMessage":"@@@[MNG-6562] added WARNING on default bindings plugins unlocked versions","date":"2020-02-06 15:58:05","modifiedFileCount":"1","status":"M","submitter":"Herv? Boutemy"},{"authorTime":"2020-06-20 16:16:15","codes":[{"authorDate":"2019-12-21 22:03:04","commitOrder":12,"curCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<>( merged.values() ) );\n            }\n        }\n","date":"2019-12-21 22:03:04","endLine":218,"groupId":"1073","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"mergeReporting_Plugins","params":"(Reportingtarget@Reportingsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/2f/9553b81e6a15600fd28339f6def4b5d0a2e70e.src","preCode":"        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<ReportPlugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<ReportPlugin> tgt = target.getPlugins();\n                Map<Object, ReportPlugin> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( ReportPlugin element : tgt )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                for ( ReportPlugin element : src )\n                {\n                    Object key = getReportPluginKey().apply( element );\n                    ReportPlugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergeReportPlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"},{"authorDate":"2020-06-20 16:16:15","commitOrder":12,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> added = new LinkedHashMap<>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey().apply( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        added.put( key, element );\n                    }\n                }\n\n                if ( !added.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey().apply( managedPlugin );\n                            Plugin addedPlugin = added.get( key );\n                            if ( addedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, addedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2020-06-20 16:16:15","endLine":165,"groupId":"1073","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/6f/fcb06b823f1ad32b21b478d457b2ac4b7e7c58.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n\n                Map<Object, Plugin> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                Map<Object, Plugin> added = new LinkedHashMap<>();\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey().apply( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                        added.put( key, element );\n                    }\n                }\n\n                if ( !added.isEmpty() )\n                {\n                    PluginManagement pluginMgmt = (PluginManagement) context.get( PLUGIN_MANAGEMENT );\n                    if ( pluginMgmt != null )\n                    {\n                        for ( Plugin managedPlugin : pluginMgmt.getPlugins() )\n                        {\n                            Object key = getPluginKey().apply( managedPlugin );\n                            Plugin addedPlugin = \r\n                                ( managedPlugin.getVersion() == null ) ? added.get( key ) : added.remove( key );\n                            if ( addedPlugin != null )\n                            {\n                                Plugin plugin = managedPlugin.clone();\n                                mergePlugin( plugin, addedPlugin, sourceDominant, Collections.emptyMap() );\n                                merged.put( key, plugin );\n                            }\n                        }\n                    }\n\n                    if ( !added.isEmpty() )\n                    {\n                        \r\n                        context.put( NO_VERSION_PLUGINS, added.values() );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( merged.values() );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"c7aa002c749996f46ae04f1d1c1e1390b7374f7e","commitMessage":"@@@Merge remote-tracking branch 'remotes/origin/MNG-6562'\n","date":"2020-06-20 16:16:15","modifiedFileCount":"5","status":"M","submitter":"rfscholte"}]
