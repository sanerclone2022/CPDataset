[{"authorTime":"2009-06-28 17:39:49","codes":[{"authorDate":"2009-06-28 17:39:49","commitOrder":1,"curCode":"    public void testRuntimeResolution()\n    throws Exception\n    {\n    \tMetadataGraph res;\n    \t\n    \tres = resolver.resolveConflicts( graph, ArtifactScopeEnum.runtime );\n    \t\n    \tassertNotNull(\"null graph after resolver\", res );\n    \tassertNotNull(\"no vertices in the resulting graph after resolver\", res.getVertices() );\n    \tassertNotNull(\"no edges in the resulting graph after resolver\", res.getExcidentEdges(v1) );\n\n    \tassertEquals( \"wrong # of vertices in the resulting graph after resolver\", 4, res.getVertices().size() );\n    \tassertEquals( \"wrong # of excident edges in the resulting graph entry after resolver\", 2, res.getExcidentEdges(v1).size() );\n\n    \tassertEquals( \"wrong # of v2 incident edges in the resulting graph after resolver\", 1, res.getIncidentEdges(v2).size() );\n    \tassertEquals( \"wrong edge v1-v2 in the resulting graph after resolver\", \"1.2\", res.getIncidentEdges(v2).get(0).getVersion() );\n\n    \tassertEquals( \"wrong # of edges v1-v3 in the resulting graph after resolver\", 1, res.getIncidentEdges(v3).size() );\n    \tassertEquals( \"wrong edge v1-v3 in the resulting graph after resolver\", \"1.1\", res.getIncidentEdges(v3).get(0).getVersion() );\n\n    \tassertEquals( \"wrong # of edges v3-v4 in the resulting graph after resolver\", 1, res.getIncidentEdges(v4).size() );\n    \tassertEquals( \"wrong edge v3-v4 in the resulting graph after resolver\", \"1.1\", res.getIncidentEdges(v4).get(0).getVersion() );\n    }\n","date":"2009-06-28 17:39:49","endLine":112,"groupId":"6405","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRuntimeResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/b2/2eba5ea102a1c437ac0da244d82b7610b20e15.src","preCode":"    public void testRuntimeResolution()\n    throws Exception\n    {\n    \tMetadataGraph res;\n    \t\n    \tres = resolver.resolveConflicts( graph, ArtifactScopeEnum.runtime );\n    \t\n    \tassertNotNull(\"null graph after resolver\", res );\n    \tassertNotNull(\"no vertices in the resulting graph after resolver\", res.getVertices() );\n    \tassertNotNull(\"no edges in the resulting graph after resolver\", res.getExcidentEdges(v1) );\n\n    \tassertEquals( \"wrong # of vertices in the resulting graph after resolver\", 4, res.getVertices().size() );\n    \tassertEquals( \"wrong # of excident edges in the resulting graph entry after resolver\", 2, res.getExcidentEdges(v1).size() );\n\n    \tassertEquals( \"wrong # of v2 incident edges in the resulting graph after resolver\", 1, res.getIncidentEdges(v2).size() );\n    \tassertEquals( \"wrong edge v1-v2 in the resulting graph after resolver\", \"1.2\", res.getIncidentEdges(v2).get(0).getVersion() );\n\n    \tassertEquals( \"wrong # of edges v1-v3 in the resulting graph after resolver\", 1, res.getIncidentEdges(v3).size() );\n    \tassertEquals( \"wrong edge v1-v3 in the resulting graph after resolver\", \"1.1\", res.getIncidentEdges(v3).get(0).getVersion() );\n\n    \tassertEquals( \"wrong # of edges v3-v4 in the resulting graph after resolver\", 1, res.getIncidentEdges(v4).size() );\n    \tassertEquals( \"wrong edge v3-v4 in the resulting graph after resolver\", \"1.1\", res.getIncidentEdges(v4).get(0).getVersion() );\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/repository/metadata/DefaultGraphConflictResolverTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"},{"authorDate":"2009-06-28 17:39:49","commitOrder":1,"curCode":"    public void testTestResolution()\n    throws Exception\n    {\n    \tMetadataGraph res;\n    \t\n    \tres = resolver.resolveConflicts( graph, ArtifactScopeEnum.test );\n    \t\n    \tassertNotNull(\"null graph after resolver\", res );\n    \tassertNotNull(\"no vertices in the resulting graph after resolver\", res.getVertices() );\n    \tassertNotNull(\"no edges in the resulting graph after resolver\", res.getExcidentEdges(v1) );\n\n    \tassertEquals( \"wrong # of vertices in the resulting graph after resolver\", 4, res.getVertices().size() );\n    \tassertEquals( \"wrong # of excident edges in the resulting graph entry after resolver\", 2, res.getExcidentEdges(v1).size() );\n\n    \tassertEquals( \"wrong # of v2 incident edges in the resulting graph after resolver\", 1, res.getIncidentEdges(v2).size() );\n    \tassertEquals( \"wrong edge v1-v2 in the resulting graph after resolver\", \"1.2\", res.getIncidentEdges(v2).get(0).getVersion() );\n\n    \tassertEquals( \"wrong # of edges v1-v3 in the resulting graph after resolver\", 1, res.getIncidentEdges(v3).size() );\n    \tassertEquals( \"wrong edge v1-v3 in the resulting graph after resolver\", \"1.1\", res.getIncidentEdges(v3).get(0).getVersion() );\n\n    \tassertEquals( \"wrong # of edges v3-v4 in the resulting graph after resolver\", 1, res.getIncidentEdges(v4).size() );\n    \tassertEquals( \"wrong edge v3-v4 in the resulting graph after resolver\", \"1.2\", res.getIncidentEdges(v4).get(0).getVersion() );\n    }\n","date":"2009-06-28 17:39:49","endLine":136,"groupId":"6405","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTestResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/b2/2eba5ea102a1c437ac0da244d82b7610b20e15.src","preCode":"    public void testTestResolution()\n    throws Exception\n    {\n    \tMetadataGraph res;\n    \t\n    \tres = resolver.resolveConflicts( graph, ArtifactScopeEnum.test );\n    \t\n    \tassertNotNull(\"null graph after resolver\", res );\n    \tassertNotNull(\"no vertices in the resulting graph after resolver\", res.getVertices() );\n    \tassertNotNull(\"no edges in the resulting graph after resolver\", res.getExcidentEdges(v1) );\n\n    \tassertEquals( \"wrong # of vertices in the resulting graph after resolver\", 4, res.getVertices().size() );\n    \tassertEquals( \"wrong # of excident edges in the resulting graph entry after resolver\", 2, res.getExcidentEdges(v1).size() );\n\n    \tassertEquals( \"wrong # of v2 incident edges in the resulting graph after resolver\", 1, res.getIncidentEdges(v2).size() );\n    \tassertEquals( \"wrong edge v1-v2 in the resulting graph after resolver\", \"1.2\", res.getIncidentEdges(v2).get(0).getVersion() );\n\n    \tassertEquals( \"wrong # of edges v1-v3 in the resulting graph after resolver\", 1, res.getIncidentEdges(v3).size() );\n    \tassertEquals( \"wrong edge v1-v3 in the resulting graph after resolver\", \"1.1\", res.getIncidentEdges(v3).get(0).getVersion() );\n\n    \tassertEquals( \"wrong # of edges v3-v4 in the resulting graph after resolver\", 1, res.getIncidentEdges(v4).size() );\n    \tassertEquals( \"wrong edge v3-v4 in the resulting graph after resolver\", \"1.2\", res.getIncidentEdges(v4).get(0).getVersion() );\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/repository/metadata/DefaultGraphConflictResolverTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"}],"commitId":"ba289ad502877ac160359e29fe40dc52cba8207c","commitMessage":"@@@MNG-4221: First phase of changing the direction of the dependencies so that maven-compat only points toward the core. The core cannot depend on anything in maven-compat.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@789077 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-06-28 17:39:49","modifiedFileCount":"20","status":"B","submitter":"Jason van Zyl"},{"authorTime":"2021-01-15 22:07:06","codes":[{"authorDate":"2021-01-15 22:07:06","commitOrder":2,"curCode":"    public void testRuntimeResolution()\n    throws Exception\n    {\n        MetadataGraph res;\n\n        res = resolver.resolveConflicts( graph, ArtifactScopeEnum.runtime );\n\n        assertNotNull( res, \"null graph after resolver\" );\n        assertNotNull( res.getVertices(), \"no vertices in the resulting graph after resolver\" );\n        assertNotNull( res.getExcidentEdges(v1), \"no edges in the resulting graph after resolver\" );\n\n        assertEquals( 4, res.getVertices().size(), \"wrong # of vertices in the resulting graph after resolver\" );\n        assertEquals( 2, res.getExcidentEdges(v1).size(), \"wrong # of excident edges in the resulting graph entry after resolver\" );\n\n        assertEquals( 1, res.getIncidentEdges(v2).size(), \"wrong # of v2 incident edges in the resulting graph after resolver\" );\n        assertEquals( \"1.2\", res.getIncidentEdges(v2).get(0).getVersion(), \"wrong edge v1-v2 in the resulting graph after resolver\" );\n\n        assertEquals( 1, res.getIncidentEdges(v3).size(), \"wrong # of edges v1-v3 in the resulting graph after resolver\" );\n        assertEquals( \"1.1\", res.getIncidentEdges(v3).get(0).getVersion(), \"wrong edge v1-v3 in the resulting graph after resolver\" );\n\n        assertEquals( 1, res.getIncidentEdges(v4).size(), \"wrong # of edges v3-v4 in the resulting graph after resolver\" );\n        assertEquals( \"1.1\", res.getIncidentEdges(v4).get(0).getVersion(), \"wrong edge v3-v4 in the resulting graph after resolver\" );\n    }\n","date":"2021-01-15 22:07:06","endLine":128,"groupId":"10216","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRuntimeResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/a4/1464a1c3b022c8d4257ef301a561f37b7a0816.src","preCode":"    public void testRuntimeResolution()\n    throws Exception\n    {\n        MetadataGraph res;\n\n        res = resolver.resolveConflicts( graph, ArtifactScopeEnum.runtime );\n\n        assertNotNull(\"null graph after resolver\", res );\n        assertNotNull(\"no vertices in the resulting graph after resolver\", res.getVertices() );\n        assertNotNull(\"no edges in the resulting graph after resolver\", res.getExcidentEdges(v1) );\n\n        assertEquals( \"wrong # of vertices in the resulting graph after resolver\", 4, res.getVertices().size() );\n        assertEquals( \"wrong # of excident edges in the resulting graph entry after resolver\", 2, res.getExcidentEdges(v1).size() );\n\n        assertEquals( \"wrong # of v2 incident edges in the resulting graph after resolver\", 1, res.getIncidentEdges(v2).size() );\n        assertEquals( \"wrong edge v1-v2 in the resulting graph after resolver\", \"1.2\", res.getIncidentEdges(v2).get(0).getVersion() );\n\n        assertEquals( \"wrong # of edges v1-v3 in the resulting graph after resolver\", 1, res.getIncidentEdges(v3).size() );\n        assertEquals( \"wrong edge v1-v3 in the resulting graph after resolver\", \"1.1\", res.getIncidentEdges(v3).get(0).getVersion() );\n\n        assertEquals( \"wrong # of edges v3-v4 in the resulting graph after resolver\", 1, res.getIncidentEdges(v4).size() );\n        assertEquals( \"wrong edge v3-v4 in the resulting graph after resolver\", \"1.1\", res.getIncidentEdges(v4).get(0).getVersion() );\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/repository/metadata/DefaultGraphConflictResolverTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2021-01-15 22:07:06","commitOrder":2,"curCode":"    public void testTestResolution()\n    throws Exception\n    {\n        MetadataGraph res;\n\n        res = resolver.resolveConflicts( graph, ArtifactScopeEnum.test );\n\n        assertNotNull( res, \"null graph after resolver\" );\n        assertNotNull( res.getVertices(), \"no vertices in the resulting graph after resolver\" );\n        assertNotNull( res.getExcidentEdges(v1), \"no edges in the resulting graph after resolver\" );\n\n        assertEquals( 4, res.getVertices().size(), \"wrong # of vertices in the resulting graph after resolver\" );\n        assertEquals( 2, res.getExcidentEdges(v1).size(), \"wrong # of excident edges in the resulting graph entry after resolver\" );\n\n        assertEquals( 1, res.getIncidentEdges(v2).size(), \"wrong # of v2 incident edges in the resulting graph after resolver\" );\n        assertEquals( \"1.2\", res.getIncidentEdges(v2).get(0).getVersion(), \"wrong edge v1-v2 in the resulting graph after resolver\" );\n\n        assertEquals(  1, res.getIncidentEdges(v3).size(), \"wrong # of edges v1-v3 in the resulting graph after resolver\" );\n        assertEquals( \"1.1\", res.getIncidentEdges(v3).get(0).getVersion(), \"wrong edge v1-v3 in the resulting graph after resolver\" );\n\n        assertEquals( 1, res.getIncidentEdges(v4).size(), \"wrong # of edges v3-v4 in the resulting graph after resolver\" );\n        assertEquals( \"1.2\", res.getIncidentEdges(v4).get(0).getVersion(), \"wrong edge v3-v4 in the resulting graph after resolver\" );\n    }\n","date":"2021-01-15 22:07:06","endLine":153,"groupId":"10216","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTestResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/a4/1464a1c3b022c8d4257ef301a561f37b7a0816.src","preCode":"    public void testTestResolution()\n    throws Exception\n    {\n        MetadataGraph res;\n\n        res = resolver.resolveConflicts( graph, ArtifactScopeEnum.test );\n\n        assertNotNull(\"null graph after resolver\", res );\n        assertNotNull(\"no vertices in the resulting graph after resolver\", res.getVertices() );\n        assertNotNull(\"no edges in the resulting graph after resolver\", res.getExcidentEdges(v1) );\n\n        assertEquals( \"wrong # of vertices in the resulting graph after resolver\", 4, res.getVertices().size() );\n        assertEquals( \"wrong # of excident edges in the resulting graph entry after resolver\", 2, res.getExcidentEdges(v1).size() );\n\n        assertEquals( \"wrong # of v2 incident edges in the resulting graph after resolver\", 1, res.getIncidentEdges(v2).size() );\n        assertEquals( \"wrong edge v1-v2 in the resulting graph after resolver\", \"1.2\", res.getIncidentEdges(v2).get(0).getVersion() );\n\n        assertEquals( \"wrong # of edges v1-v3 in the resulting graph after resolver\", 1, res.getIncidentEdges(v3).size() );\n        assertEquals( \"wrong edge v1-v3 in the resulting graph after resolver\", \"1.1\", res.getIncidentEdges(v3).get(0).getVersion() );\n\n        assertEquals( \"wrong # of edges v3-v4 in the resulting graph after resolver\", 1, res.getIncidentEdges(v4).size() );\n        assertEquals( \"wrong edge v3-v4 in the resulting graph after resolver\", \"1.2\", res.getIncidentEdges(v4).get(0).getVersion() );\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/repository/metadata/DefaultGraphConflictResolverTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"bb916d0784c7631866167928e4d0615df3317567","commitMessage":"@@@[MNG-7035] Migrate unit tests to Unit 5\n\nSigned-off-by: rfscholte <rfscholte@apache.org>\n","date":"2021-01-15 22:07:06","modifiedFileCount":"208","status":"M","submitter":"Guillaume Nodet"}]
