[{"authorTime":"2016-12-12 06:36:04","codes":[{"authorDate":"2016-12-12 06:36:04","commitOrder":1,"curCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionResult result )\n    {\n        Versioning versioning = null;\n\n        FileInputStream fis = null;\n        try\n        {\n            if ( metadata != null )\n            {\n\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        fis = new FileInputStream( metadata.getFile() );\n                        org.apache.maven.artifact.repository.metadata.Metadata m =\n                            new MetadataXpp3Reader().read( fis, false );\n                        versioning = m.getVersioning();\n\n                        \r\n\r\n\r\n\r\n\n                        if ( versioning != null && repository instanceof LocalRepository )\n                        {\n                            if ( versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0 )\n                            {\n                                Versioning repaired = new Versioning();\n                                repaired.setLastUpdated( versioning.getLastUpdated() );\n                                Snapshot snapshot = new Snapshot();\n                                snapshot.setLocalCopy( true );\n                                repaired.setSnapshot( snapshot );\n                                versioning = repaired;\n\n                                throw new IOException( \"Snapshot information corrupted with remote repository data\"\n                                                           + \", please verify that no remote repository uses the id '\"\n                                                           + repository.getId() + \"'\" );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n        finally\n        {\n            IOUtil.close( fis );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","date":"2017-02-01 14:59:53","endLine":381,"groupId":"311","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readVersions","params":"(RepositorySystemSessionsession@RequestTracetrace@Metadatametadata@ArtifactRepositoryrepository@VersionResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/2b/0890b15ac15a19c6461be577289bf50e7d565c.src","preCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionResult result )\n    {\n        Versioning versioning = null;\n\n        FileInputStream fis = null;\n        try\n        {\n            if ( metadata != null )\n            {\n\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        fis = new FileInputStream( metadata.getFile() );\n                        org.apache.maven.artifact.repository.metadata.Metadata m =\n                            new MetadataXpp3Reader().read( fis, false );\n                        versioning = m.getVersioning();\n\n                        \r\n\r\n\r\n\r\n\n                        if ( versioning != null && repository instanceof LocalRepository )\n                        {\n                            if ( versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0 )\n                            {\n                                Versioning repaired = new Versioning();\n                                repaired.setLastUpdated( versioning.getLastUpdated() );\n                                Snapshot snapshot = new Snapshot();\n                                snapshot.setLocalCopy( true );\n                                repaired.setSnapshot( snapshot );\n                                versioning = repaired;\n\n                                throw new IOException( \"Snapshot information corrupted with remote repository data\"\n                                                           + \", please verify that no remote repository uses the id '\"\n                                                           + repository.getId() + \"'\" );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n        finally\n        {\n            IOUtil.close( fis );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"B"},{"authorDate":"2016-12-12 06:36:04","commitOrder":1,"curCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionRangeResult result )\n    {\n        Versioning versioning = null;\n\n        FileInputStream fis = null;\n        try\n        {\n            if ( metadata != null )\n            {\n\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        fis = new FileInputStream( metadata.getFile() );\n                        org.apache.maven.artifact.repository.metadata.Metadata m =\n                            new MetadataXpp3Reader().read( fis, false );\n                        versioning = m.getVersioning();\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n        finally\n        {\n            IOUtil.close( fis );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","date":"2017-02-01 14:59:53","endLine":293,"groupId":"311","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readVersions","params":"(RepositorySystemSessionsession@RequestTracetrace@Metadatametadata@ArtifactRepositoryrepository@VersionRangeResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/dd/d3e972f52f052ab20d228c4647f7545692aa82.src","preCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionRangeResult result )\n    {\n        Versioning versioning = null;\n\n        FileInputStream fis = null;\n        try\n        {\n            if ( metadata != null )\n            {\n\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        fis = new FileInputStream( metadata.getFile() );\n                        org.apache.maven.artifact.repository.metadata.Metadata m =\n                            new MetadataXpp3Reader().read( fis, false );\n                        versioning = m.getVersioning();\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n        finally\n        {\n            IOUtil.close( fis );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"B"}],"commitId":"8972072e3200e2ecfe2acb6d0b2dc40b10a6bc31","commitMessage":"@@@[MNG-6110] renamed 'maven-aether-provider' to 'maven-resolver-provider'","date":"2017-02-01 14:59:53","modifiedFileCount":"0","status":"B","submitter":"Christian Schulte"},{"authorTime":"2017-03-25 05:04:37","codes":[{"authorDate":"2017-03-25 05:04:37","commitOrder":2,"curCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionResult result )\n    {\n        Versioning versioning = null;\n        try\n        {\n            if ( metadata != null )\n            {\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )\n                        {\n                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();\n\n                            \r\n\r\n\r\n\r\n\n                            if ( versioning != null && repository instanceof LocalRepository\n                                     && versioning.getSnapshot() != null\n                                     && versioning.getSnapshot().getBuildNumber() > 0 )\n                            {\n                                final Versioning repaired = new Versioning();\n                                repaired.setLastUpdated( versioning.getLastUpdated() );\n                                repaired.setSnapshot( new Snapshot() );\n                                repaired.getSnapshot().setLocalCopy( true );\n                                versioning = repaired;\n                                throw new IOException( \"Snapshot information corrupted with remote repository data\"\n                                                           + \", please verify that no remote repository uses the id '\"\n                                                           + repository.getId() + \"'\" );\n\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","date":"2017-03-25 05:04:37","endLine":373,"groupId":"359","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readVersions","params":"(RepositorySystemSessionsession@RequestTracetrace@Metadatametadata@ArtifactRepositoryrepository@VersionResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/c2/3794bada6bfb8dee836667140450ec117e05e6.src","preCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionResult result )\n    {\n        Versioning versioning = null;\n\n        FileInputStream fis = null;\n        try\n        {\n            if ( metadata != null )\n            {\n\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        fis = new FileInputStream( metadata.getFile() );\n                        org.apache.maven.artifact.repository.metadata.Metadata m =\n                            new MetadataXpp3Reader().read( fis, false );\n                        versioning = m.getVersioning();\n\n                        \r\n\r\n\r\n\r\n\n                        if ( versioning != null && repository instanceof LocalRepository )\n                        {\n                            if ( versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0 )\n                            {\n                                Versioning repaired = new Versioning();\n                                repaired.setLastUpdated( versioning.getLastUpdated() );\n                                Snapshot snapshot = new Snapshot();\n                                snapshot.setLocalCopy( true );\n                                repaired.setSnapshot( snapshot );\n                                versioning = repaired;\n\n                                throw new IOException( \"Snapshot information corrupted with remote repository data\"\n                                                           + \", please verify that no remote repository uses the id '\"\n                                                           + repository.getId() + \"'\" );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n        finally\n        {\n            IOUtil.close( fis );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"},{"authorDate":"2017-03-25 05:04:37","commitOrder":2,"curCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionRangeResult result )\n    {\n        Versioning versioning = null;\n        try\n        {\n            if ( metadata != null )\n            {\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )\n                        {\n                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();\n                        }\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","date":"2017-03-25 05:04:37","endLine":287,"groupId":"359","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readVersions","params":"(RepositorySystemSessionsession@RequestTracetrace@Metadatametadata@ArtifactRepositoryrepository@VersionRangeResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/c1/2c9e0719fdd9b65a70a906ce449b32f44eb219.src","preCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionRangeResult result )\n    {\n        Versioning versioning = null;\n\n        FileInputStream fis = null;\n        try\n        {\n            if ( metadata != null )\n            {\n\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        fis = new FileInputStream( metadata.getFile() );\n                        org.apache.maven.artifact.repository.metadata.Metadata m =\n                            new MetadataXpp3Reader().read( fis, false );\n                        versioning = m.getVersioning();\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n        finally\n        {\n            IOUtil.close( fis );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"0931bb2cc7630cc79adb98407db13315b4a709ee","commitMessage":"@@@[MNG-6168] Fix unclosed streams\n","date":"2017-03-25 05:04:37","modifiedFileCount":"8","status":"M","submitter":"Christian Schulte"},{"authorTime":"2020-06-06 00:44:52","codes":[{"authorDate":"2020-06-06 00:44:52","commitOrder":3,"curCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionResult result )\n    {\n        Versioning versioning = null;\n        try\n        {\n            if ( metadata != null )\n            {\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        try ( InputStream in = new FileInputStream( metadata.getFile() ) )\n                        {\n                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();\n\n                            \r\n\r\n\r\n\r\n\n                            if ( versioning != null && repository instanceof LocalRepository\n                                     && versioning.getSnapshot() != null\n                                     && versioning.getSnapshot().getBuildNumber() > 0 )\n                            {\n                                final Versioning repaired = new Versioning();\n                                repaired.setLastUpdated( versioning.getLastUpdated() );\n                                repaired.setSnapshot( new Snapshot() );\n                                repaired.getSnapshot().setLocalCopy( true );\n                                versioning = repaired;\n                                throw new IOException( \"Snapshot information corrupted with remote repository data\"\n                                                           + \", please verify that no remote repository uses the id '\"\n                                                           + repository.getId() + \"'\" );\n\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","date":"2020-06-12 02:53:36","endLine":348,"groupId":"10127","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"readVersions","params":"(RepositorySystemSessionsession@RequestTracetrace@Metadatametadata@ArtifactRepositoryrepository@VersionResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/f5/f9aea6e2a9d4718183fcb05314fb668f8e274a.src","preCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionResult result )\n    {\n        Versioning versioning = null;\n        try\n        {\n            if ( metadata != null )\n            {\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )\n                        {\n                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();\n\n                            \r\n\r\n\r\n\r\n\n                            if ( versioning != null && repository instanceof LocalRepository\n                                     && versioning.getSnapshot() != null\n                                     && versioning.getSnapshot().getBuildNumber() > 0 )\n                            {\n                                final Versioning repaired = new Versioning();\n                                repaired.setLastUpdated( versioning.getLastUpdated() );\n                                repaired.setSnapshot( new Snapshot() );\n                                repaired.getSnapshot().setLocalCopy( true );\n                                versioning = repaired;\n                                throw new IOException( \"Snapshot information corrupted with remote repository data\"\n                                                           + \", please verify that no remote repository uses the id '\"\n                                                           + repository.getId() + \"'\" );\n\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"},{"authorDate":"2020-06-06 00:44:52","commitOrder":3,"curCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionRangeResult result )\n    {\n        Versioning versioning = null;\n        try\n        {\n            if ( metadata != null )\n            {\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        try ( InputStream in = new FileInputStream( metadata.getFile() ) )\n                        {\n                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();\n                        }\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","date":"2020-06-12 02:53:36","endLine":262,"groupId":"10127","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"readVersions","params":"(RepositorySystemSessionsession@RequestTracetrace@Metadatametadata@ArtifactRepositoryrepository@VersionRangeResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/b5/3d5a5073e8d5bc443935a5a11964b2b017f3ff.src","preCode":"    private Versioning readVersions( RepositorySystemSession session, RequestTrace trace, Metadata metadata,\n                                     ArtifactRepository repository, VersionRangeResult result )\n    {\n        Versioning versioning = null;\n        try\n        {\n            if ( metadata != null )\n            {\n                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )\n                {\n                    syncContext.acquire( null, Collections.singleton( metadata ) );\n\n                    if ( metadata.getFile() != null && metadata.getFile().exists() )\n                    {\n                        try ( final InputStream in = new FileInputStream( metadata.getFile() ) )\n                        {\n                            versioning = new MetadataXpp3Reader().read( in, false ).getVersioning();\n                        }\n                    }\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            invalidMetadata( session, trace, metadata, repository, e );\n            result.addException( e );\n        }\n\n        return ( versioning != null ) ? versioning : new Versioning();\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"b4725dbe068ea18b35e013bf774e3d520619e7bc","commitMessage":"@@@Fix maven-checkstyle-plugin 3.1.1 reported error\n\n - with maven-shared-resources v3","date":"2020-06-12 02:53:36","modifiedFileCount":"10","status":"M","submitter":"Sylwester Lachiewicz"}]
