[{"authorTime":"2019-07-24 10:30:12","codes":[{"authorDate":"2019-07-24 10:30:12","commitOrder":1,"curCode":"    private InnerInterpolator createInterpolator( List<? extends ValueSource> valueSources,\n                                                  List<? extends InterpolationPostProcessor> postProcessors,\n                                                  final ModelProblemCollector problems )\n    {\n        final Map<String, String> cache = new HashMap<>();\n        final StringSearchInterpolator interpolator = new StringSearchInterpolator();\n        interpolator.setCacheAnswers( true );\n        for ( ValueSource vs : valueSources )\n        {\n            interpolator.addValueSource( vs );\n        }\n        for ( InterpolationPostProcessor postProcessor : postProcessors )\n        {\n            interpolator.addPostProcessor( postProcessor );\n        }\n        final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();\n        return new InnerInterpolator()\n        {\n            @Override\n            public String interpolate( String value )\n            {\n                if ( value != null && value.contains( \"${\" ) )\n                {\n                    String c = cache.get( value );\n                    if ( c == null )\n                    {\n                        try\n                        {\n                            c = interpolator.interpolate( value, recursionInterceptor );\n                        }\n                        catch ( InterpolationException e )\n                        {\n                            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )\n                                    .setMessage( e.getMessage() ).setException( e ) );\n                        }\n                        cache.put( value, c );\n                    }\n                    return c;\n                }\n                return value;\n            }\n        };\n    }\n","date":"2019-07-24 10:30:12","endLine":152,"groupId":"6585","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createInterpolator","params":"(List<?extendsValueSource>valueSources@List<?extendsInterpolationPostProcessor>postProcessors@finalModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0a/e5bcefb339b4f4ff881de22568cec2fd459557.src","preCode":"    private InnerInterpolator createInterpolator( List<? extends ValueSource> valueSources,\n                                                  List<? extends InterpolationPostProcessor> postProcessors,\n                                                  final ModelProblemCollector problems )\n    {\n        final Map<String, String> cache = new HashMap<>();\n        final StringSearchInterpolator interpolator = new StringSearchInterpolator();\n        interpolator.setCacheAnswers( true );\n        for ( ValueSource vs : valueSources )\n        {\n            interpolator.addValueSource( vs );\n        }\n        for ( InterpolationPostProcessor postProcessor : postProcessors )\n        {\n            interpolator.addPostProcessor( postProcessor );\n        }\n        final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();\n        return new InnerInterpolator()\n        {\n            @Override\n            public String interpolate( String value )\n            {\n                if ( value != null && value.contains( \"${\" ) )\n                {\n                    String c = cache.get( value );\n                    if ( c == null )\n                    {\n                        try\n                        {\n                            c = interpolator.interpolate( value, recursionInterceptor );\n                        }\n                        catch ( InterpolationException e )\n                        {\n                            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )\n                                    .setMessage( e.getMessage() ).setException( e ) );\n                        }\n                        cache.put( value, c );\n                    }\n                    return c;\n                }\n                return value;\n            }\n        };\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"},{"authorDate":"2019-07-24 10:30:12","commitOrder":1,"curCode":"    private InnerInterpolator createInterpolator( List<? extends ValueSource> valueSources,\n                                                  List<? extends InterpolationPostProcessor> postProcessors,\n                                                  final ModelProblemCollector problems )\n    {\n        final Map<String, String> cache = new HashMap<>();\n        final StringSearchInterpolator interpolator = new StringSearchInterpolator();\n        interpolator.setCacheAnswers( true );\n        for ( ValueSource vs : valueSources )\n        {\n            interpolator.addValueSource( vs );\n        }\n        for ( InterpolationPostProcessor postProcessor : postProcessors )\n        {\n            interpolator.addPostProcessor( postProcessor );\n        }\n        final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();\n        return new InnerInterpolator()\n        {\n            @Override\n            public String interpolate( String value )\n            {\n                if ( value != null && value.contains( \"${\" ) )\n                {\n                    String c = cache.get( value );\n                    if ( c == null )\n                    {\n                        try\n                        {\n                            c = interpolator.interpolate( value, recursionInterceptor );\n                        }\n                        catch ( InterpolationException e )\n                        {\n                            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )\n                                    .setMessage( e.getMessage() ).setException( e ) );\n                        }\n                        cache.put( value, c );\n                    }\n                    return c;\n                }\n                return value;\n            }\n        };\n    }\n","date":"2019-07-24 10:30:12","endLine":136,"groupId":"6585","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createInterpolator","params":"(List<?extendsValueSource>valueSources@List<?extendsInterpolationPostProcessor>postProcessors@finalModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3c/2ea1377bddd2dabf62c99f41cf9bd1d846d12a.src","preCode":"    private InnerInterpolator createInterpolator( List<? extends ValueSource> valueSources,\n                                                  List<? extends InterpolationPostProcessor> postProcessors,\n                                                  final ModelProblemCollector problems )\n    {\n        final Map<String, String> cache = new HashMap<>();\n        final StringSearchInterpolator interpolator = new StringSearchInterpolator();\n        interpolator.setCacheAnswers( true );\n        for ( ValueSource vs : valueSources )\n        {\n            interpolator.addValueSource( vs );\n        }\n        for ( InterpolationPostProcessor postProcessor : postProcessors )\n        {\n            interpolator.addPostProcessor( postProcessor );\n        }\n        final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();\n        return new InnerInterpolator()\n        {\n            @Override\n            public String interpolate( String value )\n            {\n                if ( value != null && value.contains( \"${\" ) )\n                {\n                    String c = cache.get( value );\n                    if ( c == null )\n                    {\n                        try\n                        {\n                            c = interpolator.interpolate( value, recursionInterceptor );\n                        }\n                        catch ( InterpolationException e )\n                        {\n                            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )\n                                    .setMessage( e.getMessage() ).setException( e ) );\n                        }\n                        cache.put( value, c );\n                    }\n                    return c;\n                }\n                return value;\n            }\n        };\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"690841e9be62a93b468d48364b35608dd1b0c2a9","commitMessage":"@@@[MNG-6697] New fast model interpolator not using reflection (#261)\n\n* [MNG-6697] New fast model interpolator not using reflection\n\n* [MNG-6697] Fix management key in case a field has been modified\n\n* [MNG-6697] Remove the unused FIELDS_CACHE and make the InnerInterpolator private\n\n* [MNG-6697] Clean up the code to remove a few warnings\n","date":"2019-07-24 10:30:12","modifiedFileCount":"3","status":"B","submitter":"Guillaume Nodet"},{"authorTime":"2020-01-04 20:02:31","codes":[{"authorDate":"2020-01-04 20:02:31","commitOrder":2,"curCode":"    private InnerInterpolator createInterpolator( List<? extends ValueSource> valueSources,\n                                                  List<? extends InterpolationPostProcessor> postProcessors,\n                                                  final ModelProblemCollector problems )\n    {\n        final Map<String, String> cache = new HashMap<>();\n        final StringSearchInterpolator interpolator = new StringSearchInterpolator();\n        interpolator.setCacheAnswers( true );\n        for ( ValueSource vs : valueSources )\n        {\n            interpolator.addValueSource( vs );\n        }\n        for ( InterpolationPostProcessor postProcessor : postProcessors )\n        {\n            interpolator.addPostProcessor( postProcessor );\n        }\n        final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();\n        return value ->\n        {\n            if ( value != null && value.contains( \"${\" ) )\n            {\n                String c = cache.get( value );\n                if ( c == null )\n                {\n                    try\n                    {\n                        c = interpolator.interpolate( value, recursionInterceptor );\n                    }\n                    catch ( InterpolationException e )\n                    {\n                        problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )\n                                .setMessage( e.getMessage() ).setException( e ) );\n                    }\n                    cache.put( value, c );\n                }\n                return c;\n            }\n            return value;\n        };\n    }\n","date":"2020-01-26 05:52:20","endLine":150,"groupId":"1056","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createInterpolator","params":"(List<?extendsValueSource>valueSources@List<?extendsInterpolationPostProcessor>postProcessors@finalModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/98/e36f6cb4cc15248c39ddcfbc7c486fbea0c773.src","preCode":"    private InnerInterpolator createInterpolator( List<? extends ValueSource> valueSources,\n                                                  List<? extends InterpolationPostProcessor> postProcessors,\n                                                  final ModelProblemCollector problems )\n    {\n        final Map<String, String> cache = new HashMap<>();\n        final StringSearchInterpolator interpolator = new StringSearchInterpolator();\n        interpolator.setCacheAnswers( true );\n        for ( ValueSource vs : valueSources )\n        {\n            interpolator.addValueSource( vs );\n        }\n        for ( InterpolationPostProcessor postProcessor : postProcessors )\n        {\n            interpolator.addPostProcessor( postProcessor );\n        }\n        final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();\n        return new InnerInterpolator()\n        {\n            @Override\n            public String interpolate( String value )\n            {\n                if ( value != null && value.contains( \"${\" ) )\n                {\n                    String c = cache.get( value );\n                    if ( c == null )\n                    {\n                        try\n                        {\n                            c = interpolator.interpolate( value, recursionInterceptor );\n                        }\n                        catch ( InterpolationException e )\n                        {\n                            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )\n                                    .setMessage( e.getMessage() ).setException( e ) );\n                        }\n                        cache.put( value, c );\n                    }\n                    return c;\n                }\n                return value;\n            }\n        };\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-01-04 20:02:31","commitOrder":2,"curCode":"    private InnerInterpolator createInterpolator( List<? extends ValueSource> valueSources,\n                                                  List<? extends InterpolationPostProcessor> postProcessors,\n                                                  final ModelProblemCollector problems )\n    {\n        final Map<String, String> cache = new HashMap<>();\n        final StringSearchInterpolator interpolator = new StringSearchInterpolator();\n        interpolator.setCacheAnswers( true );\n        for ( ValueSource vs : valueSources )\n        {\n            interpolator.addValueSource( vs );\n        }\n        for ( InterpolationPostProcessor postProcessor : postProcessors )\n        {\n            interpolator.addPostProcessor( postProcessor );\n        }\n        final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();\n        return value ->\n        {\n            if ( value != null && value.contains( \"${\" ) )\n            {\n                String c = cache.get( value );\n                if ( c == null )\n                {\n                    try\n                    {\n                        c = interpolator.interpolate( value, recursionInterceptor );\n                    }\n                    catch ( InterpolationException e )\n                    {\n                        problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )\n                                .setMessage( e.getMessage() ).setException( e ) );\n                    }\n                    cache.put( value, c );\n                }\n                return c;\n            }\n            return value;\n        };\n    }\n","date":"2020-01-26 05:52:20","endLine":124,"groupId":"1056","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createInterpolator","params":"(List<?extendsValueSource>valueSources@List<?extendsInterpolationPostProcessor>postProcessors@finalModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/af/4d1050bad8a05c6855b5dd53fee6abf7a5ba15.src","preCode":"    private InnerInterpolator createInterpolator( List<? extends ValueSource> valueSources,\n                                                  List<? extends InterpolationPostProcessor> postProcessors,\n                                                  final ModelProblemCollector problems )\n    {\n        final Map<String, String> cache = new HashMap<>();\n        final StringSearchInterpolator interpolator = new StringSearchInterpolator();\n        interpolator.setCacheAnswers( true );\n        for ( ValueSource vs : valueSources )\n        {\n            interpolator.addValueSource( vs );\n        }\n        for ( InterpolationPostProcessor postProcessor : postProcessors )\n        {\n            interpolator.addPostProcessor( postProcessor );\n        }\n        final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();\n        return new InnerInterpolator()\n        {\n            @Override\n            public String interpolate( String value )\n            {\n                if ( value != null && value.contains( \"${\" ) )\n                {\n                    String c = cache.get( value );\n                    if ( c == null )\n                    {\n                        try\n                        {\n                            c = interpolator.interpolate( value, recursionInterceptor );\n                        }\n                        catch ( InterpolationException e )\n                        {\n                            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )\n                                    .setMessage( e.getMessage() ).setException( e ) );\n                        }\n                        cache.put( value, c );\n                    }\n                    return c;\n                }\n                return value;\n            }\n        };\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"ddb454ac83e83b5178f9a5bb40a3250d9b543a3e","commitMessage":"@@@[MNG-6831] Replace Anonymous classes by lambdas\n\nCloses #303","date":"2020-01-26 05:52:20","modifiedFileCount":"19","status":"M","submitter":"Artem Krosheninnikov"}]
