[{"authorTime":"2009-06-17 23:00:06","codes":[{"authorDate":"2009-06-17 23:00:06","commitOrder":1,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    if ( element.isInherited() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        merged.put( key, plugin );\n                    }\n                }\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","date":"2009-06-17 23:00:06","endLine":152,"groupId":"3174","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/26/ecbda5dbb8da6e35e2817b680144893fee0e1f.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    if ( element.isInherited() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        merged.put( key, plugin );\n                    }\n                }\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"},{"authorDate":"2009-06-17 23:00:06","commitOrder":1,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","date":"2009-06-17 23:00:06","endLine":119,"groupId":"3661","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/d6/96c4bd74dc84ce1f608a482d3cc1a70bd216de.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"3843481a3b472322f27137c7751ebfb350b055e6","commitMessage":"@@@o Fixed order of inherited plugins\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@785644 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-06-17 23:00:06","modifiedFileCount":"4","status":"B","submitter":"Benjamin Bentmann"},{"authorTime":"2009-09-11 06:47:12","codes":[{"authorDate":"2009-09-11 06:47:12","commitOrder":2,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    if ( element.isInherited() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        merged.put( key, plugin );\n                    }\n                }\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","date":"2009-09-11 06:47:12","endLine":152,"groupId":"338","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/65/caeb9ce87c6917445a3e399e2f0893f14bec3f.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    if ( element.isInherited() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        merged.put( key, plugin );\n                    }\n                }\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2009-09-11 06:47:12","commitOrder":2,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","date":"2009-09-11 06:47:12","endLine":118,"groupId":"4210","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0a/497d51951681cb07d3ec63332a291881781288.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )\n                {\n                    Plugin element = it.next();\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"05b59c8935981b1876f096bba0362401ed9cd4d7","commitMessage":"@@@fixed errors reported by Checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@813627 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-09-11 06:47:12","modifiedFileCount":"12","status":"M","submitter":"Herve Boutemy"},{"authorTime":"2009-09-11 06:47:12","codes":[{"authorDate":"2009-10-29 08:24:56","commitOrder":3,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    if ( element.isInherited() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-10-29 08:24:56","endLine":176,"groupId":"1682","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/61/6f0d3918dbcd4a7c7fe61211f03d081056cf5d.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    if ( element.isInherited() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        merged.put( key, plugin );\n                    }\n                }\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2009-09-11 06:47:12","commitOrder":3,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","date":"2009-09-11 06:47:12","endLine":118,"groupId":"4210","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0a/497d51951681cb07d3ec63332a291881781288.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"4d5a89d0d6255d8989c299b197984a44eec15bb3","commitMessage":"@@@[MNG-4415] [regression] Plugins are not properly ordered after merging with inherited parent plugins\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@830809 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-10-29 08:24:56","modifiedFileCount":"2","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-10-29 20:33:36","codes":[{"authorDate":"2009-10-29 08:24:56","commitOrder":4,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    if ( element.isInherited() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-10-29 08:24:56","endLine":176,"groupId":"1682","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/61/6f0d3918dbcd4a7c7fe61211f03d081056cf5d.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    if ( element.isInherited() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"N"},{"authorDate":"2009-10-29 20:33:36","commitOrder":4,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-10-29 20:33:36","endLine":138,"groupId":"474","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/78/28632fe751108ccc378d62171706831d2e06b2.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = merged.get( key );\n                    if ( existing == null )\n                    {\n                        merged.put( key, element );\n                    }\n                    else\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n                    }\n                }\n\n                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"defd0cc82a1b444e2d3c7d317e1cd933c0f5084f","commitMessage":"@@@[MNG-4416] [regression] Plugins are not properly ordered after merging with profile plugins\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@830915 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-10-29 20:33:36","modifiedFileCount":"2","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-10-29 20:33:36","codes":[{"authorDate":"2010-04-06 20:44:16","commitOrder":5,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n\n                    \r\n                    Plugin plugin = new Plugin();\n                    plugin.setGroupId( element.getGroupId() );\n                    plugin.setArtifactId( element.getArtifactId() );\n                    mergePlugin( plugin, element, sourceDominant, context );\n\n                    master.put( key, plugin );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2010-04-06 20:44:16","endLine":174,"groupId":"1682","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/af/a3b75319e729c85ad0ba65bb04f67e91afe9e0.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    if ( element.isInherited() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2009-10-29 20:33:36","commitOrder":5,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-10-29 20:33:36","endLine":138,"groupId":"474","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/78/28632fe751108ccc378d62171706831d2e06b2.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"997c3110c62da50c8637ded14e54c75ae9822d9e","commitMessage":"@@@[MNG-2103] Inheritance of <plugin> overrides that of <execution>\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@931125 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-04-06 20:44:16","modifiedFileCount":"2","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-10-29 20:33:36","codes":[{"authorDate":"2010-05-18 02:39:46","commitOrder":6,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    if ( element.isInherited() || !element.getExecutions().isEmpty() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        Object key = getPluginKey( element );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2010-05-18 02:39:46","endLine":177,"groupId":"1682","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/89/2017ad724be18e1946ee9c677db7b0685fe82d.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n\n                    \r\n                    Plugin plugin = new Plugin();\n                    plugin.setGroupId( element.getGroupId() );\n                    plugin.setArtifactId( element.getArtifactId() );\n                    mergePlugin( plugin, element, sourceDominant, context );\n\n                    master.put( key, plugin );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2009-10-29 20:33:36","commitOrder":6,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-10-29 20:33:36","endLine":138,"groupId":"474","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/78/28632fe751108ccc378d62171706831d2e06b2.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"bdecdcf64a39c0375e9e00020ee7b0f1e388b5ec","commitMessage":"@@@[MNG-4677] [regression] Plugin configuration incorrectly inherited from parent pom\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@945294 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-18 02:39:46","modifiedFileCount":"1","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-10-29 20:33:36","codes":[{"authorDate":"2010-05-31 18:24:20","commitOrder":7,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    if ( element.isInherited() || !element.getExecutions().isEmpty() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( null );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        Object key = getPluginKey( element );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2010-05-31 18:24:20","endLine":176,"groupId":"1682","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e9/421a4d7fefde89391a5d6ca4c7b5bcab971294.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    if ( element.isInherited() || !element.getExecutions().isEmpty() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( element.getGroupId() );\n                        plugin.setArtifactId( element.getArtifactId() );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        Object key = getPluginKey( element );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2009-10-29 20:33:36","commitOrder":7,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-10-29 20:33:36","endLine":138,"groupId":"474","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/78/28632fe751108ccc378d62171706831d2e06b2.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"6e7b4226e7521a846e0326a59a38f9d2d072c74b","commitMessage":"@@@[MNG-1803] Provide line number information when there are errors processing a pom.xml\n\no Merged feature branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@949708 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-31 18:24:20","modifiedFileCount":"27","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-10-29 20:33:36","codes":[{"authorDate":"2011-02-19 05:47:54","commitOrder":8,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    if ( element.isInherited() || !element.getExecutions().isEmpty() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setLocation( \"\", element.getLocation( \"\" ) );\n                        plugin.setGroupId( null );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        Object key = getPluginKey( element );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2011-02-19 05:47:54","endLine":177,"groupId":"1682","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/da/0673af74f3602898fbba7d60489a4f02411cda.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    if ( element.isInherited() || !element.getExecutions().isEmpty() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setGroupId( null );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        Object key = getPluginKey( element );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2009-10-29 20:33:36","commitOrder":8,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2009-10-29 20:33:36","endLine":138,"groupId":"474","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/78/28632fe751108ccc378d62171706831d2e06b2.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"88349565ec6111fe90bcfd3022ccf2f5caed7dff","commitMessage":"@@@o Improved location tracking\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1072163 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-02-19 05:47:54","modifiedFileCount":"3","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":9,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    if ( element.isInherited() || !element.getExecutions().isEmpty() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setLocation( \"\", element.getLocation( \"\" ) );\n                        plugin.setGroupId( null );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        Object key = getPluginKey( element );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();\n                List<Plugin> pending = new ArrayList<>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2015-06-20 16:56:07","endLine":196,"groupId":"1682","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/dc/efe54bbc64ac4f4bda632b2f57f6c1d518e812.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    if ( element.isInherited() || !element.getExecutions().isEmpty() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setLocation( \"\", element.getLocation( \"\" ) );\n                        plugin.setGroupId( null );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        Object key = getPluginKey( element );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2015-03-06 14:12:21","commitOrder":9,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();\n                List<Plugin> pending = new ArrayList<>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2015-06-20 16:56:07","endLine":141,"groupId":"3350","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/ae/d837bf2b89479b2f150add0c77f684687d621d.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<Object, Plugin>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<Object, List<Plugin>>();\n                List<Plugin> pending = new ArrayList<Plugin>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<Plugin>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<Plugin>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2019-12-21 22:03:04","codes":[{"authorDate":"2019-12-21 22:03:04","commitOrder":10,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    if ( element.isInherited() || !element.getExecutions().isEmpty() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setLocation( \"\", element.getLocation( \"\" ) );\n                        plugin.setGroupId( null );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        Object key = getPluginKey().apply( element );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();\n                List<Plugin> pending = new ArrayList<>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey().apply( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2019-12-21 22:03:04","endLine":304,"groupId":"1054","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/ae/5ac0b7ac25cc11effcb92501cffdf7e2a385c5.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<>( src.size() * 2 );\n\n                for ( Plugin element : src )\n                {\n                    if ( element.isInherited() || !element.getExecutions().isEmpty() )\n                    {\n                        \r\n                        Plugin plugin = new Plugin();\n                        plugin.setLocation( \"\", element.getLocation( \"\" ) );\n                        plugin.setGroupId( null );\n                        mergePlugin( plugin, element, sourceDominant, context );\n\n                        Object key = getPluginKey( element );\n\n                        master.put( key, plugin );\n                    }\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();\n                List<Plugin> pending = new ArrayList<>();\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( element, existing, sourceDominant, context );\n\n                        master.put( key, element );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2019-12-21 22:03:04","commitOrder":10,"curCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey().apply( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();\n                List<Plugin> pending = new ArrayList<>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey().apply( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","date":"2019-12-21 22:03:04","endLine":148,"groupId":"1054","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"mergePluginContainer_Plugins","params":"(PluginContainertarget@PluginContainersource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/2f/9553b81e6a15600fd28339f6def4b5d0a2e70e.src","preCode":"        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,\n                                                     boolean sourceDominant, Map<Object, Object> context )\n        {\n            List<Plugin> src = source.getPlugins();\n            if ( !src.isEmpty() )\n            {\n                List<Plugin> tgt = target.getPlugins();\n                Map<Object, Plugin> master = new LinkedHashMap<>( tgt.size() * 2 );\n\n                for ( Plugin element : tgt )\n                {\n                    Object key = getPluginKey( element );\n                    master.put( key, element );\n                }\n\n                Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();\n                List<Plugin> pending = new ArrayList<>();\n                for ( Plugin element : src )\n                {\n                    Object key = getPluginKey( element );\n                    Plugin existing = master.get( key );\n                    if ( existing != null )\n                    {\n                        mergePlugin( existing, element, sourceDominant, context );\n\n                        if ( !pending.isEmpty() )\n                        {\n                            predecessors.put( key, pending );\n                            pending = new ArrayList<>();\n                        }\n                    }\n                    else\n                    {\n                        pending.add( element );\n                    }\n                }\n\n                List<Plugin> result = new ArrayList<>( src.size() + tgt.size() );\n                for ( Map.Entry<Object, Plugin> entry : master.entrySet() )\n                {\n                    List<Plugin> pre = predecessors.get( entry.getKey() );\n                    if ( pre != null )\n                    {\n                        result.addAll( pre );\n                    }\n                    result.add( entry.getValue() );\n                }\n                result.addAll( pending );\n\n                target.setPlugins( result );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"11b8b2d5d4f327ad3e38275015a3aafbdc2c2c5c","commitMessage":"@@@[MNG-6824] ModelMerger is broken\nFix modules\nApply Java 8 Functions\n","date":"2019-12-21 22:03:04","modifiedFileCount":"7","status":"M","submitter":"rfscholte"}]
