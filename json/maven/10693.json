[{"authorTime":"2013-03-15 04:03:31","codes":[{"authorDate":"2015-02-10 05:56:33","commitOrder":3,"curCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<Object, Object>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : 0;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : 0;\n        session.setResolutionErrorPolicy( new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy\n            | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            logger.warn( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                + \" build reproducibility.\" );\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n\n                logger.warn( \"Failed to configure legacy local repository: back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add( new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(),\n                                                                        proxy.getPort(), authBuilder.build() ),\n                               proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        return session;\n    }\n","date":"2015-02-20 23:26:15","endLine":230,"groupId":"713","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newRepositorySession","params":"(MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/d0/49caf2bb4f0ead03b7fba77706c520bd4a19e0.src","preCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<Object, Object>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : 0;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : 0;\n        session.setResolutionErrorPolicy( new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy\n            | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            logger.warn( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                + \" build reproducibility.\" );\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n\n                logger.warn( \"Failed to configure legacy local repository: back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add( new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(),\n                                                                        proxy.getPort(), authBuilder.build() ),\n                               proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        return session;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"},{"authorDate":"2013-03-15 04:03:31","commitOrder":3,"curCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","date":"2013-03-15 04:03:31","endLine":271,"groupId":"713","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toProxy","params":"(org.apache.maven.repository.Proxyproxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/9b/68a2e62e4639bb341905935a32d0f86dfbe632.src","preCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/RepositoryUtils.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"NB"}],"commitId":"5f150940c105d517108616aa184a5d276985376f","commitMessage":"@@@extracted RepositorySystemSessionFactory from DefaultMaven\n\nSigned-off-by: Igor Fedorenko <ifedorenko@apache.org>\n","date":"2015-02-20 23:26:15","modifiedFileCount":"1","status":"M","submitter":"Igor Fedorenko"},{"authorTime":"2013-03-15 04:03:31","codes":[{"authorDate":"2015-04-02 12:21:00","commitOrder":4,"curCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<Object, Object>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : 0;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : 0;\n        session.setResolutionErrorPolicy( new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy\n            | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            logger.warn( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                + \" build reproducibility.\" );\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n\n                logger.warn( \"Failed to configure legacy local repository: back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add( new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(),\n                                                                        proxy.getPort(), authBuilder.build() ),\n                               proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );        \n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        return session;\n    }\n","date":"2015-04-02 12:49:50","endLine":242,"groupId":"713","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newRepositorySession","params":"(MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/26/a8ddae9875e9963cc1d94da849448270cc3cb0.src","preCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<Object, Object>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : 0;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : 0;\n        session.setResolutionErrorPolicy( new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy\n            | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            logger.warn( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                + \" build reproducibility.\" );\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n\n                logger.warn( \"Failed to configure legacy local repository: back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add( new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(),\n                                                                        proxy.getPort(), authBuilder.build() ),\n                               proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        return session;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2013-03-15 04:03:31","commitOrder":4,"curCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","date":"2013-03-15 04:03:31","endLine":271,"groupId":"713","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toProxy","params":"(org.apache.maven.repository.Proxyproxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/9b/68a2e62e4639bb341905935a32d0f86dfbe632.src","preCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/RepositoryUtils.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"56e6db123150d08c15f1920ed8cc571480161b3c","commitMessage":"@@@MNG-5795: Maven extensions can not be retrieved from authenticated repositories\n","date":"2015-04-02 12:49:50","modifiedFileCount":"4","status":"M","submitter":"Jason van Zyl"},{"authorTime":"2013-03-15 04:03:31","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":5,"curCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : 0;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : 0;\n        session.setResolutionErrorPolicy( new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy\n            | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            logger.warn( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                + \" build reproducibility.\" );\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n\n                logger.warn( \"Failed to configure legacy local repository: back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add( new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(),\n                                                                        proxy.getPort(), authBuilder.build() ),\n                               proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );        \n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        return session;\n    }\n","date":"2015-06-20 16:56:07","endLine":242,"groupId":"713","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"newRepositorySession","params":"(MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3e/799158dc245788dd31321a497d5647ab066e86.src","preCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<Object, Object>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : 0;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : 0;\n        session.setResolutionErrorPolicy( new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy\n            | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            logger.warn( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                + \" build reproducibility.\" );\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n\n                logger.warn( \"Failed to configure legacy local repository: back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add( new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(),\n                                                                        proxy.getPort(), authBuilder.build() ),\n                               proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );        \n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        return session;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2013-03-15 04:03:31","commitOrder":5,"curCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","date":"2013-03-15 04:03:31","endLine":271,"groupId":"713","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toProxy","params":"(org.apache.maven.repository.Proxyproxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/9b/68a2e62e4639bb341905935a32d0f86dfbe632.src","preCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/RepositoryUtils.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2013-03-15 04:03:31","codes":[{"authorDate":"2016-01-25 09:40:03","commitOrder":6,"curCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : 0;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : 0;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        return session;\n    }\n","date":"2017-01-27 03:30:37","endLine":240,"groupId":"713","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"newRepositorySession","params":"(MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/a0/c54442a3df05faafecea0b678fb55f3c79f8cb.src","preCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : 0;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : 0;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            logger.warn( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                             + \" build reproducibility.\" );\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n\n                logger.warn( \"Failed to configure legacy local repository: back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        return session;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2013-03-15 04:03:31","commitOrder":6,"curCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","date":"2013-03-15 04:03:31","endLine":271,"groupId":"713","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"toProxy","params":"(org.apache.maven.repository.Proxyproxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/9b/68a2e62e4639bb341905935a32d0f86dfbe632.src","preCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/RepositoryUtils.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"1e2a80eced0f01c182458a2c7e7919634fa632f6","commitMessage":"@@@[MNG-5883] Silence unnecessary legacy local repository warning\n\no Updated to decrease logging level from 'warning' to 'info'.\n","date":"2017-01-27 03:30:37","modifiedFileCount":"1","status":"M","submitter":"Christian Schulte"},{"authorTime":"2013-03-15 04:03:31","codes":[{"authorDate":"2017-01-23 12:56:27","commitOrder":7,"curCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        return session;\n    }\n","date":"2017-02-03 17:12:28","endLine":242,"groupId":"713","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"newRepositorySession","params":"(MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/24/8a3b6dd120e9c7b9aff7e3da0eb7bbfbe22895.src","preCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : 0;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : 0;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        return session;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2013-03-15 04:03:31","commitOrder":7,"curCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","date":"2013-03-15 04:03:31","endLine":271,"groupId":"713","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"toProxy","params":"(org.apache.maven.repository.Proxyproxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/9b/68a2e62e4639bb341905935a32d0f86dfbe632.src","preCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/RepositoryUtils.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"17402659845ea21b0dd9f9989d484fb32c3aa28b","commitMessage":"@@@[MNG-6146] Several small stylistic and spelling improvements to code and documentation\n\nSpelling fixes:\n\n* system\n* tokenizer\n* toolchain\n* trailing\n* transitive\n* unsupported\n* version\n* artifact\n* attachment\n* codehaus\n* colleagues\n* comparison\n* concurrency\n* configure\n* creation\n* dependency\n* descriptor\n* downstream\n* efficient\n* e.g.\n* elements\n* encountered\n* encounters\n* environments\n* executed\n* explicitly\n* happens\n* hierarchical\n* hierarchy\n* ignore\n* implemented\n* implementers\n* independence\n* indicates\n* inheritance\n* inherited\n* inherits\n* install\n* interface\n* javascript\n* laziness\n* management\n* maven\n* metadata\n* mgmt\n* minimalist\n* nonexistent\n* objects\n* overridden\n* print\n* project\n* properties\n* recessive\n* referring\n* repository\n* representation\n* retrieval\n* retrieve\n* rigorous\n* should\n* spontaneously\n* subsequent\n\nLiteral fixes:\n\n*  use static final values\n\nStyle fixes:\n\n* use the proper term for char U+002D (-) hyphen(-minus) instead of dash\n\nThis closes #100\n","date":"2017-02-03 17:12:28","modifiedFileCount":"73","status":"M","submitter":"Josh Soref"},{"authorTime":"2013-03-15 04:03:31","codes":[{"authorDate":"2020-06-23 03:24:49","commitOrder":8,"curCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        if ( Features.buildConsumer().isActive() )\n        {\n            session.setFileTransformerManager( a -> getTransformersForArtifact( a, session.getData() ) );\n        }\n\n        return session;\n    }\n","date":"2020-06-23 03:24:49","endLine":257,"groupId":"713","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"newRepositorySession","params":"(MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/28/f75cdce81ea2bdf5961c8721b4a5f57f7fa334.src","preCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        return session;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2013-03-15 04:03:31","commitOrder":8,"curCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","date":"2013-03-15 04:03:31","endLine":271,"groupId":"713","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"toProxy","params":"(org.apache.maven.repository.Proxyproxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/9b/68a2e62e4639bb341905935a32d0f86dfbe632.src","preCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/RepositoryUtils.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"bdec668de9c600165bb69c95b6ea0625d9f74fb0","commitMessage":"@@@[MNG-6656] Introduce base for build/consumer pom\n","date":"2020-06-23 03:24:49","modifiedFileCount":"17","status":"M","submitter":"rfscholte"},{"authorTime":"2013-03-15 04:03:31","codes":[{"authorDate":"2020-10-12 02:27:49","commitOrder":9,"curCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.put( \"maven.startTime\", request.getStartTime() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        if ( Features.buildConsumer().isActive() )\n        {\n            session.setFileTransformerManager( a -> getTransformersForArtifact( a, session.getData() ) );\n        }\n\n        return session;\n    }\n","date":"2020-11-12 06:09:49","endLine":258,"groupId":"713","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"newRepositorySession","params":"(MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/86/cb55143c464ea5731ad47eecbd258292599ecc.src","preCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        if ( Features.buildConsumer().isActive() )\n        {\n            session.setFileTransformerManager( a -> getTransformersForArtifact( a, session.getData() ) );\n        }\n\n        return session;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2013-03-15 04:03:31","commitOrder":9,"curCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","date":"2013-03-15 04:03:31","endLine":271,"groupId":"713","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"toProxy","params":"(org.apache.maven.repository.Proxyproxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/9b/68a2e62e4639bb341905935a32d0f86dfbe632.src","preCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/RepositoryUtils.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"72688805c4f95f8ab4ca9ab2ac2cd114667790c9","commitMessage":"@@@[MNG-6754] Set the same timestamp in multi module builds\n\nReuse MavenExecutionRequest#getStartTime() throughout for snapshot versions. \nlast updated fields in metadata consistently for local and remote repositories\nfor the entire reactor and its modules.\n\nThis closes #381\n","date":"2020-11-12 06:09:49","modifiedFileCount":"14","status":"M","submitter":"Michael Osipov"},{"authorTime":"2013-03-15 04:03:31","codes":[{"authorDate":"2021-03-14 01:00:59","commitOrder":10,"curCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.put( \"maven.startTime\", request.getStartTime() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),\n                                mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        if ( Features.buildConsumer().isActive() )\n        {\n            session.setFileTransformerManager( a -> getTransformersForArtifact( a, session.getData() ) );\n        }\n\n        return session;\n    }\n","date":"2021-03-20 03:36:00","endLine":258,"groupId":"4129","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"newRepositorySession","params":"(MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/bb/efc610b723a04f8337ad62dca3f47914fa6f7d.src","preCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.put( \"maven.startTime\", request.getStartTime() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),\n                                mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        if ( Features.buildConsumer().isActive() )\n        {\n            session.setFileTransformerManager( a -> getTransformersForArtifact( a, session.getData() ) );\n        }\n\n        return session;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2013-03-15 04:03:31","commitOrder":10,"curCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","date":"2013-03-15 04:03:31","endLine":271,"groupId":"713","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"toProxy","params":"(org.apache.maven.repository.Proxyproxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/9b/68a2e62e4639bb341905935a32d0f86dfbe632.src","preCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/RepositoryUtils.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"28b4ea92d38365d0f27a5bd044ac4927580147f8","commitMessage":"@@@[MNG-7117] add support for blocked mirror","date":"2021-03-20 03:36:00","modifiedFileCount":"1","status":"M","submitter":"Herv? Boutemy"},{"authorTime":"2013-03-15 04:03:31","codes":[{"authorDate":"2021-07-22 17:24:05","commitOrder":11,"curCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.put( \"maven.startTime\", request.getStartTime() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),\n                                mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        if ( Features.buildConsumer( request.getUserProperties() ).isActive() )\n        {\n            session.setFileTransformerManager( a -> getTransformersForArtifact( a, session.getData() ) );\n        }\n\n        return session;\n    }\n","date":"2021-07-23 17:21:18","endLine":258,"groupId":"10693","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"newRepositorySession","params":"(MavenExecutionRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/c4/19f1714637f694eee2504d1fb820e58fbf7b8d.src","preCode":"    public DefaultRepositorySystemSession newRepositorySession( MavenExecutionRequest request )\n    {\n        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n        session.setCache( request.getRepositoryCache() );\n\n        Map<Object, Object> configProps = new LinkedHashMap<>();\n        configProps.put( ConfigurationProperties.USER_AGENT, getUserAgent() );\n        configProps.put( ConfigurationProperties.INTERACTIVE, request.isInteractiveMode() );\n        configProps.put( \"maven.startTime\", request.getStartTime() );\n        configProps.putAll( request.getSystemProperties() );\n        configProps.putAll( request.getUserProperties() );\n\n        session.setOffline( request.isOffline() );\n        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );\n        if ( request.isNoSnapshotUpdates() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_NEVER );\n        }\n        else if ( request.isUpdateSnapshots() )\n        {\n            session.setUpdatePolicy( RepositoryPolicy.UPDATE_POLICY_ALWAYS );\n        }\n        else\n        {\n            session.setUpdatePolicy( null );\n        }\n\n        int errorPolicy = 0;\n        errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR\n            : ResolutionErrorPolicy.CACHE_DISABLED;\n        session.setResolutionErrorPolicy(\n            new SimpleResolutionErrorPolicy( errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND ) );\n\n        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );\n\n        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );\n\n        if ( request.isUseLegacyLocalRepository() )\n        {\n            try\n            {\n                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );\n                logger.info( \"Disabling enhanced local repository: using legacy is strongly discouraged to ensure\"\n                                 + \" build reproducibility.\" );\n            }\n            catch ( NoLocalRepositoryManagerException e )\n            {\n                logger.error( \"Failed to configure legacy local repository: falling back to default\" );\n                session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n            }\n        }\n        else\n        {\n            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( session, localRepo ) );\n        }\n\n        if ( request.getWorkspaceReader() != null )\n        {\n            session.setWorkspaceReader( request.getWorkspaceReader() );\n        }\n        else\n        {\n            session.setWorkspaceReader( workspaceRepository );\n        }\n\n        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();\n        decrypt.setProxies( request.getProxies() );\n        decrypt.setServers( request.getServers() );\n        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );\n\n        if ( logger.isDebugEnabled() )\n        {\n            for ( SettingsProblem problem : decrypted.getProblems() )\n            {\n                logger.debug( problem.getMessage(), problem.getException() );\n            }\n        }\n\n        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();\n        for ( Mirror mirror : request.getMirrors() )\n        {\n            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),\n                                mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );\n        }\n        session.setMirrorSelector( mirrorSelector );\n\n        DefaultProxySelector proxySelector = new DefaultProxySelector();\n        for ( Proxy proxy : decrypted.getProxies() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUsername() ).addPassword( proxy.getPassword() );\n            proxySelector.add(\n                new org.eclipse.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),\n                                                         authBuilder.build() ), proxy.getNonProxyHosts() );\n        }\n        session.setProxySelector( proxySelector );\n\n        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();\n        for ( Server server : decrypted.getServers() )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( server.getUsername() ).addPassword( server.getPassword() );\n            authBuilder.addPrivateKey( server.getPrivateKey(), server.getPassphrase() );\n            authSelector.add( server.getId(), authBuilder.build() );\n\n            if ( server.getConfiguration() != null )\n            {\n                Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();\n                for ( int i = dom.getChildCount() - 1; i >= 0; i-- )\n                {\n                    Xpp3Dom child = dom.getChild( i );\n                    if ( \"wagonProvider\".equals( child.getName() ) )\n                    {\n                        dom.removeChild( i );\n                    }\n                }\n\n                XmlPlexusConfiguration config = new XmlPlexusConfiguration( dom );\n                configProps.put( \"aether.connector.wagon.config.\" + server.getId(), config );\n            }\n\n            configProps.put( \"aether.connector.perms.fileMode.\" + server.getId(), server.getFilePermissions() );\n            configProps.put( \"aether.connector.perms.dirMode.\" + server.getId(), server.getDirectoryPermissions() );\n        }\n        session.setAuthenticationSelector( authSelector );\n\n        session.setTransferListener( request.getTransferListener() );\n\n        session.setRepositoryListener( eventSpyDispatcher.chainListener( new LoggingRepositoryListener( logger ) ) );\n\n        session.setUserProperties( request.getUserProperties() );\n        session.setSystemProperties( request.getSystemProperties() );\n        session.setConfigProperties( configProps );\n\n        mavenRepositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getRemoteRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getRemoteRepositories() );\n\n        mavenRepositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );\n        mavenRepositorySystem.injectProxy( session, request.getPluginArtifactRepositories() );\n        mavenRepositorySystem.injectAuthentication( session, request.getPluginArtifactRepositories() );\n\n        if ( Features.buildConsumer().isActive() )\n        {\n            session.setFileTransformerManager( a -> getTransformersForArtifact( a, session.getData() ) );\n        }\n\n        return session;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2013-03-15 04:03:31","commitOrder":11,"curCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","date":"2013-03-15 04:03:31","endLine":271,"groupId":"10693","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"toProxy","params":"(org.apache.maven.repository.Proxyproxy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/9b/68a2e62e4639bb341905935a32d0f86dfbe632.src","preCode":"    private static Proxy toProxy( org.apache.maven.repository.Proxy proxy )\n    {\n        Proxy result = null;\n        if ( proxy != null )\n        {\n            AuthenticationBuilder authBuilder = new AuthenticationBuilder();\n            authBuilder.addUsername( proxy.getUserName() ).addPassword( proxy.getPassword() );\n            result = new Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build() );\n        }\n        return result;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/RepositoryUtils.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"a2f81065ff134ec8abafaa6f57f6ba10bdac00b3","commitMessage":"@@@[MNG-6656] Features must use userProperties instead of systemProperties\n","date":"2021-07-23 17:21:18","modifiedFileCount":"5","status":"M","submitter":"rfscholte"}]
