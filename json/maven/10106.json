[{"authorTime":"2020-12-22 05:23:43","codes":[{"authorDate":"2020-12-22 05:23:43","commitOrder":1,"curCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","date":"2020-12-22 23:30:37","endLine":356,"groupId":"3604","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"activateFileModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e1/2e56654b34f3bb63a122ca358b6d8c41e0d806.src","preCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"B"},{"authorDate":"2020-12-22 05:23:43","commitOrder":1,"curCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; currentData != null; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            Map<String, Activation> interpolatedActivations = getProfileActivations( tmpModel, false );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        \r\n        configureResolver( request.getModelResolver(), resultModel, problems, true );\n\n        return resultModel;\n    }\n","date":"2020-12-22 23:30:37","endLine":491,"groupId":"352","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readEffectiveModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e1/2e56654b34f3bb63a122ca358b6d8c41e0d806.src","preCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; currentData != null; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            Map<String, Activation> interpolatedActivations = getProfileActivations( tmpModel, false );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        \r\n        configureResolver( request.getModelResolver(), resultModel, problems, true );\n\n        return resultModel;\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"B"}],"commitId":"9f88494b6064ad45ea2e2e1e3478afc7af0bc065","commitMessage":"@@@[MNG-6957] Versionless reactor dependencies/parent should work even if modules are aggregated in reverse order\n\nThis closes #391\n","date":"2020-12-22 23:30:37","modifiedFileCount":"27","status":"B","submitter":"rfscholte"},{"authorTime":"2020-12-03 06:24:06","codes":[{"authorDate":"2020-12-22 05:23:43","commitOrder":2,"curCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","date":"2020-12-22 23:30:37","endLine":356,"groupId":"3604","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"activateFileModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e1/2e56654b34f3bb63a122ca358b6d8c41e0d806.src","preCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"N"},{"authorDate":"2020-12-03 06:24:06","commitOrder":2,"curCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; currentData != null; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            Map<String, Activation> interpolatedActivations = getProfileActivations( tmpModel, false );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        return resultModel;\n    }\n","date":"2020-12-24 22:23:59","endLine":488,"groupId":"352","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readEffectiveModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/72/33cf5f7615c65ab60e515a1e3c85445f6e69b9.src","preCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; currentData != null; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            Map<String, Activation> interpolatedActivations = getProfileActivations( tmpModel, false );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        \r\n        configureResolver( request.getModelResolver(), resultModel, problems, true );\n\n        return resultModel;\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"}],"commitId":"8c9c303f9c20396b2d2810a872b16245f9eabfcb","commitMessage":"@@@[MNG-7046] Revert MNG-5639 and make repo config static only\n\nThis closes #409\n","date":"2020-12-24 22:23:59","modifiedFileCount":"4","status":"M","submitter":"Michael Osipov"},{"authorTime":"2021-02-14 22:52:04","codes":[{"authorDate":"2020-12-22 05:23:43","commitOrder":3,"curCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","date":"2020-12-22 23:30:37","endLine":356,"groupId":"3604","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"activateFileModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e1/2e56654b34f3bb63a122ca358b6d8c41e0d806.src","preCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"N"},{"authorDate":"2021-02-14 22:52:04","commitOrder":3,"curCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; ; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            Map<String, Activation> interpolatedActivations = getProfileActivations( tmpModel, false );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        return resultModel;\n    }\n","date":"2021-02-14 22:52:04","endLine":480,"groupId":"352","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"readEffectiveModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/af/de52a6487a0b541509c42c2fbe0fdc5522076e.src","preCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; currentData != null; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            Map<String, Activation> interpolatedActivations = getProfileActivations( tmpModel, false );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        return resultModel;\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"M"}],"commitId":"619973b91cff5af7b5695bda11761a982a159349","commitMessage":"@@@[MNG-7063] Infinite loop using Shade plugin and JUnit 5 dependency\n\nSigned-off-by: rfscholte <rfscholte@apache.org>\n","date":"2021-02-14 22:52:04","modifiedFileCount":"8","status":"M","submitter":"Guillaume Nodet"},{"authorTime":"2021-03-02 06:33:14","codes":[{"authorDate":"2020-12-22 05:23:43","commitOrder":4,"curCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","date":"2020-12-22 23:30:37","endLine":356,"groupId":"3604","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"activateFileModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e1/2e56654b34f3bb63a122ca358b6d8c41e0d806.src","preCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"N"},{"authorDate":"2021-03-02 06:33:14","commitOrder":4,"curCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; ; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            Map<String, Activation> interpolatedActivations = getProfileActivations( tmpModel, false );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        \r\n        configureResolver( request.getModelResolver(), resultModel, problems, true );\n\n        return resultModel;\n    }\n","date":"2021-03-14 00:09:40","endLine":483,"groupId":"352","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"readEffectiveModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/62/afcd1db1ece33dcfd5c9be14626c779e9ae416.src","preCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; ; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            Map<String, Activation> interpolatedActivations = getProfileActivations( tmpModel, false );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        return resultModel;\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"M"}],"commitId":"a5c68f7a4afd9c58e727f09dc119b1160decd854","commitMessage":"@@@Revert \"[MNG-7046] Revert MNG-5639 and make repo config static only\"\n\nThis reverts commit 8c9c303f9c20396b2d2810a872b16245f9eabfcb.\n","date":"2021-03-14 00:09:40","modifiedFileCount":"4","status":"M","submitter":"Michael Osipov"},{"authorTime":"2021-05-15 19:51:15","codes":[{"authorDate":"2020-12-22 05:23:43","commitOrder":5,"curCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","date":"2020-12-22 23:30:37","endLine":356,"groupId":"10106","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"activateFileModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e1/2e56654b34f3bb63a122ca358b6d8c41e0d806.src","preCode":"    private void activateFileModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel = request.getFileModel();\n        problems.setRootModel( inputModel );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        problems.setSource( \"(external profiles)\" );\n        List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles( request.getProfiles(),\n                                                                                  profileActivationContext, problems );\n\n        result.setActiveExternalProfiles( activeExternalProfiles );\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        profileActivationContext.setProjectProperties( inputModel.getProperties() );\n        problems.setSource( inputModel );\n        List<Profile> activePomProfiles = profileSelector.getActiveProfiles( inputModel.getProfiles(),\n                                                                             profileActivationContext, problems );\n\n        \r\n        problems.setSource( inputModel );\n        modelNormalizer.mergeDuplicates( inputModel, request, problems );\n\n        Map<String, Activation> interpolatedActivations = getProfileActivations( inputModel, false );\n        injectProfileActivations( inputModel, interpolatedActivations );\n\n        \r\n        for ( Profile activeProfile : activePomProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n\n        for ( Profile activeProfile : activeExternalProfiles )\n        {\n            profileInjector.injectProfile( inputModel, activeProfile, request, problems );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"N"},{"authorDate":"2021-05-15 19:51:15","commitOrder":5,"curCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; ; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            profileActivationContext.setProjectProperties( tmpModel.getProperties() );\n\n            Map<String, Activation> interpolatedActivations = getInterpolatedActivations( rawModel,\n                                                                                          profileActivationContext, \n                                                                                          problems );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        \r\n        configureResolver( request.getModelResolver(), resultModel, problems, true );\n\n        return resultModel;\n    }\n","date":"2021-05-15 19:51:15","endLine":501,"groupId":"10106","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"readEffectiveModel","params":"(finalModelBuildingRequestrequest@finalDefaultModelBuildingResultresult@DefaultModelProblemCollectorproblems)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/07/480e56019879c55ae066a2cc0894764d10b110.src","preCode":"    private Model readEffectiveModel( final ModelBuildingRequest request, final DefaultModelBuildingResult result,\n                          DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model inputModel =\n            readRawModel( request, problems );\n\n        problems.setRootModel( inputModel );\n\n        ModelData resultData = new ModelData( request.getModelSource(), inputModel );\n        ModelData superData = new ModelData( null, getSuperModel() );\n\n        \r\n        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = result.getActiveExternalProfiles();\n\n        if ( !activeExternalProfiles.isEmpty() )\n        {\n            Properties profileProps = new Properties();\n            for ( Profile profile : activeExternalProfiles )\n            {\n                profileProps.putAll( profile.getProperties() );\n            }\n            profileProps.putAll( profileActivationContext.getUserProperties() );\n            profileActivationContext.setUserProperties( profileProps );\n        }\n\n        Collection<String> parentIds = new LinkedHashSet<>();\n\n        List<Model> lineage = new ArrayList<>();\n\n        for ( ModelData currentData = resultData; ; )\n        {\n            String modelId = currentData.getId();\n            result.addModelId( modelId );\n\n            Model rawModel = currentData.getModel();\n            result.setRawModel( modelId, rawModel );\n\n            profileActivationContext.setProjectProperties( rawModel.getProperties() );\n            problems.setSource( rawModel );\n            List<Profile> activePomProfiles = profileSelector.getActiveProfiles( rawModel.getProfiles(),\n                                                                                 profileActivationContext, problems );\n            result.setActivePomProfiles( modelId, activePomProfiles );\n\n            Model tmpModel = rawModel.clone();\n\n            problems.setSource( tmpModel );\n\n            \r\n            modelNormalizer.mergeDuplicates( tmpModel, request, problems );\n\n            Map<String, Activation> interpolatedActivations = getProfileActivations( tmpModel, false );\n            injectProfileActivations( tmpModel, interpolatedActivations );\n\n            \r\n            for ( Profile activeProfile : result.getActivePomProfiles( modelId ) )\n            {\n                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n            }\n\n            if ( currentData == resultData )\n            {\n                for ( Profile activeProfile : activeExternalProfiles )\n                {\n                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );\n                }\n                result.setEffectiveModel( tmpModel );\n            }\n\n            lineage.add( tmpModel );\n\n            if ( currentData == superData )\n            {\n                break;\n            }\n\n            configureResolver( request.getModelResolver(), tmpModel, problems );\n\n            ModelData parentData =\n                readParent( currentData.getModel(), currentData.getSource(), request, result, problems );\n\n            if ( parentData == null )\n            {\n                currentData = superData;\n            }\n            else if ( !parentIds.add( parentData.getId() ) )\n            {\n                StringBuilder message = new StringBuilder( \"The parents form a cycle: \" );\n                for ( String parentId : parentIds )\n                {\n                    message.append( parentId ).append( \" -> \" );\n                }\n                message.append( parentData.getId() );\n\n                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE )\n                    .setMessage( message.toString() ) );\n\n                throw problems.newModelBuildingException();\n            }\n            else\n            {\n                currentData = parentData;\n            }\n        }\n\n        problems.setSource( result.getRawModel() );\n        checkPluginVersions( lineage, request, problems );\n\n        \r\n        assembleInheritance( lineage, request, problems );\n\n        Model resultModel = lineage.get( 0 );\n\n        \r\n\n        problems.setSource( resultModel );\n        problems.setRootModel( resultModel );\n\n        \r\n        resultModel = interpolateModel( resultModel, request, problems );\n\n        \r\n        modelUrlNormalizer.normalize( resultModel, request );\n\n        result.setEffectiveModel( resultModel );\n\n        \r\n        configureResolver( request.getModelResolver(), resultModel, problems, true );\n\n        return resultModel;\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"3fabb639a31d6076b1649c1a08828febabddf44a","commitMessage":"@@@[MNG-6802] Fix bug in FileProfileActivator  (#347)\n\n* [MNG-6802] FileProfileActivator changes exists\n\nFileProfileActivator changes FileProfileActivator.exists\nwhich lets flattened resolveCiFriendliesOnly depending\nfail activating profile.\n\n* [MNG-6802] Add java docs\n\n* [MNG-6802] PR comments fixes\n\n* Make ProfileActivationFilePathInterpolator a class\n* call super.tearDown() last\n\n* [MNG-6802] PR comments fixes\n\n* Get rid of reusing local variables\n* Rename file-> activationFile\n* Move if ( missing ) to try block\n* Update javadocs\n* Replace string format with concatenation\n* Replace FileReader to FileInputStream\n\n* [MNG-6802] Update javadoc\n\n* [MNG-6802] Switch to commons lang3 StringUtils\n\n* [MNG-6802] Switch to commons lang3 StringUtils\n\n* [MNG-6802] Switch to plexus-utils StringUtils back\n\n* [MNG-6802] Switch to plexus-utils StringUtils back\n\n* [MNG-6802] Resolve conflicts\n\n* [MNG-6802] Upgrade tests\n\n* [MNG-6802] Fix for windows\n\n* [MNG-6802] Remove annotation\n\n* [MNG-6802] Create a temp dir\n\n* [MNG-6802] Remove space\n\n* [MNG-6802] Small refactoring\n\n* [MNG-6802] Use JUnit5 tempDir\n\n* [MNG-6802] Use static import\n\n* [MNG-6802] Remove plexus\n\n* [MNG-6802] Remove plexus\n\n* [MNG-6802] Fix checklstyle\n\n* [MNG-6802] Restart build\n\n* [MNG-6802] Restart build\n\n* [MNG-6802] Restart build (last attempt)\n\n* [MNG-6802] Fix PR comments\n\n* [MNG-6802] Refactor try-catch\n\n* [MNG-6802] Fix comments in FileProfileActivatorTest\n\n* [MNG-6802] Use primitive\n\n* [MNG-6802] Push down path","date":"2021-05-15 19:51:15","modifiedFileCount":"4","status":"M","submitter":"Ravil Galeyev"}]
