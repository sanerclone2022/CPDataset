[{"authorTime":"2015-01-16 05:26:59","codes":[{"authorDate":"2015-01-16 05:26:59","commitOrder":1,"curCode":"    public void testBuildRequestWithGlobalToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel toolchain = new ToolchainModel();\n        toolchain.setType( \"TYPE\" );\n        toolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  toolchain );\n        when( toolchainsReader.read( any( InputStream.class ), anyMap() ) ).thenReturn( globalResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 1, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","date":"2015-01-16 20:24:57","endLine":113,"groupId":"4357","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildRequestWithGlobalToolchains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/80/fca0942b66790926939c33c892be83adc5c7d5.src","preCode":"    public void testBuildRequestWithGlobalToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel toolchain = new ToolchainModel();\n        toolchain.setType( \"TYPE\" );\n        toolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  toolchain );\n        when( toolchainsReader.read( any( InputStream.class ), anyMap() ) ).thenReturn( globalResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 1, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2015-01-16 05:26:59","commitOrder":1,"curCode":"    public void testBuildRequestWithBothToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n        request.setUserToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains userResult = new PersistedToolchains();\n        ToolchainModel userToolchain = new ToolchainModel();\n        userToolchain.setType( \"TYPE\" );\n        userToolchain.addProvide( \"key\", \"user_value\" );\n        userResult.addToolchain(  userToolchain );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel globalToolchain = new ToolchainModel();\n        globalToolchain.setType( \"TYPE\" );\n        globalToolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  globalToolchain );\n        when( toolchainsReader.read( any( InputStream.class ), anyMap() ) ).thenReturn( globalResult ).thenReturn( userResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 2, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"user_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(1).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(1).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","date":"2015-01-16 20:24:57","endLine":145,"groupId":"4358","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildRequestWithBothToolchains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/80/fca0942b66790926939c33c892be83adc5c7d5.src","preCode":"    public void testBuildRequestWithBothToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n        request.setUserToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains userResult = new PersistedToolchains();\n        ToolchainModel userToolchain = new ToolchainModel();\n        userToolchain.setType( \"TYPE\" );\n        userToolchain.addProvide( \"key\", \"user_value\" );\n        userResult.addToolchain(  userToolchain );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel globalToolchain = new ToolchainModel();\n        globalToolchain.setType( \"TYPE\" );\n        globalToolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  globalToolchain );\n        when( toolchainsReader.read( any( InputStream.class ), anyMap() ) ).thenReturn( globalResult ).thenReturn( userResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 2, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"user_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(1).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(1).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"}],"commitId":"99f763decd91b6c6f924d997b6b1f84d5d7c15f1","commitMessage":"@@@Add junit tests for DefaultToolchainsBuilder and ToolchainsBuildingException\n","date":"2015-01-16 20:24:57","modifiedFileCount":"2","status":"B","submitter":"Robert Scholte"},{"authorTime":"2018-01-07 08:17:32","codes":[{"authorDate":"2018-01-07 08:17:32","commitOrder":2,"curCode":"    public void testBuildRequestWithGlobalToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel toolchain = new ToolchainModel();\n        toolchain.setType( \"TYPE\" );\n        toolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  toolchain );\n        when( toolchainsReader.read( any( InputStream.class ), ArgumentMatchers.<String, Object>anyMap()) ).thenReturn( globalResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 1, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","date":"2018-02-09 07:20:03","endLine":113,"groupId":"4357","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildRequestWithGlobalToolchains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/fc/530df5a3889c57916e4062f11e244d5c627f91.src","preCode":"    public void testBuildRequestWithGlobalToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel toolchain = new ToolchainModel();\n        toolchain.setType( \"TYPE\" );\n        toolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  toolchain );\n        when( toolchainsReader.read( any( InputStream.class ), anyMap() ) ).thenReturn( globalResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 1, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2018-01-07 08:17:32","commitOrder":2,"curCode":"    public void testBuildRequestWithBothToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n        request.setUserToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains userResult = new PersistedToolchains();\n        ToolchainModel userToolchain = new ToolchainModel();\n        userToolchain.setType( \"TYPE\" );\n        userToolchain.addProvide( \"key\", \"user_value\" );\n        userResult.addToolchain(  userToolchain );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel globalToolchain = new ToolchainModel();\n        globalToolchain.setType( \"TYPE\" );\n        globalToolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  globalToolchain );\n        when( toolchainsReader.read( any( InputStream.class ), ArgumentMatchers.<String, Object>anyMap()) ).thenReturn( globalResult ).thenReturn( userResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 2, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"user_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(1).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(1).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","date":"2018-02-09 07:20:03","endLine":145,"groupId":"4358","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildRequestWithBothToolchains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/fc/530df5a3889c57916e4062f11e244d5c627f91.src","preCode":"    public void testBuildRequestWithBothToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n        request.setUserToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains userResult = new PersistedToolchains();\n        ToolchainModel userToolchain = new ToolchainModel();\n        userToolchain.setType( \"TYPE\" );\n        userToolchain.addProvide( \"key\", \"user_value\" );\n        userResult.addToolchain(  userToolchain );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel globalToolchain = new ToolchainModel();\n        globalToolchain.setType( \"TYPE\" );\n        globalToolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  globalToolchain );\n        when( toolchainsReader.read( any( InputStream.class ), anyMap() ) ).thenReturn( globalResult ).thenReturn( userResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 2, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"user_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(1).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(1).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"a03489b67d04a4b014ff5d1c151b331a39bf100b","commitMessage":"@@@[ MNG-6335] Update Mockito to 2.12.0\n\nAlso change scope to test","date":"2018-02-09 07:20:03","modifiedFileCount":"3","status":"M","submitter":"Sylwester Lachiewicz"},{"authorTime":"2019-06-08 16:43:12","codes":[{"authorDate":"2019-06-08 16:43:12","commitOrder":3,"curCode":"    public void testBuildRequestWithGlobalToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel toolchain = new ToolchainModel();\n        toolchain.setType( \"TYPE\" );\n        toolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  toolchain );\n        doReturn(globalResult).when( toolchainsReader ).read( any( InputStream.class ), ArgumentMatchers.<String, Object>anyMap());\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 1, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","date":"2019-06-08 16:43:12","endLine":127,"groupId":"10600","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildRequestWithGlobalToolchains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/2c/20d3c21fb05f3b4e38ec583c030c5c55538bbe.src","preCode":"    public void testBuildRequestWithGlobalToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel toolchain = new ToolchainModel();\n        toolchain.setType( \"TYPE\" );\n        toolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  toolchain );\n        when( toolchainsReader.read( any( InputStream.class ), ArgumentMatchers.<String, Object>anyMap()) ).thenReturn( globalResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 1, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2019-06-08 16:43:12","commitOrder":3,"curCode":"    public void testBuildRequestWithBothToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n        request.setUserToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains userResult = new PersistedToolchains();\n        ToolchainModel userToolchain = new ToolchainModel();\n        userToolchain.setType( \"TYPE\" );\n        userToolchain.addProvide( \"key\", \"user_value\" );\n        userResult.addToolchain(  userToolchain );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel globalToolchain = new ToolchainModel();\n        globalToolchain.setType( \"TYPE\" );\n        globalToolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  globalToolchain );\n        doReturn(globalResult).doReturn(userResult).when( toolchainsReader ).read( any( InputStream.class ), ArgumentMatchers.<String, Object>anyMap());\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 2, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"user_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(1).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(1).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","date":"2019-06-08 16:43:12","endLine":159,"groupId":"10600","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildRequestWithBothToolchains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/2c/20d3c21fb05f3b4e38ec583c030c5c55538bbe.src","preCode":"    public void testBuildRequestWithBothToolchains()\n        throws Exception\n    {\n        ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();\n        request.setGlobalToolchainsSource( new StringSource( \"\" ) );\n        request.setUserToolchainsSource( new StringSource( \"\" ) );\n\n        PersistedToolchains userResult = new PersistedToolchains();\n        ToolchainModel userToolchain = new ToolchainModel();\n        userToolchain.setType( \"TYPE\" );\n        userToolchain.addProvide( \"key\", \"user_value\" );\n        userResult.addToolchain(  userToolchain );\n\n        PersistedToolchains globalResult = new PersistedToolchains();\n        ToolchainModel globalToolchain = new ToolchainModel();\n        globalToolchain.setType( \"TYPE\" );\n        globalToolchain.addProvide( \"key\", \"global_value\" );\n        globalResult.addToolchain(  globalToolchain );\n        when( toolchainsReader.read( any( InputStream.class ), ArgumentMatchers.<String, Object>anyMap()) ).thenReturn( globalResult ).thenReturn( userResult );\n\n        ToolchainsBuildingResult result = toolchainBuilder.build( request );\n        assertNotNull( result.getEffectiveToolchains() );\n        assertEquals( 2, result.getEffectiveToolchains().getToolchains().size() );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(0).getType() );\n        assertEquals( \"user_value\", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty( \"key\" ) );\n        assertEquals( \"TYPE\", result.getEffectiveToolchains().getToolchains().get(1).getType() );\n        assertEquals( \"global_value\", result.getEffectiveToolchains().getToolchains().get(1).getProvides().getProperty( \"key\" ) );\n        assertNotNull( result.getProblems() );\n        assertEquals( 0, result.getProblems().size() );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/toolchain/building/DefaultToolchainsBuilderTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"aed51304870028e8bdbc3d85c9bd67cd741776e4","commitMessage":"@@@[MNG-6665] toolchain.xml file should support environment variables\n\n\n","date":"2019-06-08 16:43:12","modifiedFileCount":"2","status":"M","submitter":"MartinKanters"}]
