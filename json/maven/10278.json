[{"authorTime":"2014-05-30 01:38:07","codes":[{"authorDate":"2009-10-08 14:32:35","commitOrder":2,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2009-10-08 14:32:35","endLine":144,"groupId":"2254","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/8a/a848938799d1db869cfed2f60d1fef16bcaa0b.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"NB"},{"authorDate":"2014-05-30 01:38:07","commitOrder":2,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            XcreateDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2014-07-06 04:15:36","endLine":142,"groupId":"2254","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/80/aee224d63e7ef1c4db62d38f82ede40e2e950e.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            XcreateDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"6cf9320942c34bc68205425ab696b1712ace9ba4","commitMessage":"@@@MNG-5661: First step toward an immutable Maven Project. This removes all compentry from MavenProject. There's a note at the top\n          of the class which describes the rest of the work.\n\ncheck point\n","date":"2014-07-06 04:15:36","modifiedFileCount":"8","status":"M","submitter":"Jason van Zyl"},{"authorTime":"2014-11-26 04:44:43","codes":[{"authorDate":"2009-10-08 14:32:35","commitOrder":3,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2009-10-08 14:32:35","endLine":144,"groupId":"2254","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/8a/a848938799d1db869cfed2f60d1fef16bcaa0b.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"},{"authorDate":"2014-11-26 04:44:43","commitOrder":3,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        if ( d.getVersion() == null )\n        {\n            return null;\n        }\n\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            XcreateDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2014-11-26 08:11:00","endLine":147,"groupId":"2254","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e0/1ffc3aef7ef297842ff80ed0207a6d95d7d26b.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            XcreateDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"ce6f0bfdb527e20c3afbd76b9c742e07b13d25b2","commitMessage":"@@@MNG-5727 fixed cryptic exception when managed depenency has no <version>\n\nSigned-off-by: Igor Fedorenko <ifedorenko@apache.org>\n","date":"2014-11-26 08:11:00","modifiedFileCount":"3","status":"M","submitter":"Igor Fedorenko"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":4,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2015-06-20 16:56:07","endLine":172,"groupId":"2254","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/86/6968ba9d7c91a05e36eb491f63186592acc333.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2015-03-06 14:12:21","commitOrder":4,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        if ( d.getVersion() == null )\n        {\n            return null;\n        }\n\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            XcreateDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2015-06-20 16:56:07","endLine":128,"groupId":"2254","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/93/317105eb196040fc310a28a0e4c00c2bd36ca8.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        if ( d.getVersion() == null )\n        {\n            return null;\n        }\n\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            XcreateDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<String>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2015-12-20 00:37:11","commitOrder":5,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            \r\n            this.logger.error( String.format( \"Invalid version specification '%s' creating dependency artifact '%s'.\",\n                                              d.getVersion(), d ), e );\n            return null;\n        }\n\n        Artifact artifact =\n            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2017-02-01 05:44:59","endLine":175,"groupId":"2254","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/bd/5988a5bbe9f961415d48a23a532abf2619ec0a.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2015-03-06 14:12:21","commitOrder":5,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        if ( d.getVersion() == null )\n        {\n            return null;\n        }\n\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            XcreateDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2015-06-20 16:56:07","endLine":128,"groupId":"2254","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/93/317105eb196040fc310a28a0e4c00c2bd36ca8.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        if ( d.getVersion() == null )\n        {\n            return null;\n        }\n\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            XcreateDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"}],"commitId":"a3cdfbbbe9dcbd2737e3b4c1836c402f5d83ed46","commitMessage":"@@@[MNG-5368] UnsupportedOperationException thrown when version range is not correct in dependencyManagement definitions\n\no Updated to log an error message for any caught 'InvalidVersionSpecificationException's.\n","date":"2017-02-01 05:44:59","modifiedFileCount":"1","status":"M","submitter":"Christian Schulte"},{"authorTime":"2018-02-02 05:57:39","codes":[{"authorDate":"2015-12-20 00:37:11","commitOrder":6,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            \r\n            this.logger.error( String.format( \"Invalid version specification '%s' creating dependency artifact '%s'.\",\n                                              d.getVersion(), d ), e );\n            return null;\n        }\n\n        Artifact artifact =\n            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2017-02-01 05:44:59","endLine":175,"groupId":"2254","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/bd/5988a5bbe9f961415d48a23a532abf2619ec0a.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            \r\n            this.logger.error( String.format( \"Invalid version specification '%s' creating dependency artifact '%s'.\",\n                                              d.getVersion(), d ), e );\n            return null;\n        }\n\n        Artifact artifact =\n            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2018-02-02 05:57:39","commitOrder":6,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        if ( d.getVersion() == null )\n        {\n            return null;\n        }\n\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            createDependencyArtifactX( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2018-02-11 18:41:16","endLine":128,"groupId":"2254","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/84/ad93c92378271f7a207b02184622da73e175c5.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        if ( d.getVersion() == null )\n        {\n            return null;\n        }\n\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            XcreateDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"d92508179410897404bcc7e826bb0877be2d08b8","commitMessage":"@@@Reduce number of global checkstyle rule violations\n\nFix code for following checkstyle rules:\nConstantName.  FileLength.  InnerAssignment.  JavadocType.  MagicNumber.  MethodLength.  MethodName.  NewlineAtEndOfFile.  ParameterNumber.  RedundantThrows.  VisibilityModifier\n\nFixes #149","date":"2018-02-11 18:41:16","modifiedFileCount":"180","status":"M","submitter":"Sylwester Lachiewicz"},{"authorTime":"2019-04-29 21:31:34","codes":[{"authorDate":"2015-12-20 00:37:11","commitOrder":7,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            \r\n            this.logger.error( String.format( \"Invalid version specification '%s' creating dependency artifact '%s'.\",\n                                              d.getVersion(), d ), e );\n            return null;\n        }\n\n        Artifact artifact =\n            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","date":"2017-02-01 05:44:59","endLine":175,"groupId":"10278","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/bd/5988a5bbe9f961415d48a23a532abf2619ec0a.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            \r\n            this.logger.error( String.format( \"Invalid version specification '%s' creating dependency artifact '%s'.\",\n                                              d.getVersion(), d ), e );\n            return null;\n        }\n\n        Artifact artifact =\n            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2019-04-29 21:31:34","commitOrder":7,"curCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        if ( d.getVersion() == null )\n        {\n            return null;\n        }\n\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            createDependencyArtifactX( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            artifact.setDependencyFilter( new ExclusionArtifactFilter( d.getExclusions() ) );\n        }\n\n        return artifact;\n    }\n","date":"2019-05-25 19:12:47","endLine":122,"groupId":"10278","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createDependencyArtifact","params":"(Dependencyd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/73/0b428221d0916fc4d12a039447d1ba0cfbda0b.src","preCode":"    public Artifact createDependencyArtifact( Dependency d )\n    {\n        if ( d.getVersion() == null )\n        {\n            return null;\n        }\n\n        VersionRange versionRange;\n        try\n        {\n            versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n        }\n        catch ( InvalidVersionSpecificationException e )\n        {\n            return null;\n        }\n\n        Artifact artifact =\n            createDependencyArtifactX( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),\n                                                      d.getClassifier(), d.getScope(), d.isOptional() );\n\n        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && d.getSystemPath() != null )\n        {\n            artifact.setFile( new File( d.getSystemPath() ) );\n        }\n\n        if ( !d.getExclusions().isEmpty() )\n        {\n            List<String> exclusions = new ArrayList<>();\n\n            for ( Exclusion exclusion : d.getExclusions() )\n            {\n                exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );\n            }\n\n            artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );\n        }\n\n        return artifact;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"790dc0f2b73c07a478802cbd0183fc8bd2f3fe78","commitMessage":"@@@[MNG-6633] - Reduce memory usage of excludes\n\nExcludesArtifactFilter was highly inefficient.\nIt took the group and artifact ID of an Exclusion.  concatenated them into\na new String.  which was kept in memory for the whole duration\nof the build and then compared that String against the concatenation\nof group and artifact ID of each incoming artifact.  adding more\nCPU cycles than necessary.\n\nInstead we now just wrap the existing Exclusion object and check its\ngroupId and artifactId against the artifact to tell whether it should\nbe excluded.\n\nThe old class is kept around for binary compatibility.  but is now unused.\n\nCloses #243","date":"2019-05-25 19:12:47","modifiedFileCount":"2","status":"M","submitter":"Stefan Oehme"}]
