[{"authorTime":"2010-04-06 20:44:16","codes":[{"authorDate":"2011-01-15 06:40:53","commitOrder":4,"curCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                    }\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","date":"2011-01-15 06:40:53","endLine":175,"groupId":"449","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/b7/c8b1985fd038c422111259bde0b35ffd1831e7.src","preCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                    }\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"},{"authorDate":"2010-04-06 20:44:16","commitOrder":4,"curCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","date":"2010-04-06 20:44:16","endLine":493,"groupId":"322","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3a/1058cd7a0c28bef8193a510c9d2318508240f4.src","preCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"NB"}],"commitId":"7403318f91e22ca5c7318ef7c7d255f1f8eea370","commitMessage":"@@@[MNG-4975] [regression] plugin executions injected from profile run before instead of after existing executions in the POM\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1059192 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-01-15 06:40:53","modifiedFileCount":"1","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":5,"curCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                    }\n                }\n\n                target.setExecutions( new ArrayList<>( merged.values() ) );\n            }\n        }\n","date":"2015-06-20 16:56:07","endLine":176,"groupId":"4912","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/ae/d837bf2b89479b2f150add0c77f684687d621d.src","preCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                    }\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2015-03-06 14:12:21","commitOrder":5,"curCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant\n                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<>( merged.values() ) );\n        }\n    }\n","date":"2015-06-20 16:56:07","endLine":567,"groupId":"4958","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/66/577cbc0a05d74a7c98f2d4ada2de149aece6ef.src","preCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant\n                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"M"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2019-12-21 22:03:04","codes":[{"authorDate":"2019-12-21 22:03:04","commitOrder":6,"curCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey().apply( element );\n                    merged.put( key, element );\n                }\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey().apply( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                    }\n                }\n\n                target.setExecutions( new ArrayList<>( merged.values() ) );\n            }\n        }\n","date":"2019-12-21 22:03:04","endLine":183,"groupId":"1053","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/2f/9553b81e6a15600fd28339f6def4b5d0a2e70e.src","preCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( existing, element, sourceDominant, context );\n                    }\n                    else\n                    {\n                        merged.put( key, element );\n                    }\n                }\n\n                target.setExecutions( new ArrayList<>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2019-12-21 22:03:04","commitOrder":6,"curCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant\n                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey().apply( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey().apply( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<>( merged.values() ) );\n        }\n    }\n","date":"2019-12-21 22:03:04","endLine":588,"groupId":"1053","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/04/9ce1f1286ba3c45286aab983c3e23ca3ce2bbc.src","preCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant\n                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"}],"commitId":"11b8b2d5d4f327ad3e38275015a3aafbdc2c2c5c","commitMessage":"@@@[MNG-6824] ModelMerger is broken\nFix modules\nApply Java 8 Functions\n","date":"2019-12-21 22:03:04","modifiedFileCount":"7","status":"M","submitter":"rfscholte"}]
