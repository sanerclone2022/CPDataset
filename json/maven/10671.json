[{"authorTime":"2009-11-18 22:53:55","codes":[{"authorDate":"2014-12-24 22:23:55","commitOrder":2,"curCode":"    public ExtensionRealmCache.CacheRecord setupExtensionsRealm( MavenProject project, Plugin plugin,\n                                                                 RepositorySystemSession session )\n        throws PluginManagerException\n    {\n        @SuppressWarnings( \"unchecked\" )\n        Map<String, ExtensionRealmCache.CacheRecord> pluginRealms =\n            (Map<String, ExtensionRealmCache.CacheRecord>) project.getContextValue( KEY_EXTENSIONS_REALMS );\n        if ( pluginRealms == null )\n        {\n            pluginRealms = new HashMap<String, ExtensionRealmCache.CacheRecord>();\n            project.setContextValue( KEY_EXTENSIONS_REALMS, pluginRealms );\n        }\n\n        final String pluginKey = plugin.getId();\n\n        ExtensionRealmCache.CacheRecord extensionRecord = pluginRealms.get( pluginKey );\n        if ( extensionRecord != null )\n        {\n            return extensionRecord;\n        }\n\n        final List<RemoteRepository> repositories = project.getRemotePluginRepositories();\n\n        \r\n        if ( plugin.getVersion() == null )\n        {\n            PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, session, repositories );\n            try\n            {\n                plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );\n            }\n            catch ( PluginVersionResolutionException e )\n            {\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n\n        \r\n        List<Artifact> artifacts;\n        PluginArtifactsCache.Key cacheKey = pluginArtifactsCache.createKey( plugin, null, repositories, session );\n        PluginArtifactsCache.CacheRecord recordArtifacts;\n        try\n        {\n            recordArtifacts = pluginArtifactsCache.get( cacheKey );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n        if ( recordArtifacts != null )\n        {\n            artifacts = recordArtifacts.artifacts;\n        }\n        else\n        {\n            try\n            {\n                artifacts = resolveExtensionArtifacts( plugin, repositories, session );\n                recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );\n            }\n            catch ( PluginResolutionException e )\n            {\n                pluginArtifactsCache.put( cacheKey, e );\n                pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n        pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n\n        \r\n        final ExtensionRealmCache.Key extensionKey = extensionRealmCache.createKey( artifacts );\n        extensionRecord = extensionRealmCache.get( extensionKey );\n        if ( extensionRecord == null )\n        {\n            ClassRealm extensionRealm = classRealmManager.createExtensionRealm( plugin, toAetherArtifacts( artifacts ) );\n\n            PluginDescriptor pluginDescriptor = null;\n            if ( plugin.isExtensions() && !artifacts.isEmpty() )\n            {\n                \r\n                \r\n                try\n                {\n                    pluginDescriptor = extractPluginDescriptor( artifacts.get( 0 ), plugin );\n                }\n                catch ( PluginDescriptorParsingException e )\n                {\n                    \r\n                }\n                catch ( InvalidPluginDescriptorException e )\n                {\n                    \r\n                }\n            }\n\n            discoverPluginComponents( extensionRealm, plugin, pluginDescriptor );\n\n            ExtensionDescriptor extensionDescriptor = null;\n            Artifact extensionArtifact = artifacts.get( 0 );\n            try\n            {\n                extensionDescriptor = extensionDescriptorBuilder.build( extensionArtifact.getFile() );\n            }\n            catch ( IOException e )\n            {\n                String message = \"Invalid extension descriptor for \" + plugin.getId() + \": \" + e.getMessage();\n                if ( logger.isDebugEnabled() )\n                {\n                    logger.error( message, e );\n                }\n                else\n                {\n                    logger.error( message );\n                }\n            }\n            extensionRecord = extensionRealmCache.put( extensionKey, extensionRealm, extensionDescriptor, artifacts );\n        }\n        extensionRealmCache.register( project, extensionKey, extensionRecord );\n        pluginRealms.put( pluginKey, extensionRecord );\n\n        return extensionRecord;\n    }\n","date":"2014-12-26 02:31:29","endLine":925,"groupId":"6118","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupExtensionsRealm","params":"(MavenProjectproject@Pluginplugin@RepositorySystemSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/c8/15920805497905cb790c1ca1402da224167cc8.src","preCode":"    public ExtensionRealmCache.CacheRecord setupExtensionsRealm( MavenProject project, Plugin plugin,\n                                                                 RepositorySystemSession session )\n        throws PluginManagerException\n    {\n        @SuppressWarnings( \"unchecked\" )\n        Map<String, ExtensionRealmCache.CacheRecord> pluginRealms =\n            (Map<String, ExtensionRealmCache.CacheRecord>) project.getContextValue( KEY_EXTENSIONS_REALMS );\n        if ( pluginRealms == null )\n        {\n            pluginRealms = new HashMap<String, ExtensionRealmCache.CacheRecord>();\n            project.setContextValue( KEY_EXTENSIONS_REALMS, pluginRealms );\n        }\n\n        final String pluginKey = plugin.getId();\n\n        ExtensionRealmCache.CacheRecord extensionRecord = pluginRealms.get( pluginKey );\n        if ( extensionRecord != null )\n        {\n            return extensionRecord;\n        }\n\n        final List<RemoteRepository> repositories = project.getRemotePluginRepositories();\n\n        \r\n        if ( plugin.getVersion() == null )\n        {\n            PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, session, repositories );\n            try\n            {\n                plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );\n            }\n            catch ( PluginVersionResolutionException e )\n            {\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n\n        \r\n        List<Artifact> artifacts;\n        PluginArtifactsCache.Key cacheKey = pluginArtifactsCache.createKey( plugin, null, repositories, session );\n        PluginArtifactsCache.CacheRecord recordArtifacts;\n        try\n        {\n            recordArtifacts = pluginArtifactsCache.get( cacheKey );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n        if ( recordArtifacts != null )\n        {\n            artifacts = recordArtifacts.artifacts;\n        }\n        else\n        {\n            try\n            {\n                artifacts = resolveExtensionArtifacts( plugin, repositories, session );\n                recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );\n            }\n            catch ( PluginResolutionException e )\n            {\n                pluginArtifactsCache.put( cacheKey, e );\n                pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n        pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n\n        \r\n        final ExtensionRealmCache.Key extensionKey = extensionRealmCache.createKey( artifacts );\n        extensionRecord = extensionRealmCache.get( extensionKey );\n        if ( extensionRecord == null )\n        {\n            ClassRealm extensionRealm = classRealmManager.createExtensionRealm( plugin, toAetherArtifacts( artifacts ) );\n\n            PluginDescriptor pluginDescriptor = null;\n            if ( plugin.isExtensions() && !artifacts.isEmpty() )\n            {\n                \r\n                \r\n                try\n                {\n                    pluginDescriptor = extractPluginDescriptor( artifacts.get( 0 ), plugin );\n                }\n                catch ( PluginDescriptorParsingException e )\n                {\n                    \r\n                }\n                catch ( InvalidPluginDescriptorException e )\n                {\n                    \r\n                }\n            }\n\n            discoverPluginComponents( extensionRealm, plugin, pluginDescriptor );\n\n            ExtensionDescriptor extensionDescriptor = null;\n            Artifact extensionArtifact = artifacts.get( 0 );\n            try\n            {\n                extensionDescriptor = extensionDescriptorBuilder.build( extensionArtifact.getFile() );\n            }\n            catch ( IOException e )\n            {\n                String message = \"Invalid extension descriptor for \" + plugin.getId() + \": \" + e.getMessage();\n                if ( logger.isDebugEnabled() )\n                {\n                    logger.error( message, e );\n                }\n                else\n                {\n                    logger.error( message );\n                }\n            }\n            extensionRecord = extensionRealmCache.put( extensionKey, extensionRealm, extensionDescriptor, artifacts );\n        }\n        extensionRealmCache.register( project, extensionKey, extensionRecord );\n        pluginRealms.put( pluginKey, extensionRecord );\n\n        return extensionRecord;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":804,"status":"B"},{"authorDate":"2009-11-18 22:53:55","commitOrder":2,"curCode":"    public PluginDescriptor loadPluginFully( Plugin plugin, MavenProject project, MavenSession session )\n        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException,\n        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException,\n        PluginVersionNotFoundException\n    {\n        PluginDescriptor pluginDescriptor = loadPluginDescriptor( plugin, project, session );\n\n        try\n        {\n            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null, null );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n\n        return pluginDescriptor;\n    }\n","date":"2009-11-18 22:53:55","endLine":242,"groupId":"2763","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadPluginFully","params":"(Pluginplugin@MavenProjectproject@MavenSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/b6/54a6fd908505e023acacbe44c5d51587711b82.src","preCode":"    public PluginDescriptor loadPluginFully( Plugin plugin, MavenProject project, MavenSession session )\n        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException,\n        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException,\n        PluginVersionNotFoundException\n    {\n        PluginDescriptor pluginDescriptor = loadPluginDescriptor( plugin, project, session );\n\n        try\n        {\n            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null, null );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n\n        return pluginDescriptor;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"NB"}],"commitId":"1420d61c05f0719ff59417430906954a4cc58ff6","commitMessage":"@@@MNG-5742 fixed duplicate plugin realms when extensions=true\n\nConsolidated plugin realm setup logic in DefaultMavenPluginManager.\nExtensions realm is fully setup during project loading and the same\nrealm is used to both load extensions and execute plugin goals now.\n\nSigned-off-by: Igor Fedorenko <ifedorenko@apache.org>\n","date":"2014-12-26 02:31:29","modifiedFileCount":"10","status":"M","submitter":"Igor Fedorenko"},{"authorTime":"2009-11-18 22:53:55","codes":[{"authorDate":"2015-06-20 21:21:10","commitOrder":3,"curCode":"    public ExtensionRealmCache.CacheRecord setupExtensionsRealm( MavenProject project, Plugin plugin,\n                                                                 RepositorySystemSession session )\n        throws PluginManagerException\n    {\n        @SuppressWarnings( \"unchecked\" ) Map<String, ExtensionRealmCache.CacheRecord> pluginRealms =\n            (Map<String, ExtensionRealmCache.CacheRecord>) project.getContextValue( KEY_EXTENSIONS_REALMS );\n        if ( pluginRealms == null )\n        {\n            pluginRealms = new HashMap<>();\n            project.setContextValue( KEY_EXTENSIONS_REALMS, pluginRealms );\n        }\n\n        final String pluginKey = plugin.getId();\n\n        ExtensionRealmCache.CacheRecord extensionRecord = pluginRealms.get( pluginKey );\n        if ( extensionRecord != null )\n        {\n            return extensionRecord;\n        }\n\n        final List<RemoteRepository> repositories = project.getRemotePluginRepositories();\n\n        \r\n        if ( plugin.getVersion() == null )\n        {\n            PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, session, repositories );\n            try\n            {\n                plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );\n            }\n            catch ( PluginVersionResolutionException e )\n            {\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n\n        \r\n        List<Artifact> artifacts;\n        PluginArtifactsCache.Key cacheKey = pluginArtifactsCache.createKey( plugin, null, repositories, session );\n        PluginArtifactsCache.CacheRecord recordArtifacts;\n        try\n        {\n            recordArtifacts = pluginArtifactsCache.get( cacheKey );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n        if ( recordArtifacts != null )\n        {\n            artifacts = recordArtifacts.artifacts;\n        }\n        else\n        {\n            try\n            {\n                artifacts = resolveExtensionArtifacts( plugin, repositories, session );\n                recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );\n            }\n            catch ( PluginResolutionException e )\n            {\n                pluginArtifactsCache.put( cacheKey, e );\n                pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n        pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n\n        \r\n        final ExtensionRealmCache.Key extensionKey = extensionRealmCache.createKey( artifacts );\n        extensionRecord = extensionRealmCache.get( extensionKey );\n        if ( extensionRecord == null )\n        {\n            ClassRealm extensionRealm =\n                classRealmManager.createExtensionRealm( plugin, toAetherArtifacts( artifacts ) );\n\n            \r\n\n            PluginDescriptor pluginDescriptor = null;\n            if ( plugin.isExtensions() && !artifacts.isEmpty() )\n            {\n                \r\n                \r\n                try\n                {\n                    pluginDescriptor = extractPluginDescriptor( artifacts.get( 0 ), plugin );\n                }\n                catch ( PluginDescriptorParsingException | InvalidPluginDescriptorException e )\n                {\n                    \r\n                }\n            }\n\n            discoverPluginComponents( extensionRealm, plugin, pluginDescriptor );\n\n            ExtensionDescriptor extensionDescriptor = null;\n            Artifact extensionArtifact = artifacts.get( 0 );\n            try\n            {\n                extensionDescriptor = extensionDescriptorBuilder.build( extensionArtifact.getFile() );\n            }\n            catch ( IOException e )\n            {\n                String message = \"Invalid extension descriptor for \" + plugin.getId() + \": \" + e.getMessage();\n                if ( logger.isDebugEnabled() )\n                {\n                    logger.error( message, e );\n                }\n                else\n                {\n                    logger.error( message );\n                }\n            }\n            extensionRecord = extensionRealmCache.put( extensionKey, extensionRealm, extensionDescriptor, artifacts );\n        }\n        extensionRealmCache.register( project, extensionKey, extensionRecord );\n        pluginRealms.put( pluginKey, extensionRecord );\n\n        return extensionRecord;\n    }\n","date":"2015-06-20 21:21:10","endLine":910,"groupId":"6118","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupExtensionsRealm","params":"(MavenProjectproject@Pluginplugin@RepositorySystemSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e7/eecb5d180600ab79950a1bac95008fb1cec4b7.src","preCode":"    public ExtensionRealmCache.CacheRecord setupExtensionsRealm( MavenProject project, Plugin plugin,\n                                                                 RepositorySystemSession session )\n        throws PluginManagerException\n    {\n        @SuppressWarnings( \"unchecked\" ) Map<String, ExtensionRealmCache.CacheRecord> pluginRealms =\n            (Map<String, ExtensionRealmCache.CacheRecord>) project.getContextValue( KEY_EXTENSIONS_REALMS );\n        if ( pluginRealms == null )\n        {\n            pluginRealms = new HashMap<String, ExtensionRealmCache.CacheRecord>();\n            project.setContextValue( KEY_EXTENSIONS_REALMS, pluginRealms );\n        }\n\n        final String pluginKey = plugin.getId();\n\n        ExtensionRealmCache.CacheRecord extensionRecord = pluginRealms.get( pluginKey );\n        if ( extensionRecord != null )\n        {\n            return extensionRecord;\n        }\n\n        final List<RemoteRepository> repositories = project.getRemotePluginRepositories();\n\n        \r\n        if ( plugin.getVersion() == null )\n        {\n            PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, session, repositories );\n            try\n            {\n                plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );\n            }\n            catch ( PluginVersionResolutionException e )\n            {\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n\n        \r\n        List<Artifact> artifacts;\n        PluginArtifactsCache.Key cacheKey = pluginArtifactsCache.createKey( plugin, null, repositories, session );\n        PluginArtifactsCache.CacheRecord recordArtifacts;\n        try\n        {\n            recordArtifacts = pluginArtifactsCache.get( cacheKey );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n        if ( recordArtifacts != null )\n        {\n            artifacts = recordArtifacts.artifacts;\n        }\n        else\n        {\n            try\n            {\n                artifacts = resolveExtensionArtifacts( plugin, repositories, session );\n                recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );\n            }\n            catch ( PluginResolutionException e )\n            {\n                pluginArtifactsCache.put( cacheKey, e );\n                pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n        pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n\n        \r\n        final ExtensionRealmCache.Key extensionKey = extensionRealmCache.createKey( artifacts );\n        extensionRecord = extensionRealmCache.get( extensionKey );\n        if ( extensionRecord == null )\n        {\n            ClassRealm extensionRealm =\n                classRealmManager.createExtensionRealm( plugin, toAetherArtifacts( artifacts ) );\n\n            \r\n\n            PluginDescriptor pluginDescriptor = null;\n            if ( plugin.isExtensions() && !artifacts.isEmpty() )\n            {\n                \r\n                \r\n                try\n                {\n                    pluginDescriptor = extractPluginDescriptor( artifacts.get( 0 ), plugin );\n                }\n                catch ( PluginDescriptorParsingException e )\n                {\n                    \r\n                }\n                catch ( InvalidPluginDescriptorException e )\n                {\n                    \r\n                }\n            }\n\n            discoverPluginComponents( extensionRealm, plugin, pluginDescriptor );\n\n            ExtensionDescriptor extensionDescriptor = null;\n            Artifact extensionArtifact = artifacts.get( 0 );\n            try\n            {\n                extensionDescriptor = extensionDescriptorBuilder.build( extensionArtifact.getFile() );\n            }\n            catch ( IOException e )\n            {\n                String message = \"Invalid extension descriptor for \" + plugin.getId() + \": \" + e.getMessage();\n                if ( logger.isDebugEnabled() )\n                {\n                    logger.error( message, e );\n                }\n                else\n                {\n                    logger.error( message );\n                }\n            }\n            extensionRecord = extensionRealmCache.put( extensionKey, extensionRealm, extensionDescriptor, artifacts );\n        }\n        extensionRealmCache.register( project, extensionKey, extensionRecord );\n        pluginRealms.put( pluginKey, extensionRecord );\n\n        return extensionRecord;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"M"},{"authorDate":"2009-11-18 22:53:55","commitOrder":3,"curCode":"    public PluginDescriptor loadPluginFully( Plugin plugin, MavenProject project, MavenSession session )\n        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException,\n        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException,\n        PluginVersionNotFoundException\n    {\n        PluginDescriptor pluginDescriptor = loadPluginDescriptor( plugin, project, session );\n\n        try\n        {\n            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null, null );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n\n        return pluginDescriptor;\n    }\n","date":"2009-11-18 22:53:55","endLine":242,"groupId":"2763","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadPluginFully","params":"(Pluginplugin@MavenProjectproject@MavenSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/b6/54a6fd908505e023acacbe44c5d51587711b82.src","preCode":"    public PluginDescriptor loadPluginFully( Plugin plugin, MavenProject project, MavenSession session )\n        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException,\n        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException,\n        PluginVersionNotFoundException\n    {\n        PluginDescriptor pluginDescriptor = loadPluginDescriptor( plugin, project, session );\n\n        try\n        {\n            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null, null );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n\n        return pluginDescriptor;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"N"}],"commitId":"cfd1fbe6131eb9f03f0af0f5942863bc5ef4f2aa","commitMessage":"@@@More java7. Bye bye 2006\n","date":"2015-06-20 21:21:10","modifiedFileCount":"13","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2009-11-18 22:53:55","codes":[{"authorDate":"2018-02-02 05:57:39","commitOrder":4,"curCode":"    public ExtensionRealmCache.CacheRecord setupExtensionsRealm( MavenProject project, Plugin plugin,\n                                                                 RepositorySystemSession session )\n        throws PluginManagerException\n    {\n        @SuppressWarnings( \"unchecked\" ) Map<String, ExtensionRealmCache.CacheRecord> pluginRealms =\n            (Map<String, ExtensionRealmCache.CacheRecord>) project.getContextValue( KEY_EXTENSIONS_REALMS );\n        if ( pluginRealms == null )\n        {\n            pluginRealms = new HashMap<>();\n            project.setContextValue( KEY_EXTENSIONS_REALMS, pluginRealms );\n        }\n\n        final String pluginKey = plugin.getId();\n\n        ExtensionRealmCache.CacheRecord extensionRecord = pluginRealms.get( pluginKey );\n        if ( extensionRecord != null )\n        {\n            return extensionRecord;\n        }\n\n        final List<RemoteRepository> repositories = project.getRemotePluginRepositories();\n\n        \r\n        if ( plugin.getVersion() == null )\n        {\n            PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, session, repositories );\n            try\n            {\n                plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );\n            }\n            catch ( PluginVersionResolutionException e )\n            {\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n\n        \r\n        List<Artifact> artifacts;\n        PluginArtifactsCache.Key cacheKey = pluginArtifactsCache.createKey( plugin, null, repositories, session );\n        PluginArtifactsCache.CacheRecord recordArtifacts;\n        try\n        {\n            recordArtifacts = pluginArtifactsCache.get( cacheKey );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n        if ( recordArtifacts != null )\n        {\n            artifacts = recordArtifacts.getArtifacts();\n        }\n        else\n        {\n            try\n            {\n                artifacts = resolveExtensionArtifacts( plugin, repositories, session );\n                recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );\n            }\n            catch ( PluginResolutionException e )\n            {\n                pluginArtifactsCache.put( cacheKey, e );\n                pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n        pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n\n        \r\n        final ExtensionRealmCache.Key extensionKey = extensionRealmCache.createKey( artifacts );\n        extensionRecord = extensionRealmCache.get( extensionKey );\n        if ( extensionRecord == null )\n        {\n            ClassRealm extensionRealm =\n                classRealmManager.createExtensionRealm( plugin, toAetherArtifacts( artifacts ) );\n\n            \r\n\n            PluginDescriptor pluginDescriptor = null;\n            if ( plugin.isExtensions() && !artifacts.isEmpty() )\n            {\n                \r\n                \r\n                try\n                {\n                    pluginDescriptor = extractPluginDescriptor( artifacts.get( 0 ), plugin );\n                }\n                catch ( PluginDescriptorParsingException | InvalidPluginDescriptorException e )\n                {\n                    \r\n                }\n            }\n\n            discoverPluginComponents( extensionRealm, plugin, pluginDescriptor );\n\n            ExtensionDescriptor extensionDescriptor = null;\n            Artifact extensionArtifact = artifacts.get( 0 );\n            try\n            {\n                extensionDescriptor = extensionDescriptorBuilder.build( extensionArtifact.getFile() );\n            }\n            catch ( IOException e )\n            {\n                String message = \"Invalid extension descriptor for \" + plugin.getId() + \": \" + e.getMessage();\n                if ( logger.isDebugEnabled() )\n                {\n                    logger.error( message, e );\n                }\n                else\n                {\n                    logger.error( message );\n                }\n            }\n            extensionRecord = extensionRealmCache.put( extensionKey, extensionRealm, extensionDescriptor, artifacts );\n        }\n        extensionRealmCache.register( project, extensionKey, extensionRecord );\n        pluginRealms.put( pluginKey, extensionRecord );\n\n        return extensionRecord;\n    }\n","date":"2018-02-11 18:41:16","endLine":904,"groupId":"10671","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupExtensionsRealm","params":"(MavenProjectproject@Pluginplugin@RepositorySystemSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/34/b3b17bf62fe7a68c167035d3e9dd399011f6d4.src","preCode":"    public ExtensionRealmCache.CacheRecord setupExtensionsRealm( MavenProject project, Plugin plugin,\n                                                                 RepositorySystemSession session )\n        throws PluginManagerException\n    {\n        @SuppressWarnings( \"unchecked\" ) Map<String, ExtensionRealmCache.CacheRecord> pluginRealms =\n            (Map<String, ExtensionRealmCache.CacheRecord>) project.getContextValue( KEY_EXTENSIONS_REALMS );\n        if ( pluginRealms == null )\n        {\n            pluginRealms = new HashMap<>();\n            project.setContextValue( KEY_EXTENSIONS_REALMS, pluginRealms );\n        }\n\n        final String pluginKey = plugin.getId();\n\n        ExtensionRealmCache.CacheRecord extensionRecord = pluginRealms.get( pluginKey );\n        if ( extensionRecord != null )\n        {\n            return extensionRecord;\n        }\n\n        final List<RemoteRepository> repositories = project.getRemotePluginRepositories();\n\n        \r\n        if ( plugin.getVersion() == null )\n        {\n            PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, session, repositories );\n            try\n            {\n                plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );\n            }\n            catch ( PluginVersionResolutionException e )\n            {\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n\n        \r\n        List<Artifact> artifacts;\n        PluginArtifactsCache.Key cacheKey = pluginArtifactsCache.createKey( plugin, null, repositories, session );\n        PluginArtifactsCache.CacheRecord recordArtifacts;\n        try\n        {\n            recordArtifacts = pluginArtifactsCache.get( cacheKey );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n        if ( recordArtifacts != null )\n        {\n            artifacts = recordArtifacts.artifacts;\n        }\n        else\n        {\n            try\n            {\n                artifacts = resolveExtensionArtifacts( plugin, repositories, session );\n                recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );\n            }\n            catch ( PluginResolutionException e )\n            {\n                pluginArtifactsCache.put( cacheKey, e );\n                pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n                throw new PluginManagerException( plugin, e.getMessage(), e );\n            }\n        }\n        pluginArtifactsCache.register( project, cacheKey, recordArtifacts );\n\n        \r\n        final ExtensionRealmCache.Key extensionKey = extensionRealmCache.createKey( artifacts );\n        extensionRecord = extensionRealmCache.get( extensionKey );\n        if ( extensionRecord == null )\n        {\n            ClassRealm extensionRealm =\n                classRealmManager.createExtensionRealm( plugin, toAetherArtifacts( artifacts ) );\n\n            \r\n\n            PluginDescriptor pluginDescriptor = null;\n            if ( plugin.isExtensions() && !artifacts.isEmpty() )\n            {\n                \r\n                \r\n                try\n                {\n                    pluginDescriptor = extractPluginDescriptor( artifacts.get( 0 ), plugin );\n                }\n                catch ( PluginDescriptorParsingException | InvalidPluginDescriptorException e )\n                {\n                    \r\n                }\n            }\n\n            discoverPluginComponents( extensionRealm, plugin, pluginDescriptor );\n\n            ExtensionDescriptor extensionDescriptor = null;\n            Artifact extensionArtifact = artifacts.get( 0 );\n            try\n            {\n                extensionDescriptor = extensionDescriptorBuilder.build( extensionArtifact.getFile() );\n            }\n            catch ( IOException e )\n            {\n                String message = \"Invalid extension descriptor for \" + plugin.getId() + \": \" + e.getMessage();\n                if ( logger.isDebugEnabled() )\n                {\n                    logger.error( message, e );\n                }\n                else\n                {\n                    logger.error( message );\n                }\n            }\n            extensionRecord = extensionRealmCache.put( extensionKey, extensionRealm, extensionDescriptor, artifacts );\n        }\n        extensionRealmCache.register( project, extensionKey, extensionRecord );\n        pluginRealms.put( pluginKey, extensionRecord );\n\n        return extensionRecord;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":785,"status":"M"},{"authorDate":"2009-11-18 22:53:55","commitOrder":4,"curCode":"    public PluginDescriptor loadPluginFully( Plugin plugin, MavenProject project, MavenSession session )\n        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException,\n        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException,\n        PluginVersionNotFoundException\n    {\n        PluginDescriptor pluginDescriptor = loadPluginDescriptor( plugin, project, session );\n\n        try\n        {\n            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null, null );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n\n        return pluginDescriptor;\n    }\n","date":"2009-11-18 22:53:55","endLine":242,"groupId":"10671","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadPluginFully","params":"(Pluginplugin@MavenProjectproject@MavenSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/b6/54a6fd908505e023acacbe44c5d51587711b82.src","preCode":"    public PluginDescriptor loadPluginFully( Plugin plugin, MavenProject project, MavenSession session )\n        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException,\n        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException,\n        PluginVersionNotFoundException\n    {\n        PluginDescriptor pluginDescriptor = loadPluginDescriptor( plugin, project, session );\n\n        try\n        {\n            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null, null );\n        }\n        catch ( PluginResolutionException e )\n        {\n            throw new PluginManagerException( plugin, e.getMessage(), e );\n        }\n\n        return pluginDescriptor;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginManager.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"N"}],"commitId":"d92508179410897404bcc7e826bb0877be2d08b8","commitMessage":"@@@Reduce number of global checkstyle rule violations\n\nFix code for following checkstyle rules:\nConstantName.  FileLength.  InnerAssignment.  JavadocType.  MagicNumber.  MethodLength.  MethodName.  NewlineAtEndOfFile.  ParameterNumber.  RedundantThrows.  VisibilityModifier\n\nFixes #149","date":"2018-02-11 18:41:16","modifiedFileCount":"180","status":"M","submitter":"Sylwester Lachiewicz"}]
