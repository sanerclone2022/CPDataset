[{"authorTime":"2017-12-22 21:25:46","codes":[{"authorDate":"2017-12-22 21:25:46","commitOrder":7,"curCode":"        public CacheKey( Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader> foreignImports,\n                         DependencyFilter dependencyFilter, List<RemoteRepository> repositories,\n                         RepositorySystemSession session )\n        {\n            this.plugin = plugin.clone();\n            this.workspace = RepositoryUtils.getWorkspace( session );\n            this.localRepo = session.getLocalRepository();\n            this.repositories = new ArrayList<>( repositories.size() );\n            for ( RemoteRepository repository : repositories )\n            {\n                if ( repository.isRepositoryManager() )\n                {\n                    this.repositories.addAll( repository.getMirroredRepositories() );\n                }\n                else\n                {\n                    this.repositories.add( repository );\n                }\n            }\n            this.parentRealm = parentRealm;\n            this.foreignImports =\n                ( foreignImports != null ) ? foreignImports : Collections.<String, ClassLoader>emptyMap();\n            this.filter = dependencyFilter;\n\n            int hash = 17;\n            hash = hash * 31 + CacheUtils.pluginHashCode( plugin );\n            hash = hash * 31 + Objects.hashCode( workspace );\n            hash = hash * 31 + Objects.hashCode( localRepo );\n            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );\n            hash = hash * 31 + Objects.hashCode( parentRealm );\n            hash = hash * 31 + this.foreignImports.hashCode();\n            hash = hash * 31 + Objects.hashCode( dependencyFilter );\n            this.hashCode = hash;\n        }\n","date":"2017-12-22 21:25:46","endLine":105,"groupId":"113","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"CacheKey","params":"(Pluginplugin@ClassLoaderparentRealm@Map<String@ClassLoader>foreignImports@DependencyFilterdependencyFilter@List<RemoteRepository>repositories@RepositorySystemSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/1c/09d9b4e51201d21ec3f2a724fd7f48a0300e39.src","preCode":"        public CacheKey( Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader> foreignImports,\n                         DependencyFilter dependencyFilter, List<RemoteRepository> repositories,\n                         RepositorySystemSession session )\n        {\n            this.plugin = plugin.clone();\n            this.workspace = RepositoryUtils.getWorkspace( session );\n            this.localRepo = session.getLocalRepository();\n            this.repositories = new ArrayList<>( repositories.size() );\n            for ( RemoteRepository repository : repositories )\n            {\n                if ( repository.isRepositoryManager() )\n                {\n                    this.repositories.addAll( repository.getMirroredRepositories() );\n                }\n                else\n                {\n                    this.repositories.add( repository );\n                }\n            }\n            this.parentRealm = parentRealm;\n            this.foreignImports =\n                ( foreignImports != null ) ? foreignImports : Collections.<String, ClassLoader>emptyMap();\n            this.filter = dependencyFilter;\n\n            int hash = 17;\n            hash = hash * 31 + CacheUtils.pluginHashCode( plugin );\n            hash = hash * 31 + Objects.hashCode( workspace );\n            hash = hash * 31 + Objects.hashCode( localRepo );\n            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );\n            hash = hash * 31 + Objects.hashCode( parentRealm );\n            hash = hash * 31 + this.foreignImports.hashCode();\n            hash = hash * 31 + Objects.hashCode( dependencyFilter );\n            this.hashCode = hash;\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"MB"},{"authorDate":"2017-12-22 21:25:46","commitOrder":7,"curCode":"        public CacheKey( MavenProject project, List<RemoteRepository> repositories,\n            Collection<String> scopesToCollect, Collection<String> scopesToResolve, boolean aggregating,\n            RepositorySystemSession session )\n        {\n            \n            groupId = project.getGroupId();\n            artifactId = project.getArtifactId();\n            version = project.getVersion();\n            \n            Set<String> deps = new HashSet<>();\n            if ( project.getDependencyArtifacts() != null )\n            {\n              for ( Artifact dep: project.getDependencyArtifacts() )\n              {\n                deps.add( dep.toString() );\n              }\n            }\n            dependencyArtifacts = Collections.unmodifiableSet( deps );\n            \n            workspace = RepositoryUtils.getWorkspace( session );\n            this.localRepo = session.getLocalRepository();\n            this.repositories = new ArrayList<>( repositories.size() );\n            for ( RemoteRepository repository : repositories )\n            {\n                if ( repository.isRepositoryManager() )\n                {\n                    this.repositories.addAll( repository.getMirroredRepositories() );\n                }\n                else\n                {\n                    this.repositories.add( repository );\n                }\n            }\n            collect = scopesToCollect == null\n                ? Collections.<String>emptySet() \n                : Collections.unmodifiableSet( new HashSet<>( scopesToCollect ) );\n            resolve = scopesToResolve == null \n                ? Collections.<String>emptySet() \n                : Collections.unmodifiableSet( new HashSet<>( scopesToResolve ) );\n            this.aggregating = aggregating;\n\n            int hash = 17;\n            hash = hash * 31 + Objects.hashCode( groupId );\n            hash = hash * 31 + Objects.hashCode( artifactId );\n            hash = hash * 31 + Objects.hashCode( version );\n            hash = hash * 31 + Objects.hashCode( dependencyArtifacts );\n            hash = hash * 31 + Objects.hashCode( workspace );\n            hash = hash * 31 + Objects.hashCode( localRepo );\n            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );\n            hash = hash * 31 + Objects.hashCode( collect );\n            hash = hash * 31 + Objects.hashCode( resolve );\n            hash = hash * 31 + Objects.hashCode( aggregating );\n            this.hashCode = hash;\n        }\n","date":"2017-12-22 21:25:46","endLine":132,"groupId":"4381","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"CacheKey","params":"(MavenProjectproject@List<RemoteRepository>repositories@Collection<String>scopesToCollect@Collection<String>scopesToResolve@booleanaggregating@RepositorySystemSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/87/d2e444a6f48feaa308f727c42c447fb9f0878f.src","preCode":"        public CacheKey( MavenProject project, List<RemoteRepository> repositories,\n            Collection<String> scopesToCollect, Collection<String> scopesToResolve, boolean aggregating,\n            RepositorySystemSession session )\n        {\n            \n            groupId = project.getGroupId();\n            artifactId = project.getArtifactId();\n            version = project.getVersion();\n            \n            Set<String> deps = new HashSet<>();\n            if ( project.getDependencyArtifacts() != null )\n            {\n              for ( Artifact dep: project.getDependencyArtifacts() )\n              {\n                deps.add( dep.toString() );\n              }\n            }\n            dependencyArtifacts = Collections.unmodifiableSet( deps );\n            \n            workspace = RepositoryUtils.getWorkspace( session );\n            this.localRepo = session.getLocalRepository();\n            this.repositories = new ArrayList<>( repositories.size() );\n            for ( RemoteRepository repository : repositories )\n            {\n                if ( repository.isRepositoryManager() )\n                {\n                    this.repositories.addAll( repository.getMirroredRepositories() );\n                }\n                else\n                {\n                    this.repositories.add( repository );\n                }\n            }\n            collect = scopesToCollect == null\n                ? Collections.<String>emptySet() \n                : Collections.unmodifiableSet( new HashSet<>( scopesToCollect ) );\n            resolve = scopesToResolve == null \n                ? Collections.<String>emptySet() \n                : Collections.unmodifiableSet( new HashSet<>( scopesToResolve ) );\n            this.aggregating = aggregating;\n\n            int hash = 17;\n            hash = hash * 31 + Objects.hashCode( groupId );\n            hash = hash * 31 + Objects.hashCode( artifactId );\n            hash = hash * 31 + Objects.hashCode( version );\n            hash = hash * 31 + Objects.hashCode( dependencyArtifacts );\n            hash = hash * 31 + Objects.hashCode( workspace );\n            hash = hash * 31 + Objects.hashCode( localRepo );\n            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );\n            hash = hash * 31 + Objects.hashCode( collect );\n            hash = hash * 31 + Objects.hashCode( resolve );\n            hash = hash * 31 + Objects.hashCode( aggregating );\n            this.hashCode = hash;\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"98af937bc6298e82e489b5f0cd3fb0a1c3d37109","commitMessage":"@@@[MNG-6300] Multi module release creates empty directories in war file instead of jars\n","date":"2017-12-22 21:25:46","modifiedFileCount":"7","status":"M","submitter":"rfscholte"},{"authorTime":"2018-09-25 01:50:39","codes":[{"authorDate":"2017-12-22 21:25:46","commitOrder":8,"curCode":"        public CacheKey( Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader> foreignImports,\n                         DependencyFilter dependencyFilter, List<RemoteRepository> repositories,\n                         RepositorySystemSession session )\n        {\n            this.plugin = plugin.clone();\n            this.workspace = RepositoryUtils.getWorkspace( session );\n            this.localRepo = session.getLocalRepository();\n            this.repositories = new ArrayList<>( repositories.size() );\n            for ( RemoteRepository repository : repositories )\n            {\n                if ( repository.isRepositoryManager() )\n                {\n                    this.repositories.addAll( repository.getMirroredRepositories() );\n                }\n                else\n                {\n                    this.repositories.add( repository );\n                }\n            }\n            this.parentRealm = parentRealm;\n            this.foreignImports =\n                ( foreignImports != null ) ? foreignImports : Collections.<String, ClassLoader>emptyMap();\n            this.filter = dependencyFilter;\n\n            int hash = 17;\n            hash = hash * 31 + CacheUtils.pluginHashCode( plugin );\n            hash = hash * 31 + Objects.hashCode( workspace );\n            hash = hash * 31 + Objects.hashCode( localRepo );\n            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );\n            hash = hash * 31 + Objects.hashCode( parentRealm );\n            hash = hash * 31 + this.foreignImports.hashCode();\n            hash = hash * 31 + Objects.hashCode( dependencyFilter );\n            this.hashCode = hash;\n        }\n","date":"2017-12-22 21:25:46","endLine":105,"groupId":"10678","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"CacheKey","params":"(Pluginplugin@ClassLoaderparentRealm@Map<String@ClassLoader>foreignImports@DependencyFilterdependencyFilter@List<RemoteRepository>repositories@RepositorySystemSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/1c/09d9b4e51201d21ec3f2a724fd7f48a0300e39.src","preCode":"        public CacheKey( Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader> foreignImports,\n                         DependencyFilter dependencyFilter, List<RemoteRepository> repositories,\n                         RepositorySystemSession session )\n        {\n            this.plugin = plugin.clone();\n            this.workspace = RepositoryUtils.getWorkspace( session );\n            this.localRepo = session.getLocalRepository();\n            this.repositories = new ArrayList<>( repositories.size() );\n            for ( RemoteRepository repository : repositories )\n            {\n                if ( repository.isRepositoryManager() )\n                {\n                    this.repositories.addAll( repository.getMirroredRepositories() );\n                }\n                else\n                {\n                    this.repositories.add( repository );\n                }\n            }\n            this.parentRealm = parentRealm;\n            this.foreignImports =\n                ( foreignImports != null ) ? foreignImports : Collections.<String, ClassLoader>emptyMap();\n            this.filter = dependencyFilter;\n\n            int hash = 17;\n            hash = hash * 31 + CacheUtils.pluginHashCode( plugin );\n            hash = hash * 31 + Objects.hashCode( workspace );\n            hash = hash * 31 + Objects.hashCode( localRepo );\n            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );\n            hash = hash * 31 + Objects.hashCode( parentRealm );\n            hash = hash * 31 + this.foreignImports.hashCode();\n            hash = hash * 31 + Objects.hashCode( dependencyFilter );\n            this.hashCode = hash;\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2018-09-25 01:50:39","commitOrder":8,"curCode":"        public CacheKey( MavenProject project, List<RemoteRepository> repositories,\n            Collection<String> scopesToCollect, Collection<String> scopesToResolve, boolean aggregating,\n            RepositorySystemSession session )\n        {\n            \n            groupId = project.getGroupId();\n            artifactId = project.getArtifactId();\n            version = project.getVersion();\n            \n            Set<String> deps = new LinkedHashSet<>();\n            if ( project.getDependencyArtifacts() != null )\n            {\n              for ( Artifact dep: project.getDependencyArtifacts() )\n              {\n                deps.add( dep.toString() );\n              }\n            }\n            dependencyArtifacts = Collections.unmodifiableSet( deps );\n            \n            workspace = RepositoryUtils.getWorkspace( session );\n            this.localRepo = session.getLocalRepository();\n            this.repositories = new ArrayList<>( repositories.size() );\n            for ( RemoteRepository repository : repositories )\n            {\n                if ( repository.isRepositoryManager() )\n                {\n                    this.repositories.addAll( repository.getMirroredRepositories() );\n                }\n                else\n                {\n                    this.repositories.add( repository );\n                }\n            }\n            collect = scopesToCollect == null\n                ? Collections.<String>emptySet() \n                : Collections.unmodifiableSet( new HashSet<>( scopesToCollect ) );\n            resolve = scopesToResolve == null \n                ? Collections.<String>emptySet() \n                : Collections.unmodifiableSet( new HashSet<>( scopesToResolve ) );\n            this.aggregating = aggregating;\n\n            int hash = 17;\n            hash = hash * 31 + Objects.hashCode( groupId );\n            hash = hash * 31 + Objects.hashCode( artifactId );\n            hash = hash * 31 + Objects.hashCode( version );\n            hash = hash * 31 + Objects.hashCode( dependencyArtifacts );\n            hash = hash * 31 + Objects.hashCode( workspace );\n            hash = hash * 31 + Objects.hashCode( localRepo );\n            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );\n            hash = hash * 31 + Objects.hashCode( collect );\n            hash = hash * 31 + Objects.hashCode( resolve );\n            hash = hash * 31 + Objects.hashCode( aggregating );\n            this.hashCode = hash;\n        }\n","date":"2018-09-25 01:50:39","endLine":134,"groupId":"10678","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"CacheKey","params":"(MavenProjectproject@List<RemoteRepository>repositories@Collection<String>scopesToCollect@Collection<String>scopesToResolve@booleanaggregating@RepositorySystemSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/ae/59ada4d770c2f5f6dcdb91f3ea7ba63eed9ad0.src","preCode":"        public CacheKey( MavenProject project, List<RemoteRepository> repositories,\n            Collection<String> scopesToCollect, Collection<String> scopesToResolve, boolean aggregating,\n            RepositorySystemSession session )\n        {\n            \n            groupId = project.getGroupId();\n            artifactId = project.getArtifactId();\n            version = project.getVersion();\n            \n            Set<String> deps = new HashSet<>();\n            if ( project.getDependencyArtifacts() != null )\n            {\n              for ( Artifact dep: project.getDependencyArtifacts() )\n              {\n                deps.add( dep.toString() );\n              }\n            }\n            dependencyArtifacts = Collections.unmodifiableSet( deps );\n            \n            workspace = RepositoryUtils.getWorkspace( session );\n            this.localRepo = session.getLocalRepository();\n            this.repositories = new ArrayList<>( repositories.size() );\n            for ( RemoteRepository repository : repositories )\n            {\n                if ( repository.isRepositoryManager() )\n                {\n                    this.repositories.addAll( repository.getMirroredRepositories() );\n                }\n                else\n                {\n                    this.repositories.add( repository );\n                }\n            }\n            collect = scopesToCollect == null\n                ? Collections.<String>emptySet() \n                : Collections.unmodifiableSet( new HashSet<>( scopesToCollect ) );\n            resolve = scopesToResolve == null \n                ? Collections.<String>emptySet() \n                : Collections.unmodifiableSet( new HashSet<>( scopesToResolve ) );\n            this.aggregating = aggregating;\n\n            int hash = 17;\n            hash = hash * 31 + Objects.hashCode( groupId );\n            hash = hash * 31 + Objects.hashCode( artifactId );\n            hash = hash * 31 + Objects.hashCode( version );\n            hash = hash * 31 + Objects.hashCode( dependencyArtifacts );\n            hash = hash * 31 + Objects.hashCode( workspace );\n            hash = hash * 31 + Objects.hashCode( localRepo );\n            hash = hash * 31 + RepositoryUtils.repositoriesHashCode( repositories );\n            hash = hash * 31 + Objects.hashCode( collect );\n            hash = hash * 31 + Objects.hashCode( resolve );\n            hash = hash * 31 + Objects.hashCode( aggregating );\n            this.hashCode = hash;\n        }\n","realPath":"maven-core/src/main/java/org/apache/maven/project/artifact/DefaultProjectArtifactsCache.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"7c1e7129b12973769f49cd946236e43f4bd17d51","commitMessage":"@@@[MNG-6415] Project Artifacts Cache does not retain the order of classpath entries.\n","date":"2018-09-25 01:50:39","modifiedFileCount":"1","status":"M","submitter":"rfscholte"}]
