[{"authorTime":"2014-05-30 01:38:07","codes":[{"authorDate":"2011-02-23 20:06:20","commitOrder":3,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<String, List<ArtifactRepository>>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<ArtifactRepository>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<ArtifactRepository>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<ArtifactRepository>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2011-02-23 20:06:20","endLine":437,"groupId":"6464","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/fc/4b3cc0f78564560b48d59938fc64e514954a77.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<String, List<ArtifactRepository>>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<ArtifactRepository>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<ArtifactRepository>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<ArtifactRepository>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"NB"},{"authorDate":"2014-05-30 01:38:07","commitOrder":3,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<String, List<ArtifactRepository>>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<ArtifactRepository>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<ArtifactRepository>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<ArtifactRepository>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2014-07-06 04:15:36","endLine":254,"groupId":"6464","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/80/aee224d63e7ef1c4db62d38f82ede40e2e950e.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<String, List<ArtifactRepository>>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<ArtifactRepository>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<ArtifactRepository>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<ArtifactRepository>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"6cf9320942c34bc68205425ab696b1712ace9ba4","commitMessage":"@@@MNG-5661: First step toward an immutable Maven Project. This removes all compentry from MavenProject. There's a note at the top\n          of the class which describes the rest of the work.\n\ncheck point\n","date":"2014-07-06 04:15:36","modifiedFileCount":"8","status":"M","submitter":"Jason van Zyl"},{"authorTime":"2014-05-30 01:38:07","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":4,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2015-06-20 16:56:07","endLine":440,"groupId":"4632","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/86/6968ba9d7c91a05e36eb491f63186592acc333.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<String, List<ArtifactRepository>>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<ArtifactRepository>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<ArtifactRepository>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<ArtifactRepository>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"},{"authorDate":"2014-05-30 01:38:07","commitOrder":4,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<String, List<ArtifactRepository>>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<ArtifactRepository>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<ArtifactRepository>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<ArtifactRepository>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2014-07-06 04:15:36","endLine":254,"groupId":"6464","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/80/aee224d63e7ef1c4db62d38f82ede40e2e950e.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<String, List<ArtifactRepository>>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<ArtifactRepository>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<ArtifactRepository>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<ArtifactRepository>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2018-10-13 10:16:44","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":5,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2015-06-20 16:56:07","endLine":440,"groupId":"4632","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/86/6968ba9d7c91a05e36eb491f63186592acc333.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"N"},{"authorDate":"2018-10-13 10:16:44","commitOrder":5,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                    createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                            snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2019-01-26 21:37:51","endLine":686,"groupId":"4632","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/85/58ae4c1aec0d5a709ef5e5ac9a4fe6c2895c6a.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<String, List<ArtifactRepository>>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<ArtifactRepository>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<ArtifactRepository>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<ArtifactRepository>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"M"}],"commitId":"bb3ec5da71d26d105972392f0a20bc61bc5d8c53","commitMessage":"@@@[MNG-5995] Remove dependency to maven-compat (#185)\n\nNo implementation for deprecated Maven 2.x RepositorySystem interface","date":"2019-01-26 21:37:51","modifiedFileCount":"2","status":"M","submitter":"Sylwester Lachiewicz"},{"authorTime":"2020-01-26 04:10:01","codes":[{"authorDate":"2020-01-26 04:10:01","commitOrder":6,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.computeIfAbsent( key, k -> new ArrayList<>() );\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2020-01-26 18:13:09","endLine":447,"groupId":"4632","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/e4/fff06dffdc65f3445ba3631c794faa74d28f9f.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2020-01-26 04:10:01","commitOrder":6,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.computeIfAbsent( key, k -> new ArrayList<>() );\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                    createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                            snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2020-01-26 18:13:09","endLine":672,"groupId":"4632","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/d3/cb2e4a923b09f42a6785984c5f371463333583.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );\n\n            if ( aliasedRepos == null )\n            {\n                aliasedRepos = new ArrayList<>();\n                reposByKey.put( key, aliasedRepos );\n            }\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                    createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                            snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"ace32fdbe00f0d56e80b800bf5fa4196167e6434","commitMessage":"@@@[MNG-6855] Simplify code - computeIfAbsent()\n\n","date":"2020-01-26 18:13:09","modifiedFileCount":"8","status":"M","submitter":"Sylwester Lachiewicz"},{"authorTime":"2021-03-26 06:51:26","codes":[{"authorDate":"2021-03-26 06:51:26","commitOrder":7,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.computeIfAbsent( key, k -> new ArrayList<>() );\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepository.setBlocked( aliasedRepo.isBlocked() );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2021-03-27 10:00:25","endLine":449,"groupId":"10288","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/0b/d821905d3ca9d9eea8c81c3121d924a57b8982.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.computeIfAbsent( key, k -> new ArrayList<>() );\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                                          snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2021-03-26 06:51:26","commitOrder":7,"curCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.computeIfAbsent( key, k -> new ArrayList<>() );\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                    createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                            snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepository.setBlocked( aliasedRepo.isBlocked() );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","date":"2021-03-27 10:00:25","endLine":686,"groupId":"10288","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"getEffectiveRepositories","params":"(List<ArtifactRepository>repositories)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/f6/b83c002b7358e76d27fb1f34abf56989f6b710.src","preCode":"    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )\n    {\n        if ( repositories == null )\n        {\n            return null;\n        }\n\n        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();\n\n        for ( ArtifactRepository repository : repositories )\n        {\n            String key = repository.getId();\n\n            List<ArtifactRepository> aliasedRepos = reposByKey.computeIfAbsent( key, k -> new ArrayList<>() );\n\n            aliasedRepos.add( repository );\n        }\n\n        List<ArtifactRepository> effectiveRepositories = new ArrayList<>();\n\n        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )\n        {\n            List<ArtifactRepository> mirroredRepos = new ArrayList<>();\n\n            List<ArtifactRepositoryPolicy> releasePolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                releasePolicies.add( aliasedRepo.getReleases() );\n                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );\n            }\n\n            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );\n\n            List<ArtifactRepositoryPolicy> snapshotPolicies =\n                    new ArrayList<>( aliasedRepos.size() );\n\n            for ( ArtifactRepository aliasedRepo : aliasedRepos )\n            {\n                snapshotPolicies.add( aliasedRepo.getSnapshots() );\n            }\n\n            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );\n\n            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );\n\n            ArtifactRepository effectiveRepository =\n                    createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),\n                            snapshotPolicy, releasePolicy );\n\n            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );\n\n            effectiveRepository.setProxy( aliasedRepo.getProxy() );\n\n            effectiveRepository.setMirroredRepositories( mirroredRepos );\n\n            effectiveRepositories.add( effectiveRepository );\n        }\n\n        return effectiveRepositories;\n    }\n","realPath":"maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"}],"commitId":"1ab29f548535cb512d0e4726308b32fe4284e6ba","commitMessage":"@@@[MNG-7128] keep blocked attribute from mirrors in artifact repositories","date":"2021-03-27 10:00:25","modifiedFileCount":"7","status":"M","submitter":"Herv? Boutemy"}]
