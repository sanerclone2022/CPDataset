[{"authorTime":"2009-05-29 00:46:43","codes":[{"authorDate":"2009-07-13 21:19:45","commitOrder":2,"curCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<PluginExecution> it = src.iterator(); it.hasNext(); )\n                {\n                    PluginExecution element = it.next();\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution clone = new PluginExecution();\n                    mergePluginExecution( clone, element, true, context );\n                    merged.put( key, clone );\n                }\n\n                for ( Iterator<PluginExecution> it = tgt.iterator(); it.hasNext(); )\n                {\n                    PluginExecution element = it.next();\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","date":"2009-07-13 21:19:45","endLine":152,"groupId":"3597","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/40/5b002f397a844a105f412eddbcb44b3f3e53e3.src","preCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<PluginExecution> it = src.iterator(); it.hasNext(); )\n                {\n                    PluginExecution element = it.next();\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution clone = new PluginExecution();\n                    mergePluginExecution( clone, element, true, context );\n                    merged.put( key, clone );\n                }\n\n                for ( Iterator<PluginExecution> it = tgt.iterator(); it.hasNext(); )\n                {\n                    PluginExecution element = it.next();\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"},{"authorDate":"2009-05-29 00:46:43","commitOrder":2,"curCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( Iterator<PluginExecution> it = src.iterator(); it.hasNext(); )\n            {\n                PluginExecution element = it.next();\n                if ( sourceDominant || ( source.isInherited() && element.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( Iterator<PluginExecution> it = tgt.iterator(); it.hasNext(); )\n            {\n                PluginExecution element = it.next();\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","date":"2009-05-29 00:46:43","endLine":516,"groupId":"4857","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/12/bc83f09947cf894a765cf7c102268099d3af91.src","preCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( Iterator<PluginExecution> it = src.iterator(); it.hasNext(); )\n            {\n                PluginExecution element = it.next();\n                if ( sourceDominant || ( source.isInherited() && element.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( Iterator<PluginExecution> it = tgt.iterator(); it.hasNext(); )\n            {\n                PluginExecution element = it.next();\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"NB"}],"commitId":"f3ba964d554fa3120a5c1c56136d2013f2ec4b6d","commitMessage":"@@@o Refactored management injection to allow for proper extension loading\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@793578 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-07-13 21:19:45","modifiedFileCount":"1","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2009-09-11 06:47:12","codes":[{"authorDate":"2009-09-11 06:47:12","commitOrder":3,"curCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution clone = new PluginExecution();\n                    mergePluginExecution( clone, element, true, context );\n                    merged.put( key, clone );\n                }\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","date":"2009-09-11 06:47:12","endLine":135,"groupId":"1356","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/cb/45bca2dcf0c0583974bb7fead29db216db2453.src","preCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( Iterator<PluginExecution> it = src.iterator(); it.hasNext(); )\n                {\n                    PluginExecution element = it.next();\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution clone = new PluginExecution();\n                    mergePluginExecution( clone, element, true, context );\n                    merged.put( key, clone );\n                }\n\n                for ( Iterator<PluginExecution> it = tgt.iterator(); it.hasNext(); )\n                {\n                    PluginExecution element = it.next();\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2009-09-11 06:47:12","commitOrder":3,"curCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant || ( source.isInherited() && element.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","date":"2009-09-11 06:47:12","endLine":490,"groupId":"322","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/67/b3d9514f6f5ff9521de7eb0d226968ebdf61c3.src","preCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( Iterator<PluginExecution> it = src.iterator(); it.hasNext(); )\n            {\n                PluginExecution element = it.next();\n                if ( sourceDominant || ( source.isInherited() && element.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( Iterator<PluginExecution> it = tgt.iterator(); it.hasNext(); )\n            {\n                PluginExecution element = it.next();\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"}],"commitId":"05b59c8935981b1876f096bba0362401ed9cd4d7","commitMessage":"@@@fixed errors reported by Checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@813627 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-09-11 06:47:12","modifiedFileCount":"12","status":"M","submitter":"Herve Boutemy"},{"authorTime":"2010-04-06 20:44:16","codes":[{"authorDate":"2009-09-11 06:47:12","commitOrder":4,"curCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution clone = new PluginExecution();\n                    mergePluginExecution( clone, element, true, context );\n                    merged.put( key, clone );\n                }\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","date":"2009-09-11 06:47:12","endLine":135,"groupId":"1356","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/cb/45bca2dcf0c0583974bb7fead29db216db2453.src","preCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution clone = new PluginExecution();\n                    mergePluginExecution( clone, element, true, context );\n                    merged.put( key, clone );\n                }\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2010-04-06 20:44:16","commitOrder":4,"curCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","date":"2010-04-06 20:44:16","endLine":493,"groupId":"322","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3a/1058cd7a0c28bef8193a510c9d2318508240f4.src","preCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant || ( source.isInherited() && element.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"M"}],"commitId":"997c3110c62da50c8637ded14e54c75ae9822d9e","commitMessage":"@@@[MNG-2103] Inheritance of <plugin> overrides that of <execution>\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@931125 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-04-06 20:44:16","modifiedFileCount":"2","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2010-04-06 20:44:16","codes":[{"authorDate":"2010-05-31 18:24:20","commitOrder":5,"curCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element.clone() );\n                }\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","date":"2010-05-31 18:24:20","endLine":133,"groupId":"1356","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/1d/5809d9a7db64faf077c07e036274abcfd8e89f.src","preCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution clone = new PluginExecution();\n                    mergePluginExecution( clone, element, true, context );\n                    merged.put( key, clone );\n                }\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2010-04-06 20:44:16","commitOrder":5,"curCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","date":"2010-04-06 20:44:16","endLine":493,"groupId":"322","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/3a/1058cd7a0c28bef8193a510c9d2318508240f4.src","preCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"N"}],"commitId":"6e7b4226e7521a846e0326a59a38f9d2d072c74b","commitMessage":"@@@[MNG-1803] Provide line number information when there are errors processing a pom.xml\n\no Merged feature branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@949708 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-31 18:24:20","modifiedFileCount":"27","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":6,"curCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element.clone() );\n                }\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<>( merged.values() ) );\n            }\n        }\n","date":"2015-06-20 16:56:07","endLine":134,"groupId":"6784","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/4a/50cfe7018b907b1473b62963ec02bd9a38b73b.src","preCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element.clone() );\n                }\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2015-03-06 14:12:21","commitOrder":6,"curCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant\n                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<>( merged.values() ) );\n        }\n    }\n","date":"2015-06-20 16:56:07","endLine":567,"groupId":"4958","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/66/577cbc0a05d74a7c98f2d4ada2de149aece6ef.src","preCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<Object, PluginExecution>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant\n                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<PluginExecution>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"M"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2019-12-21 22:03:04","codes":[{"authorDate":"2019-12-21 22:03:04","commitOrder":7,"curCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey().apply( element );\n                    merged.put( key, element.clone() );\n                }\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey().apply( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<>( merged.values() ) );\n            }\n        }\n","date":"2019-12-21 22:03:04","endLine":141,"groupId":"1052","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/75/2b976d04adf961d69daba100dc58517ffdeefb.src","preCode":"        protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                               Map<Object, Object> context )\n        {\n            List<PluginExecution> src = source.getExecutions();\n            if ( !src.isEmpty() )\n            {\n                List<PluginExecution> tgt = target.getExecutions();\n\n                Map<Object, PluginExecution> merged =\n                    new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n                for ( PluginExecution element : src )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element.clone() );\n                }\n\n                for ( PluginExecution element : tgt )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    PluginExecution existing = merged.get( key );\n                    if ( existing != null )\n                    {\n                        mergePluginExecution( element, existing, sourceDominant, context );\n                    }\n                    merged.put( key, element );\n                }\n\n                target.setExecutions( new ArrayList<>( merged.values() ) );\n            }\n        }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2019-12-21 22:03:04","commitOrder":7,"curCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant\n                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey().apply( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey().apply( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<>( merged.values() ) );\n        }\n    }\n","date":"2019-12-21 22:03:04","endLine":588,"groupId":"1052","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"mergePlugin_Executions","params":"(Plugintarget@Pluginsource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/04/9ce1f1286ba3c45286aab983c3e23ca3ce2bbc.src","preCode":"    protected void mergePlugin_Executions( Plugin target, Plugin source, boolean sourceDominant,\n                                           Map<Object, Object> context )\n    {\n        List<PluginExecution> src = source.getExecutions();\n        if ( !src.isEmpty() )\n        {\n            List<PluginExecution> tgt = target.getExecutions();\n            Map<Object, PluginExecution> merged =\n                new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            for ( PluginExecution element : src )\n            {\n                if ( sourceDominant\n                                || ( element.getInherited() != null ? element.isInherited() : source.isInherited() ) )\n                {\n                    Object key = getPluginExecutionKey( element );\n                    merged.put( key, element );\n                }\n            }\n\n            for ( PluginExecution element : tgt )\n            {\n                Object key = getPluginExecutionKey( element );\n                PluginExecution existing = merged.get( key );\n                if ( existing != null )\n                {\n                    mergePluginExecution( element, existing, sourceDominant, context );\n                }\n                merged.put( key, element );\n            }\n\n            target.setExecutions( new ArrayList<>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"}],"commitId":"11b8b2d5d4f327ad3e38275015a3aafbdc2c2c5c","commitMessage":"@@@[MNG-6824] ModelMerger is broken\nFix modules\nApply Java 8 Functions\n","date":"2019-12-21 22:03:04","modifiedFileCount":"7","status":"M","submitter":"rfscholte"}]
