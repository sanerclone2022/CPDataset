[{"authorTime":"2012-08-16 16:55:53","codes":[{"authorDate":"2009-09-11 06:47:12","commitOrder":3,"curCode":"    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                Map<Object, Object> context )\n    {\n        List<Repository> src = source.getRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<Object, Repository>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setRepositories( new ArrayList<Repository>( merged.values() ) );\n        }\n    }\n","date":"2009-09-11 06:47:12","endLine":284,"groupId":"4642","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeModelBase_Repositories","params":"(ModelBasetarget@ModelBasesource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/67/b3d9514f6f5ff9521de7eb0d226968ebdf61c3.src","preCode":"    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                Map<Object, Object> context )\n    {\n        List<Repository> src = source.getRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<Object, Repository>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setRepositories( new ArrayList<Repository>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"NB"},{"authorDate":"2012-08-16 16:55:53","commitOrder":3,"curCode":"    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                      Map<Object, Object> context )\n    {\n        List<Repository> src = source.getPluginRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getPluginRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<Object, Repository>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setPluginRepositories( new ArrayList<Repository>( merged.values() ) );\n        }\n    }\n","date":"2012-08-16 16:55:53","endLine":354,"groupId":"4642","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mergeModelBase_PluginRepositories","params":"(ModelBasetarget@ModelBasesource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/92/c0ee6a94027e7fc4c87f7a0212ee81b8955bf5.src","preCode":"    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                      Map<Object, Object> context )\n    {\n        List<Repository> src = source.getPluginRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getPluginRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<Object, Repository>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setPluginRepositories( new ArrayList<Repository>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"B"}],"commitId":"31285e3b682eb6e13940ee2d676cdd318718b7f8","commitMessage":"@@@[MNG-5280] Inconsistent order of repositories and pluginRepositories from profiles in settings (regression Maven 3)\nSubmitted by: Anders Hammar\n\n* Applied without change\n\n* This is the fix of the bug.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1373761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-16 16:55:53","modifiedFileCount":"1","status":"M","submitter":"Stephen Connolly"},{"authorTime":"2015-03-06 14:12:21","codes":[{"authorDate":"2015-03-06 14:12:21","commitOrder":4,"curCode":"    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                Map<Object, Object> context )\n    {\n        List<Repository> src = source.getRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setRepositories( new ArrayList<>( merged.values() ) );\n        }\n    }\n","date":"2015-06-20 16:56:07","endLine":311,"groupId":"608","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeModelBase_Repositories","params":"(ModelBasetarget@ModelBasesource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/66/577cbc0a05d74a7c98f2d4ada2de149aece6ef.src","preCode":"    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                Map<Object, Object> context )\n    {\n        List<Repository> src = source.getRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<Object, Repository>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setRepositories( new ArrayList<Repository>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2015-03-06 14:12:21","commitOrder":4,"curCode":"    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                      Map<Object, Object> context )\n    {\n        List<Repository> src = source.getPluginRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getPluginRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setPluginRepositories( new ArrayList<>( merged.values() ) );\n        }\n    }\n","date":"2015-06-20 16:56:07","endLine":352,"groupId":"608","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mergeModelBase_PluginRepositories","params":"(ModelBasetarget@ModelBasesource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/66/577cbc0a05d74a7c98f2d4ada2de149aece6ef.src","preCode":"    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                      Map<Object, Object> context )\n    {\n        List<Repository> src = source.getPluginRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getPluginRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<Object, Repository>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setPluginRepositories( new ArrayList<Repository>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"7badeb5b5bdfb48dd3c9533d224418d0648b76ce","commitMessage":"@@@Upgraded to java7 language features\n","date":"2015-06-20 16:56:07","modifiedFileCount":"234","status":"M","submitter":"Kristian Rosenvold"},{"authorTime":"2019-12-21 22:03:04","codes":[{"authorDate":"2019-12-21 22:03:04","commitOrder":5,"curCode":"    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                Map<Object, Object> context )\n    {\n        List<Repository> src = source.getRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey().apply( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey().apply( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setRepositories( new ArrayList<>( merged.values() ) );\n        }\n    }\n","date":"2019-12-21 22:03:04","endLine":312,"groupId":"1077","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"mergeModelBase_Repositories","params":"(ModelBasetarget@ModelBasesource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/04/9ce1f1286ba3c45286aab983c3e23ca3ce2bbc.src","preCode":"    protected void mergeModelBase_Repositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                Map<Object, Object> context )\n    {\n        List<Repository> src = source.getRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setRepositories( new ArrayList<>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2019-12-21 22:03:04","commitOrder":5,"curCode":"    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                      Map<Object, Object> context )\n    {\n        List<Repository> src = source.getPluginRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getPluginRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey().apply( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey().apply( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setPluginRepositories( new ArrayList<>( merged.values() ) );\n        }\n    }\n","date":"2019-12-21 22:03:04","endLine":353,"groupId":"1077","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"mergeModelBase_PluginRepositories","params":"(ModelBasetarget@ModelBasesource@booleansourceDominant@Map<Object@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/04/9ce1f1286ba3c45286aab983c3e23ca3ce2bbc.src","preCode":"    protected void mergeModelBase_PluginRepositories( ModelBase target, ModelBase source, boolean sourceDominant,\n                                                      Map<Object, Object> context )\n    {\n        List<Repository> src = source.getPluginRepositories();\n        if ( !src.isEmpty() )\n        {\n            List<Repository> tgt = target.getPluginRepositories();\n            Map<Object, Repository> merged = new LinkedHashMap<>( ( src.size() + tgt.size() ) * 2 );\n\n            List<Repository> dominant, recessive;\n            if ( sourceDominant )\n            {\n                dominant = src;\n                recessive = tgt;\n            }\n            else\n            {\n                dominant = tgt;\n                recessive = src;\n            }\n\n            for ( Repository element : dominant )\n            {\n                Object key = getRepositoryKey( element );\n                merged.put( key, element );\n            }\n\n            for ( Repository element : recessive )\n            {\n                Object key = getRepositoryKey( element );\n                if ( !merged.containsKey( key ) )\n                {\n                    merged.put( key, element );\n                }\n            }\n\n            target.setPluginRepositories( new ArrayList<>( merged.values() ) );\n        }\n    }\n","realPath":"maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"}],"commitId":"11b8b2d5d4f327ad3e38275015a3aafbdc2c2c5c","commitMessage":"@@@[MNG-6824] ModelMerger is broken\nFix modules\nApply Java 8 Functions\n","date":"2019-12-21 22:03:04","modifiedFileCount":"7","status":"M","submitter":"rfscholte"}]
