[{"authorTime":"2009-10-27 04:16:00","codes":[{"authorDate":"2009-10-27 04:16:00","commitOrder":1,"curCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project0 = getProjectWithDependencies( pom0 );\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );\n        System.out.println( \"Project \" + project1.getId() + \" \" + project1 );\n        Set set = project1.getArtifacts();\n        assertNotNull( \"No artifacts\", set );\n        assertTrue( \"No Artifacts\", set.size() > 0 );\n        Iterator iter = set.iterator();\n        assertTrue( \"Set size should be 4, is \" + set.size(), set.size() == 4 );\n\n        while ( iter.hasNext() )\n        {\n            Artifact artifact = (Artifact) iter.next();\n            System.out.println( \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion()\n              + \" Optional=\" + ( artifact.isOptional() ? \"true\" : \"false\" ) );\n            assertTrue( \"Incorrect version for \" + artifact.getDependencyConflictId(),\n                        artifact.getVersion().equals( \"1.0\" ) );\n        }\n\n    }\n","date":"2009-10-27 04:16:00","endLine":81,"groupId":"1207","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDependencyManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/5f/26d46c60ecdeb9ea54e5a34e5559903315ecba.src","preCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project0 = getProjectWithDependencies( pom0 );\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );\n        System.out.println( \"Project \" + project1.getId() + \" \" + project1 );\n        Set set = project1.getArtifacts();\n        assertNotNull( \"No artifacts\", set );\n        assertTrue( \"No Artifacts\", set.size() > 0 );\n        Iterator iter = set.iterator();\n        assertTrue( \"Set size should be 4, is \" + set.size(), set.size() == 4 );\n\n        while ( iter.hasNext() )\n        {\n            Artifact artifact = (Artifact) iter.next();\n            System.out.println( \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion()\n              + \" Optional=\" + ( artifact.isOptional() ? \"true\" : \"false\" ) );\n            assertTrue( \"Incorrect version for \" + artifact.getDependencyConflictId(),\n                        artifact.getVersion().equals( \"1.0\" ) );\n        }\n\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/project/inheritance/t08/ProjectInheritanceTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2009-10-27 04:16:00","commitOrder":1,"curCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );\n        System.out.println(\"Project \" + project1.getId() + \" \" + project1);\n        Set set = project1.getArtifacts();\n        assertNotNull(\"No artifacts\", set);\n        assertTrue(\"No Artifacts\", set.size() > 0);\n        assertTrue(\"Set size should be 3, is \" + set.size(), set.size() == 3 );\n\n        Iterator iter = set.iterator();\n\n        while (iter.hasNext())\n        {\n            Artifact artifact = (Artifact)iter.next();\n            assertFalse( \"\", artifact.getArtifactId().equals( \"t07-d\" ) );\n            System.out.println(\"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion() + \" Optional=\" + (artifact.isOptional() ? \"true\" : \"false\"));\n            assertTrue(\"Incorrect version for \" + artifact.getDependencyConflictId(), artifact.getVersion().equals(\"1.0\"));\n        }\n    }\n","date":"2009-10-27 04:16:00","endLine":79,"groupId":"483","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDependencyManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/6f/07447365773fbb663e0702a458d7b97e598382.src","preCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );\n        System.out.println(\"Project \" + project1.getId() + \" \" + project1);\n        Set set = project1.getArtifacts();\n        assertNotNull(\"No artifacts\", set);\n        assertTrue(\"No Artifacts\", set.size() > 0);\n        assertTrue(\"Set size should be 3, is \" + set.size(), set.size() == 3 );\n\n        Iterator iter = set.iterator();\n\n        while (iter.hasNext())\n        {\n            Artifact artifact = (Artifact)iter.next();\n            assertFalse( \"\", artifact.getArtifactId().equals( \"t07-d\" ) );\n            System.out.println(\"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion() + \" Optional=\" + (artifact.isOptional() ? \"true\" : \"false\"));\n            assertTrue(\"Incorrect version for \" + artifact.getDependencyConflictId(), artifact.getVersion().equals(\"1.0\"));\n        }\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/project/inheritance/t07/ProjectInheritanceTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"20f8323b0a993799f77db49c787829449a17b8c0","commitMessage":"@@@[MNG-4221] Push all repository/artifact related code into a legacy module and create a backward compat layer for external consumers\n\no Refactored code to make maven-compat depend on maven-core.  this got ugly regarding some tests which to a high degree depend on a full-blown repository system\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@829934 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-10-27 04:16:00","modifiedFileCount":"12","status":"B","submitter":"Benjamin Bentmann"},{"authorTime":"2010-05-27 14:37:07","codes":[{"authorDate":"2010-05-27 14:37:07","commitOrder":2,"curCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project0 = getProjectWithDependencies( pom0 );\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println( \"Project \" + project1.getId() + \" \" + project1 );\n        Set set = project1.getArtifacts();\n        assertNotNull( \"No artifacts\", set );\n        assertTrue( \"No Artifacts\", set.size() > 0 );\n        Iterator iter = set.iterator();\n        assertTrue( \"Set size should be 4, is \" + set.size(), set.size() == 4 );\n\n        while ( iter.hasNext() )\n        {\n            Artifact artifact = (Artifact) iter.next();\n            System.out.println( \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion()\n              + \" Optional=\" + ( artifact.isOptional() ? \"true\" : \"false\" ) );\n            assertTrue( \"Incorrect version for \" + artifact.getDependencyConflictId(),\n                        artifact.getVersion().equals( \"1.0\" ) );\n        }\n\n    }\n","date":"2010-05-27 14:37:07","endLine":81,"groupId":"1207","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDependencyManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/26/dc45e79ea05985ee6141ed4ba657507816cb36.src","preCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project0 = getProjectWithDependencies( pom0 );\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );\n        System.out.println( \"Project \" + project1.getId() + \" \" + project1 );\n        Set set = project1.getArtifacts();\n        assertNotNull( \"No artifacts\", set );\n        assertTrue( \"No Artifacts\", set.size() > 0 );\n        Iterator iter = set.iterator();\n        assertTrue( \"Set size should be 4, is \" + set.size(), set.size() == 4 );\n\n        while ( iter.hasNext() )\n        {\n            Artifact artifact = (Artifact) iter.next();\n            System.out.println( \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion()\n              + \" Optional=\" + ( artifact.isOptional() ? \"true\" : \"false\" ) );\n            assertTrue( \"Incorrect version for \" + artifact.getDependencyConflictId(),\n                        artifact.getVersion().equals( \"1.0\" ) );\n        }\n\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/project/inheritance/t08/ProjectInheritanceTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2010-05-27 14:37:07","commitOrder":2,"curCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println(\"Project \" + project1.getId() + \" \" + project1);\n        Set set = project1.getArtifacts();\n        assertNotNull(\"No artifacts\", set);\n        assertTrue(\"No Artifacts\", set.size() > 0);\n        assertTrue(\"Set size should be 3, is \" + set.size(), set.size() == 3 );\n\n        Iterator iter = set.iterator();\n\n        while (iter.hasNext())\n        {\n            Artifact artifact = (Artifact)iter.next();\n            assertFalse( \"\", artifact.getArtifactId().equals( \"t07-d\" ) );\n            System.out.println(\"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion() + \" Optional=\" + (artifact.isOptional() ? \"true\" : \"false\"));\n            assertTrue(\"Incorrect version for \" + artifact.getDependencyConflictId(), artifact.getVersion().equals(\"1.0\"));\n        }\n    }\n","date":"2010-05-27 14:37:07","endLine":79,"groupId":"483","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDependencyManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/35/9ec9fba5b0527b98cc588617db28d8a179d5bf.src","preCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir().getCanonicalFile() );\n        System.out.println(\"Project \" + project1.getId() + \" \" + project1);\n        Set set = project1.getArtifacts();\n        assertNotNull(\"No artifacts\", set);\n        assertTrue(\"No Artifacts\", set.size() > 0);\n        assertTrue(\"Set size should be 3, is \" + set.size(), set.size() == 3 );\n\n        Iterator iter = set.iterator();\n\n        while (iter.hasNext())\n        {\n            Artifact artifact = (Artifact)iter.next();\n            assertFalse( \"\", artifact.getArtifactId().equals( \"t07-d\" ) );\n            System.out.println(\"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion() + \" Optional=\" + (artifact.isOptional() ? \"true\" : \"false\"));\n            assertTrue(\"Incorrect version for \" + artifact.getDependencyConflictId(), artifact.getVersion().equals(\"1.0\"));\n        }\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/project/inheritance/t07/ProjectInheritanceTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"770b6d905f3e0a13c6cbc09e24d0cf8b5c1c2833","commitMessage":"@@@o Fixed tests to account for the discrepancy that OSX has a case-insensitive file system yet java.io.File compares case-sensitively\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@948687 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-27 14:37:07","modifiedFileCount":"9","status":"M","submitter":"Benjamin Bentmann"},{"authorTime":"2013-06-12 04:21:54","codes":[{"authorDate":"2010-05-27 14:37:07","commitOrder":3,"curCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project0 = getProjectWithDependencies( pom0 );\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println( \"Project \" + project1.getId() + \" \" + project1 );\n        Set set = project1.getArtifacts();\n        assertNotNull( \"No artifacts\", set );\n        assertTrue( \"No Artifacts\", set.size() > 0 );\n        Iterator iter = set.iterator();\n        assertTrue( \"Set size should be 4, is \" + set.size(), set.size() == 4 );\n\n        while ( iter.hasNext() )\n        {\n            Artifact artifact = (Artifact) iter.next();\n            System.out.println( \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion()\n              + \" Optional=\" + ( artifact.isOptional() ? \"true\" : \"false\" ) );\n            assertTrue( \"Incorrect version for \" + artifact.getDependencyConflictId(),\n                        artifact.getVersion().equals( \"1.0\" ) );\n        }\n\n    }\n","date":"2010-05-27 14:37:07","endLine":81,"groupId":"1207","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDependencyManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/26/dc45e79ea05985ee6141ed4ba657507816cb36.src","preCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project0 = getProjectWithDependencies( pom0 );\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println( \"Project \" + project1.getId() + \" \" + project1 );\n        Set set = project1.getArtifacts();\n        assertNotNull( \"No artifacts\", set );\n        assertTrue( \"No Artifacts\", set.size() > 0 );\n        Iterator iter = set.iterator();\n        assertTrue( \"Set size should be 4, is \" + set.size(), set.size() == 4 );\n\n        while ( iter.hasNext() )\n        {\n            Artifact artifact = (Artifact) iter.next();\n            System.out.println( \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion()\n              + \" Optional=\" + ( artifact.isOptional() ? \"true\" : \"false\" ) );\n            assertTrue( \"Incorrect version for \" + artifact.getDependencyConflictId(),\n                        artifact.getVersion().equals( \"1.0\" ) );\n        }\n\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/project/inheritance/t08/ProjectInheritanceTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2013-06-12 04:21:54","commitOrder":3,"curCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println(\"Project \" + project1.getId() + \" \" + project1);\n        Set set = project1.getArtifacts();\n        assertNotNull(\"No artifacts\", set);\n        assertTrue(\"No Artifacts\", set.size() > 0);\n        assertTrue(\"Set size should be 3, is \" + set.size(), set.size() == 3 );\n\n        for ( Object aSet : set )\n        {\n            Artifact artifact = (Artifact) aSet;\n            assertFalse( \"\", artifact.getArtifactId().equals( \"t07-d\" ) );\n            System.out.println(\n                \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion() + \" Optional=\" + (\n                    artifact.isOptional()\n                        ? \"true\"\n                        : \"false\" ) );\n            assertTrue( \"Incorrect version for \" + artifact.getDependencyConflictId(),\n                        artifact.getVersion().equals( \"1.0\" ) );\n        }\n    }\n","date":"2013-06-12 04:21:54","endLine":81,"groupId":"5219","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDependencyManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/68/586aafb75eb6129de6e9600e2bae71bae63cc1.src","preCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println(\"Project \" + project1.getId() + \" \" + project1);\n        Set set = project1.getArtifacts();\n        assertNotNull(\"No artifacts\", set);\n        assertTrue(\"No Artifacts\", set.size() > 0);\n        assertTrue(\"Set size should be 3, is \" + set.size(), set.size() == 3 );\n\n        Iterator iter = set.iterator();\n\n        while (iter.hasNext())\n        {\n            Artifact artifact = (Artifact)iter.next();\n            assertFalse( \"\", artifact.getArtifactId().equals( \"t07-d\" ) );\n            System.out.println(\"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion() + \" Optional=\" + (artifact.isOptional() ? \"true\" : \"false\"));\n            assertTrue(\"Incorrect version for \" + artifact.getDependencyConflictId(), artifact.getVersion().equals(\"1.0\"));\n        }\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/project/inheritance/t07/ProjectInheritanceTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"d92746dc25bdce073571cf6fd8f78d6573fe75f0","commitMessage":"@@@Code cleanup - Maven requires Java 5+ : Replace for and while loops by for each\n","date":"2013-06-12 04:21:54","modifiedFileCount":"20","status":"M","submitter":"Arnaud He?ritier"},{"authorTime":"2021-01-15 22:07:06","codes":[{"authorDate":"2021-01-15 22:07:06","commitOrder":4,"curCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project0 = getProjectWithDependencies( pom0 );\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println( \"Project \" + project1.getId() + \" \" + project1 );\n        Set set = project1.getArtifacts();\n        assertNotNull( set, \"No artifacts\" );\n        assertTrue( set.size() > 0, \"No Artifacts\" );\n        Iterator iter = set.iterator();\n        assertTrue( set.size() == 4, \"Set size should be 4, is \" + set.size() );\n\n        while ( iter.hasNext() )\n        {\n            Artifact artifact = (Artifact) iter.next();\n            System.out.println( \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion()\n              + \" Optional=\" + ( artifact.isOptional() ? \"true\" : \"false\" ) );\n            assertTrue( artifact.getVersion().equals( \"1.0\" ), \"Incorrect version for \" + artifact.getDependencyConflictId() );\n        }\n\n    }\n","date":"2021-01-15 22:07:06","endLine":85,"groupId":"10162","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testDependencyManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/c4/562dc67e6d8874396c582e1a126f724dbdc09d.src","preCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project0 = getProjectWithDependencies( pom0 );\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println( \"Project \" + project1.getId() + \" \" + project1 );\n        Set set = project1.getArtifacts();\n        assertNotNull( \"No artifacts\", set );\n        assertTrue( \"No Artifacts\", set.size() > 0 );\n        Iterator iter = set.iterator();\n        assertTrue( \"Set size should be 4, is \" + set.size(), set.size() == 4 );\n\n        while ( iter.hasNext() )\n        {\n            Artifact artifact = (Artifact) iter.next();\n            System.out.println( \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion()\n              + \" Optional=\" + ( artifact.isOptional() ? \"true\" : \"false\" ) );\n            assertTrue( \"Incorrect version for \" + artifact.getDependencyConflictId(),\n                        artifact.getVersion().equals( \"1.0\" ) );\n        }\n\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/project/inheritance/t08/ProjectInheritanceTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2021-01-15 22:07:06","commitOrder":4,"curCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println(\"Project \" + project1.getId() + \" \" + project1);\n        Set set = project1.getArtifacts();\n        assertNotNull( set, \"No artifacts\" );\n        assertTrue( set.size() > 0, \"No Artifacts\" );\n        assertTrue( set.size() == 3, \"Set size should be 3, is \" + set.size() );\n\n        for ( Object aSet : set )\n        {\n            Artifact artifact = (Artifact) aSet;\n            assertFalse( artifact.getArtifactId().equals( \"t07-d\" ) );\n            System.out.println(\n                \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion() + \" Optional=\" + (\n                    artifact.isOptional()\n                        ? \"true\"\n                        : \"false\" ) );\n            assertTrue( artifact.getVersion().equals( \"1.0\" ),\n                        \"Incorrect version for \" + artifact.getDependencyConflictId() );\n        }\n    }\n","date":"2021-01-15 22:07:06","endLine":87,"groupId":"10162","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testDependencyManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/87/b07d3a8058724c436000aa2d89606ac55a0bfa.src","preCode":"    public void testDependencyManagement()\n        throws Exception\n    {\n        File localRepo = getLocalRepositoryPath();\n        File pom0 = new File( localRepo, \"p0/pom.xml\" );\n\n        File pom0Basedir = pom0.getParentFile();\n\n        File pom1 = new File( pom0Basedir, \"p1/pom.xml\" );\n\n        \r\n        MavenProject project1 = getProjectWithDependencies( pom1 );\n\n        assertEquals( pom0Basedir, project1.getParent().getBasedir() );\n        System.out.println(\"Project \" + project1.getId() + \" \" + project1);\n        Set set = project1.getArtifacts();\n        assertNotNull(\"No artifacts\", set);\n        assertTrue(\"No Artifacts\", set.size() > 0);\n        assertTrue(\"Set size should be 3, is \" + set.size(), set.size() == 3 );\n\n        for ( Object aSet : set )\n        {\n            Artifact artifact = (Artifact) aSet;\n            assertFalse( \"\", artifact.getArtifactId().equals( \"t07-d\" ) );\n            System.out.println(\n                \"Artifact: \" + artifact.getDependencyConflictId() + \" \" + artifact.getVersion() + \" Optional=\" + (\n                    artifact.isOptional()\n                        ? \"true\"\n                        : \"false\" ) );\n            assertTrue( \"Incorrect version for \" + artifact.getDependencyConflictId(),\n                        artifact.getVersion().equals( \"1.0\" ) );\n        }\n    }\n","realPath":"maven-compat/src/test/java/org/apache/maven/project/inheritance/t07/ProjectInheritanceTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"bb916d0784c7631866167928e4d0615df3317567","commitMessage":"@@@[MNG-7035] Migrate unit tests to Unit 5\n\nSigned-off-by: rfscholte <rfscholte@apache.org>\n","date":"2021-01-15 22:07:06","modifiedFileCount":"208","status":"M","submitter":"Guillaume Nodet"}]
