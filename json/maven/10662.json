[{"authorTime":"2020-06-20 19:55:48","codes":[{"authorDate":"2020-06-20 19:55:48","commitOrder":1,"curCode":"    public void resumeFromGetsDetermined()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getResumeFrom(), is( \"test:B\" ) );\n    }\n","date":"2020-06-20 19:55:48","endLine":59,"groupId":"456","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeFromGetsDetermined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/59/a8e63c1403ebe051f7caf0be3fcb47cca44a9b.src","preCode":"    public void resumeFromGetsDetermined()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getResumeFrom(), is( \"test:B\" ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/execution/DefaultBuildResumptionAnalyzerTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2020-06-20 19:55:48","commitOrder":1,"curCode":"    public void projectsSucceedingAfterFailedProjectsAreExcluded()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        MavenProject projectC = createSucceededMavenProject( \"C\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB, projectC ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getProjectsToSkip(), contains( \"test:C\" ) );\n    }\n","date":"2020-06-20 19:55:48","endLine":85,"groupId":"6873","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"projectsSucceedingAfterFailedProjectsAreExcluded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/59/a8e63c1403ebe051f7caf0be3fcb47cca44a9b.src","preCode":"    public void projectsSucceedingAfterFailedProjectsAreExcluded()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        MavenProject projectC = createSucceededMavenProject( \"C\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB, projectC ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getProjectsToSkip(), contains( \"test:C\" ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/execution/DefaultBuildResumptionAnalyzerTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"658ad90b3850131e4a73fd6cca2ead30f6e5f213","commitMessage":"@@@[MNG-5760] Add `-r/--resume` to automatically resume from the last failure point\n\nAuthor: Martin Kanters <mkanters93@gmail.com>\n","date":"2020-06-20 19:55:48","modifiedFileCount":"9","status":"B","submitter":"rfscholte"},{"authorTime":"2020-06-20 19:55:48","codes":[{"authorDate":"2020-08-08 17:25:29","commitOrder":2,"curCode":"    public void resumeFromGetsDetermined()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getResumeFrom(), is( Optional.of ( \"test:B\" ) ) );\n    }\n","date":"2020-08-08 17:25:29","endLine":59,"groupId":"456","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeFromGetsDetermined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/6e/037763e2823724d7677534291e9ae2a92c5322.src","preCode":"    public void resumeFromGetsDetermined()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getResumeFrom(), is( \"test:B\" ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/execution/DefaultBuildResumptionAnalyzerTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-06-20 19:55:48","commitOrder":2,"curCode":"    public void projectsSucceedingAfterFailedProjectsAreExcluded()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        MavenProject projectC = createSucceededMavenProject( \"C\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB, projectC ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getProjectsToSkip(), contains( \"test:C\" ) );\n    }\n","date":"2020-06-20 19:55:48","endLine":85,"groupId":"6873","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"projectsSucceedingAfterFailedProjectsAreExcluded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/59/a8e63c1403ebe051f7caf0be3fcb47cca44a9b.src","preCode":"    public void projectsSucceedingAfterFailedProjectsAreExcluded()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        MavenProject projectC = createSucceededMavenProject( \"C\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB, projectC ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getProjectsToSkip(), contains( \"test:C\" ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/execution/DefaultBuildResumptionAnalyzerTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"f2116001b9cc4c3f1a0f389260422f015b1d84c6","commitMessage":"@@@Merge branch 'master' of https://gitbox.apache.org/repos/asf/maven\n","date":"2020-08-08 17:25:29","modifiedFileCount":"10","status":"M","submitter":"rfscholte"},{"authorTime":"2021-02-09 17:37:18","codes":[{"authorDate":"2021-02-09 17:37:18","commitOrder":3,"curCode":"    public void resumeFromGetsDetermined()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getRemainingProjects(), is( asList ( \"test:B\" ) ) );\n    }\n","date":"2021-02-13 18:32:34","endLine":57,"groupId":"10662","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"resumeFromGetsDetermined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/eb/a0e4d52dc35bd45e8f5a28afd9148872277790.src","preCode":"    public void resumeFromGetsDetermined()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getResumeFrom(), is( Optional.of ( \"test:B\" ) ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/execution/DefaultBuildResumptionAnalyzerTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2021-02-09 17:37:18","commitOrder":3,"curCode":"    public void projectsSucceedingAfterFailedProjectsAreExcluded()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        MavenProject projectC = createSucceededMavenProject( \"C\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB, projectC ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getRemainingProjects(), is( asList( \"test:B\" ) ) );\n    }\n","date":"2021-02-13 18:32:34","endLine":83,"groupId":"10662","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"projectsSucceedingAfterFailedProjectsAreExcluded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/eb/a0e4d52dc35bd45e8f5a28afd9148872277790.src","preCode":"    public void projectsSucceedingAfterFailedProjectsAreExcluded()\n    {\n        MavenProject projectA = createSucceededMavenProject( \"A\" );\n        MavenProject projectB = createFailedMavenProject( \"B\" );\n        MavenProject projectC = createSucceededMavenProject( \"C\" );\n        executionResult.setTopologicallySortedProjects( asList( projectA, projectB, projectC ) );\n\n        Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData( executionResult );\n\n        assertThat( result.isPresent(), is( true ) );\n        assertThat( result.get().getProjectsToSkip(), contains( \"test:C\" ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/execution/DefaultBuildResumptionAnalyzerTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"f820b41aed604da0405dca2337044f60540d0b49","commitMessage":"@@@[MNG-7095] Fix resume for parallel builds\n\nResolves #444\n","date":"2021-02-13 18:32:34","modifiedFileCount":"5","status":"M","submitter":"Guillaume Nodet"}]
