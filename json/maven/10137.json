[{"authorTime":"2016-12-12 06:36:04","codes":[{"authorDate":"2016-12-12 06:36:04","commitOrder":1,"curCode":"    protected void merge( Metadata recessive )\n    {\n        metadata.getVersioning().updateTimestamp();\n\n        if ( !legacyFormat )\n        {\n            String lastUpdated = metadata.getVersioning().getLastUpdated();\n\n            Map<String, SnapshotVersion> versions = new LinkedHashMap<>();\n\n            for ( Artifact artifact : artifacts )\n            {\n                SnapshotVersion sv = new SnapshotVersion();\n                sv.setClassifier( artifact.getClassifier() );\n                sv.setExtension( artifact.getExtension() );\n                sv.setVersion( getVersion() );\n                sv.setUpdated( lastUpdated );\n                versions.put( getKey( sv.getClassifier(), sv.getExtension() ), sv );\n            }\n\n            Versioning versioning = recessive.getVersioning();\n            if ( versioning != null )\n            {\n                for ( SnapshotVersion sv : versioning.getSnapshotVersions() )\n                {\n                    String key = getKey( sv.getClassifier(), sv.getExtension() );\n                    if ( !versions.containsKey( key ) )\n                    {\n                        versions.put( key, sv );\n                    }\n                }\n            }\n\n            metadata.getVersioning().setSnapshotVersions( new ArrayList<>( versions.values() ) );\n        }\n\n        artifacts.clear();\n    }\n","date":"2017-02-01 14:59:53","endLine":136,"groupId":"4617","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"merge","params":"(Metadatarecessive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/a5/720109b15ba665e70b2ff325de7b2be6777ad7.src","preCode":"    protected void merge( Metadata recessive )\n    {\n        metadata.getVersioning().updateTimestamp();\n\n        if ( !legacyFormat )\n        {\n            String lastUpdated = metadata.getVersioning().getLastUpdated();\n\n            Map<String, SnapshotVersion> versions = new LinkedHashMap<>();\n\n            for ( Artifact artifact : artifacts )\n            {\n                SnapshotVersion sv = new SnapshotVersion();\n                sv.setClassifier( artifact.getClassifier() );\n                sv.setExtension( artifact.getExtension() );\n                sv.setVersion( getVersion() );\n                sv.setUpdated( lastUpdated );\n                versions.put( getKey( sv.getClassifier(), sv.getExtension() ), sv );\n            }\n\n            Versioning versioning = recessive.getVersioning();\n            if ( versioning != null )\n            {\n                for ( SnapshotVersion sv : versioning.getSnapshotVersions() )\n                {\n                    String key = getKey( sv.getClassifier(), sv.getExtension() );\n                    if ( !versions.containsKey( key ) )\n                    {\n                        versions.put( key, sv );\n                    }\n                }\n            }\n\n            metadata.getVersioning().setSnapshotVersions( new ArrayList<>( versions.values() ) );\n        }\n\n        artifacts.clear();\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"},{"authorDate":"2016-12-12 06:36:04","commitOrder":1,"curCode":"    protected void merge( Metadata recessive )\n    {\n        Snapshot snapshot;\n        String lastUpdated;\n\n        if ( metadata.getVersioning() == null )\n        {\n            DateFormat utcDateFormatter = new SimpleDateFormat( DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT );\n            utcDateFormatter.setCalendar( new GregorianCalendar() );\n            utcDateFormatter.setTimeZone( DEFAULT_SNAPSHOT_TIME_ZONE );\n\n            snapshot = new Snapshot();\n            snapshot.setBuildNumber( getBuildNumber( recessive ) + 1 );\n            snapshot.setTimestamp( utcDateFormatter.format( new Date() ) );\n\n            Versioning versioning = new Versioning();\n            versioning.setSnapshot( snapshot );\n            versioning.setLastUpdated( snapshot.getTimestamp().replace( \".\", \"\" ) );\n            lastUpdated = versioning.getLastUpdated();\n\n            metadata.setVersioning( versioning );\n        }\n        else\n        {\n            snapshot = metadata.getVersioning().getSnapshot();\n            lastUpdated = metadata.getVersioning().getLastUpdated();\n        }\n\n        for ( Artifact artifact : artifacts )\n        {\n            String version = artifact.getVersion();\n\n            if ( version.endsWith( SNAPSHOT ) )\n            {\n                String qualifier = snapshot.getTimestamp() + '-' + snapshot.getBuildNumber();\n                version = version.substring( 0, version.length() - SNAPSHOT.length() ) + qualifier;\n            }\n\n            SnapshotVersion sv = new SnapshotVersion();\n            sv.setClassifier( artifact.getClassifier() );\n            sv.setExtension( artifact.getExtension() );\n            sv.setVersion( version );\n            sv.setUpdated( lastUpdated );\n\n            versions.put( getKey( sv.getClassifier(), sv.getExtension() ), sv );\n        }\n\n        artifacts.clear();\n\n        Versioning versioning = recessive.getVersioning();\n        if ( versioning != null )\n        {\n            for ( SnapshotVersion sv : versioning.getSnapshotVersions() )\n            {\n                String key = getKey( sv.getClassifier(), sv.getExtension() );\n                if ( !versions.containsKey( key ) )\n                {\n                    versions.put( key, sv );\n                }\n            }\n        }\n\n        if ( !legacyFormat )\n        {\n            metadata.getVersioning().setSnapshotVersions( new ArrayList<>( versions.values() ) );\n        }\n    }\n","date":"2017-02-01 14:59:53","endLine":138,"groupId":"3511","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"merge","params":"(Metadatarecessive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/1e/791d8a424c35fedf5dcfa216ba9459540fc408.src","preCode":"    protected void merge( Metadata recessive )\n    {\n        Snapshot snapshot;\n        String lastUpdated;\n\n        if ( metadata.getVersioning() == null )\n        {\n            DateFormat utcDateFormatter = new SimpleDateFormat( DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT );\n            utcDateFormatter.setCalendar( new GregorianCalendar() );\n            utcDateFormatter.setTimeZone( DEFAULT_SNAPSHOT_TIME_ZONE );\n\n            snapshot = new Snapshot();\n            snapshot.setBuildNumber( getBuildNumber( recessive ) + 1 );\n            snapshot.setTimestamp( utcDateFormatter.format( new Date() ) );\n\n            Versioning versioning = new Versioning();\n            versioning.setSnapshot( snapshot );\n            versioning.setLastUpdated( snapshot.getTimestamp().replace( \".\", \"\" ) );\n            lastUpdated = versioning.getLastUpdated();\n\n            metadata.setVersioning( versioning );\n        }\n        else\n        {\n            snapshot = metadata.getVersioning().getSnapshot();\n            lastUpdated = metadata.getVersioning().getLastUpdated();\n        }\n\n        for ( Artifact artifact : artifacts )\n        {\n            String version = artifact.getVersion();\n\n            if ( version.endsWith( SNAPSHOT ) )\n            {\n                String qualifier = snapshot.getTimestamp() + '-' + snapshot.getBuildNumber();\n                version = version.substring( 0, version.length() - SNAPSHOT.length() ) + qualifier;\n            }\n\n            SnapshotVersion sv = new SnapshotVersion();\n            sv.setClassifier( artifact.getClassifier() );\n            sv.setExtension( artifact.getExtension() );\n            sv.setVersion( version );\n            sv.setUpdated( lastUpdated );\n\n            versions.put( getKey( sv.getClassifier(), sv.getExtension() ), sv );\n        }\n\n        artifacts.clear();\n\n        Versioning versioning = recessive.getVersioning();\n        if ( versioning != null )\n        {\n            for ( SnapshotVersion sv : versioning.getSnapshotVersions() )\n            {\n                String key = getKey( sv.getClassifier(), sv.getExtension() );\n                if ( !versions.containsKey( key ) )\n                {\n                    versions.put( key, sv );\n                }\n            }\n        }\n\n        if ( !legacyFormat )\n        {\n            metadata.getVersioning().setSnapshotVersions( new ArrayList<>( versions.values() ) );\n        }\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"8972072e3200e2ecfe2acb6d0b2dc40b10a6bc31","commitMessage":"@@@[MNG-6110] renamed 'maven-aether-provider' to 'maven-resolver-provider'","date":"2017-02-01 14:59:53","modifiedFileCount":"0","status":"B","submitter":"Christian Schulte"},{"authorTime":"2020-10-12 02:27:49","codes":[{"authorDate":"2020-10-12 02:27:49","commitOrder":2,"curCode":"    protected void merge( Metadata recessive )\n    {\n        metadata.getVersioning().setLastUpdatedTimestamp( timestamp );\n\n        if ( !legacyFormat )\n        {\n            String lastUpdated = metadata.getVersioning().getLastUpdated();\n\n            Map<String, SnapshotVersion> versions = new LinkedHashMap<>();\n\n            for ( Artifact artifact : artifacts )\n            {\n                SnapshotVersion sv = new SnapshotVersion();\n                sv.setClassifier( artifact.getClassifier() );\n                sv.setExtension( artifact.getExtension() );\n                sv.setVersion( getVersion() );\n                sv.setUpdated( lastUpdated );\n                versions.put( getKey( sv.getClassifier(), sv.getExtension() ), sv );\n            }\n\n            Versioning versioning = recessive.getVersioning();\n            if ( versioning != null )\n            {\n                for ( SnapshotVersion sv : versioning.getSnapshotVersions() )\n                {\n                    String key = getKey( sv.getClassifier(), sv.getExtension() );\n                    if ( !versions.containsKey( key ) )\n                    {\n                        versions.put( key, sv );\n                    }\n                }\n            }\n\n            metadata.getVersioning().setSnapshotVersions( new ArrayList<>( versions.values() ) );\n        }\n\n        artifacts.clear();\n    }\n","date":"2020-11-12 06:09:49","endLine":137,"groupId":"10137","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"merge","params":"(Metadatarecessive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/45/3e4d2bec9d8622d851eaf32c846159a4125441.src","preCode":"    protected void merge( Metadata recessive )\n    {\n        metadata.getVersioning().updateTimestamp();\n\n        if ( !legacyFormat )\n        {\n            String lastUpdated = metadata.getVersioning().getLastUpdated();\n\n            Map<String, SnapshotVersion> versions = new LinkedHashMap<>();\n\n            for ( Artifact artifact : artifacts )\n            {\n                SnapshotVersion sv = new SnapshotVersion();\n                sv.setClassifier( artifact.getClassifier() );\n                sv.setExtension( artifact.getExtension() );\n                sv.setVersion( getVersion() );\n                sv.setUpdated( lastUpdated );\n                versions.put( getKey( sv.getClassifier(), sv.getExtension() ), sv );\n            }\n\n            Versioning versioning = recessive.getVersioning();\n            if ( versioning != null )\n            {\n                for ( SnapshotVersion sv : versioning.getSnapshotVersions() )\n                {\n                    String key = getKey( sv.getClassifier(), sv.getExtension() );\n                    if ( !versions.containsKey( key ) )\n                    {\n                        versions.put( key, sv );\n                    }\n                }\n            }\n\n            metadata.getVersioning().setSnapshotVersions( new ArrayList<>( versions.values() ) );\n        }\n\n        artifacts.clear();\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/LocalSnapshotMetadata.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-10-12 02:27:49","commitOrder":2,"curCode":"    protected void merge( Metadata recessive )\n    {\n        Snapshot snapshot;\n        String lastUpdated;\n\n        if ( metadata.getVersioning() == null )\n        {\n            DateFormat utcDateFormatter = new SimpleDateFormat( DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT );\n            utcDateFormatter.setCalendar( new GregorianCalendar() );\n            utcDateFormatter.setTimeZone( DEFAULT_SNAPSHOT_TIME_ZONE );\n\n            snapshot = new Snapshot();\n            snapshot.setBuildNumber( getBuildNumber( recessive ) + 1 );\n            snapshot.setTimestamp( utcDateFormatter.format( timestamp ) );\n\n            Versioning versioning = new Versioning();\n            versioning.setSnapshot( snapshot );\n            versioning.setLastUpdatedTimestamp( timestamp );\n            lastUpdated = versioning.getLastUpdated();\n\n            metadata.setVersioning( versioning );\n        }\n        else\n        {\n            snapshot = metadata.getVersioning().getSnapshot();\n            lastUpdated = metadata.getVersioning().getLastUpdated();\n        }\n\n        for ( Artifact artifact : artifacts )\n        {\n            String version = artifact.getVersion();\n\n            if ( version.endsWith( SNAPSHOT ) )\n            {\n                String qualifier = snapshot.getTimestamp() + '-' + snapshot.getBuildNumber();\n                version = version.substring( 0, version.length() - SNAPSHOT.length() ) + qualifier;\n            }\n\n            SnapshotVersion sv = new SnapshotVersion();\n            sv.setClassifier( artifact.getClassifier() );\n            sv.setExtension( artifact.getExtension() );\n            sv.setVersion( version );\n            sv.setUpdated( lastUpdated );\n\n            versions.put( getKey( sv.getClassifier(), sv.getExtension() ), sv );\n        }\n\n        artifacts.clear();\n\n        Versioning versioning = recessive.getVersioning();\n        if ( versioning != null )\n        {\n            for ( SnapshotVersion sv : versioning.getSnapshotVersions() )\n            {\n                String key = getKey( sv.getClassifier(), sv.getExtension() );\n                if ( !versions.containsKey( key ) )\n                {\n                    versions.put( key, sv );\n                }\n            }\n        }\n\n        if ( !legacyFormat )\n        {\n            metadata.getVersioning().setSnapshotVersions( new ArrayList<>( versions.values() ) );\n        }\n    }\n","date":"2020-11-12 06:09:49","endLine":138,"groupId":"10137","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"merge","params":"(Metadatarecessive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/d9/b56166af79de3c90e91130100b65358cee6285.src","preCode":"    protected void merge( Metadata recessive )\n    {\n        Snapshot snapshot;\n        String lastUpdated;\n\n        if ( metadata.getVersioning() == null )\n        {\n            DateFormat utcDateFormatter = new SimpleDateFormat( DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT );\n            utcDateFormatter.setCalendar( new GregorianCalendar() );\n            utcDateFormatter.setTimeZone( DEFAULT_SNAPSHOT_TIME_ZONE );\n\n            snapshot = new Snapshot();\n            snapshot.setBuildNumber( getBuildNumber( recessive ) + 1 );\n            snapshot.setTimestamp( utcDateFormatter.format( new Date() ) );\n\n            Versioning versioning = new Versioning();\n            versioning.setSnapshot( snapshot );\n            versioning.setLastUpdated( snapshot.getTimestamp().replace( \".\", \"\" ) );\n            lastUpdated = versioning.getLastUpdated();\n\n            metadata.setVersioning( versioning );\n        }\n        else\n        {\n            snapshot = metadata.getVersioning().getSnapshot();\n            lastUpdated = metadata.getVersioning().getLastUpdated();\n        }\n\n        for ( Artifact artifact : artifacts )\n        {\n            String version = artifact.getVersion();\n\n            if ( version.endsWith( SNAPSHOT ) )\n            {\n                String qualifier = snapshot.getTimestamp() + '-' + snapshot.getBuildNumber();\n                version = version.substring( 0, version.length() - SNAPSHOT.length() ) + qualifier;\n            }\n\n            SnapshotVersion sv = new SnapshotVersion();\n            sv.setClassifier( artifact.getClassifier() );\n            sv.setExtension( artifact.getExtension() );\n            sv.setVersion( version );\n            sv.setUpdated( lastUpdated );\n\n            versions.put( getKey( sv.getClassifier(), sv.getExtension() ), sv );\n        }\n\n        artifacts.clear();\n\n        Versioning versioning = recessive.getVersioning();\n        if ( versioning != null )\n        {\n            for ( SnapshotVersion sv : versioning.getSnapshotVersions() )\n            {\n                String key = getKey( sv.getClassifier(), sv.getExtension() );\n                if ( !versions.containsKey( key ) )\n                {\n                    versions.put( key, sv );\n                }\n            }\n        }\n\n        if ( !legacyFormat )\n        {\n            metadata.getVersioning().setSnapshotVersions( new ArrayList<>( versions.values() ) );\n        }\n    }\n","realPath":"maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RemoteSnapshotMetadata.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"72688805c4f95f8ab4ca9ab2ac2cd114667790c9","commitMessage":"@@@[MNG-6754] Set the same timestamp in multi module builds\n\nReuse MavenExecutionRequest#getStartTime() throughout for snapshot versions. \nlast updated fields in metadata consistently for local and remote repositories\nfor the entire reactor and its modules.\n\nThis closes #381\n","date":"2020-11-12 06:09:49","modifiedFileCount":"14","status":"M","submitter":"Michael Osipov"}]
