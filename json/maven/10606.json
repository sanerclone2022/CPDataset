[{"authorTime":"2010-04-08 19:29:13","codes":[{"authorDate":"2010-04-08 19:29:13","commitOrder":1,"curCode":"    public void testConcurrencyGraphPrimaryVersion()\n        throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException,\n        NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException,\n        LifecyclePhaseNotFoundException, LifecycleNotFoundException\n    {\n        ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();\n        final MavenSession session = ProjectDependencyGraphStub.getMavenSession();\n\n        ConcurrencyDependencyGraph graph =\n            new ConcurrencyDependencyGraph( getProjectBuildList( session ), dependencyGraph );\n\n        final List<MavenProject> projectBuilds = graph.getRootSchedulableBuilds();\n        assertEquals( 1, projectBuilds.size() );\n        assertEquals( A, projectBuilds.get( 0 ) );\n\n        final List<MavenProject> subsequent = graph.markAsFinished( A );\n        assertEquals( 2, subsequent.size() );\n        assertEquals( ProjectDependencyGraphStub.B, subsequent.get( 0 ) );\n        assertEquals( C, subsequent.get( 1 ) );\n\n        final List<MavenProject> bDescendants = graph.markAsFinished( B );\n        assertEquals( 1, bDescendants.size() );\n        assertEquals( Y, bDescendants.get( 0 ) );\n\n        final List<MavenProject> cDescendants = graph.markAsFinished( C );\n        assertEquals( 2, cDescendants.size() );\n        assertEquals( X, cDescendants.get( 0 ) );\n        assertEquals( Z, cDescendants.get( 1 ) );\n    }\n","date":"2010-04-08 19:29:13","endLine":69,"groupId":"2619","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrencyGraphPrimaryVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/a1/5cccac71c46101d20955b487efe23a664fa3b2.src","preCode":"    public void testConcurrencyGraphPrimaryVersion()\n        throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException,\n        NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException,\n        LifecyclePhaseNotFoundException, LifecycleNotFoundException\n    {\n        ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();\n        final MavenSession session = ProjectDependencyGraphStub.getMavenSession();\n\n        ConcurrencyDependencyGraph graph =\n            new ConcurrencyDependencyGraph( getProjectBuildList( session ), dependencyGraph );\n\n        final List<MavenProject> projectBuilds = graph.getRootSchedulableBuilds();\n        assertEquals( 1, projectBuilds.size() );\n        assertEquals( A, projectBuilds.get( 0 ) );\n\n        final List<MavenProject> subsequent = graph.markAsFinished( A );\n        assertEquals( 2, subsequent.size() );\n        assertEquals( ProjectDependencyGraphStub.B, subsequent.get( 0 ) );\n        assertEquals( C, subsequent.get( 1 ) );\n\n        final List<MavenProject> bDescendants = graph.markAsFinished( B );\n        assertEquals( 1, bDescendants.size() );\n        assertEquals( Y, bDescendants.get( 0 ) );\n\n        final List<MavenProject> cDescendants = graph.markAsFinished( C );\n        assertEquals( 2, cDescendants.size() );\n        assertEquals( X, cDescendants.get( 0 ) );\n        assertEquals( Z, cDescendants.get( 1 ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/lifecycle/internal/ConcurrencyDependencyGraphTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"},{"authorDate":"2010-04-08 19:29:13","commitOrder":1,"curCode":"    public void testConcurrencyGraphDifferentCompletionOrder()\n        throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException,\n        NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException,\n        LifecyclePhaseNotFoundException, LifecycleNotFoundException\n    {\n        ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();\n        final MavenSession session = ProjectDependencyGraphStub.getMavenSession();\n        ConcurrencyDependencyGraph graph =\n            new ConcurrencyDependencyGraph( getProjectBuildList( session ), dependencyGraph );\n\n        graph.markAsFinished( A );\n        final List<MavenProject> cDescendants = graph.markAsFinished( C );\n        assertEquals( 1, cDescendants.size() );\n        assertEquals( Z, cDescendants.get( 0 ) );\n\n        final List<MavenProject> bDescendants = graph.markAsFinished( B );\n        assertEquals( 2, bDescendants.size() );\n        assertEquals( X, bDescendants.get( 0 ) );\n        assertEquals( Y, bDescendants.get( 1 ) );\n    }\n","date":"2010-04-08 19:29:13","endLine":90,"groupId":"2619","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrencyGraphDifferentCompletionOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/a1/5cccac71c46101d20955b487efe23a664fa3b2.src","preCode":"    public void testConcurrencyGraphDifferentCompletionOrder()\n        throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException,\n        NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException,\n        LifecyclePhaseNotFoundException, LifecycleNotFoundException\n    {\n        ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();\n        final MavenSession session = ProjectDependencyGraphStub.getMavenSession();\n        ConcurrencyDependencyGraph graph =\n            new ConcurrencyDependencyGraph( getProjectBuildList( session ), dependencyGraph );\n\n        graph.markAsFinished( A );\n        final List<MavenProject> cDescendants = graph.markAsFinished( C );\n        assertEquals( 1, cDescendants.size() );\n        assertEquals( Z, cDescendants.get( 0 ) );\n\n        final List<MavenProject> bDescendants = graph.markAsFinished( B );\n        assertEquals( 2, bDescendants.size() );\n        assertEquals( X, bDescendants.get( 0 ) );\n        assertEquals( Y, bDescendants.get( 1 ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/lifecycle/internal/ConcurrencyDependencyGraphTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"83237e46af5654c51c5c9005b054c1ffa01e327d","commitMessage":"@@@[MNG-3004] Concurrent building of multimodule projects\n\nThis commit consists of a modularization of the DefaultLifecycleExecutor into smaller\ncomponents. This is primarily done with the intention of extracting execution strategy \nsomewhat from the rest of the logic.\n\nIt also contains three differenent execution strategies:\nA) Linear (\"Classic\")\nB) Parallel (Based on Dan's original implemementation)\nC) Weave (Still experimental) \n\n \nThe command line -T option activates parallel running.  and the argument\nis in the form -T <[nThreads.  a float][C][W]|auto>\n\nNotes:\n* The output demultiplexer is disabled in this commit.  and output will appear intermingled.\n* The modello plugin has known problems\n* Surefire must be run in forkmode at least once.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@931884 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-04-08 19:29:13","modifiedFileCount":"21","status":"B","submitter":"Kristian Rosenvold"},{"authorTime":"2010-04-08 19:29:13","codes":[{"authorDate":"2017-07-04 23:33:10","commitOrder":2,"curCode":"    public void testConcurrencyGraphPrimaryVersion()\n        throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException,\n        NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException,\n        LifecyclePhaseNotFoundException, LifecycleNotFoundException\n    {\n        ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();\n        final MavenSession session = ProjectDependencyGraphStub.getMavenSession();\n\n        ConcurrencyDependencyGraph graph =\n            new ConcurrencyDependencyGraph( getProjectBuildList( session ), dependencyGraph );\n\n        final List<MavenProject> projectBuilds = graph.getRootSchedulableBuilds();\n        assertEquals( 1, projectBuilds.size() );\n        assertEquals( A, projectBuilds.iterator().next() );\n\n        final List<MavenProject> subsequent = graph.markAsFinished( A );\n        assertEquals( 2, subsequent.size() );\n        assertEquals( ProjectDependencyGraphStub.B, subsequent.get( 0 ) );\n        assertEquals( C, subsequent.get( 1 ) );\n\n        final List<MavenProject> bDescendants = graph.markAsFinished( B );\n        assertEquals( 1, bDescendants.size() );\n        assertEquals( Y, bDescendants.get( 0 ) );\n\n        final List<MavenProject> cDescendants = graph.markAsFinished( C );\n        assertEquals( 2, cDescendants.size() );\n        assertEquals( X, cDescendants.get( 0 ) );\n        assertEquals( Z, cDescendants.get( 1 ) );\n    }\n","date":"2018-12-26 22:24:16","endLine":71,"groupId":"10606","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrencyGraphPrimaryVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/61/18bbe6387fbb4b89532d84e614eb670145ad58.src","preCode":"    public void testConcurrencyGraphPrimaryVersion()\n        throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException,\n        NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException,\n        LifecyclePhaseNotFoundException, LifecycleNotFoundException\n    {\n        ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();\n        final MavenSession session = ProjectDependencyGraphStub.getMavenSession();\n\n        ConcurrencyDependencyGraph graph =\n            new ConcurrencyDependencyGraph( getProjectBuildList( session ), dependencyGraph );\n\n        final List<MavenProject> projectBuilds = graph.getRootSchedulableBuilds();\n        assertEquals( 1, projectBuilds.size() );\n        assertEquals( A, projectBuilds.get( 0 ) );\n\n        final List<MavenProject> subsequent = graph.markAsFinished( A );\n        assertEquals( 2, subsequent.size() );\n        assertEquals( ProjectDependencyGraphStub.B, subsequent.get( 0 ) );\n        assertEquals( C, subsequent.get( 1 ) );\n\n        final List<MavenProject> bDescendants = graph.markAsFinished( B );\n        assertEquals( 1, bDescendants.size() );\n        assertEquals( Y, bDescendants.get( 0 ) );\n\n        final List<MavenProject> cDescendants = graph.markAsFinished( C );\n        assertEquals( 2, cDescendants.size() );\n        assertEquals( X, cDescendants.get( 0 ) );\n        assertEquals( Z, cDescendants.get( 1 ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/lifecycle/internal/ConcurrencyDependencyGraphTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2010-04-08 19:29:13","commitOrder":2,"curCode":"    public void testConcurrencyGraphDifferentCompletionOrder()\n        throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException,\n        NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException,\n        LifecyclePhaseNotFoundException, LifecycleNotFoundException\n    {\n        ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();\n        final MavenSession session = ProjectDependencyGraphStub.getMavenSession();\n        ConcurrencyDependencyGraph graph =\n            new ConcurrencyDependencyGraph( getProjectBuildList( session ), dependencyGraph );\n\n        graph.markAsFinished( A );\n        final List<MavenProject> cDescendants = graph.markAsFinished( C );\n        assertEquals( 1, cDescendants.size() );\n        assertEquals( Z, cDescendants.get( 0 ) );\n\n        final List<MavenProject> bDescendants = graph.markAsFinished( B );\n        assertEquals( 2, bDescendants.size() );\n        assertEquals( X, bDescendants.get( 0 ) );\n        assertEquals( Y, bDescendants.get( 1 ) );\n    }\n","date":"2010-04-08 19:29:13","endLine":90,"groupId":"10606","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrencyGraphDifferentCompletionOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-maven-10-0.7/blobInfo/CC_OUT/blobs/a1/5cccac71c46101d20955b487efe23a664fa3b2.src","preCode":"    public void testConcurrencyGraphDifferentCompletionOrder()\n        throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException,\n        NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException,\n        LifecyclePhaseNotFoundException, LifecycleNotFoundException\n    {\n        ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();\n        final MavenSession session = ProjectDependencyGraphStub.getMavenSession();\n        ConcurrencyDependencyGraph graph =\n            new ConcurrencyDependencyGraph( getProjectBuildList( session ), dependencyGraph );\n\n        graph.markAsFinished( A );\n        final List<MavenProject> cDescendants = graph.markAsFinished( C );\n        assertEquals( 1, cDescendants.size() );\n        assertEquals( Z, cDescendants.get( 0 ) );\n\n        final List<MavenProject> bDescendants = graph.markAsFinished( B );\n        assertEquals( 2, bDescendants.size() );\n        assertEquals( X, bDescendants.get( 0 ) );\n        assertEquals( Y, bDescendants.get( 1 ) );\n    }\n","realPath":"maven-core/src/test/java/org/apache/maven/lifecycle/internal/ConcurrencyDependencyGraphTest.java","repoName":"maven","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"c6bdafed23f152d83d766c1ed3db8c1c4b723eb3","commitMessage":"@@@[MNG-5965] Parallel build multiplies work if multiple goals are given\n\nThis closes #125\n","date":"2018-12-26 22:24:16","modifiedFileCount":"3","status":"M","submitter":"Duarte Meneses"}]
