[{"authorTime":"2018-08-26 22:43:11","codes":[{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    public void exportDiff (List<Setup> setups, File destination, File root, HgProgressSupport progress) {\n        boolean success = false;\n        OutputStream out = null;\n        int exportedFiles = 0;\n        OutputLogger logger = progress.getLogger();\n        try {\n            if (root == null) {\n                NotifyDescriptor nd = new NotifyDescriptor(\n                        NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_BadSelection_Prompt\"), \n                        NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_BadSelection_Title\"), \n                        NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);\n                DialogDisplayer.getDefault().notify(nd);\n                return;\n            }\n\n            logger.outputInRed(\n                    NbBundle.getMessage(ExportDiffChangesAction.class,\n                    \"MSG_EXPORT_CHANGES_TITLE\")); \r\n            logger.outputInRed(\n                    NbBundle.getMessage(ExportDiffChangesAction.class,\n                    \"MSG_EXPORT_CHANGES_TITLE_SEP\")); \r\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_EXPORT_CHANGES\", destination)); \r\n\n            String sep = System.getProperty(\"line.separator\"); \r\n            ensureParentExists(destination);\n            out = new BufferedOutputStream(new FileOutputStream(destination));\n            \r\n            out.write((\"# \" + PATCH_FILE_HEADER + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch file was generated by NetBeans IDE\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Following Index: paths are relative to: \" + root.getAbsolutePath() + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch can be applied using context Tools: Patch action on respective folder.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# It uses platform neutral UTF-8 encoding and \\\\n newlines.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Above lines and this line are ignored by the patching process.\" + sep).getBytes(\"utf8\"));  \r\n\n\n            Collections.sort(setups, new Comparator<Setup>() {\n                @Override\n                public int compare(Setup o1, Setup o2) {\n                    return o1.getBaseFile().compareTo(o2.getBaseFile());\n                }\n            });\n            Iterator<Setup> it = setups.iterator();\n            int i = 0;\n            while (it.hasNext()) {\n                Setup setup = it.next();\n                File file = setup.getBaseFile();                \n                Mercurial.LOG.log(Level.FINE, \"exporting setup {0}\", file.getName()); \r\n                logger.output(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_Export_Changes_Exporting\", file.getName())); \r\n                if (file.isDirectory()) continue;\n                progress.setDisplayName(file.getName());\n\n                String index = \"Index: \";   \r\n                String rootPath = root.getAbsolutePath();\n                String filePath = file.getAbsolutePath();\n                String relativePath = filePath;\n                if (filePath.startsWith(rootPath)) {\n                    relativePath = filePath.substring(rootPath.length() + 1).replace(File.separatorChar, '/');\n                    index += relativePath + sep;\n                    out.write(index.getBytes(\"utf8\")); \r\n                }\n                exportDiff(setup, relativePath, out);\n                i++;\n            }\n\n            exportedFiles = i;\n            success = true;\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_EXPORT_CHANGES_DONE\")); \r\n        } catch (IOException ex) {\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3003\")); \r\n            Mercurial.LOG.log(Level.INFO, NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3003\"), ex);\n        } finally {\n            if (out != null) {\n                try {\n                    out.flush();\n                    out.close();\n                } catch (IOException alreadyClosed) {\n                }\n            }\n            if (success) {\n                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3004\", new Integer(exportedFiles)));\n                if (exportedFiles == 0) {\n                    destination.delete();\n                } else {\n                    Utils.openFile(destination);\n                }\n            } else {\n                destination.delete();\n            }\n            logger.output(\"\"); \r\n        }\n    }\n","date":"2018-08-26 22:43:11","endLine":275,"groupId":"78558","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"exportDiff","params":"(List<Setup>setups@Filedestination@Fileroot@HgProgressSupportprogress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/e0/7f88274c6b8cc6887a9fd8045e2984397363f4.src","preCode":"    public void exportDiff (List<Setup> setups, File destination, File root, HgProgressSupport progress) {\n        boolean success = false;\n        OutputStream out = null;\n        int exportedFiles = 0;\n        OutputLogger logger = progress.getLogger();\n        try {\n            if (root == null) {\n                NotifyDescriptor nd = new NotifyDescriptor(\n                        NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_BadSelection_Prompt\"), \n                        NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_BadSelection_Title\"), \n                        NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);\n                DialogDisplayer.getDefault().notify(nd);\n                return;\n            }\n\n            logger.outputInRed(\n                    NbBundle.getMessage(ExportDiffChangesAction.class,\n                    \"MSG_EXPORT_CHANGES_TITLE\")); \r\n            logger.outputInRed(\n                    NbBundle.getMessage(ExportDiffChangesAction.class,\n                    \"MSG_EXPORT_CHANGES_TITLE_SEP\")); \r\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_EXPORT_CHANGES\", destination)); \r\n\n            String sep = System.getProperty(\"line.separator\"); \r\n            ensureParentExists(destination);\n            out = new BufferedOutputStream(new FileOutputStream(destination));\n            \r\n            out.write((\"# \" + PATCH_FILE_HEADER + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch file was generated by NetBeans IDE\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Following Index: paths are relative to: \" + root.getAbsolutePath() + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch can be applied using context Tools: Patch action on respective folder.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# It uses platform neutral UTF-8 encoding and \\\\n newlines.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Above lines and this line are ignored by the patching process.\" + sep).getBytes(\"utf8\"));  \r\n\n\n            Collections.sort(setups, new Comparator<Setup>() {\n                @Override\n                public int compare(Setup o1, Setup o2) {\n                    return o1.getBaseFile().compareTo(o2.getBaseFile());\n                }\n            });\n            Iterator<Setup> it = setups.iterator();\n            int i = 0;\n            while (it.hasNext()) {\n                Setup setup = it.next();\n                File file = setup.getBaseFile();                \n                Mercurial.LOG.log(Level.FINE, \"exporting setup {0}\", file.getName()); \r\n                logger.output(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_Export_Changes_Exporting\", file.getName())); \r\n                if (file.isDirectory()) continue;\n                progress.setDisplayName(file.getName());\n\n                String index = \"Index: \";   \r\n                String rootPath = root.getAbsolutePath();\n                String filePath = file.getAbsolutePath();\n                String relativePath = filePath;\n                if (filePath.startsWith(rootPath)) {\n                    relativePath = filePath.substring(rootPath.length() + 1).replace(File.separatorChar, '/');\n                    index += relativePath + sep;\n                    out.write(index.getBytes(\"utf8\")); \r\n                }\n                exportDiff(setup, relativePath, out);\n                i++;\n            }\n\n            exportedFiles = i;\n            success = true;\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_EXPORT_CHANGES_DONE\")); \r\n        } catch (IOException ex) {\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3003\")); \r\n            Mercurial.LOG.log(Level.INFO, NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3003\"), ex);\n        } finally {\n            if (out != null) {\n                try {\n                    out.flush();\n                    out.close();\n                } catch (IOException alreadyClosed) {\n                }\n            }\n            if (success) {\n                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3004\", new Integer(exportedFiles)));\n                if (exportedFiles == 0) {\n                    destination.delete();\n                } else {\n                    Utils.openFile(destination);\n                }\n            } else {\n                destination.delete();\n            }\n            logger.output(\"\"); \r\n        }\n    }\n","realPath":"ide/mercurial/src/org/netbeans/modules/mercurial/ui/diff/ExportDiffChangesAction.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"},{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    public void exportDiff (List<Setup> setups, File destination, File root, SvnProgressSupport progress) {\n        if (root == null) {\n            NotifyDescriptor nd = new NotifyDescriptor(\n                    NbBundle.getMessage(ExportDiffAction.class, \"MSG_BadSelection_Prompt\"), \n                    NbBundle.getMessage(ExportDiffAction.class, \"MSG_BadSelection_Title\"), \n                    NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);\n            DialogDisplayer.getDefault().notify(nd);\n            return;\n        }\n        boolean success = false;\n        OutputStream out = null;\n        int exportedFiles = 0;\n\n        try {\n            String sep = System.getProperty(\"line.separator\"); \r\n            out = new BufferedOutputStream(new FileOutputStream(destination));\n            \r\n            out.write((\"# This patch file was generated by NetBeans IDE\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Following Index: paths are relative to: \" + root.getAbsolutePath() + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch can be applied using context Tools: Patch action on respective folder.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# It uses platform neutral UTF-8 encoding and \\\\n newlines.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Above lines and this line are ignored by the patching process.\" + sep).getBytes(\"utf8\"));  \r\n\n\n            Collections.sort(setups, new Comparator<Setup>() {\n                @Override\n                public int compare(Setup o1, Setup o2) {\n                    return o1.getBaseFile().compareTo(o2.getBaseFile());\n                }\n            });\n            Iterator<Setup> it = setups.iterator();\n            int i = 0;\n            while (it.hasNext()) {\n                Setup setup = it.next();\n                File file = setup.getBaseFile();                \n                if (file.isDirectory()) continue;\n                try {            \n                    progress.setRepositoryRoot(SvnUtils.getRepositoryRootUrl(file));\n                } catch (SVNClientException ex) {\n                    SvnClientExceptionHandler.notifyException(ex, true, true);\n                    return;\n                }                           \n                progress.setDisplayName(file.getName());\n\n                String index = \"Index: \";   \r\n                String rootPath = root.getAbsolutePath();\n                String filePath = file.getAbsolutePath();\n                String relativePath = filePath;\n                if (filePath.startsWith(rootPath)) {\n                    relativePath = filePath.substring(rootPath.length() + 1).replace(File.separatorChar, '/');\n                    index += relativePath + sep;\n                    out.write(index.getBytes(\"utf8\")); \r\n                }\n                exportDiff(setup, relativePath, out);\n                i++;\n            }\n\n            exportedFiles = i;\n            success = true;\n        } catch (IOException ex) {\n            SvnClientExceptionHandler.notifyException(new Exception(NbBundle.getMessage(ExportDiffAction.class, \"BK3003\", \r\n                    ex.getLocalizedMessage()), ex), true, false);\n        } finally {\n            if (out != null) {\n                try {\n                    out.flush();\n                    out.close();\n                } catch (IOException alreadyClsoed) {\n                }\n            }\n            if (success) {\n                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ExportDiffAction.class, \"BK3004\", new Integer(exportedFiles)));\n                if (exportedFiles == 0) {\n                    destination.delete();\n                } else {\n                    Utils.openFile(FileUtil.normalizeFile(destination));\n                }\n            } else {\n                destination.delete();\n            }\n\n        }\n    }\n","date":"2018-08-26 22:43:11","endLine":279,"groupId":"72243","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"exportDiff","params":"(List<Setup>setups@Filedestination@Fileroot@SvnProgressSupportprogress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/76/d2e72a069d12c99141bd19f723ff6eaf2cc61a.src","preCode":"    public void exportDiff (List<Setup> setups, File destination, File root, SvnProgressSupport progress) {\n        if (root == null) {\n            NotifyDescriptor nd = new NotifyDescriptor(\n                    NbBundle.getMessage(ExportDiffAction.class, \"MSG_BadSelection_Prompt\"), \n                    NbBundle.getMessage(ExportDiffAction.class, \"MSG_BadSelection_Title\"), \n                    NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);\n            DialogDisplayer.getDefault().notify(nd);\n            return;\n        }\n        boolean success = false;\n        OutputStream out = null;\n        int exportedFiles = 0;\n\n        try {\n            String sep = System.getProperty(\"line.separator\"); \r\n            out = new BufferedOutputStream(new FileOutputStream(destination));\n            \r\n            out.write((\"# This patch file was generated by NetBeans IDE\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Following Index: paths are relative to: \" + root.getAbsolutePath() + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch can be applied using context Tools: Patch action on respective folder.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# It uses platform neutral UTF-8 encoding and \\\\n newlines.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Above lines and this line are ignored by the patching process.\" + sep).getBytes(\"utf8\"));  \r\n\n\n            Collections.sort(setups, new Comparator<Setup>() {\n                @Override\n                public int compare(Setup o1, Setup o2) {\n                    return o1.getBaseFile().compareTo(o2.getBaseFile());\n                }\n            });\n            Iterator<Setup> it = setups.iterator();\n            int i = 0;\n            while (it.hasNext()) {\n                Setup setup = it.next();\n                File file = setup.getBaseFile();                \n                if (file.isDirectory()) continue;\n                try {            \n                    progress.setRepositoryRoot(SvnUtils.getRepositoryRootUrl(file));\n                } catch (SVNClientException ex) {\n                    SvnClientExceptionHandler.notifyException(ex, true, true);\n                    return;\n                }                           \n                progress.setDisplayName(file.getName());\n\n                String index = \"Index: \";   \r\n                String rootPath = root.getAbsolutePath();\n                String filePath = file.getAbsolutePath();\n                String relativePath = filePath;\n                if (filePath.startsWith(rootPath)) {\n                    relativePath = filePath.substring(rootPath.length() + 1).replace(File.separatorChar, '/');\n                    index += relativePath + sep;\n                    out.write(index.getBytes(\"utf8\")); \r\n                }\n                exportDiff(setup, relativePath, out);\n                i++;\n            }\n\n            exportedFiles = i;\n            success = true;\n        } catch (IOException ex) {\n            SvnClientExceptionHandler.notifyException(new Exception(NbBundle.getMessage(ExportDiffAction.class, \"BK3003\", \r\n                    ex.getLocalizedMessage()), ex), true, false);\n        } finally {\n            if (out != null) {\n                try {\n                    out.flush();\n                    out.close();\n                } catch (IOException alreadyClsoed) {\n                }\n            }\n            if (success) {\n                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ExportDiffAction.class, \"BK3004\", new Integer(exportedFiles)));\n                if (exportedFiles == 0) {\n                    destination.delete();\n                } else {\n                    Utils.openFile(FileUtil.normalizeFile(destination));\n                }\n            } else {\n                destination.delete();\n            }\n\n        }\n    }\n","realPath":"ide/subversion/src/org/netbeans/modules/subversion/ui/diff/ExportDiffAction.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"B"}],"commitId":"0f2e98d513deaedccef831ee9cfc08d09f3650b6","commitMessage":"@@@Merge pull request #791 from ralphbenjamin/NETBEANS-1172_move_ide_modules_to_ide_subdirectory\n\n[NETBEANS-1172] move ide modules to ide subdirectory","date":"2018-08-26 22:43:11","modifiedFileCount":"0","status":"B","submitter":"Geertjan Wielenga"},{"authorTime":"2021-09-05 14:09:38","codes":[{"authorDate":"2021-09-05 14:09:38","commitOrder":2,"curCode":"    public void exportDiff (List<Setup> setups, File destination, File root, HgProgressSupport progress) {\n        boolean success = false;\n        OutputStream out = null;\n        int exportedFiles = 0;\n        OutputLogger logger = progress.getLogger();\n        try {\n            if (root == null) {\n                NotifyDescriptor nd = new NotifyDescriptor(\n                        NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_BadSelection_Prompt\"), \n                        NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_BadSelection_Title\"), \n                        NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);\n                DialogDisplayer.getDefault().notify(nd);\n                return;\n            }\n\n            logger.outputInRed(\n                    NbBundle.getMessage(ExportDiffChangesAction.class,\n                    \"MSG_EXPORT_CHANGES_TITLE\")); \r\n            logger.outputInRed(\n                    NbBundle.getMessage(ExportDiffChangesAction.class,\n                    \"MSG_EXPORT_CHANGES_TITLE_SEP\")); \r\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_EXPORT_CHANGES\", destination)); \r\n\n            String sep = System.getProperty(\"line.separator\"); \r\n            ensureParentExists(destination);\n            out = new BufferedOutputStream(new FileOutputStream(destination));\n            \r\n            out.write((\"# \" + PATCH_FILE_HEADER + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch file was generated by NetBeans IDE\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Following Index: paths are relative to: \" + root.getAbsolutePath() + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch can be applied using context Tools: Patch action on respective folder.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# It uses platform neutral UTF-8 encoding and \\\\n newlines.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Above lines and this line are ignored by the patching process.\" + sep).getBytes(\"utf8\"));  \r\n\n\n            Collections.sort(setups, new Comparator<Setup>() {\n                @Override\n                public int compare(Setup o1, Setup o2) {\n                    return o1.getBaseFile().compareTo(o2.getBaseFile());\n                }\n            });\n            Iterator<Setup> it = setups.iterator();\n            int i = 0;\n            while (it.hasNext()) {\n                Setup setup = it.next();\n                File file = setup.getBaseFile();                \n                Mercurial.LOG.log(Level.FINE, \"exporting setup {0}\", file.getName()); \r\n                logger.output(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_Export_Changes_Exporting\", file.getName())); \r\n                if (file.isDirectory()) continue;\n                progress.setDisplayName(file.getName());\n\n                String index = \"Index: \";   \r\n                String rootPath = root.getAbsolutePath();\n                String filePath = file.getAbsolutePath();\n                String relativePath = filePath;\n                if (filePath.startsWith(rootPath)) {\n                    relativePath = filePath.substring(rootPath.length() + 1).replace(File.separatorChar, '/');\n                    index += relativePath + sep;\n                    out.write(index.getBytes(\"utf8\")); \r\n                }\n                exportDiff(setup, relativePath, out);\n                i++;\n            }\n\n            exportedFiles = i;\n            success = true;\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_EXPORT_CHANGES_DONE\")); \r\n        } catch (IOException ex) {\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3003\")); \r\n            Mercurial.LOG.log(Level.INFO, NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3003\"), ex);\n        } finally {\n            if (out != null) {\n                try {\n                    out.flush();\n                    out.close();\n                } catch (IOException alreadyClosed) {\n                }\n            }\n            if (success) {\n                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3004\", Integer.valueOf(exportedFiles)));\n                if (exportedFiles == 0) {\n                    destination.delete();\n                } else {\n                    Utils.openFile(destination);\n                }\n            } else {\n                destination.delete();\n            }\n            logger.output(\"\"); \r\n        }\n    }\n","date":"2021-09-05 14:09:38","endLine":275,"groupId":"124387","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"exportDiff","params":"(List<Setup>setups@Filedestination@Fileroot@HgProgressSupportprogress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/9b/8077d2fca52194a7d7ab92ff2ce03b9512c285.src","preCode":"    public void exportDiff (List<Setup> setups, File destination, File root, HgProgressSupport progress) {\n        boolean success = false;\n        OutputStream out = null;\n        int exportedFiles = 0;\n        OutputLogger logger = progress.getLogger();\n        try {\n            if (root == null) {\n                NotifyDescriptor nd = new NotifyDescriptor(\n                        NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_BadSelection_Prompt\"), \n                        NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_BadSelection_Title\"), \n                        NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);\n                DialogDisplayer.getDefault().notify(nd);\n                return;\n            }\n\n            logger.outputInRed(\n                    NbBundle.getMessage(ExportDiffChangesAction.class,\n                    \"MSG_EXPORT_CHANGES_TITLE\")); \r\n            logger.outputInRed(\n                    NbBundle.getMessage(ExportDiffChangesAction.class,\n                    \"MSG_EXPORT_CHANGES_TITLE_SEP\")); \r\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_EXPORT_CHANGES\", destination)); \r\n\n            String sep = System.getProperty(\"line.separator\"); \r\n            ensureParentExists(destination);\n            out = new BufferedOutputStream(new FileOutputStream(destination));\n            \r\n            out.write((\"# \" + PATCH_FILE_HEADER + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch file was generated by NetBeans IDE\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Following Index: paths are relative to: \" + root.getAbsolutePath() + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch can be applied using context Tools: Patch action on respective folder.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# It uses platform neutral UTF-8 encoding and \\\\n newlines.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Above lines and this line are ignored by the patching process.\" + sep).getBytes(\"utf8\"));  \r\n\n\n            Collections.sort(setups, new Comparator<Setup>() {\n                @Override\n                public int compare(Setup o1, Setup o2) {\n                    return o1.getBaseFile().compareTo(o2.getBaseFile());\n                }\n            });\n            Iterator<Setup> it = setups.iterator();\n            int i = 0;\n            while (it.hasNext()) {\n                Setup setup = it.next();\n                File file = setup.getBaseFile();                \n                Mercurial.LOG.log(Level.FINE, \"exporting setup {0}\", file.getName()); \r\n                logger.output(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_Export_Changes_Exporting\", file.getName())); \r\n                if (file.isDirectory()) continue;\n                progress.setDisplayName(file.getName());\n\n                String index = \"Index: \";   \r\n                String rootPath = root.getAbsolutePath();\n                String filePath = file.getAbsolutePath();\n                String relativePath = filePath;\n                if (filePath.startsWith(rootPath)) {\n                    relativePath = filePath.substring(rootPath.length() + 1).replace(File.separatorChar, '/');\n                    index += relativePath + sep;\n                    out.write(index.getBytes(\"utf8\")); \r\n                }\n                exportDiff(setup, relativePath, out);\n                i++;\n            }\n\n            exportedFiles = i;\n            success = true;\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"MSG_EXPORT_CHANGES_DONE\")); \r\n        } catch (IOException ex) {\n            logger.outputInRed(NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3003\")); \r\n            Mercurial.LOG.log(Level.INFO, NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3003\"), ex);\n        } finally {\n            if (out != null) {\n                try {\n                    out.flush();\n                    out.close();\n                } catch (IOException alreadyClosed) {\n                }\n            }\n            if (success) {\n                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ExportDiffChangesAction.class, \"BK3004\", new Integer(exportedFiles)));\n                if (exportedFiles == 0) {\n                    destination.delete();\n                } else {\n                    Utils.openFile(destination);\n                }\n            } else {\n                destination.delete();\n            }\n            logger.output(\"\"); \r\n        }\n    }\n","realPath":"ide/mercurial/src/org/netbeans/modules/mercurial/ui/diff/ExportDiffChangesAction.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2021-09-05 14:09:38","commitOrder":2,"curCode":"    public void exportDiff (List<Setup> setups, File destination, File root, SvnProgressSupport progress) {\n        if (root == null) {\n            NotifyDescriptor nd = new NotifyDescriptor(\n                    NbBundle.getMessage(ExportDiffAction.class, \"MSG_BadSelection_Prompt\"), \n                    NbBundle.getMessage(ExportDiffAction.class, \"MSG_BadSelection_Title\"), \n                    NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);\n            DialogDisplayer.getDefault().notify(nd);\n            return;\n        }\n        boolean success = false;\n        OutputStream out = null;\n        int exportedFiles = 0;\n\n        try {\n            String sep = System.getProperty(\"line.separator\"); \r\n            out = new BufferedOutputStream(new FileOutputStream(destination));\n            \r\n            out.write((\"# This patch file was generated by NetBeans IDE\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Following Index: paths are relative to: \" + root.getAbsolutePath() + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch can be applied using context Tools: Patch action on respective folder.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# It uses platform neutral UTF-8 encoding and \\\\n newlines.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Above lines and this line are ignored by the patching process.\" + sep).getBytes(\"utf8\"));  \r\n\n\n            Collections.sort(setups, new Comparator<Setup>() {\n                @Override\n                public int compare(Setup o1, Setup o2) {\n                    return o1.getBaseFile().compareTo(o2.getBaseFile());\n                }\n            });\n            Iterator<Setup> it = setups.iterator();\n            int i = 0;\n            while (it.hasNext()) {\n                Setup setup = it.next();\n                File file = setup.getBaseFile();                \n                if (file.isDirectory()) continue;\n                try {            \n                    progress.setRepositoryRoot(SvnUtils.getRepositoryRootUrl(file));\n                } catch (SVNClientException ex) {\n                    SvnClientExceptionHandler.notifyException(ex, true, true);\n                    return;\n                }                           \n                progress.setDisplayName(file.getName());\n\n                String index = \"Index: \";   \r\n                String rootPath = root.getAbsolutePath();\n                String filePath = file.getAbsolutePath();\n                String relativePath = filePath;\n                if (filePath.startsWith(rootPath)) {\n                    relativePath = filePath.substring(rootPath.length() + 1).replace(File.separatorChar, '/');\n                    index += relativePath + sep;\n                    out.write(index.getBytes(\"utf8\")); \r\n                }\n                exportDiff(setup, relativePath, out);\n                i++;\n            }\n\n            exportedFiles = i;\n            success = true;\n        } catch (IOException ex) {\n            SvnClientExceptionHandler.notifyException(new Exception(NbBundle.getMessage(ExportDiffAction.class, \"BK3003\", \r\n                    ex.getLocalizedMessage()), ex), true, false);\n        } finally {\n            if (out != null) {\n                try {\n                    out.flush();\n                    out.close();\n                } catch (IOException alreadyClsoed) {\n                }\n            }\n            if (success) {\n                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ExportDiffAction.class, \"BK3004\", Integer.valueOf(exportedFiles)));\n                if (exportedFiles == 0) {\n                    destination.delete();\n                } else {\n                    Utils.openFile(FileUtil.normalizeFile(destination));\n                }\n            } else {\n                destination.delete();\n            }\n\n        }\n    }\n","date":"2021-09-05 14:09:38","endLine":279,"groupId":"124387","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"exportDiff","params":"(List<Setup>setups@Filedestination@Fileroot@SvnProgressSupportprogress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/22/0afd5070b760041cdd20affd4ce255516c95f9.src","preCode":"    public void exportDiff (List<Setup> setups, File destination, File root, SvnProgressSupport progress) {\n        if (root == null) {\n            NotifyDescriptor nd = new NotifyDescriptor(\n                    NbBundle.getMessage(ExportDiffAction.class, \"MSG_BadSelection_Prompt\"), \n                    NbBundle.getMessage(ExportDiffAction.class, \"MSG_BadSelection_Title\"), \n                    NotifyDescriptor.DEFAULT_OPTION, NotifyDescriptor.ERROR_MESSAGE, null, null);\n            DialogDisplayer.getDefault().notify(nd);\n            return;\n        }\n        boolean success = false;\n        OutputStream out = null;\n        int exportedFiles = 0;\n\n        try {\n            String sep = System.getProperty(\"line.separator\"); \r\n            out = new BufferedOutputStream(new FileOutputStream(destination));\n            \r\n            out.write((\"# This patch file was generated by NetBeans IDE\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Following Index: paths are relative to: \" + root.getAbsolutePath() + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# This patch can be applied using context Tools: Patch action on respective folder.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# It uses platform neutral UTF-8 encoding and \\\\n newlines.\" + sep).getBytes(\"utf8\"));  \r\n            out.write((\"# Above lines and this line are ignored by the patching process.\" + sep).getBytes(\"utf8\"));  \r\n\n\n            Collections.sort(setups, new Comparator<Setup>() {\n                @Override\n                public int compare(Setup o1, Setup o2) {\n                    return o1.getBaseFile().compareTo(o2.getBaseFile());\n                }\n            });\n            Iterator<Setup> it = setups.iterator();\n            int i = 0;\n            while (it.hasNext()) {\n                Setup setup = it.next();\n                File file = setup.getBaseFile();                \n                if (file.isDirectory()) continue;\n                try {            \n                    progress.setRepositoryRoot(SvnUtils.getRepositoryRootUrl(file));\n                } catch (SVNClientException ex) {\n                    SvnClientExceptionHandler.notifyException(ex, true, true);\n                    return;\n                }                           \n                progress.setDisplayName(file.getName());\n\n                String index = \"Index: \";   \r\n                String rootPath = root.getAbsolutePath();\n                String filePath = file.getAbsolutePath();\n                String relativePath = filePath;\n                if (filePath.startsWith(rootPath)) {\n                    relativePath = filePath.substring(rootPath.length() + 1).replace(File.separatorChar, '/');\n                    index += relativePath + sep;\n                    out.write(index.getBytes(\"utf8\")); \r\n                }\n                exportDiff(setup, relativePath, out);\n                i++;\n            }\n\n            exportedFiles = i;\n            success = true;\n        } catch (IOException ex) {\n            SvnClientExceptionHandler.notifyException(new Exception(NbBundle.getMessage(ExportDiffAction.class, \"BK3003\", \r\n                    ex.getLocalizedMessage()), ex), true, false);\n        } finally {\n            if (out != null) {\n                try {\n                    out.flush();\n                    out.close();\n                } catch (IOException alreadyClsoed) {\n                }\n            }\n            if (success) {\n                StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ExportDiffAction.class, \"BK3004\", new Integer(exportedFiles)));\n                if (exportedFiles == 0) {\n                    destination.delete();\n                } else {\n                    Utils.openFile(FileUtil.normalizeFile(destination));\n                }\n            } else {\n                destination.delete();\n            }\n\n        }\n    }\n","realPath":"ide/subversion/src/org/netbeans/modules/subversion/ui/diff/ExportDiffAction.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"cfcb5948052f093b3aa713183d016cb459e81e9a","commitMessage":"@@@[NETBEANS-5976] - cleanup Integer deprecation warnings (#3154)\n\nIn Java 9. \n\nnew Integer()\n\nhas been deprecated..\n\n   [repeat] /home/bwalker/src/netbeans/nbi/engine/src/org/netbeans/installer/wizard/components/actions/InstallAction.java:183: warning: [deprecation] Integer(int) in Integer has been deprecated\n   [repeat]                              new Integer(INSTALLATION_ERROR_CODE));\n   [repeat]                              ^\n\nThere are a LOT of these.  so I'm staging the changes so they are more manageable. In addition.  these\nchanges do not change behavior for legacy Java runtime environments. But.  in Java 9.  and afterwards. \nthese changes can provide a possible speedup..","date":"2021-09-05 14:09:38","modifiedFileCount":"121","status":"M","submitter":"Brad Walker"}]
