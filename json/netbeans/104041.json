[{"authorTime":"2018-09-12 19:37:42","codes":[{"authorDate":"2018-08-26 22:43:11","commitOrder":2,"curCode":"    private void handleScript(Snapshot snapshot, TokenSequence<HTMLTokenId> ts, JsAnalyzerState state, List<Embedding> embeddings) {\n        String scriptType = (String) ts.token().getProperty(HTMLTokenId.SCRIPT_TYPE_TOKEN_PROPERTY);\n        if (scriptType == null || JS_MIMETYPE.equals(scriptType) || BABEL_MIMETYPE.equals(scriptType)) {\n            state.in_javascript = true;\n            \r\n            int sourceStart = ts.offset();\n            String text = ts.token().text().toString();\n            List<EmbeddingPosition> jsEmbeddings = extractJsEmbeddings(text, sourceStart);\n            for (EmbeddingPosition embedding : jsEmbeddings) {\n                embeddings.addAll(createEmbedding(snapshot, embedding.getOffset(), embedding.getLength()));\n            }\n        }\n    }\n","date":"2018-08-26 22:43:11","endLine":223,"groupId":"44711","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleScript","params":"(Snapshotsnapshot@TokenSequence<HTMLTokenId>ts@JsAnalyzerStatestate@List<Embedding>embeddings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/da/04c95a31626978968876e20eb38c7e5ed21999.src","preCode":"    private void handleScript(Snapshot snapshot, TokenSequence<HTMLTokenId> ts, JsAnalyzerState state, List<Embedding> embeddings) {\n        String scriptType = (String) ts.token().getProperty(HTMLTokenId.SCRIPT_TYPE_TOKEN_PROPERTY);\n        if (scriptType == null || JS_MIMETYPE.equals(scriptType) || BABEL_MIMETYPE.equals(scriptType)) {\n            state.in_javascript = true;\n            \r\n            int sourceStart = ts.offset();\n            String text = ts.token().text().toString();\n            List<EmbeddingPosition> jsEmbeddings = extractJsEmbeddings(text, sourceStart);\n            for (EmbeddingPosition embedding : jsEmbeddings) {\n                embeddings.addAll(createEmbedding(snapshot, embedding.getOffset(), embedding.getLength()));\n            }\n        }\n    }\n","realPath":"ide/html.editor/src/org/netbeans/modules/html/editor/embedding/JsEmbeddingProvider.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"NB"},{"authorDate":"2018-09-12 19:37:42","commitOrder":2,"curCode":"    private static void extractJavaScriptFromHtml(Snapshot snapshot, TokenSequence<? extends HTMLTokenId> ts, JsAnalyzerState state, List<Embedding> embeddings) {\n        \r\n        \r\n        \r\n        ts.moveStart();\n        tokens:\n        while (ts.moveNext()) {\n            Token<? extends HTMLTokenId> htmlToken = ts.token();\n            HTMLTokenId htmlId = htmlToken.id();\n            if (htmlId == HTMLTokenId.SCRIPT) {\n                String scriptType = (String)htmlToken.getProperty(HTMLTokenId.SCRIPT_TYPE_TOKEN_PROPERTY);\n                if(scriptType == null || \"text/javascript\".equals(scriptType)) {\n                    state.in_javascript = true;\n                    \r\n                    int sourceStart = ts.offset();\n                    String text = htmlToken.text().toString();\n                    List<EmbeddingPosition> jsEmbeddings = extractJsEmbeddings(text, sourceStart);\n                    for (EmbeddingPosition embedding : jsEmbeddings) {\n                        embeddings.add(snapshot.create(embedding.getOffset(), embedding.getLength(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n                    }\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n\r\n\r\n\r\n                }\n            } else if (htmlId == HTMLTokenId.TAG_OPEN) {\n                String text = htmlToken.text().toString();\n\n                \r\n                \r\n                \r\n                if (\"script\".equals(text)) {\n                    \r\n                    \r\n                    \r\n                    TokenSequence<? extends HTMLTokenId> ets = ts.subSequence(ts.offset());\n                    ets.moveStart();\n                    boolean foundSrc = false;\n                    boolean foundType = false;\n                    String type = null;\n                    String src = null;\n                    while (ets.moveNext()) {\n                        Token<? extends HTMLTokenId> t = ets.token();\n                        HTMLTokenId id = t.id();\n                        \r\n                        \r\n                        \r\n                        if (id == HTMLTokenId.TAG_CLOSE_SYMBOL) {\n                            break;\n                        } else if (foundSrc || foundType) {\n                            if (id == HTMLTokenId.ARGUMENT) {\n                                break;\n                            } else if (id == HTMLTokenId.VALUE) {\n                                \r\n                                if (foundSrc) {\n                                    src = t.toString();\n                                } else {\n                                    assert foundType;\n                                    type = t.toString();\n                                }\n                                foundSrc = false;\n                                foundType = false;\n                            }\n                        } else if (id == HTMLTokenId.ARGUMENT) {\n                            String val = t.toString();\n                            if (\"src\".equals(val)) {\n                                foundSrc = true;\n                            } else if (\"type\".equals(val)) {\n                                foundType = true;\n                            }\n                        }\n                    }\n                    if (src != null) {\n                        if (type == null || type.toLowerCase().indexOf(\"javascript\") != -1) {\n                            if (src.length() > 2 && src.startsWith(\"\\\"\") && src.endsWith(\"\\\"\")) {\n                                src = src.substring(1, src.length() - 1);\n                            }\n                            if (src.length() > 2 && src.startsWith(\"'\") && src.endsWith(\"'\")) {\n                                src = src.substring(1, src.length() - 1);\n                            }\n\n                            \r\n                            String insertText = NETBEANS_IMPORT_FILE + \"('\" + src + \"');\\n\"; \r\n                            embeddings.add(snapshot.create(insertText, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                        }\n                    }\n                }\n\n            } else if (state.in_javascript && htmlId == HTMLTokenId.TEXT) {\n                embeddings.add(snapshot.create(ts.offset(), htmlToken.length(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n            } else if (htmlId == HTMLTokenId.VALUE_JAVASCRIPT) {\n\n                int sourceStart = ts.offset();\n                int sourceEnd = sourceStart + ts.token().length();\n\n                if (!state.in_inlined_javascript) {\n                    \r\n\n                    String value = htmlToken.text().toString();\n                    \r\n                    if (value.length() > 0) {\n                        char fch = value.charAt(0); \r\n                        if (fch == '\\'' || fch == '\"') {\n                            state.opening_quotation_stripped = true;\n                            sourceStart++; \r\n                        }\n                    }\n\n                    \r\n                    \r\n                    \r\n                    \r\n                    embeddings.add(snapshot.create(\"(function(){\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                }\n\n                state.in_inlined_javascript = true;\n\n                state.lastInlinedJavascriptToken = ts.token();\n                state.lastInlinedJavscriptEmbedding = snapshot.create(sourceStart, sourceEnd - sourceStart, JsTokenId.JAVASCRIPT_MIME_TYPE);\n\n                \r\n                embeddings.add(state.lastInlinedJavscriptEmbedding);\n\n                state.inlined_javascript_pieces++;\n\n            } else if (state.in_inlined_javascript && htmlId != HTMLTokenId.VALUE_JAVASCRIPT) {\n\n                \r\n                \r\n                \r\n\n                assert state.lastInlinedJavscriptEmbedding != null;\n                assert state.lastInlinedJavascriptToken != null;\n\n                int sourceStart = state.lastInlinedJavascriptToken.offset(snapshot.getTokenHierarchy());\n                int sourceLength = state.lastInlinedJavascriptToken.length();\n                CharSequence value = state.lastInlinedJavascriptToken.text();\n\n                \r\n                if (state.opening_quotation_stripped) {\n                    if (value.length() > 0) {\n                        char fch = value.charAt(value.length() - 1);\n                        if (fch == '\\'' || fch == '\"') {\n                            sourceLength--;\n\n                            \r\n                            \r\n                            if (state.inlined_javascript_pieces == 1) {\n                                sourceStart++;\n                                sourceLength--;\n                            }\n\n                            \r\n                            \r\n                            boolean removed = embeddings.remove(state.lastInlinedJavscriptEmbedding);\n                            assert removed;\n\n                            \r\n                            embeddings.add(snapshot.create(sourceStart, sourceLength, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                        }\n                    }\n                }\n\n                \r\n                state.in_inlined_javascript = false;\n                state.opening_quotation_stripped = false;\n                state.lastInlinedJavascriptToken = null;\n                state.lastInlinedJavscriptEmbedding = null;\n                state.inlined_javascript_pieces = 0;\n\n                \r\n                embeddings.add(snapshot.create(\"\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n\n            } else if (htmlId == HTMLTokenId.TAG_CLOSE && \"script\".equals(htmlToken.toString())) {\n                embeddings.add(snapshot.create(\"\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n            } else if (htmlId == HTMLTokenId.EL_OPEN_DELIMITER) {\n                \r\n                String mimetype = (String) ts.token().getProperty(\"contentMimeType\"); \r\n                if (mimetype != null && \"text/javascript\".equals(mimetype)) {\n                    embeddings.add(snapshot.create(\"(function(){\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n\n                    \r\n                    if (ts.moveNext()) {\n                        Token<? extends HTMLTokenId> token = ts.token();\n                        if (token.id() == HTMLTokenId.EL_CONTENT) {\n                            \r\n                            embeddings.add(snapshot.create(ts.offset(), ts.token().length(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n                            embeddings.add(snapshot.create(\";\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                        } else if (token.id() == HTMLTokenId.EL_CLOSE_DELIMITER) {\n                            \r\n                            embeddings.add(snapshot.create(ts.offset(), 0, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                            embeddings.add(snapshot.create(\";\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                        }\n                    }\n                }\n            } else {\n                \r\n                \r\n                state.in_javascript = false;\n            }\n        }\n    }\n","date":"2018-09-12 19:37:42","endLine":899,"groupId":"61872","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"extractJavaScriptFromHtml","params":"(Snapshotsnapshot@TokenSequence<?extendsHTMLTokenId>ts@JsAnalyzerStatestate@List<Embedding>embeddings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/d7/0dc56912161d8d45f2999c8e11c8792a784ddd.src","preCode":"    private static void extractJavaScriptFromHtml(Snapshot snapshot, TokenSequence<? extends HTMLTokenId> ts, JsAnalyzerState state, List<Embedding> embeddings) {\n        \r\n        \r\n        \r\n        ts.moveStart();\n        tokens:\n        while (ts.moveNext()) {\n            Token<? extends HTMLTokenId> htmlToken = ts.token();\n            HTMLTokenId htmlId = htmlToken.id();\n            if (htmlId == HTMLTokenId.SCRIPT) {\n                String scriptType = (String)htmlToken.getProperty(HTMLTokenId.SCRIPT_TYPE_TOKEN_PROPERTY);\n                if(scriptType == null || \"text/javascript\".equals(scriptType)) {\n                    state.in_javascript = true;\n                    \r\n                    int sourceStart = ts.offset();\n                    String text = htmlToken.text().toString();\n                    List<EmbeddingPosition> jsEmbeddings = extractJsEmbeddings(text, sourceStart);\n                    for (EmbeddingPosition embedding : jsEmbeddings) {\n                        embeddings.add(snapshot.create(embedding.getOffset(), embedding.getLength(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n                    }\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n\r\n\r\n\r\n                }\n            } else if (htmlId == HTMLTokenId.TAG_OPEN) {\n                String text = htmlToken.text().toString();\n\n                \r\n                \r\n                \r\n                if (\"script\".equals(text)) {\n                    \r\n                    \r\n                    \r\n                    TokenSequence<? extends HTMLTokenId> ets = ts.subSequence(ts.offset());\n                    ets.moveStart();\n                    boolean foundSrc = false;\n                    boolean foundType = false;\n                    String type = null;\n                    String src = null;\n                    while (ets.moveNext()) {\n                        Token<? extends HTMLTokenId> t = ets.token();\n                        HTMLTokenId id = t.id();\n                        \r\n                        \r\n                        \r\n                        if (id == HTMLTokenId.TAG_CLOSE_SYMBOL) {\n                            break;\n                        } else if (foundSrc || foundType) {\n                            if (id == HTMLTokenId.ARGUMENT) {\n                                break;\n                            } else if (id == HTMLTokenId.VALUE) {\n                                \r\n                                if (foundSrc) {\n                                    src = t.toString();\n                                } else {\n                                    assert foundType;\n                                    type = t.toString();\n                                }\n                                foundSrc = false;\n                                foundType = false;\n                            }\n                        } else if (id == HTMLTokenId.ARGUMENT) {\n                            String val = t.toString();\n                            if (\"src\".equals(val)) {\n                                foundSrc = true;\n                            } else if (\"type\".equals(val)) {\n                                foundType = true;\n                            }\n                        }\n                    }\n                    if (src != null) {\n                        if (type == null || type.toLowerCase().indexOf(\"javascript\") != -1) {\n                            if (src.length() > 2 && src.startsWith(\"\\\"\") && src.endsWith(\"\\\"\")) {\n                                src = src.substring(1, src.length() - 1);\n                            }\n                            if (src.length() > 2 && src.startsWith(\"'\") && src.endsWith(\"'\")) {\n                                src = src.substring(1, src.length() - 1);\n                            }\n\n                            \r\n                            String insertText = NETBEANS_IMPORT_FILE + \"('\" + src + \"');\\n\"; \r\n                            embeddings.add(snapshot.create(insertText, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                        }\n                    }\n                }\n\n            } else if (state.in_javascript && htmlId == HTMLTokenId.TEXT) {\n                embeddings.add(snapshot.create(ts.offset(), htmlToken.length(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n            } else if (htmlId == HTMLTokenId.VALUE_JAVASCRIPT) {\n\n                int sourceStart = ts.offset();\n                int sourceEnd = sourceStart + ts.token().length();\n\n                if (!state.in_inlined_javascript) {\n                    \r\n\n                    String value = htmlToken.text().toString();\n                    \r\n                    if (value.length() > 0) {\n                        char fch = value.charAt(0); \r\n                        if (fch == '\\'' || fch == '\"') {\n                            state.opening_quotation_stripped = true;\n                            sourceStart++; \r\n                        }\n                    }\n\n                    \r\n                    \r\n                    \r\n                    \r\n                    embeddings.add(snapshot.create(\"(function(){\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                }\n\n                state.in_inlined_javascript = true;\n\n                state.lastInlinedJavascriptToken = ts.token();\n                state.lastInlinedJavscriptEmbedding = snapshot.create(sourceStart, sourceEnd - sourceStart, JsTokenId.JAVASCRIPT_MIME_TYPE);\n\n                \r\n                embeddings.add(state.lastInlinedJavscriptEmbedding);\n\n                state.inlined_javascript_pieces++;\n\n            } else if (state.in_inlined_javascript && htmlId != HTMLTokenId.VALUE_JAVASCRIPT) {\n\n                \r\n                \r\n                \r\n\n                assert state.lastInlinedJavscriptEmbedding != null;\n                assert state.lastInlinedJavascriptToken != null;\n\n                int sourceStart = state.lastInlinedJavascriptToken.offset(snapshot.getTokenHierarchy());\n                int sourceLength = state.lastInlinedJavascriptToken.length();\n                CharSequence value = state.lastInlinedJavascriptToken.text();\n\n                \r\n                if (state.opening_quotation_stripped) {\n                    if (value.length() > 0) {\n                        char fch = value.charAt(value.length() - 1);\n                        if (fch == '\\'' || fch == '\"') {\n                            sourceLength--;\n\n                            \r\n                            \r\n                            if (state.inlined_javascript_pieces == 1) {\n                                sourceStart++;\n                                sourceLength--;\n                            }\n\n                            \r\n                            \r\n                            boolean removed = embeddings.remove(state.lastInlinedJavscriptEmbedding);\n                            assert removed;\n\n                            \r\n                            embeddings.add(snapshot.create(sourceStart, sourceLength, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                        }\n                    }\n                }\n\n                \r\n                state.in_inlined_javascript = false;\n                state.opening_quotation_stripped = false;\n                state.lastInlinedJavascriptToken = null;\n                state.lastInlinedJavscriptEmbedding = null;\n                state.inlined_javascript_pieces = 0;\n\n                \r\n                embeddings.add(snapshot.create(\"\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n\n            } else if (htmlId == HTMLTokenId.TAG_CLOSE && \"script\".equals(htmlToken.toString())) {\n                embeddings.add(snapshot.create(\"\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n            } else if (htmlId == HTMLTokenId.EL_OPEN_DELIMITER) {\n                \r\n                String mimetype = (String) ts.token().getProperty(\"contentMimeType\"); \r\n                if (mimetype != null && \"text/javascript\".equals(mimetype)) {\n                    embeddings.add(snapshot.create(\"(function(){\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n\n                    \r\n                    if (ts.moveNext()) {\n                        Token<? extends HTMLTokenId> token = ts.token();\n                        if (token.id() == HTMLTokenId.EL_CONTENT) {\n                            \r\n                            embeddings.add(snapshot.create(ts.offset(), ts.token().length(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n                            embeddings.add(snapshot.create(\";\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                        } else if (token.id() == HTMLTokenId.EL_CLOSE_DELIMITER) {\n                            \r\n                            embeddings.add(snapshot.create(ts.offset(), 0, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                            embeddings.add(snapshot.create(\";\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                        }\n                    }\n                }\n            } else {\n                \r\n                \r\n                state.in_javascript = false;\n            }\n        }\n    }\n","realPath":"webcommon/javascript2.editor/src/org/netbeans/modules/javascript2/editor/embedding/JsEmbeddingProvider.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":691,"status":"B"}],"commitId":"965e06ce5c3162af2e5fa2189f77dc6649228876","commitMessage":"@@@Merge pull request #862 from thilina01/netbeans-1174-move-webcommon-cluster\n\n[NETBEANS-1174] Move webcommon cluster","date":"2018-09-12 19:37:42","modifiedFileCount":"0","status":"M","submitter":"Geertjan Wielenga"},{"authorTime":"2020-06-22 22:46:45","codes":[{"authorDate":"2020-06-22 22:46:45","commitOrder":3,"curCode":"    private void handleScript(Snapshot snapshot, TokenSequence<HTMLTokenId> ts, JsAnalyzerState state, List<Embedding> embeddings) {\n        String scriptType = (String) ts.token().getProperty(HTMLTokenId.SCRIPT_TYPE_TOKEN_PROPERTY);\n        if (isValidScriptTypeAttributeValue(scriptType)) {\n            state.in_javascript = true;\n            \r\n            int sourceStart = ts.offset();\n            String text = ts.token().text().toString();\n            List<EmbeddingPosition> jsEmbeddings = extractJsEmbeddings(text, sourceStart);\n            for (EmbeddingPosition embedding : jsEmbeddings) {\n                embeddings.addAll(createEmbedding(snapshot, embedding.getOffset(), embedding.getLength()));\n            }\n        }\n    }\n","date":"2020-06-22 22:46:45","endLine":224,"groupId":"104041","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"handleScript","params":"(Snapshotsnapshot@TokenSequence<HTMLTokenId>ts@JsAnalyzerStatestate@List<Embedding>embeddings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/5c/1b8b86ddbda05102c0ba45c1068ada242a6600.src","preCode":"    private void handleScript(Snapshot snapshot, TokenSequence<HTMLTokenId> ts, JsAnalyzerState state, List<Embedding> embeddings) {\n        String scriptType = (String) ts.token().getProperty(HTMLTokenId.SCRIPT_TYPE_TOKEN_PROPERTY);\n        if (scriptType == null || JS_MIMETYPE.equals(scriptType) || BABEL_MIMETYPE.equals(scriptType)) {\n            state.in_javascript = true;\n            \r\n            int sourceStart = ts.offset();\n            String text = ts.token().text().toString();\n            List<EmbeddingPosition> jsEmbeddings = extractJsEmbeddings(text, sourceStart);\n            for (EmbeddingPosition embedding : jsEmbeddings) {\n                embeddings.addAll(createEmbedding(snapshot, embedding.getOffset(), embedding.getLength()));\n            }\n        }\n    }\n","realPath":"ide/html.editor/src/org/netbeans/modules/html/editor/embedding/JsEmbeddingProvider.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2020-06-22 22:46:45","commitOrder":3,"curCode":"    private static void extractJavaScriptFromHtml(Snapshot snapshot, TokenSequence<? extends HTMLTokenId> ts, JsAnalyzerState state, List<Embedding> embeddings) {\n        \r\n        \r\n        \r\n        ts.moveStart();\n        tokens:\n        while (ts.moveNext()) {\n            Token<? extends HTMLTokenId> htmlToken = ts.token();\n            HTMLTokenId htmlId = htmlToken.id();\n            if (htmlId == HTMLTokenId.SCRIPT) {\n                String scriptType = (String)htmlToken.getProperty(HTMLTokenId.SCRIPT_TYPE_TOKEN_PROPERTY);\n                if(scriptType == null || JS_MIMETYPE.equals(scriptType) || SCRIPT_TYPE_MODULE.equals(scriptType)) {\n                    state.in_javascript = true;\n                    \r\n                    int sourceStart = ts.offset();\n                    String text = htmlToken.text().toString();\n                    List<EmbeddingPosition> jsEmbeddings = extractJsEmbeddings(text, sourceStart);\n                    for (EmbeddingPosition embedding : jsEmbeddings) {\n                        embeddings.add(snapshot.create(embedding.getOffset(), embedding.getLength(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n                    }\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n\r\n\r\n\r\n                }\n            } else if (htmlId == HTMLTokenId.TAG_OPEN) {\n                String text = htmlToken.text().toString();\n\n                \r\n                \r\n                \r\n                if (\"script\".equals(text)) {\n                    \r\n                    \r\n                    \r\n                    TokenSequence<? extends HTMLTokenId> ets = ts.subSequence(ts.offset());\n                    ets.moveStart();\n                    boolean foundSrc = false;\n                    boolean foundType = false;\n                    String type = null;\n                    String src = null;\n                    while (ets.moveNext()) {\n                        Token<? extends HTMLTokenId> t = ets.token();\n                        HTMLTokenId id = t.id();\n                        \r\n                        \r\n                        \r\n                        if (id == HTMLTokenId.TAG_CLOSE_SYMBOL) {\n                            break;\n                        } else if (foundSrc || foundType) {\n                            if (id == HTMLTokenId.ARGUMENT) {\n                                break;\n                            } else if (id == HTMLTokenId.VALUE) {\n                                \r\n                                if (foundSrc) {\n                                    src = t.toString();\n                                } else {\n                                    assert foundType;\n                                    type = t.toString();\n                                }\n                                foundSrc = false;\n                                foundType = false;\n                            }\n                        } else if (id == HTMLTokenId.ARGUMENT) {\n                            String val = t.toString();\n                            if (\"src\".equals(val)) {\n                                foundSrc = true;\n                            } else if (\"type\".equals(val)) {\n                                foundType = true;\n                            }\n                        }\n                    }\n                    if (src != null) {\n                        if (type == null || type.toLowerCase().indexOf(\"javascript\") != -1) {\n                            if (src.length() > 2 && src.startsWith(\"\\\"\") && src.endsWith(\"\\\"\")) {\n                                src = src.substring(1, src.length() - 1);\n                            }\n                            if (src.length() > 2 && src.startsWith(\"'\") && src.endsWith(\"'\")) {\n                                src = src.substring(1, src.length() - 1);\n                            }\n\n                            \r\n                            String insertText = NETBEANS_IMPORT_FILE + \"('\" + src + \"');\\n\"; \r\n                            embeddings.add(snapshot.create(insertText, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                        }\n                    }\n                }\n\n            } else if (state.in_javascript && htmlId == HTMLTokenId.TEXT) {\n                embeddings.add(snapshot.create(ts.offset(), htmlToken.length(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n            } else if (htmlId == HTMLTokenId.VALUE_JAVASCRIPT) {\n\n                int sourceStart = ts.offset();\n                int sourceEnd = sourceStart + ts.token().length();\n\n                if (!state.in_inlined_javascript) {\n                    \r\n\n                    String value = htmlToken.text().toString();\n                    \r\n                    if (value.length() > 0) {\n                        char fch = value.charAt(0); \r\n                        if (fch == '\\'' || fch == '\"') {\n                            state.opening_quotation_stripped = true;\n                            sourceStart++; \r\n                        }\n                    }\n\n                    \r\n                    \r\n                    \r\n                    \r\n                    embeddings.add(snapshot.create(\"(function(){\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                }\n\n                state.in_inlined_javascript = true;\n\n                state.lastInlinedJavascriptToken = ts.token();\n                state.lastInlinedJavscriptEmbedding = snapshot.create(sourceStart, sourceEnd - sourceStart, JsTokenId.JAVASCRIPT_MIME_TYPE);\n\n                \r\n                embeddings.add(state.lastInlinedJavscriptEmbedding);\n\n                state.inlined_javascript_pieces++;\n\n            } else if (state.in_inlined_javascript && htmlId != HTMLTokenId.VALUE_JAVASCRIPT) {\n\n                \r\n                \r\n                \r\n\n                assert state.lastInlinedJavscriptEmbedding != null;\n                assert state.lastInlinedJavascriptToken != null;\n\n                int sourceStart = state.lastInlinedJavascriptToken.offset(snapshot.getTokenHierarchy());\n                int sourceLength = state.lastInlinedJavascriptToken.length();\n                CharSequence value = state.lastInlinedJavascriptToken.text();\n\n                \r\n                if (state.opening_quotation_stripped) {\n                    if (value.length() > 0) {\n                        char fch = value.charAt(value.length() - 1);\n                        if (fch == '\\'' || fch == '\"') {\n                            sourceLength--;\n\n                            \r\n                            \r\n                            if (state.inlined_javascript_pieces == 1) {\n                                sourceStart++;\n                                sourceLength--;\n                            }\n\n                            \r\n                            \r\n                            boolean removed = embeddings.remove(state.lastInlinedJavscriptEmbedding);\n                            assert removed;\n\n                            \r\n                            embeddings.add(snapshot.create(sourceStart, sourceLength, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                        }\n                    }\n                }\n\n                \r\n                state.in_inlined_javascript = false;\n                state.opening_quotation_stripped = false;\n                state.lastInlinedJavascriptToken = null;\n                state.lastInlinedJavscriptEmbedding = null;\n                state.inlined_javascript_pieces = 0;\n\n                \r\n                embeddings.add(snapshot.create(\"\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n\n            } else if (htmlId == HTMLTokenId.TAG_CLOSE && \"script\".equals(htmlToken.toString())) {\n                embeddings.add(snapshot.create(\"\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n            } else if (htmlId == HTMLTokenId.EL_OPEN_DELIMITER) {\n                \r\n                String mimetype = (String) ts.token().getProperty(\"contentMimeType\"); \r\n                if (mimetype != null && \"text/javascript\".equals(mimetype)) {\n                    embeddings.add(snapshot.create(\"(function(){\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n\n                    \r\n                    if (ts.moveNext()) {\n                        Token<? extends HTMLTokenId> token = ts.token();\n                        if (token.id() == HTMLTokenId.EL_CONTENT) {\n                            \r\n                            embeddings.add(snapshot.create(ts.offset(), ts.token().length(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n                            embeddings.add(snapshot.create(\";\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                        } else if (token.id() == HTMLTokenId.EL_CLOSE_DELIMITER) {\n                            \r\n                            embeddings.add(snapshot.create(ts.offset(), 0, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                            embeddings.add(snapshot.create(\";\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                        }\n                    }\n                }\n            } else {\n                \r\n                \r\n                state.in_javascript = false;\n            }\n        }\n    }\n","date":"2020-06-22 22:46:45","endLine":901,"groupId":"104041","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"extractJavaScriptFromHtml","params":"(Snapshotsnapshot@TokenSequence<?extendsHTMLTokenId>ts@JsAnalyzerStatestate@List<Embedding>embeddings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/26/5c94ac376116599e9062f21db6ca9266f0552e.src","preCode":"    private static void extractJavaScriptFromHtml(Snapshot snapshot, TokenSequence<? extends HTMLTokenId> ts, JsAnalyzerState state, List<Embedding> embeddings) {\n        \r\n        \r\n        \r\n        ts.moveStart();\n        tokens:\n        while (ts.moveNext()) {\n            Token<? extends HTMLTokenId> htmlToken = ts.token();\n            HTMLTokenId htmlId = htmlToken.id();\n            if (htmlId == HTMLTokenId.SCRIPT) {\n                String scriptType = (String)htmlToken.getProperty(HTMLTokenId.SCRIPT_TYPE_TOKEN_PROPERTY);\n                if(scriptType == null || \"text/javascript\".equals(scriptType)) {\n                    state.in_javascript = true;\n                    \r\n                    int sourceStart = ts.offset();\n                    String text = htmlToken.text().toString();\n                    List<EmbeddingPosition> jsEmbeddings = extractJsEmbeddings(text, sourceStart);\n                    for (EmbeddingPosition embedding : jsEmbeddings) {\n                        embeddings.add(snapshot.create(embedding.getOffset(), embedding.getLength(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n                    }\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n\r\n\r\n\r\n                }\n            } else if (htmlId == HTMLTokenId.TAG_OPEN) {\n                String text = htmlToken.text().toString();\n\n                \r\n                \r\n                \r\n                if (\"script\".equals(text)) {\n                    \r\n                    \r\n                    \r\n                    TokenSequence<? extends HTMLTokenId> ets = ts.subSequence(ts.offset());\n                    ets.moveStart();\n                    boolean foundSrc = false;\n                    boolean foundType = false;\n                    String type = null;\n                    String src = null;\n                    while (ets.moveNext()) {\n                        Token<? extends HTMLTokenId> t = ets.token();\n                        HTMLTokenId id = t.id();\n                        \r\n                        \r\n                        \r\n                        if (id == HTMLTokenId.TAG_CLOSE_SYMBOL) {\n                            break;\n                        } else if (foundSrc || foundType) {\n                            if (id == HTMLTokenId.ARGUMENT) {\n                                break;\n                            } else if (id == HTMLTokenId.VALUE) {\n                                \r\n                                if (foundSrc) {\n                                    src = t.toString();\n                                } else {\n                                    assert foundType;\n                                    type = t.toString();\n                                }\n                                foundSrc = false;\n                                foundType = false;\n                            }\n                        } else if (id == HTMLTokenId.ARGUMENT) {\n                            String val = t.toString();\n                            if (\"src\".equals(val)) {\n                                foundSrc = true;\n                            } else if (\"type\".equals(val)) {\n                                foundType = true;\n                            }\n                        }\n                    }\n                    if (src != null) {\n                        if (type == null || type.toLowerCase().indexOf(\"javascript\") != -1) {\n                            if (src.length() > 2 && src.startsWith(\"\\\"\") && src.endsWith(\"\\\"\")) {\n                                src = src.substring(1, src.length() - 1);\n                            }\n                            if (src.length() > 2 && src.startsWith(\"'\") && src.endsWith(\"'\")) {\n                                src = src.substring(1, src.length() - 1);\n                            }\n\n                            \r\n                            String insertText = NETBEANS_IMPORT_FILE + \"('\" + src + \"');\\n\"; \r\n                            embeddings.add(snapshot.create(insertText, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                        }\n                    }\n                }\n\n            } else if (state.in_javascript && htmlId == HTMLTokenId.TEXT) {\n                embeddings.add(snapshot.create(ts.offset(), htmlToken.length(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n            } else if (htmlId == HTMLTokenId.VALUE_JAVASCRIPT) {\n\n                int sourceStart = ts.offset();\n                int sourceEnd = sourceStart + ts.token().length();\n\n                if (!state.in_inlined_javascript) {\n                    \r\n\n                    String value = htmlToken.text().toString();\n                    \r\n                    if (value.length() > 0) {\n                        char fch = value.charAt(0); \r\n                        if (fch == '\\'' || fch == '\"') {\n                            state.opening_quotation_stripped = true;\n                            sourceStart++; \r\n                        }\n                    }\n\n                    \r\n                    \r\n                    \r\n                    \r\n                    embeddings.add(snapshot.create(\"(function(){\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                }\n\n                state.in_inlined_javascript = true;\n\n                state.lastInlinedJavascriptToken = ts.token();\n                state.lastInlinedJavscriptEmbedding = snapshot.create(sourceStart, sourceEnd - sourceStart, JsTokenId.JAVASCRIPT_MIME_TYPE);\n\n                \r\n                embeddings.add(state.lastInlinedJavscriptEmbedding);\n\n                state.inlined_javascript_pieces++;\n\n            } else if (state.in_inlined_javascript && htmlId != HTMLTokenId.VALUE_JAVASCRIPT) {\n\n                \r\n                \r\n                \r\n\n                assert state.lastInlinedJavscriptEmbedding != null;\n                assert state.lastInlinedJavascriptToken != null;\n\n                int sourceStart = state.lastInlinedJavascriptToken.offset(snapshot.getTokenHierarchy());\n                int sourceLength = state.lastInlinedJavascriptToken.length();\n                CharSequence value = state.lastInlinedJavascriptToken.text();\n\n                \r\n                if (state.opening_quotation_stripped) {\n                    if (value.length() > 0) {\n                        char fch = value.charAt(value.length() - 1);\n                        if (fch == '\\'' || fch == '\"') {\n                            sourceLength--;\n\n                            \r\n                            \r\n                            if (state.inlined_javascript_pieces == 1) {\n                                sourceStart++;\n                                sourceLength--;\n                            }\n\n                            \r\n                            \r\n                            boolean removed = embeddings.remove(state.lastInlinedJavscriptEmbedding);\n                            assert removed;\n\n                            \r\n                            embeddings.add(snapshot.create(sourceStart, sourceLength, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                        }\n                    }\n                }\n\n                \r\n                state.in_inlined_javascript = false;\n                state.opening_quotation_stripped = false;\n                state.lastInlinedJavascriptToken = null;\n                state.lastInlinedJavscriptEmbedding = null;\n                state.inlined_javascript_pieces = 0;\n\n                \r\n                embeddings.add(snapshot.create(\"\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n\n            } else if (htmlId == HTMLTokenId.TAG_CLOSE && \"script\".equals(htmlToken.toString())) {\n                embeddings.add(snapshot.create(\"\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n            } else if (htmlId == HTMLTokenId.EL_OPEN_DELIMITER) {\n                \r\n                String mimetype = (String) ts.token().getProperty(\"contentMimeType\"); \r\n                if (mimetype != null && \"text/javascript\".equals(mimetype)) {\n                    embeddings.add(snapshot.create(\"(function(){\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n\n                    \r\n                    if (ts.moveNext()) {\n                        Token<? extends HTMLTokenId> token = ts.token();\n                        if (token.id() == HTMLTokenId.EL_CONTENT) {\n                            \r\n                            embeddings.add(snapshot.create(ts.offset(), ts.token().length(), JsTokenId.JAVASCRIPT_MIME_TYPE));\n                            embeddings.add(snapshot.create(\";\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                        } else if (token.id() == HTMLTokenId.EL_CLOSE_DELIMITER) {\n                            \r\n                            embeddings.add(snapshot.create(ts.offset(), 0, JsTokenId.JAVASCRIPT_MIME_TYPE));\n                            embeddings.add(snapshot.create(\";\\n});\\n\", JsTokenId.JAVASCRIPT_MIME_TYPE)); \r\n                        }\n                    }\n                }\n            } else {\n                \r\n                \r\n                state.in_javascript = false;\n            }\n        }\n    }\n","realPath":"webcommon/javascript2.editor/src/org/netbeans/modules/javascript2/editor/embedding/JsEmbeddingProvider.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":693,"status":"M"}],"commitId":"d8fa98fd2061f49df742d2c58e2f66b51f68c507","commitMessage":"@@@Merge pull request #2184 from junichi11/netbeans-4434-script-type-module-cc\n\n[NETBEANS-4434] Code Completion doesn't work when script type attribute value is \"module\"","date":"2020-06-22 22:46:45","modifiedFileCount":"4","status":"M","submitter":"Junichi Yamamoto"}]
