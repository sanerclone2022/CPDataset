[{"authorTime":"2018-08-26 22:43:11","codes":[{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    protected void assertDescriptionMatches(FileObject fileObject,\n            String description, boolean includeTestName, String ext, boolean goldenFileInTestFileDir) throws IOException {\n\n        String goldenFileDir = goldenFileInTestFileDir ?\n            FileUtil.getRelativePath(FileUtil.toFileObject(getDataDir()), fileObject.getParent()) :\n            \"testfiles\";\n\n        File goldenFile = getDataFile(goldenFileDir + \"/\" + fileObject.getNameExt() + (includeTestName ? (\".\" + getName()) : \"\") + ext);\n        if (!goldenFile.exists()) {\n            if (!goldenFile.createNewFile()) {\n                NbTestCase.fail(\"Cannot create file \" + goldenFile);\n            }\n            FileWriter fw = new FileWriter(goldenFile);\n            try {\n                fw.write(description);\n            }\n            finally{\n                fw.close();\n            }\n            NbTestCase.fail(\"Created generated golden file \" + goldenFile + \"\\nPlease re-run the test.\");\n        }\n\n        String expected = readFile(goldenFile);\n\n        \r\n        if (false) { \r\n            if (!expected.equals(description)) {\n                BufferedWriter fw = new BufferedWriter(new FileWriter(\"/tmp/expected.txt\"));\n                fw.write(expected);\n                fw.close();\n                fw = new BufferedWriter(new FileWriter(\"/tmp/actual.txt\"));\n                fw.write(description);\n                fw.close();\n            }\n        }\n\n        final String expectedTrimmed = expected.trim();\n        final String actualTrimmed = description.trim();\n\n        if (expectedTrimmed.equals(actualTrimmed)) {\n            return; \r\n        } else {\n            \r\n            \r\n            final String expectedUnified = expectedTrimmed.replaceAll(\"\\r\", \"\");\n            final String actualUnified = actualTrimmed.replaceAll(\"\\r\", \"\");\n\n            if (expectedUnified.equals(actualUnified)) {\n                return; \r\n            }\n\n            \r\n\n            fail(\"Not matching goldenfile: \" + FileUtil.getFileDisplayName(fileObject) + lineSeparator(2) + getContentDifferences(expectedUnified, actualUnified));\n        }\n    }\n","date":"2018-08-26 22:43:11","endLine":803,"groupId":"11725","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDescriptionMatches","params":"(FileObjectfileObject@Stringdescription@booleanincludeTestName@Stringext@booleangoldenFileInTestFileDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/85/e9adfc49c9673dbeb374dd559a56379c607d6a.src","preCode":"    protected void assertDescriptionMatches(FileObject fileObject,\n            String description, boolean includeTestName, String ext, boolean goldenFileInTestFileDir) throws IOException {\n\n        String goldenFileDir = goldenFileInTestFileDir ?\n            FileUtil.getRelativePath(FileUtil.toFileObject(getDataDir()), fileObject.getParent()) :\n            \"testfiles\";\n\n        File goldenFile = getDataFile(goldenFileDir + \"/\" + fileObject.getNameExt() + (includeTestName ? (\".\" + getName()) : \"\") + ext);\n        if (!goldenFile.exists()) {\n            if (!goldenFile.createNewFile()) {\n                NbTestCase.fail(\"Cannot create file \" + goldenFile);\n            }\n            FileWriter fw = new FileWriter(goldenFile);\n            try {\n                fw.write(description);\n            }\n            finally{\n                fw.close();\n            }\n            NbTestCase.fail(\"Created generated golden file \" + goldenFile + \"\\nPlease re-run the test.\");\n        }\n\n        String expected = readFile(goldenFile);\n\n        \r\n        if (false) { \r\n            if (!expected.equals(description)) {\n                BufferedWriter fw = new BufferedWriter(new FileWriter(\"/tmp/expected.txt\"));\n                fw.write(expected);\n                fw.close();\n                fw = new BufferedWriter(new FileWriter(\"/tmp/actual.txt\"));\n                fw.write(description);\n                fw.close();\n            }\n        }\n\n        final String expectedTrimmed = expected.trim();\n        final String actualTrimmed = description.trim();\n\n        if (expectedTrimmed.equals(actualTrimmed)) {\n            return; \r\n        } else {\n            \r\n            \r\n            final String expectedUnified = expectedTrimmed.replaceAll(\"\\r\", \"\");\n            final String actualUnified = actualTrimmed.replaceAll(\"\\r\", \"\");\n\n            if (expectedUnified.equals(actualUnified)) {\n                return; \r\n            }\n\n            \r\n\n            fail(\"Not matching goldenfile: \" + FileUtil.getFileDisplayName(fileObject) + lineSeparator(2) + getContentDifferences(expectedUnified, actualUnified));\n        }\n    }\n","realPath":"ide/csl.api/test/unit/src/org/netbeans/modules/csl/api/test/CslTestBase.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":748,"status":"B"},{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    protected void assertFileContentsMatches(String relFilePath, String description, boolean includeTestName, String ext) throws Exception {\n        File rubyFile = getDataFile(relFilePath);\n        if (!rubyFile.exists()) {\n            NbTestCase.fail(\"File \" + rubyFile + \" not found.\");\n        }\n\n        File goldenFile = getDataFile(relFilePath + (includeTestName ? (\".\" + getName()) : \"\") + ext);\n        if (!goldenFile.exists()) {\n            if (!goldenFile.createNewFile()) {\n                NbTestCase.fail(\"Cannot create file \" + goldenFile);\n            }\n            FileWriter fw = new FileWriter(goldenFile);\n            try {\n                fw.write(description);\n            }\n            finally{\n                fw.close();\n            }\n            NbTestCase.fail(\"Created generated golden file \" + goldenFile + \"\\nPlease re-run the test.\");\n        }\n\n        String expected = readFile(goldenFile);\n        final String expectedTrimmed = expected.trim();\n        final String actualTrimmed = description.trim();\n\n        if (expectedTrimmed.equals(actualTrimmed)) {\n            return; \r\n        } else {\n            \r\n            \r\n            final String expectedUnified = expectedTrimmed.replaceAll(\"\\r\", \"\");\n            final String actualUnified = actualTrimmed.replaceAll(\"\\r\", \"\");\n\n            if (expectedUnified.equals(actualUnified)) {\n                return; \r\n            }\n\n            \r\n\n            fail(\"Not matching goldenfile: \" + FileUtil.getFileDisplayName(FileUtil.toFileObject(goldenFile)) + lineSeparator(2) + getContentDifferences(expectedUnified, actualUnified));\n        }\n    }\n","date":"2018-08-26 22:43:11","endLine":865,"groupId":"11725","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertFileContentsMatches","params":"(StringrelFilePath@Stringdescription@booleanincludeTestName@Stringext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/85/e9adfc49c9673dbeb374dd559a56379c607d6a.src","preCode":"    protected void assertFileContentsMatches(String relFilePath, String description, boolean includeTestName, String ext) throws Exception {\n        File rubyFile = getDataFile(relFilePath);\n        if (!rubyFile.exists()) {\n            NbTestCase.fail(\"File \" + rubyFile + \" not found.\");\n        }\n\n        File goldenFile = getDataFile(relFilePath + (includeTestName ? (\".\" + getName()) : \"\") + ext);\n        if (!goldenFile.exists()) {\n            if (!goldenFile.createNewFile()) {\n                NbTestCase.fail(\"Cannot create file \" + goldenFile);\n            }\n            FileWriter fw = new FileWriter(goldenFile);\n            try {\n                fw.write(description);\n            }\n            finally{\n                fw.close();\n            }\n            NbTestCase.fail(\"Created generated golden file \" + goldenFile + \"\\nPlease re-run the test.\");\n        }\n\n        String expected = readFile(goldenFile);\n        final String expectedTrimmed = expected.trim();\n        final String actualTrimmed = description.trim();\n\n        if (expectedTrimmed.equals(actualTrimmed)) {\n            return; \r\n        } else {\n            \r\n            \r\n            final String expectedUnified = expectedTrimmed.replaceAll(\"\\r\", \"\");\n            final String actualUnified = actualTrimmed.replaceAll(\"\\r\", \"\");\n\n            if (expectedUnified.equals(actualUnified)) {\n                return; \r\n            }\n\n            \r\n\n            fail(\"Not matching goldenfile: \" + FileUtil.getFileDisplayName(FileUtil.toFileObject(goldenFile)) + lineSeparator(2) + getContentDifferences(expectedUnified, actualUnified));\n        }\n    }\n","realPath":"ide/csl.api/test/unit/src/org/netbeans/modules/csl/api/test/CslTestBase.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":824,"status":"B"}],"commitId":"0f2e98d513deaedccef831ee9cfc08d09f3650b6","commitMessage":"@@@Merge pull request #791 from ralphbenjamin/NETBEANS-1172_move_ide_modules_to_ide_subdirectory\n\n[NETBEANS-1172] move ide modules to ide subdirectory","date":"2018-08-26 22:43:11","modifiedFileCount":"0","status":"B","submitter":"Geertjan Wielenga"},{"authorTime":"2021-06-21 20:39:45","codes":[{"authorDate":"2021-06-21 20:39:45","commitOrder":2,"curCode":"    protected void assertDescriptionMatches(FileObject fileObject,\n            String description, boolean includeTestName, String ext, boolean goldenFileInTestFileDir) throws IOException {\n\n        String goldenFileDir = goldenFileInTestFileDir ?\n            FileUtil.getRelativePath(FileUtil.toFileObject(getDataDir()), fileObject.getParent()) :\n            \"testfiles\";\n\n        File goldenFile = getDataFile(goldenFileDir + \"/\" + fileObject.getNameExt() + (includeTestName ? (\".\" + getName()) : \"\") + ext);\n        if (!goldenFile.exists()) {\n            if (!goldenFile.createNewFile()) {\n                NbTestCase.fail(\"Cannot create file \" + goldenFile);\n            }\n            FileWriter fw = new FileWriter(goldenFile);\n            try {\n                fw.write(description);\n            }\n            finally{\n                fw.close();\n            }\n            NbTestCase.fail(\"Created generated golden file \" + goldenFile + \"\\nPlease re-run the test.\");\n        }\n\n        String expected = readFile(goldenFile);\n\n        \r\n        if (false) { \r\n            if (!expected.equals(description)) {\n                BufferedWriter fw = new BufferedWriter(new FileWriter(\"/tmp/expected.txt\"));\n                fw.write(expected);\n                fw.close();\n                fw = new BufferedWriter(new FileWriter(\"/tmp/actual.txt\"));\n                fw.write(description);\n                fw.close();\n            }\n        }\n\n        final String expectedTrimmed = expected.trim();\n        final String actualTrimmed = description.trim();\n\n        if (expectedTrimmed.equals(actualTrimmed)) {\n            return; \r\n        } else {\n            \r\n            \r\n            final String expectedUnified = expectedTrimmed.replaceAll(\"\\r\", \"\");\n            final String actualUnified = actualTrimmed.replaceAll(\"\\r\", \"\");\n\n            if (expectedUnified.equals(actualUnified)) {\n                return; \r\n            }\n\n            \r\n\n            fail(\"Not matching goldenfile: \" + FileUtil.getFileDisplayName(fileObject) + lineSeparator(2) + getContentDifferences(expectedUnified, actualUnified, false));\n        }\n    }\n","date":"2021-06-21 20:39:45","endLine":909,"groupId":"125527","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertDescriptionMatches","params":"(FileObjectfileObject@Stringdescription@booleanincludeTestName@Stringext@booleangoldenFileInTestFileDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/c5/e399fa7dcc4b3fea4bba94089e4fdb5898cb53.src","preCode":"    protected void assertDescriptionMatches(FileObject fileObject,\n            String description, boolean includeTestName, String ext, boolean goldenFileInTestFileDir) throws IOException {\n\n        String goldenFileDir = goldenFileInTestFileDir ?\n            FileUtil.getRelativePath(FileUtil.toFileObject(getDataDir()), fileObject.getParent()) :\n            \"testfiles\";\n\n        File goldenFile = getDataFile(goldenFileDir + \"/\" + fileObject.getNameExt() + (includeTestName ? (\".\" + getName()) : \"\") + ext);\n        if (!goldenFile.exists()) {\n            if (!goldenFile.createNewFile()) {\n                NbTestCase.fail(\"Cannot create file \" + goldenFile);\n            }\n            FileWriter fw = new FileWriter(goldenFile);\n            try {\n                fw.write(description);\n            }\n            finally{\n                fw.close();\n            }\n            NbTestCase.fail(\"Created generated golden file \" + goldenFile + \"\\nPlease re-run the test.\");\n        }\n\n        String expected = readFile(goldenFile);\n\n        \r\n        if (false) { \r\n            if (!expected.equals(description)) {\n                BufferedWriter fw = new BufferedWriter(new FileWriter(\"/tmp/expected.txt\"));\n                fw.write(expected);\n                fw.close();\n                fw = new BufferedWriter(new FileWriter(\"/tmp/actual.txt\"));\n                fw.write(description);\n                fw.close();\n            }\n        }\n\n        final String expectedTrimmed = expected.trim();\n        final String actualTrimmed = description.trim();\n\n        if (expectedTrimmed.equals(actualTrimmed)) {\n            return; \r\n        } else {\n            \r\n            \r\n            final String expectedUnified = expectedTrimmed.replaceAll(\"\\r\", \"\");\n            final String actualUnified = actualTrimmed.replaceAll(\"\\r\", \"\");\n\n            if (expectedUnified.equals(actualUnified)) {\n                return; \r\n            }\n\n            \r\n\n            fail(\"Not matching goldenfile: \" + FileUtil.getFileDisplayName(fileObject) + lineSeparator(2) + getContentDifferences(expectedUnified, actualUnified));\n        }\n    }\n","realPath":"ide/csl.api/test/unit/src/org/netbeans/modules/csl/api/test/CslTestBase.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":854,"status":"M"},{"authorDate":"2021-06-21 20:39:45","commitOrder":2,"curCode":"    protected void assertFileContentsMatches(String relFilePath, String description, boolean includeTestName, String ext) throws Exception {\n        File rubyFile = getDataFile(relFilePath);\n        if (!rubyFile.exists()) {\n            NbTestCase.fail(\"File \" + rubyFile + \" not found.\");\n        }\n\n        File goldenFile = getDataFile(relFilePath + (includeTestName ? (\".\" + getName()) : \"\") + ext);\n        if (!goldenFile.exists()) {\n            if (!goldenFile.createNewFile()) {\n                NbTestCase.fail(\"Cannot create file \" + goldenFile);\n            }\n            FileWriter fw = new FileWriter(goldenFile);\n            try {\n                fw.write(description);\n            }\n            finally{\n                fw.close();\n            }\n            NbTestCase.fail(\"Created generated golden file \" + goldenFile + \"\\nPlease re-run the test.\");\n        }\n\n        String expected = readFile(goldenFile);\n        final String expectedTrimmed = expected.trim();\n        final String actualTrimmed = description.trim();\n\n        if (expectedTrimmed.equals(actualTrimmed)) {\n            return; \r\n        } else {\n            \r\n            \r\n            final String expectedUnified = expectedTrimmed.replaceAll(\"\\r\", \"\");\n            final String actualUnified = actualTrimmed.replaceAll(\"\\r\", \"\");\n\n            if (expectedUnified.equals(actualUnified)) {\n                return; \r\n            }\n\n            \r\n\n            fail(\"Not matching goldenfile: \" + FileUtil.getFileDisplayName(FileUtil.toFileObject(goldenFile)) + lineSeparator(2) + getContentDifferences(expectedUnified, actualUnified, false));\n        }\n    }\n","date":"2021-06-21 20:39:45","endLine":971,"groupId":"125527","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertFileContentsMatches","params":"(StringrelFilePath@Stringdescription@booleanincludeTestName@Stringext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/c5/e399fa7dcc4b3fea4bba94089e4fdb5898cb53.src","preCode":"    protected void assertFileContentsMatches(String relFilePath, String description, boolean includeTestName, String ext) throws Exception {\n        File rubyFile = getDataFile(relFilePath);\n        if (!rubyFile.exists()) {\n            NbTestCase.fail(\"File \" + rubyFile + \" not found.\");\n        }\n\n        File goldenFile = getDataFile(relFilePath + (includeTestName ? (\".\" + getName()) : \"\") + ext);\n        if (!goldenFile.exists()) {\n            if (!goldenFile.createNewFile()) {\n                NbTestCase.fail(\"Cannot create file \" + goldenFile);\n            }\n            FileWriter fw = new FileWriter(goldenFile);\n            try {\n                fw.write(description);\n            }\n            finally{\n                fw.close();\n            }\n            NbTestCase.fail(\"Created generated golden file \" + goldenFile + \"\\nPlease re-run the test.\");\n        }\n\n        String expected = readFile(goldenFile);\n        final String expectedTrimmed = expected.trim();\n        final String actualTrimmed = description.trim();\n\n        if (expectedTrimmed.equals(actualTrimmed)) {\n            return; \r\n        } else {\n            \r\n            \r\n            final String expectedUnified = expectedTrimmed.replaceAll(\"\\r\", \"\");\n            final String actualUnified = actualTrimmed.replaceAll(\"\\r\", \"\");\n\n            if (expectedUnified.equals(actualUnified)) {\n                return; \r\n            }\n\n            \r\n\n            fail(\"Not matching goldenfile: \" + FileUtil.getFileDisplayName(FileUtil.toFileObject(goldenFile)) + lineSeparator(2) + getContentDifferences(expectedUnified, actualUnified));\n        }\n    }\n","realPath":"ide/csl.api/test/unit/src/org/netbeans/modules/csl/api/test/CslTestBase.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"M"}],"commitId":"cebe93e21109e224c3cea602d4e473c286cca767","commitMessage":"@@@Merge pull request #3001 from sdedic/groovy/lsp-completion\n\nGroovy Code Completion support available through LSP protocol.","date":"2021-06-21 20:39:45","modifiedFileCount":"16","status":"M","submitter":"Svatopluk Dedic"}]
