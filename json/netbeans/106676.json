[{"authorTime":"2018-08-26 22:43:11","codes":[{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    public Enumeration queryEntities(String prefix) {\n        if (entities == null) return org.openide.util.Enumerations.empty();\n        \n        LinkedList list = new LinkedList();\n        Iterator it = entities.iterator();\n        while ( it.hasNext()) {\n            String next = (String) it.next();\n            if (next.startsWith(prefix)) {\n                list.add (new MyEntityReference(next));\n            }\n        }\n\n        \r\n        \n        if (\"lt\".startsWith(prefix)) list.add(new MyEntityReference(\"lt\"));\n        if (\"gt\".startsWith(prefix)) list.add(new MyEntityReference(\"gt\"));\n        if (\"apos\".startsWith(prefix)) list.add(new MyEntityReference(\"apos\"));\n        if (\"quot\".startsWith(prefix)) list.add(new MyEntityReference(\"quot\"));\n        if (\"amp\".startsWith(prefix)) list.add(new MyEntityReference(\"amp\"));\n        \n        Collections.sort(list, new Comparator() {\n            public int compare(Object o1, Object o2) {\n                return ((MyEntityReference)o1).getNodeName().compareTo(((MyEntityReference)o2).getNodeName());\n            }\n            public boolean equals(Object obj) {\n                return true;\n            }\n        });\n        \n        return java.util.Collections.enumeration (list);\n    }\n","date":"2018-08-26 22:43:11","endLine":115,"groupId":"46398","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"queryEntities","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/da/e9a8fe1d1c1f032adb3e1bf91c1bd65281760a.src","preCode":"    public Enumeration queryEntities(String prefix) {\n        if (entities == null) return org.openide.util.Enumerations.empty();\n        \n        LinkedList list = new LinkedList();\n        Iterator it = entities.iterator();\n        while ( it.hasNext()) {\n            String next = (String) it.next();\n            if (next.startsWith(prefix)) {\n                list.add (new MyEntityReference(next));\n            }\n        }\n\n        \r\n        \n        if (\"lt\".startsWith(prefix)) list.add(new MyEntityReference(\"lt\"));\n        if (\"gt\".startsWith(prefix)) list.add(new MyEntityReference(\"gt\"));\n        if (\"apos\".startsWith(prefix)) list.add(new MyEntityReference(\"apos\"));\n        if (\"quot\".startsWith(prefix)) list.add(new MyEntityReference(\"quot\"));\n        if (\"amp\".startsWith(prefix)) list.add(new MyEntityReference(\"amp\"));\n        \n        Collections.sort(list, new Comparator() {\n            public int compare(Object o1, Object o2) {\n                return ((MyEntityReference)o1).getNodeName().compareTo(((MyEntityReference)o2).getNodeName());\n            }\n            public boolean equals(Object obj) {\n                return true;\n            }\n        });\n        \n        return java.util.Collections.enumeration (list);\n    }\n","realPath":"ide/xml.core/src/org/netbeans/modules/xml/dtd/grammar/DTDGrammar.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    public Enumeration queryEntities(String prefix) {\n        QueueEnumeration list = new QueueEnumeration();\n\n        \r\n\n        if (\"lt\".startsWith(prefix)) list.put(new MyEntityReference(\"lt\"));     \r\n        if (\"gt\".startsWith(prefix)) list.put(new MyEntityReference(\"gt\"));     \r\n        if (\"apos\".startsWith(prefix)) list.put(new MyEntityReference(\"apos\")); \r\n        if (\"quot\".startsWith(prefix)) list.put(new MyEntityReference(\"quot\")); \r\n        if (\"amp\".startsWith(prefix)) list.put(new MyEntityReference(\"amp\"));   \r\n\n        return list;\n    }\n","date":"2018-08-26 22:43:11","endLine":734,"groupId":"46398","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"queryEntities","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/bc/23793987240095cdc8cf1fa63e8a63315d4ad0.src","preCode":"    public Enumeration queryEntities(String prefix) {\n        QueueEnumeration list = new QueueEnumeration();\n\n        \r\n\n        if (\"lt\".startsWith(prefix)) list.put(new MyEntityReference(\"lt\"));     \r\n        if (\"gt\".startsWith(prefix)) list.put(new MyEntityReference(\"gt\"));     \r\n        if (\"apos\".startsWith(prefix)) list.put(new MyEntityReference(\"apos\")); \r\n        if (\"quot\".startsWith(prefix)) list.put(new MyEntityReference(\"quot\")); \r\n        if (\"amp\".startsWith(prefix)) list.put(new MyEntityReference(\"amp\"));   \r\n\n        return list;\n    }\n","realPath":"ide/xsl/src/org/netbeans/modules/xsl/grammar/XSLGrammarQuery.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"B"}],"commitId":"0f2e98d513deaedccef831ee9cfc08d09f3650b6","commitMessage":"@@@Merge pull request #791 from ralphbenjamin/NETBEANS-1172_move_ide_modules_to_ide_subdirectory\n\n[NETBEANS-1172] move ide modules to ide subdirectory","date":"2018-08-26 22:43:11","modifiedFileCount":"0","status":"B","submitter":"Geertjan Wielenga"},{"authorTime":"2018-08-26 22:43:11","codes":[{"authorDate":"2019-12-05 04:18:36","commitOrder":2,"curCode":"    public Enumeration queryEntities(String prefix) {\n        if (entities == null) return org.openide.util.Enumerations.empty();\n        \n        List list = new LinkedList();\n        Iterator it = entities.iterator();\n        while ( it.hasNext()) {\n            String next = (String) it.next();\n            if (next.startsWith(prefix)) {\n                list.add (new MyEntityReference(next));\n            }\n        }\n\n        \r\n        \n        if (\"lt\".startsWith(prefix)) list.add(new MyEntityReference(\"lt\"));\n        if (\"gt\".startsWith(prefix)) list.add(new MyEntityReference(\"gt\"));\n        if (\"apos\".startsWith(prefix)) list.add(new MyEntityReference(\"apos\"));\n        if (\"quot\".startsWith(prefix)) list.add(new MyEntityReference(\"quot\"));\n        if (\"amp\".startsWith(prefix)) list.add(new MyEntityReference(\"amp\"));\n        \n        Collections.sort(list, new Comparator() {\n            public int compare(Object o1, Object o2) {\n                return ((MyEntityReference)o1).getNodeName().compareTo(((MyEntityReference)o2).getNodeName());\n            }\n            public boolean equals(Object obj) {\n                return true;\n            }\n        });\n        \n        return java.util.Collections.enumeration (list);\n    }\n","date":"2019-12-05 04:18:36","endLine":115,"groupId":"46398","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"queryEntities","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/48/5805734c040500eadf101c8520658246c260f7.src","preCode":"    public Enumeration queryEntities(String prefix) {\n        if (entities == null) return org.openide.util.Enumerations.empty();\n        \n        LinkedList list = new LinkedList();\n        Iterator it = entities.iterator();\n        while ( it.hasNext()) {\n            String next = (String) it.next();\n            if (next.startsWith(prefix)) {\n                list.add (new MyEntityReference(next));\n            }\n        }\n\n        \r\n        \n        if (\"lt\".startsWith(prefix)) list.add(new MyEntityReference(\"lt\"));\n        if (\"gt\".startsWith(prefix)) list.add(new MyEntityReference(\"gt\"));\n        if (\"apos\".startsWith(prefix)) list.add(new MyEntityReference(\"apos\"));\n        if (\"quot\".startsWith(prefix)) list.add(new MyEntityReference(\"quot\"));\n        if (\"amp\".startsWith(prefix)) list.add(new MyEntityReference(\"amp\"));\n        \n        Collections.sort(list, new Comparator() {\n            public int compare(Object o1, Object o2) {\n                return ((MyEntityReference)o1).getNodeName().compareTo(((MyEntityReference)o2).getNodeName());\n            }\n            public boolean equals(Object obj) {\n                return true;\n            }\n        });\n        \n        return java.util.Collections.enumeration (list);\n    }\n","realPath":"ide/xml.core/src/org/netbeans/modules/xml/dtd/grammar/DTDGrammar.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2018-08-26 22:43:11","commitOrder":2,"curCode":"    public Enumeration queryEntities(String prefix) {\n        QueueEnumeration list = new QueueEnumeration();\n\n        \r\n\n        if (\"lt\".startsWith(prefix)) list.put(new MyEntityReference(\"lt\"));     \r\n        if (\"gt\".startsWith(prefix)) list.put(new MyEntityReference(\"gt\"));     \r\n        if (\"apos\".startsWith(prefix)) list.put(new MyEntityReference(\"apos\")); \r\n        if (\"quot\".startsWith(prefix)) list.put(new MyEntityReference(\"quot\")); \r\n        if (\"amp\".startsWith(prefix)) list.put(new MyEntityReference(\"amp\"));   \r\n\n        return list;\n    }\n","date":"2018-08-26 22:43:11","endLine":734,"groupId":"46398","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"queryEntities","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/bc/23793987240095cdc8cf1fa63e8a63315d4ad0.src","preCode":"    public Enumeration queryEntities(String prefix) {\n        QueueEnumeration list = new QueueEnumeration();\n\n        \r\n\n        if (\"lt\".startsWith(prefix)) list.put(new MyEntityReference(\"lt\"));     \r\n        if (\"gt\".startsWith(prefix)) list.put(new MyEntityReference(\"gt\"));     \r\n        if (\"apos\".startsWith(prefix)) list.put(new MyEntityReference(\"apos\")); \r\n        if (\"quot\".startsWith(prefix)) list.put(new MyEntityReference(\"quot\")); \r\n        if (\"amp\".startsWith(prefix)) list.put(new MyEntityReference(\"amp\"));   \r\n\n        return list;\n    }\n","realPath":"ide/xsl/src/org/netbeans/modules/xsl/grammar/XSLGrammarQuery.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"N"}],"commitId":"c5cffaca24a64550209f7acfb636311fc0b51b2b","commitMessage":"@@@Merge pull request #1740 from BradWalker/cleanup_unchecked_conversions\n\n[NETBEANS-3542] - cleanup unchecked conversion warnings..","date":"2019-12-05 04:18:36","modifiedFileCount":"62","status":"M","submitter":"Matthias Bl?sing"},{"authorTime":"2018-08-26 22:43:11","codes":[{"authorDate":"2020-01-04 23:51:37","commitOrder":3,"curCode":"    public Enumeration queryEntities(String prefix) {\n        if (entities == null) return org.openide.util.Enumerations.empty();\n        \n        List<MyEntityReference> list = new LinkedList<>();\n        Iterator it = entities.iterator();\n        while ( it.hasNext()) {\n            String next = (String) it.next();\n            if (next.startsWith(prefix)) {\n                list.add (new MyEntityReference(next));\n            }\n        }\n\n        \r\n        \n        if (\"lt\".startsWith(prefix)) list.add(new MyEntityReference(\"lt\"));\n        if (\"gt\".startsWith(prefix)) list.add(new MyEntityReference(\"gt\"));\n        if (\"apos\".startsWith(prefix)) list.add(new MyEntityReference(\"apos\"));\n        if (\"quot\".startsWith(prefix)) list.add(new MyEntityReference(\"quot\"));\n        if (\"amp\".startsWith(prefix)) list.add(new MyEntityReference(\"amp\"));\n        \n        Collections.sort(list, new Comparator() {\n            public int compare(Object o1, Object o2) {\n                return ((MyEntityReference)o1).getNodeName().compareTo(((MyEntityReference)o2).getNodeName());\n            }\n            public boolean equals(Object obj) {\n                return true;\n            }\n        });\n        \n        return java.util.Collections.enumeration (list);\n    }\n","date":"2020-01-04 23:51:37","endLine":115,"groupId":"46398","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"queryEntities","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/05/7882fd91ef8123e432754ff3ba0ffa23d5f88b.src","preCode":"    public Enumeration queryEntities(String prefix) {\n        if (entities == null) return org.openide.util.Enumerations.empty();\n        \n        List list = new LinkedList();\n        Iterator it = entities.iterator();\n        while ( it.hasNext()) {\n            String next = (String) it.next();\n            if (next.startsWith(prefix)) {\n                list.add (new MyEntityReference(next));\n            }\n        }\n\n        \r\n        \n        if (\"lt\".startsWith(prefix)) list.add(new MyEntityReference(\"lt\"));\n        if (\"gt\".startsWith(prefix)) list.add(new MyEntityReference(\"gt\"));\n        if (\"apos\".startsWith(prefix)) list.add(new MyEntityReference(\"apos\"));\n        if (\"quot\".startsWith(prefix)) list.add(new MyEntityReference(\"quot\"));\n        if (\"amp\".startsWith(prefix)) list.add(new MyEntityReference(\"amp\"));\n        \n        Collections.sort(list, new Comparator() {\n            public int compare(Object o1, Object o2) {\n                return ((MyEntityReference)o1).getNodeName().compareTo(((MyEntityReference)o2).getNodeName());\n            }\n            public boolean equals(Object obj) {\n                return true;\n            }\n        });\n        \n        return java.util.Collections.enumeration (list);\n    }\n","realPath":"ide/xml.core/src/org/netbeans/modules/xml/dtd/grammar/DTDGrammar.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2018-08-26 22:43:11","commitOrder":3,"curCode":"    public Enumeration queryEntities(String prefix) {\n        QueueEnumeration list = new QueueEnumeration();\n\n        \r\n\n        if (\"lt\".startsWith(prefix)) list.put(new MyEntityReference(\"lt\"));     \r\n        if (\"gt\".startsWith(prefix)) list.put(new MyEntityReference(\"gt\"));     \r\n        if (\"apos\".startsWith(prefix)) list.put(new MyEntityReference(\"apos\")); \r\n        if (\"quot\".startsWith(prefix)) list.put(new MyEntityReference(\"quot\")); \r\n        if (\"amp\".startsWith(prefix)) list.put(new MyEntityReference(\"amp\"));   \r\n\n        return list;\n    }\n","date":"2018-08-26 22:43:11","endLine":734,"groupId":"46398","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"queryEntities","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/bc/23793987240095cdc8cf1fa63e8a63315d4ad0.src","preCode":"    public Enumeration queryEntities(String prefix) {\n        QueueEnumeration list = new QueueEnumeration();\n\n        \r\n\n        if (\"lt\".startsWith(prefix)) list.put(new MyEntityReference(\"lt\"));     \r\n        if (\"gt\".startsWith(prefix)) list.put(new MyEntityReference(\"gt\"));     \r\n        if (\"apos\".startsWith(prefix)) list.put(new MyEntityReference(\"apos\")); \r\n        if (\"quot\".startsWith(prefix)) list.put(new MyEntityReference(\"quot\")); \r\n        if (\"amp\".startsWith(prefix)) list.put(new MyEntityReference(\"amp\"));   \r\n\n        return list;\n    }\n","realPath":"ide/xsl/src/org/netbeans/modules/xsl/grammar/XSLGrammarQuery.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"N"}],"commitId":"c27f292028662ff76fcc0a77932d3b52ecfea754","commitMessage":"@@@Merge pull request #1838 from BradWalker/cleanup_rawtype_list\n\n[NETBEANS-3659] - clean up List raw type warnings..","date":"2020-01-04 23:51:37","modifiedFileCount":"37","status":"M","submitter":"Matthias Bl?sing"},{"authorTime":"2018-08-26 22:43:11","codes":[{"authorDate":"2020-03-13 04:47:10","commitOrder":4,"curCode":"    public Enumeration queryEntities(String prefix) {\n        if (entities == null) return org.openide.util.Enumerations.empty();\n        \n        List<MyEntityReference> list = new LinkedList<>();\n        Iterator<String> it = entities.iterator();\n        while ( it.hasNext()) {\n            String next = it.next();\n            if (next.startsWith(prefix)) {\n                list.add (new MyEntityReference(next));\n            }\n        }\n\n        \r\n        \n        if (\"lt\".startsWith(prefix)) list.add(new MyEntityReference(\"lt\"));\n        if (\"gt\".startsWith(prefix)) list.add(new MyEntityReference(\"gt\"));\n        if (\"apos\".startsWith(prefix)) list.add(new MyEntityReference(\"apos\"));\n        if (\"quot\".startsWith(prefix)) list.add(new MyEntityReference(\"quot\"));\n        if (\"amp\".startsWith(prefix)) list.add(new MyEntityReference(\"amp\"));\n        \n        Collections.sort(list, new Comparator() {\n            public int compare(Object o1, Object o2) {\n                return ((MyEntityReference)o1).getNodeName().compareTo(((MyEntityReference)o2).getNodeName());\n            }\n            public boolean equals(Object obj) {\n                return true;\n            }\n        });\n        \n        return java.util.Collections.enumeration (list);\n    }\n","date":"2020-03-13 04:47:10","endLine":115,"groupId":"106676","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"queryEntities","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/9a/e3b590f3b1ffae05a8d11be99133018fe5b47e.src","preCode":"    public Enumeration queryEntities(String prefix) {\n        if (entities == null) return org.openide.util.Enumerations.empty();\n        \n        List<MyEntityReference> list = new LinkedList<>();\n        Iterator it = entities.iterator();\n        while ( it.hasNext()) {\n            String next = (String) it.next();\n            if (next.startsWith(prefix)) {\n                list.add (new MyEntityReference(next));\n            }\n        }\n\n        \r\n        \n        if (\"lt\".startsWith(prefix)) list.add(new MyEntityReference(\"lt\"));\n        if (\"gt\".startsWith(prefix)) list.add(new MyEntityReference(\"gt\"));\n        if (\"apos\".startsWith(prefix)) list.add(new MyEntityReference(\"apos\"));\n        if (\"quot\".startsWith(prefix)) list.add(new MyEntityReference(\"quot\"));\n        if (\"amp\".startsWith(prefix)) list.add(new MyEntityReference(\"amp\"));\n        \n        Collections.sort(list, new Comparator() {\n            public int compare(Object o1, Object o2) {\n                return ((MyEntityReference)o1).getNodeName().compareTo(((MyEntityReference)o2).getNodeName());\n            }\n            public boolean equals(Object obj) {\n                return true;\n            }\n        });\n        \n        return java.util.Collections.enumeration (list);\n    }\n","realPath":"ide/xml.core/src/org/netbeans/modules/xml/dtd/grammar/DTDGrammar.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2018-08-26 22:43:11","commitOrder":4,"curCode":"    public Enumeration queryEntities(String prefix) {\n        QueueEnumeration list = new QueueEnumeration();\n\n        \r\n\n        if (\"lt\".startsWith(prefix)) list.put(new MyEntityReference(\"lt\"));     \r\n        if (\"gt\".startsWith(prefix)) list.put(new MyEntityReference(\"gt\"));     \r\n        if (\"apos\".startsWith(prefix)) list.put(new MyEntityReference(\"apos\")); \r\n        if (\"quot\".startsWith(prefix)) list.put(new MyEntityReference(\"quot\")); \r\n        if (\"amp\".startsWith(prefix)) list.put(new MyEntityReference(\"amp\"));   \r\n\n        return list;\n    }\n","date":"2018-08-26 22:43:11","endLine":734,"groupId":"106676","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"queryEntities","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/bc/23793987240095cdc8cf1fa63e8a63315d4ad0.src","preCode":"    public Enumeration queryEntities(String prefix) {\n        QueueEnumeration list = new QueueEnumeration();\n\n        \r\n\n        if (\"lt\".startsWith(prefix)) list.put(new MyEntityReference(\"lt\"));     \r\n        if (\"gt\".startsWith(prefix)) list.put(new MyEntityReference(\"gt\"));     \r\n        if (\"apos\".startsWith(prefix)) list.put(new MyEntityReference(\"apos\")); \r\n        if (\"quot\".startsWith(prefix)) list.put(new MyEntityReference(\"quot\")); \r\n        if (\"amp\".startsWith(prefix)) list.put(new MyEntityReference(\"amp\"));   \r\n\n        return list;\n    }\n","realPath":"ide/xsl/src/org/netbeans/modules/xsl/grammar/XSLGrammarQuery.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"N"}],"commitId":"166e2bb491c29f6778223c6e9e16f70664252bce","commitMessage":"@@@Merge pull request #2016 from BradWalker/cleanup_raw_iterators\n\n[NETBEANS-4002] - clean Iterator raw types","date":"2020-03-13 04:47:10","modifiedFileCount":"101","status":"M","submitter":"Matthias Bl?sing"}]
