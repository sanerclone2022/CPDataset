[{"authorTime":"2018-08-22 22:28:19","codes":[{"authorDate":"2018-08-26 22:43:11","commitOrder":2,"curCode":"    public final Object[] getChildren (Object o, int from, int to)\n    throws UnknownTypeException {\n        Object[] ch;\n        boolean cache = cacheChildrenOf(o);\n        if (cache) {\n            ChildrenTree cht;\n            synchronized (childrenCache) {\n                \r\n                cht = childrenCache.get(o);\n            }\n            if (cht != null) {\n                ch = cht.getChildren();\n            } else {\n                ch = null;\n            }\n        } else ch = null;\n        if (ch == null) {\n            ch = computeChildren(o);\n            if (ch == null) {\n                throw new UnknownTypeException (o);\n            } else {\n                if (cache) {\n                    ChildrenTree cht = new ChildrenTree(o);\n                    cht.setChildren(ch);\n                    synchronized (childrenCache) {\n                        childrenCache.put(o, cht);\n                    }\n                }\n            }\n        }\n        ch = reorder(ch);\n        int l = ch.length;\n        from = Math.min(l, from);\n        to = Math.min(l, to);\n        if (from == 0 && to == l) {\n            return ch;\n        } else {\n            Object[] ch1 = new Object[to - from];\n            System.arraycopy(ch, from, ch1, 0, to - from);\n            ch = ch1;\n        }\n        return ch;\n    }\n","date":"2018-08-26 22:43:11","endLine":102,"groupId":"10705","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getChildren","params":"(Objecto@intfrom@intto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/3c/d0f47c933591e2ef9144f46bb69e978d9bb4b2.src","preCode":"    public final Object[] getChildren (Object o, int from, int to)\n    throws UnknownTypeException {\n        Object[] ch;\n        boolean cache = cacheChildrenOf(o);\n        if (cache) {\n            ChildrenTree cht;\n            synchronized (childrenCache) {\n                \r\n                cht = childrenCache.get(o);\n            }\n            if (cht != null) {\n                ch = cht.getChildren();\n            } else {\n                ch = null;\n            }\n        } else ch = null;\n        if (ch == null) {\n            ch = computeChildren(o);\n            if (ch == null) {\n                throw new UnknownTypeException (o);\n            } else {\n                if (cache) {\n                    ChildrenTree cht = new ChildrenTree(o);\n                    cht.setChildren(ch);\n                    synchronized (childrenCache) {\n                        childrenCache.put(o, cht);\n                    }\n                }\n            }\n        }\n        ch = reorder(ch);\n        int l = ch.length;\n        from = Math.min(l, from);\n        to = Math.min(l, to);\n        if (from == 0 && to == l) {\n            return ch;\n        } else {\n            Object[] ch1 = new Object[to - from];\n            System.arraycopy(ch, from, ch1, 0, to - from);\n            ch = ch1;\n        }\n        return ch;\n    }\n","realPath":"ide/spi.viewmodel/src/org/netbeans/spi/viewmodel/CachedChildrenTreeModel.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2018-08-22 22:28:19","commitOrder":2,"curCode":"    public Object[] getChildren (Object o, int from, int to)\n    throws UnknownTypeException {\n        Object[] ch;\n        synchronized (childrenCache) {\n            \r\n            ChildrenTree cht = childrenCache.get(o);\n            if (cht != null) {\n                ch = cht.getChildren();\n            } else {\n                ch = null;\n            }\n        }\n        if (ch == null) {\n            ch = computeChildren(o);\n            if (ch == null) {\n                throw new UnknownTypeException (o);\n            } else {\n                synchronized (childrenCache) {\n                    ChildrenTree cht = new ChildrenTree();\n                    cht.setChildren(ch);\n                    childrenCache.put(o, cht);\n                }\n            }\n        }\n        int l = ch.length;\n        from = Math.min(l, from);\n        to = Math.min(l, to);\n        if (from == 0 && to == l) {\n            return ch;\n        } else {\n            Object[] ch1 = new Object[to - from];\n            System.arraycopy(ch, from, ch1, 0, to - from);\n            ch = ch1;\n        }\n        return ch;\n    }\n","date":"2018-08-22 22:28:19","endLine":122,"groupId":"58843","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"getChildren","params":"(Objecto@intfrom@intto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/bc/ad9570da9af3ac741f0b9238bd8c7ad717fce9.src","preCode":"    public Object[] getChildren (Object o, int from, int to)\n    throws UnknownTypeException {\n        Object[] ch;\n        synchronized (childrenCache) {\n            \r\n            ChildrenTree cht = childrenCache.get(o);\n            if (cht != null) {\n                ch = cht.getChildren();\n            } else {\n                ch = null;\n            }\n        }\n        if (ch == null) {\n            ch = computeChildren(o);\n            if (ch == null) {\n                throw new UnknownTypeException (o);\n            } else {\n                synchronized (childrenCache) {\n                    ChildrenTree cht = new ChildrenTree();\n                    cht.setChildren(ch);\n                    childrenCache.put(o, cht);\n                }\n            }\n        }\n        int l = ch.length;\n        from = Math.min(l, from);\n        to = Math.min(l, to);\n        if (from == 0 && to == l) {\n            return ch;\n        } else {\n            Object[] ch1 = new Object[to - from];\n            System.arraycopy(ch, from, ch1, 0, to - from);\n            ch = ch1;\n        }\n        return ch;\n    }\n","realPath":"java/debugger.jpda.ui/src/org/netbeans/modules/debugger/jpda/ui/models/ThreadsTreeModel.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"NB"}],"commitId":"0f2e98d513deaedccef831ee9cfc08d09f3650b6","commitMessage":"@@@Merge pull request #791 from ralphbenjamin/NETBEANS-1172_move_ide_modules_to_ide_subdirectory\n\n[NETBEANS-1172] move ide modules to ide subdirectory","date":"2018-08-26 22:43:11","modifiedFileCount":"0","status":"M","submitter":"Geertjan Wielenga"},{"authorTime":"2018-08-22 22:28:19","codes":[{"authorDate":"2021-01-22 10:41:23","commitOrder":3,"curCode":"    public final Object[] getChildren (Object o, int from, int to)\n    throws UnknownTypeException {\n        Object[] ch;\n        boolean cache = cacheChildrenOf(o);\n        if (cache) {\n            ChildrenTree cht;\n            synchronized (childrenCache) {\n                if (childrenToRefresh.remove(o)) {\n                    childrenCache.remove(o);\n                    cht = null;\n                } else {\n                    cht = childrenCache.get(o);\n                }\n            }\n            if (cht != null) {\n                ch = cht.getChildren();\n            } else {\n                ch = null;\n            }\n        } else ch = null;\n        if (ch == null) {\n            ch = computeChildren(o);\n            if (ch == null) {\n                throw new UnknownTypeException (o);\n            } else {\n                if (cache) {\n                    ChildrenTree cht = new ChildrenTree(o);\n                    cht.setChildren(ch);\n                    synchronized (childrenCache) {\n                        childrenCache.put(o, cht);\n                    }\n                }\n            }\n        }\n        ch = reorder(ch);\n        int l = ch.length;\n        from = Math.min(l, from);\n        to = Math.min(l, to);\n        if (from == 0 && to == l) {\n            return ch;\n        } else {\n            Object[] ch1 = new Object[to - from];\n            System.arraycopy(ch, from, ch1, 0, to - from);\n            ch = ch1;\n        }\n        return ch;\n    }\n","date":"2021-01-22 10:41:23","endLine":106,"groupId":"10129","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getChildren","params":"(Objecto@intfrom@intto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/30/ebe9af4735d6916ae39db6fd08f41400387d1b.src","preCode":"    public final Object[] getChildren (Object o, int from, int to)\n    throws UnknownTypeException {\n        Object[] ch;\n        boolean cache = cacheChildrenOf(o);\n        if (cache) {\n            ChildrenTree cht;\n            synchronized (childrenCache) {\n                \r\n                cht = childrenCache.get(o);\n            }\n            if (cht != null) {\n                ch = cht.getChildren();\n            } else {\n                ch = null;\n            }\n        } else ch = null;\n        if (ch == null) {\n            ch = computeChildren(o);\n            if (ch == null) {\n                throw new UnknownTypeException (o);\n            } else {\n                if (cache) {\n                    ChildrenTree cht = new ChildrenTree(o);\n                    cht.setChildren(ch);\n                    synchronized (childrenCache) {\n                        childrenCache.put(o, cht);\n                    }\n                }\n            }\n        }\n        ch = reorder(ch);\n        int l = ch.length;\n        from = Math.min(l, from);\n        to = Math.min(l, to);\n        if (from == 0 && to == l) {\n            return ch;\n        } else {\n            Object[] ch1 = new Object[to - from];\n            System.arraycopy(ch, from, ch1, 0, to - from);\n            ch = ch1;\n        }\n        return ch;\n    }\n","realPath":"ide/spi.viewmodel/src/org/netbeans/spi/viewmodel/CachedChildrenTreeModel.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2018-08-22 22:28:19","commitOrder":3,"curCode":"    public Object[] getChildren (Object o, int from, int to)\n    throws UnknownTypeException {\n        Object[] ch;\n        synchronized (childrenCache) {\n            \r\n            ChildrenTree cht = childrenCache.get(o);\n            if (cht != null) {\n                ch = cht.getChildren();\n            } else {\n                ch = null;\n            }\n        }\n        if (ch == null) {\n            ch = computeChildren(o);\n            if (ch == null) {\n                throw new UnknownTypeException (o);\n            } else {\n                synchronized (childrenCache) {\n                    ChildrenTree cht = new ChildrenTree();\n                    cht.setChildren(ch);\n                    childrenCache.put(o, cht);\n                }\n            }\n        }\n        int l = ch.length;\n        from = Math.min(l, from);\n        to = Math.min(l, to);\n        if (from == 0 && to == l) {\n            return ch;\n        } else {\n            Object[] ch1 = new Object[to - from];\n            System.arraycopy(ch, from, ch1, 0, to - from);\n            ch = ch1;\n        }\n        return ch;\n    }\n","date":"2018-08-22 22:28:19","endLine":122,"groupId":"10129","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getChildren","params":"(Objecto@intfrom@intto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/bc/ad9570da9af3ac741f0b9238bd8c7ad717fce9.src","preCode":"    public Object[] getChildren (Object o, int from, int to)\n    throws UnknownTypeException {\n        Object[] ch;\n        synchronized (childrenCache) {\n            \r\n            ChildrenTree cht = childrenCache.get(o);\n            if (cht != null) {\n                ch = cht.getChildren();\n            } else {\n                ch = null;\n            }\n        }\n        if (ch == null) {\n            ch = computeChildren(o);\n            if (ch == null) {\n                throw new UnknownTypeException (o);\n            } else {\n                synchronized (childrenCache) {\n                    ChildrenTree cht = new ChildrenTree();\n                    cht.setChildren(ch);\n                    childrenCache.put(o, cht);\n                }\n            }\n        }\n        int l = ch.length;\n        from = Math.min(l, from);\n        to = Math.min(l, to);\n        if (from == 0 && to == l) {\n            return ch;\n        } else {\n            Object[] ch1 = new Object[to - from];\n            System.arraycopy(ch, from, ch1, 0, to - from);\n            ch = ch1;\n        }\n        return ch;\n    }\n","realPath":"java/debugger.jpda.ui/src/org/netbeans/modules/debugger/jpda/ui/models/ThreadsTreeModel.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"5b677141282c2b6a219417776cb55a02cfe4f628","commitMessage":"@@@Merge pull request #2697 from entlicher/CPPLiteDebugComplete\n\nCompleting the CPPLite debugger: threads.  variables.  watches.  tooltips.  etc...","date":"2021-01-22 10:41:23","modifiedFileCount":"9","status":"M","submitter":"Martin Entlicher"}]
