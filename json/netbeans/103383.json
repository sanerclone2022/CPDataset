[{"authorTime":"2018-08-26 22:43:11","codes":[{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    public AttributeSet cutSameFont(Font defaultFont, int maxEndOffset, int wsEndOffset, CharSequence docText) {\n        assert (maxEndOffset <= endOffset()) :\n                \"maxEndOffset=\" + maxEndOffset + \" > endOffset()=\" + endOffset() + \", \" + this; \r\n        HighlightItem item = get(0);\n        AttributeSet firstAttrs = item.getAttributes();\n        int itemEndOffset = item.getEndOffset();\n        if (wsEndOffset <= itemEndOffset) {\n            if (wsEndOffset == maxEndOffset) {\n                if (maxEndOffset == itemEndOffset) {\n                    cutStartItems(1);\n                }\n                startOffset = maxEndOffset;\n                return firstAttrs;\n\n            } else { \r\n                \r\n                int limitOffset = Math.min(maxEndOffset, itemEndOffset);\n                for (int offset = wsEndOffset; offset < limitOffset; offset++) {\n                    if (Character.isWhitespace(docText.charAt(offset))) {\n                        startOffset = offset;\n                        return firstAttrs;\n                    }\n                }\n                if ((maxEndOffset > itemEndOffset && Character.isWhitespace(docText.charAt(itemEndOffset))) ||\n                    maxEndOffset == itemEndOffset)\n                {\n                    cutStartItems(1);\n                    startOffset = itemEndOffset;\n                    return firstAttrs;\n                } else if (maxEndOffset < itemEndOffset) {\n                    startOffset = maxEndOffset;\n                    return firstAttrs;\n                } \r\n            }\n        }\n\n        \r\n        Font firstFont = ViewUtils.getFont(firstAttrs, defaultFont);\n        int index = 1;\n        while (true) {\n            item = get(index);\n            AttributeSet attrs = item.getAttributes();\n            Font font = ViewUtils.getFont(attrs, defaultFont);\n            if (!font.equals(firstFont)) { \r\n                if (index == 1) { \r\n                    cutStartItems(1);\n                    startOffset = itemEndOffset; \r\n                    return firstAttrs;\n                }\n                \r\n                return cutCompound(index, itemEndOffset); \r\n            }\n            int itemStartOffset = itemEndOffset;\n            itemEndOffset = item.getEndOffset();\n            if (wsEndOffset <= itemEndOffset) {\n                if (wsEndOffset == maxEndOffset) {\n                    if (maxEndOffset == itemEndOffset) {\n                        return cutCompound(index + 1, itemEndOffset);\n                    }\n                    return cutCompoundAndPart(index, maxEndOffset, attrs);\n\n                } else { \r\n                    int offset = Math.max(itemStartOffset, wsEndOffset);\n                    int limitOffset = Math.min(maxEndOffset, itemEndOffset);\n                    for (; offset < limitOffset; offset++) {\n                        if (Character.isWhitespace(docText.charAt(offset))) {\n                            return cutCompoundAndPart(index, offset, attrs);\n                        }\n                    }\n                    if ((maxEndOffset > itemEndOffset && Character.isWhitespace(docText.charAt(itemEndOffset)))\n                            || maxEndOffset == itemEndOffset)\n                    {\n                        return cutCompound(index + 1, itemEndOffset);\n                    } else if (maxEndOffset < itemEndOffset) {\n                        return cutCompoundAndPart(index, maxEndOffset, attrs);\n                    } \r\n                }\n            }\n            index++;\n        }\n    }\n","date":"2018-08-26 22:43:11","endLine":202,"groupId":"26091","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cutSameFont","params":"(FontdefaultFont@intmaxEndOffset@intwsEndOffset@CharSequencedocText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/1b/764078727d382a6f3793311de11f5910d74f21.src","preCode":"    public AttributeSet cutSameFont(Font defaultFont, int maxEndOffset, int wsEndOffset, CharSequence docText) {\n        assert (maxEndOffset <= endOffset()) :\n                \"maxEndOffset=\" + maxEndOffset + \" > endOffset()=\" + endOffset() + \", \" + this; \r\n        HighlightItem item = get(0);\n        AttributeSet firstAttrs = item.getAttributes();\n        int itemEndOffset = item.getEndOffset();\n        if (wsEndOffset <= itemEndOffset) {\n            if (wsEndOffset == maxEndOffset) {\n                if (maxEndOffset == itemEndOffset) {\n                    cutStartItems(1);\n                }\n                startOffset = maxEndOffset;\n                return firstAttrs;\n\n            } else { \r\n                \r\n                int limitOffset = Math.min(maxEndOffset, itemEndOffset);\n                for (int offset = wsEndOffset; offset < limitOffset; offset++) {\n                    if (Character.isWhitespace(docText.charAt(offset))) {\n                        startOffset = offset;\n                        return firstAttrs;\n                    }\n                }\n                if ((maxEndOffset > itemEndOffset && Character.isWhitespace(docText.charAt(itemEndOffset))) ||\n                    maxEndOffset == itemEndOffset)\n                {\n                    cutStartItems(1);\n                    startOffset = itemEndOffset;\n                    return firstAttrs;\n                } else if (maxEndOffset < itemEndOffset) {\n                    startOffset = maxEndOffset;\n                    return firstAttrs;\n                } \r\n            }\n        }\n\n        \r\n        Font firstFont = ViewUtils.getFont(firstAttrs, defaultFont);\n        int index = 1;\n        while (true) {\n            item = get(index);\n            AttributeSet attrs = item.getAttributes();\n            Font font = ViewUtils.getFont(attrs, defaultFont);\n            if (!font.equals(firstFont)) { \r\n                if (index == 1) { \r\n                    cutStartItems(1);\n                    startOffset = itemEndOffset; \r\n                    return firstAttrs;\n                }\n                \r\n                return cutCompound(index, itemEndOffset); \r\n            }\n            int itemStartOffset = itemEndOffset;\n            itemEndOffset = item.getEndOffset();\n            if (wsEndOffset <= itemEndOffset) {\n                if (wsEndOffset == maxEndOffset) {\n                    if (maxEndOffset == itemEndOffset) {\n                        return cutCompound(index + 1, itemEndOffset);\n                    }\n                    return cutCompoundAndPart(index, maxEndOffset, attrs);\n\n                } else { \r\n                    int offset = Math.max(itemStartOffset, wsEndOffset);\n                    int limitOffset = Math.min(maxEndOffset, itemEndOffset);\n                    for (; offset < limitOffset; offset++) {\n                        if (Character.isWhitespace(docText.charAt(offset))) {\n                            return cutCompoundAndPart(index, offset, attrs);\n                        }\n                    }\n                    if ((maxEndOffset > itemEndOffset && Character.isWhitespace(docText.charAt(itemEndOffset)))\n                            || maxEndOffset == itemEndOffset)\n                    {\n                        return cutCompound(index + 1, itemEndOffset);\n                    } else if (maxEndOffset < itemEndOffset) {\n                        return cutCompoundAndPart(index, maxEndOffset, attrs);\n                    } \r\n                }\n            }\n            index++;\n        }\n    }\n","realPath":"ide/editor.lib2/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsList.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    public AttributeSet cut(int endOffset) {\n        assert (endOffset <= endOffset()) :\n                \"endOffset=\" + endOffset + \" > endOffset()=\" + endOffset() + \", \" + this; \r\n        HighlightItem item = get(0);\n        AttributeSet attrs = item.getAttributes();\n        int itemEndOffset = item.getEndOffset();\n        if (endOffset <= itemEndOffset) {\n            if (endOffset == itemEndOffset) {\n                cutStartItems(1);\n            }\n            startOffset = endOffset;\n            return attrs;\n        }\n        \r\n        int index = 1;\n        while (true) {\n            item = get(index);\n            itemEndOffset = item.getEndOffset();\n            if (endOffset <= itemEndOffset) {\n                if (endOffset == itemEndOffset) {\n                    return cutCompound(index + 1, itemEndOffset);\n                }\n                return cutCompoundAndPart(index, endOffset, item.getAttributes());\n            }\n            index++;\n        }\n    }\n","date":"2018-08-26 22:43:11","endLine":230,"groupId":"26091","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cut","params":"(intendOffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/1b/764078727d382a6f3793311de11f5910d74f21.src","preCode":"    public AttributeSet cut(int endOffset) {\n        assert (endOffset <= endOffset()) :\n                \"endOffset=\" + endOffset + \" > endOffset()=\" + endOffset() + \", \" + this; \r\n        HighlightItem item = get(0);\n        AttributeSet attrs = item.getAttributes();\n        int itemEndOffset = item.getEndOffset();\n        if (endOffset <= itemEndOffset) {\n            if (endOffset == itemEndOffset) {\n                cutStartItems(1);\n            }\n            startOffset = endOffset;\n            return attrs;\n        }\n        \r\n        int index = 1;\n        while (true) {\n            item = get(index);\n            itemEndOffset = item.getEndOffset();\n            if (endOffset <= itemEndOffset) {\n                if (endOffset == itemEndOffset) {\n                    return cutCompound(index + 1, itemEndOffset);\n                }\n                return cutCompoundAndPart(index, endOffset, item.getAttributes());\n            }\n            index++;\n        }\n    }\n","realPath":"ide/editor.lib2/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsList.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"}],"commitId":"0f2e98d513deaedccef831ee9cfc08d09f3650b6","commitMessage":"@@@Merge pull request #791 from ralphbenjamin/NETBEANS-1172_move_ide_modules_to_ide_subdirectory\n\n[NETBEANS-1172] move ide modules to ide subdirectory","date":"2018-08-26 22:43:11","modifiedFileCount":"0","status":"B","submitter":"Geertjan Wielenga"},{"authorTime":"2018-08-26 22:43:11","codes":[{"authorDate":"2019-06-14 15:05:49","commitOrder":2,"curCode":"    public AttributeSet cutSameFont(Font defaultFont, int maxEndOffset, int wsEndOffset, CharSequence docText, boolean usePrependText) {\n        assert (maxEndOffset <= endOffset()) :\n                \"maxEndOffset=\" + maxEndOffset + \" > endOffset()=\" + endOffset() + \", \" + this; \r\n        HighlightItem item = get(0);\n        AttributeSet firstAttrs = item.getAttributes();\n        int itemEndOffset = item.getEndOffset();\n        if (wsEndOffset <= itemEndOffset) {\n            if (wsEndOffset == maxEndOffset) {\n                if (maxEndOffset == itemEndOffset) {\n                    cutStartItems(1);\n                }\n                startOffset = maxEndOffset;\n                return firstAttrs;\n\n            } else { \r\n                \r\n                int limitOffset = Math.min(maxEndOffset, itemEndOffset);\n                for (int offset = wsEndOffset; offset < limitOffset; offset++) {\n                    if (Character.isWhitespace(docText.charAt(offset))) {\n                        startOffset = offset;\n                        return firstAttrs;\n                    }\n                }\n                if ((maxEndOffset > itemEndOffset && Character.isWhitespace(docText.charAt(itemEndOffset))) ||\n                    maxEndOffset == itemEndOffset)\n                {\n                    cutStartItems(1);\n                    startOffset = itemEndOffset;\n                    return firstAttrs;\n                } else if (maxEndOffset < itemEndOffset) {\n                    startOffset = maxEndOffset;\n                    return firstAttrs;\n                } \r\n            }\n        }\n\n        \r\n        Font firstFont = ViewUtils.getFont(firstAttrs, defaultFont);\n        Object firstPrependText = usePrependText && firstAttrs != null ? firstAttrs.getAttribute(ViewUtils.KEY_VIRTUAL_TEXT_PREPEND) : null;\n        int index = 1;\n        while (true) {\n            item = get(index);\n            AttributeSet attrs = item.getAttributes();\n            Font font = ViewUtils.getFont(attrs, defaultFont);\n            Object prependText = usePrependText && attrs != null ? attrs.getAttribute(ViewUtils.KEY_VIRTUAL_TEXT_PREPEND) : null;\n            if (!font.equals(firstFont) || !Objects.equals(firstPrependText, prependText)) { \r\n                if (index == 1) { \r\n                    cutStartItems(1);\n                    startOffset = itemEndOffset; \r\n                    return firstAttrs;\n                }\n                \r\n                return cutCompound(index, itemEndOffset); \r\n            }\n            int itemStartOffset = itemEndOffset;\n            itemEndOffset = item.getEndOffset();\n            if (wsEndOffset <= itemEndOffset) {\n                if (wsEndOffset == maxEndOffset) {\n                    if (maxEndOffset == itemEndOffset) {\n                        return cutCompound(index + 1, itemEndOffset);\n                    }\n                    return cutCompoundAndPart(index, maxEndOffset, attrs);\n\n                } else { \r\n                    int offset = Math.max(itemStartOffset, wsEndOffset);\n                    int limitOffset = Math.min(maxEndOffset, itemEndOffset);\n                    for (; offset < limitOffset; offset++) {\n                        if (Character.isWhitespace(docText.charAt(offset))) {\n                            return cutCompoundAndPart(index, offset, attrs);\n                        }\n                    }\n                    if ((maxEndOffset > itemEndOffset && Character.isWhitespace(docText.charAt(itemEndOffset)))\n                            || maxEndOffset == itemEndOffset)\n                    {\n                        return cutCompound(index + 1, itemEndOffset);\n                    } else if (maxEndOffset < itemEndOffset) {\n                        return cutCompoundAndPart(index, maxEndOffset, attrs);\n                    } \r\n                }\n            }\n            index++;\n        }\n    }\n","date":"2019-06-14 15:05:49","endLine":206,"groupId":"103383","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"cutSameFont","params":"(FontdefaultFont@intmaxEndOffset@intwsEndOffset@CharSequencedocText@booleanusePrependText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/a9/7a9598ed37e208c9077c70be0aa10a24f97c19.src","preCode":"    public AttributeSet cutSameFont(Font defaultFont, int maxEndOffset, int wsEndOffset, CharSequence docText) {\n        assert (maxEndOffset <= endOffset()) :\n                \"maxEndOffset=\" + maxEndOffset + \" > endOffset()=\" + endOffset() + \", \" + this; \r\n        HighlightItem item = get(0);\n        AttributeSet firstAttrs = item.getAttributes();\n        int itemEndOffset = item.getEndOffset();\n        if (wsEndOffset <= itemEndOffset) {\n            if (wsEndOffset == maxEndOffset) {\n                if (maxEndOffset == itemEndOffset) {\n                    cutStartItems(1);\n                }\n                startOffset = maxEndOffset;\n                return firstAttrs;\n\n            } else { \r\n                \r\n                int limitOffset = Math.min(maxEndOffset, itemEndOffset);\n                for (int offset = wsEndOffset; offset < limitOffset; offset++) {\n                    if (Character.isWhitespace(docText.charAt(offset))) {\n                        startOffset = offset;\n                        return firstAttrs;\n                    }\n                }\n                if ((maxEndOffset > itemEndOffset && Character.isWhitespace(docText.charAt(itemEndOffset))) ||\n                    maxEndOffset == itemEndOffset)\n                {\n                    cutStartItems(1);\n                    startOffset = itemEndOffset;\n                    return firstAttrs;\n                } else if (maxEndOffset < itemEndOffset) {\n                    startOffset = maxEndOffset;\n                    return firstAttrs;\n                } \r\n            }\n        }\n\n        \r\n        Font firstFont = ViewUtils.getFont(firstAttrs, defaultFont);\n        int index = 1;\n        while (true) {\n            item = get(index);\n            AttributeSet attrs = item.getAttributes();\n            Font font = ViewUtils.getFont(attrs, defaultFont);\n            if (!font.equals(firstFont)) { \r\n                if (index == 1) { \r\n                    cutStartItems(1);\n                    startOffset = itemEndOffset; \r\n                    return firstAttrs;\n                }\n                \r\n                return cutCompound(index, itemEndOffset); \r\n            }\n            int itemStartOffset = itemEndOffset;\n            itemEndOffset = item.getEndOffset();\n            if (wsEndOffset <= itemEndOffset) {\n                if (wsEndOffset == maxEndOffset) {\n                    if (maxEndOffset == itemEndOffset) {\n                        return cutCompound(index + 1, itemEndOffset);\n                    }\n                    return cutCompoundAndPart(index, maxEndOffset, attrs);\n\n                } else { \r\n                    int offset = Math.max(itemStartOffset, wsEndOffset);\n                    int limitOffset = Math.min(maxEndOffset, itemEndOffset);\n                    for (; offset < limitOffset; offset++) {\n                        if (Character.isWhitespace(docText.charAt(offset))) {\n                            return cutCompoundAndPart(index, offset, attrs);\n                        }\n                    }\n                    if ((maxEndOffset > itemEndOffset && Character.isWhitespace(docText.charAt(itemEndOffset)))\n                            || maxEndOffset == itemEndOffset)\n                    {\n                        return cutCompound(index + 1, itemEndOffset);\n                    } else if (maxEndOffset < itemEndOffset) {\n                        return cutCompoundAndPart(index, maxEndOffset, attrs);\n                    } \r\n                }\n            }\n            index++;\n        }\n    }\n","realPath":"ide/editor.lib2/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsList.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2018-08-26 22:43:11","commitOrder":2,"curCode":"    public AttributeSet cut(int endOffset) {\n        assert (endOffset <= endOffset()) :\n                \"endOffset=\" + endOffset + \" > endOffset()=\" + endOffset() + \", \" + this; \r\n        HighlightItem item = get(0);\n        AttributeSet attrs = item.getAttributes();\n        int itemEndOffset = item.getEndOffset();\n        if (endOffset <= itemEndOffset) {\n            if (endOffset == itemEndOffset) {\n                cutStartItems(1);\n            }\n            startOffset = endOffset;\n            return attrs;\n        }\n        \r\n        int index = 1;\n        while (true) {\n            item = get(index);\n            itemEndOffset = item.getEndOffset();\n            if (endOffset <= itemEndOffset) {\n                if (endOffset == itemEndOffset) {\n                    return cutCompound(index + 1, itemEndOffset);\n                }\n                return cutCompoundAndPart(index, endOffset, item.getAttributes());\n            }\n            index++;\n        }\n    }\n","date":"2018-08-26 22:43:11","endLine":230,"groupId":"103383","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cut","params":"(intendOffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/1b/764078727d382a6f3793311de11f5910d74f21.src","preCode":"    public AttributeSet cut(int endOffset) {\n        assert (endOffset <= endOffset()) :\n                \"endOffset=\" + endOffset + \" > endOffset()=\" + endOffset() + \", \" + this; \r\n        HighlightItem item = get(0);\n        AttributeSet attrs = item.getAttributes();\n        int itemEndOffset = item.getEndOffset();\n        if (endOffset <= itemEndOffset) {\n            if (endOffset == itemEndOffset) {\n                cutStartItems(1);\n            }\n            startOffset = endOffset;\n            return attrs;\n        }\n        \r\n        int index = 1;\n        while (true) {\n            item = get(index);\n            itemEndOffset = item.getEndOffset();\n            if (endOffset <= itemEndOffset) {\n                if (endOffset == itemEndOffset) {\n                    return cutCompound(index + 1, itemEndOffset);\n                }\n                return cutCompoundAndPart(index, endOffset, item.getAttributes());\n            }\n            index++;\n        }\n    }\n","realPath":"ide/editor.lib2/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsList.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"}],"commitId":"89712349b8367ba74d1bc3d956ebe9c98d91cd3c","commitMessage":"@@@Inline parameter name hints for Java (#1247)\n\n* A crude prototype of inline (parameter) hints.\n\n* Improving appearance of the inline hints.\n\n* Generalizing highlighting test infrastructure.\n\n* Adding option to disable/enable the inline hints.\n\n* Preventing NPE while preparing compound highlights.  adding simple tests.\n\n* Adding simple tests for the parameter name hints.\n\n* Fixing varargs usage.\n\n* Improving the view structure by creating a wrapper view over the existing highlight view.\n\n* Cleaning the views implementation.\n\n* Fix behavior of String literals which contain embedded escape sequences.\n\n* Resolving review comments Junichi\n","date":"2019-06-14 15:05:49","modifiedFileCount":"13","status":"M","submitter":"Jan Lahoda"}]
