[{"authorTime":"2018-08-26 22:43:11","codes":[{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    public void testGetCellStyle() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n        JTable table = new JTable();\n        RendererRepository rendererRepository = new RendererRepository();\n        RendererQuery rendererQuery = new RendererQuery(rendererRepository);\n\n        MessageFormat issueNewFormat       = getFormat(\"issueNewFormat\", UIUtils.getTaskNewColor());           \r\n        MessageFormat issueModifiedFormat  = getFormat(\"issueModifiedFormat\", UIUtils.getTaskModifiedColor()); \r\n\n        Color newHighlightColor            = new Color(0x00b400);\n        Color modifiedHighlightColor       = new Color(0x0000ff);\n        \n        RepositoryImpl repository = TestKit.getRepository(rendererRepository);\n        QueryImpl query = TestKit.getQuery(repository, rendererQuery);\n        \n        IssueTable issueTable = new IssueTable(\n                repository.getId(),\n                rendererQuery.getDisplayName(), \n                rendererQuery.getController(),\n                new ColumnDescriptor[] {new ColumnDescriptor(\"dummy\", String.class, \"dummy\", \"dummy\")}, \n                rendererQuery.isSaved());\n\n        \n        \r\n        RendererIssue rendererIssue = new RendererIssue(rendererRepository, \"\");\n        IssueProperty property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        rendererQuery.containsIssue = true;\n        boolean selected = false;\n        setIssueValues(rendererRepository, rendererIssue, Status.SEEN, true);\n        TableCellStyle defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        TableCellStyle result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        selected = true;\n        setIssueValues(rendererRepository, rendererIssue, Status.SEEN, true);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = false;\n        rendererIssue = new RendererIssue(rendererRepository, \"changed\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_MODIFIED, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(issueModifiedFormat, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#0000ff\\\">Modified</font> - this task is modified - changed</html>\", result.getTooltip());\n\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"changed\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_MODIFIED, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(modifiedHighlightColor, result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#0000ff\\\">Modified</font> - this task is modified - changed</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = false;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_NEW, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(issueNewFormat, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#00b400\\\">New</font> - this task is new</html>\", result.getTooltip());\n\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_NEW, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(newHighlightColor, result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#00b400\\\">New</font> - this task is new</html>\", result.getTooltip());\n\n    }\n","date":"2018-08-26 22:43:11","endLine":179,"groupId":"56250","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetCellStyle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/28/ceca8baae7199decf7414309dc20a95ff40a11.src","preCode":"    public void testGetCellStyle() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n        JTable table = new JTable();\n        RendererRepository rendererRepository = new RendererRepository();\n        RendererQuery rendererQuery = new RendererQuery(rendererRepository);\n\n        MessageFormat issueNewFormat       = getFormat(\"issueNewFormat\", UIUtils.getTaskNewColor());           \r\n        MessageFormat issueModifiedFormat  = getFormat(\"issueModifiedFormat\", UIUtils.getTaskModifiedColor()); \r\n\n        Color newHighlightColor            = new Color(0x00b400);\n        Color modifiedHighlightColor       = new Color(0x0000ff);\n        \n        RepositoryImpl repository = TestKit.getRepository(rendererRepository);\n        QueryImpl query = TestKit.getQuery(repository, rendererQuery);\n        \n        IssueTable issueTable = new IssueTable(\n                repository.getId(),\n                rendererQuery.getDisplayName(), \n                rendererQuery.getController(),\n                new ColumnDescriptor[] {new ColumnDescriptor(\"dummy\", String.class, \"dummy\", \"dummy\")}, \n                rendererQuery.isSaved());\n\n        \n        \r\n        RendererIssue rendererIssue = new RendererIssue(rendererRepository, \"\");\n        IssueProperty property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        rendererQuery.containsIssue = true;\n        boolean selected = false;\n        setIssueValues(rendererRepository, rendererIssue, Status.SEEN, true);\n        TableCellStyle defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        TableCellStyle result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        selected = true;\n        setIssueValues(rendererRepository, rendererIssue, Status.SEEN, true);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = false;\n        rendererIssue = new RendererIssue(rendererRepository, \"changed\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_MODIFIED, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(issueModifiedFormat, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#0000ff\\\">Modified</font> - this task is modified - changed</html>\", result.getTooltip());\n\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"changed\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_MODIFIED, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(modifiedHighlightColor, result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#0000ff\\\">Modified</font> - this task is modified - changed</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = false;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_NEW, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(issueNewFormat, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#00b400\\\">New</font> - this task is new</html>\", result.getTooltip());\n\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_NEW, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(newHighlightColor, result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#00b400\\\">New</font> - this task is new</html>\", result.getTooltip());\n\n    }\n","realPath":"ide/bugtracking.commons/test/unit/src/org/netbeans/modules/bugtracking/issuetable/QueryTableCellRendererTest.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2018-08-26 22:43:11","commitOrder":1,"curCode":"    public void testGetDefaultCellStyle() {\n        JTable table = new JTable();\n        RendererRepository rendererRepository = new RendererRepository();\n        RendererIssue issue = new RendererIssue(rendererRepository, \"\");\n        RendererQuery query = new RendererQuery(rendererRepository);\n        IssueProperty property = new RendererNode(issue, \"some value\", rendererRepository).createProperty();\n\n        IssueTable issueTable = new IssueTable(\n                TestKit.getRepository(rendererRepository).getId(),\n                query.getDisplayName(), \n                query.getController(),\n                new ColumnDescriptor[] {new ColumnDescriptor(\"dummy\", String.class, \"dummy\", \"dummy\")}, \n                query.isSaved());\n        \n        TableCellStyle result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, true, 0);\n        assertEquals(table.getSelectionBackground(), result.getBackground()); \r\n        assertEquals(Color.WHITE, result.getForeground());\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n\n        result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, false, 0);\n        assertEquals(table.getForeground(), result.getForeground()); \r\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n        Color unevenBackground = result.getBackground();\n\n        result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, false, 1);\n        assertEquals(table.getForeground(), result.getForeground()); \r\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n        Color evenBackground = result.getBackground();\n\n        assertNotSame(evenBackground, unevenBackground);\n        assertTrue(evenBackground.equals(Color.WHITE) || unevenBackground.equals(Color.WHITE));\n        assertTrue(evenBackground.equals(new Color(0xf3f6fd)) || unevenBackground.equals(new Color(0xf3f6fd)));\n    }\n","date":"2018-08-26 22:43:11","endLine":221,"groupId":"56248","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDefaultCellStyle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/28/ceca8baae7199decf7414309dc20a95ff40a11.src","preCode":"    public void testGetDefaultCellStyle() {\n        JTable table = new JTable();\n        RendererRepository rendererRepository = new RendererRepository();\n        RendererIssue issue = new RendererIssue(rendererRepository, \"\");\n        RendererQuery query = new RendererQuery(rendererRepository);\n        IssueProperty property = new RendererNode(issue, \"some value\", rendererRepository).createProperty();\n\n        IssueTable issueTable = new IssueTable(\n                TestKit.getRepository(rendererRepository).getId(),\n                query.getDisplayName(), \n                query.getController(),\n                new ColumnDescriptor[] {new ColumnDescriptor(\"dummy\", String.class, \"dummy\", \"dummy\")}, \n                query.isSaved());\n        \n        TableCellStyle result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, true, 0);\n        assertEquals(table.getSelectionBackground(), result.getBackground()); \r\n        assertEquals(Color.WHITE, result.getForeground());\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n\n        result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, false, 0);\n        assertEquals(table.getForeground(), result.getForeground()); \r\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n        Color unevenBackground = result.getBackground();\n\n        result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, false, 1);\n        assertEquals(table.getForeground(), result.getForeground()); \r\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n        Color evenBackground = result.getBackground();\n\n        assertNotSame(evenBackground, unevenBackground);\n        assertTrue(evenBackground.equals(Color.WHITE) || unevenBackground.equals(Color.WHITE));\n        assertTrue(evenBackground.equals(new Color(0xf3f6fd)) || unevenBackground.equals(new Color(0xf3f6fd)));\n    }\n","realPath":"ide/bugtracking.commons/test/unit/src/org/netbeans/modules/bugtracking/issuetable/QueryTableCellRendererTest.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"}],"commitId":"0f2e98d513deaedccef831ee9cfc08d09f3650b6","commitMessage":"@@@Merge pull request #791 from ralphbenjamin/NETBEANS-1172_move_ide_modules_to_ide_subdirectory\n\n[NETBEANS-1172] move ide modules to ide subdirectory","date":"2018-08-26 22:43:11","modifiedFileCount":"0","status":"B","submitter":"Geertjan Wielenga"},{"authorTime":"2019-12-01 05:00:02","codes":[{"authorDate":"2019-12-01 05:00:02","commitOrder":2,"curCode":"    public void testGetCellStyle() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n        JTable table = new JTable();\n        RendererRepository rendererRepository = new RendererRepository();\n        RendererQuery rendererQuery = new RendererQuery(rendererRepository);\n\n        MessageFormat issueNewFormat       = getFormat(\"issueNewFormat\", UIUtils.getTaskNewColor());           \r\n        MessageFormat issueModifiedFormat  = getFormat(\"issueModifiedFormat\", UIUtils.getTaskModifiedColor()); \r\n\n        Color newHighlightColor            = new Color(0x00b400);\n        Color modifiedHighlightColor       = new Color(0x0000ff);\n        \n        RepositoryImpl repository = TestKit.getRepository(rendererRepository);\n        QueryImpl query = TestKit.getQuery(repository, rendererQuery);\n        \n        IssueTable issueTable = new IssueTable(\n                repository.getId(),\n                rendererQuery.getDisplayName(), \n                rendererQuery.getController(),\n                new ColumnDescriptor[] {new ColumnDescriptor(\"dummy\", String.class, \"dummy\", \"dummy\")}, \n                rendererQuery.isSaved());\n\n        \n        \r\n        RendererIssue rendererIssue = new RendererIssue(rendererRepository, \"\");\n        RendererNode.RendererIssueProperty property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        rendererQuery.containsIssue = true;\n        boolean selected = false;\n        setIssueValues(rendererRepository, rendererIssue, Status.SEEN, true);\n        TableCellStyle defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        TableCellStyle result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        selected = true;\n        setIssueValues(rendererRepository, rendererIssue, Status.SEEN, true);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = false;\n        rendererIssue = new RendererIssue(rendererRepository, \"changed\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_MODIFIED, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(issueModifiedFormat, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#0000ff\\\">Modified</font> - this task is modified - changed</html>\", result.getTooltip());\n\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"changed\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_MODIFIED, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(modifiedHighlightColor, result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#0000ff\\\">Modified</font> - this task is modified - changed</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = false;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_NEW, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(issueNewFormat, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#00b400\\\">New</font> - this task is new</html>\", result.getTooltip());\n\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_NEW, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(newHighlightColor, result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#00b400\\\">New</font> - this task is new</html>\", result.getTooltip());\n\n    }\n","date":"2019-12-10 07:47:07","endLine":179,"groupId":"103600","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetCellStyle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/78/54bb136fa0179f414a94c87f27ec6f0036b805.src","preCode":"    public void testGetCellStyle() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n        JTable table = new JTable();\n        RendererRepository rendererRepository = new RendererRepository();\n        RendererQuery rendererQuery = new RendererQuery(rendererRepository);\n\n        MessageFormat issueNewFormat       = getFormat(\"issueNewFormat\", UIUtils.getTaskNewColor());           \r\n        MessageFormat issueModifiedFormat  = getFormat(\"issueModifiedFormat\", UIUtils.getTaskModifiedColor()); \r\n\n        Color newHighlightColor            = new Color(0x00b400);\n        Color modifiedHighlightColor       = new Color(0x0000ff);\n        \n        RepositoryImpl repository = TestKit.getRepository(rendererRepository);\n        QueryImpl query = TestKit.getQuery(repository, rendererQuery);\n        \n        IssueTable issueTable = new IssueTable(\n                repository.getId(),\n                rendererQuery.getDisplayName(), \n                rendererQuery.getController(),\n                new ColumnDescriptor[] {new ColumnDescriptor(\"dummy\", String.class, \"dummy\", \"dummy\")}, \n                rendererQuery.isSaved());\n\n        \n        \r\n        RendererIssue rendererIssue = new RendererIssue(rendererRepository, \"\");\n        IssueProperty property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        rendererQuery.containsIssue = true;\n        boolean selected = false;\n        setIssueValues(rendererRepository, rendererIssue, Status.SEEN, true);\n        TableCellStyle defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        TableCellStyle result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        selected = true;\n        setIssueValues(rendererRepository, rendererIssue, Status.SEEN, true);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = false;\n        rendererIssue = new RendererIssue(rendererRepository, \"changed\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_MODIFIED, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(issueModifiedFormat, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#0000ff\\\">Modified</font> - this task is modified - changed</html>\", result.getTooltip());\n\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"changed\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_MODIFIED, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(modifiedHighlightColor, result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#0000ff\\\">Modified</font> - this task is modified - changed</html>\", result.getTooltip());\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = false;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_NEW, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(defaultStyle.getBackground(), result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(issueNewFormat, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#00b400\\\">New</font> - this task is new</html>\", result.getTooltip());\n\n\n        \r\n        rendererQuery.containsIssue = true;\n        selected = true;\n        rendererIssue = new RendererIssue(rendererRepository, \"\");\n        property = new RendererNode(rendererIssue, \"some value\", rendererRepository).createProperty();\n        setIssueValues(rendererRepository, rendererIssue, Status.INCOMING_NEW, false);\n        result = QueryTableCellRenderer.getCellStyle(table, issueTable, property, selected, 0);\n        defaultStyle = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, selected, 0);\n        assertEquals(newHighlightColor, result.getBackground());\n        assertEquals(defaultStyle.getForeground(), result.getForeground());\n        assertEquals(null, result.getFormat());\n        assertEquals(\"<html>some value<br><font color=\\\"#00b400\\\">New</font> - this task is new</html>\", result.getTooltip());\n\n    }\n","realPath":"ide/bugtracking.commons/test/unit/src/org/netbeans/modules/bugtracking/issuetable/QueryTableCellRendererTest.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2019-12-01 05:00:02","commitOrder":2,"curCode":"    public void testGetDefaultCellStyle() {\n        JTable table = new JTable();\n        RendererRepository rendererRepository = new RendererRepository();\n        RendererIssue issue = new RendererIssue(rendererRepository, \"\");\n        RendererQuery query = new RendererQuery(rendererRepository);\n        RendererNode.RendererIssueProperty property = new RendererNode(issue, \"some value\", rendererRepository).createProperty();\n\n        IssueTable issueTable = new IssueTable(\n                TestKit.getRepository(rendererRepository).getId(),\n                query.getDisplayName(), \n                query.getController(),\n                new ColumnDescriptor[] {new ColumnDescriptor(\"dummy\", String.class, \"dummy\", \"dummy\")}, \n                query.isSaved());\n        \n        TableCellStyle result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, true, 0);\n        assertEquals(table.getSelectionBackground(), result.getBackground()); \r\n        assertEquals(Color.WHITE, result.getForeground());\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n\n        result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, false, 0);\n        assertEquals(table.getForeground(), result.getForeground()); \r\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n        Color unevenBackground = result.getBackground();\n\n        result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, false, 1);\n        assertEquals(table.getForeground(), result.getForeground()); \r\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n        Color evenBackground = result.getBackground();\n\n        assertNotSame(evenBackground, unevenBackground);\n        assertTrue(evenBackground.equals(Color.WHITE) || unevenBackground.equals(Color.WHITE));\n        assertTrue(evenBackground.equals(new Color(0xf3f6fd)) || unevenBackground.equals(new Color(0xf3f6fd)));\n    }\n","date":"2019-12-10 07:47:07","endLine":221,"groupId":"103600","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testGetDefaultCellStyle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-netbeans-10-0.7/blobInfo/CC_OUT/blobs/78/54bb136fa0179f414a94c87f27ec6f0036b805.src","preCode":"    public void testGetDefaultCellStyle() {\n        JTable table = new JTable();\n        RendererRepository rendererRepository = new RendererRepository();\n        RendererIssue issue = new RendererIssue(rendererRepository, \"\");\n        RendererQuery query = new RendererQuery(rendererRepository);\n        IssueProperty property = new RendererNode(issue, \"some value\", rendererRepository).createProperty();\n\n        IssueTable issueTable = new IssueTable(\n                TestKit.getRepository(rendererRepository).getId(),\n                query.getDisplayName(), \n                query.getController(),\n                new ColumnDescriptor[] {new ColumnDescriptor(\"dummy\", String.class, \"dummy\", \"dummy\")}, \n                query.isSaved());\n        \n        TableCellStyle result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, true, 0);\n        assertEquals(table.getSelectionBackground(), result.getBackground()); \r\n        assertEquals(Color.WHITE, result.getForeground());\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n\n        result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, false, 0);\n        assertEquals(table.getForeground(), result.getForeground()); \r\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n        Color unevenBackground = result.getBackground();\n\n        result = QueryTableCellRenderer.getDefaultCellStyle(table, issueTable, property, false, 1);\n        assertEquals(table.getForeground(), result.getForeground()); \r\n        assertNull(result.getFormat());\n        assertNull(result.getTooltip());\n        Color evenBackground = result.getBackground();\n\n        assertNotSame(evenBackground, unevenBackground);\n        assertTrue(evenBackground.equals(Color.WHITE) || unevenBackground.equals(Color.WHITE));\n        assertTrue(evenBackground.equals(new Color(0xf3f6fd)) || unevenBackground.equals(new Color(0xf3f6fd)));\n    }\n","realPath":"ide/bugtracking.commons/test/unit/src/org/netbeans/modules/bugtracking/issuetable/QueryTableCellRendererTest.java","repoName":"netbeans","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"0a0f0b707430f185ff54381dc1cd6fd35e305089","commitMessage":"@@@[NETBEANS-3503] Fixed compiler warnings concerning rawtypes IssueNode.IssueProperty\n","date":"2019-12-10 07:47:07","modifiedFileCount":"4","status":"M","submitter":"Martin Kla?hn"}]
