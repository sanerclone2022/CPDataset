[{"authorTime":"2017-07-15 06:34:00","codes":[{"authorDate":"2017-07-15 06:34:00","commitOrder":1,"curCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","date":"2017-07-15 06:34:00","endLine":319,"groupId":"35","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrency1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/78/6e704ecdaa7ac05dc98b6792732d0e91da74bf.src","preCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"B"},{"authorDate":"2017-07-15 06:34:00","commitOrder":1,"curCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        Assert.assertEquals(manager.debugCount.get(), 1);\n    }\n","date":"2017-07-15 06:34:00","endLine":348,"groupId":"1324","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrency2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/78/6e704ecdaa7ac05dc98b6792732d0e91da74bf.src","preCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        Assert.assertEquals(manager.debugCount.get(), 1);\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"B"}],"commitId":"9385d0490d8c684a602b4c57489e39941a9a178b","commitMessage":"@@@more tests\n","date":"2017-07-15 06:34:00","modifiedFileCount":"1","status":"B","submitter":"randgalt"},{"authorTime":"2017-07-22 00:12:38","codes":[{"authorDate":"2017-07-15 06:34:00","commitOrder":2,"curCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","date":"2017-07-15 06:34:00","endLine":319,"groupId":"35","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrency1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/78/6e704ecdaa7ac05dc98b6792732d0e91da74bf.src","preCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"N"},{"authorDate":"2017-07-22 00:12:38","commitOrder":2,"curCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException, \"Should throw TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        Assert.assertEquals(manager.debugCount.get(), 1);\n    }\n","date":"2017-07-22 00:12:38","endLine":348,"groupId":"1324","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrency2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c7/81f60784ae4827f53374ab53574447a9e2f7b4.src","preCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        Assert.assertEquals(manager.debugCount.get(), 1);\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"}],"commitId":"71ed99d3d8a6c3b7f6a54b55b3b052daf927f8e0","commitMessage":"@@@Include the unexpected exception in the assertion\n","date":"2017-07-22 00:12:38","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2017-07-22 00:26:47","codes":[{"authorDate":"2017-07-22 00:26:47","commitOrder":3,"curCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        Assert.assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","date":"2017-07-22 00:26:47","endLine":322,"groupId":"177","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrency1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/06/3b96122a116f7e027be18d924b53e76f751601.src","preCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2017-07-22 00:26:47","commitOrder":3,"curCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        Assert.assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException, \"Should throw TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        Assert.assertEquals(manager.debugCount.get(), 1);\n    }\n","date":"2017-07-22 00:26:47","endLine":352,"groupId":"1324","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrency2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/06/3b96122a116f7e027be18d924b53e76f751601.src","preCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException, \"Should throw TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        Assert.assertEquals(manager.debugCount.get(), 1);\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"3ad6ca7658b92d38417c47be536ddf3aa8dc61f1","commitMessage":"@@@Avoid test flakiness by not starting the second migration until the first is in filter()\n","date":"2017-07-22 00:26:47","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2017-07-22 00:26:47","codes":[{"authorDate":"2017-07-22 00:32:51","commitOrder":4,"curCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        Assert.assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException, \"Should throw AsyncWrappers.TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","date":"2017-07-22 00:32:51","endLine":322,"groupId":"177","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrency1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/bc/724f5f37e4245752014a1aedee737656fc2caa.src","preCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        Assert.assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException);\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2017-07-22 00:26:47","commitOrder":4,"curCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        Assert.assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException, \"Should throw TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        Assert.assertEquals(manager.debugCount.get(), 1);\n    }\n","date":"2017-07-22 00:26:47","endLine":352,"groupId":"1324","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrency2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/06/3b96122a116f7e027be18d924b53e76f751601.src","preCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        Assert.assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException, \"Should throw TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        Assert.assertEquals(manager.debugCount.get(), 1);\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"N"}],"commitId":"7b780b5b01cdd5ad75ac9b42bfd276d73cb42c3b","commitMessage":"@@@Updated assert message for testConcurrency1 as well\n","date":"2017-07-22 00:32:51","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException, \"Should throw AsyncWrappers.TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        assertArrayEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","date":"2020-10-20 21:18:25","endLine":330,"groupId":"1013","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testConcurrency1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/00/ef28baaec02f9fe4e251246f172dbdb8e58cfa.src","preCode":"    public void testConcurrency1() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        Assert.assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        MigrationManager manager2 = new MigrationManager(client, LOCK_PATH, META_DATA_PATH, executor, Duration.ofMillis(timing.forSleepingABit().milliseconds()));\n        try\n        {\n            complete(manager2.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException, \"Should throw AsyncWrappers.TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            assertTrue(Throwables.getRootCause(e) instanceof TimeoutException, \"Should throw TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        assertArrayEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        assertEquals(manager.debugCount.get(), 1);\n    }\n","date":"2020-10-20 21:18:25","endLine":360,"groupId":"1013","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testConcurrency2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/00/ef28baaec02f9fe4e251246f172dbdb8e58cfa.src","preCode":"    public void testConcurrency2() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\");\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\", \"first\".getBytes());\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        CountDownLatch latch = new CountDownLatch(1);\n        filterLatch.set(latch);\n        CompletionStage<Void> first = manager.migrate(migrationSet);\n        Assert.assertTrue(timing.awaitLatch(filterIsSetLatch));\n\n        CompletionStage<Void> second = manager.migrate(migrationSet);\n        try\n        {\n            second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException, \"Should throw TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)));\n        }\n\n        latch.countDown();\n        complete(first);\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"), \"first\".getBytes());\n        complete(second);\n        Assert.assertEquals(manager.debugCount.get(), 1);\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
