[{"authorTime":"2013-06-10 23:50:37","codes":[{"authorDate":"2013-06-10 23:50:37","commitOrder":1,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(5, TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            killSession(curator);\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2013-06-10 23:50:37","endLine":141,"groupId":"1309","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/03/3ec1fda5b29d104268e1b6b21c7e9911fd5bce.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(5, TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            killSession(curator);\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2013-06-10 23:50:37","commitOrder":1,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(5, TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2013-06-10 23:50:37","endLine":239,"groupId":"131","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/03/3ec1fda5b29d104268e1b6b21c7e9911fd5bce.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(5, TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"}],"commitId":"e5c7755c9f5d7e1cf0cb3f29545b875d6bd55263","commitMessage":"@@@Merge branch 'CURATOR-25' into 2.0.2-incubating\n","date":"2013-06-10 23:50:37","modifiedFileCount":"0","status":"B","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2014-05-23 22:46:02","commitOrder":2,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            killSession(curator);\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":303,"groupId":"811","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a0/7ee1418ab1024b7b6143ed4376c3de3d3957c8.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(5, TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            killSession(curator);\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":2,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":401,"groupId":"131","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a0/7ee1418ab1024b7b6143ed4376c3de3d3957c8.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(5, TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"0bffdb020d78d8c6599a1eb9c2c702f9dd1192bd","commitMessage":"@@@Merge branch 'master' into CURATOR-105\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/PathChildrenCache.java\n","date":"2014-05-23 22:46:02","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2015-09-07 14:49:43","commitOrder":3,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugReconnectLatch = new CountDownLatch(1);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n            node.debugReconnectLatch.countDown();\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2015-09-07 14:49:43","endLine":321,"groupId":"811","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3a/0d5643bd4320f4e7fe150dc0da03504efb00ac.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            killSession(curator);\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":3,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":401,"groupId":"131","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a0/7ee1418ab1024b7b6143ed4376c3de3d3957c8.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"N"}],"commitId":"940e845d7e1d73b1e4804b6f37ee1ecddce7b67f","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-248\n","date":"2015-09-07 14:49:43","modifiedFileCount":"6","status":"M","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2015-09-09 02:00:09","commitOrder":4,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugReconnectLatch = new CountDownLatch(1);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugReconnectLatch.countDown();\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2015-09-09 02:00:09","endLine":321,"groupId":"811","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e1/82ec04f6f277f81b273199a65e2b47b8538f26.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugReconnectLatch = new CountDownLatch(1);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n            node.debugReconnectLatch.countDown();\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":4,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":401,"groupId":"131","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a0/7ee1418ab1024b7b6143ed4376c3de3d3957c8.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"N"}],"commitId":"48824ebe0df4f384fdb1542d0d9768798c33c058","commitMessage":"@@@Use forSessionSleep after session killed\n","date":"2015-09-09 02:00:09","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2015-09-28 02:31:32","commitOrder":5,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2015-09-28 02:31:32","endLine":330,"groupId":"811","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/0e/e6dec6ad6854a8ff38d78e5d377f2449be9768.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugReconnectLatch = new CountDownLatch(1);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugReconnectLatch.countDown();\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":5,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":401,"groupId":"131","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a0/7ee1418ab1024b7b6143ed4376c3de3d3957c8.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"N"}],"commitId":"cb34e6f6a41b08c9d4e6179d9f893b0e48e7860c","commitMessage":"@@@continued work on tests.  etc.\n","date":"2015-09-28 02:31:32","modifiedFileCount":"9","status":"M","submitter":"randgalt"},{"authorTime":"2015-10-11 05:49:33","codes":[{"authorDate":"2015-10-11 05:49:33","commitOrder":6,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2015-10-11 05:49:33","endLine":329,"groupId":"361","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/fe/2dd93aecb732c5e6c3df00ead13ac4d4c3faf2.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"},{"authorDate":"2015-10-11 05:49:33","commitOrder":6,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2015-10-11 05:49:33","endLine":431,"groupId":"366","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/fe/2dd93aecb732c5e6c3df00ead13ac4d4c3faf2.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"}],"commitId":"208317ab0110663745a5e8e76fd9a8bca634082e","commitMessage":"@@@Trying to make tests more reliable\n","date":"2015-10-11 05:49:33","modifiedFileCount":"4","status":"M","submitter":"randgalt"},{"authorTime":"2015-10-11 05:49:33","codes":[{"authorDate":"2015-10-12 04:45:07","commitOrder":7,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deletedOrSetData();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2015-10-12 04:45:07","endLine":334,"groupId":"361","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/20/cc028ae0aa29777d7508c1186edcf59dc6de71.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deleted();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2015-10-11 05:49:33","commitOrder":7,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2015-10-11 05:49:33","endLine":431,"groupId":"366","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/fe/2dd93aecb732c5e6c3df00ead13ac4d4c3faf2.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"}],"commitId":"2fa711c5056741c39203cb77dda05773133bcf80","commitMessage":"@@@PEM can generate delete or data change. Tests were only watching for delete\n","date":"2015-10-12 04:45:07","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2016-01-19 10:05:41","codes":[{"authorDate":"2016-01-19 10:05:41","commitOrder":8,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deletedOrSetData();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2016-01-19 10:05:41","endLine":340,"groupId":"361","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/15/c5f2e613bfd5da1c903a11c8f32ed059078b88.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deletedOrSetData();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"},{"authorDate":"2016-01-19 10:05:41","commitOrder":8,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2016-01-19 10:05:41","endLine":487,"groupId":"366","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/15/c5f2e613bfd5da1c903a11c8f32ed059078b88.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"M"}],"commitId":"c6a22ba508f9227fe1c657f93e3cc77d8bc17e3e","commitMessage":"@@@Merge branch 'master' into CURATOR-3.0\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/nodes/PersistentEphemeralNode.java\n","date":"2016-01-19 10:05:41","modifiedFileCount":"6","status":"M","submitter":"randgalt"},{"authorTime":"2016-01-19 10:05:41","codes":[{"authorDate":"2017-07-22 03:27:07","commitOrder":9,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deletedOrSetData();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession2.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2017-07-22 03:27:07","endLine":342,"groupId":"361","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/03/665c5b9692b309fbf5c9fcde6773d58afb3e1f.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deletedOrSetData();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"},{"authorDate":"2016-01-19 10:05:41","commitOrder":9,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2016-01-19 10:05:41","endLine":487,"groupId":"366","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/15/c5f2e613bfd5da1c903a11c8f32ed059078b88.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"N"}],"commitId":"31d7f9a2040975dee08cb685d61cceb7015f9e32","commitMessage":"@@@Merge branch 'master' into CURATOR-426\n","date":"2017-07-22 03:27:07","modifiedFileCount":"35","status":"M","submitter":"randgalt"},{"authorTime":"2016-01-19 10:05:41","codes":[{"authorDate":"2019-02-11 20:47:18","commitOrder":10,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deletedOrSetData();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            Compatibility.injectSessionExpiration(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2019-02-11 20:47:18","endLine":342,"groupId":"361","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/87/585afb398ba12847ac5ea171b84ffb909bb911.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deletedOrSetData();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            KillSession2.kill(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"},{"authorDate":"2016-01-19 10:05:41","commitOrder":10,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2016-01-19 10:05:41","endLine":487,"groupId":"366","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/15/c5f2e613bfd5da1c903a11c8f32ed059078b88.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"N"}],"commitId":"973cb0ba6825efca27095e56948af6a3c8455abe","commitMessage":"@@@Merge branch 'CURATOR-498'\n","date":"2019-02-11 20:47:18","modifiedFileCount":"22","status":"M","submitter":"randgalt"},{"authorTime":"2016-01-19 10:05:41","codes":[{"authorDate":"2020-03-15 07:13:56","commitOrder":11,"curCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deletedOrSetData();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            curator.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2020-03-15 07:13:56","endLine":341,"groupId":"10214","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletesNodeWhenSessionDisconnects","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/7a/cde0634d262c633b412794e90e1433936f1f8d.src","preCode":"    public void testDeletesNodeWhenSessionDisconnects() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        CuratorFramework observer = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertNodeExists(observer, node.getActualPath());\n\n            \r\n            Trigger deletedTrigger = Trigger.deletedOrSetData();\n            observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath());\n\n            node.debugCreateNodeLatch = new CountDownLatch(1);\n            Compatibility.injectSessionExpiration(curator.getZookeeperClient().getZooKeeper());\n\n            \r\n            assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(), TimeUnit.SECONDS));\n            node.debugCreateNodeLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"},{"authorDate":"2016-01-19 10:05:41","commitOrder":11,"curCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2016-01-19 10:05:41","endLine":487,"groupId":"10214","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecreatesNodeWhenItGetsDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/15/c5f2e613bfd5da1c903a11c8f32ed059078b88.src","preCode":"    public void testRecreatesNodeWhenItGetsDeleted() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, new byte[0]);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            String originalNode = node.getActualPath();\n            assertNodeExists(curator, originalNode);\n\n            \r\n            curator.delete().forPath(originalNode);\n\n            \r\n            \r\n            Trigger createdWatchTrigger = Trigger.created();\n            Stat stat = curator.checkExists().usingWatcher(createdWatchTrigger).forPath(originalNode);\n            assertTrue(stat != null || createdWatchTrigger.firedWithin(timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"N"}],"commitId":"d1a9234ecae47e3704037c839e6041931c24d1f4","commitMessage":"@@@CURATOR-558 (#344)\n\nPt1 of change\n\n* Remove the ZK 3.4 compatibility module and code\n* Remove the deprecated ListenerContainer that leaks Guava classes into our APIs\n* Remove Exhibitor support\n* Various minor changes/cleanups\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-15 07:13:56","modifiedFileCount":"45","status":"M","submitter":"Jordan Zimmerman"}]
