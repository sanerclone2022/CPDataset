[{"authorTime":"2015-04-28 06:09:46","codes":[{"authorDate":"2015-04-28 06:09:46","commitOrder":1,"curCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2015-04-28 06:09:46","endLine":492,"groupId":"781","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDataWhenNodeExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1c/66271b0e313039f5bd5bcb3dedd090e56dd155.src","preCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"B"},{"authorDate":"2015-04-28 06:09:46","commitOrder":1,"curCode":"    public void testSetDataWhenDisconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        \n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n            \n            server.stop();\n            \n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            \n            Watcher watcher = new Watcher()\n            {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event)\n\t\t\t\t{\n\t\t\t\t\tif ( event.getType() == EventType.NodeDataChanged )\n\t\t\t\t\t{\n\t\t\t\t\t\tdataUpdateLatch.countDown();\n\t\t\t\t\t}\n\t\t\t\t}            \t\n            };\n            \n            curator.getData().usingWatcher(watcher).inBackground().forPath(node.getActualPath());\n            \n            node.setData(updatedData);\n            server.restart();\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n                       \n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            node.close();\n        }    \t\n    }\n","date":"2015-04-28 06:09:46","endLine":538,"groupId":"781","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetDataWhenDisconnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1c/66271b0e313039f5bd5bcb3dedd090e56dd155.src","preCode":"    public void testSetDataWhenDisconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        \n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n            \n            server.stop();\n            \n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            \n            Watcher watcher = new Watcher()\n            {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event)\n\t\t\t\t{\n\t\t\t\t\tif ( event.getType() == EventType.NodeDataChanged )\n\t\t\t\t\t{\n\t\t\t\t\t\tdataUpdateLatch.countDown();\n\t\t\t\t\t}\n\t\t\t\t}            \t\n            };\n            \n            curator.getData().usingWatcher(watcher).inBackground().forPath(node.getActualPath());\n            \n            node.setData(updatedData);\n            server.restart();\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n                       \n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            node.close();\n        }    \t\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"B"}],"commitId":"06af6ff1cc7f4f4de89571dfd7024efe7fd03d38","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/curator\n","date":"2015-04-28 06:09:46","modifiedFileCount":"2","status":"B","submitter":"randgalt"},{"authorTime":"2015-10-11 05:49:33","codes":[{"authorDate":"2015-10-11 05:49:33","commitOrder":2,"curCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2015-10-11 05:49:33","endLine":508,"groupId":"781","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDataWhenNodeExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/fe/2dd93aecb732c5e6c3df00ead13ac4d4c3faf2.src","preCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"M"},{"authorDate":"2015-10-11 05:49:33","commitOrder":2,"curCode":"    public void testSetDataWhenDisconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        \n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n            \n            server.stop();\n            \n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            \n            Watcher watcher = new Watcher()\n            {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event)\n\t\t\t\t{\n\t\t\t\t\tif ( event.getType() == EventType.NodeDataChanged )\n\t\t\t\t\t{\n\t\t\t\t\t\tdataUpdateLatch.countDown();\n\t\t\t\t\t}\n\t\t\t\t}            \t\n            };\n            \n            curator.getData().usingWatcher(watcher).inBackground().forPath(node.getActualPath());\n            \n            node.setData(updatedData);\n            server.restart();\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n                       \n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }    \t\n    }\n","date":"2015-10-11 05:49:33","endLine":554,"groupId":"781","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetDataWhenDisconnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/fe/2dd93aecb732c5e6c3df00ead13ac4d4c3faf2.src","preCode":"    public void testSetDataWhenDisconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        \n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n            \n            server.stop();\n            \n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            \n            Watcher watcher = new Watcher()\n            {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event)\n\t\t\t\t{\n\t\t\t\t\tif ( event.getType() == EventType.NodeDataChanged )\n\t\t\t\t\t{\n\t\t\t\t\t\tdataUpdateLatch.countDown();\n\t\t\t\t\t}\n\t\t\t\t}            \t\n            };\n            \n            curator.getData().usingWatcher(watcher).inBackground().forPath(node.getActualPath());\n            \n            node.setData(updatedData);\n            server.restart();\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n                       \n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            node.close();\n        }    \t\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":511,"status":"M"}],"commitId":"208317ab0110663745a5e8e76fd9a8bca634082e","commitMessage":"@@@Trying to make tests more reliable\n","date":"2015-10-11 05:49:33","modifiedFileCount":"4","status":"M","submitter":"randgalt"},{"authorTime":"2016-01-19 10:05:41","codes":[{"authorDate":"2016-01-19 10:05:41","commitOrder":3,"curCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2016-01-19 10:05:41","endLine":563,"groupId":"10219","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDataWhenNodeExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/15/c5f2e613bfd5da1c903a11c8f32ed059078b88.src","preCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"M"},{"authorDate":"2016-01-19 10:05:41","commitOrder":3,"curCode":"    public void testSetDataWhenDisconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        \n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        try\n        {\n            node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n            \n            server.stop();\n            \n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            \n            Watcher watcher = new Watcher()\n            {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event)\n\t\t\t\t{\n\t\t\t\t\tif ( event.getType() == EventType.NodeDataChanged )\n\t\t\t\t\t{\n\t\t\t\t\t\tdataUpdateLatch.countDown();\n\t\t\t\t\t}\n\t\t\t\t}            \t\n            };\n            \n            curator.getData().usingWatcher(watcher).inBackground().forPath(node.getActualPath());\n            \n            node.setData(updatedData);\n            server.restart();\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n                       \n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }    \t\n    }\n","date":"2016-01-19 10:05:41","endLine":610,"groupId":"10219","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetDataWhenDisconnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/15/c5f2e613bfd5da1c903a11c8f32ed059078b88.src","preCode":"    public void testSetDataWhenDisconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        \n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n            \n            server.stop();\n            \n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            \n            Watcher watcher = new Watcher()\n            {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event)\n\t\t\t\t{\n\t\t\t\t\tif ( event.getType() == EventType.NodeDataChanged )\n\t\t\t\t\t{\n\t\t\t\t\t\tdataUpdateLatch.countDown();\n\t\t\t\t\t}\n\t\t\t\t}            \t\n            };\n            \n            curator.getData().usingWatcher(watcher).inBackground().forPath(node.getActualPath());\n            \n            node.setData(updatedData);\n            server.restart();\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n                       \n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }    \t\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"c6a22ba508f9227fe1c657f93e3cc77d8bc17e3e","commitMessage":"@@@Merge branch 'master' into CURATOR-3.0\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/nodes/PersistentEphemeralNode.java\n","date":"2016-01-19 10:05:41","modifiedFileCount":"6","status":"M","submitter":"randgalt"}]
