[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    private void notifyListeners()\n    {\n        listeners.forEach\n        (\n            new Function<SharedValueListener, Void>()\n            {\n                @Override\n                public Void apply(SharedValueListener listener)\n                {\n                    try\n                    {\n                        listener.valueHasChanged(SharedValue.this, value);\n                    }\n                    catch ( Exception e )\n                    {\n                        log.error(\"From SharedValue listener\", e);\n                    }\n                    return null;\n                }\n            }\n        );\n    }\n","date":"2013-03-08 06:54:59","endLine":216,"groupId":"1148","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"notifyListeners","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/19/14f856cacda10f4b89db4ddb86db38fdc801d4.src","preCode":"    private void notifyListeners()\n    {\n        listeners.forEach\n        (\n            new Function<SharedValueListener, Void>()\n            {\n                @Override\n                public Void apply(SharedValueListener listener)\n                {\n                    try\n                    {\n                        listener.valueHasChanged(SharedValue.this, value);\n                    }\n                    catch ( Exception e )\n                    {\n                        log.error(\"From SharedValue listener\", e);\n                    }\n                    return null;\n                }\n            }\n        );\n    }\n","realPath":"curator-recipes/src/main/java/org/apache/curator/framework/recipes/shared/SharedValue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    private void setNewData(ChildData newData) throws InterruptedException\n    {\n        ChildData   previousData = data.getAndSet(newData);\n        if ( !Objects.equal(previousData, newData) )\n        {\n            listeners.forEach\n            (\n                new Function<NodeCacheListener, Void>()\n                {\n                    @Override\n                    public Void apply(NodeCacheListener listener)\n                    {\n                        try\n                        {\n                            listener.nodeChanged();\n                        }\n                        catch ( Exception e )\n                        {\n                            log.error(\"Calling listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n\n            if ( rebuildTestExchanger != null )\n            {\n                try\n                {\n                    rebuildTestExchanger.exchange(new Object());\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":314,"groupId":"2077","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setNewData","params":"(ChildDatanewData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9b/fde4c8dea36cbe1c246731a31e52ff442d4da9.src","preCode":"    private void setNewData(ChildData newData) throws InterruptedException\n    {\n        ChildData   previousData = data.getAndSet(newData);\n        if ( !Objects.equal(previousData, newData) )\n        {\n            listeners.forEach\n            (\n                new Function<NodeCacheListener, Void>()\n                {\n                    @Override\n                    public Void apply(NodeCacheListener listener)\n                    {\n                        try\n                        {\n                            listener.nodeChanged();\n                        }\n                        catch ( Exception e )\n                        {\n                            log.error(\"Calling listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n\n            if ( rebuildTestExchanger != null )\n            {\n                try\n                {\n                    rebuildTestExchanger.exchange(new Object());\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n","realPath":"curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/NodeCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2014-10-03 02:04:26","commitOrder":2,"curCode":"    private void notifyListeners()\n    {\n        final byte[] localValue = getValue();\n        listeners.forEach\n            (\n                new Function<SharedValueListener, Void>()\n                {\n                    @Override\n                    public Void apply(SharedValueListener listener)\n                    {\n                        try\n                        {\n                            listener.valueHasChanged(SharedValue.this, localValue);\n                        }\n                        catch ( Exception e )\n                        {\n                            log.error(\"From SharedValue listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n    }\n","date":"2014-10-03 02:04:26","endLine":257,"groupId":"1148","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"notifyListeners","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/80/fa53f0fb1e2631bd3c86459cd400a2c31dd492.src","preCode":"    private void notifyListeners()\n    {\n        listeners.forEach\n        (\n            new Function<SharedValueListener, Void>()\n            {\n                @Override\n                public Void apply(SharedValueListener listener)\n                {\n                    try\n                    {\n                        listener.valueHasChanged(SharedValue.this, value);\n                    }\n                    catch ( Exception e )\n                    {\n                        log.error(\"From SharedValue listener\", e);\n                    }\n                    return null;\n                }\n            }\n        );\n    }\n","realPath":"curator-recipes/src/main/java/org/apache/curator/framework/recipes/shared/SharedValue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2013-03-08 06:54:59","commitOrder":2,"curCode":"    private void setNewData(ChildData newData) throws InterruptedException\n    {\n        ChildData   previousData = data.getAndSet(newData);\n        if ( !Objects.equal(previousData, newData) )\n        {\n            listeners.forEach\n            (\n                new Function<NodeCacheListener, Void>()\n                {\n                    @Override\n                    public Void apply(NodeCacheListener listener)\n                    {\n                        try\n                        {\n                            listener.nodeChanged();\n                        }\n                        catch ( Exception e )\n                        {\n                            log.error(\"Calling listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n\n            if ( rebuildTestExchanger != null )\n            {\n                try\n                {\n                    rebuildTestExchanger.exchange(new Object());\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":314,"groupId":"2077","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setNewData","params":"(ChildDatanewData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9b/fde4c8dea36cbe1c246731a31e52ff442d4da9.src","preCode":"    private void setNewData(ChildData newData) throws InterruptedException\n    {\n        ChildData   previousData = data.getAndSet(newData);\n        if ( !Objects.equal(previousData, newData) )\n        {\n            listeners.forEach\n            (\n                new Function<NodeCacheListener, Void>()\n                {\n                    @Override\n                    public Void apply(NodeCacheListener listener)\n                    {\n                        try\n                        {\n                            listener.nodeChanged();\n                        }\n                        catch ( Exception e )\n                        {\n                            log.error(\"Calling listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n\n            if ( rebuildTestExchanger != null )\n            {\n                try\n                {\n                    rebuildTestExchanger.exchange(new Object());\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n","realPath":"curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/NodeCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"N"}],"commitId":"0c2a5a5b4f6cc07b9b1cd9c83ad77c3fa0170779","commitMessage":"@@@Added APIs for getting/setting shared values with versions for better utility\n","date":"2014-10-03 02:04:26","modifiedFileCount":"5","status":"M","submitter":"randgalt"},{"authorTime":"2016-01-18 06:40:52","codes":[{"authorDate":"2016-01-18 06:40:52","commitOrder":3,"curCode":"    private void notifyListeners()\n    {\n        final byte[] localValue = getValue();\n        listeners.forEach\n            (\n                new Function<SharedValueListener, Void>()\n                {\n                    @Override\n                    public Void apply(SharedValueListener listener)\n                    {\n                        try\n                        {\n                            listener.valueHasChanged(SharedValue.this, localValue);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"From SharedValue listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n    }\n","date":"2016-01-18 06:40:52","endLine":274,"groupId":"1148","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"notifyListeners","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e2/7f455302187366566ae10227de2e7df85d2cee.src","preCode":"    private void notifyListeners()\n    {\n        final byte[] localValue = getValue();\n        listeners.forEach\n            (\n                new Function<SharedValueListener, Void>()\n                {\n                    @Override\n                    public Void apply(SharedValueListener listener)\n                    {\n                        try\n                        {\n                            listener.valueHasChanged(SharedValue.this, localValue);\n                        }\n                        catch ( Exception e )\n                        {\n                            log.error(\"From SharedValue listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n    }\n","realPath":"curator-recipes/src/main/java/org/apache/curator/framework/recipes/shared/SharedValue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"},{"authorDate":"2016-01-18 06:40:52","commitOrder":3,"curCode":"    private void setNewData(ChildData newData) throws InterruptedException\n    {\n        ChildData   previousData = data.getAndSet(newData);\n        if ( !Objects.equal(previousData, newData) )\n        {\n            listeners.forEach\n            (\n                new Function<NodeCacheListener, Void>()\n                {\n                    @Override\n                    public Void apply(NodeCacheListener listener)\n                    {\n                        try\n                        {\n                            listener.nodeChanged();\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Calling listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n\n            if ( rebuildTestExchanger != null )\n            {\n                try\n                {\n                    rebuildTestExchanger.exchange(new Object());\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n","date":"2016-01-18 06:40:52","endLine":336,"groupId":"910","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setNewData","params":"(ChildDatanewData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/85/17c7924fc20bdbff8a229f25ceed2468902d8a.src","preCode":"    private void setNewData(ChildData newData) throws InterruptedException\n    {\n        ChildData   previousData = data.getAndSet(newData);\n        if ( !Objects.equal(previousData, newData) )\n        {\n            listeners.forEach\n            (\n                new Function<NodeCacheListener, Void>()\n                {\n                    @Override\n                    public Void apply(NodeCacheListener listener)\n                    {\n                        try\n                        {\n                            listener.nodeChanged();\n                        }\n                        catch ( Exception e )\n                        {\n                            log.error(\"Calling listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n\n            if ( rebuildTestExchanger != null )\n            {\n                try\n                {\n                    rebuildTestExchanger.exchange(new Object());\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n","realPath":"curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/NodeCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"}],"commitId":"9a03ea93937af047e8ad13c2e3e3559520abfb0a","commitMessage":"@@@Merge branch 'master' into CURATOR-3.0\n\nConflicts:\n\tcurator-client/src/main/java/org/apache/curator/RetryLoop.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/FailedDeleteManager.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/OperationAndData.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/state/ConnectionStateManager.java\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/locks/InterProcessSemaphoreV2.java\n\tcurator-recipes/src/test/java/org/apache/curator/framework/client/TestResetConnectionWithBackgroundFailure.java\n\tcurator-test/src/main/java/org/apache/curator/test/TestingZooKeeperMain.java\n","date":"2016-01-18 06:40:52","modifiedFileCount":"47","status":"M","submitter":"randgalt"},{"authorTime":"2020-03-15 07:13:56","codes":[{"authorDate":"2020-03-15 07:13:56","commitOrder":4,"curCode":"    private void notifyListeners()\n    {\n        final byte[] localValue = getValue();\n        listeners.forEach(listener -> {\n            try\n            {\n                listener.valueHasChanged(SharedValue.this, localValue);\n            }\n            catch ( Exception e )\n            {\n                ThreadUtils.checkInterrupted(e);\n                log.error(\"From SharedValue listener\", e);\n            }\n        });\n    }\n","date":"2020-03-15 07:13:56","endLine":311,"groupId":"10265","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"notifyListeners","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d6/052344180a9c75701a5ddf04a33915e280ce39.src","preCode":"    private void notifyListeners()\n    {\n        final byte[] localValue = getValue();\n        listeners.forEach\n            (\n                new Function<SharedValueListener, Void>()\n                {\n                    @Override\n                    public Void apply(SharedValueListener listener)\n                    {\n                        try\n                        {\n                            listener.valueHasChanged(SharedValue.this, localValue);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"From SharedValue listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n    }\n","realPath":"curator-recipes/src/main/java/org/apache/curator/framework/recipes/shared/SharedValue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2020-03-15 07:13:56","commitOrder":4,"curCode":"    private void setNewData(ChildData newData) throws InterruptedException\n    {\n        ChildData   previousData = data.getAndSet(newData);\n        if ( !Objects.equal(previousData, newData) )\n        {\n            listeners.forEach(listener -> {\n                try\n                {\n                    listener.nodeChanged();\n                }\n                catch ( Exception e )\n                {\n                    ThreadUtils.checkInterrupted(e);\n                    log.error(\"Calling listener\", e);\n                }\n            });\n\n            if ( rebuildTestExchanger != null )\n            {\n                try\n                {\n                    rebuildTestExchanger.exchange(new Object());\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n","date":"2020-03-15 07:13:56","endLine":341,"groupId":"10265","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setNewData","params":"(ChildDatanewData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c6/54f4f42e753fa7229a9e09dc555c4702567216.src","preCode":"    private void setNewData(ChildData newData) throws InterruptedException\n    {\n        ChildData   previousData = data.getAndSet(newData);\n        if ( !Objects.equal(previousData, newData) )\n        {\n            listeners.forEach\n            (\n                new Function<NodeCacheListener, Void>()\n                {\n                    @Override\n                    public Void apply(NodeCacheListener listener)\n                    {\n                        try\n                        {\n                            listener.nodeChanged();\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Calling listener\", e);\n                        }\n                        return null;\n                    }\n                }\n            );\n\n            if ( rebuildTestExchanger != null )\n            {\n                try\n                {\n                    rebuildTestExchanger.exchange(new Object());\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n","realPath":"curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/NodeCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"}],"commitId":"d1a9234ecae47e3704037c839e6041931c24d1f4","commitMessage":"@@@CURATOR-558 (#344)\n\nPt1 of change\n\n* Remove the ZK 3.4 compatibility module and code\n* Remove the deprecated ListenerContainer that leaks Guava classes into our APIs\n* Remove Exhibitor support\n* Various minor changes/cleanups\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-15 07:13:56","modifiedFileCount":"45","status":"M","submitter":"Jordan Zimmerman"}]
