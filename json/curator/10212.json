[{"authorTime":"2016-08-31 09:01:23","codes":[{"authorDate":"2016-08-31 09:01:23","commitOrder":1,"curCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            Assert.assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","date":"2016-08-31 09:01:23","endLine":363,"groupId":"2092","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectEventOnWatcherDoesNotRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/06/90d6a4b54f91b2bd8f5b59074099f2defafad1.src","preCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            Assert.assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"B"},{"authorDate":"2016-08-31 09:01:23","commitOrder":1,"curCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            Assert.assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            Assert.assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            Assert.assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            Assert.assertEquals(2, numChangeEvents.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","date":"2016-08-31 09:01:23","endLine":429,"groupId":"1546","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisconnectReconnectEventDoesNotFireValueWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/06/90d6a4b54f91b2bd8f5b59074099f2defafad1.src","preCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            Assert.assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            Assert.assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            Assert.assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            Assert.assertEquals(2, numChangeEvents.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"}],"commitId":"9e400bc8620430c245db86d08bafafe2ecb8534f","commitMessage":"@@@Merge branch 'master' into CURATOR-3.0\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/shared/SharedValue.java\n\tcurator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java\n\tpom.xml\n","date":"2016-08-31 09:01:23","modifiedFileCount":"2","status":"B","submitter":"Cam McKenzie"},{"authorTime":"2017-07-11 03:40:48","codes":[{"authorDate":"2016-08-31 09:01:23","commitOrder":2,"curCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            Assert.assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","date":"2016-08-31 09:01:23","endLine":363,"groupId":"2092","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectEventOnWatcherDoesNotRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/06/90d6a4b54f91b2bd8f5b59074099f2defafad1.src","preCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            Assert.assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"N"},{"authorDate":"2017-07-11 03:40:48","commitOrder":2,"curCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            Assert.assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            Assert.assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            Assert.assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n            Assert.assertEquals(numChangeEvents.get(), 1);\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            \r\n            \r\n            Assert.assertEquals(numChangeEvents.get(), 3);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","date":"2017-07-11 03:40:48","endLine":437,"groupId":"1546","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisconnectReconnectEventDoesNotFireValueWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/6a/0b7c2ed650c1d76e8a8f654341fb7a24a9d7a3.src","preCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            Assert.assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            Assert.assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            Assert.assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            Assert.assertEquals(2, numChangeEvents.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"M"}],"commitId":"3b9d60626bd5f469dbe0be37a4f952ed2f7dd15e","commitMessage":"@@@Merge branch 'master' into CURATOR-419\n","date":"2017-07-11 03:40:48","modifiedFileCount":"3","status":"M","submitter":"randgalt"},{"authorTime":"2020-04-20 05:30:52","codes":[{"authorDate":"2020-04-20 05:30:52","commitOrder":3,"curCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            Assert.assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","date":"2020-04-20 05:30:52","endLine":370,"groupId":"2092","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectEventOnWatcherDoesNotRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/29/92eb9638c431d0a3432d795db8309dc3907e31.src","preCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            Assert.assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"},{"authorDate":"2020-04-20 05:30:52","commitOrder":3,"curCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            Assert.assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            Assert.assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            Assert.assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n            Assert.assertEquals(numChangeEvents.get(), 1);\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            \r\n            \r\n            Assert.assertEquals(numChangeEvents.get(), 3);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","date":"2020-04-20 05:30:52","endLine":439,"groupId":"1546","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisconnectReconnectEventDoesNotFireValueWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/29/92eb9638c431d0a3432d795db8309dc3907e31.src","preCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            Assert.assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            Assert.assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            Assert.assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n            Assert.assertEquals(numChangeEvents.get(), 1);\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            \r\n            \r\n            Assert.assertEquals(numChangeEvents.get(), 3);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            TestCleanState.closeAndTestClean(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"}],"commitId":"1d0c6f288107e024533aaa98279802f4d8081172","commitMessage":"@@@Merge branch 'CURATOR-567-remove-test-clean-state-where-flaky'\n","date":"2020-04-20 05:30:52","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2020-05-10 06:56:42","codes":[{"authorDate":"2020-04-20 05:30:52","commitOrder":4,"curCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            Assert.assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","date":"2020-04-20 05:30:52","endLine":370,"groupId":"2092","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectEventOnWatcherDoesNotRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/29/92eb9638c431d0a3432d795db8309dc3907e31.src","preCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            Assert.assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"N"},{"authorDate":"2020-05-10 06:56:42","commitOrder":4,"curCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            Assert.assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            Assert.assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            Assert.assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n            Assert.assertEquals(numChangeEvents.get(), 1);\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            \r\n            \r\n            Assert.assertTrue(numChangeEvents.get() > 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","date":"2020-05-10 06:56:42","endLine":438,"groupId":"1546","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisconnectReconnectEventDoesNotFireValueWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9b/6be7dc6f3ec805bd42896bdb085a7f38d0a541.src","preCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            Assert.assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            Assert.assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            Assert.assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n            Assert.assertEquals(numChangeEvents.get(), 1);\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            \r\n            \r\n            Assert.assertEquals(numChangeEvents.get(), 3);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"}],"commitId":"aa755720d4092aa3f65c418e06cc714b49d26f23","commitMessage":"@@@testDisconnectReconnectEventDoesNotFireValueWatcher() added as part of CURATOR-344 was flakey and would fail on the final assertion of numChangeEvents.get(). I don't believe you can be assured of the exact number so I made it more lenient and hopefully less flakey\n","date":"2020-05-10 06:56:42","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":373,"groupId":"10212","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testDisconnectEventOnWatcherDoesNotRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/cd/defd524fe39db37389a5d340835b1e7c3a1068.src","preCode":"    public void testDisconnectEventOnWatcherDoesNotRetry() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 1000));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n        sharedCount.start();\n\n        curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                }\n            }\n        });\n\n        try\n        {\n            server.stop();\n            \r\n            Assert.assertTrue(gotSuspendEvent.await(5, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n            assertEquals(numChangeEvents.get(), 1);\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            \r\n            \r\n            assertTrue(numChangeEvents.get() > 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":441,"groupId":"10212","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testDisconnectReconnectEventDoesNotFireValueWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/cd/defd524fe39db37389a5d340835b1e7c3a1068.src","preCode":"    public void testDisconnectReconnectEventDoesNotFireValueWatcher() throws Exception\n    {\n        final CountDownLatch gotSuspendEvent = new CountDownLatch(1);\n        final CountDownLatch gotChangeEvent = new CountDownLatch(1);\n        final CountDownLatch getReconnectEvent = new CountDownLatch(1);\n\n        final AtomicInteger numChangeEvents = new AtomicInteger(0);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryNTimes(10, 500));\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected();\n\n        SharedCount sharedCount = new SharedCount(curatorFramework, \"/count\", 10);\n\n        sharedCount.addListener(new SharedCountListener() {\n            @Override\n            public void countHasChanged(SharedCountReader sharedCount, int newCount) throws Exception {\n                numChangeEvents.incrementAndGet();\n                gotChangeEvent.countDown();\n            }\n\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    gotSuspendEvent.countDown();\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    getReconnectEvent.countDown();\n                }\n            }\n        });\n        sharedCount.start();\n\n        try\n        {\n            sharedCount.setCount(11);\n            Assert.assertTrue(gotChangeEvent.await(2, TimeUnit.SECONDS));\n\n            server.stop();\n            Assert.assertTrue(gotSuspendEvent.await(2, TimeUnit.SECONDS));\n\n            server.restart();\n            Assert.assertTrue(getReconnectEvent.await(2, TimeUnit.SECONDS));\n            Assert.assertEquals(numChangeEvents.get(), 1);\n\n            sharedCount.trySetCount(sharedCount.getVersionedValue(), 12);\n\n            \r\n            final CountDownLatch flushDone = new CountDownLatch(1);\n            curatorFramework.getData().inBackground(new BackgroundCallback() {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    flushDone.countDown();\n                }\n            }).forPath(\"/count\");\n            flushDone.await(5, TimeUnit.SECONDS);\n\n            \r\n            \r\n            Assert.assertTrue(numChangeEvents.get() > 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(sharedCount);\n            CloseableUtils.closeQuietly(curatorFramework);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/shared/TestSharedCount.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
