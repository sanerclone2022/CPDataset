[{"authorTime":"2017-07-15 06:15:32","codes":[{"authorDate":"2017-07-15 06:15:32","commitOrder":1,"curCode":"    public void testPartialApplyForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c\");\n        Migration m1 = () -> Collections.singletonList(op1);\n        Migration m2 = () -> Collections.singletonList(op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Arrays.asList(m1, m2));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test\"), \"something\".getBytes());\n    }\n","date":"2017-07-15 06:15:32","endLine":242,"groupId":"461","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartialApplyForBadOps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/80/a03bb7d720d11f5bdfd8b2d76ba003b0092aca.src","preCode":"    public void testPartialApplyForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c\");\n        Migration m1 = () -> Collections.singletonList(op1);\n        Migration m2 = () -> Collections.singletonList(op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Arrays.asList(m1, m2));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test\"), \"something\".getBytes());\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"},{"authorDate":"2017-07-15 06:15:32","commitOrder":1,"curCode":"    public void testTransactionForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test2\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c/d\");\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertNull(client.unwrap().checkExists().forPath(\"/test\"));\n    }\n","date":"2017-07-15 06:15:32","endLine":262,"groupId":"322","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransactionForBadOps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/80/a03bb7d720d11f5bdfd8b2d76ba003b0092aca.src","preCode":"    public void testTransactionForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test2\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c/d\");\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertNull(client.unwrap().checkExists().forPath(\"/test\"));\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"}],"commitId":"75118e43b165d2e99a432161cee6a3dab55e3e4e","commitMessage":"@@@more tests\n","date":"2017-07-15 06:15:32","modifiedFileCount":"1","status":"B","submitter":"randgalt"},{"authorTime":"2017-07-15 06:15:32","codes":[{"authorDate":"2017-07-18 21:10:43","commitOrder":2,"curCode":"    public void testPartialApplyForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c\");\n        Migration m1 = () -> Collections.singletonList(op1);\n        Migration m2 = () -> Collections.singletonList(op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Arrays.asList(m1, m2));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertNull(client.unwrap().checkExists().forPath(\"/test\"));  \r\n    }\n","date":"2017-07-18 21:10:43","endLine":272,"groupId":"461","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartialApplyForBadOps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/47/d09ab9046830b4fcbe4d7b8a432007a1d6d2e2.src","preCode":"    public void testPartialApplyForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c\");\n        Migration m1 = () -> Collections.singletonList(op1);\n        Migration m2 = () -> Collections.singletonList(op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Arrays.asList(m1, m2));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertEquals(client.unwrap().getData().forPath(\"/test\"), \"something\".getBytes());\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2017-07-15 06:15:32","commitOrder":2,"curCode":"    public void testTransactionForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test2\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c/d\");\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertNull(client.unwrap().checkExists().forPath(\"/test\"));\n    }\n","date":"2017-07-15 06:15:32","endLine":262,"groupId":"322","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransactionForBadOps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/80/a03bb7d720d11f5bdfd8b2d76ba003b0092aca.src","preCode":"    public void testTransactionForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test2\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c/d\");\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertNull(client.unwrap().checkExists().forPath(\"/test\"));\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"N"}],"commitId":"33e4138840904635a1793084051fd50b643794f1","commitMessage":"@@@The entire migration set should be 1 transaction - not each inidividual migration\n","date":"2017-07-18 21:10:43","modifiedFileCount":"2","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testPartialApplyForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c\");\n        Migration m1 = () -> Collections.singletonList(op1);\n        Migration m2 = () -> Collections.singletonList(op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Arrays.asList(m1, m2));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        assertNull(client.unwrap().checkExists().forPath(\"/test\"));  \r\n    }\n","date":"2020-10-20 21:18:25","endLine":282,"groupId":"1012","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testPartialApplyForBadOps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/00/ef28baaec02f9fe4e251246f172dbdb8e58cfa.src","preCode":"    public void testPartialApplyForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c\");\n        Migration m1 = () -> Collections.singletonList(op1);\n        Migration m2 = () -> Collections.singletonList(op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Arrays.asList(m1, m2));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertNull(client.unwrap().checkExists().forPath(\"/test\"));  \r\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testTransactionForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test2\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c/d\");\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        assertNull(client.unwrap().checkExists().forPath(\"/test\"));\n    }\n","date":"2020-10-20 21:18:25","endLine":302,"groupId":"1012","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testTransactionForBadOps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/00/ef28baaec02f9fe4e251246f172dbdb8e58cfa.src","preCode":"    public void testTransactionForBadOps() throws Exception\n    {\n        CuratorOp op1 = client.transactionOp().create().forPath(\"/test2\", \"something\".getBytes());\n        CuratorOp op2 = client.transactionOp().create().forPath(\"/a/b/c/d\");\n        Migration migration = () -> Arrays.asList(op1, op2);\n        MigrationSet migrationSet = MigrationSet.build(\"1\", Collections.singletonList(migration));\n        try\n        {\n            complete(manager.migrate(migrationSet));\n            Assert.fail(\"Should throw\");\n        }\n        catch ( Throwable e )\n        {\n            Assert.assertTrue(Throwables.getRootCause(e) instanceof KeeperException.NoNodeException);\n        }\n\n        Assert.assertNull(client.unwrap().checkExists().forPath(\"/test\"));\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/migrations/TestMigrationManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
