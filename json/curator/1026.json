[{"authorTime":"2015-08-18 01:01:21","codes":[{"authorDate":"2017-04-03 23:54:50","commitOrder":3,"curCode":"    public void testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me2:pass2\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( ExecutionException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-04-03 23:54:50","endLine":284,"groupId":"187","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateACLMultipleAuths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ad/c85da09df176424f6b449ba947d8cbc070648a.src","preCode":"    public void testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me2:pass2\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( ExecutionException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"B"},{"authorDate":"2015-08-18 01:01:21","commitOrder":3,"curCode":"    public void testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-08-18 01:01:21","endLine":244,"groupId":"929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateACLSingleAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/81/1631ce2ca79d55b6867862393a4beeed406bff.src","preCode":"    public void testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"NB"}],"commitId":"1826b66d72f6e543a57aaf5f3acc3cd9ca6e965d","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2017-04-03 23:54:50","modifiedFileCount":"45","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me2:pass2\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n                fail(\"Should have failed with auth exception\");\n            }\n            catch ( ExecutionException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":291,"groupId":"1026","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateACLMultipleAuths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d0/3ffca84d5f57eaadba1aff79e3bfa640c58642.src","preCode":"    public void testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me2:pass2\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( ExecutionException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":424,"groupId":"1026","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateACLSingleAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a1/aea5271b893475af37c6c936f1d81b83345caa.src","preCode":"    public void testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
