[{"authorTime":"2013-05-05 22:20:02","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":2,"curCode":"    public void testBasics() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":727,"groupId":"255","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/be/5fe6c524d51c55fb056dddb1bed48579482ca5.src","preCode":"    public void testBasics() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":685,"status":"NB"},{"authorDate":"2013-05-05 22:20:02","commitOrder":2,"curCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = new ShutdownNowIgnoringExecutorService(Executors.newSingleThreadExecutor());\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache2.getListenable().addListener(\n                    new PathChildrenCacheListener() {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events2.offer(event.getType());\n                            }\n                        }\n                    }\n            );\n            cache2.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n            Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n            cache2.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-05-05 22:20:02","endLine":800,"groupId":"349","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicsOnTwoCachesWithSameExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/7f/ed5f896f57f849a66f352ab2dcd269aec7976f.src","preCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = new ShutdownNowIgnoringExecutorService(Executors.newSingleThreadExecutor());\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache2.getListenable().addListener(\n                    new PathChildrenCacheListener() {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events2.offer(event.getType());\n                            }\n                        }\n                    }\n            );\n            cache2.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n            Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n            cache2.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":735,"status":"B"}],"commitId":"75b540414f860446f106a1cdbdea121046be2e98","commitMessage":"@@@CURATOR-21\nPathChildrenCache currently takes an Executor.  but only to fire off a Runnable that does a blocking while loop waiting for work. This means that you must have one thread per PathChildrenCache.  which is not that great.\n\nPathChildrenCache should just use the Executor's work queuing mechanism to enqueue work items instead of maintaining its own work queue mechanism.\n","date":"2013-05-05 22:20:02","modifiedFileCount":"4","status":"M","submitter":"randgalt"},{"authorTime":"2013-05-11 10:11:23","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":3,"curCode":"    public void testBasics() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":727,"groupId":"255","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/be/5fe6c524d51c55fb056dddb1bed48579482ca5.src","preCode":"    public void testBasics() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":685,"status":"N"},{"authorDate":"2013-05-11 10:11:23","commitOrder":3,"curCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = Executors.newSingleThreadExecutor();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache2.getListenable().addListener(\n                    new PathChildrenCacheListener() {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events2.offer(event.getType());\n                            }\n                        }\n                    }\n            );\n            cache2.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n            Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n            cache2.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-05-11 10:11:23","endLine":799,"groupId":"349","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicsOnTwoCachesWithSameExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/4b/117fb50a60394f4c7026a8b037941a03ae0721.src","preCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = new ShutdownNowIgnoringExecutorService(Executors.newSingleThreadExecutor());\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache2.getListenable().addListener(\n                    new PathChildrenCacheListener() {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events2.offer(event.getType());\n                            }\n                        }\n                    }\n            );\n            cache2.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n            Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n            cache2.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"}],"commitId":"6e3c9e27b8e6e2cda6ad146b8a63a60346badb0d","commitMessage":"@@@Introduced CloseableExecutorService. Instead of blindly shutting down exectors.  this container\nshuts down any futures created by an executor. This resolves issues where custom executors\nare given to Curator.\n\nMerge branch 'CURATOR-17' into 2.0.1-incubating\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/PathChildrenCache.java\n","date":"2013-05-11 10:11:23","modifiedFileCount":"5","status":"M","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2014-05-23 22:46:02","commitOrder":4,"curCode":"    public void testBasics() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":739,"groupId":"255","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/bf/57ed81c345f00b3b24d5ce08c3430ab6502ef9.src","preCode":"    public void testBasics() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":4,"curCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = Executors.newSingleThreadExecutor();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache2.getListenable().addListener(\n                    new PathChildrenCacheListener() {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events2.offer(event.getType());\n                            }\n                        }\n                    }\n            );\n            cache2.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n            Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n            cache2.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":808,"groupId":"2051","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicsOnTwoCachesWithSameExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/bf/57ed81c345f00b3b24d5ce08c3430ab6502ef9.src","preCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = Executors.newSingleThreadExecutor();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache2.getListenable().addListener(\n                    new PathChildrenCacheListener() {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events2.offer(event.getType());\n                            }\n                        }\n                    }\n            );\n            cache2.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n            Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            Assert.assertEquals(events2.poll(10, TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n            cache2.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":742,"status":"M"}],"commitId":"0bffdb020d78d8c6599a1eb9c2c702f9dd1192bd","commitMessage":"@@@Merge branch 'master' into CURATOR-105\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/PathChildrenCache.java\n","date":"2014-05-23 22:46:02","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-08-18 10:13:37","commitOrder":5,"curCode":"    public void testBasics() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":822,"groupId":"255","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/35/71ca73e323e705bd9d0d0efa73439edc13a972.src","preCode":"    public void testBasics() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":779,"status":"M"},{"authorDate":"2015-08-18 10:13:37","commitOrder":5,"curCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = Executors.newSingleThreadExecutor();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache2.getListenable().addListener(\n                    new PathChildrenCacheListener() {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events2.offer(event.getType());\n                            }\n                        }\n                    }\n            );\n            cache2.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n            Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n            cache2.close();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":891,"groupId":"2051","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicsOnTwoCachesWithSameExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/35/71ca73e323e705bd9d0d0efa73439edc13a972.src","preCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = Executors.newSingleThreadExecutor();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache2.getListenable().addListener(\n                    new PathChildrenCacheListener() {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events2.offer(event.getType());\n                            }\n                        }\n                    }\n            );\n            cache2.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n            Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n            cache2.close();\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"M"}],"commitId":"d5d12c88b075fd1fc51a29412b3c08918cceb983","commitMessage":"@@@Merge 'CURATOR-217' into CURATOR-3.0\n","date":"2015-08-18 10:13:37","modifiedFileCount":"40","status":"M","submitter":"Scott Blum"},{"authorTime":"2015-10-11 04:15:50","codes":[{"authorDate":"2015-10-11 04:15:50","commitOrder":6,"curCode":"    public void testBasics() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            try ( PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true) )\n            {\n                cache.getListenable().addListener\n                    (\n                        new PathChildrenCacheListener()\n                        {\n                            @Override\n                            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                            {\n                                if ( event.getData().getPath().equals(\"/test/one\") )\n                                {\n                                    events.offer(event.getType());\n                                }\n                            }\n                        }\n                    );\n                cache.start();\n\n                client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n                Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n                client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n                Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n                Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n                client.delete().forPath(\"/test/one\");\n                Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            }\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-10-11 04:15:50","endLine":797,"groupId":"1808","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a4/e2b2ec30f230778e13350e9c6b57c14a84e375.src","preCode":"    public void testBasics() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":754,"status":"M"},{"authorDate":"2015-10-11 04:15:50","commitOrder":6,"curCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = Executors.newSingleThreadExecutor();\n            try ( PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec) )\n            {\n                cache.getListenable().addListener\n                    (\n                        new PathChildrenCacheListener()\n                        {\n                            @Override\n                            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                            {\n                                if ( event.getData().getPath().equals(\"/test/one\") )\n                                {\n                                    events.offer(event.getType());\n                                }\n                            }\n                        }\n                    );\n                cache.start();\n\n                final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n                try ( PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec) )\n                {\n                    cache2.getListenable().addListener(\n                        new PathChildrenCacheListener()\n                        {\n                            @Override\n                            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                            {\n                                if ( event.getData().getPath().equals(\"/test/one\") )\n                                {\n                                    events2.offer(event.getType());\n                                }\n                            }\n                        }\n                                                      );\n                    cache2.start();\n\n                    client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n                    Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n                    Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n                    client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n                    Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n                    Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n                    Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n                    Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n                    client.delete().forPath(\"/test/one\");\n                    Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n                    Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n                }\n            }\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-10-11 04:15:50","endLine":868,"groupId":"1462","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicsOnTwoCachesWithSameExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a4/e2b2ec30f230778e13350e9c6b57c14a84e375.src","preCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = Executors.newSingleThreadExecutor();\n            PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache.getListenable().addListener\n                (\n                    new PathChildrenCacheListener()\n                    {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events.offer(event.getType());\n                            }\n                        }\n                    }\n                );\n            cache.start();\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec);\n            cache2.getListenable().addListener(\n                    new PathChildrenCacheListener() {\n                        @Override\n                        public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                        {\n                            if ( event.getData().getPath().equals(\"/test/one\") )\n                            {\n                                events2.offer(event.getType());\n                            }\n                        }\n                    }\n            );\n            cache2.start();\n\n            client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n            client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n            Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n            Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n            client.delete().forPath(\"/test/one\");\n            Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n\n            cache.close();\n            cache2.close();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"M"}],"commitId":"b25a8a35856abf9710d42fae0a7324fbe66c362d","commitMessage":"@@@Trying to make tests more reliable\n","date":"2015-10-11 04:15:50","modifiedFileCount":"3","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":7,"curCode":"    public void testBasics() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            try ( PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true) )\n            {\n                cache.getListenable().addListener\n                    (\n                        new PathChildrenCacheListener()\n                        {\n                            @Override\n                            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                            {\n                                if ( event.getData().getPath().equals(\"/test/one\") )\n                                {\n                                    events.offer(event.getType());\n                                }\n                            }\n                        }\n                    );\n                cache.start();\n\n                client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n                assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n                client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n                assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n                assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n                client.delete().forPath(\"/test/one\");\n                assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            }\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":998,"groupId":"10228","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/37/90b34c05e23e47833ae1fd945825099360383c.src","preCode":"    public void testBasics() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            try ( PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true) )\n            {\n                cache.getListenable().addListener\n                    (\n                        new PathChildrenCacheListener()\n                        {\n                            @Override\n                            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                            {\n                                if ( event.getData().getPath().equals(\"/test/one\") )\n                                {\n                                    events.offer(event.getType());\n                                }\n                            }\n                        }\n                    );\n                cache.start();\n\n                client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n                Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n                client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n                Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n                Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n                client.delete().forPath(\"/test/one\");\n                Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n            }\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":955,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":7,"curCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = Executors.newSingleThreadExecutor();\n            try ( PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec) )\n            {\n                cache.getListenable().addListener\n                    (\n                        new PathChildrenCacheListener()\n                        {\n                            @Override\n                            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                            {\n                                if ( event.getData().getPath().equals(\"/test/one\") )\n                                {\n                                    events.offer(event.getType());\n                                }\n                            }\n                        }\n                    );\n                cache.start();\n\n                final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n                try ( PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec) )\n                {\n                    cache2.getListenable().addListener(\n                        new PathChildrenCacheListener()\n                        {\n                            @Override\n                            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                            {\n                                if ( event.getData().getPath().equals(\"/test/one\") )\n                                {\n                                    events2.offer(event.getType());\n                                }\n                            }\n                        }\n                                                      );\n                    cache2.start();\n\n                    client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n                    assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n                    assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n                    client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n                    assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n                    assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n                    assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n                    assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n                    client.delete().forPath(\"/test/one\");\n                    assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n                    assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n                }\n            }\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":1069,"groupId":"10228","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testBasicsOnTwoCachesWithSameExecutor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/37/90b34c05e23e47833ae1fd945825099360383c.src","preCode":"    public void testBasicsOnTwoCachesWithSameExecutor() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.create().forPath(\"/test\");\n\n            final BlockingQueue<PathChildrenCacheEvent.Type> events = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n            final ExecutorService exec = Executors.newSingleThreadExecutor();\n            try ( PathChildrenCache cache = new PathChildrenCache(client, \"/test\", true, false, exec) )\n            {\n                cache.getListenable().addListener\n                    (\n                        new PathChildrenCacheListener()\n                        {\n                            @Override\n                            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n                            {\n                                if ( event.getData().getPath().equals(\"/test/one\") )\n                                {\n                                    events.offer(event.getType());\n                                }\n                            }\n                        }\n                    );\n                cache.start();\n\n                final BlockingQueue<PathChildrenCacheEvent.Type> events2 = new LinkedBlockingQueue<PathChildrenCacheEvent.Type>();\n                try ( PathChildrenCache cache2 = new PathChildrenCache(client, \"/test\", true, false, exec) )\n                {\n                    cache2.getListenable().addListener(\n                        new PathChildrenCacheListener()\n                        {\n                            @Override\n                            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n                                throws Exception\n                            {\n                                if ( event.getData().getPath().equals(\"/test/one\") )\n                                {\n                                    events2.offer(event.getType());\n                                }\n                            }\n                        }\n                                                      );\n                    cache2.start();\n\n                    client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n                    Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n                    Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_ADDED);\n\n                    client.setData().forPath(\"/test/one\", \"sup!\".getBytes());\n                    Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n                    Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_UPDATED);\n                    Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");\n                    Assert.assertEquals(new String(cache2.getCurrentData(\"/test/one\").getData()), \"sup!\");\n\n                    client.delete().forPath(\"/test/one\");\n                    Assert.assertEquals(events.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n                    Assert.assertEquals(events2.poll(timing.forWaiting().seconds(), TimeUnit.SECONDS), PathChildrenCacheEvent.Type.CHILD_REMOVED);\n                }\n            }\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestPathChildrenCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":1001,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
