[{"authorTime":"2015-05-09 22:22:47","codes":[{"authorDate":"2015-08-13 05:30:01","commitOrder":4,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2015-08-13 05:30:01","endLine":124,"groupId":"1953","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/57/7b0d6c4ddc84ef106d74cbc9d835563afb0654.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2015-05-09 22:22:47","commitOrder":4,"curCode":"    public byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2015-08-13 05:28:42","endLine":68,"groupId":"2103","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/76/1c8ad9e2736af6b2f1b3d1d8b8062159ef319e.src","preCode":"    public byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"NB"}],"commitId":"8c8d7ec2ba24cf192db7cd0a738924a2ec538e09","commitMessage":"@@@Merge branch 'CURATOR-215' into CURATOR-3.0\n","date":"2015-08-13 05:30:01","modifiedFileCount":"27","status":"M","submitter":"Scott Blum"},{"authorTime":"2015-09-26 10:07:44","codes":[{"authorDate":"2015-08-13 05:30:01","commitOrder":5,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2015-08-13 05:30:01","endLine":124,"groupId":"1953","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/57/7b0d6c4ddc84ef106d74cbc9d835563afb0654.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"},{"authorDate":"2015-09-26 10:07:44","commitOrder":5,"curCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2015-09-26 10:07:44","endLine":61,"groupId":"2103","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e7/86883feb77ffeec7358f99f96820827910cd5b.src","preCode":"    public byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"d42ef172e57af17ed42d7c2c4e2d9a7a0c520f3c","commitMessage":"@@@wip - adding() API was misnamed. Also.  it's mutually exclusive with join/leave\n","date":"2015-09-26 10:07:44","modifiedFileCount":"7","status":"M","submitter":"randgalt"},{"authorTime":"2016-04-21 09:12:31","codes":[{"authorDate":"2016-04-21 09:12:31","commitOrder":6,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":134,"groupId":"1953","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/da/37a0646b4012e7ac66b179e6b2355ede678f5b.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2016-04-21 09:12:31","commitOrder":6,"curCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":61,"groupId":"882","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/df/007850a75b212103d879655693730580eb638e.src","preCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext()), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"b1d2198a75d6e01b48789635ba648bedc542c439","commitMessage":"@@@If there's an exeption.  retries exceeded.  etc..  the watcher was still being stored in WatcherRemovealManager thus causing it to be incorrectly removed. This fix removes the watch from the WatcherRemovalmanager on exceptions.  retries exceeded.  etc.\n","date":"2016-04-21 09:12:31","modifiedFileCount":"20","status":"M","submitter":"randgalt"},{"authorTime":"2016-04-21 09:12:31","codes":[{"authorDate":"2016-05-20 03:02:00","commitOrder":7,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                schema.validateDelete();\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), ZooDefs.Ids.CREATOR_ALL_ACL);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2016-05-20 03:02:00","endLine":154,"groupId":"1953","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/40/d0d2d2164ea488387a3fb1957b28d278fc4345.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2016-04-21 09:12:31","commitOrder":7,"curCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":61,"groupId":"882","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/df/007850a75b212103d879655693730580eb638e.src","preCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"63a0d4550ebfaa2e29ddf719f8bfe9696cffc5ae","commitMessage":"@@@Merge branch 'CURATOR-322' into CURATOR-3.0\n","date":"2016-05-20 03:02:00","modifiedFileCount":"18","status":"M","submitter":"randgalt"},{"authorTime":"2016-04-21 09:12:31","codes":[{"authorDate":"2016-06-15 06:21:29","commitOrder":8,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                schema.validateDelete();\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2016-06-15 06:21:29","endLine":154,"groupId":"1953","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/4b/4d473c149ab0d51627d4b7c754c0cef57c1fa7.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                schema.validateDelete();\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), ZooDefs.Ids.CREATOR_ALL_ACL);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2016-04-21 09:12:31","commitOrder":8,"curCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":61,"groupId":"882","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/df/007850a75b212103d879655693730580eb638e.src","preCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"31a824198a24cc0a681db5cc3fe1029cd6f823d2","commitMessage":"@@@Merge branch 'CURATOR-3.0' of https://git-wip-us.apache.org/repos/asf/curator into CURATOR-3.0\n","date":"2016-06-15 06:21:29","modifiedFileCount":"3","status":"M","submitter":"Cam McKenzie"},{"authorTime":"2016-04-21 09:12:31","codes":[{"authorDate":"2016-09-06 23:50:28","commitOrder":9,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getPath(), createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                schema.validateDelete();\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2016-09-06 23:50:28","endLine":154,"groupId":"0","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/40/eb4a2b7c05eadc2c3d620d8da1aa3408dce783.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                schema.validateDelete();\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2016-04-21 09:12:31","commitOrder":9,"curCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":61,"groupId":"882","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/df/007850a75b212103d879655693730580eb638e.src","preCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"027dee39bbda546af07dc30622fa28e29cbfc9bc","commitMessage":"@@@validateCreate() should be taking a path argument. The class field \"path\" was hiding this so I renamed that as well.\n","date":"2016-09-06 23:50:28","modifiedFileCount":"3","status":"M","submitter":"randgalt"},{"authorTime":"2016-04-21 09:12:31","codes":[{"authorDate":"2016-10-28 23:05:52","commitOrder":10,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getPath(), createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                DeleteRequest deleteRequest = (DeleteRequest)curatorOp.get().toRequestRecord();\n                schema.validateDelete(deleteRequest.getPath());\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2016-10-28 23:05:52","endLine":156,"groupId":"347","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d0/a8e7f30dad30614dcbb285be5e61760bb96f89.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getPath(), createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                schema.validateDelete();\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2016-04-21 09:12:31","commitOrder":10,"curCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":61,"groupId":"882","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/df/007850a75b212103d879655693730580eb638e.src","preCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"786d69587d183250b4108a9e18898ad4b2e94659","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2016-10-28 23:05:52","modifiedFileCount":"22","status":"M","submitter":"randgalt"},{"authorTime":"2017-04-03 23:54:50","codes":[{"authorDate":"2016-10-28 23:05:52","commitOrder":11,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getPath(), createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                DeleteRequest deleteRequest = (DeleteRequest)curatorOp.get().toRequestRecord();\n                schema.validateDelete(deleteRequest.getPath());\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2016-10-28 23:05:52","endLine":156,"groupId":"347","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d0/a8e7f30dad30614dcbb285be5e61760bb96f89.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getPath(), createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                DeleteRequest deleteRequest = (DeleteRequest)curatorOp.get().toRequestRecord();\n                schema.validateDelete(deleteRequest.getPath());\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"},{"authorDate":"2017-04-03 23:54:50","commitOrder":11,"curCode":"    public byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2017-04-03 23:54:50","endLine":72,"groupId":"882","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/97/be59af68662ee685c05bc2453e964469c82934.src","preCode":"    private byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"1826b66d72f6e543a57aaf5f3acc3cd9ca6e965d","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2017-04-03 23:54:50","modifiedFileCount":"45","status":"M","submitter":"randgalt"},{"authorTime":"2017-04-03 23:54:50","codes":[{"authorDate":"2017-07-22 03:27:07","commitOrder":12,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode;\n                if ( client.isZk34CompatibilityMode() )\n                {\n                    try\n                    {\n                        createMode = CreateMode.fromFlag(createRequest.getFlags());\n                    }\n                    catch ( KeeperException.BadArgumentsException dummy )\n                    {\n                        createMode = CreateMode.PERSISTENT;\n                    }\n                }\n                else\n                {\n                    createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                }\n                schema.validateCreate(createMode, createRequest.getPath(), createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                DeleteRequest deleteRequest = (DeleteRequest)curatorOp.get().toRequestRecord();\n                schema.validateDelete(deleteRequest.getPath());\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2017-07-22 03:27:07","endLine":178,"groupId":"347","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/90/579343a61fd7bba30870d72857ee9bb302e57c.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getPath(), createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                DeleteRequest deleteRequest = (DeleteRequest)curatorOp.get().toRequestRecord();\n                schema.validateDelete(deleteRequest.getPath());\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2017-04-03 23:54:50","commitOrder":12,"curCode":"    public byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2017-04-03 23:54:50","endLine":72,"groupId":"882","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/97/be59af68662ee685c05bc2453e964469c82934.src","preCode":"    public byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"}],"commitId":"31d7f9a2040975dee08cb685d61cceb7015f9e32","commitMessage":"@@@Merge branch 'master' into CURATOR-426\n","date":"2017-07-22 03:27:07","modifiedFileCount":"35","status":"M","submitter":"randgalt"},{"authorTime":"2017-04-03 23:54:50","codes":[{"authorDate":"2020-03-15 07:13:56","commitOrder":13,"curCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                schema.validateCreate(createMode, createRequest.getPath(), createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                DeleteRequest deleteRequest = (DeleteRequest)curatorOp.get().toRequestRecord();\n                schema.validateDelete(deleteRequest.getPath());\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","date":"2020-03-15 07:13:56","endLine":162,"groupId":"10140","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"forOperations","params":"(List<CuratorOp>operations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/bd/ab158aa41452be01be411a656a94a9abb23c55.src","preCode":"    public List<CuratorTransactionResult> forOperations(List<CuratorOp> operations) throws Exception\n    {\n        operations = Preconditions.checkNotNull(operations, \"operations cannot be null\");\n        Preconditions.checkArgument(!operations.isEmpty(), \"operations list cannot be empty\");\n\n        CuratorMultiTransactionRecord record = new CuratorMultiTransactionRecord();\n        for ( CuratorOp curatorOp : operations )\n        {\n            Schema schema = client.getSchemaSet().getSchema(curatorOp.getTypeAndPath().getForPath());\n            record.add(curatorOp.get(), curatorOp.getTypeAndPath().getType(), curatorOp.getTypeAndPath().getForPath());\n            if ( (curatorOp.get().getType() == ZooDefs.OpCode.create) || (curatorOp.get().getType() == ZooDefs.OpCode.createContainer) )\n            {\n                CreateRequest createRequest = (CreateRequest)curatorOp.get().toRequestRecord();\n                CreateMode createMode;\n                if ( client.isZk34CompatibilityMode() )\n                {\n                    try\n                    {\n                        createMode = CreateMode.fromFlag(createRequest.getFlags());\n                    }\n                    catch ( KeeperException.BadArgumentsException dummy )\n                    {\n                        createMode = CreateMode.PERSISTENT;\n                    }\n                }\n                else\n                {\n                    createMode = CreateMode.fromFlag(createRequest.getFlags(), CreateMode.PERSISTENT);\n                }\n                schema.validateCreate(createMode, createRequest.getPath(), createRequest.getData(), createRequest.getAcl());\n            }\n            else if ( (curatorOp.get().getType() == ZooDefs.OpCode.delete) || (curatorOp.get().getType() == ZooDefs.OpCode.deleteContainer) )\n            {\n                DeleteRequest deleteRequest = (DeleteRequest)curatorOp.get().toRequestRecord();\n                schema.validateDelete(deleteRequest.getPath());\n            }\n            else if ( curatorOp.get().getType() == ZooDefs.OpCode.setData )\n            {\n                SetDataRequest setDataRequest = (SetDataRequest)curatorOp.get().toRequestRecord();\n                schema.validateGeneral(setDataRequest.getPath(), setDataRequest.getData(), null);\n            }\n        }\n\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, record, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return null;\n        }\n        else\n        {\n            return forOperationsInForeground(record);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorMultiTransactionImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2017-04-03 23:54:50","commitOrder":13,"curCode":"    public byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","date":"2017-04-03 23:54:50","endLine":72,"groupId":"10140","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"forEnsemble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/97/be59af68662ee685c05bc2453e964469c82934.src","preCode":"    public byte[] forEnsemble() throws Exception\n    {\n        if ( backgrounding.inBackground() )\n        {\n            client.processBackgroundOperation(new OperationAndData<>(this, null, backgrounding.getCallback(), null, backgrounding.getContext(), null), null);\n            return new byte[0];\n        }\n        else\n        {\n            return ensembleInForeground();\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/ReconfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"}],"commitId":"d1a9234ecae47e3704037c839e6041931c24d1f4","commitMessage":"@@@CURATOR-558 (#344)\n\nPt1 of change\n\n* Remove the ZK 3.4 compatibility module and code\n* Remove the deprecated ListenerContainer that leaks Guava classes into our APIs\n* Remove Exhibitor support\n* Various minor changes/cleanups\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-15 07:13:56","modifiedFileCount":"45","status":"M","submitter":"Jordan Zimmerman"}]
