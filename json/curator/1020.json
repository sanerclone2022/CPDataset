[{"authorTime":"2015-04-28 11:57:41","codes":[{"authorDate":"2017-04-03 23:54:50","commitOrder":4,"curCode":"    public void testListenerConnectedAtStart() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing(2);\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(0, 0));\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final AtomicBoolean firstListenerAction = new AtomicBoolean(true);\n            final AtomicReference<ConnectionState> firstListenerState = new AtomicReference<>();\n            ConnectionStateListener listener = (client1, newState) ->\n            {\n                if ( firstListenerAction.compareAndSet(true, false) )\n                {\n                    firstListenerState.set(newState);\n                    System.out.println(\"First listener state is \" + newState);\n                }\n                if ( newState == ConnectionState.CONNECTED )\n                {\n                    connectedLatch.countDown();\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            \r\n            async.create().forPath(\"/foo\");\n\n            server.restart();\n\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            Assert.assertFalse(firstListenerAction.get());\n            ConnectionState firstconnectionState = firstListenerState.get();\n            Assert.assertEquals(firstconnectionState, ConnectionState.CONNECTED, \"First listener state MUST BE CONNECTED but is \" + firstconnectionState);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-04-03 23:54:50","endLine":156,"groupId":"659","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testListenerConnectedAtStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c0/0febd415d4eef410d35a665abc877fa22f65c1.src","preCode":"    public void testListenerConnectedAtStart() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing(2);\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(0, 0));\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final AtomicBoolean firstListenerAction = new AtomicBoolean(true);\n            final AtomicReference<ConnectionState> firstListenerState = new AtomicReference<>();\n            ConnectionStateListener listener = (client1, newState) ->\n            {\n                if ( firstListenerAction.compareAndSet(true, false) )\n                {\n                    firstListenerState.set(newState);\n                    System.out.println(\"First listener state is \" + newState);\n                }\n                if ( newState == ConnectionState.CONNECTED )\n                {\n                    connectedLatch.countDown();\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            \r\n            async.create().forPath(\"/foo\");\n\n            server.restart();\n\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            Assert.assertFalse(firstListenerAction.get());\n            ConnectionState firstconnectionState = firstListenerState.get();\n            Assert.assertEquals(firstconnectionState, ConnectionState.CONNECTED, \"First listener state MUST BE CONNECTED but is \" + firstconnectionState);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"},{"authorDate":"2015-04-28 11:57:41","commitOrder":4,"curCode":"    public void testListenerConnectedAtStart() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing(2);\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(0, 0));\n        try\n        {\n            client.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final AtomicBoolean firstListenerAction = new AtomicBoolean(true);\n            final AtomicReference<ConnectionState> firstListenerState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    if ( firstListenerAction.compareAndSet(true, false) )\n                    {\n                        firstListenerState.set(newState);\n                        System.out.println(\"First listener state is \" + newState);\n                    }\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            \r\n            client.create().inBackground().forPath(\"/foo\");\n\n            server.restart();\n\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            Assert.assertFalse(firstListenerAction.get());\n            ConnectionState firstconnectionState = firstListenerState.get();\n            Assert.assertEquals(firstconnectionState, ConnectionState.CONNECTED, \"First listener state MUST BE CONNECTED but is \" + firstconnectionState);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-04-28 11:57:41","endLine":94,"groupId":"909","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testListenerConnectedAtStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/26/cc941006e706ec5d3da099a7d64888e3ad7883.src","preCode":"    public void testListenerConnectedAtStart() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing(2);\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(0, 0));\n        try\n        {\n            client.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final AtomicBoolean firstListenerAction = new AtomicBoolean(true);\n            final AtomicReference<ConnectionState> firstListenerState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    if ( firstListenerAction.compareAndSet(true, false) )\n                    {\n                        firstListenerState.set(newState);\n                        System.out.println(\"First listener state is \" + newState);\n                    }\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            \r\n            client.create().inBackground().forPath(\"/foo\");\n\n            server.restart();\n\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            Assert.assertFalse(firstListenerAction.get());\n            ConnectionState firstconnectionState = firstListenerState.get();\n            Assert.assertEquals(firstconnectionState, ConnectionState.CONNECTED, \"First listener state MUST BE CONNECTED but is \" + firstconnectionState);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"NB"}],"commitId":"1826b66d72f6e543a57aaf5f3acc3cd9ca6e965d","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2017-04-03 23:54:50","modifiedFileCount":"45","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testListenerConnectedAtStart() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing(2);\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(0, 0));\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final AtomicBoolean firstListenerAction = new AtomicBoolean(true);\n            final AtomicReference<ConnectionState> firstListenerState = new AtomicReference<>();\n            ConnectionStateListener listener = (client1, newState) ->\n            {\n                if ( firstListenerAction.compareAndSet(true, false) )\n                {\n                    firstListenerState.set(newState);\n                    System.out.println(\"First listener state is \" + newState);\n                }\n                if ( newState == ConnectionState.CONNECTED )\n                {\n                    connectedLatch.countDown();\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            \r\n            async.create().forPath(\"/foo\");\n\n            server.restart();\n\n            assertTrue(timing.awaitLatch(connectedLatch));\n            assertFalse(firstListenerAction.get());\n            ConnectionState firstconnectionState = firstListenerState.get();\n            assertEquals(firstconnectionState, ConnectionState.CONNECTED, \"First listener state MUST BE CONNECTED but is \" + firstconnectionState);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":158,"groupId":"1020","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testListenerConnectedAtStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c5/bdf7c0bdd0f9ba3607ad038cc59628acef1fc3.src","preCode":"    public void testListenerConnectedAtStart() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing(2);\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(0, 0));\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final AtomicBoolean firstListenerAction = new AtomicBoolean(true);\n            final AtomicReference<ConnectionState> firstListenerState = new AtomicReference<>();\n            ConnectionStateListener listener = (client1, newState) ->\n            {\n                if ( firstListenerAction.compareAndSet(true, false) )\n                {\n                    firstListenerState.set(newState);\n                    System.out.println(\"First listener state is \" + newState);\n                }\n                if ( newState == ConnectionState.CONNECTED )\n                {\n                    connectedLatch.countDown();\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            \r\n            async.create().forPath(\"/foo\");\n\n            server.restart();\n\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            Assert.assertFalse(firstListenerAction.get());\n            ConnectionState firstconnectionState = firstListenerState.get();\n            Assert.assertEquals(firstconnectionState, ConnectionState.CONNECTED, \"First listener state MUST BE CONNECTED but is \" + firstconnectionState);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testListenerConnectedAtStart() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing(2);\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(0, 0));\n        try\n        {\n            client.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final AtomicBoolean firstListenerAction = new AtomicBoolean(true);\n            final AtomicReference<ConnectionState> firstListenerState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    if ( firstListenerAction.compareAndSet(true, false) )\n                    {\n                        firstListenerState.set(newState);\n                        System.out.println(\"First listener state is \" + newState);\n                    }\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            \r\n            client.create().inBackground().forPath(\"/foo\");\n\n            server.restart();\n\n            assertTrue(timing.awaitLatch(connectedLatch));\n            assertFalse(firstListenerAction.get());\n            ConnectionState firstconnectionState = firstListenerState.get();\n            assertEquals(firstconnectionState, ConnectionState.CONNECTED, \"First listener state MUST BE CONNECTED but is \" + firstconnectionState);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":170,"groupId":"1020","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testListenerConnectedAtStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/bb/f052e4de2a326cbdf9eb48ad35b76614f73c41.src","preCode":"    public void testListenerConnectedAtStart() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing(2);\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(0, 0));\n        try\n        {\n            client.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final AtomicBoolean firstListenerAction = new AtomicBoolean(true);\n            final AtomicReference<ConnectionState> firstListenerState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    if ( firstListenerAction.compareAndSet(true, false) )\n                    {\n                        firstListenerState.set(newState);\n                        System.out.println(\"First listener state is \" + newState);\n                    }\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            \r\n            client.create().inBackground().forPath(\"/foo\");\n\n            server.restart();\n\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            Assert.assertFalse(firstListenerAction.get());\n            ConnectionState firstconnectionState = firstListenerState.get();\n            Assert.assertEquals(firstconnectionState, ConnectionState.CONNECTED, \"First listener state MUST BE CONNECTED but is \" + firstconnectionState);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
