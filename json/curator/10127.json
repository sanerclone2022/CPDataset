[{"authorTime":"2016-04-21 09:12:31","codes":[{"authorDate":"2016-04-21 09:12:31","commitOrder":1,"curCode":"    public void testWithRetryInBackground() throws Exception\n    {\n        server.stop();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n            Watcher w = new Watcher()\n            {\n                @Override\n                public void process(WatchedEvent event)\n                {\n                    \r\n                }\n            };\n\n            final CountDownLatch latch = new CountDownLatch(1);\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    latch.countDown();\n                }\n            };\n            removerClient.checkExists().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n            Assert.assertTrue(new Timing().awaitLatch(latch));\n            Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":110,"groupId":"431","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithRetryInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/cd/b625d20ca086bc10e5c26027c4ef869920cd65.src","preCode":"    public void testWithRetryInBackground() throws Exception\n    {\n        server.stop();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n            Watcher w = new Watcher()\n            {\n                @Override\n                public void process(WatchedEvent event)\n                {\n                    \r\n                }\n            };\n\n            final CountDownLatch latch = new CountDownLatch(1);\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    latch.countDown();\n                }\n            };\n            removerClient.checkExists().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n            Assert.assertTrue(new Timing().awaitLatch(latch));\n            Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherRemovalManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2016-04-21 09:12:31","commitOrder":1,"curCode":"    public void testMissingNodeInBackground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n            Watcher w = new Watcher()\n            {\n                @Override\n                public void process(WatchedEvent event)\n                {\n                    \r\n                }\n            };\n            final CountDownLatch latch = new CountDownLatch(1);\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    latch.countDown();\n                }\n            };\n            removerClient.getData().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n            Assert.assertTrue(new Timing().awaitLatch(latch));\n            Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":178,"groupId":"433","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingNodeInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/cd/b625d20ca086bc10e5c26027c4ef869920cd65.src","preCode":"    public void testMissingNodeInBackground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n            Watcher w = new Watcher()\n            {\n                @Override\n                public void process(WatchedEvent event)\n                {\n                    \r\n                }\n            };\n            final CountDownLatch latch = new CountDownLatch(1);\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    latch.countDown();\n                }\n            };\n            removerClient.getData().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n            Assert.assertTrue(new Timing().awaitLatch(latch));\n            Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherRemovalManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"b1d2198a75d6e01b48789635ba648bedc542c439","commitMessage":"@@@If there's an exeption.  retries exceeded.  etc..  the watcher was still being stored in WatcherRemovealManager thus causing it to be incorrectly removed. This fix removes the watch from the WatcherRemovalmanager on exceptions.  retries exceeded.  etc.\n","date":"2016-04-21 09:12:31","modifiedFileCount":"20","status":"B","submitter":"randgalt"},{"authorTime":"2016-05-27 05:59:08","codes":[{"authorDate":"2016-05-27 05:59:08","commitOrder":2,"curCode":"    public void testWithRetryInBackground() throws Exception\n    {\n        server.stop();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n            Watcher w = new Watcher()\n            {\n                @Override\n                public void process(WatchedEvent event)\n                {\n                    \r\n                }\n            };\n\n            final CountDownLatch latch = new CountDownLatch(1);\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    latch.countDown();\n                }\n            };\n            removerClient.checkExists().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n            Assert.assertTrue(new Timing().awaitLatch(latch));\n            Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2016-05-27 05:59:08","endLine":233,"groupId":"431","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithRetryInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9c/405a2d8c356e3c45b1112f8c585049f77fc21f.src","preCode":"    public void testWithRetryInBackground() throws Exception\n    {\n        server.stop();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n            Watcher w = new Watcher()\n            {\n                @Override\n                public void process(WatchedEvent event)\n                {\n                    \r\n                }\n            };\n\n            final CountDownLatch latch = new CountDownLatch(1);\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    latch.countDown();\n                }\n            };\n            removerClient.checkExists().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n            Assert.assertTrue(new Timing().awaitLatch(latch));\n            Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherRemovalManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2016-05-27 05:59:08","commitOrder":2,"curCode":"    public void testMissingNodeInBackground() throws Exception\n    {\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        Callable<Void> proc = new Callable<Void>()\n        {\n            @Override\n            public Void call() throws Exception\n            {\n                client.start();\n                WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n                Watcher w = new Watcher()\n                {\n                    @Override\n                    public void process(WatchedEvent event)\n                    {\n                        \r\n                    }\n                };\n                final CountDownLatch latch = new CountDownLatch(1);\n                BackgroundCallback callback = new BackgroundCallback()\n                {\n                    @Override\n                    public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                    {\n                        latch.countDown();\n                    }\n                };\n                removerClient.getData().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n                Assert.assertTrue(new Timing().awaitLatch(latch));\n                Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n                removerClient.removeWatchers();\n                return null;\n            }\n        };\n        TestCleanState.test(client, proc);\n    }\n","date":"2016-05-27 05:59:08","endLine":304,"groupId":"433","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingNodeInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9c/405a2d8c356e3c45b1112f8c585049f77fc21f.src","preCode":"    public void testMissingNodeInBackground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n            Watcher w = new Watcher()\n            {\n                @Override\n                public void process(WatchedEvent event)\n                {\n                    \r\n                }\n            };\n            final CountDownLatch latch = new CountDownLatch(1);\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    latch.countDown();\n                }\n            };\n            removerClient.getData().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n            Assert.assertTrue(new Timing().awaitLatch(latch));\n            Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherRemovalManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"}],"commitId":"f59f23c703815317d4ef1d39e2b815e402d1559b","commitMessage":"@@@Reworked WatcherRemovalManager. It now stores watchers only on successful operations. This is more like how ZK does it.\nAlso.  exists watcher must be stored when there is a NoNode result.\n","date":"2016-05-27 05:59:08","modifiedFileCount":"11","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testWithRetryInBackground() throws Exception\n    {\n        server.stop();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n            Watcher w = new Watcher()\n            {\n                @Override\n                public void process(WatchedEvent event)\n                {\n                    \r\n                }\n            };\n\n            final CountDownLatch latch = new CountDownLatch(1);\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    latch.countDown();\n                }\n            };\n            removerClient.checkExists().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n            assertTrue(new Timing().awaitLatch(latch));\n            assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":237,"groupId":"10127","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testWithRetryInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c6/ac16cd8b041f8abeb77a26790d5b950a3d8de4.src","preCode":"    public void testWithRetryInBackground() throws Exception\n    {\n        server.stop();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n            Watcher w = new Watcher()\n            {\n                @Override\n                public void process(WatchedEvent event)\n                {\n                    \r\n                }\n            };\n\n            final CountDownLatch latch = new CountDownLatch(1);\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    latch.countDown();\n                }\n            };\n            removerClient.checkExists().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n            Assert.assertTrue(new Timing().awaitLatch(latch));\n            Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherRemovalManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testMissingNodeInBackground() throws Exception\n    {\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        Callable<Void> proc = new Callable<Void>()\n        {\n            @Override\n            public Void call() throws Exception\n            {\n                client.start();\n                WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n                Watcher w = new Watcher()\n                {\n                    @Override\n                    public void process(WatchedEvent event)\n                    {\n                        \r\n                    }\n                };\n                final CountDownLatch latch = new CountDownLatch(1);\n                BackgroundCallback callback = new BackgroundCallback()\n                {\n                    @Override\n                    public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                    {\n                        latch.countDown();\n                    }\n                };\n                removerClient.getData().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n                assertTrue(new Timing().awaitLatch(latch));\n                assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n                removerClient.removeWatchers();\n                return null;\n            }\n        };\n        TestCleanState.test(client, proc);\n    }\n","date":"2020-10-20 21:18:25","endLine":308,"groupId":"10127","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testMissingNodeInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c6/ac16cd8b041f8abeb77a26790d5b950a3d8de4.src","preCode":"    public void testMissingNodeInBackground() throws Exception\n    {\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        Callable<Void> proc = new Callable<Void>()\n        {\n            @Override\n            public Void call() throws Exception\n            {\n                client.start();\n                WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework();\n                Watcher w = new Watcher()\n                {\n                    @Override\n                    public void process(WatchedEvent event)\n                    {\n                        \r\n                    }\n                };\n                final CountDownLatch latch = new CountDownLatch(1);\n                BackgroundCallback callback = new BackgroundCallback()\n                {\n                    @Override\n                    public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                    {\n                        latch.countDown();\n                    }\n                };\n                removerClient.getData().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\");\n                Assert.assertTrue(new Timing().awaitLatch(latch));\n                Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(), 0);\n                removerClient.removeWatchers();\n                return null;\n            }\n        };\n        TestCleanState.test(client, proc);\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherRemovalManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
