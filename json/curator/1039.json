[{"authorTime":"2013-05-11 10:11:23","codes":[{"authorDate":"2013-05-11 10:11:23","commitOrder":1,"curCode":"    public void testListeningRunnable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        List<Future<?>> futures = Lists.newArrayList();\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Runnable()\n                {\n                    @Override\n                    public void run()\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        Assert.assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        Assert.assertEquals(service.size(), 0);\n    }\n","date":"2013-05-11 10:11:23","endLine":138,"groupId":"828","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testListeningRunnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/72/b63fd3752c308ed915c0323501a30f9bcc7cf9.src","preCode":"    public void testListeningRunnable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        List<Future<?>> futures = Lists.newArrayList();\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Runnable()\n                {\n                    @Override\n                    public void run()\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        Assert.assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        Assert.assertEquals(service.size(), 0);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/utils/TestCloseableExecutorService.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2013-05-11 10:11:23","commitOrder":1,"curCode":"    public void testListeningCallable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        List<Future<?>> futures = Lists.newArrayList();\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                        return null;\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        Assert.assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        Assert.assertEquals(service.size(), 0);\n    }\n","date":"2013-05-11 10:11:23","endLine":178,"groupId":"829","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testListeningCallable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/72/b63fd3752c308ed915c0323501a30f9bcc7cf9.src","preCode":"    public void testListeningCallable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        List<Future<?>> futures = Lists.newArrayList();\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                        return null;\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        Assert.assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        Assert.assertEquals(service.size(), 0);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/utils/TestCloseableExecutorService.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"6e3c9e27b8e6e2cda6ad146b8a63a60346badb0d","commitMessage":"@@@Introduced CloseableExecutorService. Instead of blindly shutting down exectors.  this container\nshuts down any futures created by an executor. This resolves issues where custom executors\nare given to Curator.\n\nMerge branch 'CURATOR-17' into 2.0.1-incubating\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/PathChildrenCache.java\n","date":"2013-05-11 10:11:23","modifiedFileCount":"5","status":"B","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testListeningRunnable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        List<Future<?>> futures = Lists.newArrayList();\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Runnable()\n                {\n                    @Override\n                    public void run()\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        assertEquals(service.size(), 0);\n    }\n","date":"2020-10-20 21:18:25","endLine":159,"groupId":"828","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testListeningRunnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/49/7e467f4a3d28cbdb9ee5e51e3613498bf986ad.src","preCode":"    public void testListeningRunnable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        List<Future<?>> futures = Lists.newArrayList();\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Runnable()\n                {\n                    @Override\n                    public void run()\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        Assert.assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        Assert.assertEquals(service.size(), 0);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/utils/TestCloseableExecutorService.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testListeningCallable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        List<Future<?>> futures = Lists.newArrayList();\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                        return null;\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        assertEquals(service.size(), 0);\n    }\n","date":"2020-10-20 21:18:25","endLine":199,"groupId":"829","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testListeningCallable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/49/7e467f4a3d28cbdb9ee5e51e3613498bf986ad.src","preCode":"    public void testListeningCallable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        List<Future<?>> futures = Lists.newArrayList();\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                        return null;\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        Assert.assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        Assert.assertEquals(service.size(), 0);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/utils/TestCloseableExecutorService.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"},{"authorTime":"2021-07-12 18:50:55","codes":[{"authorDate":"2021-07-12 18:50:55","commitOrder":3,"curCode":"    public void testListeningRunnable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        List<Future<?>> futures = Lists.newArrayList();\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                    () -> {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n            );\n            futures.add(future);\n        }\n\n        assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        assertEquals(service.size(), 0);\n    }\n","date":"2021-07-12 18:50:55","endLine":150,"groupId":"1039","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testListeningRunnable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/dd/189d8bce82bcd457bf3d364970df053b037f86.src","preCode":"    public void testListeningRunnable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        List<Future<?>> futures = Lists.newArrayList();\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Runnable()\n                {\n                    @Override\n                    public void run()\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        assertEquals(service.size(), 0);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/utils/TestCloseableExecutorService.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-07-12 18:50:55","commitOrder":3,"curCode":"    public void testListeningCallable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        List<Future<?>> futures = Lists.newArrayList();\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                    (Callable<Void>) () -> {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                        return null;\n                    }\n            );\n            futures.add(future);\n        }\n\n        assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        assertEquals(service.size(), 0);\n    }\n","date":"2021-07-12 18:50:55","endLine":185,"groupId":"1039","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testListeningCallable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/dd/189d8bce82bcd457bf3d364970df053b037f86.src","preCode":"    public void testListeningCallable() throws InterruptedException\n    {\n        CloseableExecutorService service = new CloseableExecutorService(executorService);\n        final CountDownLatch startLatch = new CountDownLatch(QTY);\n        List<Future<?>> futures = Lists.newArrayList();\n        for ( int i = 0; i < QTY; ++i )\n        {\n            Future<?> future = service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        try\n                        {\n                            startLatch.countDown();\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                        }\n                        return null;\n                    }\n                }\n            );\n            futures.add(future);\n        }\n\n        assertTrue(startLatch.await(3, TimeUnit.SECONDS));\n        for ( Future<?> future : futures )\n        {\n            future.cancel(true);\n        }\n\n        assertEquals(service.size(), 0);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/utils/TestCloseableExecutorService.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"4dffb5e658b28f734bc919bad8f1300c8364faed","commitMessage":"@@@Use Awaitility to instead of Thread sleep method. (#389)\n\n","date":"2021-07-12 18:50:55","modifiedFileCount":"3","status":"M","submitter":"Qiang Zhao"}]
