[{"authorTime":"2015-09-01 21:27:31","codes":[{"authorDate":"2015-09-01 21:27:31","commitOrder":2,"curCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","date":"2015-09-01 21:27:31","endLine":73,"groupId":"1663","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/49/0e75e35a200134a678e3d596217525b3598c6b.src","preCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestEnabledSessionExpiredState.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2015-09-01 21:27:31","commitOrder":2,"curCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing timing = new Timing();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .errorPolicy(new StandardErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"release\");\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .errorPolicy(new SessionErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"release\");\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-09-01 21:27:31","endLine":141,"groupId":"783","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorPolicies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e5/b971760cf5834656df29ec1ed678738fc3665f.src","preCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing timing = new Timing();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .errorPolicy(new StandardErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"release\");\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .errorPolicy(new SessionErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"release\");\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"MB"}],"commitId":"c117b0853b5779829ff732514aedd7d60b696ccc","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-248\n\nConflicts:\n\tcurator-framework/src/main/java/org/apache/curator/framework/CuratorFrameworkFactory.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java\n","date":"2015-09-01 21:27:31","modifiedFileCount":"26","status":"M","submitter":"randgalt"},{"authorTime":"2015-09-01 21:32:52","codes":[{"authorDate":"2015-09-01 21:27:31","commitOrder":3,"curCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","date":"2015-09-01 21:27:31","endLine":73,"groupId":"1663","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/49/0e75e35a200134a678e3d596217525b3598c6b.src","preCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestEnabledSessionExpiredState.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2015-09-01 21:32:52","commitOrder":3,"curCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing timing = new Timing();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .errorPolicy(new StandardErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            List<String> next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.SUSPENDED.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.SUSPENDED.name())), next.toString());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .errorPolicy(new SessionErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.LOST.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.LOST.name())), next.toString());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-09-01 21:32:52","endLine":146,"groupId":"420","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorPolicies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/cd/76bc13f1308d329a44e0bd31a825c928a6bbf4.src","preCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing timing = new Timing();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .errorPolicy(new StandardErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"release\");\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .errorPolicy(new SessionErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"release\");\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"49b267d185bddb7d2be073731ebc6a8352ed6efb","commitMessage":"@@@refined the tests\n","date":"2015-09-01 21:32:52","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2015-09-07 14:51:26","codes":[{"authorDate":"2015-09-01 21:27:31","commitOrder":4,"curCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","date":"2015-09-01 21:27:31","endLine":73,"groupId":"1663","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/49/0e75e35a200134a678e3d596217525b3598c6b.src","preCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestEnabledSessionExpiredState.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2015-09-07 14:51:26","commitOrder":4,"curCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing timing = new Timing();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .errorPolicy(new StandardConnectionStateErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            List<String> next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.SUSPENDED.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.SUSPENDED.name())), next.toString());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .errorPolicy(new SessionConnectionStateErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.LOST.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.LOST.name())), next.toString());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-09-07 14:51:26","endLine":145,"groupId":"420","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorPolicies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/51/0e51540545d326ee3dfae8273ddc504f8dec88.src","preCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing timing = new Timing();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .errorPolicy(new StandardErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            List<String> next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.SUSPENDED.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.SUSPENDED.name())), next.toString());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .errorPolicy(new SessionErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.LOST.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.LOST.name())), next.toString());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"7aa371e9514e1a8227d1ed93833bd9e6238c60ed","commitMessage":"@@@renamed to clarify meaning\n","date":"2015-09-07 14:51:26","modifiedFileCount":"7","status":"M","submitter":"randgalt"},{"authorTime":"2015-09-09 06:52:32","codes":[{"authorDate":"2015-09-01 21:27:31","commitOrder":5,"curCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","date":"2015-09-01 21:27:31","endLine":73,"groupId":"1663","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/49/0e75e35a200134a678e3d596217525b3598c6b.src","preCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestEnabledSessionExpiredState.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2015-09-09 06:52:32","commitOrder":5,"curCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing timing = new Timing();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .connectionStateErrorPolicy(new StandardConnectionStateErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            List<String> next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.SUSPENDED.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.SUSPENDED.name())), next.toString());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .connectionStateErrorPolicy(new SessionConnectionStateErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.LOST.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.LOST.name())), next.toString());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-09-09 06:52:32","endLine":145,"groupId":"420","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorPolicies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e9/a7002fd0df7333c6b67d5f8a77a270f16235f1.src","preCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing timing = new Timing();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .errorPolicy(new StandardConnectionStateErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            List<String> next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.SUSPENDED.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.SUSPENDED.name())), next.toString());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .errorPolicy(new SessionConnectionStateErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.LOST.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.LOST.name())), next.toString());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"cee1c0eabf1e899b239bf69c443fe1e8316a93cd","commitMessage":"@@@Fixed some old naming\n","date":"2015-09-09 06:52:32","modifiedFileCount":"3","status":"M","submitter":"randgalt"},{"authorTime":"2017-07-22 03:27:07","codes":[{"authorDate":"2015-09-01 21:27:31","commitOrder":6,"curCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","date":"2015-09-01 21:27:31","endLine":73,"groupId":"1663","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/49/0e75e35a200134a678e3d596217525b3598c6b.src","preCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestEnabledSessionExpiredState.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2017-07-22 03:27:07","commitOrder":6,"curCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing2 timing = new Timing2();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .connectionStateErrorPolicy(new StandardConnectionStateErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            List<String> next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.SUSPENDED.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.SUSPENDED.name())), next.toString());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .connectionStateErrorPolicy(new SessionConnectionStateErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.LOST.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.LOST.name())), next.toString());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-07-22 03:27:07","endLine":146,"groupId":"420","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorPolicies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/80/8ff8fa86676e6f6ac6b0cd242612a916b03107.src","preCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing timing = new Timing();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .connectionStateErrorPolicy(new StandardConnectionStateErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            List<String> next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.SUSPENDED.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.SUSPENDED.name())), next.toString());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .connectionStateErrorPolicy(new SessionConnectionStateErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.LOST.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.LOST.name())), next.toString());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"31d7f9a2040975dee08cb685d61cceb7015f9e32","commitMessage":"@@@Merge branch 'master' into CURATOR-426\n","date":"2017-07-22 03:27:07","modifiedFileCount":"35","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2015-09-01 21:27:31","commitOrder":7,"curCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","date":"2015-09-01 21:27:31","endLine":73,"groupId":"10109","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/49/0e75e35a200134a678e3d596217525b3598c6b.src","preCode":"    public void setup() throws Exception\n    {\n        super.setup();\n\n        client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n\n        states = Queues.newLinkedBlockingQueue();\n        ConnectionStateListener listener = new ConnectionStateListener()\n        {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState)\n            {\n                states.add(newState);\n            }\n        };\n        client.getConnectionStateListenable().addListener(listener);\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestEnabledSessionExpiredState.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2020-10-20 21:18:25","commitOrder":7,"curCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing2 timing = new Timing2();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .connectionStateErrorPolicy(new StandardConnectionStateErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            List<String> next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            assertTrue(next.equals(Arrays.asList(ConnectionState.SUSPENDED.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.SUSPENDED.name())), next.toString());\n            assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .connectionStateErrorPolicy(new SessionConnectionStateErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            assertTrue(next.equals(Arrays.asList(ConnectionState.LOST.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.LOST.name())), next.toString());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":193,"groupId":"10109","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testErrorPolicies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/44/e026900c0bf9a13816fc4667ba1db44f82fb06.src","preCode":"    public void testErrorPolicies() throws Exception\n    {\n        Timing2 timing = new Timing2();\n        LeaderSelector selector = null;\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .connectionTimeoutMs(timing.connection())\n            .sessionTimeoutMs(timing.session())\n            .retryPolicy(new RetryOneTime(1))\n            .connectionStateErrorPolicy(new StandardConnectionStateErrorPolicy())\n            .build();\n        try\n        {\n            final BlockingQueue<String> changes = Queues.newLinkedBlockingQueue();\n\n            ConnectionStateListener stateListener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    changes.add(newState.name());\n                }\n            };\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    changes.add(\"leader\");\n                    try\n                    {\n                        Thread.currentThread().join();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        changes.add(\"release\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.close();\n            List<String> next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.SUSPENDED.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.SUSPENDED.name())), next.toString());\n            Assert.assertEquals(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.LOST.name());\n\n            selector.close();\n            client.close();\n            timing.sleepABit();\n            changes.clear();\n\n            server = new TestingServer();\n            client = CuratorFrameworkFactory\n                .builder()\n                .connectString(server.getConnectString())\n                .connectionTimeoutMs(timing.connection())\n                .sessionTimeoutMs(timing.session())\n                .retryPolicy(new RetryOneTime(1))\n                .connectionStateErrorPolicy(new SessionConnectionStateErrorPolicy())\n                .build();\n            client.getConnectionStateListenable().addListener(stateListener);\n            client.start();\n            selector = new LeaderSelector(client, \"/test\", listener);\n            selector.start();\n\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.CONNECTED.name());\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), \"leader\");\n            server.stop();\n            Assert.assertEquals(changes.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS), ConnectionState.SUSPENDED.name());\n            next = Lists.newArrayList();\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            next.add(changes.poll(timing.forSessionSleep().milliseconds(), TimeUnit.MILLISECONDS));\n            Assert.assertTrue(next.equals(Arrays.asList(ConnectionState.LOST.name(), \"release\")) || next.equals(Arrays.asList(\"release\", ConnectionState.LOST.name())), next.toString());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(selector);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
