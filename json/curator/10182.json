[{"authorTime":"2015-08-18 01:01:21","codes":[{"authorDate":"2014-02-04 02:55:50","commitOrder":3,"curCode":"    public void testDeletingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n            final CountDownLatch        waitLatch = new CountDownLatch(1);\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    waitLatch.await();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n            \n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n            Assert.assertEquals(queue.remove(\"id\"), 0);\n\n            waitLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":83,"groupId":"2009","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletingWithLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9b/741999afd43a793625559e22f4fd5fc6670478.src","preCode":"    public void testDeletingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n            final CountDownLatch        waitLatch = new CountDownLatch(1);\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    waitLatch.await();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n            \n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n            Assert.assertEquals(queue.remove(\"id\"), 0);\n\n            waitLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedIdQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"NB"},{"authorDate":"2015-08-18 01:01:21","commitOrder":3,"curCode":"    public void testRequeuingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    \r\n                    throw new Exception(\"Consumer failed\");\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n\n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n\n            \r\n\n            Thread.sleep(1000);\n\n            Assert.assertEquals(queue.remove(\"id\"), 1);\n\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-08-18 01:01:21","endLine":173,"groupId":"993","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequeuingWithLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/85/8086bc4f2358b7ba9f3047e95f052d35ecca52.src","preCode":"    public void testRequeuingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    \r\n                    throw new Exception(\"Consumer failed\");\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n\n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n\n            \r\n\n            Thread.sleep(1000);\n\n            Assert.assertEquals(queue.remove(\"id\"), 1);\n\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedIdQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"}],"commitId":"44ee8547ef3563823c89ac9d8570a0df1b33a0a8","commitMessage":"@@@Merge 'master' into CURATOR-3.0\n","date":"2015-08-18 01:01:21","modifiedFileCount":"51","status":"M","submitter":"Scott Blum"},{"authorTime":"2015-08-22 01:53:11","codes":[{"authorDate":"2014-02-04 02:55:50","commitOrder":4,"curCode":"    public void testDeletingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n            final CountDownLatch        waitLatch = new CountDownLatch(1);\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    waitLatch.await();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n            \n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n            Assert.assertEquals(queue.remove(\"id\"), 0);\n\n            waitLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":83,"groupId":"2009","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletingWithLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9b/741999afd43a793625559e22f4fd5fc6670478.src","preCode":"    public void testDeletingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n            final CountDownLatch        waitLatch = new CountDownLatch(1);\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    waitLatch.await();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n            \n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n            Assert.assertEquals(queue.remove(\"id\"), 0);\n\n            waitLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedIdQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2015-08-22 01:53:11","commitOrder":4,"curCode":"    public void testRequeuingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    \r\n                    throw new Exception(\"Consumer failed\");\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n\n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n\n            \r\n\n            Thread.sleep(1000);\n\n            Assert.assertTrue(queue.debugIsQueued(\"id\"));\n\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-08-22 01:53:11","endLine":173,"groupId":"993","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequeuingWithLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/24/f74a1f51cb3346c2fbf097caba108e92c4aa77.src","preCode":"    public void testRequeuingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    \r\n                    throw new Exception(\"Consumer failed\");\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n\n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n\n            \r\n\n            Thread.sleep(1000);\n\n            Assert.assertEquals(queue.remove(\"id\"), 1);\n\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedIdQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"23710fe0669577611c29df3b3f0c8fb1d8c162bf","commitMessage":"@@@Merge branch 'master' into CURATOR-3.0\n","date":"2015-08-22 01:53:11","modifiedFileCount":"2","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testDeletingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n            final CountDownLatch        waitLatch = new CountDownLatch(1);\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    waitLatch.await();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n            \n            assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n            assertEquals(queue.remove(\"id\"), 0);\n\n            waitLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":84,"groupId":"10182","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testDeletingWithLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c2/a81ab10d402c0ed45b8437caa18ef47c33b870.src","preCode":"    public void testDeletingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n            final CountDownLatch        waitLatch = new CountDownLatch(1);\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    waitLatch.await();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n            \n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n            Assert.assertEquals(queue.remove(\"id\"), 0);\n\n            waitLatch.countDown();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedIdQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testRequeuingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    \r\n                    throw new Exception(\"Consumer failed\");\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n\n            assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n\n            \r\n\n            Thread.sleep(1000);\n\n            assertTrue(queue.debugIsQueued(\"id\"));\n\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":174,"groupId":"10182","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testRequeuingWithLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c2/a81ab10d402c0ed45b8437caa18ef47c33b870.src","preCode":"    public void testRequeuingWithLock() throws Exception\n    {\n        DistributedIdQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final CountDownLatch        consumingLatch = new CountDownLatch(1);\n\n            QueueConsumer<TestQueueItem> consumer = new QueueConsumer<TestQueueItem>()\n            {\n                @Override\n                public void consumeMessage(TestQueueItem message) throws Exception\n                {\n                    consumingLatch.countDown();\n                    \r\n                    throw new Exception(\"Consumer failed\");\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).lockPath(\"/locks\").buildIdQueue();\n            queue.start();\n\n            queue.put(new TestQueueItem(\"test\"), \"id\");\n\n            Assert.assertTrue(consumingLatch.await(10, TimeUnit.SECONDS));  \r\n\n            \r\n\n            Thread.sleep(1000);\n\n            Assert.assertTrue(queue.debugIsQueued(\"id\"));\n\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedIdQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
