[{"authorTime":"2014-03-06 08:57:04","codes":[{"authorDate":"2014-02-04 02:55:50","commitOrder":3,"curCode":"    public void testCallbackSanity() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong dunceCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackSanity-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n            latch.addListener(\n                new LeaderLatchListener()\n                {\n                    boolean beenLeader = false;\n\n                    @Override\n                    public void isLeader()\n                    {\n                        if ( !beenLeader )\n                        {\n                            masterCounter.incrementAndGet();\n                            beenLeader = true;\n                            try\n                            {\n                                latch.reset();\n                            }\n                            catch ( Exception e )\n                            {\n                                throw Throwables.propagate(e);\n                            }\n                        }\n                        else\n                        {\n                            masterCounter.incrementAndGet();\n                            CloseableUtils.closeQuietly(latch);\n                            timesSquare.countDown();\n                        }\n                    }\n\n                    @Override\n                    public void notLeader()\n                    {\n                        dunceCounter.incrementAndGet();\n                    }\n                },\n                exec\n            );\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(dunceCounter.get(), PARTICIPANT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":366,"groupId":"1366","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallbackSanity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f4/b5590bec1129d1716d90be818bd35ef612e884.src","preCode":"    public void testCallbackSanity() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong dunceCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackSanity-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n            latch.addListener(\n                new LeaderLatchListener()\n                {\n                    boolean beenLeader = false;\n\n                    @Override\n                    public void isLeader()\n                    {\n                        if ( !beenLeader )\n                        {\n                            masterCounter.incrementAndGet();\n                            beenLeader = true;\n                            try\n                            {\n                                latch.reset();\n                            }\n                            catch ( Exception e )\n                            {\n                                throw Throwables.propagate(e);\n                            }\n                        }\n                        else\n                        {\n                            masterCounter.incrementAndGet();\n                            CloseableUtils.closeQuietly(latch);\n                            timesSquare.countDown();\n                        }\n                    }\n\n                    @Override\n                    public void notLeader()\n                    {\n                        dunceCounter.incrementAndGet();\n                    }\n                },\n                exec\n            );\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(dunceCounter.get(), PARTICIPANT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"NB"},{"authorDate":"2014-03-06 08:57:04","commitOrder":3,"curCode":"    public void testCallbackNotifyLeader() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int SILENT_QTY = 3;\n\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong dunceCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackNotifyLeader-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            LeaderLatch.CloseMode closeMode = i < SILENT_QTY ?\n                    LeaderLatch.CloseMode.SILENT :\n                    LeaderLatch.CloseMode.NOTIFY_LEADER;\n\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME, \"\", closeMode);\n            latch.addListener(\n                new LeaderLatchListener()\n                {\n                    boolean beenLeader = false;\n\n                    @Override\n                    public void isLeader()\n                    {\n                        if ( !beenLeader )\n                        {\n                            masterCounter.incrementAndGet();\n                            beenLeader = true;\n                            try\n                            {\n                                latch.reset();\n                            }\n                            catch ( Exception e )\n                            {\n                                throw Throwables.propagate(e);\n                            }\n                        }\n                        else\n                        {\n                            masterCounter.incrementAndGet();\n                            CloseableUtils.closeQuietly(latch);\n                            timesSquare.countDown();\n                        }\n                    }\n\n                    @Override\n                    public void notLeader()\n                    {\n                        dunceCounter.incrementAndGet();\n                    }\n                },\n                exec\n            );\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(dunceCounter.get(), PARTICIPANT_QTY * 2 - SILENT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-03-06 10:53:16","endLine":459,"groupId":"122","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbackNotifyLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/06/7c8175b4448591f9fc7d07e0c10c357c4abfe1.src","preCode":"    public void testCallbackNotifyLeader() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int SILENT_QTY = 3;\n\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong dunceCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackNotifyLeader-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            LeaderLatch.CloseMode closeMode = i < SILENT_QTY ?\n                    LeaderLatch.CloseMode.SILENT :\n                    LeaderLatch.CloseMode.NOTIFY_LEADER;\n\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME, \"\", closeMode);\n            latch.addListener(\n                new LeaderLatchListener()\n                {\n                    boolean beenLeader = false;\n\n                    @Override\n                    public void isLeader()\n                    {\n                        if ( !beenLeader )\n                        {\n                            masterCounter.incrementAndGet();\n                            beenLeader = true;\n                            try\n                            {\n                                latch.reset();\n                            }\n                            catch ( Exception e )\n                            {\n                                throw Throwables.propagate(e);\n                            }\n                        }\n                        else\n                        {\n                            masterCounter.incrementAndGet();\n                            CloseableUtils.closeQuietly(latch);\n                            timesSquare.countDown();\n                        }\n                    }\n\n                    @Override\n                    public void notLeader()\n                    {\n                        dunceCounter.incrementAndGet();\n                    }\n                },\n                exec\n            );\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(dunceCounter.get(), PARTICIPANT_QTY * 2 - SILENT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"B"}],"commitId":"2580ef3f5df148a67fe5d2769e4d04890e8b4fd6","commitMessage":"@@@Added CloseMode support to LeaderLatch in order to be able to trigger the notLeader() callback when a Latch is manually closed.\n\nThis closes #1\n","date":"2014-03-06 10:53:16","modifiedFileCount":"2","status":"M","submitter":"David Trott"},{"authorTime":"2014-03-06 18:58:52","codes":[{"authorDate":"2014-03-06 18:58:52","commitOrder":4,"curCode":"    public void testCallbackSanity() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackSanity-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-03-06 18:58:52","endLine":357,"groupId":"1366","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallbackSanity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1d/cd3520aaae1159f23cc6bbf0c32b9331462ef4.src","preCode":"    public void testCallbackSanity() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong dunceCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackSanity-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n            latch.addListener(\n                new LeaderLatchListener()\n                {\n                    boolean beenLeader = false;\n\n                    @Override\n                    public void isLeader()\n                    {\n                        if ( !beenLeader )\n                        {\n                            masterCounter.incrementAndGet();\n                            beenLeader = true;\n                            try\n                            {\n                                latch.reset();\n                            }\n                            catch ( Exception e )\n                            {\n                                throw Throwables.propagate(e);\n                            }\n                        }\n                        else\n                        {\n                            masterCounter.incrementAndGet();\n                            CloseableUtils.closeQuietly(latch);\n                            timesSquare.countDown();\n                        }\n                    }\n\n                    @Override\n                    public void notLeader()\n                    {\n                        dunceCounter.incrementAndGet();\n                    }\n                },\n                exec\n            );\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(dunceCounter.get(), PARTICIPANT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2014-03-06 18:58:52","commitOrder":4,"curCode":"    public void testCallbackNotifyLeader() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int SILENT_QTY = 3;\n\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackNotifyLeader-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            LeaderLatch.CloseMode closeMode = i < SILENT_QTY ? LeaderLatch.CloseMode.SILENT : LeaderLatch.CloseMode.NOTIFY_LEADER;\n\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME, \"\", closeMode);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY * 2 - SILENT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-03-06 18:58:52","endLine":445,"groupId":"122","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbackNotifyLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1d/cd3520aaae1159f23cc6bbf0c32b9331462ef4.src","preCode":"    public void testCallbackNotifyLeader() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int SILENT_QTY = 3;\n\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong dunceCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackNotifyLeader-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            LeaderLatch.CloseMode closeMode = i < SILENT_QTY ?\n                    LeaderLatch.CloseMode.SILENT :\n                    LeaderLatch.CloseMode.NOTIFY_LEADER;\n\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME, \"\", closeMode);\n            latch.addListener(\n                new LeaderLatchListener()\n                {\n                    boolean beenLeader = false;\n\n                    @Override\n                    public void isLeader()\n                    {\n                        if ( !beenLeader )\n                        {\n                            masterCounter.incrementAndGet();\n                            beenLeader = true;\n                            try\n                            {\n                                latch.reset();\n                            }\n                            catch ( Exception e )\n                            {\n                                throw Throwables.propagate(e);\n                            }\n                        }\n                        else\n                        {\n                            masterCounter.incrementAndGet();\n                            CloseableUtils.closeQuietly(latch);\n                            timesSquare.countDown();\n                        }\n                    }\n\n                    @Override\n                    public void notLeader()\n                    {\n                        dunceCounter.incrementAndGet();\n                    }\n                },\n                exec\n            );\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(dunceCounter.get(), PARTICIPANT_QTY * 2 - SILENT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"a40b81940849ff37de0dc8d9a412bde709620d59","commitMessage":"@@@minor refactoring\n","date":"2014-03-06 18:58:52","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-08-18 10:13:37","commitOrder":5,"curCode":"    public void testCallbackSanity() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackSanity-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":421,"groupId":"1366","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallbackSanity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/37/42fb7f7c4b7851c140d2de2383638972217c29.src","preCode":"    public void testCallbackSanity() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackSanity-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"},{"authorDate":"2015-08-18 10:13:37","commitOrder":5,"curCode":"    public void testCallbackNotifyLeader() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int SILENT_QTY = 3;\n\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackNotifyLeader-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            LeaderLatch.CloseMode closeMode = i < SILENT_QTY ? LeaderLatch.CloseMode.SILENT : LeaderLatch.CloseMode.NOTIFY_LEADER;\n\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME, \"\", closeMode);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY * 2 - SILENT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":509,"groupId":"122","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbackNotifyLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/37/42fb7f7c4b7851c140d2de2383638972217c29.src","preCode":"    public void testCallbackNotifyLeader() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int SILENT_QTY = 3;\n\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackNotifyLeader-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            LeaderLatch.CloseMode closeMode = i < SILENT_QTY ? LeaderLatch.CloseMode.SILENT : LeaderLatch.CloseMode.NOTIFY_LEADER;\n\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME, \"\", closeMode);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY * 2 - SILENT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"M"}],"commitId":"d5d12c88b075fd1fc51a29412b3c08918cceb983","commitMessage":"@@@Merge 'CURATOR-217' into CURATOR-3.0\n","date":"2015-08-18 10:13:37","modifiedFileCount":"40","status":"M","submitter":"Scott Blum"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":6,"curCode":"    public void testCallbackSanity() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackSanity-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":747,"groupId":"10260","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCallbackSanity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d6/4e7cfee5a68697da91b22db994682480935885.src","preCode":"    public void testCallbackSanity() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackSanity-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":6,"curCode":"    public void testCallbackNotifyLeader() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int SILENT_QTY = 3;\n\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackNotifyLeader-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            LeaderLatch.CloseMode closeMode = i < SILENT_QTY ? LeaderLatch.CloseMode.SILENT : LeaderLatch.CloseMode.NOTIFY_LEADER;\n\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME, \"\", closeMode);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY * 2 - SILENT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":835,"groupId":"10260","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testCallbackNotifyLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d6/4e7cfee5a68697da91b22db994682480935885.src","preCode":"    public void testCallbackNotifyLeader() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int SILENT_QTY = 3;\n\n        final CountDownLatch timesSquare = new CountDownLatch(PARTICIPANT_QTY);\n        final AtomicLong masterCounter = new AtomicLong(0);\n        final AtomicLong notLeaderCounter = new AtomicLong(0);\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        ExecutorService exec = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"callbackNotifyLeader-%s\").build());\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n        for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n        {\n            LeaderLatch.CloseMode closeMode = i < SILENT_QTY ? LeaderLatch.CloseMode.SILENT : LeaderLatch.CloseMode.NOTIFY_LEADER;\n\n            final LeaderLatch latch = new LeaderLatch(client, PATH_NAME, \"\", closeMode);\n            latch.addListener(new LeaderLatchListener()\n            {\n                boolean beenLeader = false;\n\n                @Override\n                public void isLeader()\n                {\n                    if ( !beenLeader )\n                    {\n                        masterCounter.incrementAndGet();\n                        beenLeader = true;\n                        try\n                        {\n                            latch.reset();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw Throwables.propagate(e);\n                        }\n                    }\n                    else\n                    {\n                        masterCounter.incrementAndGet();\n                        CloseableUtils.closeQuietly(latch);\n                        timesSquare.countDown();\n                    }\n                }\n\n                @Override\n                public void notLeader()\n                {\n                    notLeaderCounter.incrementAndGet();\n                }\n            }, exec);\n            latches.add(latch);\n        }\n\n        try\n        {\n            client.start();\n\n            for ( LeaderLatch latch : latches )\n            {\n                latch.start();\n            }\n\n            timesSquare.await();\n\n            Assert.assertEquals(masterCounter.get(), PARTICIPANT_QTY * 2);\n            Assert.assertEquals(notLeaderCounter.get(), PARTICIPANT_QTY * 2 - SILENT_QTY);\n            for ( LeaderLatch latch : latches )\n            {\n                Assert.assertEquals(latch.getState(), LeaderLatch.State.CLOSED);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                if ( latch.getState() != LeaderLatch.State.CLOSED )\n                {\n                    CloseableUtils.closeQuietly(latch);\n                }\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":750,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
