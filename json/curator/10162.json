[{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2018-06-24 22:08:02","commitOrder":4,"curCode":"    public void testRaceOnInitialLoad() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/discovery\").client(client).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            CountDownLatch cacheStartLatch = new CountDownLatch(1);\n            CountDownLatch cacheWaitLatch = new CountDownLatch(1);\n            final ServiceCache<String> cache = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache);\n            ((ServiceCacheImpl)cache).debugStartLatch = cacheStartLatch;    \r\n            ((ServiceCacheImpl)cache).debugStartWaitLatch = cacheWaitLatch; \r\n\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10064).build();\n            discovery.registerService(instance1);\n\n            CloseableExecutorService closeableExecutorService = new CloseableExecutorService(Executors.newSingleThreadExecutor());\n            closeables.add(closeableExecutorService);\n            final CountDownLatch startCompletedLatch = new CountDownLatch(1);\n            Runnable proc = new Runnable()\n            {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        cache.start();\n                        startCompletedLatch.countDown();\n                    }\n                    catch ( Exception e )\n                    {\n                        LoggerFactory.getLogger(getClass()).error(\"Start failed\", e);\n                        throw new RuntimeException(e);\n                    }\n                }\n            };\n            closeableExecutorService.submit(proc);\n            Assert.assertTrue(timing.awaitLatch(cacheStartLatch));  \r\n\n            final CountDownLatch cacheChangedLatch = new CountDownLatch(1);\n            ServiceCacheListener listener = new ServiceCacheListener()\n            {\n                @Override\n                public void cacheChanged()\n                {\n                    cacheChangedLatch.countDown();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    \r\n                }\n            };\n            cache.addListener(listener);\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10065).build();\n            discovery.registerService(instance2);   \r\n            Assert.assertTrue(timing.awaitLatch(cacheChangedLatch));\n\n            cacheWaitLatch.countDown();\n\n            Assert.assertTrue(timing.awaitLatch(startCompletedLatch));\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2018-06-24 22:08:02","endLine":109,"groupId":"798","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRaceOnInitialLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/08/a2a8e839807e4b0621d57b570beda5737e4a5d.src","preCode":"    public void testRaceOnInitialLoad() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/discovery\").client(client).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            CountDownLatch cacheStartLatch = new CountDownLatch(1);\n            CountDownLatch cacheWaitLatch = new CountDownLatch(1);\n            final ServiceCache<String> cache = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache);\n            ((ServiceCacheImpl)cache).debugStartLatch = cacheStartLatch;    \r\n            ((ServiceCacheImpl)cache).debugStartWaitLatch = cacheWaitLatch; \r\n\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10064).build();\n            discovery.registerService(instance1);\n\n            CloseableExecutorService closeableExecutorService = new CloseableExecutorService(Executors.newSingleThreadExecutor());\n            closeables.add(closeableExecutorService);\n            final CountDownLatch startCompletedLatch = new CountDownLatch(1);\n            Runnable proc = new Runnable()\n            {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        cache.start();\n                        startCompletedLatch.countDown();\n                    }\n                    catch ( Exception e )\n                    {\n                        LoggerFactory.getLogger(getClass()).error(\"Start failed\", e);\n                        throw new RuntimeException(e);\n                    }\n                }\n            };\n            closeableExecutorService.submit(proc);\n            Assert.assertTrue(timing.awaitLatch(cacheStartLatch));  \r\n\n            final CountDownLatch cacheChangedLatch = new CountDownLatch(1);\n            ServiceCacheListener listener = new ServiceCacheListener()\n            {\n                @Override\n                public void cacheChanged()\n                {\n                    cacheChangedLatch.countDown();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    \r\n                }\n            };\n            cache.addListener(listener);\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10065).build();\n            discovery.registerService(instance2);   \r\n            Assert.assertTrue(timing.awaitLatch(cacheChangedLatch));\n\n            cacheWaitLatch.countDown();\n\n            Assert.assertTrue(timing.awaitLatch(startCompletedLatch));\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceCacheRace.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"},{"authorDate":"2014-05-23 22:46:02","commitOrder":4,"curCode":"    public void     testInitialLoad() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceDiscovery<String>    discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/discovery\").client(client).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            ServiceCache<String>        cache = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache);\n\n            final CountDownLatch        latch = new CountDownLatch(3);\n            ServiceCacheListener        listener = new ServiceCacheListener()\n            {\n                @Override\n                public void cacheChanged()\n                {\n                    latch.countDown();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n            cache.addListener(listener);\n            cache.start();\n\n            ServiceInstance<String>     instance1 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10064).build();\n            ServiceInstance<String>     instance2 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10065).build();\n            ServiceInstance<String>     instance3 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10066).build();\n            discovery.registerService(instance1);\n            discovery.registerService(instance2);\n            discovery.registerService(instance3);\n\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n\n            ServiceCache<String>        cache2 = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache2);\n            cache2.start();\n\n            Assert.assertEquals(cache2.getInstances().size(), 3);\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":100,"groupId":"1046","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInitialLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/be/114d41e220f8391b589c67dc70ea7d5b9387da.src","preCode":"    public void     testInitialLoad() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceDiscovery<String>    discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/discovery\").client(client).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            ServiceCache<String>        cache = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache);\n\n            final CountDownLatch        latch = new CountDownLatch(3);\n            ServiceCacheListener        listener = new ServiceCacheListener()\n            {\n                @Override\n                public void cacheChanged()\n                {\n                    latch.countDown();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n            cache.addListener(listener);\n            cache.start();\n\n            ServiceInstance<String>     instance1 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10064).build();\n            ServiceInstance<String>     instance2 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10065).build();\n            ServiceInstance<String>     instance3 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10066).build();\n            discovery.registerService(instance1);\n            discovery.registerService(instance2);\n            discovery.registerService(instance3);\n\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n\n            ServiceCache<String>        cache2 = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache2);\n            cache2.start();\n\n            Assert.assertEquals(cache2.getInstances().size(), 3);\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/TestServiceCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"NB"}],"commitId":"cc30b67c8dbe24babd31ed654e9536fe776b8a18","commitMessage":"@@@Fix for CURATOR-452\n\nrace in ServiceCacheImpl's start() method caused by an optimization whereby it clears the dataBytes of its internal PathChildrenCache - was causing an intermittent NPE\n","date":"2018-06-24 22:08:02","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testRaceOnInitialLoad() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/discovery\").client(client).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            CountDownLatch cacheStartLatch = new CountDownLatch(1);\n            CountDownLatch cacheWaitLatch = new CountDownLatch(1);\n            final ServiceCache<String> cache = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache);\n            ((ServiceCacheImpl)cache).debugStartLatch = cacheStartLatch;    \r\n            ((ServiceCacheImpl)cache).debugStartWaitLatch = cacheWaitLatch; \r\n\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10064).build();\n            discovery.registerService(instance1);\n\n            CloseableExecutorService closeableExecutorService = new CloseableExecutorService(Executors.newSingleThreadExecutor());\n            closeables.add(closeableExecutorService);\n            final CountDownLatch startCompletedLatch = new CountDownLatch(1);\n            Runnable proc = new Runnable()\n            {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        cache.start();\n                        startCompletedLatch.countDown();\n                    }\n                    catch ( Exception e )\n                    {\n                        LoggerFactory.getLogger(getClass()).error(\"Start failed\", e);\n                        throw new RuntimeException(e);\n                    }\n                }\n            };\n            closeableExecutorService.submit(proc);\n            assertTrue(timing.awaitLatch(cacheStartLatch));  \r\n\n            final CountDownLatch cacheChangedLatch = new CountDownLatch(1);\n            ServiceCacheListener listener = new ServiceCacheListener()\n            {\n                @Override\n                public void cacheChanged()\n                {\n                    cacheChangedLatch.countDown();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    \r\n                }\n            };\n            cache.addListener(listener);\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10065).build();\n            discovery.registerService(instance2);   \r\n            assertTrue(timing.awaitLatch(cacheChangedLatch));\n\n            cacheWaitLatch.countDown();\n\n            assertTrue(timing.awaitLatch(startCompletedLatch));\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":130,"groupId":"10162","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testRaceOnInitialLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/b6/fdbc09cc378b0960a66d3418fd4d20a23f78a6.src","preCode":"    public void testRaceOnInitialLoad() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/discovery\").client(client).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            CountDownLatch cacheStartLatch = new CountDownLatch(1);\n            CountDownLatch cacheWaitLatch = new CountDownLatch(1);\n            final ServiceCache<String> cache = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache);\n            ((ServiceCacheImpl)cache).debugStartLatch = cacheStartLatch;    \r\n            ((ServiceCacheImpl)cache).debugStartWaitLatch = cacheWaitLatch; \r\n\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10064).build();\n            discovery.registerService(instance1);\n\n            CloseableExecutorService closeableExecutorService = new CloseableExecutorService(Executors.newSingleThreadExecutor());\n            closeables.add(closeableExecutorService);\n            final CountDownLatch startCompletedLatch = new CountDownLatch(1);\n            Runnable proc = new Runnable()\n            {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        cache.start();\n                        startCompletedLatch.countDown();\n                    }\n                    catch ( Exception e )\n                    {\n                        LoggerFactory.getLogger(getClass()).error(\"Start failed\", e);\n                        throw new RuntimeException(e);\n                    }\n                }\n            };\n            closeableExecutorService.submit(proc);\n            Assert.assertTrue(timing.awaitLatch(cacheStartLatch));  \r\n\n            final CountDownLatch cacheChangedLatch = new CountDownLatch(1);\n            ServiceCacheListener listener = new ServiceCacheListener()\n            {\n                @Override\n                public void cacheChanged()\n                {\n                    cacheChangedLatch.countDown();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    \r\n                }\n            };\n            cache.addListener(listener);\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10065).build();\n            discovery.registerService(instance2);   \r\n            Assert.assertTrue(timing.awaitLatch(cacheChangedLatch));\n\n            cacheWaitLatch.countDown();\n\n            Assert.assertTrue(timing.awaitLatch(startCompletedLatch));\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceCacheRace.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testInitialLoad() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/discovery\").client(client).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            ServiceCache<String> cache = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache);\n\n            final CountDownLatch latch = new CountDownLatch(3);\n            ServiceCacheListener listener = new ServiceCacheListener()\n            {\n                @Override\n                public void cacheChanged()\n                {\n                    latch.countDown();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n            cache.addListener(listener);\n            cache.start();\n\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10065).build();\n            ServiceInstance<String> instance3 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10066).build();\n            discovery.registerService(instance1);\n            discovery.registerService(instance2);\n            discovery.registerService(instance3);\n\n            assertTrue(latch.await(10, TimeUnit.SECONDS));\n\n            ServiceCache<String> cache2 = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache2);\n            cache2.start();\n\n            assertEquals(cache2.getInstances().size(), 3);\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":109,"groupId":"10162","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testInitialLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/b1/a35263c64d2a03a4eb55860a0d2f48f1f52cf6.src","preCode":"    public void testInitialLoad() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/discovery\").client(client).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            ServiceCache<String> cache = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache);\n\n            final CountDownLatch latch = new CountDownLatch(3);\n            ServiceCacheListener listener = new ServiceCacheListener()\n            {\n                @Override\n                public void cacheChanged()\n                {\n                    latch.countDown();\n                }\n\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                }\n            };\n            cache.addListener(listener);\n            cache.start();\n\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10065).build();\n            ServiceInstance<String> instance3 = ServiceInstance.<String>builder().payload(\"test\").name(\"test\").port(10066).build();\n            discovery.registerService(instance1);\n            discovery.registerService(instance2);\n            discovery.registerService(instance3);\n\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n\n            ServiceCache<String> cache2 = discovery.serviceCacheBuilder().name(\"test\").build();\n            closeables.add(cache2);\n            cache2.start();\n\n            Assert.assertEquals(cache2.getInstances().size(), 3);\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/TestServiceCache.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
