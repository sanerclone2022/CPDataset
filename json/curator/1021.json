[{"authorTime":"2014-02-04 02:55:50","codes":[{"authorDate":"2017-04-03 23:54:50","commitOrder":3,"curCode":"    public void testRetries() throws Exception\n    {\n        final int SLEEP = 1000;\n        final int TIMES = 5;\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(TIMES, SLEEP));\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            client.getZookeeperClient().blockUntilConnectedOrTimedOut();\n\n            final CountDownLatch latch = new CountDownLatch(TIMES);\n            final List<Long> times = Lists.newArrayList();\n            final AtomicLong start = new AtomicLong(System.currentTimeMillis());\n            ((CuratorFrameworkImpl)client).debugListener = data ->\n            {\n                if ( data.getOperation().getClass().getName().contains(\"CreateBuilderImpl\") )\n                {\n                    long now = System.currentTimeMillis();\n                    times.add(now - start.get());\n                    start.set(now);\n                    latch.countDown();\n                }\n            };\n\n            server.stop();\n            async.create().forPath(\"/one\");\n\n            latch.await();\n\n            for ( long elapsed : times.subList(1, times.size()) )   \r\n            {\n                Assert.assertTrue(elapsed >= SLEEP, elapsed + \": \" + times);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-04-03 23:54:50","endLine":200,"groupId":"661","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c0/0febd415d4eef410d35a665abc877fa22f65c1.src","preCode":"    public void testRetries() throws Exception\n    {\n        final int SLEEP = 1000;\n        final int TIMES = 5;\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(TIMES, SLEEP));\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            client.getZookeeperClient().blockUntilConnectedOrTimedOut();\n\n            final CountDownLatch latch = new CountDownLatch(TIMES);\n            final List<Long> times = Lists.newArrayList();\n            final AtomicLong start = new AtomicLong(System.currentTimeMillis());\n            ((CuratorFrameworkImpl)client).debugListener = data ->\n            {\n                if ( data.getOperation().getClass().getName().contains(\"CreateBuilderImpl\") )\n                {\n                    long now = System.currentTimeMillis();\n                    times.add(now - start.get());\n                    start.set(now);\n                    latch.countDown();\n                }\n            };\n\n            server.stop();\n            async.create().forPath(\"/one\");\n\n            latch.await();\n\n            for ( long elapsed : times.subList(1, times.size()) )   \r\n            {\n                Assert.assertTrue(elapsed >= SLEEP, elapsed + \": \" + times);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"},{"authorDate":"2014-02-04 02:55:50","commitOrder":3,"curCode":"    public void testRetries() throws Exception\n    {\n        final int SLEEP = 1000;\n        final int TIMES = 5;\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(TIMES, SLEEP));\n        try\n        {\n            client.start();\n            client.getZookeeperClient().blockUntilConnectedOrTimedOut();\n\n            final CountDownLatch latch = new CountDownLatch(TIMES);\n            final List<Long> times = Lists.newArrayList();\n            final AtomicLong start = new AtomicLong(System.currentTimeMillis());\n            ((CuratorFrameworkImpl)client).debugListener = new CuratorFrameworkImpl.DebugBackgroundListener()\n            {\n                @Override\n                public void listen(OperationAndData<?> data)\n                {\n                    if ( data.getOperation().getClass().getName().contains(\"CreateBuilderImpl\") )\n                    {\n                        long now = System.currentTimeMillis();\n                        times.add(now - start.get());\n                        start.set(now);\n                        latch.countDown();\n                    }\n                }\n            };\n\n            server.stop();\n            client.create().inBackground().forPath(\"/one\");\n\n            latch.await();\n\n            for ( long elapsed : times.subList(1, times.size()) )   \r\n            {\n                Assert.assertTrue(elapsed >= SLEEP, elapsed + \": \" + times);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":138,"groupId":"1099","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/6e/7693158a85885f98304260b320cff728a0a305.src","preCode":"    public void testRetries() throws Exception\n    {\n        final int SLEEP = 1000;\n        final int TIMES = 5;\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(TIMES, SLEEP));\n        try\n        {\n            client.start();\n            client.getZookeeperClient().blockUntilConnectedOrTimedOut();\n\n            final CountDownLatch latch = new CountDownLatch(TIMES);\n            final List<Long> times = Lists.newArrayList();\n            final AtomicLong start = new AtomicLong(System.currentTimeMillis());\n            ((CuratorFrameworkImpl)client).debugListener = new CuratorFrameworkImpl.DebugBackgroundListener()\n            {\n                @Override\n                public void listen(OperationAndData<?> data)\n                {\n                    if ( data.getOperation().getClass().getName().contains(\"CreateBuilderImpl\") )\n                    {\n                        long now = System.currentTimeMillis();\n                        times.add(now - start.get());\n                        start.set(now);\n                        latch.countDown();\n                    }\n                }\n            };\n\n            server.stop();\n            client.create().inBackground().forPath(\"/one\");\n\n            latch.await();\n\n            for ( long elapsed : times.subList(1, times.size()) )   \r\n            {\n                Assert.assertTrue(elapsed >= SLEEP, elapsed + \": \" + times);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"NB"}],"commitId":"1826b66d72f6e543a57aaf5f3acc3cd9ca6e965d","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2017-04-03 23:54:50","modifiedFileCount":"45","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testRetries() throws Exception\n    {\n        final int SLEEP = 1000;\n        final int TIMES = 5;\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(TIMES, SLEEP));\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            client.getZookeeperClient().blockUntilConnectedOrTimedOut();\n\n            final CountDownLatch latch = new CountDownLatch(TIMES);\n            final List<Long> times = Lists.newArrayList();\n            final AtomicLong start = new AtomicLong(System.currentTimeMillis());\n            ((CuratorFrameworkImpl)client).debugListener = data ->\n            {\n                if ( data.getOperation().getClass().getName().contains(\"CreateBuilderImpl\") )\n                {\n                    long now = System.currentTimeMillis();\n                    times.add(now - start.get());\n                    start.set(now);\n                    latch.countDown();\n                }\n            };\n\n            server.stop();\n            async.create().forPath(\"/one\");\n\n            latch.await();\n\n            for ( long elapsed : times.subList(1, times.size()) )   \r\n            {\n                assertTrue(elapsed >= SLEEP, elapsed + \": \" + times);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":202,"groupId":"1021","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testRetries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c5/bdf7c0bdd0f9ba3607ad038cc59628acef1fc3.src","preCode":"    public void testRetries() throws Exception\n    {\n        final int SLEEP = 1000;\n        final int TIMES = 5;\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(TIMES, SLEEP));\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            client.getZookeeperClient().blockUntilConnectedOrTimedOut();\n\n            final CountDownLatch latch = new CountDownLatch(TIMES);\n            final List<Long> times = Lists.newArrayList();\n            final AtomicLong start = new AtomicLong(System.currentTimeMillis());\n            ((CuratorFrameworkImpl)client).debugListener = data ->\n            {\n                if ( data.getOperation().getClass().getName().contains(\"CreateBuilderImpl\") )\n                {\n                    long now = System.currentTimeMillis();\n                    times.add(now - start.get());\n                    start.set(now);\n                    latch.countDown();\n                }\n            };\n\n            server.stop();\n            async.create().forPath(\"/one\");\n\n            latch.await();\n\n            for ( long elapsed : times.subList(1, times.size()) )   \r\n            {\n                Assert.assertTrue(elapsed >= SLEEP, elapsed + \": \" + times);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testRetries() throws Exception\n    {\n        final int SLEEP = 1000;\n        final int TIMES = 5;\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(TIMES, SLEEP));\n        try\n        {\n            client.start();\n            client.getZookeeperClient().blockUntilConnectedOrTimedOut();\n\n            final CountDownLatch latch = new CountDownLatch(TIMES);\n            final List<Long> times = Lists.newArrayList();\n            final AtomicLong start = new AtomicLong(System.currentTimeMillis());\n            ((CuratorFrameworkImpl)client).debugListener = new CuratorFrameworkImpl.DebugBackgroundListener()\n            {\n                @Override\n                public void listen(OperationAndData<?> data)\n                {\n                    if ( data.getOperation().getClass().getName().contains(\"CreateBuilderImpl\") )\n                    {\n                        long now = System.currentTimeMillis();\n                        times.add(now - start.get());\n                        start.set(now);\n                        latch.countDown();\n                    }\n                }\n            };\n\n            server.stop();\n            client.create().inBackground().forPath(\"/one\");\n\n            latch.await();\n\n            for ( long elapsed : times.subList(1, times.size()) )   \r\n            {\n                assertTrue(elapsed >= SLEEP, elapsed + \": \" + times);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":217,"groupId":"1021","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testRetries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/bb/f052e4de2a326cbdf9eb48ad35b76614f73c41.src","preCode":"    public void testRetries() throws Exception\n    {\n        final int SLEEP = 1000;\n        final int TIMES = 5;\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryNTimes(TIMES, SLEEP));\n        try\n        {\n            client.start();\n            client.getZookeeperClient().blockUntilConnectedOrTimedOut();\n\n            final CountDownLatch latch = new CountDownLatch(TIMES);\n            final List<Long> times = Lists.newArrayList();\n            final AtomicLong start = new AtomicLong(System.currentTimeMillis());\n            ((CuratorFrameworkImpl)client).debugListener = new CuratorFrameworkImpl.DebugBackgroundListener()\n            {\n                @Override\n                public void listen(OperationAndData<?> data)\n                {\n                    if ( data.getOperation().getClass().getName().contains(\"CreateBuilderImpl\") )\n                    {\n                        long now = System.currentTimeMillis();\n                        times.add(now - start.get());\n                        start.set(now);\n                        latch.countDown();\n                    }\n                }\n            };\n\n            server.stop();\n            client.create().inBackground().forPath(\"/one\");\n\n            latch.await();\n\n            for ( long elapsed : times.subList(1, times.size()) )   \r\n            {\n                Assert.assertTrue(elapsed >= SLEEP, elapsed + \": \" + times);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
