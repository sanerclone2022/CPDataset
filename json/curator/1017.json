[{"authorTime":"2020-04-09 23:16:05","codes":[{"authorDate":"2017-07-10 07:07:20","commitOrder":3,"curCode":"    public void testDownServer() throws IOException\n    {\n        Timing timing = new Timing();\n\n        TestModel model = new TestModel(\"a\", \"b\", \"c\", 1, BigInteger.ONE);\n        CachedModeledFramework<TestModel> client = ModeledFramework.wrap(async, modelSpec).cached();\n        Semaphore semaphore = new Semaphore(0);\n        client.listenable().addListener((t, p, s, m) -> semaphore.release());\n\n        client.start();\n        try\n        {\n            client.child(model).set(model);\n            Assert.assertTrue(timing.acquireSemaphore(semaphore));\n\n            CountDownLatch latch = new CountDownLatch(1);\n            rawClient.getConnectionStateListenable().addListener((__, state) -> {\n                if ( state == ConnectionState.LOST )\n                {\n                    latch.countDown();\n                }\n            });\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(latch));\n\n            complete(client.child(model).read().whenComplete((value, e) -> {\n                Assert.assertNotNull(value);\n                Assert.assertNull(e);\n            }));\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2017-07-10 07:07:20","endLine":70,"groupId":"1824","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDownServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/80/c1f8b5fae47c53e16714937c0b4309a5875b98.src","preCode":"    public void testDownServer() throws IOException\n    {\n        Timing timing = new Timing();\n\n        TestModel model = new TestModel(\"a\", \"b\", \"c\", 1, BigInteger.ONE);\n        CachedModeledFramework<TestModel> client = ModeledFramework.wrap(async, modelSpec).cached();\n        Semaphore semaphore = new Semaphore(0);\n        client.listenable().addListener((t, p, s, m) -> semaphore.release());\n\n        client.start();\n        try\n        {\n            client.child(model).set(model);\n            Assert.assertTrue(timing.acquireSemaphore(semaphore));\n\n            CountDownLatch latch = new CountDownLatch(1);\n            rawClient.getConnectionStateListenable().addListener((__, state) -> {\n                if ( state == ConnectionState.LOST )\n                {\n                    latch.countDown();\n                }\n            });\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(latch));\n\n            complete(client.child(model).read().whenComplete((value, e) -> {\n                Assert.assertNotNull(value);\n                Assert.assertNull(e);\n            }));\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/modeled/TestCachedModeledFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"NB"},{"authorDate":"2020-04-09 23:16:05","commitOrder":3,"curCode":"    private void prep(CuratorFramework client) throws Exception\n    {\n        client.start();\n        client.create().forPath(\"/test\");\n        CountDownLatch lostLatch = new CountDownLatch(1);\n        client.getConnectionStateListenable().addListener((__, newState) -> {\n            if (newState == ConnectionState.LOST) {\n                lostLatch.countDown();\n            }\n        });\n        server.stop();\n        Assert.assertTrue(timing.awaitLatch(lostLatch));\n    }\n","date":"2020-04-09 23:16:05","endLine":98,"groupId":"1824","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prep","params":"(CuratorFrameworkclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/16/b345a078880358ca4ff1eb6a1ad5c9722581d6.src","preCode":"    private void prep(CuratorFramework client) throws Exception\n    {\n        client.start();\n        client.create().forPath(\"/test\");\n        CountDownLatch lostLatch = new CountDownLatch(1);\n        client.getConnectionStateListenable().addListener((__, newState) -> {\n            if (newState == ConnectionState.LOST) {\n                lostLatch.countDown();\n            }\n        });\n        server.stop();\n        Assert.assertTrue(timing.awaitLatch(lostLatch));\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/connection/TestThreadLocalRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"fd3728d56366bcc9c4b3444182a8b6e7a38633a6","commitMessage":"@@@For CURATOR-559 make the test a bit more robust. Wait for the connection to go to LOST after server stop\n","date":"2020-04-09 23:16:05","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2020-04-20 03:54:04","codes":[{"authorDate":"2017-07-10 07:07:20","commitOrder":4,"curCode":"    public void testDownServer() throws IOException\n    {\n        Timing timing = new Timing();\n\n        TestModel model = new TestModel(\"a\", \"b\", \"c\", 1, BigInteger.ONE);\n        CachedModeledFramework<TestModel> client = ModeledFramework.wrap(async, modelSpec).cached();\n        Semaphore semaphore = new Semaphore(0);\n        client.listenable().addListener((t, p, s, m) -> semaphore.release());\n\n        client.start();\n        try\n        {\n            client.child(model).set(model);\n            Assert.assertTrue(timing.acquireSemaphore(semaphore));\n\n            CountDownLatch latch = new CountDownLatch(1);\n            rawClient.getConnectionStateListenable().addListener((__, state) -> {\n                if ( state == ConnectionState.LOST )\n                {\n                    latch.countDown();\n                }\n            });\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(latch));\n\n            complete(client.child(model).read().whenComplete((value, e) -> {\n                Assert.assertNotNull(value);\n                Assert.assertNull(e);\n            }));\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2017-07-10 07:07:20","endLine":70,"groupId":"1824","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDownServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/80/c1f8b5fae47c53e16714937c0b4309a5875b98.src","preCode":"    public void testDownServer() throws IOException\n    {\n        Timing timing = new Timing();\n\n        TestModel model = new TestModel(\"a\", \"b\", \"c\", 1, BigInteger.ONE);\n        CachedModeledFramework<TestModel> client = ModeledFramework.wrap(async, modelSpec).cached();\n        Semaphore semaphore = new Semaphore(0);\n        client.listenable().addListener((t, p, s, m) -> semaphore.release());\n\n        client.start();\n        try\n        {\n            client.child(model).set(model);\n            Assert.assertTrue(timing.acquireSemaphore(semaphore));\n\n            CountDownLatch latch = new CountDownLatch(1);\n            rawClient.getConnectionStateListenable().addListener((__, state) -> {\n                if ( state == ConnectionState.LOST )\n                {\n                    latch.countDown();\n                }\n            });\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(latch));\n\n            complete(client.child(model).read().whenComplete((value, e) -> {\n                Assert.assertNotNull(value);\n                Assert.assertNull(e);\n            }));\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/modeled/TestCachedModeledFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"},{"authorDate":"2020-04-20 03:54:04","commitOrder":4,"curCode":"    private void prep(CuratorFramework client, AtomicInteger count) throws Exception\n    {\n        client.start();\n        client.create().forPath(\"/test\");\n        CountDownLatch lostLatch = new CountDownLatch(1);\n        client.getConnectionStateListenable().addListener((__, newState) -> {\n            if (newState == ConnectionState.LOST) {\n                lostLatch.countDown();\n            }\n        });\n        server.stop();\n        Assert.assertTrue(timing.awaitLatch(lostLatch));\n        count.set(0);   \r\n    }\n","date":"2020-04-21 20:47:48","endLine":98,"groupId":"1824","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prep","params":"(CuratorFrameworkclient@AtomicIntegercount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/68/6109c1ca9f1c827b089d8daa141c39f39ef31c.src","preCode":"    private void prep(CuratorFramework client) throws Exception\n    {\n        client.start();\n        client.create().forPath(\"/test\");\n        CountDownLatch lostLatch = new CountDownLatch(1);\n        client.getConnectionStateListenable().addListener((__, newState) -> {\n            if (newState == ConnectionState.LOST) {\n                lostLatch.countDown();\n            }\n        });\n        server.stop();\n        Assert.assertTrue(timing.awaitLatch(lostLatch));\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/connection/TestThreadLocalRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"3d76a317b68839b83e298fdd48ead1a95e5f8fe8","commitMessage":"@@@CURATOR-559 - more attempts to keep tests from failing. Make sure count is zeroed after server is stopped.\n","date":"2020-04-21 20:47:48","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testDownServer() throws IOException\n    {\n        Timing timing = new Timing();\n\n        TestModel model = new TestModel(\"a\", \"b\", \"c\", 1, BigInteger.ONE);\n        CachedModeledFramework<TestModel> client = ModeledFramework.wrap(async, modelSpec).cached();\n        Semaphore semaphore = new Semaphore(0);\n        client.listenable().addListener((t, p, s, m) -> semaphore.release());\n\n        client.start();\n        try\n        {\n            client.child(model).set(model);\n            assertTrue(timing.acquireSemaphore(semaphore));\n\n            CountDownLatch latch = new CountDownLatch(1);\n            rawClient.getConnectionStateListenable().addListener((__, state) -> {\n                if ( state == ConnectionState.LOST )\n                {\n                    latch.countDown();\n                }\n            });\n            server.stop();\n            assertTrue(timing.awaitLatch(latch));\n\n            complete(client.child(model).read().whenComplete((value, e) -> {\n                assertNotNull(value);\n                assertNull(e);\n            }));\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":86,"groupId":"1017","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testDownServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1d/c9feb8aa23ea83c227bc4fe69e33d312435613.src","preCode":"    public void testDownServer() throws IOException\n    {\n        Timing timing = new Timing();\n\n        TestModel model = new TestModel(\"a\", \"b\", \"c\", 1, BigInteger.ONE);\n        CachedModeledFramework<TestModel> client = ModeledFramework.wrap(async, modelSpec).cached();\n        Semaphore semaphore = new Semaphore(0);\n        client.listenable().addListener((t, p, s, m) -> semaphore.release());\n\n        client.start();\n        try\n        {\n            client.child(model).set(model);\n            Assert.assertTrue(timing.acquireSemaphore(semaphore));\n\n            CountDownLatch latch = new CountDownLatch(1);\n            rawClient.getConnectionStateListenable().addListener((__, state) -> {\n                if ( state == ConnectionState.LOST )\n                {\n                    latch.countDown();\n                }\n            });\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(latch));\n\n            complete(client.child(model).read().whenComplete((value, e) -> {\n                Assert.assertNotNull(value);\n                Assert.assertNull(e);\n            }));\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/x/async/modeled/TestCachedModeledFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    private void prep(CuratorFramework client, AtomicInteger count) throws Exception\n    {\n        client.start();\n        client.create().forPath(\"/test\");\n        CountDownLatch lostLatch = new CountDownLatch(1);\n        client.getConnectionStateListenable().addListener((__, newState) -> {\n            if ( newState == ConnectionState.LOST )\n            {\n                lostLatch.countDown();\n            }\n        });\n        server.stop();\n        assertTrue(timing.awaitLatch(lostLatch));\n        count.set(0);   \r\n    }\n","date":"2020-10-20 21:18:25","endLine":111,"groupId":"1017","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"prep","params":"(CuratorFrameworkclient@AtomicIntegercount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/11/a5af5bc563fae2dad153f591a4386726ea4ddb.src","preCode":"    private void prep(CuratorFramework client, AtomicInteger count) throws Exception\n    {\n        client.start();\n        client.create().forPath(\"/test\");\n        CountDownLatch lostLatch = new CountDownLatch(1);\n        client.getConnectionStateListenable().addListener((__, newState) -> {\n            if ( newState == ConnectionState.LOST )\n            {\n                lostLatch.countDown();\n            }\n        });\n        server.stop();\n        Assert.assertTrue(timing.awaitLatch(lostLatch));\n        count.set(0);   \r\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/connection/TestThreadLocalRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
