[{"authorTime":"2020-03-20 09:52:43","codes":[{"authorDate":"2020-03-20 09:52:43","commitOrder":1,"curCode":"    public void testPersistentRecursiveDefaultWatch() throws Exception\n    {\n        CountDownLatch latch = new CountDownLatch(6);   \r\n        ZookeeperFactory zookeeperFactory = (connectString, sessionTimeout, watcher, canBeReadOnly) -> {\n            Watcher actualWatcher = event -> {\n                watcher.process(event);\n                latch.countDown();\n            };\n            return new ZooKeeper(connectString, sessionTimeout, actualWatcher);\n        };\n        try (CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).zookeeperFactory(zookeeperFactory).build() )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            async.addWatch().withMode(AddWatchMode.PERSISTENT_RECURSIVE).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-03-20 09:52:43","endLine":86,"groupId":"1036","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPersistentRecursiveDefaultWatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/bd/f006a565716258924355092b9134abf86530b5.src","preCode":"    public void testPersistentRecursiveDefaultWatch() throws Exception\n    {\n        CountDownLatch latch = new CountDownLatch(6);   \r\n        ZookeeperFactory zookeeperFactory = (connectString, sessionTimeout, watcher, canBeReadOnly) -> {\n            Watcher actualWatcher = event -> {\n                watcher.process(event);\n                latch.countDown();\n            };\n            return new ZooKeeper(connectString, sessionTimeout, actualWatcher);\n        };\n        try (CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).zookeeperFactory(zookeeperFactory).build() )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            async.addWatch().withMode(AddWatchMode.PERSISTENT_RECURSIVE).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestAddWatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2020-03-20 09:52:43","commitOrder":1,"curCode":"    public void testPersistentRecursiveDefaultWatch() throws Exception\n    {\n        CountDownLatch latch = new CountDownLatch(6);   \r\n        ZookeeperFactory zookeeperFactory = (connectString, sessionTimeout, watcher, canBeReadOnly) -> {\n            Watcher actualWatcher = event -> {\n                watcher.process(event);\n                latch.countDown();\n            };\n            return new ZooKeeper(connectString, sessionTimeout, actualWatcher);\n        };\n        try (CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).zookeeperFactory(zookeeperFactory).build() )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT_RECURSIVE).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-03-20 09:52:43","endLine":732,"groupId":"593","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPersistentRecursiveDefaultWatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/26/0c2924e1b20037098436c610ba086b0705eb48.src","preCode":"    public void testPersistentRecursiveDefaultWatch() throws Exception\n    {\n        CountDownLatch latch = new CountDownLatch(6);   \r\n        ZookeeperFactory zookeeperFactory = (connectString, sessionTimeout, watcher, canBeReadOnly) -> {\n            Watcher actualWatcher = event -> {\n                watcher.process(event);\n                latch.countDown();\n            };\n            return new ZooKeeper(connectString, sessionTimeout, actualWatcher);\n        };\n        try (CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).zookeeperFactory(zookeeperFactory).build() )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT_RECURSIVE).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatchesBuilder.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":707,"status":"B"}],"commitId":"d65669b64f003326c98843b32b997e3ffab1e442","commitMessage":"@@@CURATOR-549 (#334)\n\nSupport persistent watchers in ZK 3.6+ while maintaining background compatibility with previous versions of ZK. Adds Curator Framework DSL calls to ZooKeeper's addWatch() method. Subsequent PRs will add recipes. Both the older Framework and the async Framework now have methods to add persistent watchers.\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-20 09:52:43","modifiedFileCount":"12","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testPersistentRecursiveDefaultWatch() throws Exception\n    {\n        CountDownLatch latch = new CountDownLatch(6);   \r\n        ZookeeperFactory zookeeperFactory = (connectString, sessionTimeout, watcher, canBeReadOnly) -> {\n            Watcher actualWatcher = event -> {\n                watcher.process(event);\n                latch.countDown();\n            };\n            return new ZooKeeper(connectString, sessionTimeout, actualWatcher);\n        };\n        try (CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).zookeeperFactory(zookeeperFactory).build() )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            async.addWatch().withMode(AddWatchMode.PERSISTENT_RECURSIVE).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":88,"groupId":"1018","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testPersistentRecursiveDefaultWatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/5a/93431dce6a02f025772e6a6ad24da9516279a8.src","preCode":"    public void testPersistentRecursiveDefaultWatch() throws Exception\n    {\n        CountDownLatch latch = new CountDownLatch(6);   \r\n        ZookeeperFactory zookeeperFactory = (connectString, sessionTimeout, watcher, canBeReadOnly) -> {\n            Watcher actualWatcher = event -> {\n                watcher.process(event);\n                latch.countDown();\n            };\n            return new ZooKeeper(connectString, sessionTimeout, actualWatcher);\n        };\n        try (CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).zookeeperFactory(zookeeperFactory).build() )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            async.addWatch().withMode(AddWatchMode.PERSISTENT_RECURSIVE).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestAddWatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testPersistentRecursiveDefaultWatch() throws Exception\n    {\n        CountDownLatch latch = new CountDownLatch(6);   \r\n        ZookeeperFactory zookeeperFactory = (connectString, sessionTimeout, watcher, canBeReadOnly) -> {\n            Watcher actualWatcher = event -> {\n                watcher.process(event);\n                latch.countDown();\n            };\n            return new ZooKeeper(connectString, sessionTimeout, actualWatcher);\n        };\n        try (CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).zookeeperFactory(zookeeperFactory).build() )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT_RECURSIVE).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":742,"groupId":"1018","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPersistentRecursiveDefaultWatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/30/526506433fc4388fb9e7ed3cfaef4570c915c0.src","preCode":"    public void testPersistentRecursiveDefaultWatch() throws Exception\n    {\n        CountDownLatch latch = new CountDownLatch(6);   \r\n        ZookeeperFactory zookeeperFactory = (connectString, sessionTimeout, watcher, canBeReadOnly) -> {\n            Watcher actualWatcher = event -> {\n                watcher.process(event);\n                latch.countDown();\n            };\n            return new ZooKeeper(connectString, sessionTimeout, actualWatcher);\n        };\n        try (CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).zookeeperFactory(zookeeperFactory).build() )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT_RECURSIVE).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatchesBuilder.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":717,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
