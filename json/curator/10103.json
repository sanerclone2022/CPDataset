[{"authorTime":"2016-02-10 22:29:37","codes":[{"authorDate":"2016-02-10 22:29:37","commitOrder":1,"curCode":"    public void testSameWatcherPerZKDocs() throws Exception\n    {\n        CountZKWatcher actualWatcher = new CountZKWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2016-02-10 22:29:37","endLine":92,"groupId":"1659","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSameWatcherPerZKDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/06/8634726ba62499134f37f7a588766f19d3c9a0.src","preCode":"    public void testSameWatcherPerZKDocs() throws Exception\n    {\n        CountZKWatcher actualWatcher = new CountZKWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherIdentity.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2016-02-10 22:29:37","commitOrder":1,"curCode":"    public void testSameCuratorWatcherPerZKDocs() throws Exception\n    {\n        CountCuratorWatcher actualWatcher = new CountCuratorWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2016-02-10 22:29:37","endLine":124,"groupId":"1659","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSameCuratorWatcherPerZKDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/06/8634726ba62499134f37f7a588766f19d3c9a0.src","preCode":"    public void testSameCuratorWatcherPerZKDocs() throws Exception\n    {\n        CountCuratorWatcher actualWatcher = new CountCuratorWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherIdentity.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"dce3146c32d982dc84608d4db14d043464f9d188","commitMessage":"@@@Added some additional tests to validate NamespaceWatcher identity\n","date":"2016-02-10 22:29:37","modifiedFileCount":"1","status":"B","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testSameWatcherPerZKDocs() throws Exception\n    {\n        CountZKWatcher actualWatcher = new CountZKWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":94,"groupId":"1659","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSameWatcherPerZKDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1d/16450a6c5d09c42c7cec216fa94cfc597fd8d5.src","preCode":"    public void testSameWatcherPerZKDocs() throws Exception\n    {\n        CountZKWatcher actualWatcher = new CountZKWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherIdentity.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testSameCuratorWatcherPerZKDocs() throws Exception\n    {\n        CountCuratorWatcher actualWatcher = new CountCuratorWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":126,"groupId":"1659","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSameCuratorWatcherPerZKDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1d/16450a6c5d09c42c7cec216fa94cfc597fd8d5.src","preCode":"    public void testSameCuratorWatcherPerZKDocs() throws Exception\n    {\n        CountCuratorWatcher actualWatcher = new CountCuratorWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            Assert.assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherIdentity.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"},{"authorTime":"2021-08-09 20:07:51","codes":[{"authorDate":"2021-08-09 20:07:51","commitOrder":3,"curCode":"  public void testSameWatcherPerZKDocs() throws Exception\n  {\n    CountZKWatcher actualWatcher = new CountZKWatcher();\n    Timing timing = new Timing();\n    CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(),\n        timing.connection(), new RetryOneTime(1));\n    try {\n      client.start();\n      client.create().forPath(\"/test\");\n\n      \r\n      client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n      client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n      client.setData().forPath(\"/test\", \"foo\".getBytes());\n      client.delete().forPath(\"/test\");\n      Awaitility.await()\n          .untilAsserted(() -> assertEquals(1, actualWatcher.count.getAndSet(0)));\n\n      client.create().forPath(\"/test\");\n      client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n      client.delete().forPath(\"/test\");\n      Awaitility.await()\n          .untilAsserted(() -> assertEquals(1, actualWatcher.count.get()));\n    } finally {\n      CloseableUtils.closeQuietly(client);\n    }\n  }\n","date":"2021-08-09 20:07:51","endLine":87,"groupId":"10103","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSameWatcherPerZKDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/70/e99ca6465e1e0319375fb257f6938d52340dcc.src","preCode":"    public void testSameWatcherPerZKDocs() throws Exception\n    {\n        CountZKWatcher actualWatcher = new CountZKWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherIdentity.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-08-09 20:07:51","commitOrder":3,"curCode":"  public void testSameCuratorWatcherPerZKDocs() throws Exception\n  {\n    \r\n    CuratorWatcher actualWatcher = mock(CuratorWatcher.class);\n\n    Timing timing = new Timing();\n    CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(),\n        timing.connection(), new RetryOneTime(1));\n    try {\n      client.start();\n      client.create().forPath(\"/test\");\n\n      \r\n      client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n      client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n      client.setData().forPath(\"/test\", \"foo\".getBytes());\n      client.delete().forPath(\"/test\");\n      Mockito.verify(actualWatcher, Mockito.timeout(TIMEOUT_MS).times(1)).process(any(WatchedEvent.class));\n\n      client.create().forPath(\"/test\");\n      client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n      client.delete().forPath(\"/test\");\n      Mockito.verify(actualWatcher, Mockito.timeout(TIMEOUT_MS).times(2)).process(any(WatchedEvent.class));\n    } finally {\n      CloseableUtils.closeQuietly(client);\n    }\n  }\n","date":"2021-08-09 20:07:51","endLine":117,"groupId":"10103","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testSameCuratorWatcherPerZKDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/70/e99ca6465e1e0319375fb257f6938d52340dcc.src","preCode":"    public void testSameCuratorWatcherPerZKDocs() throws Exception\n    {\n        CountCuratorWatcher actualWatcher = new CountCuratorWatcher();\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            client.create().forPath(\"/test\");\n\n            \r\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.getData().usingWatcher(actualWatcher).forPath(\"/test\");\n\n            client.setData().forPath(\"/test\", \"foo\".getBytes());\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            assertEquals(actualWatcher.count.getAndSet(0), 1);\n\n            client.create().forPath(\"/test\");\n            client.checkExists().usingWatcher(actualWatcher).forPath(\"/test\");\n            client.delete().forPath(\"/test\");\n            timing.sleepABit();\n            assertEquals(actualWatcher.count.get(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherIdentity.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"9aafdec9f2607cc6b652371a7687ed38889ddd2b","commitMessage":"@@@CURATOR-610: Refactor CountCuratorWatcher in TestWatcherIdentity.java ?\n\nFixes [CURATOR-610](https://issues.apache.org/jira/browse/CURATOR-610)\n\n\n Description\nRefactor test class [CountCuratorWatcher](https://github.com/apache/curator/blob/4a11aaef8b190dc220d35b7a91df294bfa06250e/curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherIdentity.java#L42) by using mocking object created by Mockito.\n\n<hr>\n\n\n## Key changed/added classes in this PR\n- Create mocking object to replace test subclass `CountCuratorWatcher`.  decouple test from production code.\n- Make test logic more clear by using method stub instead of method overriding.\n- Extract AtomicInteger variable out of the test subclass. Use the extracted variable in assertation statement to check `process(WatchedEvent)` method invocation status.\n\n<hr>\n\nAuthor: wx930910 <wx19930910@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>\n\nCloses #397 from wx930910/CURATOR-610\n","date":"2021-08-09 20:07:51","modifiedFileCount":"1","status":"M","submitter":"wx930910"}]
