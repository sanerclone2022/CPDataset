[{"authorTime":"2015-01-13 20:49:21","codes":[{"authorDate":"2015-01-13 20:49:21","commitOrder":1,"curCode":"    public void     testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }    \n","date":"2015-01-13 20:49:21","endLine":227,"groupId":"929","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateACLSingleAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/6c/71f2c4bb02fa1d70e97c3a72419964f2b82f86.src","preCode":"    public void     testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }    \n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"},{"authorDate":"2015-01-13 20:49:21","commitOrder":1,"curCode":"    public void     testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                    .connectString(server.getConnectString())\n                    .authorization(\"digest\", \"me2:pass2\".getBytes())\n                    .retryPolicy(new RetryOneTime(1))\n                    .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2015-01-13 20:49:21","endLine":306,"groupId":"929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateACLMultipleAuths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/6c/71f2c4bb02fa1d70e97c3a72419964f2b82f86.src","preCode":"    public void     testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                    .connectString(server.getConnectString())\n                    .authorization(\"digest\", \"me2:pass2\".getBytes())\n                    .retryPolicy(new RetryOneTime(1))\n                    .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"}],"commitId":"5ded39fa529f4359032fced16a7a537f538b2598","commitMessage":"@@@Merge branch 'CURATOR-111'\n","date":"2015-01-13 20:49:21","modifiedFileCount":"3","status":"B","submitter":"randgalt"},{"authorTime":"2015-08-18 01:01:21","codes":[{"authorDate":"2015-08-18 01:01:21","commitOrder":2,"curCode":"    public void testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-08-18 01:01:21","endLine":244,"groupId":"929","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateACLSingleAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/81/1631ce2ca79d55b6867862393a4beeed406bff.src","preCode":"    public void testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2015-08-18 01:01:21","commitOrder":2,"curCode":"    public void testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me2:pass2\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-08-18 01:01:21","endLine":337,"groupId":"929","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateACLMultipleAuths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/81/1631ce2ca79d55b6867862393a4beeed406bff.src","preCode":"    public void testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me2:pass2\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"44ee8547ef3563823c89ac9d8570a0df1b33a0a8","commitMessage":"@@@Merge 'master' into CURATOR-3.0\n","date":"2015-08-18 01:01:21","modifiedFileCount":"51","status":"M","submitter":"Scott Blum"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":424,"groupId":"1028","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateACLSingleAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a1/aea5271b893475af37c6c936f1d81b83345caa.src","preCode":"    public void testCreateACLSingleAuth() throws Exception\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(\"digest\", \"me1:pass1\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me2:pass2\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":517,"groupId":"1028","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateACLMultipleAuths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a1/aea5271b893475af37c6c936f1d81b83345caa.src","preCode":"    public void testCreateACLMultipleAuths() throws Exception\n    {\n        \r\n        List<AuthInfo> authInfos = new ArrayList<AuthInfo>();\n        authInfos.add(new AuthInfo(\"digest\", \"me1:pass1\".getBytes()));\n        authInfos.add(new AuthInfo(\"digest\", \"me2:pass2\".getBytes()));\n\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .authorization(authInfos)\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me1:pass1\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"me2:pass2\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n            client.close();\n\n            \r\n            client = builder\n                .connectString(server.getConnectString())\n                .authorization(\"digest\", \"something:else\".getBytes())\n                .retryPolicy(new RetryOneTime(1))\n                .build();\n            client.start();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n                Assert.fail(\"Should have failed with auth exception\");\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                \r\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
