[{"authorTime":"2015-04-22 04:13:26","codes":[{"authorDate":"2015-04-22 04:13:26","commitOrder":1,"curCode":"    public void testUnregisterService() throws Exception\n    {\n        final String name = \"name\";\n\n        final CountDownLatch restartLatch = new CountDownLatch(1);\n        List<Closeable> closeables = Lists.newArrayList();\n\n        InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(String.class)\n        {\n            private boolean first = true;\n\n            @Override\n            public byte[] serialize(ServiceInstance<String> instance) throws Exception\n            {\n                if ( first )\n                {\n                    System.out.println(\"Serializer first registration.\");\n                    first = false;\n                }\n                else\n                {\n                    System.out.println(\"Waiting for reconnect to finish.\");\n                    \r\n                    \r\n                    restartLatch.await();\n                }\n                return super.serialize(instance);\n            }\n        };\n\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(name).port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            Assert.assertFalse(discovery.queryForInstances(name).isEmpty(), \"Service should start registered.\");\n\n            server.stop();\n            server.restart();\n\n            discovery.unregisterService(instance);\n            restartLatch.countDown();\n\n            new Timing().sleepABit(); \r\n\n            Assert.assertTrue(discovery.queryForInstances(name).isEmpty(), \"Service should have unregistered.\");\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2015-04-22 04:13:26","endLine":368,"groupId":"1696","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnregisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/28/08c5c6d2591701a4d958e984472e1676c1fdc3.src","preCode":"    public void testUnregisterService() throws Exception\n    {\n        final String name = \"name\";\n\n        final CountDownLatch restartLatch = new CountDownLatch(1);\n        List<Closeable> closeables = Lists.newArrayList();\n\n        InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(String.class)\n        {\n            private boolean first = true;\n\n            @Override\n            public byte[] serialize(ServiceInstance<String> instance) throws Exception\n            {\n                if ( first )\n                {\n                    System.out.println(\"Serializer first registration.\");\n                    first = false;\n                }\n                else\n                {\n                    System.out.println(\"Waiting for reconnect to finish.\");\n                    \r\n                    \r\n                    restartLatch.await();\n                }\n                return super.serialize(instance);\n            }\n        };\n\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(name).port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            Assert.assertFalse(discovery.queryForInstances(name).isEmpty(), \"Service should start registered.\");\n\n            server.stop();\n            server.restart();\n\n            discovery.unregisterService(instance);\n            restartLatch.countDown();\n\n            new Timing().sleepABit(); \r\n\n            Assert.assertTrue(discovery.queryForInstances(name).isEmpty(), \"Service should have unregistered.\");\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"B"},{"authorDate":"2015-04-22 04:13:26","commitOrder":1,"curCode":"    public void testCleaning() throws Exception\n    {\n        System.setProperty(\"curator-discovery-clean-threshold-ms\", \"10\");\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).build();\n            closeables.add(discovery);\n            discovery.start();\n            discovery.unregisterService(instance);\n\n            Thread.sleep(100);\n\n            discovery.queryForNames();  \r\n            Assert.assertEquals(((ServiceDiscoveryImpl)discovery).debugServicesQty(), 0);\n        }\n        finally\n        {\n            System.clearProperty(\"curator-discovery-clean-threshold-ms\");\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2015-04-22 04:13:26","endLine":401,"groupId":"1334","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleaning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/28/08c5c6d2591701a4d958e984472e1676c1fdc3.src","preCode":"    public void testCleaning() throws Exception\n    {\n        System.setProperty(\"curator-discovery-clean-threshold-ms\", \"10\");\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).build();\n            closeables.add(discovery);\n            discovery.start();\n            discovery.unregisterService(instance);\n\n            Thread.sleep(100);\n\n            discovery.queryForNames();  \r\n            Assert.assertEquals(((ServiceDiscoveryImpl)discovery).debugServicesQty(), 0);\n        }\n        finally\n        {\n            System.clearProperty(\"curator-discovery-clean-threshold-ms\");\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"B"}],"commitId":"f489dfebeed4ecf004ded37a0f05a0a8a2dc7e6d","commitMessage":"@@@Concurrent registrations/unregistrations and connection issues can cause inconsistent state. Change to a model whereby 'unregistering' an instance doesn't remove it from management but changes the state. Instance will still be managed for a period of time and clean after a reasonable period\n","date":"2015-04-22 04:13:26","modifiedFileCount":"1","status":"B","submitter":"randgalt"},{"authorTime":"2015-04-28 04:12:11","codes":[{"authorDate":"2015-04-22 04:13:26","commitOrder":2,"curCode":"    public void testUnregisterService() throws Exception\n    {\n        final String name = \"name\";\n\n        final CountDownLatch restartLatch = new CountDownLatch(1);\n        List<Closeable> closeables = Lists.newArrayList();\n\n        InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(String.class)\n        {\n            private boolean first = true;\n\n            @Override\n            public byte[] serialize(ServiceInstance<String> instance) throws Exception\n            {\n                if ( first )\n                {\n                    System.out.println(\"Serializer first registration.\");\n                    first = false;\n                }\n                else\n                {\n                    System.out.println(\"Waiting for reconnect to finish.\");\n                    \r\n                    \r\n                    restartLatch.await();\n                }\n                return super.serialize(instance);\n            }\n        };\n\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(name).port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            Assert.assertFalse(discovery.queryForInstances(name).isEmpty(), \"Service should start registered.\");\n\n            server.stop();\n            server.restart();\n\n            discovery.unregisterService(instance);\n            restartLatch.countDown();\n\n            new Timing().sleepABit(); \r\n\n            Assert.assertTrue(discovery.queryForInstances(name).isEmpty(), \"Service should have unregistered.\");\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2015-04-22 04:13:26","endLine":368,"groupId":"1696","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnregisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/28/08c5c6d2591701a4d958e984472e1676c1fdc3.src","preCode":"    public void testUnregisterService() throws Exception\n    {\n        final String name = \"name\";\n\n        final CountDownLatch restartLatch = new CountDownLatch(1);\n        List<Closeable> closeables = Lists.newArrayList();\n\n        InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(String.class)\n        {\n            private boolean first = true;\n\n            @Override\n            public byte[] serialize(ServiceInstance<String> instance) throws Exception\n            {\n                if ( first )\n                {\n                    System.out.println(\"Serializer first registration.\");\n                    first = false;\n                }\n                else\n                {\n                    System.out.println(\"Waiting for reconnect to finish.\");\n                    \r\n                    \r\n                    restartLatch.await();\n                }\n                return super.serialize(instance);\n            }\n        };\n\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(name).port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            Assert.assertFalse(discovery.queryForInstances(name).isEmpty(), \"Service should start registered.\");\n\n            server.stop();\n            server.restart();\n\n            discovery.unregisterService(instance);\n            restartLatch.countDown();\n\n            new Timing().sleepABit(); \r\n\n            Assert.assertTrue(discovery.queryForInstances(name).isEmpty(), \"Service should have unregistered.\");\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"N"},{"authorDate":"2015-04-28 04:12:11","commitOrder":2,"curCode":"    public void testCleaning() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).build();\n            closeables.add(discovery);\n            discovery.start();\n            discovery.unregisterService(instance);\n\n            Assert.assertEquals(((ServiceDiscoveryImpl)discovery).debugServicesQty(), 0);\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2015-04-28 04:12:11","endLine":393,"groupId":"1334","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleaning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/8b/1e5fc69b524676e5ae96c434a067d1290042f4.src","preCode":"    public void testCleaning() throws Exception\n    {\n        System.setProperty(\"curator-discovery-clean-threshold-ms\", \"10\");\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).build();\n            closeables.add(discovery);\n            discovery.start();\n            discovery.unregisterService(instance);\n\n            Thread.sleep(100);\n\n            discovery.queryForNames();  \r\n            Assert.assertEquals(((ServiceDiscoveryImpl)discovery).debugServicesQty(), 0);\n        }\n        finally\n        {\n            System.clearProperty(\"curator-discovery-clean-threshold-ms\");\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"}],"commitId":"03879d1e627e93bd867bb7a0fdfdd875b033560e","commitMessage":"@@@vast simplication. Holder isn't needed. This is better\n","date":"2015-04-28 04:12:11","modifiedFileCount":"2","status":"M","submitter":"randgalt"},{"authorTime":"2017-07-18 21:16:05","codes":[{"authorDate":"2017-07-18 21:16:05","commitOrder":3,"curCode":"    public void testUnregisterService() throws Exception\n    {\n        final String name = \"name\";\n\n        final CountDownLatch restartLatch = new CountDownLatch(1);\n\n        InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(String.class)\n        {\n            private boolean first = true;\n\n            @Override\n            public byte[] serialize(ServiceInstance<String> instance) throws Exception\n            {\n                if ( first )\n                {\n                    System.out.println(\"Serializer first registration.\");\n                    first = false;\n                }\n                else\n                {\n                    System.out.println(\"Waiting for reconnect to finish.\");\n                    \r\n                    \r\n                    restartLatch.await();\n                }\n                return super.serialize(instance);\n            }\n        };\n\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(name).port(10064).build();\n            discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build();\n            discovery.start();\n\n            Assert.assertFalse(discovery.queryForInstances(name).isEmpty(), \"Service should start registered.\");\n\n            server.stop();\n            server.restart();\n\n            discovery.unregisterService(instance);\n            restartLatch.countDown();\n\n            new Timing().sleepABit(); \r\n\n            Assert.assertTrue(discovery.queryForInstances(name).isEmpty(), \"Service should have unregistered.\");\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-07-18 21:16:05","endLine":339,"groupId":"1121","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnregisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/47/c74d5313469015f0cc07aec14e39ba5a9d5378.src","preCode":"    public void testUnregisterService() throws Exception\n    {\n        final String name = \"name\";\n\n        final CountDownLatch restartLatch = new CountDownLatch(1);\n        List<Closeable> closeables = Lists.newArrayList();\n\n        InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(String.class)\n        {\n            private boolean first = true;\n\n            @Override\n            public byte[] serialize(ServiceInstance<String> instance) throws Exception\n            {\n                if ( first )\n                {\n                    System.out.println(\"Serializer first registration.\");\n                    first = false;\n                }\n                else\n                {\n                    System.out.println(\"Waiting for reconnect to finish.\");\n                    \r\n                    \r\n                    restartLatch.await();\n                }\n                return super.serialize(instance);\n            }\n        };\n\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(name).port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build();\n            closeables.add(discovery);\n            discovery.start();\n\n            Assert.assertFalse(discovery.queryForInstances(name).isEmpty(), \"Service should start registered.\");\n\n            server.stop();\n            server.restart();\n\n            discovery.unregisterService(instance);\n            restartLatch.countDown();\n\n            new Timing().sleepABit(); \r\n\n            Assert.assertTrue(discovery.queryForInstances(name).isEmpty(), \"Service should have unregistered.\");\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2017-07-18 21:16:05","commitOrder":3,"curCode":"    public void testCleaning() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).build();\n            discovery.start();\n            discovery.unregisterService(instance);\n\n            Assert.assertEquals(((ServiceDiscoveryImpl)discovery).debugServicesQty(), 0);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-07-18 21:16:05","endLine":363,"groupId":"1122","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleaning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/47/c74d5313469015f0cc07aec14e39ba5a9d5378.src","preCode":"    public void testCleaning() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).build();\n            closeables.add(discovery);\n            discovery.start();\n            discovery.unregisterService(instance);\n\n            Assert.assertEquals(((ServiceDiscoveryImpl)discovery).debugServicesQty(), 0);\n        }\n        finally\n        {\n            Collections.reverse(closeables);\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"}],"commitId":"7a60af0dddbf1e547ddb7448ce99e14341413ef0","commitMessage":"@@@Merge branch 'master' into CURATOR-421\n","date":"2017-07-18 21:16:05","modifiedFileCount":"5","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testUnregisterService() throws Exception\n    {\n        final String name = \"name\";\n\n        final CountDownLatch restartLatch = new CountDownLatch(1);\n\n        InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(String.class)\n        {\n            private boolean first = true;\n\n            @Override\n            public byte[] serialize(ServiceInstance<String> instance) throws Exception\n            {\n                if ( first )\n                {\n                    System.out.println(\"Serializer first registration.\");\n                    first = false;\n                }\n                else\n                {\n                    System.out.println(\"Waiting for reconnect to finish.\");\n                    \r\n                    \r\n                    restartLatch.await();\n                }\n                return super.serialize(instance);\n            }\n        };\n\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(name).port(10064).build();\n            discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build();\n            discovery.start();\n\n            assertFalse(discovery.queryForInstances(name).isEmpty(), \"Service should start registered.\");\n\n            server.stop();\n            server.restart();\n\n            discovery.unregisterService(instance);\n            restartLatch.countDown();\n\n            new Timing().sleepABit(); \r\n\n            assertTrue(discovery.queryForInstances(name).isEmpty(), \"Service should have unregistered.\");\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":344,"groupId":"10169","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testUnregisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f5/6acaa9cdfd059b21b473d65b0a4f908043a72d.src","preCode":"    public void testUnregisterService() throws Exception\n    {\n        final String name = \"name\";\n\n        final CountDownLatch restartLatch = new CountDownLatch(1);\n\n        InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(String.class)\n        {\n            private boolean first = true;\n\n            @Override\n            public byte[] serialize(ServiceInstance<String> instance) throws Exception\n            {\n                if ( first )\n                {\n                    System.out.println(\"Serializer first registration.\");\n                    first = false;\n                }\n                else\n                {\n                    System.out.println(\"Waiting for reconnect to finish.\");\n                    \r\n                    \r\n                    restartLatch.await();\n                }\n                return super.serialize(instance);\n            }\n        };\n\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(name).port(10064).build();\n            discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build();\n            discovery.start();\n\n            Assert.assertFalse(discovery.queryForInstances(name).isEmpty(), \"Service should start registered.\");\n\n            server.stop();\n            server.restart();\n\n            discovery.unregisterService(instance);\n            restartLatch.countDown();\n\n            new Timing().sleepABit(); \r\n\n            Assert.assertTrue(discovery.queryForInstances(name).isEmpty(), \"Service should have unregistered.\");\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testCleaning() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).build();\n            discovery.start();\n            discovery.unregisterService(instance);\n\n            assertEquals(((ServiceDiscoveryImpl)discovery).debugServicesQty(), 0);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":368,"groupId":"10169","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testCleaning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f5/6acaa9cdfd059b21b473d65b0a4f908043a72d.src","preCode":"    public void testCleaning() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n            client.start();\n\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = ServiceDiscoveryBuilder.builder(String.class).basePath(\"/test\").client(client).thisInstance(instance).build();\n            discovery.start();\n            discovery.unregisterService(instance);\n\n            Assert.assertEquals(((ServiceDiscoveryImpl)discovery).debugServicesQty(), 0);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
