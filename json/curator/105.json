[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceInstance<String> service = ServiceInstance.<String>builder()\n            .name(\"test\")\n            .payload(\"From Test\")\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<String>> type = new GenericType<ServiceInstances<String>>(){};\n        ServiceInstances<String> instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n\n        \r\n        GenericType<ServiceInstance<String>> singleInstanceType = new GenericType<ServiceInstance<String>>(){};\n        ServiceInstance<String>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n    }\n","date":"2013-03-08 06:54:59","endLine":141,"groupId":"924","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/2b/46ba015755e686dbd788ed055d8a103916a84e.src","preCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceInstance<String> service = ServiceInstance.<String>builder()\n            .name(\"test\")\n            .payload(\"From Test\")\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<String>> type = new GenericType<ServiceInstances<String>>(){};\n        ServiceInstances<String> instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n\n        \r\n        GenericType<ServiceInstance<String>> singleInstanceType = new GenericType<ServiceInstance<String>>(){};\n        ServiceInstance<String>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestStringsWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testRegisterService() throws Exception\n    {\n        Map<String, String>         payload = Maps.newHashMap();\n        payload.put(\"one\", \"1\");\n        payload.put(\"two\", \"2\");\n        payload.put(\"three\", \"3\");\n        ServiceInstance<Map<String, String>> service = ServiceInstance.<Map<String, String>>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<Map<String, String>>> type = new GenericType<ServiceInstances<Map<String, String>>>(){};\n        ServiceInstances<Map<String, String>>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<Map<String, String>>> singleInstanceType = new GenericType<ServiceInstance<Map<String, String>>>(){};\n        ServiceInstance<Map<String, String>>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","date":"2013-03-08 06:54:59","endLine":149,"groupId":"1485","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f3/8da7c8c10ae61801e88d02d66c4dce613cd07c.src","preCode":"    public void     testRegisterService() throws Exception\n    {\n        Map<String, String>         payload = Maps.newHashMap();\n        payload.put(\"one\", \"1\");\n        payload.put(\"two\", \"2\");\n        payload.put(\"three\", \"3\");\n        ServiceInstance<Map<String, String>> service = ServiceInstance.<Map<String, String>>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<Map<String, String>>> type = new GenericType<ServiceInstances<Map<String, String>>>(){};\n        ServiceInstances<Map<String, String>>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<Map<String, String>>> singleInstanceType = new GenericType<ServiceInstance<Map<String, String>>>(){};\n        ServiceInstance<Map<String, String>>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestMapsWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2013-06-23 06:57:46","codes":[{"authorDate":"2013-06-23 06:57:46","commitOrder":2,"curCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceInstance<String> service = ServiceInstance.<String>builder()\n            .name(\"test\")\n            .payload(\"From Test\")\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:\" + port);\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<String>> type = new GenericType<ServiceInstances<String>>(){};\n        ServiceInstances<String> instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n\n        \r\n        GenericType<ServiceInstance<String>> singleInstanceType = new GenericType<ServiceInstance<String>>(){};\n        ServiceInstance<String>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n    }\n","date":"2013-06-23 06:57:46","endLine":144,"groupId":"924","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/01/2ac19635480e06b9ff516ae4eea2df8b16e2f4.src","preCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceInstance<String> service = ServiceInstance.<String>builder()\n            .name(\"test\")\n            .payload(\"From Test\")\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<String>> type = new GenericType<ServiceInstances<String>>(){};\n        ServiceInstances<String> instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n\n        \r\n        GenericType<ServiceInstance<String>> singleInstanceType = new GenericType<ServiceInstance<String>>(){};\n        ServiceInstance<String>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestStringsWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2013-06-23 06:57:46","commitOrder":2,"curCode":"    public void     testRegisterService() throws Exception\n    {\n        Map<String, String>         payload = Maps.newHashMap();\n        payload.put(\"one\", \"1\");\n        payload.put(\"two\", \"2\");\n        payload.put(\"three\", \"3\");\n        ServiceInstance<Map<String, String>> service = ServiceInstance.<Map<String, String>>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:\" + port);\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<Map<String, String>>> type = new GenericType<ServiceInstances<Map<String, String>>>(){};\n        ServiceInstances<Map<String, String>>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<Map<String, String>>> singleInstanceType = new GenericType<ServiceInstance<Map<String, String>>>(){};\n        ServiceInstance<Map<String, String>>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","date":"2013-06-23 06:57:46","endLine":152,"groupId":"495","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/16/93b86aa755eb4408b32e29f204861f23c5ed9c.src","preCode":"    public void     testRegisterService() throws Exception\n    {\n        Map<String, String>         payload = Maps.newHashMap();\n        payload.put(\"one\", \"1\");\n        payload.put(\"two\", \"2\");\n        payload.put(\"three\", \"3\");\n        ServiceInstance<Map<String, String>> service = ServiceInstance.<Map<String, String>>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<Map<String, String>>> type = new GenericType<ServiceInstances<Map<String, String>>>(){};\n        ServiceInstances<Map<String, String>>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<Map<String, String>>> singleInstanceType = new GenericType<ServiceInstance<Map<String, String>>>(){};\n        ServiceInstance<Map<String, String>>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestMapsWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"5ff48fcaa39b43b4a3ef1ba194ac54fa300a5339","commitMessage":"@@@Use random port instead of hard-coded to make tests more resilient\n","date":"2013-06-23 06:57:46","modifiedFileCount":"4","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceInstance<String> service = ServiceInstance.<String>builder()\n            .name(\"test\")\n            .payload(\"From Test\")\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://\" + HOST + \":\" + port);\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<String>> type = new GenericType<ServiceInstances<String>>(){};\n        ServiceInstances<String> instances = resource.path(\"/v1/service/test\").get(type);\n        assertEquals(instances.getServices().size(), 1);\n        assertEquals(instances.getServices().get(0), service);\n\n        \r\n        GenericType<ServiceInstance<String>> singleInstanceType = new GenericType<ServiceInstance<String>>(){};\n        ServiceInstance<String>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        assertEquals(instance, service);\n    }\n","date":"2020-10-20 21:18:25","endLine":145,"groupId":"105","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testRegisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3e/fbc00b54a0d7bc8a43868ba4eca957cc3af21e.src","preCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceInstance<String> service = ServiceInstance.<String>builder()\n            .name(\"test\")\n            .payload(\"From Test\")\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:\" + port);\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<String>> type = new GenericType<ServiceInstances<String>>(){};\n        ServiceInstances<String> instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n\n        \r\n        GenericType<ServiceInstance<String>> singleInstanceType = new GenericType<ServiceInstance<String>>(){};\n        ServiceInstance<String>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestStringsWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void     testRegisterService() throws Exception\n    {\n        Map<String, String>         payload = Maps.newHashMap();\n        payload.put(\"one\", \"1\");\n        payload.put(\"two\", \"2\");\n        payload.put(\"three\", \"3\");\n        ServiceInstance<Map<String, String>> service = ServiceInstance.<Map<String, String>>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://\" + HOST + \":\" + port);\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<Map<String, String>>> type = new GenericType<ServiceInstances<Map<String, String>>>(){};\n        ServiceInstances<Map<String, String>>    instances = resource.path(\"/v1/service/test\").get(type);\n        assertEquals(instances.getServices().size(), 1);\n        assertEquals(instances.getServices().get(0), service);\n        assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<Map<String, String>>> singleInstanceType = new GenericType<ServiceInstance<Map<String, String>>>(){};\n        ServiceInstance<Map<String, String>>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        assertEquals(instance, service);\n\n    }\n","date":"2020-10-20 21:18:25","endLine":153,"groupId":"105","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testRegisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/99/7cefea230901ae0fc75850b2d3894db80688f4.src","preCode":"    public void     testRegisterService() throws Exception\n    {\n        Map<String, String>         payload = Maps.newHashMap();\n        payload.put(\"one\", \"1\");\n        payload.put(\"two\", \"2\");\n        payload.put(\"three\", \"3\");\n        ServiceInstance<Map<String, String>> service = ServiceInstance.<Map<String, String>>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:\" + port);\n        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<Map<String, String>>> type = new GenericType<ServiceInstances<Map<String, String>>>(){};\n        ServiceInstances<Map<String, String>>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<Map<String, String>>> singleInstanceType = new GenericType<ServiceInstance<Map<String, String>>>(){};\n        ServiceInstance<Map<String, String>>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestMapsWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
