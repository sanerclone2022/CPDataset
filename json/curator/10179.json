[{"authorTime":"2014-02-06 02:41:33","codes":[{"authorDate":"2014-02-06 02:41:33","commitOrder":1,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2014-02-06 02:41:33","endLine":95,"groupId":"1237","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/b1/c382fbbd4fa5157dd932ae5e3e8d59564ba2b1.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/client/TestBackgroundStates.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2014-02-06 02:41:33","commitOrder":1,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                    System.out.println(\"XXXX \" + newState);\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2014-02-06 02:41:33","endLine":93,"groupId":"1972","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/b9/7ba413e618980feab9788f0070baeb368e8227.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                    System.out.println(\"XXXX \" + newState);\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNodeListener.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"}],"commitId":"0a82f4eaa518ae41097fefdce332099dd2983286","commitMessage":"@@@Merge branch 'CURATOR-72'\n","date":"2014-02-06 02:41:33","modifiedFileCount":"6","status":"B","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2014-05-23 22:46:02","commitOrder":2,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":94,"groupId":"1237","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ac/7c7a93bc810c7f3ec8e9aa00bdc95169052d95.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/client/TestBackgroundStates.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":2,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                    System.out.println(\"XXXX \" + newState);\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":90,"groupId":"1972","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3a/4eda80259120c0e4ac78822bba69c182038c2f.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                    System.out.println(\"XXXX \" + newState);\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNodeListener.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"0bffdb020d78d8c6599a1eb9c2c702f9dd1192bd","commitMessage":"@@@Merge branch 'master' into CURATOR-105\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/PathChildrenCache.java\n","date":"2014-05-23 22:46:02","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2015-04-28 09:01:18","commitOrder":3,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        PersistentEphemeralNode node = null;\n        try\n        {\n            client.start();\n            node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.restart();\n            timing.sleepABit();\n            \r\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2015-04-28 09:01:18","endLine":96,"groupId":"1950","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/19/cb9a2a3a45237dbfb7d7cc467bc8ef2a1fd60f.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/client/TestBackgroundStates.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":3,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                    System.out.println(\"XXXX \" + newState);\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":90,"groupId":"1972","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3a/4eda80259120c0e4ac78822bba69c182038c2f.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                    System.out.println(\"XXXX \" + newState);\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNodeListener.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"}],"commitId":"da8b2d4232c3d50d109aa7dbcb47a64c338e599d","commitMessage":"@@@Merge branch 'CURATOR-190'\n","date":"2015-04-28 09:01:18","modifiedFileCount":"1","status":"M","submitter":"Cameron McKenzie"},{"authorTime":"2015-04-28 11:57:41","codes":[{"authorDate":"2015-04-28 11:57:41","commitOrder":4,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        PersistentEphemeralNode node = null;\n        try\n        {\n            client.start();\n            node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.restart();\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2015-04-28 11:57:41","endLine":94,"groupId":"1950","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f2/64615a1b6e1b2bd8a88de9c0b0e1f8da3fcb21.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        PersistentEphemeralNode node = null;\n        try\n        {\n            client.start();\n            node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.restart();\n            timing.sleepABit();\n            \r\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/client/TestBackgroundStates.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2015-04-28 11:57:41","commitOrder":4,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server.restart();\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.restart();\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-04-28 11:57:41","endLine":87,"groupId":"689","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ce/ff4c5e5c9af6705291ca2368fd540dcb3d1429.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                    System.out.println(\"XXXX \" + newState);\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.close();\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNodeListener.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"c47ae7402e093f21f5eb3244b855e45c0bc77f55","commitMessage":"@@@CURATOR-210 - Fixes to unit tests to restart() the TestingServer instance\ninstead of close()ing it and then recreating it to simulate connection\nloss.\n","date":"2015-04-28 11:57:41","modifiedFileCount":"6","status":"M","submitter":"Cameron McKenzie"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        PersistentEphemeralNode node = null;\n        try\n        {\n            client.start();\n            node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.restart();\n            timing.sleepABit();\n            assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":96,"groupId":"10179","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/cf/90a677e739cf338e7f1c5747a00b5cc86d96a0.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.close();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        PersistentEphemeralNode node = null;\n        try\n        {\n            client.start();\n            node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server = new TestingServer(server.getPort());\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.restart();\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/client/TestBackgroundStates.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server.restart();\n            assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.restart();\n            timing.sleepABit();\n            assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":90,"groupId":"10179","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testListenersReconnectedIsOK","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/6a/411af0f6ad537b3833f213a53eff7de883eb70.src","preCode":"    public void testListenersReconnectedIsOK() throws Exception\n    {\n        server.stop();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n            PersistentEphemeralNode node = new PersistentEphemeralNode(client, PersistentEphemeralNode.Mode.EPHEMERAL, \"/abc/node\", \"hello\".getBytes());\n            node.start();\n\n            final CountDownLatch connectedLatch = new CountDownLatch(1);\n            final CountDownLatch reconnectedLatch = new CountDownLatch(1);\n            final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>();\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    lastState.set(newState);\n                    if ( newState == ConnectionState.CONNECTED )\n                    {\n                        connectedLatch.countDown();\n                    }\n                    if ( newState == ConnectionState.RECONNECTED )\n                    {\n                        reconnectedLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n            timing.sleepABit();\n            server.restart();\n            Assert.assertTrue(timing.awaitLatch(connectedLatch));\n            timing.sleepABit();\n            Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS));\n            server.restart();\n            timing.sleepABit();\n            Assert.assertTrue(timing.awaitLatch(reconnectedLatch));\n            timing.sleepABit();\n            Assert.assertEquals(lastState.get(), ConnectionState.RECONNECTED);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNodeListener.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
