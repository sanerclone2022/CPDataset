[{"authorTime":"2014-07-29 08:00:12","codes":[{"authorDate":"2017-04-03 23:54:50","commitOrder":3,"curCode":"    public void testShutdown() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection()).retryPolicy(new RetryOneTime(1))\n            .maxCloseWaitMs(timing.forWaiting().milliseconds())\n            .build();\n        try\n        {\n            final AtomicBoolean hadIllegalStateException = new AtomicBoolean(false);\n            ((CuratorFrameworkImpl)client).debugUnhandledErrorListener = (message, e) ->\n            {\n                if ( e instanceof IllegalStateException )\n                {\n                    hadIllegalStateException.set(true);\n                }\n            };\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch operationReadyLatch = new CountDownLatch(1);\n            ((CuratorFrameworkImpl)client).debugListener = data ->\n            {\n                try\n                {\n                    operationReadyLatch.await();\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            };\n\n            \r\n            async.create().forPath(\"/hey\");\n            timing.sleepABit();\n\n            \r\n            client.close();\n\n            \r\n            operationReadyLatch.countDown();\n            timing.sleepABit();\n\n            \r\n            Assert.assertFalse(hadIllegalStateException.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-04-03 23:54:50","endLine":289,"groupId":"663","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c0/0febd415d4eef410d35a665abc877fa22f65c1.src","preCode":"    public void testShutdown() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection()).retryPolicy(new RetryOneTime(1))\n            .maxCloseWaitMs(timing.forWaiting().milliseconds())\n            .build();\n        try\n        {\n            final AtomicBoolean hadIllegalStateException = new AtomicBoolean(false);\n            ((CuratorFrameworkImpl)client).debugUnhandledErrorListener = (message, e) ->\n            {\n                if ( e instanceof IllegalStateException )\n                {\n                    hadIllegalStateException.set(true);\n                }\n            };\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch operationReadyLatch = new CountDownLatch(1);\n            ((CuratorFrameworkImpl)client).debugListener = data ->\n            {\n                try\n                {\n                    operationReadyLatch.await();\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            };\n\n            \r\n            async.create().forPath(\"/hey\");\n            timing.sleepABit();\n\n            \r\n            client.close();\n\n            \r\n            operationReadyLatch.countDown();\n            timing.sleepABit();\n\n            \r\n            Assert.assertFalse(hadIllegalStateException.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"B"},{"authorDate":"2014-07-29 08:00:12","commitOrder":3,"curCode":"    public void testShutdown() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection()).retryPolicy(new RetryOneTime(1))\n            .maxCloseWaitMs(timing.forWaiting().milliseconds())\n            .build();\n        try\n        {\n            final AtomicBoolean hadIllegalStateException = new AtomicBoolean(false);\n            ((CuratorFrameworkImpl)client).debugUnhandledErrorListener = new UnhandledErrorListener()\n            {\n                @Override\n                public void unhandledError(String message, Throwable e)\n                {\n                    if ( e instanceof IllegalStateException )\n                    {\n                        hadIllegalStateException.set(true);\n                    }\n                }\n            };\n            client.start();\n\n            final CountDownLatch operationReadyLatch = new CountDownLatch(1);\n            ((CuratorFrameworkImpl)client).debugListener = new CuratorFrameworkImpl.DebugBackgroundListener()\n            {\n                @Override\n                public void listen(OperationAndData<?> data)\n                {\n                    try\n                    {\n                        operationReadyLatch.await();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n\n            \r\n            client.create().inBackground().forPath(\"/hey\");\n            timing.sleepABit();\n\n            \r\n            client.close();\n\n            \r\n            operationReadyLatch.countDown();\n            timing.sleepABit();\n\n            \r\n            Assert.assertFalse(hadIllegalStateException.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-07-29 08:56:22","endLine":282,"groupId":"2100","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3f/1c41ff22a1091c77c3b4aea7ee3644a88e38cb.src","preCode":"    public void testShutdown() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection()).retryPolicy(new RetryOneTime(1))\n            .maxCloseWaitMs(timing.forWaiting().milliseconds())\n            .build();\n        try\n        {\n            final AtomicBoolean hadIllegalStateException = new AtomicBoolean(false);\n            ((CuratorFrameworkImpl)client).debugUnhandledErrorListener = new UnhandledErrorListener()\n            {\n                @Override\n                public void unhandledError(String message, Throwable e)\n                {\n                    if ( e instanceof IllegalStateException )\n                    {\n                        hadIllegalStateException.set(true);\n                    }\n                }\n            };\n            client.start();\n\n            final CountDownLatch operationReadyLatch = new CountDownLatch(1);\n            ((CuratorFrameworkImpl)client).debugListener = new CuratorFrameworkImpl.DebugBackgroundListener()\n            {\n                @Override\n                public void listen(OperationAndData<?> data)\n                {\n                    try\n                    {\n                        operationReadyLatch.await();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n\n            \r\n            client.create().inBackground().forPath(\"/hey\");\n            timing.sleepABit();\n\n            \r\n            client.close();\n\n            \r\n            operationReadyLatch.countDown();\n            timing.sleepABit();\n\n            \r\n            Assert.assertFalse(hadIllegalStateException.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"NB"}],"commitId":"1826b66d72f6e543a57aaf5f3acc3cd9ca6e965d","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2017-04-03 23:54:50","modifiedFileCount":"45","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testShutdown() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection()).retryPolicy(new RetryOneTime(1))\n            .maxCloseWaitMs(timing.forWaiting().milliseconds())\n            .build();\n        try\n        {\n            final AtomicBoolean hadIllegalStateException = new AtomicBoolean(false);\n            ((CuratorFrameworkImpl)client).debugUnhandledErrorListener = (message, e) ->\n            {\n                if ( e instanceof IllegalStateException )\n                {\n                    hadIllegalStateException.set(true);\n                }\n            };\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch operationReadyLatch = new CountDownLatch(1);\n            ((CuratorFrameworkImpl)client).debugListener = data ->\n            {\n                try\n                {\n                    operationReadyLatch.await();\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            };\n\n            \r\n            async.create().forPath(\"/hey\");\n            timing.sleepABit();\n\n            \r\n            client.close();\n\n            \r\n            operationReadyLatch.countDown();\n            timing.sleepABit();\n\n            \r\n            assertFalse(hadIllegalStateException.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":291,"groupId":"1022","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c5/bdf7c0bdd0f9ba3607ad038cc59628acef1fc3.src","preCode":"    public void testShutdown() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection()).retryPolicy(new RetryOneTime(1))\n            .maxCloseWaitMs(timing.forWaiting().milliseconds())\n            .build();\n        try\n        {\n            final AtomicBoolean hadIllegalStateException = new AtomicBoolean(false);\n            ((CuratorFrameworkImpl)client).debugUnhandledErrorListener = (message, e) ->\n            {\n                if ( e instanceof IllegalStateException )\n                {\n                    hadIllegalStateException.set(true);\n                }\n            };\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch operationReadyLatch = new CountDownLatch(1);\n            ((CuratorFrameworkImpl)client).debugListener = data ->\n            {\n                try\n                {\n                    operationReadyLatch.await();\n                }\n                catch ( InterruptedException e )\n                {\n                    Thread.currentThread().interrupt();\n                }\n            };\n\n            \r\n            async.create().forPath(\"/hey\");\n            timing.sleepABit();\n\n            \r\n            client.close();\n\n            \r\n            operationReadyLatch.countDown();\n            timing.sleepABit();\n\n            \r\n            Assert.assertFalse(hadIllegalStateException.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testShutdown() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection()).retryPolicy(new RetryOneTime(1))\n            .maxCloseWaitMs(timing.forWaiting().milliseconds())\n            .build();\n        try\n        {\n            final AtomicBoolean hadIllegalStateException = new AtomicBoolean(false);\n            ((CuratorFrameworkImpl)client).debugUnhandledErrorListener = new UnhandledErrorListener()\n            {\n                @Override\n                public void unhandledError(String message, Throwable e)\n                {\n                    if ( e instanceof IllegalStateException )\n                    {\n                        hadIllegalStateException.set(true);\n                    }\n                }\n            };\n            client.start();\n\n            final CountDownLatch operationReadyLatch = new CountDownLatch(1);\n            ((CuratorFrameworkImpl)client).debugListener = new CuratorFrameworkImpl.DebugBackgroundListener()\n            {\n                @Override\n                public void listen(OperationAndData<?> data)\n                {\n                    try\n                    {\n                        operationReadyLatch.await();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n\n            \r\n            client.create().inBackground().forPath(\"/hey\");\n            timing.sleepABit();\n\n            \r\n            client.close();\n\n            \r\n            operationReadyLatch.countDown();\n            timing.sleepABit();\n\n            \r\n            assertFalse(hadIllegalStateException.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":355,"groupId":"1022","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/bb/f052e4de2a326cbdf9eb48ad35b76614f73c41.src","preCode":"    public void testShutdown() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory\n            .builder()\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection()).retryPolicy(new RetryOneTime(1))\n            .maxCloseWaitMs(timing.forWaiting().milliseconds())\n            .build();\n        try\n        {\n            final AtomicBoolean hadIllegalStateException = new AtomicBoolean(false);\n            ((CuratorFrameworkImpl)client).debugUnhandledErrorListener = new UnhandledErrorListener()\n            {\n                @Override\n                public void unhandledError(String message, Throwable e)\n                {\n                    if ( e instanceof IllegalStateException )\n                    {\n                        hadIllegalStateException.set(true);\n                    }\n                }\n            };\n            client.start();\n\n            final CountDownLatch operationReadyLatch = new CountDownLatch(1);\n            ((CuratorFrameworkImpl)client).debugListener = new CuratorFrameworkImpl.DebugBackgroundListener()\n            {\n                @Override\n                public void listen(OperationAndData<?> data)\n                {\n                    try\n                    {\n                        operationReadyLatch.await();\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n\n            \r\n            client.create().inBackground().forPath(\"/hey\");\n            timing.sleepABit();\n\n            \r\n            client.close();\n\n            \r\n            operationReadyLatch.countDown();\n            timing.sleepABit();\n\n            \r\n            Assert.assertFalse(hadIllegalStateException.get());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
