[{"authorTime":"2020-03-20 09:52:43","codes":[{"authorDate":"2020-03-20 09:52:43","commitOrder":1,"curCode":"    public void testPersistentWatch() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch latch = new CountDownLatch(3);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT).usingWatcher(watcher).forPath(\"/test/foo\");\n\n            client.create().creatingParentsIfNeeded().forPath(\"/test/foo\");\n            client.setData().forPath(\"/test/foo\", \"hey\".getBytes());\n            client.delete().forPath(\"/test/foo\");\n\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-03-20 09:52:43","endLine":634,"groupId":"1146","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPersistentWatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/26/0c2924e1b20037098436c610ba086b0705eb48.src","preCode":"    public void testPersistentWatch() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch latch = new CountDownLatch(3);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT).usingWatcher(watcher).forPath(\"/test/foo\");\n\n            client.create().creatingParentsIfNeeded().forPath(\"/test/foo\");\n            client.setData().forPath(\"/test/foo\", \"hey\".getBytes());\n            client.delete().forPath(\"/test/foo\");\n\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatchesBuilder.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"B"},{"authorDate":"2020-03-20 09:52:43","commitOrder":1,"curCode":"    public void testPersistentWatchesNotAvailableAsync()\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            async.addWatch().forPath(\"/foo\");\n        }\n    }\n","date":"2020-03-20 09:52:43","endLine":48,"groupId":"1146","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPersistentWatchesNotAvailableAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/51/12d41039436b8c0adf58168191e176de309d68.src","preCode":"    public void testPersistentWatchesNotAvailableAsync()\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            async.addWatch().forPath(\"/foo\");\n        }\n    }\n","realPath":"curator-test-zk35/src/test/java/org/apache/curator/framework/TestCompatibility.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"}],"commitId":"d65669b64f003326c98843b32b997e3ffab1e442","commitMessage":"@@@CURATOR-549 (#334)\n\nSupport persistent watchers in ZK 3.6+ while maintaining background compatibility with previous versions of ZK. Adds Curator Framework DSL calls to ZooKeeper's addWatch() method. Subsequent PRs will add recipes. Both the older Framework and the async Framework now have methods to add persistent watchers.\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-20 09:52:43","modifiedFileCount":"12","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testPersistentWatch() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch latch = new CountDownLatch(3);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT).usingWatcher(watcher).forPath(\"/test/foo\");\n\n            client.create().creatingParentsIfNeeded().forPath(\"/test/foo\");\n            client.setData().forPath(\"/test/foo\", \"hey\".getBytes());\n            client.delete().forPath(\"/test/foo\");\n\n            assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":640,"groupId":"1084","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testPersistentWatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/30/526506433fc4388fb9e7ed3cfaef4570c915c0.src","preCode":"    public void testPersistentWatch() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch latch = new CountDownLatch(3);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT).usingWatcher(watcher).forPath(\"/test/foo\");\n\n            client.create().creatingParentsIfNeeded().forPath(\"/test/foo\");\n            client.setData().forPath(\"/test/foo\", \"hey\".getBytes());\n            client.delete().forPath(\"/test/foo\");\n\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatchesBuilder.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testPersistentWatchesNotAvailableAsync()\n    {\n        assertThrows(IllegalStateException.class, ()->{\n            try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n            {\n                client.start();\n\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.addWatch().forPath(\"/foo\");\n            }\n        });\n    }\n","date":"2020-10-20 21:18:25","endLine":52,"groupId":"1084","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPersistentWatchesNotAvailableAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/89/f2d292de25c6572674e0f65b0f3701a32755a0.src","preCode":"    public void testPersistentWatchesNotAvailableAsync()\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n            async.addWatch().forPath(\"/foo\");\n        }\n    }\n","realPath":"curator-test-zk35/src/test/java/org/apache/curator/framework/TestCompatibility.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
