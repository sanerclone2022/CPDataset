[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void         testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n            (\n                new CuratorListener()\n                {\n                    @Override\n                    public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                    {\n                        if ( event.getType() == CuratorEventType.EXISTS )\n                        {\n                            Stat    stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                            Assert.assertNull(stat);\n\n                            client.create().inBackground(event.getContext()).forPath(\"/what\");\n                        }\n                        else if ( event.getType() == CuratorEventType.CREATE )\n                        {\n                            ((CountDownLatch)event.getContext()).countDown();\n                        }\n                    }\n                }\n            );\n\n            CountDownLatch        latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":242,"groupId":"655","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/89/bdab681575c4981d521bf1df3940c58052f122.src","preCode":"    public void         testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n            (\n                new CuratorListener()\n                {\n                    @Override\n                    public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                    {\n                        if ( event.getType() == CuratorEventType.EXISTS )\n                        {\n                            Stat    stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                            Assert.assertNull(stat);\n\n                            client.create().inBackground(event.getContext()).forPath(\"/what\");\n                        }\n                        else if ( event.getType() == CuratorEventType.CREATE )\n                        {\n                            ((CountDownLatch)event.getContext()).countDown();\n                        }\n                    }\n                }\n            );\n\n            CountDownLatch        latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void         testRetry() throws Exception\n    {\n        final int       MAX_RETRIES = 3;\n        final int       serverPort = server.getPort();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), 1000, 1000, new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger     retries = new AtomicInteger(0);\n            final Semaphore         semaphore = new Semaphore(0);\n            client.getZookeeperClient().setRetryPolicy\n            (\n                new RetryPolicy()\n                {\n                    @Override\n                    public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                    {\n                        semaphore.release();\n                        if ( retries.incrementAndGet() == MAX_RETRIES )\n                        {\n                            try\n                            {\n                                server = new TestingServer(serverPort);\n                            }\n                            catch ( Exception e )\n                            {\n                                throw new Error(e);\n                            }\n                        }\n                        return true;\n                    }\n                }\n            );\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n        }\n        catch ( Throwable e )\n        {\n            Assert.fail(\"Error\", e);\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":366,"groupId":"182","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/89/bdab681575c4981d521bf1df3940c58052f122.src","preCode":"    public void         testRetry() throws Exception\n    {\n        final int       MAX_RETRIES = 3;\n        final int       serverPort = server.getPort();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), 1000, 1000, new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger     retries = new AtomicInteger(0);\n            final Semaphore         semaphore = new Semaphore(0);\n            client.getZookeeperClient().setRetryPolicy\n            (\n                new RetryPolicy()\n                {\n                    @Override\n                    public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                    {\n                        semaphore.release();\n                        if ( retries.incrementAndGet() == MAX_RETRIES )\n                        {\n                            try\n                            {\n                                server = new TestingServer(serverPort);\n                            }\n                            catch ( Exception e )\n                            {\n                                throw new Error(e);\n                            }\n                        }\n                        return true;\n                    }\n                }\n            );\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n        }\n        catch ( Throwable e )\n        {\n            Assert.fail(\"Error\", e);\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2014-02-04 02:55:50","codes":[{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":273,"groupId":"655","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ae/c45b6cb9a6b4ccc02ba02d64a7c68bb3e5df69.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n        final int serverPort = server.getPort();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), 1000, 1000, new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            client.getZookeeperClient().setRetryPolicy\n                (\n                    new RetryPolicy()\n                    {\n                        @Override\n                        public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                        {\n                            semaphore.release();\n                            if ( retries.incrementAndGet() == MAX_RETRIES )\n                            {\n                                try\n                                {\n                                    server = new TestingServer(serverPort);\n                                }\n                                catch ( Exception e )\n                                {\n                                    throw new Error(e);\n                                }\n                            }\n                            return true;\n                        }\n                    }\n                );\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n        }\n        catch ( Throwable e )\n        {\n            Assert.fail(\"Error\", e);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":397,"groupId":"182","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ae/c45b6cb9a6b4ccc02ba02d64a7c68bb3e5df69.src","preCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n        final int serverPort = server.getPort();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), 1000, 1000, new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            client.getZookeeperClient().setRetryPolicy\n                (\n                    new RetryPolicy()\n                    {\n                        @Override\n                        public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                        {\n                            semaphore.release();\n                            if ( retries.incrementAndGet() == MAX_RETRIES )\n                            {\n                                try\n                                {\n                                    server = new TestingServer(serverPort);\n                                }\n                                catch ( Exception e )\n                                {\n                                    throw new Error(e);\n                                }\n                            }\n                            return true;\n                        }\n                    }\n                );\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n        }\n        catch ( Throwable e )\n        {\n            Assert.fail(\"Error\", e);\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"}],"commitId":"863eaee2f11fe930601c3da3bce386263fb552c4","commitMessage":"@@@CURATOR-85 - Guava no longer has closeQuietly(). This change adds the implementation internally to Curator\n","date":"2014-02-04 02:55:50","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2014-05-23 22:46:02","commitOrder":3,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":274,"groupId":"655","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/52/897b6b2e9df38c251faddf37bbf009210d6355.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":3,"curCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n        final int serverPort = server.getPort();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            client.getZookeeperClient().setRetryPolicy\n                (\n                    new RetryPolicy()\n                    {\n                        @Override\n                        public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                        {\n                            semaphore.release();\n                            if ( retries.incrementAndGet() == MAX_RETRIES )\n                            {\n                                try\n                                {\n                                    server = new TestingServer(serverPort);\n                                }\n                                catch ( Exception e )\n                                {\n                                    throw new Error(e);\n                                }\n                            }\n                            return true;\n                        }\n                    }\n                );\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS));\n\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        catch ( Throwable e )\n        {\n            Assert.fail(\"Error\", e);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":397,"groupId":"655","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/52/897b6b2e9df38c251faddf37bbf009210d6355.src","preCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n        final int serverPort = server.getPort();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), 1000, 1000, new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            client.getZookeeperClient().setRetryPolicy\n                (\n                    new RetryPolicy()\n                    {\n                        @Override\n                        public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                        {\n                            semaphore.release();\n                            if ( retries.incrementAndGet() == MAX_RETRIES )\n                            {\n                                try\n                                {\n                                    server = new TestingServer(serverPort);\n                                }\n                                catch ( Exception e )\n                                {\n                                    throw new Error(e);\n                                }\n                            }\n                            return true;\n                        }\n                    }\n                );\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, 10, TimeUnit.SECONDS));\n        }\n        catch ( Throwable e )\n        {\n            Assert.fail(\"Error\", e);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"}],"commitId":"0bffdb020d78d8c6599a1eb9c2c702f9dd1192bd","commitMessage":"@@@Merge branch 'master' into CURATOR-105\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/PathChildrenCache.java\n","date":"2014-05-23 22:46:02","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2014-06-08 03:38:09","codes":[{"authorDate":"2014-05-23 22:46:02","commitOrder":4,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":274,"groupId":"655","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/52/897b6b2e9df38c251faddf37bbf009210d6355.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"N"},{"authorDate":"2014-06-08 03:38:09","commitOrder":4,"curCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n        final int serverPort = server.getPort();\n        final File tempDirectory = server.getTempDirectory();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            RetryPolicy policy = new RetryPolicy()\n            {\n                @Override\n                public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                {\n                    semaphore.release();\n                    if ( retries.incrementAndGet() == MAX_RETRIES )\n                    {\n                        try\n                        {\n                            server = new TestingServer(serverPort, tempDirectory);\n                        }\n                        catch ( Exception e )\n                        {\n                            throw new Error(e);\n                        }\n                    }\n                    try\n                    {\n                        sleeper.sleepFor(100, TimeUnit.MILLISECONDS);\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                    return true;\n                }\n            };\n            client.getZookeeperClient().setRetryPolicy(policy);\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n\n            \r\n            client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100));\n            client.checkExists().forPath(\"/hey\");\n\n            client.getZookeeperClient().setRetryPolicy(policy);\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-06-08 03:38:09","endLine":406,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/4c/c63303fe9c3b31ee385411cd0a151b72fd5eb3.src","preCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n        final int serverPort = server.getPort();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            client.getZookeeperClient().setRetryPolicy\n                (\n                    new RetryPolicy()\n                    {\n                        @Override\n                        public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                        {\n                            semaphore.release();\n                            if ( retries.incrementAndGet() == MAX_RETRIES )\n                            {\n                                try\n                                {\n                                    server = new TestingServer(serverPort);\n                                }\n                                catch ( Exception e )\n                                {\n                                    throw new Error(e);\n                                }\n                            }\n                            return true;\n                        }\n                    }\n                );\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS));\n\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS));\n        }\n        catch ( Throwable e )\n        {\n            Assert.fail(\"Error\", e);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"}],"commitId":"d3ce45c637caf1cef7263489eef5889a684cbca7","commitMessage":"@@@made testRetry() more resilient\n","date":"2014-06-08 03:38:09","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2014-06-18 12:01:35","codes":[{"authorDate":"2014-05-23 22:46:02","commitOrder":5,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":274,"groupId":"655","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/52/897b6b2e9df38c251faddf37bbf009210d6355.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"N"},{"authorDate":"2014-06-18 12:01:35","commitOrder":5,"curCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n        final int serverPort = server.getPort();\n        final File tempDirectory = server.getTempDirectory();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            RetryPolicy policy = new RetryPolicy()\n            {\n                @Override\n                public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                {\n                    semaphore.release();\n                    if ( retries.incrementAndGet() == MAX_RETRIES )\n                    {\n                        try\n                        {\n                            server.restart();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw new Error(e);\n                        }\n                    }\n                    try\n                    {\n                        sleeper.sleepFor(100, TimeUnit.MILLISECONDS);\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                    return true;\n                }\n            };\n            client.getZookeeperClient().setRetryPolicy(policy);\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n\n            \r\n            client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100));\n            client.checkExists().forPath(\"/hey\");\n\n            client.getZookeeperClient().setRetryPolicy(policy);\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-06-18 12:01:35","endLine":406,"groupId":"579","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9a/db70f188e5a360e77d675eadc7af3fcc596b2c.src","preCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n        final int serverPort = server.getPort();\n        final File tempDirectory = server.getTempDirectory();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            RetryPolicy policy = new RetryPolicy()\n            {\n                @Override\n                public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                {\n                    semaphore.release();\n                    if ( retries.incrementAndGet() == MAX_RETRIES )\n                    {\n                        try\n                        {\n                            server = new TestingServer(serverPort, tempDirectory);\n                        }\n                        catch ( Exception e )\n                        {\n                            throw new Error(e);\n                        }\n                    }\n                    try\n                    {\n                        sleeper.sleepFor(100, TimeUnit.MILLISECONDS);\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                    return true;\n                }\n            };\n            client.getZookeeperClient().setRetryPolicy(policy);\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n\n            \r\n            client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100));\n            client.checkExists().forPath(\"/hey\");\n\n            client.getZookeeperClient().setRetryPolicy(policy);\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"}],"commitId":"2337b64fc5a1cfbbcbe462560cb0a8d2fef22c0a","commitMessage":"@@@Merge branch 'CURATOR-114' of github.com:cammckenzie/curator into CURATOR-114\n","date":"2014-06-18 12:01:35","modifiedFileCount":"11","status":"M","submitter":"randgalt"},{"authorTime":"2014-06-18 12:07:43","codes":[{"authorDate":"2014-05-23 22:46:02","commitOrder":6,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":274,"groupId":"655","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/52/897b6b2e9df38c251faddf37bbf009210d6355.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"N"},{"authorDate":"2014-06-18 12:07:43","commitOrder":6,"curCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            RetryPolicy policy = new RetryPolicy()\n            {\n                @Override\n                public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                {\n                    semaphore.release();\n                    if ( retries.incrementAndGet() == MAX_RETRIES )\n                    {\n                        try\n                        {\n                            server.restart();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw new Error(e);\n                        }\n                    }\n                    try\n                    {\n                        sleeper.sleepFor(100, TimeUnit.MILLISECONDS);\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                    return true;\n                }\n            };\n            client.getZookeeperClient().setRetryPolicy(policy);\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n\n            \r\n            client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100));\n            client.checkExists().forPath(\"/hey\");\n\n            client.getZookeeperClient().setRetryPolicy(policy);\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-06-18 12:07:43","endLine":403,"groupId":"579","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9c/02c7d9dcd413bb7ab3e5f874b931db523fda1b.src","preCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n        final int serverPort = server.getPort();\n        final File tempDirectory = server.getTempDirectory();\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            RetryPolicy policy = new RetryPolicy()\n            {\n                @Override\n                public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                {\n                    semaphore.release();\n                    if ( retries.incrementAndGet() == MAX_RETRIES )\n                    {\n                        try\n                        {\n                            server.restart();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw new Error(e);\n                        }\n                    }\n                    try\n                    {\n                        sleeper.sleepFor(100, TimeUnit.MILLISECONDS);\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                    return true;\n                }\n            };\n            client.getZookeeperClient().setRetryPolicy(policy);\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n\n            \r\n            client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100));\n            client.checkExists().forPath(\"/hey\");\n\n            client.getZookeeperClient().setRetryPolicy(policy);\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"}],"commitId":"95893ad37da229d91973bd428ebf19f17cb8a9d8","commitMessage":"@@@removed some dead code (left over port/dirs)\n","date":"2014-06-18 12:07:43","modifiedFileCount":"6","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":7,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener(new CuratorListener()\n            {\n                @Override\n                public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    if ( event.getType() == CuratorEventType.EXISTS )\n                    {\n                        Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                        assertNull(stat);\n\n                        client.create().inBackground(event.getContext()).forPath(\"/what\");\n                    }\n                    else if ( event.getType() == CuratorEventType.CREATE )\n                    {\n                        ((CountDownLatch)event.getContext()).countDown();\n                    }\n                }\n            });\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":622,"groupId":"1059","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1f/da24870f488fc96f258b772f35da0396d1f2e2.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener(new CuratorListener()\n            {\n                @Override\n                public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    if ( event.getType() == CuratorEventType.EXISTS )\n                    {\n                        Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                        Assert.assertNull(stat);\n\n                        client.create().inBackground(event.getContext()).forPath(\"/what\");\n                    }\n                    else if ( event.getType() == CuratorEventType.CREATE )\n                    {\n                        ((CountDownLatch)event.getContext()).countDown();\n                    }\n                }\n            });\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":7,"curCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            RetryPolicy policy = new RetryPolicy()\n            {\n                @Override\n                public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                {\n                    semaphore.release();\n                    if ( retries.incrementAndGet() == MAX_RETRIES )\n                    {\n                        try\n                        {\n                            server.restart();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw new Error(e);\n                        }\n                    }\n                    try\n                    {\n                        sleeper.sleepFor(100, TimeUnit.MILLISECONDS);\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                    return true;\n                }\n            };\n            client.getZookeeperClient().setRetryPolicy(policy);\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n\n            \r\n            client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100));\n            client.checkExists().forPath(\"/hey\");\n\n            client.getZookeeperClient().setRetryPolicy(policy);\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":748,"groupId":"1059","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1f/da24870f488fc96f258b772f35da0396d1f2e2.src","preCode":"    public void testRetry() throws Exception\n    {\n        final int MAX_RETRIES = 3;\n\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(10));\n        client.start();\n        try\n        {\n            final AtomicInteger retries = new AtomicInteger(0);\n            final Semaphore semaphore = new Semaphore(0);\n            RetryPolicy policy = new RetryPolicy()\n            {\n                @Override\n                public boolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper)\n                {\n                    semaphore.release();\n                    if ( retries.incrementAndGet() == MAX_RETRIES )\n                    {\n                        try\n                        {\n                            server.restart();\n                        }\n                        catch ( Exception e )\n                        {\n                            throw new Error(e);\n                        }\n                    }\n                    try\n                    {\n                        sleeper.sleepFor(100, TimeUnit.MILLISECONDS);\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                    return true;\n                }\n            };\n            client.getZookeeperClient().setRetryPolicy(policy);\n\n            server.stop();\n\n            \r\n            client.checkExists().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n\n            \r\n            client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100));\n            client.checkExists().forPath(\"/hey\");\n\n            client.getZookeeperClient().setRetryPolicy(policy);\n            semaphore.drainPermits();\n            retries.set(0);\n\n            server.stop();\n\n            \r\n            client.checkExists().inBackground().forPath(\"/hey\");\n            Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES, timing.forWaiting().seconds(), TimeUnit.SECONDS), \"Remaining leases: \" + semaphore.availablePermits());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
