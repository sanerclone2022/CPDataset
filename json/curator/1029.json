[{"authorTime":"2014-06-18 12:01:35","codes":[{"authorDate":"2017-04-03 23:54:50","commitOrder":4,"curCode":"    public void testCreateACLWithReset() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection())\n            .authorization(\"digest\", \"me:pass\".getBytes())\n            .retryPolicy(new ExponentialBackoffRetry(100, 5))\n            .build();\n        client.start();\n        try\n        {\n            final CountDownLatch lostLatch = new CountDownLatch(1);\n            ConnectionStateListener listener = (client1, newState) ->\n            {\n                if ( newState == ConnectionState.LOST )\n                {\n                    lostLatch.countDown();\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(lostLatch));\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.checkExists().forPath(\"/\").toCompletableFuture().get();\n                Assert.fail(\"Connection should be down\");\n            }\n            catch ( ExecutionException e )\n            {\n                \r\n            }\n\n            server.restart();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                Assert.fail(\"Auth failed\", e);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-04-03 23:54:50","endLine":343,"groupId":"601","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateACLWithReset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ad/c85da09df176424f6b449ba947d8cbc070648a.src","preCode":"    public void testCreateACLWithReset() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection())\n            .authorization(\"digest\", \"me:pass\".getBytes())\n            .retryPolicy(new ExponentialBackoffRetry(100, 5))\n            .build();\n        client.start();\n        try\n        {\n            final CountDownLatch lostLatch = new CountDownLatch(1);\n            ConnectionStateListener listener = (client1, newState) ->\n            {\n                if ( newState == ConnectionState.LOST )\n                {\n                    lostLatch.countDown();\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(lostLatch));\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.checkExists().forPath(\"/\").toCompletableFuture().get();\n                Assert.fail(\"Connection should be down\");\n            }\n            catch ( ExecutionException e )\n            {\n                \r\n            }\n\n            server.restart();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                Assert.fail(\"Auth failed\", e);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"B"},{"authorDate":"2014-06-18 12:01:35","commitOrder":4,"curCode":"    public void     testCreateACLWithReset() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection())\n            .authorization(\"digest\", \"me:pass\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            final CountDownLatch lostLatch = new CountDownLatch(1);\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    if ( newState == ConnectionState.LOST )\n                    {\n                        lostLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(lostLatch));\n            try\n            {\n                client.checkExists().forPath(\"/\");\n                Assert.fail(\"Connection should be down\");\n            }\n            catch ( KeeperException.ConnectionLossException e )\n            {\n                \r\n            }\n\n            server.restart();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-06-18 12:01:35","endLine":283,"groupId":"1326","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateACLWithReset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/08/a284c59f52df2b65aeee20ebcadd85c1919f0a.src","preCode":"    public void     testCreateACLWithReset() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection())\n            .authorization(\"digest\", \"me:pass\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            final CountDownLatch lostLatch = new CountDownLatch(1);\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    if ( newState == ConnectionState.LOST )\n                    {\n                        lostLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(lostLatch));\n            try\n            {\n                client.checkExists().forPath(\"/\");\n                Assert.fail(\"Connection should be down\");\n            }\n            catch ( KeeperException.ConnectionLossException e )\n            {\n                \r\n            }\n\n            server.restart();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"NB"}],"commitId":"1826b66d72f6e543a57aaf5f3acc3cd9ca6e965d","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2017-04-03 23:54:50","modifiedFileCount":"45","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testCreateACLWithReset() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection())\n            .authorization(\"digest\", \"me:pass\".getBytes())\n            .retryPolicy(new ExponentialBackoffRetry(100, 5))\n            .build();\n        client.start();\n        try\n        {\n            final CountDownLatch lostLatch = new CountDownLatch(1);\n            ConnectionStateListener listener = (client1, newState) ->\n            {\n                if ( newState == ConnectionState.LOST )\n                {\n                    lostLatch.countDown();\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n\n            server.stop();\n            assertTrue(timing.awaitLatch(lostLatch));\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.checkExists().forPath(\"/\").toCompletableFuture().get();\n                fail(\"Connection should be down\");\n            }\n            catch ( ExecutionException e )\n            {\n                \r\n            }\n\n            server.restart();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                fail(\"Auth failed\", e);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":350,"groupId":"1029","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateACLWithReset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d0/3ffca84d5f57eaadba1aff79e3bfa640c58642.src","preCode":"    public void testCreateACLWithReset() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection())\n            .authorization(\"digest\", \"me:pass\".getBytes())\n            .retryPolicy(new ExponentialBackoffRetry(100, 5))\n            .build();\n        client.start();\n        try\n        {\n            final CountDownLatch lostLatch = new CountDownLatch(1);\n            ConnectionStateListener listener = (client1, newState) ->\n            {\n                if ( newState == ConnectionState.LOST )\n                {\n                    lostLatch.countDown();\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(lostLatch));\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.checkExists().forPath(\"/\").toCompletableFuture().get();\n                Assert.fail(\"Connection should be down\");\n            }\n            catch ( ExecutionException e )\n            {\n                \r\n            }\n\n            server.restart();\n            try\n            {\n                AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n                async.setData().forPath(\"/test\", \"test\".getBytes()).toCompletableFuture().get();\n            }\n            catch ( ExecutionException e )\n            {\n                Assert.fail(\"Auth failed\", e);\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testCreateACLWithReset() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection())\n            .authorization(\"digest\", \"me:pass\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            final CountDownLatch lostLatch = new CountDownLatch(1);\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    if ( newState == ConnectionState.LOST )\n                    {\n                        lostLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n\n            server.stop();\n            assertTrue(timing.awaitLatch(lostLatch));\n            try\n            {\n                client.checkExists().forPath(\"/\");\n                fail(\"Connection should be down\");\n            }\n            catch ( KeeperException.ConnectionLossException e )\n            {\n                \r\n            }\n\n            server.restart();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                fail(\"Auth failed\");\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":578,"groupId":"1029","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateACLWithReset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a1/aea5271b893475af37c6c936f1d81b83345caa.src","preCode":"    public void testCreateACLWithReset() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n        CuratorFramework client = builder\n            .connectString(server.getConnectString())\n            .sessionTimeoutMs(timing.session())\n            .connectionTimeoutMs(timing.connection())\n            .authorization(\"digest\", \"me:pass\".getBytes())\n            .retryPolicy(new RetryOneTime(1))\n            .build();\n        client.start();\n        try\n        {\n            final CountDownLatch lostLatch = new CountDownLatch(1);\n            ConnectionStateListener listener = new ConnectionStateListener()\n            {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState newState)\n                {\n                    if ( newState == ConnectionState.LOST )\n                    {\n                        lostLatch.countDown();\n                    }\n                }\n            };\n            client.getConnectionStateListenable().addListener(listener);\n\n            ACL acl = new ACL(ZooDefs.Perms.WRITE, ZooDefs.Ids.AUTH_IDS);\n            List<ACL> aclList = Lists.newArrayList(acl);\n            client.create().withACL(aclList).forPath(\"/test\", \"test\".getBytes());\n\n            server.stop();\n            Assert.assertTrue(timing.awaitLatch(lostLatch));\n            try\n            {\n                client.checkExists().forPath(\"/\");\n                Assert.fail(\"Connection should be down\");\n            }\n            catch ( KeeperException.ConnectionLossException e )\n            {\n                \r\n            }\n\n            server.restart();\n            try\n            {\n                client.setData().forPath(\"/test\", \"test\".getBytes());\n            }\n            catch ( KeeperException.NoAuthException e )\n            {\n                Assert.fail(\"Auth failed\");\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFramework.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":520,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
