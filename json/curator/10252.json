[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testThatDowngradingRespectsThreads() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            final InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            ExecutorService                   t1 = Executors.newSingleThreadExecutor();\n            ExecutorService                   t2 = Executors.newSingleThreadExecutor();\n\n            final CountDownLatch              latch = new CountDownLatch(1);\n\n            Future<Object>                    f1 = t1.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        lock.writeLock().acquire();\n                        latch.countDown();\n                        return null;\n                    }\n                }\n            );\n\n            Future<Object>                    f2 = t2.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n                        Assert.assertFalse(lock.readLock().acquire(5, TimeUnit.SECONDS));\n                        return null;\n                    }\n                }\n            );\n\n            f1.get();\n            f2.get();\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":174,"groupId":"104","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testThatDowngradingRespectsThreads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/63/c8e8c34f99a46f4257a6ddeba19c7a633846fb.src","preCode":"    public void     testThatDowngradingRespectsThreads() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            final InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            ExecutorService                   t1 = Executors.newSingleThreadExecutor();\n            ExecutorService                   t2 = Executors.newSingleThreadExecutor();\n\n            final CountDownLatch              latch = new CountDownLatch(1);\n\n            Future<Object>                    f1 = t1.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        lock.writeLock().acquire();\n                        latch.countDown();\n                        return null;\n                    }\n                }\n            );\n\n            Future<Object>                    f2 = t2.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n                        Assert.assertFalse(lock.readLock().acquire(5, TimeUnit.SECONDS));\n                        return null;\n                    }\n                }\n            );\n\n            f1.get();\n            f2.get();\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessReadWriteLock.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testDowngrading() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            lock.writeLock().acquire();\n            Assert.assertTrue(lock.readLock().acquire(5, TimeUnit.SECONDS));\n            lock.writeLock().release();\n\n            lock.readLock().release();\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":195,"groupId":"1810","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDowngrading","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/63/c8e8c34f99a46f4257a6ddeba19c7a633846fb.src","preCode":"    public void     testDowngrading() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            lock.writeLock().acquire();\n            Assert.assertTrue(lock.readLock().acquire(5, TimeUnit.SECONDS));\n            lock.writeLock().release();\n\n            lock.readLock().release();\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessReadWriteLock.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2014-02-04 02:55:50","codes":[{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void     testThatDowngradingRespectsThreads() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            final InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            ExecutorService                   t1 = Executors.newSingleThreadExecutor();\n            ExecutorService                   t2 = Executors.newSingleThreadExecutor();\n\n            final CountDownLatch              latch = new CountDownLatch(1);\n\n            Future<Object>                    f1 = t1.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        lock.writeLock().acquire();\n                        latch.countDown();\n                        return null;\n                    }\n                }\n            );\n\n            Future<Object>                    f2 = t2.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n                        Assert.assertFalse(lock.readLock().acquire(5, TimeUnit.SECONDS));\n                        return null;\n                    }\n                }\n            );\n\n            f1.get();\n            f2.get();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":176,"groupId":"104","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testThatDowngradingRespectsThreads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/5b/44c7cee4dd2ec8ef1998d93076714b83ba9c79.src","preCode":"    public void     testThatDowngradingRespectsThreads() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            final InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            ExecutorService                   t1 = Executors.newSingleThreadExecutor();\n            ExecutorService                   t2 = Executors.newSingleThreadExecutor();\n\n            final CountDownLatch              latch = new CountDownLatch(1);\n\n            Future<Object>                    f1 = t1.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        lock.writeLock().acquire();\n                        latch.countDown();\n                        return null;\n                    }\n                }\n            );\n\n            Future<Object>                    f2 = t2.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n                        Assert.assertFalse(lock.readLock().acquire(5, TimeUnit.SECONDS));\n                        return null;\n                    }\n                }\n            );\n\n            f1.get();\n            f2.get();\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessReadWriteLock.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void     testDowngrading() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            lock.writeLock().acquire();\n            Assert.assertTrue(lock.readLock().acquire(5, TimeUnit.SECONDS));\n            lock.writeLock().release();\n\n            lock.readLock().release();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":197,"groupId":"1810","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDowngrading","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/5b/44c7cee4dd2ec8ef1998d93076714b83ba9c79.src","preCode":"    public void     testDowngrading() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            lock.writeLock().acquire();\n            Assert.assertTrue(lock.readLock().acquire(5, TimeUnit.SECONDS));\n            lock.writeLock().release();\n\n            lock.readLock().release();\n        }\n        finally\n        {\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessReadWriteLock.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"863eaee2f11fe930601c3da3bce386263fb552c4","commitMessage":"@@@CURATOR-85 - Guava no longer has closeQuietly(). This change adds the implementation internally to Curator\n","date":"2014-02-04 02:55:50","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-08-18 10:13:37","commitOrder":3,"curCode":"    public void testThatDowngradingRespectsThreads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            final InterProcessReadWriteLock lock = new InterProcessReadWriteLock(client, \"/lock\");\n            ExecutorService t1 = Executors.newSingleThreadExecutor();\n            ExecutorService t2 = Executors.newSingleThreadExecutor();\n\n            final CountDownLatch latch = new CountDownLatch(1);\n\n            final CountDownLatch releaseLatch = new CountDownLatch(1);\n            Future<Object> f1 = t1.submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            lock.writeLock().acquire();\n                            latch.countDown();\n                            try\n                            {\n                                releaseLatch.await();\n                            }\n                            finally\n                            {\n                                lock.writeLock().release();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            Future<Object> f2 = t2.submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n                            Assert.assertFalse(lock.readLock().acquire(5, TimeUnit.SECONDS));\n                            return null;\n                        }\n                    }\n                );\n\n            f2.get();\n            releaseLatch.countDown();\n            f1.get();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":211,"groupId":"1260","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testThatDowngradingRespectsThreads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/48/e4805d832ce303193c05edc8d6afa8764cc384.src","preCode":"    public void     testThatDowngradingRespectsThreads() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            final InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            ExecutorService                   t1 = Executors.newSingleThreadExecutor();\n            ExecutorService                   t2 = Executors.newSingleThreadExecutor();\n\n            final CountDownLatch              latch = new CountDownLatch(1);\n\n            Future<Object>                    f1 = t1.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        lock.writeLock().acquire();\n                        latch.countDown();\n                        return null;\n                    }\n                }\n            );\n\n            Future<Object>                    f2 = t2.submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n                        Assert.assertFalse(lock.readLock().acquire(5, TimeUnit.SECONDS));\n                        return null;\n                    }\n                }\n            );\n\n            f1.get();\n            f2.get();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessReadWriteLock.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2015-08-18 10:13:37","commitOrder":3,"curCode":"    public void testDowngrading() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            InterProcessReadWriteLock lock = new InterProcessReadWriteLock(client, \"/lock\");\n            lock.writeLock().acquire();\n            Assert.assertTrue(lock.readLock().acquire(5, TimeUnit.SECONDS));\n            lock.writeLock().release();\n\n            lock.readLock().release();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":232,"groupId":"1810","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDowngrading","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/48/e4805d832ce303193c05edc8d6afa8764cc384.src","preCode":"    public void     testDowngrading() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            InterProcessReadWriteLock   lock = new InterProcessReadWriteLock(client, \"/lock\");\n            lock.writeLock().acquire();\n            Assert.assertTrue(lock.readLock().acquire(5, TimeUnit.SECONDS));\n            lock.writeLock().release();\n\n            lock.readLock().release();\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessReadWriteLock.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"d5d12c88b075fd1fc51a29412b3c08918cceb983","commitMessage":"@@@Merge 'CURATOR-217' into CURATOR-3.0\n","date":"2015-08-18 10:13:37","modifiedFileCount":"40","status":"M","submitter":"Scott Blum"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testThatDowngradingRespectsThreads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            final InterProcessReadWriteLock lock = new InterProcessReadWriteLock(client, \"/lock\");\n            ExecutorService t1 = Executors.newSingleThreadExecutor();\n            ExecutorService t2 = Executors.newSingleThreadExecutor();\n\n            final CountDownLatch latch = new CountDownLatch(1);\n\n            final CountDownLatch releaseLatch = new CountDownLatch(1);\n            Future<Object> f1 = t1.submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            lock.writeLock().acquire();\n                            latch.countDown();\n                            try\n                            {\n                                releaseLatch.await();\n                            }\n                            finally\n                            {\n                                lock.writeLock().release();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            Future<Object> f2 = t2.submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            assertTrue(latch.await(10, TimeUnit.SECONDS));\n                            assertFalse(lock.readLock().acquire(5, TimeUnit.SECONDS));\n                            return null;\n                        }\n                    }\n                );\n\n            f2.get();\n            releaseLatch.countDown();\n            f1.get();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":216,"groupId":"10252","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testThatDowngradingRespectsThreads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a6/01241b183dea41300d3fa128481c1e8756a26c.src","preCode":"    public void testThatDowngradingRespectsThreads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            final InterProcessReadWriteLock lock = new InterProcessReadWriteLock(client, \"/lock\");\n            ExecutorService t1 = Executors.newSingleThreadExecutor();\n            ExecutorService t2 = Executors.newSingleThreadExecutor();\n\n            final CountDownLatch latch = new CountDownLatch(1);\n\n            final CountDownLatch releaseLatch = new CountDownLatch(1);\n            Future<Object> f1 = t1.submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            lock.writeLock().acquire();\n                            latch.countDown();\n                            try\n                            {\n                                releaseLatch.await();\n                            }\n                            finally\n                            {\n                                lock.writeLock().release();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            Future<Object> f2 = t2.submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n                            Assert.assertFalse(lock.readLock().acquire(5, TimeUnit.SECONDS));\n                            return null;\n                        }\n                    }\n                );\n\n            f2.get();\n            releaseLatch.countDown();\n            f1.get();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessReadWriteLock.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testDowngrading() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            InterProcessReadWriteLock lock = new InterProcessReadWriteLock(client, \"/lock\");\n            lock.writeLock().acquire();\n            assertTrue(lock.readLock().acquire(5, TimeUnit.SECONDS));\n            lock.writeLock().release();\n\n            lock.readLock().release();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":237,"groupId":"10252","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testDowngrading","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a6/01241b183dea41300d3fa128481c1e8756a26c.src","preCode":"    public void testDowngrading() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            InterProcessReadWriteLock lock = new InterProcessReadWriteLock(client, \"/lock\");\n            lock.writeLock().acquire();\n            Assert.assertTrue(lock.readLock().acquire(5, TimeUnit.SECONDS));\n            lock.writeLock().release();\n\n            lock.readLock().release();\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessReadWriteLock.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
