[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        Assert.assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                        try\n                        {\n                            mutex.acquire(10, TimeUnit.SECONDS);\n                            Assert.fail();\n                        }\n                        catch ( Exception e )\n                        {\n                            \r\n                        }\n                        finally\n                        {\n                            waitLatchForBar.countDown();\n                        }\n                        return null;\n                    }\n                }\n            );\n\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":311,"groupId":"1176","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReentrant2Threads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/13/c7bc8483f4f471ad49f781d86795a1ce8b3186.src","preCode":"    public void     testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n            (\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        Assert.assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                        try\n                        {\n                            mutex.acquire(10, TimeUnit.SECONDS);\n                            Assert.fail();\n                        }\n                        catch ( Exception e )\n                        {\n                            \r\n                        }\n                        finally\n                        {\n                            waitLatchForBar.countDown();\n                        }\n                        return null;\n                    }\n                }\n            );\n\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":328,"groupId":"1177","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReentrant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/13/c7bc8483f4f471ad49f781d86795a1ce8b3186.src","preCode":"    public void     testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2013-11-10 10:43:26","codes":[{"authorDate":"2013-11-10 10:43:26","commitOrder":2,"curCode":"    public void testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Assert.assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                            try\n                            {\n                                mutex.acquire(10, TimeUnit.SECONDS);\n                                Assert.fail();\n                            }\n                            catch ( Exception e )\n                            {\n                                \r\n                            }\n                            finally\n                            {\n                                waitLatchForBar.countDown();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-11-10 10:43:26","endLine":316,"groupId":"1176","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReentrant2Threads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/24/9f36c98e17e45f83f8c77bf856be4fcd2508d5.src","preCode":"    public void testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Assert.assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                            try\n                            {\n                                mutex.acquire(10, TimeUnit.SECONDS);\n                                Assert.fail();\n                            }\n                            catch ( Exception e )\n                            {\n                                \r\n                            }\n                            finally\n                            {\n                                waitLatchForBar.countDown();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2013-11-10 10:43:26","commitOrder":2,"curCode":"    public void testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-11-10 10:43:26","endLine":333,"groupId":"1177","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReentrant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/24/9f36c98e17e45f83f8c77bf856be4fcd2508d5.src","preCode":"    public void testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"aea4dd88236c44c84adc24457e84cd3eb474a0db","commitMessage":"@@@Use a more reasonable retry for better test reliability\n","date":"2013-11-10 10:43:26","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-08-18 10:13:37","commitOrder":3,"curCode":"    public void testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Assert.assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                            try\n                            {\n                                mutex.acquire(10, TimeUnit.SECONDS);\n                                Assert.fail();\n                            }\n                            catch ( Exception e )\n                            {\n                                \r\n                            }\n                            finally\n                            {\n                                waitLatchForBar.countDown();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":395,"groupId":"1176","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReentrant2Threads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f4/4d2380c574af9782015858c94ec242006c1584.src","preCode":"    public void testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Assert.assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                            try\n                            {\n                                mutex.acquire(10, TimeUnit.SECONDS);\n                                Assert.fail();\n                            }\n                            catch ( Exception e )\n                            {\n                                \r\n                            }\n                            finally\n                            {\n                                waitLatchForBar.countDown();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"},{"authorDate":"2015-08-18 10:13:37","commitOrder":3,"curCode":"    public void testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":412,"groupId":"1177","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReentrant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f4/4d2380c574af9782015858c94ec242006c1584.src","preCode":"    public void testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"M"}],"commitId":"d5d12c88b075fd1fc51a29412b3c08918cceb983","commitMessage":"@@@Merge 'CURATOR-217' into CURATOR-3.0\n","date":"2015-08-18 10:13:37","modifiedFileCount":"40","status":"M","submitter":"Scott Blum"},{"authorTime":"2020-04-19 22:10:32","codes":[{"authorDate":"2020-04-19 22:10:32","commitOrder":4,"curCode":"    public void testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Assert.assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                            try\n                            {\n                                mutex.acquire(10, TimeUnit.SECONDS);\n                                Assert.fail();\n                            }\n                            catch ( Exception e )\n                            {\n                                \r\n                            }\n                            finally\n                            {\n                                waitLatchForBar.countDown();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-04-19 22:10:32","endLine":418,"groupId":"1176","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReentrant2Threads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/6e/3b6ed782081998d5b1fb23aca400ad5f15efa9.src","preCode":"    public void testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Assert.assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                            try\n                            {\n                                mutex.acquire(10, TimeUnit.SECONDS);\n                                Assert.fail();\n                            }\n                            catch ( Exception e )\n                            {\n                                \r\n                            }\n                            finally\n                            {\n                                waitLatchForBar.countDown();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"},{"authorDate":"2020-04-19 22:10:32","commitOrder":4,"curCode":"    public void testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-04-19 22:10:32","endLine":435,"groupId":"1177","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReentrant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/6e/3b6ed782081998d5b1fb23aca400ad5f15efa9.src","preCode":"    public void testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"7770d47676d8e396ce3c5b8d087de711f320092c","commitMessage":"@@@CURATOR-567 - remove flaky cases of TestCleanState\n","date":"2020-04-19 22:10:32","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                            try\n                            {\n                                mutex.acquire(10, TimeUnit.SECONDS);\n                                fail();\n                            }\n                            catch ( Exception e )\n                            {\n                                \r\n                            }\n                            finally\n                            {\n                                waitLatchForBar.countDown();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            foo(mutex);\n            assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":423,"groupId":"10253","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testReentrant2Threads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3a/25e288bc66a8652d56422e9ccf6b411a3e5056.src","preCode":"    public void testReentrant2Threads() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            waitLatchForBar = new CountDownLatch(1);\n            countLatchForBar = new CountDownLatch(1);\n\n            final InterProcessLock mutex = makeLock(client);\n            Executors.newSingleThreadExecutor().submit\n                (\n                    new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Assert.assertTrue(countLatchForBar.await(10, TimeUnit.SECONDS));\n                            try\n                            {\n                                mutex.acquire(10, TimeUnit.SECONDS);\n                                Assert.fail();\n                            }\n                            catch ( Exception e )\n                            {\n                                \r\n                            }\n                            finally\n                            {\n                                waitLatchForBar.countDown();\n                            }\n                            return null;\n                        }\n                    }\n                );\n\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":440,"groupId":"10253","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testReentrant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3a/25e288bc66a8652d56422e9ccf6b411a3e5056.src","preCode":"    public void testReentrant() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new ExponentialBackoffRetry(100, 3));\n        client.start();\n        try\n        {\n            InterProcessLock mutex = makeLock(client);\n            foo(mutex);\n            Assert.assertFalse(mutex.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMutexBase.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
