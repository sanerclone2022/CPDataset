[{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2014-07-23 05:05:19","commitOrder":4,"curCode":"    public void testConnectionStateNewClient() throws Exception\n    {\n        Timing timing = new Timing();\n        TestingCluster cluster = new TestingCluster(3);\n        CuratorFramework client = null;\n        try\n        {\n            cluster.start();\n\n            client = CuratorFrameworkFactory.newClient(cluster.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(100));\n            client.start();\n            client.checkExists().forPath(\"/\");\n            client.close();\n            client = null;\n\n            System.out.println(\"killing 2 instances\");\n            Iterator<InstanceSpec> iterator = cluster.getInstances().iterator();\n            for ( int i = 0; i < 2; ++i )\n            {\n                cluster.killServer(iterator.next());\n            }\n\n            System.out.println(\"reconnecting client\");\n            client = CuratorFrameworkFactory.builder()\n                .connectString(cluster.getConnectString())\n                .sessionTimeoutMs(timing.session())\n                .connectionTimeoutMs(timing.connection())\n                .retryPolicy(new RetryNTimes(3, timing.milliseconds()))\n                .canBeReadOnly(true)\n                .build();\n\n            final BlockingQueue<ConnectionState> states = Queues.newLinkedBlockingQueue();\n            client.getConnectionStateListenable().addListener\n            (\n                new ConnectionStateListener()\n                {\n                    @Override\n                    public void stateChanged(CuratorFramework client, ConnectionState newState)\n                    {\n                        states.add(newState);\n                    }\n                }\n            );\n            client.start();\n\n            System.out.println(\"making api call\");\n            client.checkExists().forPath(\"/\");\n\n            ConnectionState state = states.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.assertEquals(state, ConnectionState.READ_ONLY);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(cluster);\n        }\n    }\n","date":"2014-07-23 05:05:19","endLine":114,"groupId":"655","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionStateNewClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d6/d63f8622947325d1e94831e771de4945f40f41.src","preCode":"    public void testConnectionStateNewClient() throws Exception\n    {\n        Timing timing = new Timing();\n        TestingCluster cluster = new TestingCluster(3);\n        CuratorFramework client = null;\n        try\n        {\n            cluster.start();\n\n            client = CuratorFrameworkFactory.newClient(cluster.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(100));\n            client.start();\n            client.checkExists().forPath(\"/\");\n            client.close();\n            client = null;\n\n            System.out.println(\"killing 2 instances\");\n            Iterator<InstanceSpec> iterator = cluster.getInstances().iterator();\n            for ( int i = 0; i < 2; ++i )\n            {\n                cluster.killServer(iterator.next());\n            }\n\n            System.out.println(\"reconnecting client\");\n            client = CuratorFrameworkFactory.builder()\n                .connectString(cluster.getConnectString())\n                .sessionTimeoutMs(timing.session())\n                .connectionTimeoutMs(timing.connection())\n                .retryPolicy(new RetryNTimes(3, timing.milliseconds()))\n                .canBeReadOnly(true)\n                .build();\n\n            final BlockingQueue<ConnectionState> states = Queues.newLinkedBlockingQueue();\n            client.getConnectionStateListenable().addListener\n            (\n                new ConnectionStateListener()\n                {\n                    @Override\n                    public void stateChanged(CuratorFramework client, ConnectionState newState)\n                    {\n                        states.add(newState);\n                    }\n                }\n            );\n            client.start();\n\n            System.out.println(\"making api call\");\n            client.checkExists().forPath(\"/\");\n\n            ConnectionState state = states.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.assertEquals(state, ConnectionState.READ_ONLY);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(cluster);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestReadOnly.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2014-05-23 22:46:02","commitOrder":4,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":274,"groupId":"655","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/52/897b6b2e9df38c251faddf37bbf009210d6355.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"NB"}],"commitId":"feb13e1c16de7078dfc1310d9403441d1b2dae9e","commitMessage":"@@@Test case that shows the problem\n","date":"2014-07-23 05:05:19","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2014-07-23 06:46:19","commitOrder":5,"curCode":"    public void testConnectionStateNewClient() throws Exception\n    {\n        Timing timing = new Timing();\n        TestingCluster cluster = new TestingCluster(3);\n        CuratorFramework client = null;\n        try\n        {\n            cluster.start();\n\n            client = CuratorFrameworkFactory.newClient(cluster.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(100));\n            client.start();\n            client.checkExists().forPath(\"/\");\n            client.close();\n            client = null;\n\n            Iterator<InstanceSpec> iterator = cluster.getInstances().iterator();\n            for ( int i = 0; i < 2; ++i )\n            {\n                cluster.killServer(iterator.next());\n            }\n\n            client = CuratorFrameworkFactory.builder()\n                .connectString(cluster.getConnectString())\n                .sessionTimeoutMs(timing.session())\n                .connectionTimeoutMs(timing.connection())\n                .retryPolicy(new RetryNTimes(3, timing.milliseconds()))\n                .canBeReadOnly(true)\n                .build();\n\n            final BlockingQueue<ConnectionState> states = Queues.newLinkedBlockingQueue();\n            client.getConnectionStateListenable().addListener\n            (\n                new ConnectionStateListener()\n                {\n                    @Override\n                    public void stateChanged(CuratorFramework client, ConnectionState newState)\n                    {\n                        states.add(newState);\n                    }\n                }\n            );\n            client.start();\n\n            client.checkExists().forPath(\"/\");\n\n            ConnectionState state = states.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.assertEquals(state, ConnectionState.READ_ONLY);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(cluster);\n        }\n    }\n","date":"2014-07-23 06:46:19","endLine":111,"groupId":"655","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionStateNewClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/13/ceec61dcd80c35776fba2a827a98a106e3e6e1.src","preCode":"    public void testConnectionStateNewClient() throws Exception\n    {\n        Timing timing = new Timing();\n        TestingCluster cluster = new TestingCluster(3);\n        CuratorFramework client = null;\n        try\n        {\n            cluster.start();\n\n            client = CuratorFrameworkFactory.newClient(cluster.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(100));\n            client.start();\n            client.checkExists().forPath(\"/\");\n            client.close();\n            client = null;\n\n            System.out.println(\"killing 2 instances\");\n            Iterator<InstanceSpec> iterator = cluster.getInstances().iterator();\n            for ( int i = 0; i < 2; ++i )\n            {\n                cluster.killServer(iterator.next());\n            }\n\n            System.out.println(\"reconnecting client\");\n            client = CuratorFrameworkFactory.builder()\n                .connectString(cluster.getConnectString())\n                .sessionTimeoutMs(timing.session())\n                .connectionTimeoutMs(timing.connection())\n                .retryPolicy(new RetryNTimes(3, timing.milliseconds()))\n                .canBeReadOnly(true)\n                .build();\n\n            final BlockingQueue<ConnectionState> states = Queues.newLinkedBlockingQueue();\n            client.getConnectionStateListenable().addListener\n            (\n                new ConnectionStateListener()\n                {\n                    @Override\n                    public void stateChanged(CuratorFramework client, ConnectionState newState)\n                    {\n                        states.add(newState);\n                    }\n                }\n            );\n            client.start();\n\n            System.out.println(\"making api call\");\n            client.checkExists().forPath(\"/\");\n\n            ConnectionState state = states.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.assertEquals(state, ConnectionState.READ_ONLY);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(cluster);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestReadOnly.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":5,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":274,"groupId":"655","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/52/897b6b2e9df38c251faddf37bbf009210d6355.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"N"}],"commitId":"5f5ee966569064a8d75fd19f32cb7e7a2bd7b0e1","commitMessage":"@@@removed printlns\n","date":"2014-07-23 06:46:19","modifiedFileCount":"1","status":"M","submitter":"randgalt"},{"authorTime":"2014-05-23 22:46:02","codes":[{"authorDate":"2020-03-24 04:11:18","commitOrder":6,"curCode":"    public void testConnectionStateNewClient() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = null;\n        TestingCluster cluster = createAndStartCluster(3);\n        try\n        {\n            client = CuratorFrameworkFactory.newClient(cluster.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(100));\n            client.start();\n            client.checkExists().forPath(\"/\");\n            client.close();\n            client = null;\n\n            Iterator<InstanceSpec> iterator = cluster.getInstances().iterator();\n            for ( int i = 0; i < 2; ++i )\n            {\n                cluster.killServer(iterator.next());\n            }\n\n            client = CuratorFrameworkFactory.builder()\n                .connectString(cluster.getConnectString())\n                .sessionTimeoutMs(timing.session())\n                .connectionTimeoutMs(timing.connection())\n                .retryPolicy(new RetryNTimes(3, timing.milliseconds()))\n                .canBeReadOnly(true)\n                .build();\n\n            final BlockingQueue<ConnectionState> states = Queues.newLinkedBlockingQueue();\n            client.getConnectionStateListenable().addListener\n            (\n                new ConnectionStateListener()\n                {\n                    @Override\n                    public void stateChanged(CuratorFramework client, ConnectionState newState)\n                    {\n                        states.add(newState);\n                    }\n                }\n            );\n            client.start();\n\n            client.checkExists().forPath(\"/\");\n\n            ConnectionState state = states.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.assertEquals(state, ConnectionState.READ_ONLY);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(cluster);\n        }\n    }\n","date":"2020-03-24 04:11:18","endLine":110,"groupId":"655","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionStateNewClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/b5/f90ae3fc72e8a4e5677ac4e452a4cf9f36cd3f.src","preCode":"    public void testConnectionStateNewClient() throws Exception\n    {\n        Timing timing = new Timing();\n        TestingCluster cluster = new TestingCluster(3);\n        CuratorFramework client = null;\n        try\n        {\n            cluster.start();\n\n            client = CuratorFrameworkFactory.newClient(cluster.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(100));\n            client.start();\n            client.checkExists().forPath(\"/\");\n            client.close();\n            client = null;\n\n            Iterator<InstanceSpec> iterator = cluster.getInstances().iterator();\n            for ( int i = 0; i < 2; ++i )\n            {\n                cluster.killServer(iterator.next());\n            }\n\n            client = CuratorFrameworkFactory.builder()\n                .connectString(cluster.getConnectString())\n                .sessionTimeoutMs(timing.session())\n                .connectionTimeoutMs(timing.connection())\n                .retryPolicy(new RetryNTimes(3, timing.milliseconds()))\n                .canBeReadOnly(true)\n                .build();\n\n            final BlockingQueue<ConnectionState> states = Queues.newLinkedBlockingQueue();\n            client.getConnectionStateListenable().addListener\n            (\n                new ConnectionStateListener()\n                {\n                    @Override\n                    public void stateChanged(CuratorFramework client, ConnectionState newState)\n                    {\n                        states.add(newState);\n                    }\n                }\n            );\n            client.start();\n\n            client.checkExists().forPath(\"/\");\n\n            ConnectionState state = states.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.assertEquals(state, ConnectionState.READ_ONLY);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(cluster);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestReadOnly.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2014-05-23 22:46:02","commitOrder":6,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-05-23 22:46:02","endLine":274,"groupId":"655","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/52/897b6b2e9df38c251faddf37bbf009210d6355.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener\n                (\n                    new CuratorListener()\n                    {\n                        @Override\n                        public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                        {\n                            if ( event.getType() == CuratorEventType.EXISTS )\n                            {\n                                Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                                Assert.assertNull(stat);\n\n                                client.create().inBackground(event.getContext()).forPath(\"/what\");\n                            }\n                            else if ( event.getType() == CuratorEventType.CREATE )\n                            {\n                                ((CountDownLatch)event.getContext()).countDown();\n                            }\n                        }\n                    }\n                );\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"N"}],"commitId":"f204083e3d1d887971aa6ed34cc8d7f4cd1ecb5e","commitMessage":"@@@CURATOR-564 (#351)\n\nLike was done for TestingServer.  catch startup issues for TestingCluster and then re-recreate and re-start the cluster one time. Hopefully this will make the tests more stable.\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-24 04:11:18","modifiedFileCount":"10","status":"M","submitter":"Jordan Zimmerman"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":7,"curCode":"    public void testConnectionStateNewClient() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = null;\n        TestingCluster cluster = createAndStartCluster(3);\n        try\n        {\n            client = CuratorFrameworkFactory.newClient(cluster.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(100));\n            client.start();\n            client.checkExists().forPath(\"/\");\n            client.close();\n            client = null;\n\n            Iterator<InstanceSpec> iterator = cluster.getInstances().iterator();\n            for ( int i = 0; i < 2; ++i )\n            {\n                cluster.killServer(iterator.next());\n            }\n\n            client = CuratorFrameworkFactory.builder()\n                .connectString(cluster.getConnectString())\n                .sessionTimeoutMs(timing.session())\n                .connectionTimeoutMs(timing.connection())\n                .retryPolicy(new RetryNTimes(3, timing.milliseconds()))\n                .canBeReadOnly(true)\n                .build();\n\n            final BlockingQueue<ConnectionState> states = Queues.newLinkedBlockingQueue();\n            client.getConnectionStateListenable().addListener\n            (\n                new ConnectionStateListener()\n                {\n                    @Override\n                    public void stateChanged(CuratorFramework client, ConnectionState newState)\n                    {\n                        states.add(newState);\n                    }\n                }\n            );\n            client.start();\n\n            client.checkExists().forPath(\"/\");\n\n            ConnectionState state = states.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS);\n            assertEquals(state, ConnectionState.READ_ONLY);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(cluster);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":112,"groupId":"1056","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testConnectionStateNewClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/2a/f98b26372c0f5783f236f4b3af16ee65011bc0.src","preCode":"    public void testConnectionStateNewClient() throws Exception\n    {\n        Timing timing = new Timing();\n        CuratorFramework client = null;\n        TestingCluster cluster = createAndStartCluster(3);\n        try\n        {\n            client = CuratorFrameworkFactory.newClient(cluster.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(100));\n            client.start();\n            client.checkExists().forPath(\"/\");\n            client.close();\n            client = null;\n\n            Iterator<InstanceSpec> iterator = cluster.getInstances().iterator();\n            for ( int i = 0; i < 2; ++i )\n            {\n                cluster.killServer(iterator.next());\n            }\n\n            client = CuratorFrameworkFactory.builder()\n                .connectString(cluster.getConnectString())\n                .sessionTimeoutMs(timing.session())\n                .connectionTimeoutMs(timing.connection())\n                .retryPolicy(new RetryNTimes(3, timing.milliseconds()))\n                .canBeReadOnly(true)\n                .build();\n\n            final BlockingQueue<ConnectionState> states = Queues.newLinkedBlockingQueue();\n            client.getConnectionStateListenable().addListener\n            (\n                new ConnectionStateListener()\n                {\n                    @Override\n                    public void stateChanged(CuratorFramework client, ConnectionState newState)\n                    {\n                        states.add(newState);\n                    }\n                }\n            );\n            client.start();\n\n            client.checkExists().forPath(\"/\");\n\n            ConnectionState state = states.poll(timing.forWaiting().milliseconds(), TimeUnit.MILLISECONDS);\n            Assert.assertEquals(state, ConnectionState.READ_ONLY);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n            CloseableUtils.closeQuietly(cluster);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestReadOnly.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":7,"curCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener(new CuratorListener()\n            {\n                @Override\n                public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    if ( event.getType() == CuratorEventType.EXISTS )\n                    {\n                        Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                        assertNull(stat);\n\n                        client.create().inBackground(event.getContext()).forPath(\"/what\");\n                    }\n                    else if ( event.getType() == CuratorEventType.CREATE )\n                    {\n                        ((CountDownLatch)event.getContext()).countDown();\n                    }\n                }\n            });\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":622,"groupId":"1056","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1f/da24870f488fc96f258b772f35da0396d1f2e2.src","preCode":"    public void testNestedCalls() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            client.getCuratorListenable().addListener(new CuratorListener()\n            {\n                @Override\n                public void eventReceived(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    if ( event.getType() == CuratorEventType.EXISTS )\n                    {\n                        Stat stat = client.checkExists().forPath(\"/yo/yo/yo\");\n                        Assert.assertNull(stat);\n\n                        client.create().inBackground(event.getContext()).forPath(\"/what\");\n                    }\n                    else if ( event.getType() == CuratorEventType.CREATE )\n                    {\n                        ((CountDownLatch)event.getContext()).countDown();\n                    }\n                }\n            });\n\n            CountDownLatch latch = new CountDownLatch(1);\n            client.checkExists().inBackground(latch).forPath(\"/hey\");\n            Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkEdges.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
