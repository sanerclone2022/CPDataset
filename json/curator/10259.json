[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void testCorrectWatching() throws Exception\n    {\n    \tfinal int PARTICIPANT_QTY = 10;\n    \tfinal int PARTICIPANT_ID = 2;\n    \t\n    \tList<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n             client.start();\n\n             for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n             {\n                 LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                 latch.start();\n                 latches.add(latch);\n             }\n\n             waitForALeader(latches, timing);\n             \n             \r\n             latches.get(PARTICIPANT_ID).close();\n             \n             \r\n             \r\n             Assert.assertTrue(!latches.get(PARTICIPANT_ID-1).hasLeadership());\n\t     }\n\t     finally\n\t     {\n\t    \t \r\n\t    \t latches.remove(PARTICIPANT_ID);\n\t    \t \n\t         for ( LeaderLatch latch : latches )\n\t         {\n\t             Closeables.closeQuietly(latch);\n\t         }\n\t         Closeables.closeQuietly(client);\n\t     }\n\n    }\n","date":"2013-03-08 06:54:59","endLine":175,"groupId":"973","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorrectWatching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/38/be1629efa4a86a55147286438e4c79e309d76a.src","preCode":"    public void testCorrectWatching() throws Exception\n    {\n    \tfinal int PARTICIPANT_QTY = 10;\n    \tfinal int PARTICIPANT_ID = 2;\n    \t\n    \tList<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n             client.start();\n\n             for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n             {\n                 LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                 latch.start();\n                 latches.add(latch);\n             }\n\n             waitForALeader(latches, timing);\n             \n             \r\n             latches.get(PARTICIPANT_ID).close();\n             \n             \r\n             \r\n             Assert.assertTrue(!latches.get(PARTICIPANT_ID-1).hasLeadership());\n\t     }\n\t     finally\n\t     {\n\t    \t \r\n\t    \t latches.remove(PARTICIPANT_ID);\n\t    \t \n\t         for ( LeaderLatch latch : latches )\n\t         {\n\t             Closeables.closeQuietly(latch);\n\t         }\n\t         Closeables.closeQuietly(client);\n\t     }\n\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit\n                    (\n                        new Callable<Object>()\n                        {\n                            @Override\n                            public Object call() throws Exception\n                            {\n                                Thread.sleep((int)(100 * Math.random()));\n                                latch.start();\n                                return null;\n                            }\n                        }\n                    );\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                Assert.assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    Assert.assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                Closeables.closeQuietly(latch);\n            }\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":314,"groupId":"309","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"basic","params":"(Modemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/38/be1629efa4a86a55147286438e4c79e309d76a.src","preCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit\n                    (\n                        new Callable<Object>()\n                        {\n                            @Override\n                            public Object call() throws Exception\n                            {\n                                Thread.sleep((int)(100 * Math.random()));\n                                latch.start();\n                                return null;\n                            }\n                        }\n                    );\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                Assert.assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    Assert.assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                Closeables.closeQuietly(latch);\n            }\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2014-02-04 02:55:50","codes":[{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void testCorrectWatching() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int PARTICIPANT_ID = 2;\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                latch.start();\n                latches.add(latch);\n            }\n\n            waitForALeader(latches, timing);\n\n            \r\n            latches.get(PARTICIPANT_ID).close();\n\n            \r\n            \r\n            Assert.assertTrue(!latches.get(PARTICIPANT_ID - 1).hasLeadership());\n        }\n        finally\n        {\n            \r\n            latches.remove(PARTICIPANT_ID);\n\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n\n    }\n","date":"2014-02-04 02:55:50","endLine":212,"groupId":"973","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorrectWatching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f4/b5590bec1129d1716d90be818bd35ef612e884.src","preCode":"    public void testCorrectWatching() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int PARTICIPANT_ID = 2;\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                latch.start();\n                latches.add(latch);\n            }\n\n            waitForALeader(latches, timing);\n\n            \r\n            latches.get(PARTICIPANT_ID).close();\n\n            \r\n            \r\n            Assert.assertTrue(!latches.get(PARTICIPANT_ID - 1).hasLeadership());\n        }\n        finally\n        {\n            \r\n            latches.remove(PARTICIPANT_ID);\n\n            for ( LeaderLatch latch : latches )\n            {\n                Closeables.closeQuietly(latch);\n            }\n            Closeables.closeQuietly(client);\n        }\n\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit\n                        (\n                            new Callable<Object>()\n                            {\n                                @Override\n                                public Object call() throws Exception\n                                {\n                                    Thread.sleep((int)(100 * Math.random()));\n                                    latch.start();\n                                    return null;\n                                }\n                            }\n                        );\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                Assert.assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    Assert.assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":438,"groupId":"309","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"basic","params":"(Modemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f4/b5590bec1129d1716d90be818bd35ef612e884.src","preCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit\n                        (\n                            new Callable<Object>()\n                            {\n                                @Override\n                                public Object call() throws Exception\n                                {\n                                    Thread.sleep((int)(100 * Math.random()));\n                                    latch.start();\n                                    return null;\n                                }\n                            }\n                        );\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                Assert.assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    Assert.assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                Closeables.closeQuietly(latch);\n            }\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"}],"commitId":"863eaee2f11fe930601c3da3bce386263fb552c4","commitMessage":"@@@CURATOR-85 - Guava no longer has closeQuietly(). This change adds the implementation internally to Curator\n","date":"2014-02-04 02:55:50","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-08-18 10:13:37","commitOrder":3,"curCode":"    public void testCorrectWatching() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int PARTICIPANT_ID = 2;\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                latch.start();\n                latches.add(latch);\n            }\n\n            waitForALeader(latches, timing);\n\n            \r\n            latches.get(PARTICIPANT_ID).close();\n\n            \r\n            \r\n            Assert.assertTrue(!latches.get(PARTICIPANT_ID - 1).hasLeadership());\n        }\n        finally\n        {\n            \r\n            latches.remove(PARTICIPANT_ID);\n\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":262,"groupId":"973","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorrectWatching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/37/42fb7f7c4b7851c140d2de2383638972217c29.src","preCode":"    public void testCorrectWatching() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int PARTICIPANT_ID = 2;\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                latch.start();\n                latches.add(latch);\n            }\n\n            waitForALeader(latches, timing);\n\n            \r\n            latches.get(PARTICIPANT_ID).close();\n\n            \r\n            \r\n            Assert.assertTrue(!latches.get(PARTICIPANT_ID - 1).hasLeadership());\n        }\n        finally\n        {\n            \r\n            latches.remove(PARTICIPANT_ID);\n\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2015-08-18 10:13:37","commitOrder":3,"curCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit(new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Thread.sleep((int)(100 * Math.random()));\n                            latch.start();\n                            return null;\n                        }\n                    });\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                Assert.assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    Assert.assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":714,"groupId":"309","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"basic","params":"(Modemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/37/42fb7f7c4b7851c140d2de2383638972217c29.src","preCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit(new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Thread.sleep((int)(100 * Math.random()));\n                            latch.start();\n                            return null;\n                        }\n                    });\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                Assert.assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    Assert.assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"}],"commitId":"d5d12c88b075fd1fc51a29412b3c08918cceb983","commitMessage":"@@@Merge 'CURATOR-217' into CURATOR-3.0\n","date":"2015-08-18 10:13:37","modifiedFileCount":"40","status":"M","submitter":"Scott Blum"},{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-09-26 08:22:10","commitOrder":4,"curCode":"    public void testCorrectWatching() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int PARTICIPANT_ID = 2;\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                latch.start();\n                latches.add(latch);\n                waitForALeader(latches, timing);\n            }\n\n            \r\n            latches.get(PARTICIPANT_ID).close();\n\n            \r\n            \r\n            Assert.assertTrue(!latches.get(PARTICIPANT_ID - 1).hasLeadership());\n        }\n        finally\n        {\n            \r\n            latches.remove(PARTICIPANT_ID);\n\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-09-26 08:22:10","endLine":427,"groupId":"973","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorrectWatching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/99/1e6fc4bddae820c63f45dfb418387049c97370.src","preCode":"    public void testCorrectWatching() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int PARTICIPANT_ID = 2;\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                latch.start();\n                latches.add(latch);\n            }\n\n            waitForALeader(latches, timing);\n\n            \r\n            latches.get(PARTICIPANT_ID).close();\n\n            \r\n            \r\n            Assert.assertTrue(!latches.get(PARTICIPANT_ID - 1).hasLeadership());\n        }\n        finally\n        {\n            \r\n            latches.remove(PARTICIPANT_ID);\n\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"M"},{"authorDate":"2015-08-18 10:13:37","commitOrder":4,"curCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit(new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Thread.sleep((int)(100 * Math.random()));\n                            latch.start();\n                            return null;\n                        }\n                    });\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                Assert.assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    Assert.assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":714,"groupId":"309","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"basic","params":"(Modemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/37/42fb7f7c4b7851c140d2de2383638972217c29.src","preCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit(new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Thread.sleep((int)(100 * Math.random()));\n                            latch.start();\n                            return null;\n                        }\n                    });\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                Assert.assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    Assert.assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"N"}],"commitId":"4c3c8377935f8ae2c0f24c4a1010cf4bdef4e297","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-265\n\nConflicts:\n\tcurator-framework/src/test/java/org/apache/curator/framework/imps/TestReconfiguration.java\n","date":"2015-09-26 08:22:10","modifiedFileCount":"10","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    public void testCorrectWatching() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int PARTICIPANT_ID = 2;\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                latch.start();\n                latches.add(latch);\n                waitForALeader(latches, timing);\n            }\n\n            \r\n            latches.get(PARTICIPANT_ID).close();\n\n            \r\n            \r\n            assertTrue(!latches.get(PARTICIPANT_ID - 1).hasLeadership());\n        }\n        finally\n        {\n            \r\n            latches.remove(PARTICIPANT_ID);\n\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":588,"groupId":"10259","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testCorrectWatching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d6/4e7cfee5a68697da91b22db994682480935885.src","preCode":"    public void testCorrectWatching() throws Exception\n    {\n        final int PARTICIPANT_QTY = 10;\n        final int PARTICIPANT_ID = 2;\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        final Timing timing = new Timing();\n        final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                latch.start();\n                latches.add(latch);\n                waitForALeader(latches, timing);\n            }\n\n            \r\n            latches.get(PARTICIPANT_ID).close();\n\n            \r\n            \r\n            Assert.assertTrue(!latches.get(PARTICIPANT_ID - 1).hasLeadership());\n        }\n        finally\n        {\n            \r\n            latches.remove(PARTICIPANT_ID);\n\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":5,"curCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit(new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Thread.sleep((int)(100 * Math.random()));\n                            latch.start();\n                            return null;\n                        }\n                    });\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":1040,"groupId":"10259","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"basic","params":"(Modemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d6/4e7cfee5a68697da91b22db994682480935885.src","preCode":"    private void basic(Mode mode) throws Exception\n    {\n        final int PARTICIPANT_QTY = 1;\r\n\n        List<LeaderLatch> latches = Lists.newArrayList();\n\n        Timing timing = new Timing();\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        try\n        {\n            client.start();\n\n            for ( int i = 0; i < PARTICIPANT_QTY; ++i )\n            {\n                LeaderLatch latch = new LeaderLatch(client, PATH_NAME);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    latch.start();\n                }\n                latches.add(latch);\n            }\n            if ( mode == Mode.START_IN_THREADS )\n            {\n                ExecutorService service = Executors.newFixedThreadPool(latches.size());\n                for ( final LeaderLatch latch : latches )\n                {\n                    service.submit(new Callable<Object>()\n                    {\n                        @Override\n                        public Object call() throws Exception\n                        {\n                            Thread.sleep((int)(100 * Math.random()));\n                            latch.start();\n                            return null;\n                        }\n                    });\n                }\n                service.shutdown();\n            }\n\n            while ( latches.size() > 0 )\n            {\n                List<LeaderLatch> leaders = waitForALeader(latches, timing);\n                Assert.assertEquals(leaders.size(), 1); \r\n                LeaderLatch theLeader = leaders.get(0);\n                if ( mode == Mode.START_IMMEDIATELY )\n                {\n                    Assert.assertEquals(latches.indexOf(theLeader), 0); \r\n                }\n                theLeader.close();\n                latches.remove(theLeader);\n            }\n        }\n        finally\n        {\n            for ( LeaderLatch latch : latches )\n            {\n                CloseableUtils.closeQuietly(latch);\n            }\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderLatch.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":979,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
