[{"authorTime":"2015-08-18 01:01:21","codes":[{"authorDate":"2015-04-28 06:09:46","commitOrder":2,"curCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2015-04-28 06:09:46","endLine":492,"groupId":"781","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDataWhenNodeExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1c/66271b0e313039f5bd5bcb3dedd090e56dd155.src","preCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"NB"},{"authorDate":"2015-08-18 01:01:21","commitOrder":2,"curCode":"    public void testSetUpdatedDataWhenReconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n\n            node.setData(updatedData);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n\n            server.restart();\n\n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            curator.getData().inBackground(new BackgroundCallback() {\n\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    dataUpdateLatch.countDown();\n                }\n            }).forPath(node.getActualPath());\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","date":"2015-08-18 01:01:21","endLine":579,"groupId":"781","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetUpdatedDataWhenReconnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/9f/5907a3ecef98ad48e3ea39a16224f4342b5f11.src","preCode":"    public void testSetUpdatedDataWhenReconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n\n            node.setData(updatedData);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n\n            server.restart();\n\n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            curator.getData().inBackground(new BackgroundCallback() {\n\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    dataUpdateLatch.countDown();\n                }\n            }).forPath(node.getActualPath());\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":543,"status":"B"}],"commitId":"44ee8547ef3563823c89ac9d8570a0df1b33a0a8","commitMessage":"@@@Merge 'master' into CURATOR-3.0\n","date":"2015-08-18 01:01:21","modifiedFileCount":"51","status":"M","submitter":"Scott Blum"},{"authorTime":"2015-10-11 05:49:33","codes":[{"authorDate":"2015-10-11 05:49:33","commitOrder":3,"curCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2015-10-11 05:49:33","endLine":508,"groupId":"781","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDataWhenNodeExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/fe/2dd93aecb732c5e6c3df00ead13ac4d4c3faf2.src","preCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"M"},{"authorDate":"2015-10-11 05:49:33","commitOrder":3,"curCode":"    public void testSetUpdatedDataWhenReconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n\n            node.setData(updatedData);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n\n            server.restart();\n\n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            curator.getData().inBackground(new BackgroundCallback() {\n\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    dataUpdateLatch.countDown();\n                }\n            }).forPath(node.getActualPath());\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2015-10-11 05:49:33","endLine":593,"groupId":"781","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetUpdatedDataWhenReconnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/fe/2dd93aecb732c5e6c3df00ead13ac4d4c3faf2.src","preCode":"    public void testSetUpdatedDataWhenReconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        node.start();\n        try\n        {\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n\n            node.setData(updatedData);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n\n            server.restart();\n\n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            curator.getData().inBackground(new BackgroundCallback() {\n\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    dataUpdateLatch.countDown();\n                }\n            }).forPath(node.getActualPath());\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            node.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"M"}],"commitId":"208317ab0110663745a5e8e76fd9a8bca634082e","commitMessage":"@@@Trying to make tests more reliable\n","date":"2015-10-11 05:49:33","modifiedFileCount":"4","status":"M","submitter":"randgalt"},{"authorTime":"2016-01-19 10:05:41","codes":[{"authorDate":"2016-01-19 10:05:41","commitOrder":4,"curCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2016-01-19 10:05:41","endLine":563,"groupId":"10220","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDataWhenNodeExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/15/c5f2e613bfd5da1c903a11c8f32ed059078b88.src","preCode":"    public void testSetDataWhenNodeExists() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n        curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH, \"InitialData\".getBytes());\n        \n        byte[] data = \"Hello World\".getBytes();\n             \n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, data);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), data));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"M"},{"authorDate":"2016-01-19 10:05:41","commitOrder":4,"curCode":"    public void testSetUpdatedDataWhenReconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        try\n        {\n            node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds());\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n\n            node.setData(updatedData);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n\n            server.restart();\n\n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            curator.getData().inBackground(new BackgroundCallback() {\n\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    dataUpdateLatch.countDown();\n                }\n            }).forPath(node.getActualPath());\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","date":"2016-01-19 10:05:41","endLine":650,"groupId":"10220","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetUpdatedDataWhenReconnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/15/c5f2e613bfd5da1c903a11c8f32ed059078b88.src","preCode":"    public void testSetUpdatedDataWhenReconnected() throws Exception\n    {\n        CuratorFramework curator = newCurator();\n\n        byte[] initialData = \"Hello World\".getBytes();\n        byte[] updatedData = \"Updated\".getBytes();\n\n        PersistentEphemeralNode node = new PersistentEphemeralNode(curator, PersistentEphemeralNode.Mode.EPHEMERAL, PATH, initialData);\n        try\n        {\n            node.start();\n            node.waitForInitialCreate(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), initialData));\n\n            node.setData(updatedData);\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n\n            server.restart();\n\n            final CountDownLatch dataUpdateLatch = new CountDownLatch(1);\n            curator.getData().inBackground(new BackgroundCallback() {\n\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n                    dataUpdateLatch.countDown();\n                }\n            }).forPath(node.getActualPath());\n\n            assertTrue(timing.awaitLatch(dataUpdateLatch));\n\n            assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()), updatedData));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(node);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/nodes/TestPersistentEphemeralNode.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"M"}],"commitId":"c6a22ba508f9227fe1c657f93e3cc77d8bc17e3e","commitMessage":"@@@Merge branch 'master' into CURATOR-3.0\n\nConflicts:\n\tcurator-recipes/src/main/java/org/apache/curator/framework/recipes/nodes/PersistentEphemeralNode.java\n","date":"2016-01-19 10:05:41","modifiedFileCount":"6","status":"M","submitter":"randgalt"}]
