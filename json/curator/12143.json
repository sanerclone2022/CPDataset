[{"authorTime":"2016-03-11 06:55:14","codes":[{"authorDate":"2016-03-11 06:55:14","commitOrder":5,"curCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(client, ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e);\n        }\n    }\n","date":"2016-03-11 06:55:14","endLine":228,"groupId":"1971","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<Void>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/2b/a4d71dfa5abe41abd339ba1eaf91d9729a9cc8.src","preCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(client, ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetConfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"},{"authorDate":"2016-03-11 06:55:14","commitOrder":5,"curCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace   trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    trace.commit();\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(client, operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e);\n        }\n    }\n","date":"2016-03-11 06:55:14","endLine":273,"groupId":"1100","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<String>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/72/103b982b056e662e18ef373066b1a4520444c5.src","preCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace   trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    trace.commit();\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(client, operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetDataBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"MB"}],"commitId":"062a7d750788a187f1d41df0bf0a6a5926a78d3a","commitMessage":"@@@Merge branch 'master' into CURATOR-3.0\n\nConflicts:\n\tcurator-client/pom.xml\n\tcurator-examples/pom.xml\n\tcurator-framework/pom.xml\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/CreateBuilderImpl.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/DeleteBuilderImpl.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/ExistsBuilderImpl.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/GetACLBuilderImpl.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/GetChildrenBuilderImpl.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/GetDataBuilderImpl.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/SetACLBuilderImpl.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/SetDataBuilderImpl.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/SyncBuilderImpl.java\n\tcurator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java\n\tcurator-recipes/pom.xml\n\tcurator-test/pom.xml\n\tcurator-x-discovery-server/pom.xml\n\tcurator-x-discovery/pom.xml\n\tcurator-x-rpc/pom.xml\n\tpom.xml\n","date":"2016-03-11 06:55:14","modifiedFileCount":"21","status":"M","submitter":"randgalt"},{"authorTime":"2016-04-21 09:12:31","codes":[{"authorDate":"2016-04-21 09:12:31","commitOrder":6,"curCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.checkBackroundRc(rc);\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":228,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<Void>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3a/210b855ff0096139776e0bdbda487db07683f3.src","preCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(client, ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetConfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2016-04-21 09:12:31","commitOrder":6,"curCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace   trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.checkBackroundRc(rc);\n                    trace.commit();\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","date":"2016-04-21 09:12:31","endLine":273,"groupId":"1160","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<String>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d9/37d00e0cc46cbe17cda819220933d6f81b9d84.src","preCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace   trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    trace.commit();\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(client, operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetDataBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"b1d2198a75d6e01b48789635ba648bedc542c439","commitMessage":"@@@If there's an exeption.  retries exceeded.  etc..  the watcher was still being stored in WatcherRemovealManager thus causing it to be incorrectly removed. This fix removes the watch from the WatcherRemovalmanager on exceptions.  retries exceeded.  etc.\n","date":"2016-04-21 09:12:31","modifiedFileCount":"20","status":"M","submitter":"randgalt"},{"authorTime":"2016-05-27 05:59:08","codes":[{"authorDate":"2016-05-27 05:59:08","commitOrder":7,"curCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","date":"2016-05-27 05:59:08","endLine":230,"groupId":"68","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<Void>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1a/b9043c33b3f53709229d52b7b215f7585d1f82.src","preCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.checkBackroundRc(rc);\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetConfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2016-05-27 05:59:08","commitOrder":7,"curCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace   trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.commit();\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","date":"2016-05-27 05:59:08","endLine":274,"groupId":"1160","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<String>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ba/e126c7ff61c6e79601c854f07ebdf50722b922.src","preCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace   trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.checkBackroundRc(rc);\n                    trace.commit();\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetDataBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"f59f23c703815317d4ef1d39e2b815e402d1559b","commitMessage":"@@@Reworked WatcherRemovalManager. It now stores watchers only on successful operations. This is more like how ZK does it.\nAlso.  exists watcher must be stored when there is a NoNode result.\n","date":"2016-05-27 05:59:08","modifiedFileCount":"11","status":"M","submitter":"randgalt"},{"authorTime":"2016-10-28 23:05:52","codes":[{"authorDate":"2016-05-27 05:59:08","commitOrder":8,"curCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","date":"2016-05-27 05:59:08","endLine":230,"groupId":"68","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<Void>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1a/b9043c33b3f53709229d52b7b215f7585d1f82.src","preCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetConfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"N"},{"authorDate":"2016-10-28 23:05:52","commitOrder":8,"curCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final OperationTrace   trace = client.getZookeeperClient().startAdvancedTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.setReturnCode(rc).setResponseBytesLength(data).setPath(path).setWithWatcher(watching.hasWatcher()).setStat(stat).commit();\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","date":"2016-10-28 23:05:52","endLine":274,"groupId":"1160","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<String>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/32/8119d1b70f2cf1a821a0da2e9a056db9e23dd7.src","preCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace   trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.commit();\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetDataBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"786d69587d183250b4108a9e18898ad4b2e94659","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2016-10-28 23:05:52","modifiedFileCount":"22","status":"M","submitter":"randgalt"},{"authorTime":"2017-07-18 21:16:05","codes":[{"authorDate":"2016-05-27 05:59:08","commitOrder":9,"curCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","date":"2016-05-27 05:59:08","endLine":230,"groupId":"12143","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<Void>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1a/b9043c33b3f53709229d52b7b215f7585d1f82.src","preCode":"    public void performBackgroundOperation(final OperationAndData<Void> operationAndData) throws Exception\n    {\n        try\n        {\n            final TimeTrace trace = client.getZookeeperClient().startTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.commit();\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_CONFIG, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getConfig(true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getConfig(watching.getWatcher(ZooDefs.CONFIG_NODE), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetConfigBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"N"},{"authorDate":"2017-07-18 21:16:05","commitOrder":9,"curCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final OperationTrace   trace = client.getZookeeperClient().startAdvancedTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.setReturnCode(rc).setResponseBytesLength(data).setPath(path).setWithWatcher(watching.hasWatcher()).setStat(stat).commit();\n                    if ( (responseStat != null) && (stat != null) )\n                    {\n                        DataTree.copyStat(stat, responseStat);\n                    }\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","date":"2017-07-18 21:16:05","endLine":288,"groupId":"12143","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"performBackgroundOperation","params":"(finalOperationAndData<String>operationAndData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/23/19b9d4cc2a4c8e8f0d93377e63d545a2cf3079.src","preCode":"    public void performBackgroundOperation(final OperationAndData<String> operationAndData) throws Exception\n    {\n        try\n        {\n            final OperationTrace   trace = client.getZookeeperClient().startAdvancedTracer(\"GetDataBuilderImpl-Background\");\n            AsyncCallback.DataCallback callback = new AsyncCallback.DataCallback()\n            {\n                @Override\n                public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat)\n                {\n                    watching.commitWatcher(rc, false);\n                    trace.setReturnCode(rc).setResponseBytesLength(data).setPath(path).setWithWatcher(watching.hasWatcher()).setStat(stat).commit();\n                    if ( decompress && (data != null) )\n                    {\n                        try\n                        {\n                            data = client.getCompressionProvider().decompress(path, data);\n                        }\n                        catch ( Exception e )\n                        {\n                            ThreadUtils.checkInterrupted(e);\n                            log.error(\"Decompressing for path: \" + path, e);\n                            rc = KeeperException.Code.DATAINCONSISTENCY.intValue();\n                        }\n                    }\n                    CuratorEvent event = new CuratorEventImpl(client, CuratorEventType.GET_DATA, rc, path, null, ctx, stat, data, null, null, null, null);\n                    client.processBackgroundOperation(operationAndData, event);\n                }\n            };\n            if ( watching.isWatched() )\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), true, callback, backgrounding.getContext());\n            }\n            else\n            {\n                client.getZooKeeper().getData(operationAndData.getData(), watching.getWatcher(operationAndData.getData()), callback, backgrounding.getContext());\n            }\n        }\n        catch ( Throwable e )\n        {\n            backgrounding.checkError(e, watching);\n        }\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/GetDataBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"7a60af0dddbf1e547ddb7448ce99e14341413ef0","commitMessage":"@@@Merge branch 'master' into CURATOR-421\n","date":"2017-07-18 21:16:05","modifiedFileCount":"5","status":"M","submitter":"randgalt"}]
