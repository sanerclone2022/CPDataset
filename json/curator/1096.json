[{"authorTime":"2018-12-11 01:28:01","codes":[{"authorDate":"2018-12-11 01:28:01","commitOrder":1,"curCode":"    public void testSimple() throws IOException\n    {\n        GzipCompressionProvider provider = new GzipCompressionProvider();\n        byte[] data = \"Hello, world!\".getBytes();\n        byte[] compressedData = provider.compress(null, data);\n        byte[] jdkCompressedData = jdkCompress(data);\n        Assert.assertTrue(Arrays.equals(compressedData, jdkCompressedData));\n        byte[] decompressedData = provider.decompress(null, compressedData);\n        Assert.assertTrue(Arrays.equals(decompressedData, data));\n    }\n","date":"2018-12-11 01:28:01","endLine":42,"groupId":"680","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/28/56b4dd5193fd21c5f0ca0dbfd356646b3a7c91.src","preCode":"    public void testSimple() throws IOException\n    {\n        GzipCompressionProvider provider = new GzipCompressionProvider();\n        byte[] data = \"Hello, world!\".getBytes();\n        byte[] compressedData = provider.compress(null, data);\n        byte[] jdkCompressedData = jdkCompress(data);\n        Assert.assertTrue(Arrays.equals(compressedData, jdkCompressedData));\n        byte[] decompressedData = provider.decompress(null, compressedData);\n        Assert.assertTrue(Arrays.equals(decompressedData, data));\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestGzipCompressionProvider.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2018-12-11 01:28:01","commitOrder":1,"curCode":"    public void smokeTestRandomDataWithJdk() throws IOException\n    {\n        GzipCompressionProvider provider = new GzipCompressionProvider();\n        ThreadLocalRandom random = ThreadLocalRandom.current();\n        for (int len = 1; len < 100; len++)\n        {\n            byte[] data = new byte[len];\n            for (int i = 0; i < 100; i++) {\n                byte[] compressedData = provider.compress(null, data);\n                byte[] jdkCompressedData = jdkCompress(data);\n                Assert.assertTrue(Arrays.equals(compressedData, jdkCompressedData));\n                byte[] decompressedData = provider.decompress(null, compressedData);\n                Assert.assertTrue(Arrays.equals(decompressedData, data));\n                \r\n                random.nextBytes(data);\n            }\n        }\n    }\n","date":"2018-12-11 01:28:01","endLine":114,"groupId":"680","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"smokeTestRandomDataWithJdk","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/28/56b4dd5193fd21c5f0ca0dbfd356646b3a7c91.src","preCode":"    public void smokeTestRandomDataWithJdk() throws IOException\n    {\n        GzipCompressionProvider provider = new GzipCompressionProvider();\n        ThreadLocalRandom random = ThreadLocalRandom.current();\n        for (int len = 1; len < 100; len++)\n        {\n            byte[] data = new byte[len];\n            for (int i = 0; i < 100; i++) {\n                byte[] compressedData = provider.compress(null, data);\n                byte[] jdkCompressedData = jdkCompress(data);\n                Assert.assertTrue(Arrays.equals(compressedData, jdkCompressedData));\n                byte[] decompressedData = provider.decompress(null, compressedData);\n                Assert.assertTrue(Arrays.equals(decompressedData, data));\n                \r\n                random.nextBytes(data);\n            }\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestGzipCompressionProvider.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"2a9f04aa3eb0f7d0a97e5810afa22feb58a84f06","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/curator\n","date":"2018-12-11 01:28:01","modifiedFileCount":"3","status":"B","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testSimple() throws IOException\n    {\n        GzipCompressionProvider provider = new GzipCompressionProvider();\n        byte[] data = \"Hello, world!\".getBytes();\n        byte[] compressedData = provider.compress(null, data);\n        byte[] jdkCompressedData = jdkCompress(data);\n        assertTrue(Arrays.equals(compressedData, jdkCompressedData));\n        byte[] decompressedData = provider.decompress(null, compressedData);\n        assertTrue(Arrays.equals(decompressedData, data));\n    }\n","date":"2020-10-20 21:18:25","endLine":43,"groupId":"1096","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/78/c0bb2bc0f72869758f53043948099865123b80.src","preCode":"    public void testSimple() throws IOException\n    {\n        GzipCompressionProvider provider = new GzipCompressionProvider();\n        byte[] data = \"Hello, world!\".getBytes();\n        byte[] compressedData = provider.compress(null, data);\n        byte[] jdkCompressedData = jdkCompress(data);\n        Assert.assertTrue(Arrays.equals(compressedData, jdkCompressedData));\n        byte[] decompressedData = provider.decompress(null, compressedData);\n        Assert.assertTrue(Arrays.equals(decompressedData, data));\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestGzipCompressionProvider.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void smokeTestRandomDataWithJdk() throws IOException\n    {\n        GzipCompressionProvider provider = new GzipCompressionProvider();\n        ThreadLocalRandom random = ThreadLocalRandom.current();\n        for (int len = 1; len < 100; len++)\n        {\n            byte[] data = new byte[len];\n            for (int i = 0; i < 100; i++) {\n                byte[] compressedData = provider.compress(null, data);\n                byte[] jdkCompressedData = jdkCompress(data);\n                assertTrue(Arrays.equals(compressedData, jdkCompressedData));\n                byte[] decompressedData = provider.decompress(null, compressedData);\n                assertTrue(Arrays.equals(decompressedData, data));\n                \r\n                random.nextBytes(data);\n            }\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":115,"groupId":"1096","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"smokeTestRandomDataWithJdk","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/78/c0bb2bc0f72869758f53043948099865123b80.src","preCode":"    public void smokeTestRandomDataWithJdk() throws IOException\n    {\n        GzipCompressionProvider provider = new GzipCompressionProvider();\n        ThreadLocalRandom random = ThreadLocalRandom.current();\n        for (int len = 1; len < 100; len++)\n        {\n            byte[] data = new byte[len];\n            for (int i = 0; i < 100; i++) {\n                byte[] compressedData = provider.compress(null, data);\n                byte[] jdkCompressedData = jdkCompress(data);\n                Assert.assertTrue(Arrays.equals(compressedData, jdkCompressedData));\n                byte[] decompressedData = provider.decompress(null, compressedData);\n                Assert.assertTrue(Arrays.equals(decompressedData, data));\n                \r\n                random.nextBytes(data);\n            }\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestGzipCompressionProvider.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
