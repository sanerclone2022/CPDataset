[{"authorTime":"2014-04-22 02:22:40","codes":[{"authorDate":"2014-02-23 18:05:50","commitOrder":2,"curCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            Assert.assertTrue(requeued1);\n            Assert.assertTrue(requeued2);\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2014-02-23 18:05:50","endLine":372,"groupId":"1813","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKillSessionThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/1a/e041b24ba17c61cf1a4a7c50f0c7d6ec70b9ea.src","preCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            Assert.assertTrue(requeued1);\n            Assert.assertTrue(requeued2);\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"NB"},{"authorDate":"2014-04-22 02:22:40","commitOrder":2,"curCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2014-04-22 02:22:40","endLine":473,"groupId":"48","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testKillServerThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a4/ae2ba6752e5a9d57aeb5e65df3dee3fdae8620.src","preCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"B"}],"commitId":"62494bd639bf02ed3f654b98270a3c082902f923","commitMessage":"@@@Major issue! Thread that was canceled due to CancelLeadershipException was getting re-used and thus exiting immediately. Instead.  a new thread from the pool should be used\n","date":"2014-04-22 02:22:40","modifiedFileCount":"2","status":"M","submitter":"randgalt"},{"authorTime":"2014-04-22 02:22:40","codes":[{"authorDate":"2017-07-22 03:27:07","commitOrder":3,"curCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            KillSession2.kill(client.getZookeeperClient().getZooKeeper());\n\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            Assert.assertTrue(requeued1);\n            Assert.assertTrue(requeued2);\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2017-07-22 03:27:07","endLine":535,"groupId":"421","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testKillSessionThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/80/8ff8fa86676e6f6ac6b0cd242612a916b03107.src","preCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            Assert.assertTrue(requeued1);\n            Assert.assertTrue(requeued2);\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"},{"authorDate":"2014-04-22 02:22:40","commitOrder":3,"curCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2014-04-22 02:22:40","endLine":473,"groupId":"48","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testKillServerThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a4/ae2ba6752e5a9d57aeb5e65df3dee3fdae8620.src","preCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"N"}],"commitId":"31d7f9a2040975dee08cb685d61cceb7015f9e32","commitMessage":"@@@Merge branch 'master' into CURATOR-426\n","date":"2017-07-22 03:27:07","modifiedFileCount":"35","status":"M","submitter":"randgalt"},{"authorTime":"2014-04-22 02:22:40","codes":[{"authorDate":"2019-02-11 20:47:18","commitOrder":4,"curCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            Compatibility.injectSessionExpiration(client.getZookeeperClient().getZooKeeper());\n\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            Assert.assertTrue(requeued1);\n            Assert.assertTrue(requeued2);\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2019-02-11 20:47:18","endLine":579,"groupId":"421","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testKillSessionThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/b9/2c3a20e41011308066c52401f7d3f397aa2405.src","preCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            KillSession2.kill(client.getZookeeperClient().getZooKeeper());\n\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            Assert.assertTrue(requeued1);\n            Assert.assertTrue(requeued2);\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"M"},{"authorDate":"2014-04-22 02:22:40","commitOrder":4,"curCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2014-04-22 02:22:40","endLine":473,"groupId":"48","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testKillServerThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a4/ae2ba6752e5a9d57aeb5e65df3dee3fdae8620.src","preCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"N"}],"commitId":"973cb0ba6825efca27095e56948af6a3c8455abe","commitMessage":"@@@Merge branch 'CURATOR-498'\n","date":"2019-02-11 20:47:18","modifiedFileCount":"22","status":"M","submitter":"randgalt"},{"authorTime":"2014-04-22 02:22:40","codes":[{"authorDate":"2020-03-15 07:13:56","commitOrder":5,"curCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            Assert.assertTrue(requeued1);\n            Assert.assertTrue(requeued2);\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2020-03-15 07:13:56","endLine":578,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testKillSessionThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3b/054a2ddc5f3564984836d74c20f4bbc9703ee6.src","preCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            Compatibility.injectSessionExpiration(client.getZookeeperClient().getZooKeeper());\n\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            Assert.assertTrue(requeued1);\n            Assert.assertTrue(requeued2);\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":486,"status":"M"},{"authorDate":"2014-04-22 02:22:40","commitOrder":5,"curCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2014-04-22 02:22:40","endLine":473,"groupId":"48","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testKillServerThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a4/ae2ba6752e5a9d57aeb5e65df3dee3fdae8620.src","preCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"N"}],"commitId":"d1a9234ecae47e3704037c839e6041931c24d1f4","commitMessage":"@@@CURATOR-558 (#344)\n\nPt1 of change\n\n* Remove the ZK 3.4 compatibility module and code\n* Remove the deprecated ListenerContainer that leaks Guava classes into our APIs\n* Remove Exhibitor support\n* Various minor changes/cleanups\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-15 07:13:56","modifiedFileCount":"45","status":"M","submitter":"Jordan Zimmerman"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":6,"curCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n\n            assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            assertTrue(requeued1);\n            assertTrue(requeued2);\n\n            assertTrue(timing.acquireSemaphore(semaphore, 1));\n            assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            assertTrue(timing.acquireSemaphore(semaphore, 1));\n            assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":582,"groupId":"10256","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testKillSessionThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/44/e026900c0bf9a13816fc4667ba1db44f82fb06.src","preCode":"    public void testKillSessionThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            boolean requeued1 = leaderSelector1.requeue();\n            boolean requeued2 = leaderSelector2.requeue();\n            Assert.assertTrue(requeued1);\n            Assert.assertTrue(requeued2);\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":6,"curCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            assertTrue(timing.acquireSemaphore(semaphore, 1));\n            assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            assertTrue(timing.acquireSemaphore(semaphore, 1));\n            assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":683,"groupId":"10256","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testKillServerThenCloseShouldElectNewLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/44/e026900c0bf9a13816fc4667ba1db44f82fb06.src","preCode":"    public void testKillServerThenCloseShouldElectNewLeader() throws Exception\n    {\n        final Timing timing = new Timing();\n\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final Semaphore semaphore = new Semaphore(0);\n            final CountDownLatch interruptedLatch = new CountDownLatch(1);\n            final AtomicInteger leaderCount = new AtomicInteger(0);\n            LeaderSelectorListener listener = new LeaderSelectorListenerAdapter()\n            {\n                @Override\n                public void takeLeadership(CuratorFramework client) throws Exception\n                {\n                    leaderCount.incrementAndGet();\n                    try\n                    {\n                        semaphore.release();\n                        try\n                        {\n                            Thread.currentThread().join();\n                        }\n                        catch ( InterruptedException e )\n                        {\n                            Thread.currentThread().interrupt();\n                            interruptedLatch.countDown();\n                        }\n                    }\n                    finally\n                    {\n                        leaderCount.decrementAndGet();\n                    }\n                }\n            };\n            LeaderSelector leaderSelector1 = new LeaderSelector(client, PATH_NAME, listener);\n            LeaderSelector leaderSelector2 = new LeaderSelector(client, PATH_NAME, listener);\n\n            boolean leaderSelector1Closed = false;\n            boolean leaderSelector2Closed = false;\n\n            leaderSelector1.autoRequeue();\n            leaderSelector2.autoRequeue();\n\n            leaderSelector1.start();\n            leaderSelector2.start();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n\n            int port = server.getPort();\n            server.stop();\n            timing.sleepABit();\n            server = new TestingServer(port);\n            Assert.assertTrue(timing.awaitLatch(interruptedLatch));\n            timing.sleepABit();\n\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( leaderSelector1.hasLeadership() )\n            {\n                leaderSelector1.close();\n                leaderSelector1Closed = true;\n            }\n            else if ( leaderSelector2.hasLeadership() )\n            {\n                leaderSelector2.close();\n                leaderSelector2Closed = true;\n            }\n            else\n            {\n                fail(\"No leaderselector has leadership!\");\n            }\n\n            \r\n            Assert.assertTrue(timing.acquireSemaphore(semaphore, 1));\n            Assert.assertEquals(leaderCount.get(), 1);\n\n            if ( !leaderSelector1Closed )\n            {\n                leaderSelector1.close();\n            }\n            if ( !leaderSelector2Closed )\n            {\n                leaderSelector2.close();\n            }\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/leader/TestLeaderSelector.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
