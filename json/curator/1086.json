[{"authorTime":"2020-03-20 09:52:43","codes":[{"authorDate":"2020-03-20 09:52:43","commitOrder":1,"curCode":"    public void testPersistentWatchInBackground() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch backgroundLatch = new CountDownLatch(1);\n            BackgroundCallback backgroundCallback = (__, ___) -> backgroundLatch.countDown();\n            CountDownLatch latch = new CountDownLatch(3);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT).inBackground(backgroundCallback).usingWatcher(watcher).forPath(\"/test/foo\");\n\n            client.create().creatingParentsIfNeeded().forPath(\"/test/foo\");\n            client.setData().forPath(\"/test/foo\", \"hey\".getBytes());\n            client.delete().forPath(\"/test/foo\");\n\n            Assert.assertTrue(timing.awaitLatch(backgroundLatch));\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-03-20 09:52:43","endLine":657,"groupId":"590","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPersistentWatchInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/26/0c2924e1b20037098436c610ba086b0705eb48.src","preCode":"    public void testPersistentWatchInBackground() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch backgroundLatch = new CountDownLatch(1);\n            BackgroundCallback backgroundCallback = (__, ___) -> backgroundLatch.countDown();\n            CountDownLatch latch = new CountDownLatch(3);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT).inBackground(backgroundCallback).usingWatcher(watcher).forPath(\"/test/foo\");\n\n            client.create().creatingParentsIfNeeded().forPath(\"/test/foo\");\n            client.setData().forPath(\"/test/foo\", \"hey\".getBytes());\n            client.delete().forPath(\"/test/foo\");\n\n            Assert.assertTrue(timing.awaitLatch(backgroundLatch));\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatchesBuilder.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"B"},{"authorDate":"2020-03-20 09:52:43","commitOrder":1,"curCode":"    public void testPersistentRecursiveWatchInBackground() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch backgroundLatch = new CountDownLatch(1);\n            BackgroundCallback backgroundCallback = (__, ___) -> backgroundLatch.countDown();\n            CountDownLatch latch = new CountDownLatch(5);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT_RECURSIVE).inBackground(backgroundCallback).usingWatcher(watcher).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            Assert.assertTrue(timing.awaitLatch(backgroundLatch));\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-03-20 09:52:43","endLine":704,"groupId":"592","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPersistentRecursiveWatchInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/26/0c2924e1b20037098436c610ba086b0705eb48.src","preCode":"    public void testPersistentRecursiveWatchInBackground() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch backgroundLatch = new CountDownLatch(1);\n            BackgroundCallback backgroundCallback = (__, ___) -> backgroundLatch.countDown();\n            CountDownLatch latch = new CountDownLatch(5);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT_RECURSIVE).inBackground(backgroundCallback).usingWatcher(watcher).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            Assert.assertTrue(timing.awaitLatch(backgroundLatch));\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatchesBuilder.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":682,"status":"B"}],"commitId":"d65669b64f003326c98843b32b997e3ffab1e442","commitMessage":"@@@CURATOR-549 (#334)\n\nSupport persistent watchers in ZK 3.6+ while maintaining background compatibility with previous versions of ZK. Adds Curator Framework DSL calls to ZooKeeper's addWatch() method. Subsequent PRs will add recipes. Both the older Framework and the async Framework now have methods to add persistent watchers.\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-20 09:52:43","modifiedFileCount":"12","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testPersistentWatchInBackground() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch backgroundLatch = new CountDownLatch(1);\n            BackgroundCallback backgroundCallback = (__, ___) -> backgroundLatch.countDown();\n            CountDownLatch latch = new CountDownLatch(3);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT).inBackground(backgroundCallback).usingWatcher(watcher).forPath(\"/test/foo\");\n\n            client.create().creatingParentsIfNeeded().forPath(\"/test/foo\");\n            client.setData().forPath(\"/test/foo\", \"hey\".getBytes());\n            client.delete().forPath(\"/test/foo\");\n\n            assertTrue(timing.awaitLatch(backgroundLatch));\n            assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":664,"groupId":"1086","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testPersistentWatchInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/30/526506433fc4388fb9e7ed3cfaef4570c915c0.src","preCode":"    public void testPersistentWatchInBackground() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch backgroundLatch = new CountDownLatch(1);\n            BackgroundCallback backgroundCallback = (__, ___) -> backgroundLatch.countDown();\n            CountDownLatch latch = new CountDownLatch(3);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT).inBackground(backgroundCallback).usingWatcher(watcher).forPath(\"/test/foo\");\n\n            client.create().creatingParentsIfNeeded().forPath(\"/test/foo\");\n            client.setData().forPath(\"/test/foo\", \"hey\".getBytes());\n            client.delete().forPath(\"/test/foo\");\n\n            Assert.assertTrue(timing.awaitLatch(backgroundLatch));\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatchesBuilder.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testPersistentRecursiveWatchInBackground() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch backgroundLatch = new CountDownLatch(1);\n            BackgroundCallback backgroundCallback = (__, ___) -> backgroundLatch.countDown();\n            CountDownLatch latch = new CountDownLatch(5);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT_RECURSIVE).inBackground(backgroundCallback).usingWatcher(watcher).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            assertTrue(timing.awaitLatch(backgroundLatch));\n            assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":713,"groupId":"1086","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPersistentRecursiveWatchInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/30/526506433fc4388fb9e7ed3cfaef4570c915c0.src","preCode":"    public void testPersistentRecursiveWatchInBackground() throws Exception\n    {\n        try ( CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1)) )\n        {\n            client.start();\n            client.blockUntilConnected();\n\n            CountDownLatch backgroundLatch = new CountDownLatch(1);\n            BackgroundCallback backgroundCallback = (__, ___) -> backgroundLatch.countDown();\n            CountDownLatch latch = new CountDownLatch(5);\n            Watcher watcher = event -> latch.countDown();\n            client.watchers().add().withMode(AddWatchMode.PERSISTENT_RECURSIVE).inBackground(backgroundCallback).usingWatcher(watcher).forPath(\"/test\");\n\n            client.create().forPath(\"/test\");\n            client.create().forPath(\"/test/a\");\n            client.create().forPath(\"/test/a/b\");\n            client.create().forPath(\"/test/a/b/c\");\n            client.create().forPath(\"/test/a/b/c/d\");\n\n            Assert.assertTrue(timing.awaitLatch(backgroundLatch));\n            Assert.assertTrue(timing.awaitLatch(latch));\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatchesBuilder.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":691,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
