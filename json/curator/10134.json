[{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-08-18 10:13:37","commitOrder":2,"curCode":"    public void testGuaranteedDeleteOnNonExistentNodeInForeground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        \n        final AtomicBoolean pathAdded = new AtomicBoolean(false);\n        \n        ((CuratorFrameworkImpl)client).getFailedDeleteManager().debugListener = new FailedOperationManager.FailedOperationManagerListener<String>()\n        {\n            \n            @Override\n            public void pathAddedForGuaranteedOperation(String path)\n            {\n                pathAdded.set(true);\n            }\n        };\n        \n        try\n        {\n            client.delete().guaranteed().forPath(\"/nonexistent\");\n            Assert.fail();\n        }\n        catch(NoNodeException e)\n        {\n            \r\n            Assert.assertFalse(pathAdded.get());\n        }\n        finally\n        {\n            client.close();\n        }        \n    }\n","date":"2015-08-18 10:13:37","endLine":317,"groupId":"1845","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGuaranteedDeleteOnNonExistentNodeInForeground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/94/3529fd2ca51b97cf80f517b822a45a150da988.src","preCode":"    public void testGuaranteedDeleteOnNonExistentNodeInForeground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        \n        final AtomicBoolean pathAdded = new AtomicBoolean(false);\n        \n        ((CuratorFrameworkImpl)client).getFailedDeleteManager().debugListener = new FailedOperationManager.FailedOperationManagerListener<String>()\n        {\n            \n            @Override\n            public void pathAddedForGuaranteedOperation(String path)\n            {\n                pathAdded.set(true);\n            }\n        };\n        \n        try\n        {\n            client.delete().guaranteed().forPath(\"/nonexistent\");\n            Assert.fail();\n        }\n        catch(NoNodeException e)\n        {\n            \r\n            Assert.assertFalse(pathAdded.get());\n        }\n        finally\n        {\n            client.close();\n        }        \n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFailedDeleteManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"MB"},{"authorDate":"2015-08-18 10:13:37","commitOrder":2,"curCode":"    public void testGuaranteedDeleteOnNonExistentNodeInBackground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        \n        final AtomicBoolean pathAdded = new AtomicBoolean(false);\n        \n        ((CuratorFrameworkImpl)client).getFailedDeleteManager().debugListener = new FailedOperationManager.FailedOperationManagerListener<String>()\n        {\n            \n            @Override\n            public void pathAddedForGuaranteedOperation(String path)\n            {\n                pathAdded.set(true);\n            }\n        };\n        \n        final CountDownLatch backgroundLatch = new CountDownLatch(1);\n        \n        BackgroundCallback background = new BackgroundCallback()\n        {\n            \n            @Override\n            public void processResult(CuratorFramework client, CuratorEvent event)\n                    throws Exception\n            {\n                backgroundLatch.countDown();\n            }\n        };\n        \n        try\n        {\n            client.delete().guaranteed().inBackground(background).forPath(\"/nonexistent\");\n            \n            backgroundLatch.await();\n            \n            \r\n            Assert.assertFalse(pathAdded.get());\n        }\n        finally\n        {\n            client.close();\n        }        \n    }    \n","date":"2015-08-18 10:13:37","endLine":363,"groupId":"1848","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGuaranteedDeleteOnNonExistentNodeInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/94/3529fd2ca51b97cf80f517b822a45a150da988.src","preCode":"    public void testGuaranteedDeleteOnNonExistentNodeInBackground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        \n        final AtomicBoolean pathAdded = new AtomicBoolean(false);\n        \n        ((CuratorFrameworkImpl)client).getFailedDeleteManager().debugListener = new FailedOperationManager.FailedOperationManagerListener<String>()\n        {\n            \n            @Override\n            public void pathAddedForGuaranteedOperation(String path)\n            {\n                pathAdded.set(true);\n            }\n        };\n        \n        final CountDownLatch backgroundLatch = new CountDownLatch(1);\n        \n        BackgroundCallback background = new BackgroundCallback()\n        {\n            \n            @Override\n            public void processResult(CuratorFramework client, CuratorEvent event)\n                    throws Exception\n            {\n                backgroundLatch.countDown();\n            }\n        };\n        \n        try\n        {\n            client.delete().guaranteed().inBackground(background).forPath(\"/nonexistent\");\n            \n            backgroundLatch.await();\n            \n            \r\n            Assert.assertFalse(pathAdded.get());\n        }\n        finally\n        {\n            client.close();\n        }        \n    }    \n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFailedDeleteManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"MB"}],"commitId":"d5d12c88b075fd1fc51a29412b3c08918cceb983","commitMessage":"@@@Merge 'CURATOR-217' into CURATOR-3.0\n","date":"2015-08-18 10:13:37","modifiedFileCount":"40","status":"M","submitter":"Scott Blum"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testGuaranteedDeleteOnNonExistentNodeInForeground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        \n        final AtomicBoolean pathAdded = new AtomicBoolean(false);\n        \n        ((CuratorFrameworkImpl)client).getFailedDeleteManager().debugListener = new FailedOperationManager.FailedOperationManagerListener<String>()\n        {\n            \n            @Override\n            public void pathAddedForGuaranteedOperation(String path)\n            {\n                pathAdded.set(true);\n            }\n        };\n        \n        try\n        {\n            client.delete().guaranteed().forPath(\"/nonexistent\");\n            fail();\n        }\n        catch(NoNodeException e)\n        {\n            \r\n            assertFalse(pathAdded.get());\n        }\n        finally\n        {\n            client.close();\n        }        \n    }\n","date":"2020-10-20 21:18:25","endLine":322,"groupId":"10134","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGuaranteedDeleteOnNonExistentNodeInForeground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/4c/e804a49ed34313a93822f841d5eef8733588d2.src","preCode":"    public void testGuaranteedDeleteOnNonExistentNodeInForeground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        \n        final AtomicBoolean pathAdded = new AtomicBoolean(false);\n        \n        ((CuratorFrameworkImpl)client).getFailedDeleteManager().debugListener = new FailedOperationManager.FailedOperationManagerListener<String>()\n        {\n            \n            @Override\n            public void pathAddedForGuaranteedOperation(String path)\n            {\n                pathAdded.set(true);\n            }\n        };\n        \n        try\n        {\n            client.delete().guaranteed().forPath(\"/nonexistent\");\n            Assert.fail();\n        }\n        catch(NoNodeException e)\n        {\n            \r\n            Assert.assertFalse(pathAdded.get());\n        }\n        finally\n        {\n            client.close();\n        }        \n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFailedDeleteManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testGuaranteedDeleteOnNonExistentNodeInBackground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        \n        final AtomicBoolean pathAdded = new AtomicBoolean(false);\n        \n        ((CuratorFrameworkImpl)client).getFailedDeleteManager().debugListener = new FailedOperationManager.FailedOperationManagerListener<String>()\n        {\n            \n            @Override\n            public void pathAddedForGuaranteedOperation(String path)\n            {\n                pathAdded.set(true);\n            }\n        };\n        \n        final CountDownLatch backgroundLatch = new CountDownLatch(1);\n        \n        BackgroundCallback background = new BackgroundCallback()\n        {\n            \n            @Override\n            public void processResult(CuratorFramework client, CuratorEvent event)\n                    throws Exception\n            {\n                backgroundLatch.countDown();\n            }\n        };\n        \n        try\n        {\n            client.delete().guaranteed().inBackground(background).forPath(\"/nonexistent\");\n            \n            backgroundLatch.await();\n            \n            \r\n            assertFalse(pathAdded.get());\n        }\n        finally\n        {\n            client.close();\n        }        \n    }    \n","date":"2020-10-20 21:18:25","endLine":368,"groupId":"10134","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testGuaranteedDeleteOnNonExistentNodeInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/4c/e804a49ed34313a93822f841d5eef8733588d2.src","preCode":"    public void testGuaranteedDeleteOnNonExistentNodeInBackground() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        \n        final AtomicBoolean pathAdded = new AtomicBoolean(false);\n        \n        ((CuratorFrameworkImpl)client).getFailedDeleteManager().debugListener = new FailedOperationManager.FailedOperationManagerListener<String>()\n        {\n            \n            @Override\n            public void pathAddedForGuaranteedOperation(String path)\n            {\n                pathAdded.set(true);\n            }\n        };\n        \n        final CountDownLatch backgroundLatch = new CountDownLatch(1);\n        \n        BackgroundCallback background = new BackgroundCallback()\n        {\n            \n            @Override\n            public void processResult(CuratorFramework client, CuratorEvent event)\n                    throws Exception\n            {\n                backgroundLatch.countDown();\n            }\n        };\n        \n        try\n        {\n            client.delete().guaranteed().inBackground(background).forPath(\"/nonexistent\");\n            \n            backgroundLatch.await();\n            \n            \r\n            Assert.assertFalse(pathAdded.get());\n        }\n        finally\n        {\n            client.close();\n        }        \n    }    \n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFailedDeleteManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
