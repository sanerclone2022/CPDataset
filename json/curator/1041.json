[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2013-03-08 06:54:59","endLine":66,"groupId":"1389","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d5/03b7da59655a9a814f63a62b069cffb0cc6413.src","preCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2013-03-08 06:54:59","endLine":125,"groupId":"1738","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimultaneous","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d5/03b7da59655a9a814f63a62b069cffb0cc6413.src","preCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2015-09-01 21:27:31","codes":[{"authorDate":"2015-09-01 21:27:31","commitOrder":2,"curCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new ClassicConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2015-09-01 21:27:31","endLine":72,"groupId":"1389","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/59/c30ac6e303ca30244cb77a1f5bf24bd2c89cd5.src","preCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2015-09-01 21:27:31","commitOrder":2,"curCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new ClassicConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2015-09-01 21:27:31","endLine":132,"groupId":"1738","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimultaneous","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/59/c30ac6e303ca30244cb77a1f5bf24bd2c89cd5.src","preCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"c117b0853b5779829ff732514aedd7d60b696ccc","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-248\n\nConflicts:\n\tcurator-framework/src/main/java/org/apache/curator/framework/CuratorFrameworkFactory.java\n\tcurator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java\n","date":"2015-09-01 21:27:31","modifiedFileCount":"26","status":"M","submitter":"randgalt"},{"authorTime":"2017-07-24 12:56:20","codes":[{"authorDate":"2017-07-24 12:56:20","commitOrder":3,"curCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new StandardConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2017-07-24 12:56:20","endLine":72,"groupId":"1389","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ba/37d60ba5e648973811d89fb6dd222726c54615.src","preCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new ClassicConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2017-07-24 12:56:20","commitOrder":3,"curCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new StandardConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2017-07-24 12:56:20","endLine":132,"groupId":"1738","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimultaneous","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ba/37d60ba5e648973811d89fb6dd222726c54615.src","preCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new ClassicConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"15eb063fa22569e797f850fb8d60a0949f52fbf5","commitMessage":"@@@Removed Classic connection handling as it's old.  hard to maintain.  forces us to run tests twice and isn't even what users expect.\n","date":"2017-07-24 12:56:20","modifiedFileCount":"12","status":"M","submitter":"randgalt"},{"authorTime":"2020-02-20 11:27:10","codes":[{"authorDate":"2020-02-20 11:27:10","commitOrder":4,"curCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new StandardConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2020-02-20 11:27:10","endLine":72,"groupId":"1389","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/8e/ed2bf1040fdb8fe5fe25a1356eb5053562b287.src","preCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new StandardConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-02-20 11:27:10","commitOrder":4,"curCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new StandardConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2020-02-20 11:27:10","endLine":132,"groupId":"1738","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimultaneous","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/8e/ed2bf1040fdb8fe5fe25a1356eb5053562b287.src","preCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoop(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new StandardConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"959c1ca34f6ebcb11370180dfafbd8e85320dcd2","commitMessage":"@@@CURATOR-559 (#346)\n\nThe retry loop mechanism ended up getting nested multiple times causing exponential calls to the retry policy and violating a given policy's limits. Use a thread local to mitigate this so that a retry loop is reused for nested API calls.  etc.","date":"2020-02-20 11:27:10","modifiedFileCount":"4","status":"M","submitter":"Jordan Zimmerman"},{"authorTime":"2020-03-11 00:25:13","codes":[{"authorDate":"2020-03-11 00:25:13","commitOrder":5,"curCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2020-03-15 02:04:39","endLine":70,"groupId":"1389","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/51/64bac7fdcfe34693257bd46b886d584c254cd1.src","preCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new StandardConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-03-11 00:25:13","commitOrder":5,"curCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2020-03-15 02:04:39","endLine":129,"groupId":"1738","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimultaneous","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/51/64bac7fdcfe34693257bd46b886d584c254cd1.src","preCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getConnectionHandlingPolicy()).thenReturn(new StandardConnectionHandlingPolicy());\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"009bfc46dbe055334feec5fefced88e5c44225e8","commitMessage":"@@@CURATOR-562 - Remove ConnectionHandlingPolicy - flatten out behavior to match old StandardConnectionHandlingPolicy - closes #348\n","date":"2020-03-15 02:04:39","modifiedFileCount":"9","status":"M","submitter":"tison"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-03-11 00:25:13","commitOrder":6,"curCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2020-03-15 02:04:39","endLine":70,"groupId":"1041","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/51/64bac7fdcfe34693257bd46b886d584c254cd1.src","preCode":"    public void    testBasic() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        Stat                    fakeStat = mock(Stat.class);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenReturn(fakeStat);\n        \n        EnsurePath      ensurePath = new EnsurePath(\"/one/two/three\");\n        ensurePath.ensure(curator);\n\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2020-10-20 21:18:25","commitOrder":6,"curCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","date":"2020-10-20 21:18:25","endLine":129,"groupId":"1041","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testSimultaneous","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/21/d65c9bb1f77bbe44a27691b18cd75a8478f004.src","preCode":"    public void    testSimultaneous() throws Exception\n    {\n        ZooKeeper               client = mock(ZooKeeper.class, Mockito.RETURNS_MOCKS);\n        RetryPolicy             retryPolicy = new RetryOneTime(1);\n        RetryLoop               retryLoop = new RetryLoopImpl(retryPolicy, null);\n        final CuratorZookeeperClient  curator = mock(CuratorZookeeperClient.class);\n        when(curator.getZooKeeper()).thenReturn(client);\n        when(curator.getRetryPolicy()).thenReturn(retryPolicy);\n        when(curator.newRetryLoop()).thenReturn(retryLoop);\n\n        final Stat              fakeStat = mock(Stat.class);\n        final CountDownLatch    startedLatch = new CountDownLatch(2);\n        final CountDownLatch    finishedLatch = new CountDownLatch(2);\n        final Semaphore         semaphore = new Semaphore(0);\n        when(client.exists(Mockito.<String>any(), anyBoolean())).thenAnswer\n        (\n            new Answer<Stat>()\n            {\n                @Override\n                public Stat answer(InvocationOnMock invocation) throws Throwable\n                {\n                    semaphore.acquire();\n                    return fakeStat;\n                }\n            }\n        );\n\n        final EnsurePath    ensurePath = new EnsurePath(\"/one/two/three\");\n        ExecutorService     service = Executors.newCachedThreadPool();\n        for ( int i = 0; i < 2; ++i )\n        {\n            service.submit\n            (\n                new Callable<Void>()\n                {\n                    @Override\n                    public Void call() throws Exception\n                    {\n                        startedLatch.countDown();\n                        ensurePath.ensure(curator);\n                        finishedLatch.countDown();\n                        return null;\n                    }\n                }\n            );\n        }\n\n        Assert.assertTrue(startedLatch.await(10, TimeUnit.SECONDS));\n        semaphore.release(3);\n        Assert.assertTrue(finishedLatch.await(10, TimeUnit.SECONDS));\n        verify(client, times(3)).exists(Mockito.<String>any(), anyBoolean());\n\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n        ensurePath.ensure(curator);\n        verifyNoMoreInteractions(client);\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestEnsurePath.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
