[{"authorTime":"2016-05-25 13:32:52","codes":[{"authorDate":"2017-04-03 23:54:50","commitOrder":3,"curCode":"    public void testErrorListener() throws Exception\n    {\n        \r\n        \r\n        \r\n        final AtomicBoolean aclProviderCalled = new AtomicBoolean(false);\n        \n        ACLProvider badAclProvider = new ACLProvider()\n        {\n            @Override\n            public List<ACL> getDefaultAcl()\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n\n            @Override\n            public List<ACL> getAclForPath(String path)\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n        };\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .retryPolicy(new RetryOneTime(1))\n            .aclProvider(badAclProvider)\n            .build();\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch errorLatch = new CountDownLatch(1);\n            UnhandledErrorListener listener = (message, e) -> {\n                if ( e instanceof UnsupportedOperationException )\n                {\n                    errorLatch.countDown();\n                }\n            };\n            async.with(listener).create().forPath(\"/foo\");\n            Assert.assertTrue(new Timing().awaitLatch(errorLatch));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-04-03 23:54:50","endLine":111,"groupId":"658","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testErrorListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c0/0febd415d4eef410d35a665abc877fa22f65c1.src","preCode":"    public void testErrorListener() throws Exception\n    {\n        \r\n        \r\n        \r\n        final AtomicBoolean aclProviderCalled = new AtomicBoolean(false);\n        \n        ACLProvider badAclProvider = new ACLProvider()\n        {\n            @Override\n            public List<ACL> getDefaultAcl()\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n\n            @Override\n            public List<ACL> getAclForPath(String path)\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n        };\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .retryPolicy(new RetryOneTime(1))\n            .aclProvider(badAclProvider)\n            .build();\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch errorLatch = new CountDownLatch(1);\n            UnhandledErrorListener listener = (message, e) -> {\n                if ( e instanceof UnsupportedOperationException )\n                {\n                    errorLatch.countDown();\n                }\n            };\n            async.with(listener).create().forPath(\"/foo\");\n            Assert.assertTrue(new Timing().awaitLatch(errorLatch));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"},{"authorDate":"2016-05-25 13:32:52","commitOrder":3,"curCode":"    public void testErrorListener() throws Exception\n    {\n        \r\n        \r\n        \r\n        final AtomicBoolean aclProviderCalled = new AtomicBoolean(false);\n        \n        ACLProvider badAclProvider = new ACLProvider()\n        {\n            @Override\n            public List<ACL> getDefaultAcl()\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n\n            @Override\n            public List<ACL> getAclForPath(String path)\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n        };\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .retryPolicy(new RetryOneTime(1))\n            .aclProvider(badAclProvider)\n            .build();\n        try\n        {\n            client.start();\n\n            final CountDownLatch errorLatch = new CountDownLatch(1);\n            UnhandledErrorListener listener = new UnhandledErrorListener()\n            {\n                @Override\n                public void unhandledError(String message, Throwable e)\n                {\n                    if ( e instanceof UnsupportedOperationException )\n                    {\n                        errorLatch.countDown();\n                    }\n                }\n            };\n            client.create().inBackground().withUnhandledErrorListener(listener).forPath(\"/foo\");\n            Assert.assertTrue(new Timing().awaitLatch(errorLatch));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2016-05-25 13:32:52","endLine":121,"groupId":"658","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c6/2a2998facf1f3a93aead57b9551a1b6bbbb66e.src","preCode":"    public void testErrorListener() throws Exception\n    {\n        \r\n        \r\n        \r\n        final AtomicBoolean aclProviderCalled = new AtomicBoolean(false);\n        \n        ACLProvider badAclProvider = new ACLProvider()\n        {\n            @Override\n            public List<ACL> getDefaultAcl()\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n\n            @Override\n            public List<ACL> getAclForPath(String path)\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n        };\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .retryPolicy(new RetryOneTime(1))\n            .aclProvider(badAclProvider)\n            .build();\n        try\n        {\n            client.start();\n\n            final CountDownLatch errorLatch = new CountDownLatch(1);\n            UnhandledErrorListener listener = new UnhandledErrorListener()\n            {\n                @Override\n                public void unhandledError(String message, Throwable e)\n                {\n                    if ( e instanceof UnsupportedOperationException )\n                    {\n                        errorLatch.countDown();\n                    }\n                }\n            };\n            client.create().inBackground().withUnhandledErrorListener(listener).forPath(\"/foo\");\n            Assert.assertTrue(new Timing().awaitLatch(errorLatch));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"NB"}],"commitId":"1826b66d72f6e543a57aaf5f3acc3cd9ca6e965d","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2017-04-03 23:54:50","modifiedFileCount":"45","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testErrorListener() throws Exception\n    {\n        \r\n        \r\n        \r\n        final AtomicBoolean aclProviderCalled = new AtomicBoolean(false);\n        \n        ACLProvider badAclProvider = new ACLProvider()\n        {\n            @Override\n            public List<ACL> getDefaultAcl()\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n\n            @Override\n            public List<ACL> getAclForPath(String path)\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n        };\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .retryPolicy(new RetryOneTime(1))\n            .aclProvider(badAclProvider)\n            .build();\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch errorLatch = new CountDownLatch(1);\n            UnhandledErrorListener listener = (message, e) -> {\n                if ( e instanceof UnsupportedOperationException )\n                {\n                    errorLatch.countDown();\n                }\n            };\n            async.with(listener).create().forPath(\"/foo\");\n            assertTrue(new Timing().awaitLatch(errorLatch));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":113,"groupId":"1019","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testErrorListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c5/bdf7c0bdd0f9ba3607ad038cc59628acef1fc3.src","preCode":"    public void testErrorListener() throws Exception\n    {\n        \r\n        \r\n        \r\n        final AtomicBoolean aclProviderCalled = new AtomicBoolean(false);\n        \n        ACLProvider badAclProvider = new ACLProvider()\n        {\n            @Override\n            public List<ACL> getDefaultAcl()\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n\n            @Override\n            public List<ACL> getAclForPath(String path)\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n        };\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .retryPolicy(new RetryOneTime(1))\n            .aclProvider(badAclProvider)\n            .build();\n        try\n        {\n            client.start();\n            AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n            final CountDownLatch errorLatch = new CountDownLatch(1);\n            UnhandledErrorListener listener = (message, e) -> {\n                if ( e instanceof UnsupportedOperationException )\n                {\n                    errorLatch.countDown();\n                }\n            };\n            async.with(listener).create().forPath(\"/foo\");\n            Assert.assertTrue(new Timing().awaitLatch(errorLatch));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-async/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":4,"curCode":"    public void testErrorListener() throws Exception\n    {\n        \r\n        \r\n        \r\n        final AtomicBoolean aclProviderCalled = new AtomicBoolean(false);\n        \n        ACLProvider badAclProvider = new ACLProvider()\n        {\n            @Override\n            public List<ACL> getDefaultAcl()\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n\n            @Override\n            public List<ACL> getAclForPath(String path)\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n        };\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .retryPolicy(new RetryOneTime(1))\n            .aclProvider(badAclProvider)\n            .build();\n        try\n        {\n            client.start();\n\n            final CountDownLatch errorLatch = new CountDownLatch(1);\n            UnhandledErrorListener listener = new UnhandledErrorListener()\n            {\n                @Override\n                public void unhandledError(String message, Throwable e)\n                {\n                    if ( e instanceof UnsupportedOperationException )\n                    {\n                        errorLatch.countDown();\n                    }\n                }\n            };\n            client.create().inBackground().withUnhandledErrorListener(listener).forPath(\"/foo\");\n            assertTrue(new Timing().awaitLatch(errorLatch));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":122,"groupId":"1019","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testErrorListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/bb/f052e4de2a326cbdf9eb48ad35b76614f73c41.src","preCode":"    public void testErrorListener() throws Exception\n    {\n        \r\n        \r\n        \r\n        final AtomicBoolean aclProviderCalled = new AtomicBoolean(false);\n        \n        ACLProvider badAclProvider = new ACLProvider()\n        {\n            @Override\n            public List<ACL> getDefaultAcl()\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n\n            @Override\n            public List<ACL> getAclForPath(String path)\n            {\n                if(aclProviderCalled.getAndSet(true))\n                {\n                    throw new UnsupportedOperationException();\n                }\n                else\n                {\n                    return new ArrayList<>();\n                }\n            }\n        };\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(server.getConnectString())\n            .retryPolicy(new RetryOneTime(1))\n            .aclProvider(badAclProvider)\n            .build();\n        try\n        {\n            client.start();\n\n            final CountDownLatch errorLatch = new CountDownLatch(1);\n            UnhandledErrorListener listener = new UnhandledErrorListener()\n            {\n                @Override\n                public void unhandledError(String message, Throwable e)\n                {\n                    if ( e instanceof UnsupportedOperationException )\n                    {\n                        errorLatch.countDown();\n                    }\n                }\n            };\n            client.create().inBackground().withUnhandledErrorListener(listener).forPath(\"/foo\");\n            Assert.assertTrue(new Timing().awaitLatch(errorLatch));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestFrameworkBackground.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
