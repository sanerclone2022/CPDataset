[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testLateAddition() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + Integer.MAX_VALUE);  \r\n            Long        value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n\n            queue.put(2L, System.currentTimeMillis());\n            value = consumer.take(timing.seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(2));\n\n            value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":63,"groupId":"1481","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLateAddition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/84/257c0656b29e9a37a02fb182d8c87f6711c2f0.src","preCode":"    public void     testLateAddition() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + Integer.MAX_VALUE);  \r\n            Long        value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n\n            queue.put(2L, System.currentTimeMillis());\n            value = consumer.take(timing.seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(2));\n\n            value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedDelayQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testBasic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + 1000);\n            Thread.sleep(100);\n            Assert.assertEquals(consumer.size(), 0);    \r\n\n            Long        value = consumer.take(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(1));\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":90,"groupId":"23","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/84/257c0656b29e9a37a02fb182d8c87f6711c2f0.src","preCode":"    public void     testBasic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + 1000);\n            Thread.sleep(100);\n            Assert.assertEquals(consumer.size(), 0);    \r\n\n            Long        value = consumer.take(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(1));\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedDelayQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2014-02-04 02:55:50","codes":[{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void     testLateAddition() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + Integer.MAX_VALUE);  \r\n            Long        value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n\n            queue.put(2L, System.currentTimeMillis());\n            value = consumer.take(timing.seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(2));\n\n            value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":65,"groupId":"1481","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLateAddition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ec/ce02058389edef45bd1a70032ff824203c7182.src","preCode":"    public void     testLateAddition() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + Integer.MAX_VALUE);  \r\n            Long        value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n\n            queue.put(2L, System.currentTimeMillis());\n            value = consumer.take(timing.seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(2));\n\n            value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedDelayQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void     testBasic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + 1000);\n            Thread.sleep(100);\n            Assert.assertEquals(consumer.size(), 0);    \r\n\n            Long        value = consumer.take(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(1));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":92,"groupId":"23","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ec/ce02058389edef45bd1a70032ff824203c7182.src","preCode":"    public void     testBasic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + 1000);\n            Thread.sleep(100);\n            Assert.assertEquals(consumer.size(), 0);    \r\n\n            Long        value = consumer.take(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(1));\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedDelayQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"863eaee2f11fe930601c3da3bce386263fb552c4","commitMessage":"@@@CURATOR-85 - Guava no longer has closeQuietly(). This change adds the implementation internally to Curator\n","date":"2014-02-04 02:55:50","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void     testLateAddition() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + Integer.MAX_VALUE);  \r\n            Long        value = consumer.take(1, TimeUnit.SECONDS);\n            assertNull(value);\n\n            queue.put(2L, System.currentTimeMillis());\n            value = consumer.take(timing.seconds(), TimeUnit.SECONDS);\n            assertEquals(value, Long.valueOf(2));\n\n            value = consumer.take(1, TimeUnit.SECONDS);\n            assertNull(value);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":74,"groupId":"10180","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testLateAddition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f1/30a30d9a8ba3424d59fe4f1061330a9d8df6cf.src","preCode":"    public void     testLateAddition() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + Integer.MAX_VALUE);  \r\n            Long        value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n\n            queue.put(2L, System.currentTimeMillis());\n            value = consumer.take(timing.seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(2));\n\n            value = consumer.take(1, TimeUnit.SECONDS);\n            Assert.assertNull(value);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedDelayQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void     testBasic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + 1000);\n            Thread.sleep(100);\n            assertEquals(consumer.size(), 0);    \r\n\n            Long        value = consumer.take(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            assertEquals(value, Long.valueOf(1));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":101,"groupId":"10180","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f1/30a30d9a8ba3424d59fe4f1061330a9d8df6cf.src","preCode":"    public void     testBasic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        DistributedDelayQueue<Long>     queue = null;\n        CuratorFramework                client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<Long> consumer = new BlockingQueueConsumer<Long>(Mockito.mock(ConnectionStateListener.class));\n            queue = QueueBuilder.builder(client, consumer, new LongSerializer(), \"/test\").buildDelayQueue();\n            queue.start();\n\n            queue.put(1L, System.currentTimeMillis() + 1000);\n            Thread.sleep(100);\n            Assert.assertEquals(consumer.size(), 0);    \r\n\n            Long        value = consumer.take(timing.forWaiting().seconds(), TimeUnit.SECONDS);\n            Assert.assertEquals(value, Long.valueOf(1));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedDelayQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
