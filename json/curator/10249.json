[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void testSomeReleasesFail() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            InterProcessLock        goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            final InterProcessLock  otherGoodLock = new InterProcessMutex(client, LOCK_PATH_2);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    otherGoodLock.acquire();\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    return otherGoodLock.acquire(time, unit);\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return otherGoodLock.isAcquiredInThisProcess();\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                lock.release();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(otherGoodLock.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":92,"groupId":"1809","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSomeReleasesFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/60/2739f510bbab93397e052058360a5143c9b313.src","preCode":"    public void testSomeReleasesFail() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            InterProcessLock        goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            final InterProcessLock  otherGoodLock = new InterProcessMutex(client, LOCK_PATH_2);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    otherGoodLock.acquire();\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    return otherGoodLock.acquire(time, unit);\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return otherGoodLock.isAcquiredInThisProcess();\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                lock.release();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(otherGoodLock.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMultiMutex.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void testSomeLocksFailToLock() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final AtomicBoolean     goodLockWasLocked = new AtomicBoolean(false);\n            final InterProcessLock  goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    if ( goodLock.isAcquiredInThisProcess() )\n                    {\n                        goodLockWasLocked.set(true);\n                    }\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return false;\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(goodLockWasLocked.get());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":150,"groupId":"1232","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSomeLocksFailToLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/60/2739f510bbab93397e052058360a5143c9b313.src","preCode":"    public void testSomeLocksFailToLock() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final AtomicBoolean     goodLockWasLocked = new AtomicBoolean(false);\n            final InterProcessLock  goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    if ( goodLock.isAcquiredInThisProcess() )\n                    {\n                        goodLockWasLocked.set(true);\n                    }\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return false;\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(goodLockWasLocked.get());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMultiMutex.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-08-18 10:13:37","commitOrder":2,"curCode":"    public void testSomeReleasesFail() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            InterProcessLock        goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            final InterProcessLock  otherGoodLock = new InterProcessMutex(client, LOCK_PATH_2);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    otherGoodLock.acquire();\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    return otherGoodLock.acquire(time, unit);\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return otherGoodLock.isAcquiredInThisProcess();\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                lock.release();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n                \r\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(otherGoodLock.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":97,"groupId":"1809","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSomeReleasesFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/dc/eff88f878e3c5ac24e83fa0a6d037fc3812984.src","preCode":"    public void testSomeReleasesFail() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            InterProcessLock        goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            final InterProcessLock  otherGoodLock = new InterProcessMutex(client, LOCK_PATH_2);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    otherGoodLock.acquire();\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    return otherGoodLock.acquire(time, unit);\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return otherGoodLock.isAcquiredInThisProcess();\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                lock.release();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(otherGoodLock.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMultiMutex.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2015-08-18 10:13:37","commitOrder":2,"curCode":"    public void testSomeLocksFailToLock() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final AtomicBoolean     goodLockWasLocked = new AtomicBoolean(false);\n            final InterProcessLock  goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    if ( goodLock.isAcquiredInThisProcess() )\n                    {\n                        goodLockWasLocked.set(true);\n                    }\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return false;\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n                \r\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(goodLockWasLocked.get());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2015-08-18 10:13:37","endLine":156,"groupId":"1232","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSomeLocksFailToLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/dc/eff88f878e3c5ac24e83fa0a6d037fc3812984.src","preCode":"    public void testSomeLocksFailToLock() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final AtomicBoolean     goodLockWasLocked = new AtomicBoolean(false);\n            final InterProcessLock  goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    if ( goodLock.isAcquiredInThisProcess() )\n                    {\n                        goodLockWasLocked.set(true);\n                    }\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return false;\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(goodLockWasLocked.get());\n        }\n        finally\n        {\n            client.close();\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMultiMutex.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"d5d12c88b075fd1fc51a29412b3c08918cceb983","commitMessage":"@@@Merge 'CURATOR-217' into CURATOR-3.0\n","date":"2015-08-18 10:13:37","modifiedFileCount":"40","status":"M","submitter":"Scott Blum"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testSomeReleasesFail() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            InterProcessLock        goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            final InterProcessLock  otherGoodLock = new InterProcessMutex(client, LOCK_PATH_2);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    otherGoodLock.acquire();\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    return otherGoodLock.acquire(time, unit);\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return otherGoodLock.isAcquiredInThisProcess();\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                lock.release();\n                fail();\n            }\n            catch ( Exception e )\n            {\n                \r\n            }\n            assertFalse(goodLock.isAcquiredInThisProcess());\n            assertTrue(otherGoodLock.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":101,"groupId":"10249","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSomeReleasesFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/fa/f0f7f63e4d136567fce71e6a580697cfc5162a.src","preCode":"    public void testSomeReleasesFail() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            InterProcessLock        goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            final InterProcessLock  otherGoodLock = new InterProcessMutex(client, LOCK_PATH_2);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    otherGoodLock.acquire();\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    return otherGoodLock.acquire(time, unit);\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return otherGoodLock.isAcquiredInThisProcess();\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                lock.release();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n                \r\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(otherGoodLock.isAcquiredInThisProcess());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMultiMutex.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void testSomeLocksFailToLock() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final AtomicBoolean     goodLockWasLocked = new AtomicBoolean(false);\n            final InterProcessLock  goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    if ( goodLock.isAcquiredInThisProcess() )\n                    {\n                        goodLockWasLocked.set(true);\n                    }\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return false;\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                fail();\n            }\n            catch ( Exception e )\n            {\n                \r\n            }\n            assertFalse(goodLock.isAcquiredInThisProcess());\n            assertTrue(goodLockWasLocked.get());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":160,"groupId":"10249","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testSomeLocksFailToLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/fa/f0f7f63e4d136567fce71e6a580697cfc5162a.src","preCode":"    public void testSomeLocksFailToLock() throws IOException\n    {\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            final AtomicBoolean     goodLockWasLocked = new AtomicBoolean(false);\n            final InterProcessLock  goodLock = new InterProcessMutex(client, LOCK_PATH_1);\n            InterProcessLock        badLock = new InterProcessLock()\n            {\n                @Override\n                public void acquire() throws Exception\n                {\n                    if ( goodLock.isAcquiredInThisProcess() )\n                    {\n                        goodLockWasLocked.set(true);\n                    }\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean acquire(long time, TimeUnit unit) throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public void release() throws Exception\n                {\n                    throw new Exception(\"foo\");\n                }\n\n                @Override\n                public boolean isAcquiredInThisProcess()\n                {\n                    return false;\n                }\n            };\n\n            InterProcessMultiLock       lock = new InterProcessMultiLock(Arrays.asList(goodLock, badLock));\n            try\n            {\n                lock.acquire();\n                Assert.fail();\n            }\n            catch ( Exception e )\n            {\n                \r\n            }\n            Assert.assertFalse(goodLock.isAcquiredInThisProcess());\n            Assert.assertTrue(goodLockWasLocked.get());\n        }\n        finally\n        {\n            TestCleanState.closeAndTestClean(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/locks/TestInterProcessMultiMutex.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
