[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testEmptyServiceNames()\n    {\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.<String>newArrayList());\n    }\n","date":"2013-03-08 06:54:59","endLine":163,"groupId":"1485","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyServiceNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/2b/46ba015755e686dbd788ed055d8a103916a84e.src","preCode":"    public void     testEmptyServiceNames()\n    {\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.<String>newArrayList());\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestStringsWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceDetails         payload = new ServiceDetails();\n        payload.setDescription(\"Example description for test\");\n        payload.getData().put(\"one\", \"1\");\n        payload.getData().put(\"two\", \"2\");\n        payload.getData().put(\"three\", \"3\");\n        ServiceInstance<ServiceDetails> service = ServiceInstance.<ServiceDetails>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n\t        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<ServiceDetails>> type = new GenericType<ServiceInstances<ServiceDetails>>(){};\n        ServiceInstances<ServiceDetails>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<ServiceDetails>> singleInstanceType = new GenericType<ServiceInstance<ServiceDetails>>(){};\n        ServiceInstance<ServiceDetails>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","date":"2013-03-08 06:54:59","endLine":149,"groupId":"924","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/66/28a75dec14b795ea436e60291f39aea8f6876b.src","preCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceDetails         payload = new ServiceDetails();\n        payload.setDescription(\"Example description for test\");\n        payload.getData().put(\"one\", \"1\");\n        payload.getData().put(\"two\", \"2\");\n        payload.getData().put(\"three\", \"3\");\n        ServiceInstance<ServiceDetails> service = ServiceInstance.<ServiceDetails>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n\t        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<ServiceDetails>> type = new GenericType<ServiceInstances<ServiceDetails>>(){};\n        ServiceInstances<ServiceDetails>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<ServiceDetails>> singleInstanceType = new GenericType<ServiceInstance<ServiceDetails>>(){};\n        ServiceInstance<ServiceDetails>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestObjectPayloadWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2013-06-23 06:57:46","codes":[{"authorDate":"2013-06-23 06:57:46","commitOrder":2,"curCode":"    public void     testEmptyServiceNames()\n    {\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:\" + port);\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.<String>newArrayList());\n    }\n","date":"2013-06-23 06:57:46","endLine":166,"groupId":"668","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyServiceNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/01/2ac19635480e06b9ff516ae4eea2df8b16e2f4.src","preCode":"    public void     testEmptyServiceNames()\n    {\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.<String>newArrayList());\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestStringsWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2013-06-23 06:57:46","commitOrder":2,"curCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceDetails         payload = new ServiceDetails();\n        payload.setDescription(\"Example description for test\");\n        payload.getData().put(\"one\", \"1\");\n        payload.getData().put(\"two\", \"2\");\n        payload.getData().put(\"three\", \"3\");\n        ServiceInstance<ServiceDetails> service = ServiceInstance.<ServiceDetails>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:\" + port);\n\t        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<ServiceDetails>> type = new GenericType<ServiceInstances<ServiceDetails>>(){};\n        ServiceInstances<ServiceDetails>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<ServiceDetails>> singleInstanceType = new GenericType<ServiceInstance<ServiceDetails>>(){};\n        ServiceInstance<ServiceDetails>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","date":"2013-06-23 06:57:46","endLine":154,"groupId":"1367","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f6/dc27f6338127d82ffad47d353a221185bd396a.src","preCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceDetails         payload = new ServiceDetails();\n        payload.setDescription(\"Example description for test\");\n        payload.getData().put(\"one\", \"1\");\n        payload.getData().put(\"two\", \"2\");\n        payload.getData().put(\"three\", \"3\");\n        ServiceInstance<ServiceDetails> service = ServiceInstance.<ServiceDetails>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:8080\");\n\t        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<ServiceDetails>> type = new GenericType<ServiceInstances<ServiceDetails>>(){};\n        ServiceInstances<ServiceDetails>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<ServiceDetails>> singleInstanceType = new GenericType<ServiceInstance<ServiceDetails>>(){};\n        ServiceInstance<ServiceDetails>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestObjectPayloadWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"5ff48fcaa39b43b4a3ef1ba194ac54fa300a5339","commitMessage":"@@@Use random port instead of hard-coded to make tests more resilient\n","date":"2013-06-23 06:57:46","modifiedFileCount":"4","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void     testEmptyServiceNames()\n    {\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://\" + HOST + \":\" + port);\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        assertEquals(names.getNames(), Lists.<String>newArrayList());\n    }\n","date":"2020-10-20 21:18:25","endLine":167,"groupId":"108","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testEmptyServiceNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3e/fbc00b54a0d7bc8a43868ba4eca957cc3af21e.src","preCode":"    public void     testEmptyServiceNames()\n    {\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:\" + port);\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.<String>newArrayList());\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestStringsWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceDetails         payload = new ServiceDetails();\n        payload.setDescription(\"Example description for test\");\n        payload.getData().put(\"one\", \"1\");\n        payload.getData().put(\"two\", \"2\");\n        payload.getData().put(\"three\", \"3\");\n        ServiceInstance<ServiceDetails> service = ServiceInstance.<ServiceDetails>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://\" + HOST + \":\" + port);\n\t        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<ServiceDetails>> type = new GenericType<ServiceInstances<ServiceDetails>>(){};\n        ServiceInstances<ServiceDetails>    instances = resource.path(\"/v1/service/test\").get(type);\n        assertEquals(instances.getServices().size(), 1);\n        assertEquals(instances.getServices().get(0), service);\n        assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<ServiceDetails>> singleInstanceType = new GenericType<ServiceInstance<ServiceDetails>>(){};\n        ServiceInstance<ServiceDetails>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        assertEquals(instance, service);\n\n    }\n","date":"2020-10-20 21:18:25","endLine":151,"groupId":"108","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testRegisterService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/5e/f198374d002b22c4a086b68ecad709213d949d.src","preCode":"    public void     testRegisterService() throws Exception\n    {\n        ServiceDetails         payload = new ServiceDetails();\n        payload.setDescription(\"Example description for test\");\n        payload.getData().put(\"one\", \"1\");\n        payload.getData().put(\"two\", \"2\");\n        payload.getData().put(\"three\", \"3\");\n        ServiceInstance<ServiceDetails> service = ServiceInstance.<ServiceDetails>builder()\n            .name(\"test\")\n            .payload(payload)\n            .serviceType(ServiceType.STATIC)\n            .build();\n\n        ClientConfig    config = new DefaultClientConfig()\n        {\n            @Override\n            public Set<Object> getSingletons()\n            {\n                Set<Object>     singletons = Sets.newHashSet();\n                singletons.add(context);\n                singletons.add(serviceNamesMarshaller);\n                singletons.add(serviceInstanceMarshaller);\n                singletons.add(serviceInstancesMarshaller);\n                return singletons;\n            }\n        };\n        Client          client = Client.create(config);\n        WebResource     resource = client.resource(\"http://localhost:\" + port);\n\t        resource.path(\"/v1/service/test/\" + service.getId()).type(MediaType.APPLICATION_JSON_TYPE).put(service);\n\n        ServiceNames names = resource.path(\"/v1/service\").get(ServiceNames.class);\n        Assert.assertEquals(names.getNames(), Lists.newArrayList(\"test\"));\n\n        GenericType<ServiceInstances<ServiceDetails>> type = new GenericType<ServiceInstances<ServiceDetails>>(){};\n        ServiceInstances<ServiceDetails>    instances = resource.path(\"/v1/service/test\").get(type);\n        Assert.assertEquals(instances.getServices().size(), 1);\n        Assert.assertEquals(instances.getServices().get(0), service);\n        Assert.assertEquals(instances.getServices().get(0).getPayload(), payload);\n\n        \r\n        GenericType<ServiceInstance<ServiceDetails>> singleInstanceType = new GenericType<ServiceInstance<ServiceDetails>>(){};\n        ServiceInstance<ServiceDetails>    instance = resource.path(\"/v1/service/test/\" + service.getId()).get(singleInstanceType);\n        Assert.assertEquals(instance, service);\n\n    }\n","realPath":"curator-x-discovery-server/src/test/java/org/apache/curator/x/discovery/server/jetty_jersey/TestObjectPayloadWithJersey.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
