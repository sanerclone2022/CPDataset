[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testPutListener() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer   producer = new QueueTestProducer(queue, itemQty, 0);\n\n            final AtomicInteger     listenerCalls = new AtomicInteger(0);\n            QueuePutListener<TestQueueItem> listener = new QueuePutListener<TestQueueItem>()\n            {\n                @Override\n                public void putCompleted(TestQueueItem item)\n                {\n                    listenerCalls.incrementAndGet();\n                }\n\n                @Override\n                public void putMultiCompleted(MultiItem<TestQueueItem> items)\n                {\n                }\n            };\n            queue.getPutListenerContainer().addListener(listener);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n            \n            Assert.assertEquals(listenerCalls.get(), itemQty);\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":205,"groupId":"952","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/50/5ff1c12726b6c5d0cbc27e9bebcf5b27f1cba5.src","preCode":"    public void     testPutListener() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer   producer = new QueueTestProducer(queue, itemQty, 0);\n\n            final AtomicInteger     listenerCalls = new AtomicInteger(0);\n            QueuePutListener<TestQueueItem> listener = new QueuePutListener<TestQueueItem>()\n            {\n                @Override\n                public void putCompleted(TestQueueItem item)\n                {\n                    listenerCalls.incrementAndGet();\n                }\n\n                @Override\n                public void putMultiCompleted(MultiItem<TestQueueItem> items)\n                {\n                }\n            };\n            queue.getPutListenerContainer().addListener(listener);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n            \n            Assert.assertEquals(listenerCalls.get(), itemQty);\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testSimple() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer producer = new QueueTestProducer(queue, itemQty, 0);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":729,"groupId":"443","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/50/5ff1c12726b6c5d0cbc27e9bebcf5b27f1cba5.src","preCode":"    public void     testSimple() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer producer = new QueueTestProducer(queue, itemQty, 0);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2014-02-04 02:55:50","codes":[{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void     testPutListener() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer   producer = new QueueTestProducer(queue, itemQty, 0);\n\n            final AtomicInteger     listenerCalls = new AtomicInteger(0);\n            QueuePutListener<TestQueueItem> listener = new QueuePutListener<TestQueueItem>()\n            {\n                @Override\n                public void putCompleted(TestQueueItem item)\n                {\n                    listenerCalls.incrementAndGet();\n                }\n\n                @Override\n                public void putMultiCompleted(MultiItem<TestQueueItem> items)\n                {\n                }\n            };\n            queue.getPutListenerContainer().addListener(listener);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n            \n            Assert.assertEquals(listenerCalls.get(), itemQty);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":270,"groupId":"952","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/02/fc5d6f193decb5e7dcc57a58f6d1d070a2f212.src","preCode":"    public void     testPutListener() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer   producer = new QueueTestProducer(queue, itemQty, 0);\n\n            final AtomicInteger     listenerCalls = new AtomicInteger(0);\n            QueuePutListener<TestQueueItem> listener = new QueuePutListener<TestQueueItem>()\n            {\n                @Override\n                public void putCompleted(TestQueueItem item)\n                {\n                    listenerCalls.incrementAndGet();\n                }\n\n                @Override\n                public void putMultiCompleted(MultiItem<TestQueueItem> items)\n                {\n                }\n            };\n            queue.getPutListenerContainer().addListener(listener);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n            \n            Assert.assertEquals(listenerCalls.get(), itemQty);\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void     testSimple() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer producer = new QueueTestProducer(queue, itemQty, 0);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":794,"groupId":"443","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/02/fc5d6f193decb5e7dcc57a58f6d1d070a2f212.src","preCode":"    public void     testSimple() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer producer = new QueueTestProducer(queue, itemQty, 0);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n        }\n        finally\n        {\n            Closeables.closeQuietly(queue);\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":757,"status":"M"}],"commitId":"863eaee2f11fe930601c3da3bce386263fb552c4","commitMessage":"@@@CURATOR-85 - Guava no longer has closeQuietly(). This change adds the implementation internally to Curator\n","date":"2014-02-04 02:55:50","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void     testPutListener() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer   producer = new QueueTestProducer(queue, itemQty, 0);\n\n            final AtomicInteger     listenerCalls = new AtomicInteger(0);\n            QueuePutListener<TestQueueItem> listener = new QueuePutListener<TestQueueItem>()\n            {\n                @Override\n                public void putCompleted(TestQueueItem item)\n                {\n                    listenerCalls.incrementAndGet();\n                }\n\n                @Override\n                public void putMultiCompleted(MultiItem<TestQueueItem> items)\n                {\n                }\n            };\n            queue.getPutListenerContainer().addListener(listener);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                assertEquals(item.str, Integer.toString(i++));\n            }\n            \n            assertEquals(listenerCalls.get(), itemQty);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":273,"groupId":"10181","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testPutListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e9/f60140b433d1017a76801d4a76d8331c5a7660.src","preCode":"    public void     testPutListener() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer   producer = new QueueTestProducer(queue, itemQty, 0);\n\n            final AtomicInteger     listenerCalls = new AtomicInteger(0);\n            QueuePutListener<TestQueueItem> listener = new QueuePutListener<TestQueueItem>()\n            {\n                @Override\n                public void putCompleted(TestQueueItem item)\n                {\n                    listenerCalls.incrementAndGet();\n                }\n\n                @Override\n                public void putMultiCompleted(MultiItem<TestQueueItem> items)\n                {\n                }\n            };\n            queue.getPutListenerContainer().addListener(listener);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n            \n            Assert.assertEquals(listenerCalls.get(), itemQty);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    public void     testSimple() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer producer = new QueueTestProducer(queue, itemQty, 0);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                assertEquals(item.str, Integer.toString(i++));\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":797,"groupId":"10181","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e9/f60140b433d1017a76801d4a76d8331c5a7660.src","preCode":"    public void     testSimple() throws Exception\n    {\n        final int                   itemQty = 10;\n\n        DistributedQueue<TestQueueItem>  queue = null;\n        CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n        client.start();\n        try\n        {\n            BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock(ConnectionStateListener.class));\n\n            queue = QueueBuilder.builder(client, consumer, serializer, QUEUE_PATH).buildQueue();\n            queue.start();\n\n            QueueTestProducer producer = new QueueTestProducer(queue, itemQty, 0);\n\n            ExecutorService     service = Executors.newCachedThreadPool();\n            service.submit(producer);\n\n            int                 iteration = 0;\n            while ( consumer.size() < itemQty )\n            {\n                Assert.assertTrue(++iteration < 10);\n                Thread.sleep(1000);\n            }\n\n            int                 i = 0;\n            for ( TestQueueItem item : consumer.getItems() )\n            {\n                Assert.assertEquals(item.str, Integer.toString(i++));\n            }\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(queue);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-recipes/src/test/java/org/apache/curator/framework/recipes/queue/TestDistributedQueue.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":760,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
