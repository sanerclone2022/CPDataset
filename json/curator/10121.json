[{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-09-26 10:07:44","commitOrder":2,"curCode":"    private CountDownLatch setChangeWaiter(CuratorFramework client) throws Exception\n    {\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher()\n        {\n            @Override\n            public void process(WatchedEvent event)\n            {\n                if ( event.getType() == Event.EventType.NodeDataChanged )\n                {\n                    latch.countDown();\n                }\n            }\n        };\n        client.getConfig().usingWatcher(watcher).forEnsemble();\n        return latch;\n    }\n","date":"2015-09-26 10:07:44","endLine":283,"groupId":"1567","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setChangeWaiter","params":"(CuratorFrameworkclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/99/e5a2e81322bb254f74ef747a12de5df22063a3.src","preCode":"    private CountDownLatch setChangeWaiter(CuratorFramework client) throws Exception\n    {\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher()\n        {\n            @Override\n            public void process(WatchedEvent event)\n            {\n                if ( event.getType() == Event.EventType.NodeDataChanged )\n                {\n                    latch.countDown();\n                }\n            }\n        };\n        client.getConfig().usingWatcher(watcher).forEnsemble();\n        return latch;\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestReconfiguration.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"B"},{"authorDate":"2015-08-18 10:13:37","commitOrder":2,"curCode":"    private void internalTryBasic(CuratorFramework client) throws Exception\n    {\n        WatcherRemoveCuratorFramework removerClient = client.newWatcherRemoveCuratorFramework();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher()\n        {\n            @Override\n            public void process(WatchedEvent event)\n            {\n                if ( event.getType() == Event.EventType.DataWatchRemoved )\n                {\n                    latch.countDown();\n                }\n            }\n        };\n        removerClient.checkExists().usingWatcher(watcher).forPath(\"/hey\");\n\n        List<String> existWatches = WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper());\n        Assert.assertEquals(existWatches.size(), 1);\n\n        removerClient.removeWatchers();\n\n        Assert.assertTrue(new Timing().awaitLatch(latch));\n\n        existWatches = WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper());\n        Assert.assertEquals(existWatches.size(), 0);\n    }\n","date":"2015-08-18 10:13:37","endLine":256,"groupId":"1567","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"internalTryBasic","params":"(CuratorFrameworkclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e2/0c45020bfe8d27a37f0e1989bc8742eacae1a0.src","preCode":"    private void internalTryBasic(CuratorFramework client) throws Exception\n    {\n        WatcherRemoveCuratorFramework removerClient = client.newWatcherRemoveCuratorFramework();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher()\n        {\n            @Override\n            public void process(WatchedEvent event)\n            {\n                if ( event.getType() == Event.EventType.DataWatchRemoved )\n                {\n                    latch.countDown();\n                }\n            }\n        };\n        removerClient.checkExists().usingWatcher(watcher).forPath(\"/hey\");\n\n        List<String> existWatches = WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper());\n        Assert.assertEquals(existWatches.size(), 1);\n\n        removerClient.removeWatchers();\n\n        Assert.assertTrue(new Timing().awaitLatch(latch));\n\n        existWatches = WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper());\n        Assert.assertEquals(existWatches.size(), 0);\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherRemovalManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"NB"}],"commitId":"d42ef172e57af17ed42d7c2c4e2d9a7a0c520f3c","commitMessage":"@@@wip - adding() API was misnamed. Also.  it's mutually exclusive with join/leave\n","date":"2015-09-26 10:07:44","modifiedFileCount":"7","status":"M","submitter":"randgalt"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2015-09-26 10:07:44","commitOrder":3,"curCode":"    private CountDownLatch setChangeWaiter(CuratorFramework client) throws Exception\n    {\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher()\n        {\n            @Override\n            public void process(WatchedEvent event)\n            {\n                if ( event.getType() == Event.EventType.NodeDataChanged )\n                {\n                    latch.countDown();\n                }\n            }\n        };\n        client.getConfig().usingWatcher(watcher).forEnsemble();\n        return latch;\n    }\n","date":"2015-09-26 10:07:44","endLine":283,"groupId":"10121","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setChangeWaiter","params":"(CuratorFrameworkclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/99/e5a2e81322bb254f74ef747a12de5df22063a3.src","preCode":"    private CountDownLatch setChangeWaiter(CuratorFramework client) throws Exception\n    {\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher()\n        {\n            @Override\n            public void process(WatchedEvent event)\n            {\n                if ( event.getType() == Event.EventType.NodeDataChanged )\n                {\n                    latch.countDown();\n                }\n            }\n        };\n        client.getConfig().usingWatcher(watcher).forEnsemble();\n        return latch;\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestReconfiguration.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"N"},{"authorDate":"2020-10-20 21:18:25","commitOrder":3,"curCode":"    private void internalTryBasic(CuratorFramework client) throws Exception\n    {\n        WatcherRemoveCuratorFramework removerClient = client.newWatcherRemoveCuratorFramework();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher()\n        {\n            @Override\n            public void process(WatchedEvent event)\n            {\n                if ( event.getType() == Event.EventType.DataWatchRemoved )\n                {\n                    latch.countDown();\n                }\n            }\n        };\n        removerClient.checkExists().usingWatcher(watcher).forPath(\"/hey\");\n\n        List<String> existWatches = WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper());\n        assertEquals(existWatches.size(), 1);\n\n        removerClient.removeWatchers();\n\n        assertTrue(new Timing().awaitLatch(latch));\n\n        existWatches = WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper());\n        assertEquals(existWatches.size(), 0);\n    }\n","date":"2020-10-20 21:18:25","endLine":530,"groupId":"10121","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"internalTryBasic","params":"(CuratorFrameworkclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c6/ac16cd8b041f8abeb77a26790d5b950a3d8de4.src","preCode":"    private void internalTryBasic(CuratorFramework client) throws Exception\n    {\n        WatcherRemoveCuratorFramework removerClient = client.newWatcherRemoveCuratorFramework();\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher()\n        {\n            @Override\n            public void process(WatchedEvent event)\n            {\n                if ( event.getType() == Event.EventType.DataWatchRemoved )\n                {\n                    latch.countDown();\n                }\n            }\n        };\n        removerClient.checkExists().usingWatcher(watcher).forPath(\"/hey\");\n\n        List<String> existWatches = WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper());\n        Assert.assertEquals(existWatches.size(), 1);\n\n        removerClient.removeWatchers();\n\n        Assert.assertTrue(new Timing().awaitLatch(latch));\n\n        existWatches = WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper());\n        Assert.assertEquals(existWatches.size(), 0);\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestWatcherRemovalManager.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
