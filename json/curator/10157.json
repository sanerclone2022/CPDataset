[{"authorTime":"2015-08-18 10:13:37","codes":[{"authorDate":"2015-08-18 10:13:37","commitOrder":3,"curCode":"    public Void forPath(String path) throws Exception\n    {\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext()), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","date":"2015-08-18 10:13:37","endLine":219,"groupId":"1931","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"forPath","params":"(Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/2a/98f56cd2377d8f56285964e3797e40f5e14a9e.src","preCode":"    public Void forPath(String path) throws Exception\n    {\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext()), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/DeleteBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"MB"},{"authorDate":"2015-08-18 10:13:37","commitOrder":3,"curCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local), null);\n    }\n","date":"2015-08-18 10:13:37","endLine":223,"groupId":"468","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"pathInBackground","params":"(finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/d8/72ced28118db39fbdf233f0a06263e9225d7e9.src","preCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local), null);\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/RemoveWatchesBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"}],"commitId":"d5d12c88b075fd1fc51a29412b3c08918cceb983","commitMessage":"@@@Merge 'CURATOR-217' into CURATOR-3.0\n","date":"2015-08-18 10:13:37","modifiedFileCount":"40","status":"M","submitter":"Scott Blum"},{"authorTime":"2016-04-21 09:12:31","codes":[{"authorDate":"2016-04-21 09:12:31","commitOrder":4,"curCode":"    public Void forPath(String path) throws Exception\n    {\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext(), null), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","date":"2016-04-21 09:12:31","endLine":240,"groupId":"1931","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"forPath","params":"(Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/67/8b0cbbdd279608b9310630783fb52221a775c9.src","preCode":"    public Void forPath(String path) throws Exception\n    {\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext()), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/DeleteBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2016-04-21 09:12:31","commitOrder":4,"curCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local, null), null);\n    }\n","date":"2016-04-21 09:12:31","endLine":213,"groupId":"468","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"pathInBackground","params":"(finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c2/d4d8e04c6a238f23b89dad7577595fd9360cde.src","preCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local), null);\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/RemoveWatchesBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"b1d2198a75d6e01b48789635ba648bedc542c439","commitMessage":"@@@If there's an exeption.  retries exceeded.  etc..  the watcher was still being stored in WatcherRemovealManager thus causing it to be incorrectly removed. This fix removes the watch from the WatcherRemovalmanager on exceptions.  retries exceeded.  etc.\n","date":"2016-04-21 09:12:31","modifiedFileCount":"20","status":"M","submitter":"randgalt"},{"authorTime":"2016-04-21 09:12:31","codes":[{"authorDate":"2016-05-20 03:02:00","commitOrder":5,"curCode":"    public Void forPath(String path) throws Exception\n    {\n        client.getSchemaSet().getSchema(path).validateDelete();\n\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext(), null), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","date":"2016-05-20 03:02:00","endLine":242,"groupId":"1931","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"forPath","params":"(Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/cb/d12dd4f5915554899fb8f7ec89a180b4f8649b.src","preCode":"    public Void forPath(String path) throws Exception\n    {\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext(), null), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/DeleteBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2016-04-21 09:12:31","commitOrder":5,"curCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local, null), null);\n    }\n","date":"2016-04-21 09:12:31","endLine":213,"groupId":"468","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"pathInBackground","params":"(finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c2/d4d8e04c6a238f23b89dad7577595fd9360cde.src","preCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local, null), null);\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/RemoveWatchesBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"}],"commitId":"63a0d4550ebfaa2e29ddf719f8bfe9696cffc5ae","commitMessage":"@@@Merge branch 'CURATOR-322' into CURATOR-3.0\n","date":"2016-05-20 03:02:00","modifiedFileCount":"18","status":"M","submitter":"randgalt"},{"authorTime":"2016-05-27 05:59:08","codes":[{"authorDate":"2016-05-20 03:02:00","commitOrder":6,"curCode":"    public Void forPath(String path) throws Exception\n    {\n        client.getSchemaSet().getSchema(path).validateDelete();\n\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext(), null), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","date":"2016-05-20 03:02:00","endLine":242,"groupId":"1931","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"forPath","params":"(Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/cb/d12dd4f5915554899fb8f7ec89a180b4f8649b.src","preCode":"    public Void forPath(String path) throws Exception\n    {\n        client.getSchemaSet().getSchema(path).validateDelete();\n\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext(), null), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/DeleteBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"},{"authorDate":"2016-05-27 05:59:08","commitOrder":6,"curCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local), null);\n    }\n","date":"2016-05-27 05:59:08","endLine":213,"groupId":"468","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"pathInBackground","params":"(finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/27/a3c0f677ea98ee73dc9c84627eb1a0b75025bb.src","preCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local, null), null);\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/RemoveWatchesBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"f59f23c703815317d4ef1d39e2b815e402d1559b","commitMessage":"@@@Reworked WatcherRemovalManager. It now stores watchers only on successful operations. This is more like how ZK does it.\nAlso.  exists watcher must be stored when there is a NoNode result.\n","date":"2016-05-27 05:59:08","modifiedFileCount":"11","status":"M","submitter":"randgalt"},{"authorTime":"2016-05-27 05:59:08","codes":[{"authorDate":"2016-10-28 23:05:52","commitOrder":7,"curCode":"    public Void forPath(String path) throws Exception\n    {\n        client.getSchemaSet().getSchema(path).validateDelete(path);\n\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext(), null), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","date":"2016-10-28 23:05:52","endLine":242,"groupId":"1931","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"forPath","params":"(Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ab/e27c4539db4e529bbd01c6e255594ee8fd89f2.src","preCode":"    public Void forPath(String path) throws Exception\n    {\n        client.getSchemaSet().getSchema(path).validateDelete();\n\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext(), null), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/DeleteBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2016-05-27 05:59:08","commitOrder":7,"curCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local), null);\n    }\n","date":"2016-05-27 05:59:08","endLine":213,"groupId":"468","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"pathInBackground","params":"(finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/27/a3c0f677ea98ee73dc9c84627eb1a0b75025bb.src","preCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local), null);\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/RemoveWatchesBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"}],"commitId":"786d69587d183250b4108a9e18898ad4b2e94659","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-351\n","date":"2016-10-28 23:05:52","modifiedFileCount":"22","status":"M","submitter":"randgalt"},{"authorTime":"2016-05-27 05:59:08","codes":[{"authorDate":"2020-12-15 08:26:12","commitOrder":8,"curCode":"    public Void forPath(String path) throws Exception\n    {\n        client.getSchemaSet().getSchema(path).validateDelete(path);\n\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            OperationAndData<String> operationAndData = new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext(), null)\n            {\n                @Override\n                void callPerformBackgroundOperation() throws Exception\n                {\n                    \r\n                    if ( failBeforeNextDeleteForTesting )\n                    {\n                        failBeforeNextDeleteForTesting = false;\n                        throw new KeeperException.ConnectionLossException();\n                    }\n                    super.callPerformBackgroundOperation();\n                }\n            };\n            client.processBackgroundOperation(operationAndData, null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","date":"2021-02-18 23:20:15","endLine":285,"groupId":"10157","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"forPath","params":"(Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/3f/2e210698996a66472b6bec01dddae3c4456b2b.src","preCode":"    public Void forPath(String path) throws Exception\n    {\n        client.getSchemaSet().getSchema(path).validateDelete(path);\n\n        final String unfixedPath = path;\n        path = client.fixForNamespace(path);\n\n        if ( backgrounding.inBackground() )\n        {\n            OperationAndData.ErrorCallback<String> errorCallback = null;\n            if ( guaranteed )\n            {\n                errorCallback = new OperationAndData.ErrorCallback<String>()\n                {\n                    @Override\n                    public void retriesExhausted(OperationAndData<String> operationAndData)\n                    {\n                        client.getFailedDeleteManager().addFailedOperation(unfixedPath);\n                    }\n                };\n            }\n            client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(), errorCallback, backgrounding.getContext(), null), null);\n        }\n        else\n        {\n            pathInForeground(path, unfixedPath);\n        }\n        return null;\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/DeleteBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2016-05-27 05:59:08","commitOrder":8,"curCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local), null);\n    }\n","date":"2016-05-27 05:59:08","endLine":213,"groupId":"10157","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"pathInBackground","params":"(finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/27/a3c0f677ea98ee73dc9c84627eb1a0b75025bb.src","preCode":"    private void pathInBackground(final String path)\n    {\n        OperationAndData.ErrorCallback<String>  errorCallback = null;\n        \n        \r\n        if(guaranteed)\n        {\n            errorCallback = new OperationAndData.ErrorCallback<String>()\n            {\n                @Override\n                public void retriesExhausted(OperationAndData<String> operationAndData)\n                {\n                    client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path, watcher));\n                }            \n            };\n        }\n        \n        client.processBackgroundOperation(new OperationAndData<String>(this, path, backgrounding.getCallback(),\n                                                                       errorCallback, backgrounding.getContext(), !local), null);\n    }\n","realPath":"curator-framework/src/main/java/org/apache/curator/framework/imps/RemoveWatchesBuilderImpl.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"}],"commitId":"d5666ab9ca22f45b905d6ffbf2b33fa30b38e15e","commitMessage":"@@@CURATOR-584: Added fault tolerant idempotent Create.  SetData and Delete operations\n","date":"2021-02-18 23:20:15","modifiedFileCount":"10","status":"M","submitter":"Josh Slocum"}]
