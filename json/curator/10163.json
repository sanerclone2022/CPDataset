[{"authorTime":"2015-04-22 04:13:26","codes":[{"authorDate":"2015-04-22 04:13:26","commitOrder":1,"curCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            Timing timing = new Timing();\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            ServiceDiscovery<String> discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            closeables.add(discovery);\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n            closeables.add(server);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2015-04-22 04:13:26","endLine":103,"groupId":"290","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrashedServerMultiInstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/28/08c5c6d2591701a4d958e984472e1676c1fdc3.src","preCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            Timing timing = new Timing();\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            ServiceDiscovery<String> discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            closeables.add(discovery);\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n            closeables.add(server);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2015-04-22 04:13:26","commitOrder":1,"curCode":"    public void testCrashedServer() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            Timing timing = new Timing();\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceDiscovery<String> discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            closeables.add(discovery);\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n            closeables.add(server);\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","date":"2015-04-22 04:13:26","endLine":149,"groupId":"1992","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrashedServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/28/08c5c6d2591701a4d958e984472e1676c1fdc3.src","preCode":"    public void testCrashedServer() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            Timing timing = new Timing();\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceDiscovery<String> discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            closeables.add(discovery);\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n            closeables.add(server);\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"f489dfebeed4ecf004ded37a0f05a0a8a2dc7e6d","commitMessage":"@@@Concurrent registrations/unregistrations and connection issues can cause inconsistent state. Change to a model whereby 'unregistering' an instance doesn't remove it from management but changes the state. Instance will still be managed for a period of time and clean after a reasonable period\n","date":"2015-04-22 04:13:26","modifiedFileCount":"1","status":"B","submitter":"randgalt"},{"authorTime":"2017-07-18 21:16:05","codes":[{"authorDate":"2017-07-18 21:16:05","commitOrder":2,"curCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-07-18 21:16:05","endLine":95,"groupId":"1116","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrashedServerMultiInstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/47/c74d5313469015f0cc07aec14e39ba5a9d5378.src","preCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            Timing timing = new Timing();\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            ServiceDiscovery<String> discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            closeables.add(discovery);\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n            closeables.add(server);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2017-07-18 21:16:05","commitOrder":2,"curCode":"    public void testCrashedServer() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-07-18 21:16:05","endLine":137,"groupId":"1116","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrashedServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/47/c74d5313469015f0cc07aec14e39ba5a9d5378.src","preCode":"    public void testCrashedServer() throws Exception\n    {\n        List<Closeable> closeables = Lists.newArrayList();\n        try\n        {\n            Timing timing = new Timing();\n            CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            closeables.add(client);\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceDiscovery<String> discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            closeables.add(discovery);\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n            closeables.add(server);\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            for ( Closeable c : closeables )\n            {\n                CloseableUtils.closeQuietly(c);\n            }\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"7a60af0dddbf1e547ddb7448ce99e14341413ef0","commitMessage":"@@@Merge branch 'master' into CURATOR-421\n","date":"2017-07-18 21:16:05","modifiedFileCount":"5","status":"M","submitter":"randgalt"},{"authorTime":"2017-07-22 03:27:07","codes":[{"authorDate":"2017-07-22 03:27:07","commitOrder":3,"curCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            KillSession2.kill(client.getZookeeperClient().getZooKeeper());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-07-22 03:27:07","endLine":95,"groupId":"1116","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrashedServerMultiInstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/b6/7bff917984accc277be64a2f5499a379bcc7bc.src","preCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2017-07-22 03:27:07","commitOrder":3,"curCode":"    public void testCrashedServer() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            KillSession2.kill(client.getZookeeperClient().getZooKeeper());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-07-22 03:27:07","endLine":137,"groupId":"1116","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrashedServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/b6/7bff917984accc277be64a2f5499a379bcc7bc.src","preCode":"    public void testCrashedServer() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"31d7f9a2040975dee08cb685d61cceb7015f9e32","commitMessage":"@@@Merge branch 'master' into CURATOR-426\n","date":"2017-07-22 03:27:07","modifiedFileCount":"35","status":"M","submitter":"randgalt"},{"authorTime":"2019-02-11 20:47:18","codes":[{"authorDate":"2019-02-11 20:47:18","commitOrder":4,"curCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            Compatibility.injectSessionExpiration(client.getZookeeperClient().getZooKeeper());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2019-02-11 20:47:18","endLine":95,"groupId":"1116","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrashedServerMultiInstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/54/719a5de0c921327e0813d5d3da16174b6d4423.src","preCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            KillSession2.kill(client.getZookeeperClient().getZooKeeper());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-02-11 20:47:18","commitOrder":4,"curCode":"    public void testCrashedServer() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            Compatibility.injectSessionExpiration(client.getZookeeperClient().getZooKeeper());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2019-02-11 20:47:18","endLine":137,"groupId":"1116","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrashedServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/54/719a5de0c921327e0813d5d3da16174b6d4423.src","preCode":"    public void testCrashedServer() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            KillSession2.kill(client.getZookeeperClient().getZooKeeper());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"973cb0ba6825efca27095e56948af6a3c8455abe","commitMessage":"@@@Merge branch 'CURATOR-498'\n","date":"2019-02-11 20:47:18","modifiedFileCount":"22","status":"M","submitter":"randgalt"},{"authorTime":"2020-03-15 07:13:56","codes":[{"authorDate":"2020-03-15 07:13:56","commitOrder":5,"curCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-03-15 07:13:56","endLine":94,"groupId":"1116","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrashedServerMultiInstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a1/c8cfea456214c879107b27118066790c2af68d.src","preCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            Compatibility.injectSessionExpiration(client.getZookeeperClient().getZooKeeper());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-03-15 07:13:56","commitOrder":5,"curCode":"    public void testCrashedServer() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-03-15 07:13:56","endLine":136,"groupId":"1116","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrashedServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/a1/c8cfea456214c879107b27118066790c2af68d.src","preCode":"    public void testCrashedServer() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            Compatibility.injectSessionExpiration(client.getZookeeperClient().getZooKeeper());\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"d1a9234ecae47e3704037c839e6041931c24d1f4","commitMessage":"@@@CURATOR-558 (#344)\n\nPt1 of change\n\n* Remove the ZK 3.4 compatibility module and code\n* Remove the deprecated ListenerContainer that leaks Guava classes into our APIs\n* Remove Exhibitor support\n* Various minor changes/cleanups\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-15 07:13:56","modifiedFileCount":"45","status":"M","submitter":"Jordan Zimmerman"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":6,"curCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore, 2);\n            assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":100,"groupId":"10163","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testCrashedServerMultiInstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f5/6acaa9cdfd059b21b473d65b0a4f908043a72d.src","preCode":"    public void testCrashedServerMultiInstances() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance1 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            ServiceInstance<String> instance2 = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10065).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance1, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n            discovery.registerService(instance2);\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n\n            client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore, 2);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 2);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":6,"curCode":"    public void testCrashedServer() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore);\n            assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":142,"groupId":"10163","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testCrashedServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f5/6acaa9cdfd059b21b473d65b0a4f908043a72d.src","preCode":"    public void testCrashedServer() throws Exception\n    {\n        CuratorFramework client = null;\n        ServiceDiscovery<String> discovery = null;\n        try\n        {\n            Timing timing = new Timing();\n            client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));\n            client.start();\n\n            final Semaphore semaphore = new Semaphore(0);\n            ServiceInstance<String> instance = ServiceInstance.<String>builder().payload(\"thing\").name(\"test\").port(10064).build();\n            discovery = new ServiceDiscoveryImpl<String>(client, \"/test\", new JsonInstanceSerializer<String>(String.class), instance, false)\n            {\n                @Override\n                protected void internalRegisterService(ServiceInstance<String> service) throws Exception\n                {\n                    super.internalRegisterService(service);\n                    semaphore.release();\n                }\n            };\n            discovery.start();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n\n            client.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration();\n            server.stop();\n\n            server.restart();\n\n            timing.acquireSemaphore(semaphore);\n            Assert.assertEquals(discovery.queryForInstances(\"test\").size(), 1);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(discovery);\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-x-discovery/src/test/java/org/apache/curator/x/discovery/details/TestServiceDiscovery.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
