[{"authorTime":"2013-03-08 06:54:59","codes":[{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":97,"groupId":"107","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/81/c7b549b4a4f01dedb50afde77ab9b30422ce3d.src","preCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"},{"authorDate":"2013-03-08 06:54:59","commitOrder":1,"curCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            Closeables.closeQuietly(client);\n        }\n    }\n","date":"2013-03-08 06:54:59","endLine":169,"groupId":"107","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryStatic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/81/c7b549b4a4f01dedb50afde77ab9b30422ce3d.src","preCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"8d32c4738afe4fb6fa5e6fd843b05821ddc2ce88","commitMessage":"@@@Beginning to move everything to Apache\n","date":"2013-03-08 06:54:59","modifiedFileCount":"10","status":"B","submitter":"Jordan Zimmerman"},{"authorTime":"2014-02-04 02:55:50","codes":[{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":99,"groupId":"107","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e2/09e40ba6b0ac283d8c91b439d84110bd6e66ba.src","preCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2014-02-04 02:55:50","commitOrder":2,"curCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2014-02-04 02:55:50","endLine":171,"groupId":"107","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryStatic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/e2/09e40ba6b0ac283d8c91b439d84110bd6e66ba.src","preCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            Closeables.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"863eaee2f11fe930601c3da3bce386263fb552c4","commitMessage":"@@@CURATOR-85 - Guava no longer has closeQuietly(). This change adds the implementation internally to Curator\n","date":"2014-02-04 02:55:50","modifiedFileCount":"61","status":"M","submitter":"randgalt"},{"authorTime":"2015-09-07 14:49:43","codes":[{"authorDate":"2015-09-07 14:49:43","commitOrder":3,"curCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-09-07 14:49:43","endLine":101,"groupId":"107","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/93/7726e6d312f9ceb1b7f26b20266a63850fe79e.src","preCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2015-09-07 14:49:43","commitOrder":3,"curCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-09-07 14:49:43","endLine":173,"groupId":"107","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryStatic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/93/7726e6d312f9ceb1b7f26b20266a63850fe79e.src","preCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new RetryOneTime(1));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"940e845d7e1d73b1e4804b6f37ee1ecddce7b67f","commitMessage":"@@@Merge branch 'CURATOR-3.0' into CURATOR-248\n","date":"2015-09-07 14:49:43","modifiedFileCount":"6","status":"M","submitter":"randgalt"},{"authorTime":"2017-07-22 03:27:07","codes":[{"authorDate":"2017-07-22 03:27:07","commitOrder":4,"curCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    KillSession2.kill(client.getZooKeeper());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-07-22 03:27:07","endLine":100,"groupId":"107","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/39/b0e45bace04bd43c8347d7e7daa03368c70c32.src","preCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2017-07-22 03:27:07","commitOrder":4,"curCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        KillSession2.kill(client.getZooKeeper());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2017-07-22 03:27:07","endLine":172,"groupId":"107","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryStatic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/39/b0e45bace04bd43c8347d7e7daa03368c70c32.src","preCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        KillSession.kill(client.getZooKeeper(), server.getConnectString());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"31d7f9a2040975dee08cb685d61cceb7015f9e32","commitMessage":"@@@Merge branch 'master' into CURATOR-426\n","date":"2017-07-22 03:27:07","modifiedFileCount":"35","status":"M","submitter":"randgalt"},{"authorTime":"2019-02-11 20:47:18","codes":[{"authorDate":"2019-02-11 20:47:18","commitOrder":5,"curCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    Compatibility.injectSessionExpiration(client.getZooKeeper());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2019-02-11 20:47:18","endLine":100,"groupId":"107","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/7c/9c9637a696edd4dca00804c07cec3948b46b1a.src","preCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    KillSession2.kill(client.getZooKeeper());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2019-02-11 20:47:18","commitOrder":5,"curCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        Compatibility.injectSessionExpiration(client.getZooKeeper());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2019-02-11 20:47:18","endLine":172,"groupId":"107","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryStatic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/7c/9c9637a696edd4dca00804c07cec3948b46b1a.src","preCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        KillSession2.kill(client.getZooKeeper());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"973cb0ba6825efca27095e56948af6a3c8455abe","commitMessage":"@@@Merge branch 'CURATOR-498'\n","date":"2019-02-11 20:47:18","modifiedFileCount":"22","status":"M","submitter":"randgalt"},{"authorTime":"2020-03-15 07:13:56","codes":[{"authorDate":"2020-03-15 07:13:56","commitOrder":6,"curCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    client.getZooKeeper().getTestable().injectSessionExpiration();\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-03-15 07:13:56","endLine":99,"groupId":"107","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/46/657e513bc87bc2492faa4d669a8059dce22699.src","preCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    Compatibility.injectSessionExpiration(client.getZooKeeper());\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2020-03-15 07:13:56","commitOrder":6,"curCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        client.getZooKeeper().getTestable().injectSessionExpiration();\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-03-15 07:13:56","endLine":171,"groupId":"107","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryStatic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/46/657e513bc87bc2492faa4d669a8059dce22699.src","preCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        Compatibility.injectSessionExpiration(client.getZooKeeper());\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"d1a9234ecae47e3704037c839e6041931c24d1f4","commitMessage":"@@@CURATOR-558 (#344)\n\nPt1 of change\n\n* Remove the ZK 3.4 compatibility module and code\n* Remove the deprecated ListenerContainer that leaks Guava classes into our APIs\n* Remove Exhibitor support\n* Various minor changes/cleanups\n\nCo-authored-by: randgalt <randgalt@apache.org>","date":"2020-03-15 07:13:56","modifiedFileCount":"45","status":"M","submitter":"Jordan Zimmerman"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":7,"curCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    client.getZooKeeper().getTestable().injectSessionExpiration();\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                assertFalse(firstTime.get());\n                                assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":103,"groupId":"1042","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/04/9ee8890827ac5b9f5d60ab4f87990d146617ae.src","preCode":"    public void     testRetry() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            while ( retryLoop.shouldContinue() )\n            {\n                try\n                {\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                if ( firstTime.compareAndSet(true, false) )\n                                {\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    client.getZooKeeper().getTestable().injectSessionExpiration();\n                                    client.getZooKeeper();\n                                    client.blockUntilConnectedOrTimedOut();\n                                }\n\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                return null;\n                            }\n                        }\n                    );\n\n                    RetryLoop.callWithRetry\n                    (\n                        client,\n                        new Callable<Void>()\n                        {\n                            @Override\n                            public Void call() throws Exception\n                            {\n                                Assert.assertFalse(firstTime.get());\n                                Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                secondWasDone.set(true);\n                                return null;\n                            }\n                        }\n                    );\n                }\n                catch ( Exception e )\n                {\n                    retryLoop.takeException(e);\n                }\n            }\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":7,"curCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        client.getZooKeeper().getTestable().injectSessionExpiration();\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    assertFalse(firstTime.get());\n                                    assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":175,"groupId":"1042","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testRetryStatic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/04/9ee8890827ac5b9f5d60ab4f87990d146617ae.src","preCode":"    public void     testRetryStatic() throws Exception\n    {\n        Timing                          timing = new Timing();\n        final CuratorZookeeperClient    client = new CuratorZookeeperClient(server.getConnectString(), timing.session(), timing.connection(), null, new ExponentialBackoffRetry(100, 3));\n        SessionFailRetryLoop            retryLoop = client.newSessionFailRetryLoop(SessionFailRetryLoop.Mode.RETRY);\n        retryLoop.start();\n        try\n        {\n            client.start();\n            final AtomicBoolean     secondWasDone = new AtomicBoolean(false);\n            final AtomicBoolean     firstTime = new AtomicBoolean(true);\n            SessionFailRetryLoop.callWithRetry\n            (\n                client,\n                SessionFailRetryLoop.Mode.RETRY,\n                new Callable<Object>()\n                {\n                    @Override\n                    public Object call() throws Exception\n                    {\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    if ( firstTime.compareAndSet(true, false) )\n                                    {\n                                        Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                        client.getZooKeeper().getTestable().injectSessionExpiration();\n                                        client.getZooKeeper();\n                                        client.blockUntilConnectedOrTimedOut();\n                                    }\n\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    return null;\n                                }\n                            }\n                        );\n\n                        RetryLoop.callWithRetry\n                        (\n                            client,\n                            new Callable<Void>()\n                            {\n                                @Override\n                                public Void call() throws Exception\n                                {\n                                    Assert.assertFalse(firstTime.get());\n                                    Assert.assertNull(client.getZooKeeper().exists(\"/foo/bar\", false));\n                                    secondWasDone.set(true);\n                                    return null;\n                                }\n                            }\n                        );\n                        return null;\n                    }\n                }\n            );\n\n            Assert.assertTrue(secondWasDone.get());\n        }\n        finally\n        {\n            retryLoop.close();\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-client/src/test/java/org/apache/curator/TestSessionFailRetryLoop.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
