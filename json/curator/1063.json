[{"authorTime":"2015-08-13 05:30:01","codes":[{"authorDate":"2015-08-13 05:30:01","commitOrder":1,"curCode":"    public void     testWithNamespace() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(\"galt\").build();\n        try\n        {\n            client.start();\n            Collection<CuratorTransactionResult>    results =\n                client.inTransaction()\n                    .create().forPath(\"/foo\", \"one\".getBytes())\n                .and()\n                    .create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\", \"one\".getBytes())\n                .and()\n                    .setData().forPath(\"/foo\", \"two\".getBytes())\n                .and()\n                    .create().forPath(\"/foo/bar\")\n                .and()\n                    .delete().forPath(\"/foo/bar\")\n                .and()\n                    .commit();\n\n            Assert.assertTrue(client.checkExists().forPath(\"/foo\") != null);\n            Assert.assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null);\n            Assert.assertEquals(client.getData().forPath(\"/foo\"), \"two\".getBytes());\n            Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") == null);\n\n            CuratorTransactionResult    ephemeralResult = Iterables.find(results, CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE, \"/test-\"));\n            Assert.assertNotNull(ephemeralResult);\n            Assert.assertNotEquals(ephemeralResult.getResultPath(), \"/test-\");\n            Assert.assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-08-13 05:30:01","endLine":108,"groupId":"3","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithNamespace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/f0/147d55616f266ee80010998816222c3fdc2c9a.src","preCode":"    public void     testWithNamespace() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(\"galt\").build();\n        try\n        {\n            client.start();\n            Collection<CuratorTransactionResult>    results =\n                client.inTransaction()\n                    .create().forPath(\"/foo\", \"one\".getBytes())\n                .and()\n                    .create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\", \"one\".getBytes())\n                .and()\n                    .setData().forPath(\"/foo\", \"two\".getBytes())\n                .and()\n                    .create().forPath(\"/foo/bar\")\n                .and()\n                    .delete().forPath(\"/foo/bar\")\n                .and()\n                    .commit();\n\n            Assert.assertTrue(client.checkExists().forPath(\"/foo\") != null);\n            Assert.assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null);\n            Assert.assertEquals(client.getData().forPath(\"/foo\"), \"two\".getBytes());\n            Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") == null);\n\n            CuratorTransactionResult    ephemeralResult = Iterables.find(results, CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE, \"/test-\"));\n            Assert.assertNotNull(ephemeralResult);\n            Assert.assertNotEquals(ephemeralResult.getResultPath(), \"/test-\");\n            Assert.assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestTransactionsOld.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"},{"authorDate":"2015-08-13 05:30:01","commitOrder":1,"curCode":"    public void testBackgroundWithNamespace() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(\"galt\").build();\n        try\n        {\n            client.start();\n            CuratorOp createOp1 = client.transactionOp().create().forPath(\"/foo\", \"one\".getBytes());\n            CuratorOp createOp2 = client.transactionOp().create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\", \"one\".getBytes());\n            CuratorOp setDataOp = client.transactionOp().setData().forPath(\"/foo\", \"two\".getBytes());\n            CuratorOp createOp3 = client.transactionOp().create().forPath(\"/foo/bar\");\n            CuratorOp deleteOp = client.transactionOp().delete().forPath(\"/foo/bar\");\n\n            final BlockingQueue<List<CuratorTransactionResult>> queue = Queues.newLinkedBlockingQueue();\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    queue.add(event.getOpResults());\n                }\n            };\n            client.transaction().inBackground(callback).forOperations(createOp1, createOp2, setDataOp, createOp3, deleteOp);\n\n            Collection<CuratorTransactionResult> results = queue.poll(5, TimeUnit.SECONDS);\n\n            Assert.assertNotNull(results);\n            Assert.assertTrue(client.checkExists().forPath(\"/foo\") != null);\n            Assert.assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null);\n            Assert.assertEquals(client.getData().forPath(\"/foo\"), \"two\".getBytes());\n            Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") == null);\n\n            CuratorTransactionResult ephemeralResult = Iterables.find(results, CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE, \"/test-\"));\n            Assert.assertNotNull(ephemeralResult);\n            Assert.assertNotEquals(ephemeralResult.getResultPath(), \"/test-\");\n            Assert.assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2015-08-13 05:30:01","endLine":217,"groupId":"1778","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBackgroundWithNamespace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/ea/f94f8dff934e300bf93610b700a377644dd499.src","preCode":"    public void testBackgroundWithNamespace() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(\"galt\").build();\n        try\n        {\n            client.start();\n            CuratorOp createOp1 = client.transactionOp().create().forPath(\"/foo\", \"one\".getBytes());\n            CuratorOp createOp2 = client.transactionOp().create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\", \"one\".getBytes());\n            CuratorOp setDataOp = client.transactionOp().setData().forPath(\"/foo\", \"two\".getBytes());\n            CuratorOp createOp3 = client.transactionOp().create().forPath(\"/foo/bar\");\n            CuratorOp deleteOp = client.transactionOp().delete().forPath(\"/foo/bar\");\n\n            final BlockingQueue<List<CuratorTransactionResult>> queue = Queues.newLinkedBlockingQueue();\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    queue.add(event.getOpResults());\n                }\n            };\n            client.transaction().inBackground(callback).forOperations(createOp1, createOp2, setDataOp, createOp3, deleteOp);\n\n            Collection<CuratorTransactionResult> results = queue.poll(5, TimeUnit.SECONDS);\n\n            Assert.assertNotNull(results);\n            Assert.assertTrue(client.checkExists().forPath(\"/foo\") != null);\n            Assert.assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null);\n            Assert.assertEquals(client.getData().forPath(\"/foo\"), \"two\".getBytes());\n            Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") == null);\n\n            CuratorTransactionResult ephemeralResult = Iterables.find(results, CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE, \"/test-\"));\n            Assert.assertNotNull(ephemeralResult);\n            Assert.assertNotEquals(ephemeralResult.getResultPath(), \"/test-\");\n            Assert.assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestTransactionsNew.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"8c8d7ec2ba24cf192db7cd0a738924a2ec538e09","commitMessage":"@@@Merge branch 'CURATOR-215' into CURATOR-3.0\n","date":"2015-08-13 05:30:01","modifiedFileCount":"27","status":"B","submitter":"Scott Blum"},{"authorTime":"2020-10-20 21:18:25","codes":[{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void     testWithNamespace() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(\"galt\").build();\n        try\n        {\n            client.start();\n            Collection<CuratorTransactionResult>    results =\n                client.inTransaction()\n                    .create().forPath(\"/foo\", \"one\".getBytes())\n                .and()\n                    .create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\", \"one\".getBytes())\n                .and()\n                    .setData().forPath(\"/foo\", \"two\".getBytes())\n                .and()\n                    .create().forPath(\"/foo/bar\")\n                .and()\n                    .delete().forPath(\"/foo/bar\")\n                .and()\n                    .commit();\n\n            assertTrue(client.checkExists().forPath(\"/foo\") != null);\n            assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null);\n            assertArrayEquals(client.getData().forPath(\"/foo\"), \"two\".getBytes());\n            assertTrue(client.checkExists().forPath(\"/foo/bar\") == null);\n\n            CuratorTransactionResult    ephemeralResult = Iterables.find(results, CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE, \"/test-\"));\n            assertNotNull(ephemeralResult);\n            assertNotEquals(ephemeralResult.getResultPath(), \"/test-\");\n            assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":117,"groupId":"1063","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testWithNamespace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/7f/d3f53a60ae4dd6d60fbce0c3c72d9d5c1a2733.src","preCode":"    public void     testWithNamespace() throws Exception\n    {\n        CuratorFramework        client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(\"galt\").build();\n        try\n        {\n            client.start();\n            Collection<CuratorTransactionResult>    results =\n                client.inTransaction()\n                    .create().forPath(\"/foo\", \"one\".getBytes())\n                .and()\n                    .create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\", \"one\".getBytes())\n                .and()\n                    .setData().forPath(\"/foo\", \"two\".getBytes())\n                .and()\n                    .create().forPath(\"/foo/bar\")\n                .and()\n                    .delete().forPath(\"/foo/bar\")\n                .and()\n                    .commit();\n\n            Assert.assertTrue(client.checkExists().forPath(\"/foo\") != null);\n            Assert.assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null);\n            Assert.assertEquals(client.getData().forPath(\"/foo\"), \"two\".getBytes());\n            Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") == null);\n\n            CuratorTransactionResult    ephemeralResult = Iterables.find(results, CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE, \"/test-\"));\n            Assert.assertNotNull(ephemeralResult);\n            Assert.assertNotEquals(ephemeralResult.getResultPath(), \"/test-\");\n            Assert.assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestTransactionsOld.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-10-20 21:18:25","commitOrder":2,"curCode":"    public void testBackgroundWithNamespace() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(\"galt\").build();\n        try\n        {\n            client.start();\n            CuratorOp createOp1 = client.transactionOp().create().forPath(\"/foo\", \"one\".getBytes());\n            CuratorOp createOp2 = client.transactionOp().create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\", \"one\".getBytes());\n            CuratorOp setDataOp = client.transactionOp().setData().forPath(\"/foo\", \"two\".getBytes());\n            CuratorOp createOp3 = client.transactionOp().create().forPath(\"/foo/bar\");\n            CuratorOp deleteOp = client.transactionOp().delete().forPath(\"/foo/bar\");\n\n            final BlockingQueue<List<CuratorTransactionResult>> queue = Queues.newLinkedBlockingQueue();\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    queue.add(event.getOpResults());\n                }\n            };\n            client.transaction().inBackground(callback).forOperations(createOp1, createOp2, setDataOp, createOp3, deleteOp);\n\n            Collection<CuratorTransactionResult> results = queue.poll(5, TimeUnit.SECONDS);\n\n            assertNotNull(results);\n            assertTrue(client.checkExists().forPath(\"/foo\") != null);\n            assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null);\n            assertArrayEquals(client.getData().forPath(\"/foo\"), \"two\".getBytes());\n            assertTrue(client.checkExists().forPath(\"/foo/bar\") == null);\n\n            CuratorTransactionResult ephemeralResult = Iterables.find(results, CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE, \"/test-\"));\n            assertNotNull(ephemeralResult);\n            assertNotEquals(ephemeralResult.getResultPath(), \"/test-\");\n            assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","date":"2020-10-20 21:18:25","endLine":259,"groupId":"1063","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testBackgroundWithNamespace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-curator-10-0.7/blobInfo/CC_OUT/blobs/c4/144f0156e039ca82017f36055f9393fc66d53c.src","preCode":"    public void testBackgroundWithNamespace() throws Exception\n    {\n        CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(\"galt\").build();\n        try\n        {\n            client.start();\n            CuratorOp createOp1 = client.transactionOp().create().forPath(\"/foo\", \"one\".getBytes());\n            CuratorOp createOp2 = client.transactionOp().create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\", \"one\".getBytes());\n            CuratorOp setDataOp = client.transactionOp().setData().forPath(\"/foo\", \"two\".getBytes());\n            CuratorOp createOp3 = client.transactionOp().create().forPath(\"/foo/bar\");\n            CuratorOp deleteOp = client.transactionOp().delete().forPath(\"/foo/bar\");\n\n            final BlockingQueue<List<CuratorTransactionResult>> queue = Queues.newLinkedBlockingQueue();\n            BackgroundCallback callback = new BackgroundCallback()\n            {\n                @Override\n                public void processResult(CuratorFramework client, CuratorEvent event) throws Exception\n                {\n                    queue.add(event.getOpResults());\n                }\n            };\n            client.transaction().inBackground(callback).forOperations(createOp1, createOp2, setDataOp, createOp3, deleteOp);\n\n            Collection<CuratorTransactionResult> results = queue.poll(5, TimeUnit.SECONDS);\n\n            Assert.assertNotNull(results);\n            Assert.assertTrue(client.checkExists().forPath(\"/foo\") != null);\n            Assert.assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null);\n            Assert.assertEquals(client.getData().forPath(\"/foo\"), \"two\".getBytes());\n            Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") == null);\n\n            CuratorTransactionResult ephemeralResult = Iterables.find(results, CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE, \"/test-\"));\n            Assert.assertNotNull(ephemeralResult);\n            Assert.assertNotEquals(ephemeralResult.getResultPath(), \"/test-\");\n            Assert.assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"));\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(client);\n        }\n    }\n","realPath":"curator-framework/src/test/java/org/apache/curator/framework/imps/TestTransactionsNew.java","repoName":"curator","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"7a148288603ae5db0c232142f7dc07d43e01bea3","commitMessage":"@@@CURATOR-582: Migrate to jUnit 5.6 (#372)\n\n","date":"2020-10-20 21:18:25","modifiedFileCount":"125","status":"M","submitter":"Tam?s P?nzes"}]
