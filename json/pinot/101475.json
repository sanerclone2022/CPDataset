[{"authorTime":"2019-01-12 01:43:41","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void testDeadServers() throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._secconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._secconds += 3600;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n\n    segmentCompletionMgr._secconds += 4;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","date":"2019-01-12 01:43:41","endLine":697,"groupId":"20192","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeadServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/81/6fc49396df5ba19ac9cb07c05068b8350e49c1.src","preCode":"  public void testDeadServers() throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._secconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._secconds += 3600;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n\n    segmentCompletionMgr._secconds += 4;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"B"},{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void testCommitterFailure() throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._secconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._secconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS/1000;\n\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    segmentCompletionMgr._secconds += SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS/1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._secconds += 5;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n  }\n","date":"2019-01-12 01:43:41","endLine":766,"groupId":"9007","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitterFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/81/6fc49396df5ba19ac9cb07c05068b8350e49c1.src","preCode":"  public void testCommitterFailure() throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._secconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._secconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS/1000;\n\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    segmentCompletionMgr._secconds += SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS/1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._secconds += 5;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":701,"status":"B"}],"commitId":"b497851f3406b72b7f36596c362e1fcbcb4a162a","commitMessage":"@@@Move all files in com.linkedin to org.apache (#3680)\n\n","date":"2019-01-12 01:43:41","modifiedFileCount":"0","status":"B","submitter":"Neha Pawar"},{"authorTime":"2019-08-16 06:26:29","codes":[{"authorDate":"2019-08-16 06:26:29","commitOrder":2,"curCode":"  public void testDeadServers()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += 3600;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 4;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","date":"2019-08-16 06:26:29","endLine":741,"groupId":"20192","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeadServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/7d/d2944320e124366b1152f7c5e537661a06493b.src","preCode":"  public void testDeadServers()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._secconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._secconds += 3600;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._secconds += 4;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"},{"authorDate":"2019-08-16 06:26:29","commitOrder":2,"curCode":"  public void testCommitterFailure()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    segmentCompletionMgr._seconds +=\n        SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 5;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n  }\n","date":"2019-08-16 06:26:29","endLine":812,"groupId":"9007","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitterFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/7d/d2944320e124366b1152f7c5e537661a06493b.src","preCode":"  public void testCommitterFailure()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._secconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._secconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    segmentCompletionMgr._secconds +=\n        SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._secconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._secconds += 5;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":745,"status":"M"}],"commitId":"4f8ffc760f5187883a7ea7561c536dca2d0957b8","commitMessage":"@@@[Controller Separation] Add logic for lead controller resource (#4323)\n\n* Add logic for leveraging lead controller resource\n\n* Add logic for lead controller resource on controller side\n\n* Remove API design out of this PR\n\n* Move murmur2 functions to an util class in pinot-common\n\n* Use resource config to check whether resource is enabled\n\n* Create a customized MasterSlaveStateModelFactory instead of inherating one from Helix\n\n* Check resource config is enabled from server","date":"2019-08-16 06:26:29","modifiedFileCount":"38","status":"M","submitter":"Jialiang Li"},{"authorTime":"2020-06-04 04:01:24","codes":[{"authorDate":"2020-06-04 04:01:24","commitOrder":3,"curCode":"  public void testDeadServers()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, s2Offset);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += 3600;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 4;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","date":"2020-06-04 04:01:24","endLine":751,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeadServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/d8/dda562c50e259520148437a08d4acb79bff2dd.src","preCode":"  public void testDeadServers()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += 3600;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 4;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"M"},{"authorDate":"2020-06-04 04:01:24","commitOrder":3,"curCode":"  public void testCommitterFailure()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, s2Offset);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    segmentCompletionMgr._seconds +=\n        SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 5;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n  }\n","date":"2020-06-04 04:01:24","endLine":822,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitterFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/d8/dda562c50e259520148437a08d4acb79bff2dd.src","preCode":"  public void testCommitterFailure()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    Assert.assertEquals(response.getOffset(), s2Offset);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    segmentCompletionMgr._seconds +=\n        SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s1).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 5;\n    params = new Request.Params().withInstanceId(s3).withOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":755,"status":"M"}],"commitId":"056c930c6e62bbcd4cd3e8c659e16e815532dc4c","commitMessage":"@@@Changed the segment commit protocol to send/receive streamPartitionMs? (#5486)\n\n* Changed the segment commit protocol to send/receive streamPartitionMsgOffset\n\nUpdated the segment commit protocol so that new element streamPartitionMsgOffset\nis populated in requests (as request parameters) and in response (as JSON string element)\n\nThe server side has been modified to send the 'streamPartitionMsgOffset' as well as we the\n'offset' parameters to the controller. The controller looks for and prefers streamPartitionMsgOffset\nbut falls back to offset if the streamPartitionMsgOffset is not there.\n\nThe controller side.  in the repsonse message.  populates both of the elements.  and the server on\nthe receiver side does likewise -- preferring streamPartitionMsgOffset.\n\nAll callers into the protocol module have been modified to NOT set the offset field. Instead. \nonly set the streamPartitionMsgOffset field. The 'offset' value will be derived from\nstreamPartitionMsgOffset.\n\nAdded a test to make sure that the controller always generates both elements. Such a test was not\npossible in the server side at this time.  so verified manually.\n\nManually ran LLCClusterIntergrationTest by disabling populating `streamPartitionMsgOffset` on the\nserver side (old server/new controller) and on the controller respons side (new server/old controller)\n\nIssue #5359\n\n* Addressed review comments","date":"2020-06-04 04:01:24","modifiedFileCount":"8","status":"M","submitter":"Subbu Subramaniam"},{"authorTime":"2020-06-10 00:28:08","codes":[{"authorDate":"2020-06-10 00:28:08","commitOrder":4,"curCode":"  public void testDeadServers()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s3Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, s2Offset);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += 3600;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 4;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","date":"2020-06-10 00:28:08","endLine":801,"groupId":"8198","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeadServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/dd/8afdb0b66b55185a3410eb8127ef48b8728a2c.src","preCode":"  public void testDeadServers()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, s2Offset);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += 3600;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 4;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":756,"status":"M"},{"authorDate":"2020-06-10 00:28:08","commitOrder":4,"curCode":"  public void testCommitterFailure()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s3Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, s2Offset);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    segmentCompletionMgr._seconds +=\n        SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 5;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s2Offset.toString()).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n  }\n","date":"2020-06-10 00:28:08","endLine":872,"groupId":"8199","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitterFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/dd/8afdb0b66b55185a3410eb8127ef48b8728a2c.src","preCode":"  public void testCommitterFailure()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s3Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, s2Offset);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    segmentCompletionMgr._seconds +=\n        SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 5;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s2Offset).withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":805,"status":"M"}],"commitId":"957b28dbdee7cc90bb272be50ea2db6f28c99e53","commitMessage":"@@@Moved StreamPartitionMsgOffset to be an interface (#5506)\n\n* Moved StreamPartitionMsgOffset to be an interface\n\n- Changed StreamPartitionMsgOffset class to be an interface.\n- Introduced a LongMsgOffsetFactory class that can be used for Kafka. Other\n  streams will need to provide their own factory to create offsets of\n  various types. Keeping LongMsgOffsetFactory in spi.  so we can also use\n  it in tests. Alternative was to introduce this for each test.  but implement\n  one in kafka that does the same thing.\n- Introduced a new config 'stream.<type>.partition.offset.factory.class.name'\n  Stream providers need to set the offset factory class with this config key.\n- All classes now use StreamPartitionMsgOffset instead of 'long'.  except for\n  cases where the offset is received from the stream or the offset is being\n  read or written to persistent zk metadata.\n- Marked TODOs explicity on items still to be done to complete impleemntation\n  of generic offsets.\n\nIssue #5359\n\n* Enabled parsing stream partition msg offset in protocol\n\nAnd also added a backward cmpatibility test\n\n* Fix unit test failure","date":"2020-06-10 00:28:08","modifiedFileCount":"24","status":"M","submitter":"Subbu Subramaniam"},{"authorTime":"2021-08-21 17:02:19","codes":[{"authorDate":"2021-08-21 17:02:19","commitOrder":5,"curCode":"  public void testDeadServers()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    _segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(S_1).withStreamPartitionMsgOffset(_s1Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    _segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(S_2).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    _segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(S_3).withStreamPartitionMsgOffset(_s3Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, _s2Offset);\n\n    \r\n    _segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(S_2).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    _segmentCompletionMgr._seconds += 3600;\n    params = new Request.Params().withInstanceId(S_2).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(_fsmMap.containsKey(_segmentNameStr));\n\n    params = new Request.Params().withInstanceId(S_2).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(_fsmMap.containsKey(_segmentNameStr));\n\n    \r\n    _segmentCompletionMgr._seconds += 4;\n    params = new Request.Params().withInstanceId(S_2).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","date":"2021-08-21 17:02:19","endLine":837,"groupId":"101475","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testDeadServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/f5/2cc2d924ceea6617515aa279dcc84da724f008.src","preCode":"  public void testDeadServers()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s3Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, s2Offset);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += 3600;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.HOLD);\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 4;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), ControllerResponseStatus.COMMIT);\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":785,"status":"M"},{"authorDate":"2021-08-21 17:02:19","commitOrder":5,"curCode":"  public void testCommitterFailure()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    _segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(S_1).withStreamPartitionMsgOffset(_s1Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    _segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(S_2).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    _segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(S_3).withStreamPartitionMsgOffset(_s3Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, _s2Offset);\n    \r\n    _segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(S_2).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    _segmentCompletionMgr._seconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    params = new Request.Params().withInstanceId(S_1).withStreamPartitionMsgOffset(_s1Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    _segmentCompletionMgr._seconds +=\n        SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(S_1).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(_fsmMap.containsKey(_segmentNameStr));\n\n    \r\n    _segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(S_1).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    _segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(S_3).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    _segmentCompletionMgr._seconds += 5;\n    params = new Request.Params().withInstanceId(S_3).withStreamPartitionMsgOffset(_s2Offset.toString())\n        .withSegmentName(_segmentNameStr);\n    response = _segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(_fsmMap.containsKey(_segmentNameStr));\n  }\n","date":"2021-08-21 17:02:19","endLine":917,"groupId":"101475","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testCommitterFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/f5/2cc2d924ceea6617515aa279dcc84da724f008.src","preCode":"  public void testCommitterFailure()\n      throws Exception {\n    SegmentCompletionProtocol.Response response;\n    Request.Params params;\n    \r\n    final int startTimeSecs = 5;\n    segmentCompletionMgr._seconds = startTimeSecs;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s3Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n    verifyOffset(response, s2Offset);\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s2).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    segmentCompletionMgr._seconds += SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s1Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.CATCH_UP);\n\n    \r\n    segmentCompletionMgr._seconds +=\n        SegmentCompletionProtocol.getMaxSegmentCommitTimeMs() * SegmentCompletionProtocol.MAX_HOLD_TIME_MS / 1000;\n\n    \r\n    \r\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    Assert.assertFalse(fsmMap.containsKey(segmentNameStr));\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s1).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 1;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.HOLD);\n\n    \r\n    segmentCompletionMgr._seconds += 5;\n    params = new Request.Params().withInstanceId(s3).withStreamPartitionMsgOffset(s2Offset.toString())\n        .withSegmentName(segmentNameStr);\n    response = segmentCompletionMgr.segmentConsumed(params);\n    Assert.assertEquals(response.getStatus(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT);\n\n    \r\n    Assert.assertTrue(fsmMap.containsKey(segmentNameStr));\n  }\n","realPath":"pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":841,"status":"M"}],"commitId":"bb34406aaa205f5c85b88c928d477fd267eda1b4","commitMessage":"@@@reformat pinot-controller (#7331)\n\n","date":"2021-08-21 17:02:19","modifiedFileCount":"151","status":"M","submitter":"Xiang Fu"}]
