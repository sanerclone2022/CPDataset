[{"authorTime":"2021-04-14 08:20:05","codes":[{"authorDate":"2021-04-14 08:20:05","commitOrder":1,"curCode":"  private PinotDataBuffer getReadBufferFor(IndexKey key)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File file = getFileFor(key.name, key.type);\n    if (!file.exists()) {\n      throw new RuntimeException(\n          \"Could not find index for column: \" + key.name + \", type: \" + key.type + \", segment: \" + segmentDirectory\n              .toString());\n    }\n    PinotDataBuffer buffer = mapForReads(file, key.type.toString() + \".reader\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","date":"2021-04-14 08:20:05","endLine":96,"groupId":"16622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getReadBufferFor","params":"(IndexKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/06/7c0a801952a086fc5ed60639e9b19997c2a7b9.src","preCode":"  private PinotDataBuffer getReadBufferFor(IndexKey key)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File file = getFileFor(key.name, key.type);\n    if (!file.exists()) {\n      throw new RuntimeException(\n          \"Could not find index for column: \" + key.name + \", type: \" + key.type + \", segment: \" + segmentDirectory\n              .toString());\n    }\n    PinotDataBuffer buffer = mapForReads(file, key.type.toString() + \".reader\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","realPath":"pinot-segment-local/src/main/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectory.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2021-04-14 08:20:05","commitOrder":1,"curCode":"  private PinotDataBuffer getWriteBufferFor(IndexKey key, long sizeBytes)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File filename = getFileFor(key.name, key.type);\n    PinotDataBuffer buffer = mapForWrites(filename, sizeBytes, key.type.toString() + \".writer\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","date":"2021-04-14 08:20:05","endLine":108,"groupId":"11797","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getWriteBufferFor","params":"(IndexKeykey@longsizeBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/06/7c0a801952a086fc5ed60639e9b19997c2a7b9.src","preCode":"  private PinotDataBuffer getWriteBufferFor(IndexKey key, long sizeBytes)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File filename = getFileFor(key.name, key.type);\n    PinotDataBuffer buffer = mapForWrites(filename, sizeBytes, key.type.toString() + \".writer\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","realPath":"pinot-segment-local/src/main/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectory.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"f2e3446e75f1ec1d553805d03f6504f05b3e3c0e","commitMessage":"@@@Pinot SPI refactor contd: Added pinot-segment-local module. (#6761)\n\n- Added pinot-segment-local module that contains all the segment related\n  implementations for the existing local Pinot segment.\n\n- Modules that pinot-segment-local depends on:\n  - pinot-spi\n  - pinot-segment-spi\n  - pinot-common: This is temporary and needed as a lot of common utilities\n    are within pinot-common.\n  - External libraries: Datasketches. TDigest.  HLL.  Lucene.  larray.\n  - For test-scope:\n    - pinot-avro\n    - pinot-csv\n    - pinot-json\n    - pinot-spi\n    - pinot-yammer\n\n- Modules dependent on pinot-segment-local:\n  - pinot-core\n  - pinot-server.  pinot-perf: Only in test-scope\n\nMost moves/refactors done via IDE. Manual changes listed below:\n- Fix typo in Logger for RealtimeLuceneIndexReaderRefreshThread.\n- Moved builder specific util methods from StarTreeUtils to StarTreeBuilderUtils.\n  - `shouldRemove()`\n  - `remove()`\n\n- Made local copy of MAX_DOC_PER_CALL inside of PinotDataBitSetV2.  as it is currently\n  defined in DocIdSetPlanNode.  but segment related code depends on it.\n\n- Made local copy of DEFAULT_TDIGEST_COMPRESSION in PercentileTDigestValueAggregator. \n  originally defined in PercentileTDigestAggregationFunction.\n\n- Made local copy of DEFAULT_MAX_ERROR in PercentileEstValueAggregator.  originally defined in\n  PercentileEstAggregationFunction.\n\n- Split QueryContextRequestUtils into two files.  the new one calle RequestContextConverterUtils\n  is in pinot-common.  as it has utility methods related to classes in pinot-common.\n\n- Created CustomSerDeUtils class.  that has code from ObjectSerDeUtils related to ValueAggregator.\n  This is again to avoid pulling in dependencies from pinot-core into pinot-segment-local.\n\n- Removed reference of Operator in javadoc of EarlyTerminationException.  as it is\n  was causing reference dependency to pinot-core.\n\n- Renamed SegmentGenerationWithNullValueTest to SegmentWithNullValueTest as it has test for segment\n  generation as well as querying.  and can only be housed in pinot-core atm.\n\n- The clas RealtimeSegmentStatsHistory is ser/de using Java object ser/de.  which makes moving the file\n  out of its current package backward incompatible. Addressed this issue by using a custom object\n  input stream that replaces the old package name with new one when deserializing.\n\nMoves done to resolve cross dependency issues:\n- Following moved to pinot-segment-local utils package:\n  - IngestionUtils\n  - TableConfigUtils\n  - SchemaUtils\n  - SegmentTestUtils: This depends on AvroSchemaUtil.  added dependency on pinot-avro in test-scope.\n\n- Following moved to pinot-common:\n  - FilterContext\n  - ExpressionContext\n  - FunctionContext\n  - Predicate\n\n- Following moved to pinot-spi\n  - ReadMode\n  - CommonConstants\n  - ArrayCopyUtils\n  - BadQueryException moved\n  - EarlyTerminationException\n\n- Copied necessary data files in resources/data from pinot-core to pinot-segment-local.","date":"2021-04-14 08:20:05","modifiedFileCount":"562","status":"B","submitter":"Mayank Shrivastava"},{"authorTime":"2021-04-14 08:20:05","codes":[{"authorDate":"2021-05-29 01:20:12","commitOrder":2,"curCode":"  private PinotDataBuffer getReadBufferFor(IndexKey key)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File file = getFileFor(key.name, key.type);\n    if (!file.exists()) {\n      throw new RuntimeException(\n          \"Could not find index for column: \" + key.name + \", type: \" + key.type + \", segment: \" + _segmentDirectory\n              .toString());\n    }\n    PinotDataBuffer buffer = mapForReads(file, key.type.toString() + \".reader\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","date":"2021-05-29 01:20:12","endLine":121,"groupId":"16622","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getReadBufferFor","params":"(IndexKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/35/c5583baefdf4130f2fd5611cfe01800fb7852b.src","preCode":"  private PinotDataBuffer getReadBufferFor(IndexKey key)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File file = getFileFor(key.name, key.type);\n    if (!file.exists()) {\n      throw new RuntimeException(\n          \"Could not find index for column: \" + key.name + \", type: \" + key.type + \", segment: \" + segmentDirectory\n              .toString());\n    }\n    PinotDataBuffer buffer = mapForReads(file, key.type.toString() + \".reader\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","realPath":"pinot-segment-local/src/main/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectory.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2021-04-14 08:20:05","commitOrder":2,"curCode":"  private PinotDataBuffer getWriteBufferFor(IndexKey key, long sizeBytes)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File filename = getFileFor(key.name, key.type);\n    PinotDataBuffer buffer = mapForWrites(filename, sizeBytes, key.type.toString() + \".writer\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","date":"2021-04-14 08:20:05","endLine":108,"groupId":"11797","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getWriteBufferFor","params":"(IndexKeykey@longsizeBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/06/7c0a801952a086fc5ed60639e9b19997c2a7b9.src","preCode":"  private PinotDataBuffer getWriteBufferFor(IndexKey key, long sizeBytes)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File filename = getFileFor(key.name, key.type);\n    PinotDataBuffer buffer = mapForWrites(filename, sizeBytes, key.type.toString() + \".writer\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","realPath":"pinot-segment-local/src/main/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectory.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"}],"commitId":"57d1a2ae7878b8b4132b80d2c5fbfeff1b2dabf0","commitMessage":"@@@Remove constructor from base class ColumnIndexDirectory (#6996)\n\n","date":"2021-05-29 01:20:12","modifiedFileCount":"4","status":"M","submitter":"Neha Pawar"},{"authorTime":"2021-08-17 07:02:28","codes":[{"authorDate":"2021-08-17 07:02:28","commitOrder":3,"curCode":"  private PinotDataBuffer getReadBufferFor(IndexKey key)\n      throws IOException {\n    if (_indexBuffers.containsKey(key)) {\n      return _indexBuffers.get(key);\n    }\n\n    File file = getFileFor(key.name, key.type);\n    if (!file.exists()) {\n      throw new RuntimeException(\n          \"Could not find index for column: \" + key.name + \", type: \" + key.type + \", segment: \" + _segmentDirectory\n              .toString());\n    }\n    PinotDataBuffer buffer = mapForReads(file, key.type.toString() + \".reader\");\n    _indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","date":"2021-08-17 07:02:28","endLine":137,"groupId":"16622","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getReadBufferFor","params":"(IndexKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/08/1abf3d5462d22d42f55e4f6dcb6cdbf253e671.src","preCode":"  private PinotDataBuffer getReadBufferFor(IndexKey key)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File file = getFileFor(key.name, key.type);\n    if (!file.exists()) {\n      throw new RuntimeException(\n          \"Could not find index for column: \" + key.name + \", type: \" + key.type + \", segment: \" + _segmentDirectory\n              .toString());\n    }\n    PinotDataBuffer buffer = mapForReads(file, key.type.toString() + \".reader\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","realPath":"pinot-segment-local/src/main/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectory.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2021-08-17 07:02:28","commitOrder":3,"curCode":"  private PinotDataBuffer getWriteBufferFor(IndexKey key, long sizeBytes)\n      throws IOException {\n    if (_indexBuffers.containsKey(key)) {\n      return _indexBuffers.get(key);\n    }\n\n    File filename = getFileFor(key.name, key.type);\n    PinotDataBuffer buffer = mapForWrites(filename, sizeBytes, key.type.toString() + \".writer\");\n    _indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","date":"2021-08-17 07:02:28","endLine":149,"groupId":"11797","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getWriteBufferFor","params":"(IndexKeykey@longsizeBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/08/1abf3d5462d22d42f55e4f6dcb6cdbf253e671.src","preCode":"  private PinotDataBuffer getWriteBufferFor(IndexKey key, long sizeBytes)\n      throws IOException {\n    if (indexBuffers.containsKey(key)) {\n      return indexBuffers.get(key);\n    }\n\n    File filename = getFileFor(key.name, key.type);\n    PinotDataBuffer buffer = mapForWrites(filename, sizeBytes, key.type.toString() + \".writer\");\n    indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","realPath":"pinot-segment-local/src/main/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectory.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"12e5bcd37350a3e85a9e9630a7f6de05d91b5a24","commitMessage":"@@@add method to get column indices created in segment folder (#7297)\n\nThis method expose the column indices created in local segment folder.  which can be compared with indices in table config to decide which indices to remove","date":"2021-08-17 07:02:28","modifiedFileCount":"7","status":"M","submitter":"Xiaobing"},{"authorTime":"2021-08-18 08:48:04","codes":[{"authorDate":"2021-08-18 08:48:04","commitOrder":4,"curCode":"  private PinotDataBuffer getReadBufferFor(IndexKey key)\n      throws IOException {\n    if (_indexBuffers.containsKey(key)) {\n      return _indexBuffers.get(key);\n    }\n\n    File file = getFileFor(key._name, key._type);\n    if (!file.exists()) {\n      throw new RuntimeException(\n          \"Could not find index for column: \" + key._name + \", type: \" + key._type + \", segment: \" + _segmentDirectory\n              .toString());\n    }\n    PinotDataBuffer buffer = mapForReads(file, key._type.toString() + \".reader\");\n    _indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","date":"2021-08-18 08:48:04","endLine":137,"groupId":"102074","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getReadBufferFor","params":"(IndexKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/05/da061d5272366f05ec8cad7d968e067235d450.src","preCode":"  private PinotDataBuffer getReadBufferFor(IndexKey key)\n      throws IOException {\n    if (_indexBuffers.containsKey(key)) {\n      return _indexBuffers.get(key);\n    }\n\n    File file = getFileFor(key.name, key.type);\n    if (!file.exists()) {\n      throw new RuntimeException(\n          \"Could not find index for column: \" + key.name + \", type: \" + key.type + \", segment: \" + _segmentDirectory\n              .toString());\n    }\n    PinotDataBuffer buffer = mapForReads(file, key.type.toString() + \".reader\");\n    _indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","realPath":"pinot-segment-local/src/main/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectory.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2021-08-18 08:48:04","commitOrder":4,"curCode":"  private PinotDataBuffer getWriteBufferFor(IndexKey key, long sizeBytes)\n      throws IOException {\n    if (_indexBuffers.containsKey(key)) {\n      return _indexBuffers.get(key);\n    }\n\n    File filename = getFileFor(key._name, key._type);\n    PinotDataBuffer buffer = mapForWrites(filename, sizeBytes, key._type.toString() + \".writer\");\n    _indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","date":"2021-08-18 08:48:04","endLine":149,"groupId":"102074","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getWriteBufferFor","params":"(IndexKeykey@longsizeBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/05/da061d5272366f05ec8cad7d968e067235d450.src","preCode":"  private PinotDataBuffer getWriteBufferFor(IndexKey key, long sizeBytes)\n      throws IOException {\n    if (_indexBuffers.containsKey(key)) {\n      return _indexBuffers.get(key);\n    }\n\n    File filename = getFileFor(key.name, key.type);\n    PinotDataBuffer buffer = mapForWrites(filename, sizeBytes, key.type.toString() + \".writer\");\n    _indexBuffers.put(key, buffer);\n    return buffer;\n  }\n","realPath":"pinot-segment-local/src/main/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectory.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"c15249484a5bbe0e9fbbee311218c163a26dd263","commitMessage":"@@@add underscore to obj vars (#7316)\n\nRename vars in IndexKey and IndexEntry","date":"2021-08-18 08:48:04","modifiedFileCount":"5","status":"M","submitter":"Xiaobing"}]
