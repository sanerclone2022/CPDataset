[{"authorTime":"2019-01-12 01:43:41","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        IdentifierAstNode node = (IdentifierAstNode) childNode;\n        _identifier = node.getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one identifier.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one function.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else {\n      super.addChild(childNode);\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":76,"groupId":"9622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addChild","params":"(AstNodechildNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/bd/9c9cd78b29b3afa84043b4d75ff9de61529ef5.src","preCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        IdentifierAstNode node = (IdentifierAstNode) childNode;\n        _identifier = node.getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one identifier.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one function.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else {\n      super.addChild(childNode);\n    }\n  }\n","realPath":"pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/InPredicateAstNode.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        _identifier = ((IdentifierAstNode) childNode).getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"Comparison between two columns is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between function and column is not supported.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"Comparison between two functions is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between column and function is not supported.\");\n      }\n    } else if (childNode instanceof LiteralAstNode) {\n      LiteralAstNode node = (LiteralAstNode) childNode;\n      if (_literal == null) {\n        _literal = node;\n      } else {\n        throw new Pql2CompilationException(\"Comparison between two constants is not supported.\");\n      }\n    }\n\n    \r\n    super.addChild(childNode);\n  }\n","date":"2019-01-12 01:43:41","endLine":76,"groupId":"20645","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addChild","params":"(AstNodechildNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/42/1a664a79046ab2fc8d3ea22ec3ed560cb7c12a.src","preCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        _identifier = ((IdentifierAstNode) childNode).getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"Comparison between two columns is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between function and column is not supported.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"Comparison between two functions is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between column and function is not supported.\");\n      }\n    } else if (childNode instanceof LiteralAstNode) {\n      LiteralAstNode node = (LiteralAstNode) childNode;\n      if (_literal == null) {\n        _literal = node;\n      } else {\n        throw new Pql2CompilationException(\"Comparison between two constants is not supported.\");\n      }\n    }\n\n    \r\n    super.addChild(childNode);\n  }\n","realPath":"pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/ComparisonPredicateAstNode.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"b497851f3406b72b7f36596c362e1fcbcb4a162a","commitMessage":"@@@Move all files in com.linkedin to org.apache (#3680)\n\n","date":"2019-01-12 01:43:41","modifiedFileCount":"0","status":"B","submitter":"Neha Pawar"},{"authorTime":"2019-06-29 05:30:00","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":2,"curCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        IdentifierAstNode node = (IdentifierAstNode) childNode;\n        _identifier = node.getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one identifier.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one function.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else {\n      super.addChild(childNode);\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":76,"groupId":"9622","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addChild","params":"(AstNodechildNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/bd/9c9cd78b29b3afa84043b4d75ff9de61529ef5.src","preCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        IdentifierAstNode node = (IdentifierAstNode) childNode;\n        _identifier = node.getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one identifier.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one function.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else {\n      super.addChild(childNode);\n    }\n  }\n","realPath":"pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/InPredicateAstNode.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2019-06-29 05:30:00","commitOrder":2,"curCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        _identifier = ((IdentifierAstNode) childNode).getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"Comparison between two columns is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between function and column is not supported.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n        _identifier = TransformExpressionTree.getStandardExpression(childNode);\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"Comparison between two functions is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between column and function is not supported.\");\n      }\n    } else if (childNode instanceof LiteralAstNode) {\n      LiteralAstNode node = (LiteralAstNode) childNode;\n      if (_literal == null) {\n        _literal = node;\n      } else {\n        throw new Pql2CompilationException(\"Comparison between two constants is not supported.\");\n      }\n    }\n\n    \r\n    super.addChild(childNode);\n  }\n","date":"2019-06-29 05:30:00","endLine":80,"groupId":"2977","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addChild","params":"(AstNodechildNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/25/70c5863061fb6a9f74589bd6b0ff395a54bf95.src","preCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        _identifier = ((IdentifierAstNode) childNode).getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"Comparison between two columns is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between function and column is not supported.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"Comparison between two functions is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between column and function is not supported.\");\n      }\n    } else if (childNode instanceof LiteralAstNode) {\n      LiteralAstNode node = (LiteralAstNode) childNode;\n      if (_literal == null) {\n        _literal = node;\n      } else {\n        throw new Pql2CompilationException(\"Comparison between two constants is not supported.\");\n      }\n    }\n\n    \r\n    super.addChild(childNode);\n  }\n","realPath":"pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/ComparisonPredicateAstNode.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"dc636437253118e4b0b3829033aeae27ed4fe712","commitMessage":"@@@Adding support for udf/expression in filter predicates (#4365)\n\n* Adding support for udf/expression in filter predicates\n\n* Addressing review comments and adding test case for nested expressions\n","date":"2019-06-29 05:30:00","modifiedFileCount":"14","status":"M","submitter":"Kishore Gopalakrishna"},{"authorTime":"2019-06-29 05:30:00","codes":[{"authorDate":"2020-06-09 02:44:24","commitOrder":3,"curCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        IdentifierAstNode node = (IdentifierAstNode) childNode;\n        _identifier = node.getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one identifier.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n        _identifier = TransformExpressionTree.getStandardExpression(childNode);\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one function.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else {\n      super.addChild(childNode);\n    }\n  }\n","date":"2020-06-09 02:44:24","endLine":81,"groupId":"9622","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addChild","params":"(AstNodechildNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/39/a28c207919f0e4265f6ff372a75bf8f1276e78.src","preCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        IdentifierAstNode node = (IdentifierAstNode) childNode;\n        _identifier = node.getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one identifier.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one function.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else {\n      super.addChild(childNode);\n    }\n  }\n","realPath":"pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/InPredicateAstNode.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-06-29 05:30:00","commitOrder":3,"curCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        _identifier = ((IdentifierAstNode) childNode).getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"Comparison between two columns is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between function and column is not supported.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n        _identifier = TransformExpressionTree.getStandardExpression(childNode);\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"Comparison between two functions is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between column and function is not supported.\");\n      }\n    } else if (childNode instanceof LiteralAstNode) {\n      LiteralAstNode node = (LiteralAstNode) childNode;\n      if (_literal == null) {\n        _literal = node;\n      } else {\n        throw new Pql2CompilationException(\"Comparison between two constants is not supported.\");\n      }\n    }\n\n    \r\n    super.addChild(childNode);\n  }\n","date":"2019-06-29 05:30:00","endLine":80,"groupId":"2977","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addChild","params":"(AstNodechildNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/25/70c5863061fb6a9f74589bd6b0ff395a54bf95.src","preCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        _identifier = ((IdentifierAstNode) childNode).getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"Comparison between two columns is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between function and column is not supported.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n        _identifier = TransformExpressionTree.getStandardExpression(childNode);\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"Comparison between two functions is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between column and function is not supported.\");\n      }\n    } else if (childNode instanceof LiteralAstNode) {\n      LiteralAstNode node = (LiteralAstNode) childNode;\n      if (_literal == null) {\n        _literal = node;\n      } else {\n        throw new Pql2CompilationException(\"Comparison between two constants is not supported.\");\n      }\n    }\n\n    \r\n    super.addChild(childNode);\n  }\n","realPath":"pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/ComparisonPredicateAstNode.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"c139488a6c33e4328b13c24fbfd689848c816849","commitMessage":"@@@Support expression as the left-hand side for BETWEEN and IN clause (#5502)\n\nAdd PQL compiler support for left-hand expression for BETWEEN and IN","date":"2020-06-09 02:44:24","modifiedFileCount":"3","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-06-18 07:06:32","codes":[{"authorDate":"2020-06-18 07:06:32","commitOrder":4,"curCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one column/function\");\n      }\n      _identifier = ((IdentifierAstNode) childNode).getName();\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_identifier != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one column/function\");\n      }\n      _identifier = TransformExpressionTree.getStandardExpression(childNode);\n    } else {\n      super.addChild(childNode);\n    }\n  }\n","date":"2020-06-18 07:06:32","endLine":71,"groupId":"101286","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"addChild","params":"(AstNodechildNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/ec/ffeec67d337228ea5b797ef4b0c5865c059936.src","preCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        IdentifierAstNode node = (IdentifierAstNode) childNode;\n        _identifier = node.getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one identifier.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n        _identifier = TransformExpressionTree.getStandardExpression(childNode);\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"IN predicate has more than one function.\");\n      } else {\n        throw new Pql2CompilationException(\"IN predicate has both identifier and function.\");\n      }\n    } else {\n      super.addChild(childNode);\n    }\n  }\n","realPath":"pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/InPredicateAstNode.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2020-06-18 07:06:32","commitOrder":4,"curCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier != null) {\n        throw new Pql2CompilationException(\"Comparison predicate has more than one column/function\");\n      }\n      _identifier = ((IdentifierAstNode) childNode).getName();\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_identifier != null) {\n        throw new Pql2CompilationException(\"Comparison predicate has more than one column/function\");\n      }\n      _identifier = TransformExpressionTree.getStandardExpression(childNode);\n    } else if (childNode instanceof LiteralAstNode) {\n      if (_literal != null) {\n        throw new Pql2CompilationException(\"Comparison between two constants is not supported\");\n      }\n      _literal = (LiteralAstNode) childNode;\n    }\n\n    \r\n    super.addChild(childNode);\n  }\n","date":"2020-06-18 07:06:32","endLine":74,"groupId":"101286","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addChild","params":"(AstNodechildNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/e1/74fd8b798dac79539cd8d709e209bdc37f58b1.src","preCode":"  public void addChild(AstNode childNode) {\n    if (childNode instanceof IdentifierAstNode) {\n      if (_identifier == null && _function == null) {\n        _identifier = ((IdentifierAstNode) childNode).getName();\n      } else if (_identifier != null) {\n        throw new Pql2CompilationException(\"Comparison between two columns is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between function and column is not supported.\");\n      }\n    } else if (childNode instanceof FunctionCallAstNode) {\n      if (_function == null && _identifier == null) {\n        _function = (FunctionCallAstNode) childNode;\n        _identifier = TransformExpressionTree.getStandardExpression(childNode);\n      } else if (_function != null) {\n        throw new Pql2CompilationException(\"Comparison between two functions is not supported.\");\n      } else {\n        throw new Pql2CompilationException(\"Comparison between column and function is not supported.\");\n      }\n    } else if (childNode instanceof LiteralAstNode) {\n      LiteralAstNode node = (LiteralAstNode) childNode;\n      if (_literal == null) {\n        _literal = node;\n      } else {\n        throw new Pql2CompilationException(\"Comparison between two constants is not supported.\");\n      }\n    }\n\n    \r\n    super.addChild(childNode);\n  }\n","realPath":"pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/ComparisonPredicateAstNode.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"5b0b050e46186af94feedfec18edd59fffab5373","commitMessage":"@@@Clean up the code for HAVING clause handling (#5570)\n\nHAVING clause does not apply to PQL GROUP-BY semantic where each aggregation column is ordered individually\nClean up the code for HAVING clause handling which can generate wrong results\nStop accepting PQL queries with HAVING clause\n\nWill add back HAVING clause for SQL semantic after migrating from PQL to SQL","date":"2020-06-18 07:06:32","modifiedFileCount":"17","status":"M","submitter":"Xiaotian (Jackie) Jiang"}]
