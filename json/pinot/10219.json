[{"authorTime":"2019-12-05 06:55:35","codes":[{"authorDate":"2019-12-05 06:55:35","commitOrder":1,"curCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"600729221\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"475\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","date":"2019-12-05 06:55:35","endLine":554,"groupId":"1699","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercentile90MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/f9/916292d52e4bfda630183e2ac73e36d0fe14ce.src","preCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"600729221\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"475\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":511,"status":"B"},{"authorDate":"2019-12-05 06:55:35","commitOrder":1,"curCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"711508739\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"353\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","date":"2019-12-05 06:55:35","endLine":646,"groupId":"5515","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercentile99MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/f9/916292d52e4bfda630183e2ac73e36d0fe14ce.src","preCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"711508739\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"353\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":603,"status":"B"}],"commitId":"3e285e0560a6ad6b9a94c8ca8bd8b253f85a7ff6","commitMessage":"@@@Results in ResultTable if responseFormat=sql (#4877)\n\n","date":"2019-12-05 06:55:35","modifiedFileCount":"12","status":"B","submitter":"Neha Pawar"},{"authorTime":"2020-02-05 05:38:13","codes":[{"authorDate":"2020-02-05 05:38:13","commitOrder":2,"curCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"600729221\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"475\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","date":"2020-02-05 05:38:13","endLine":554,"groupId":"1699","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercentile90MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/34/2f378fead6e160d45b52c20c9f5a65cec06987.src","preCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"600729221\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"475\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":511,"status":"M"},{"authorDate":"2020-02-05 05:38:13","commitOrder":2,"curCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"711508739\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"353\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","date":"2020-02-05 05:38:13","endLine":646,"groupId":"5515","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercentile99MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/34/2f378fead6e160d45b52c20c9f5a65cec06987.src","preCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"711508739\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"353\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":603,"status":"M"}],"commitId":"f515ae4bdf7fc5b3974f6f477e1f95bedb93eeef","commitMessage":"@@@Set alias name in resultTable schema names (#5033)\n\n* Set alias name in response schema names\n\n* Adding test for cast with reduce\n\n* Address comments\n\n* Address comments\n\n* Address comments\n","date":"2020-02-05 05:38:13","modifiedFileCount":"17","status":"M","submitter":"Xiang Fu"},{"authorTime":"2020-04-04 06:27:25","codes":[{"authorDate":"2020-04-04 06:27:25","commitOrder":3,"curCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"600729221\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"475\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","date":"2020-04-04 06:27:25","endLine":562,"groupId":"1699","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercentile90MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/dc/f5d7b53c9ee6f009f61e92becaa9e128ded56d.src","preCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"600729221\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"475\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":519,"status":"M"},{"authorDate":"2020-04-04 06:27:25","commitOrder":3,"curCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"711508739\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"353\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","date":"2020-04-04 06:27:25","endLine":654,"groupId":"5515","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercentile99MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/dc/f5d7b53c9ee6f009f61e92becaa9e128ded56d.src","preCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1089104L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"711508739\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"353\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"ac327bb7aa78fc5f3acf5c8bc84c9add2ade0674","commitMessage":"@@@Optimize ExpressionFilterOperator (#5132)\n\n1. Add BYTES type and multi-value support\n2. Directly consturct DocIdSet to save the overhead of filtering\n3. Remove the redundant isMatch() for all scan based iterators\n\nAlso changed the numEntriesScannedInFilter for MV column to actual values fetched instead of values evaluated and added some TODOs for future filter optimization","date":"2020-04-04 06:27:25","modifiedFileCount":"21","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-05-21 12:52:37","codes":[{"authorDate":"2020-05-21 12:52:37","commitOrder":4,"curCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"118380643\", 5392989.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"371\", 5380174.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","date":"2020-05-21 12:52:37","endLine":567,"groupId":"17311","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercentile90MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/e4/e1220e98f1fb8a21625ee1debfa24e0465081d.src","preCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"600729221\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"475\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"M"},{"authorDate":"2020-05-21 12:52:37","commitOrder":4,"curCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"2057094396\", 5393010.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"476\", 5394180.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","date":"2020-05-21 12:52:37","endLine":659,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercentile99MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/e4/e1220e98f1fb8a21625ee1debfa24e0465081d.src","preCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"711508739\", 2147483647.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"353\", 2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 800000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"M"}],"commitId":"70e83837aee25c381bcc2a6eb9c7129d17f8a38e","commitMessage":"@@@Fix flaky test for InterSegmentResultTableMultiValueQueriesTest (#5410)\n\n* Fix flaky test for InterSegmentResultTableMultiValueQueriesTest\n\nThe test was checking 1st row of the group by result.  where all\n10 aggregated group by values are the same. So.  sometimes the test\nfails because the order of 10 resulting rows is somtimes different.\nFixing this issue by adding \"TOP 1\" to have deterministic result.\n\n* Updated the test to add the filter and changed the result accordingly","date":"2020-05-21 12:52:37","modifiedFileCount":"1","status":"M","submitter":"Seunghyun Lee"},{"authorTime":"2020-05-22 05:10:07","codes":[{"authorDate":"2020-05-22 05:10:07","commitOrder":5,"curCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows,\n        expectedResultsSize, dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows,\n        expectedResultsSize, dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + FILTER + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"118380643\", 5392989.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows,\n        expectedResultsSize, dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + FILTER + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"371\", 5380174.0});\n    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows,\n        expectedResultsSize, dataSchema);\n  }\n","date":"2020-05-22 05:10:07","endLine":524,"groupId":"10219","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercentile90MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/06/295742ac92718e42ae9df968c8f9a59cd9b821.src","preCode":"  public void testPercentile90MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE90MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"118380643\", 5392989.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile90mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"371\", 5380174.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"M"},{"authorDate":"2020-05-22 05:10:07","commitOrder":5,"curCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows,\n        expectedResultsSize, dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows,\n        expectedResultsSize, dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + FILTER + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"2057094396\", 5393010.0});\n    expectedResultsSize = 10;\n    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows,\n        expectedResultsSize, dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + FILTER + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"476\", 5394180.0});\n    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows,\n        expectedResultsSize, dataSchema);\n  }\n","date":"2020-05-22 05:10:07","endLine":608,"groupId":"10219","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercentile99MV","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/06/295742ac92718e42ae9df968c8f9a59cd9b821.src","preCode":"  public void testPercentile99MV() {\n    DataSchema dataSchema;\n    List<Object[]> rows;\n    int expectedResultsSize;\n    String query = \"SELECT PERCENTILE99MV(column6) FROM testTable\";\n    Map<String, String> queryOptions = new HashMap<>(2);\n    queryOptions.put(CommonConstants.Broker.Request.QueryOptionKey.RESPONSE_FORMAT, CommonConstants.Broker.Request.SQL);\n\n    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 400000L, 0L, 400000L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + getFilter(), queryOptions);\n    rows = new ArrayList<>();\n    rows.add(new Object[]{2147483647.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 62480L, 1101664L, 62480L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + SV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column8\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"2057094396\", 5393010.0});\n    expectedResultsSize = 1;\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n\n    brokerResponse = getBrokerResponseForPqlQuery(query + MV_GROUP_BY, queryOptions);\n    dataSchema = new DataSchema(new String[]{\"column7\", \"percentile99mv(column6)\"},\n        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.DOUBLE});\n    rows = new ArrayList<>();\n    rows.add(new Object[]{\"476\", 5394180.0});\n    QueriesTestUtils\n        .testInterSegmentResultTable(brokerResponse, 174560L, 426752L, 349120L, 400000L, rows, expectedResultsSize,\n            dataSchema);\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":569,"status":"M"}],"commitId":"ce534d980baca11f3330f8861399c973629c7e50","commitMessage":"@@@Improving InterSegmentResultTableMultiValueQueriesTest (#5426)\n\n1. remove top 1\n2. separate variable for filter\n3. Applied auto formatting","date":"2020-05-22 05:10:07","modifiedFileCount":"1","status":"M","submitter":"Seunghyun Lee"}]
