[{"authorTime":"2019-01-12 01:43:41","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void aggregate(int length, @Nonnull AggregationResultHolder aggregationResultHolder,\n      @Nonnull BlockValSet... blockValSets) {\n    HyperLogLog hyperLogLog = getHyperLogLog(aggregationResultHolder);\n\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":94,"groupId":"18722","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(intlength@@NonnullAggregationResultHolderaggregationResultHolder@@NonnullBlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/d3/96db12620798af5a309c74d4799ddbc42dd842.src","preCode":"  public void aggregate(int length, @Nonnull AggregationResultHolder aggregationResultHolder,\n      @Nonnull BlockValSet... blockValSets) {\n    HyperLogLog hyperLogLog = getHyperLogLog(aggregationResultHolder);\n\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void aggregateGroupBySV(int length, @Nonnull int[] groupKeyArray,\n      @Nonnull GroupByResultHolder groupByResultHolder, @Nonnull BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":150,"groupId":"18723","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupBySV","params":"(intlength@@Nonnullint[]groupKeyArray@@NonnullGroupByResultHoldergroupByResultHolder@@NonnullBlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/d3/96db12620798af5a309c74d4799ddbc42dd842.src","preCode":"  public void aggregateGroupBySV(int length, @Nonnull int[] groupKeyArray,\n      @Nonnull GroupByResultHolder groupByResultHolder, @Nonnull BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"b497851f3406b72b7f36596c362e1fcbcb4a162a","commitMessage":"@@@Move all files in com.linkedin to org.apache (#3680)\n\n","date":"2019-01-12 01:43:41","modifiedFileCount":"0","status":"B","submitter":"Neha Pawar"},{"authorTime":"2019-09-26 10:02:10","codes":[{"authorDate":"2019-09-26 10:02:10","commitOrder":2,"curCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder, BlockValSet... blockValSets) {\n    HyperLogLog hyperLogLog = getHyperLogLog(aggregationResultHolder);\n\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-09-26 10:02:10","endLine":96,"groupId":"18722","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(intlength@AggregationResultHolderaggregationResultHolder@BlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/5d/85563ea09f29e7b59c3c77bece9d52c753439b.src","preCode":"  public void aggregate(int length, @Nonnull AggregationResultHolder aggregationResultHolder,\n      @Nonnull BlockValSet... blockValSets) {\n    HyperLogLog hyperLogLog = getHyperLogLog(aggregationResultHolder);\n\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-09-26 10:02:10","commitOrder":2,"curCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-09-26 10:02:10","endLine":152,"groupId":"18723","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupBySV","params":"(intlength@int[]groupKeyArray@GroupByResultHoldergroupByResultHolder@BlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/5d/85563ea09f29e7b59c3c77bece9d52c753439b.src","preCode":"  public void aggregateGroupBySV(int length, @Nonnull int[] groupKeyArray,\n      @Nonnull GroupByResultHolder groupByResultHolder, @Nonnull BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"4b5c5acba103a7106aa361dde634d2020a2899ce","commitMessage":"@@@Misc fixes for aggregation functions (#4579)\n\n- Make MV functions call the correct visit method\n- Simplify the DistinctCountRawHLLMVAggregationFunction\n- Move AggregationFunctionTypeTest to correct package\n- Remove @Nonnull annotation\n- Optimize imports","date":"2019-09-26 10:02:10","modifiedFileCount":"51","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2019-10-04 02:21:23","codes":[{"authorDate":"2019-10-04 02:21:23","commitOrder":3,"curCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder, BlockValSet... blockValSets) {\n    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n\n    DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-10-04 02:21:23","endLine":96,"groupId":"11795","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(intlength@AggregationResultHolderaggregationResultHolder@BlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/be/70bfdaf1bbee108194bd0a26d4b53d871861a5.src","preCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder, BlockValSet... blockValSets) {\n    HyperLogLog hyperLogLog = getHyperLogLog(aggregationResultHolder);\n\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-10-04 02:21:23","commitOrder":3,"curCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-10-04 02:21:23","endLine":152,"groupId":"11795","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupBySV","params":"(intlength@int[]groupKeyArray@GroupByResultHoldergroupByResultHolder@BlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/be/70bfdaf1bbee108194bd0a26d4b53d871861a5.src","preCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValues = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValues = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValues = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValues = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValues = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValues[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"48edd8d3207e29152c4ae848823438a15450e797","commitMessage":"@@@Support serialized BYTES data with non-default factor (#4666)\n\nFor the following approximate aggregation functions.  the function allows a factor to tune the result size and accuracy:\n- DistinctCountHLL - log2m for HyperLogLog\n- PercentileEst - max error for QuantileDigest\n- PercentileTDigest - compression for TDigest\nWhen user provides serialized Object via BYTES.  this factor is embedded inside the serialized bytes.\nIn that case.  we should pick the one inside the serialized Object instead of using the default one.\n\nAdded SerializedBytesQueriesTest to test the behavior","date":"2019-10-04 02:21:23","modifiedFileCount":"10","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-04-17 08:48:57","codes":[{"authorDate":"2020-04-17 08:48:57","commitOrder":4,"curCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder, Map<String, BlockValSet> blockValSetMap) {\n    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n\n    BlockValSet blockValSet = blockValSetMap.get(_column);\n    DataType valueType = blockValSet.getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2020-04-17 08:48:57","endLine":101,"groupId":"11795","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(intlength@AggregationResultHolderaggregationResultHolder@Map<String@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/ee/e8db40ec683aafba64c414434062dcaee5fc0a.src","preCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder, BlockValSet... blockValSets) {\n    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n\n    DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-04-17 08:48:57","commitOrder":4,"curCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      Map<String, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_column);\n    DataType valueType = blockValSet.getValueType();\n\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2020-04-17 08:48:57","endLine":159,"groupId":"11795","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupBySV","params":"(intlength@int[]groupKeyArray@GroupByResultHoldergroupByResultHolder@Map<String@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/ee/e8db40ec683aafba64c414434062dcaee5fc0a.src","preCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSets[0].getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSets[0].getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSets[0].getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSets[0].getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSets[0].getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"2a311119c13933a65baaab9a7120f0d18c767a3f","commitMessage":"@@@Support Aggregation functions with multiple arguments. (#5259)\n\nThis PR starts to address the issue https://github.com/apache/incubator-pinot/issues/5261. The current implementation assumes that all AggregationFunctions take one argument\nwith the exception of DistinctAggregationFunction. This PR handles changes related\nto supporting AggregationFunctions with multiple arguments.  as we anticipate new\naggregation functions to be added that take multiple arguments.\n\n1. Enhanced parser to allow multiple arguments for aggregation functions.\n2. AggregationFunctionFactory provides the right set of arguments when instantiating\n   individual aggregation functions.\n3. AggregationFunctions now store their arguments.  as opposed to assuming that the right\n   BlockValSet is passed to the aggregate() api's.\n4. AggregationFunction.aggregate() api's now take a Map<String.  BlockValSet> where the key\n   is the argument expression (columnName for simple case).  as opposed to a variable array\n   as that interface does not provide a way to associate BlockValSet with the argument.\n5. Cleanup: Removed env variable to enable/disable Distinct.  as there is no need for it to be\n   disabled anymore.","date":"2020-04-17 08:48:57","modifiedFileCount":"48","status":"M","submitter":"Mayank Shrivastava"},{"authorTime":"2020-05-13 05:02:38","codes":[{"authorDate":"2020-05-13 05:02:38","commitOrder":5,"curCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n      Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType valueType = blockValSet.getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2020-05-13 05:02:38","endLine":99,"groupId":"11795","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(intlength@AggregationResultHolderaggregationResultHolder@Map<TransformExpressionTree@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/1f/f547c345452f215f1c1bdf548ccc8d1fa83084.src","preCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder, Map<String, BlockValSet> blockValSetMap) {\n    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n\n    BlockValSet blockValSet = blockValSetMap.get(_column);\n    DataType valueType = blockValSet.getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-05-13 05:02:38","commitOrder":5,"curCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType valueType = blockValSet.getValueType();\n\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2020-05-13 05:02:38","endLine":157,"groupId":"11795","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupBySV","params":"(intlength@int[]groupKeyArray@GroupByResultHoldergroupByResultHolder@Map<TransformExpressionTree@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/1f/f547c345452f215f1c1bdf548ccc8d1fa83084.src","preCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      Map<String, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_column);\n    DataType valueType = blockValSet.getValueType();\n\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"8b0089f4e8f8d323abbdfb0d8dfd0c79e49b41c2","commitMessage":"@@@Clean up AggregationFunctionContext and use TransformExpressionTree as the key in the blockValSetMap passed to the AggregationFunctions (#5364)\n\n- Clean up all the usage of AggregationFunctionContext to directly use AggregationFunction\n- Construct the AggregationFunctions and Group-by Expressions at planning phase and pass them to Operator and Executor to save the extra expression compilation\n- Use TransformExpressionTree as the key in the blockValSetMap passed to the AggregationFunctions\n  - The benefit of this is to save the redundant string conversion.  and more efficient hashCode() and equals()\n  - The keys of the blockValSetMap should be the same as AggregationFunction.getInputExpressions()\n  - The only exception is CountAggregationFunction with Star-Tree where there is a single entry in blockValSetMap (column \"*\")\n- Add base implementation of AggregationFunction: BaseSingleExpressionAggregationFunction for aggregation functions on single expressions\n- For PERCENTILE group aggregation functions.  support using the second arguments to pass in percentile (e.g. PERCENTILE(column.  99).  PERCENTILETDIGEST(column.  90))\n- Enhance Star-Tree Aggregation/Group-by Executor to handle the column name conversion so that AggregationFunctionColumnPair is transparent to the AggregationFunction\n\nBACKWARD-INCOMPATIBLE CHANGE:\nThe following APIs are changed in AggregationFunction (use TransformExpressionTree instead of String as the key of blockValSetMap):\nvoid aggregate(int length.  AggregationResultHolder aggregationResultHolder.  Map<TransformExpressionTree.  BlockValSet> blockValSetMap);\nvoid aggregateGroupBySV(int length.  int[] groupKeyArray.  GroupByResultHolder groupByResultHolder.  Map<TransformExpressionTree.  BlockValSet> blockValSetMap);\nvoid aggregateGroupByMV(int length.  int[][] groupKeysArray.  GroupByResultHolder groupByResultHolder.  Map<TransformExpressionTree.  BlockValSet> blockValSetMap);","date":"2020-05-13 05:02:38","modifiedFileCount":"79","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-06-30 01:35:01","codes":[{"authorDate":"2020-06-30 01:35:01","commitOrder":6,"curCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType valueType = blockValSet.getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2020-06-30 01:35:01","endLine":100,"groupId":"11795","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(intlength@AggregationResultHolderaggregationResultHolder@Map<ExpressionContext@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/fb/b5ec4d47070e93e1c4be0922983b7ed6c3e6ce.src","preCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n      Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType valueType = blockValSet.getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-06-30 01:35:01","commitOrder":6,"curCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType valueType = blockValSet.getValueType();\n\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","date":"2020-06-30 01:35:01","endLine":158,"groupId":"11795","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupBySV","params":"(intlength@int[]groupKeyArray@GroupByResultHoldergroupByResultHolder@Map<ExpressionContext@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/fb/b5ec4d47070e93e1c4be0922983b7ed6c3e6ce.src","preCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType valueType = blockValSet.getValueType();\n\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"1d9135bdb84dbae28dd867be7c4a3bcdc667d4c7","commitMessage":"@@@[QueryContext] Use QueryContext in functions (#5613)\n\nReplace BrokerRequest classes (AggregationInfo.  TransformExpressionTree) with QueryContext classes (FunctionContext.  ExpressionContext) for aggregation and transform functions\nThis is the last PR of removing BrokerRequest classes from the query execution path. After this PR.  the query engine will be independent of BrokerRequest and only access QueryContext classes.  and all the redundant expression parsing will be saved.\n\nBesides replacing BrokerRequest classes.  also refactored DistinctCountThetaSketchAggregationFunction to use the QueryContext classes.  which solves the TODO of standardizing the predicate strings and simplifies the predicate handling.\n\nMinor bug-fixes:\n- Fix HLL log2m override for SQL query and make it case insensitive (In BaseBrokerRequestHandler)\n- Add special argument handling for DistinctCountRawThetaSketch (In BrokerRequestToQueryContextConverter)\n- Always use single argument * for COUNT when converting FunctionCallAstNode to FunctionContext (In QueryContextConverterUtils)\n\nDeployment notes:\nBecause of the standardization of the DistinctCountThetaSketch predicate strings.  please upgrade Broker before Server. The new Broker can handle both standard and non-standard predicate strings for backward-compatibility.","date":"2020-06-30 01:35:01","modifiedFileCount":"111","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2021-04-27 10:21:14","codes":[{"authorDate":"2021-04-27 10:21:14","commitOrder":7,"curCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType storedType = blockValSet.getValueType().getStoredType();\n    switch (storedType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + storedType);\n    }\n  }\n","date":"2021-04-27 10:21:14","endLine":95,"groupId":"10891","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"aggregate","params":"(intlength@AggregationResultHolderaggregationResultHolder@Map<ExpressionContext@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/83/3c2fee2fc1686c04524a9eb6806eb1fc13bbd7.src","preCode":"  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n    HyperLogLog hyperLogLog = getDefaultHyperLogLog(aggregationResultHolder);\n\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType valueType = blockValSet.getValueType();\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-04-27 10:21:14","commitOrder":7,"curCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType storedType = blockValSet.getValueType().getStoredType();\n    switch (storedType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + storedType);\n    }\n  }\n","date":"2021-04-27 10:21:14","endLine":152,"groupId":"10891","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"aggregateGroupBySV","params":"(intlength@int[]groupKeyArray@GroupByResultHoldergroupByResultHolder@Map<ExpressionContext@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/83/3c2fee2fc1686c04524a9eb6806eb1fc13bbd7.src","preCode":"  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    DataType valueType = blockValSet.getValueType();\n\n    switch (valueType) {\n      case INT:\n        int[][] intValuesArray = blockValSet.getIntValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (int value : intValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case LONG:\n        long[][] longValuesArray = blockValSet.getLongValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (long value : longValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case FLOAT:\n        float[][] floatValuesArray = blockValSet.getFloatValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (float value : floatValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case DOUBLE:\n        double[][] doubleValuesArray = blockValSet.getDoubleValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (double value : doubleValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      case STRING:\n        String[][] stringValuesArray = blockValSet.getStringValuesMV();\n        for (int i = 0; i < length; i++) {\n          HyperLogLog hyperLogLog = getDefaultHyperLogLog(groupByResultHolder, groupKeyArray[i]);\n          for (String value : stringValuesArray[i]) {\n            hyperLogLog.offer(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\n            \"Illegal data type for DISTINCT_COUNT_HLL_MV aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLMVAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"75bd7b9317058e7a2d1c2b6e3f9ce3069109ba1d","commitMessage":"@@@Add TIMESTAMP and BOOLEAN data type support (#6719)\n\nAdd `TIMESTAMP` and `BOOLEAN` data type support.  and the primitives to support new data types stored as the supported types.\nInternally `TIMESTAMP` is stored as `LONG` (millis since epoch).  `BOOLEAN` is stored as `INT` (`0` for `false`.  `1` for `true`).\nIn the query response.  `TIMESTAMP` values follow the JDBC format (e.g. `2021-01-01 01:01:01.123`).\n\nThe source data of a `TIMESTAMP` field should be either long values (millis since epoch) or String values of JDBC timestamp format; The source data of a `BOOLEAN` field should be boolean.  numbers (non-zero for `true`.  zero for `false`).  or string (`\"true\"` for `true`.  `false` otherwise).\n\nSupport `TIMESTAMP` and `BOOLEAN` in:\n- Data Ingestion\n- Filtering\n- Selection\n- Distinct\n- Order-by\n- Aggregation\n- Group-by\n- Transform\n- Having\n- Post-Aggregation\n- Scalar function (`java.sql.Timestamp` for `TIMESTAMP` and primitive `boolean` for `BOOLEAN`)\n","date":"2021-04-27 10:21:14","modifiedFileCount":"123","status":"M","submitter":"Xiaotian (Jackie) Jiang"}]
