[{"authorTime":"2019-01-12 01:43:41","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public boolean execute() throws Exception {\n    try {\n      if (_serverHost == null) {\n        _serverHost = NetUtil.getHostAddress();\n      }\n\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST, _serverHost);\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT, _serverPort);\n        configuration.addProperty(CommonConstants.Server.CONFIG_OF_ADMIN_API_PORT, _serverAdminPort);\n        configuration.addProperty(\"pinot.server.instance.dataDir\", _dataDir + _serverPort + \"/index\");\n        configuration.addProperty(\"pinot.server.instance.segmentTarDir\", _segmentDir + _serverPort + \"/segmentTar\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      new HelixServerStarter(_clusterName, _zkAddress, configuration);\n      String pidFile = \".pinotAdminServer-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":171,"groupId":"9473","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/1d/a8bf9d103371297f6a3448b96ea7c82b75a82f.src","preCode":"  public boolean execute() throws Exception {\n    try {\n      if (_serverHost == null) {\n        _serverHost = NetUtil.getHostAddress();\n      }\n\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST, _serverHost);\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT, _serverPort);\n        configuration.addProperty(CommonConstants.Server.CONFIG_OF_ADMIN_API_PORT, _serverAdminPort);\n        configuration.addProperty(\"pinot.server.instance.dataDir\", _dataDir + _serverPort + \"/index\");\n        configuration.addProperty(\"pinot.server.instance.segmentTarDir\", _segmentDir + _serverPort + \"/segmentTar\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      new HelixServerStarter(_clusterName, _zkAddress, configuration);\n      String pidFile = \".pinotAdminServer-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"},{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public boolean execute() throws Exception {\n    try {\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_BROKER_QUERY_PORT, _brokerPort);\n        configuration.setProperty(\"pinot.broker.routing.table.builder.class\", \"random\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      final HelixBrokerStarter pinotHelixBrokerStarter =\n          new HelixBrokerStarter(_brokerHost, _clusterName, _zkAddress, configuration);\n\n      String pidFile = \".pinotAdminBroker-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":137,"groupId":"4627","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/a7/e88ed38cca3a853a04ae926e74b6cdd76eebc6.src","preCode":"  public boolean execute() throws Exception {\n    try {\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_BROKER_QUERY_PORT, _brokerPort);\n        configuration.setProperty(\"pinot.broker.routing.table.builder.class\", \"random\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      final HelixBrokerStarter pinotHelixBrokerStarter =\n          new HelixBrokerStarter(_brokerHost, _clusterName, _zkAddress, configuration);\n\n      String pidFile = \".pinotAdminBroker-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartBrokerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"}],"commitId":"b497851f3406b72b7f36596c362e1fcbcb4a162a","commitMessage":"@@@Move all files in com.linkedin to org.apache (#3680)\n\n","date":"2019-01-12 01:43:41","modifiedFileCount":"0","status":"B","submitter":"Neha Pawar"},{"authorTime":"2019-04-17 08:48:04","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":2,"curCode":"  public boolean execute() throws Exception {\n    try {\n      if (_serverHost == null) {\n        _serverHost = NetUtil.getHostAddress();\n      }\n\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST, _serverHost);\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT, _serverPort);\n        configuration.addProperty(CommonConstants.Server.CONFIG_OF_ADMIN_API_PORT, _serverAdminPort);\n        configuration.addProperty(\"pinot.server.instance.dataDir\", _dataDir + _serverPort + \"/index\");\n        configuration.addProperty(\"pinot.server.instance.segmentTarDir\", _segmentDir + _serverPort + \"/segmentTar\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      new HelixServerStarter(_clusterName, _zkAddress, configuration);\n      String pidFile = \".pinotAdminServer-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":171,"groupId":"9473","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/1d/a8bf9d103371297f6a3448b96ea7c82b75a82f.src","preCode":"  public boolean execute() throws Exception {\n    try {\n      if (_serverHost == null) {\n        _serverHost = NetUtil.getHostAddress();\n      }\n\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST, _serverHost);\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT, _serverPort);\n        configuration.addProperty(CommonConstants.Server.CONFIG_OF_ADMIN_API_PORT, _serverAdminPort);\n        configuration.addProperty(\"pinot.server.instance.dataDir\", _dataDir + _serverPort + \"/index\");\n        configuration.addProperty(\"pinot.server.instance.segmentTarDir\", _segmentDir + _serverPort + \"/segmentTar\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      new HelixServerStarter(_clusterName, _zkAddress, configuration);\n      String pidFile = \".pinotAdminServer-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"N"},{"authorDate":"2019-04-17 08:48:04","commitOrder":2,"curCode":"  public boolean execute()\n      throws Exception {\n    try {\n      Configuration brokerConf = readConfigFromFile(_configFileName);\n      if (brokerConf == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        brokerConf = new BaseConfiguration();\n        brokerConf.addProperty(CommonConstants.Helix.KEY_OF_BROKER_QUERY_PORT, _brokerPort);\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      new HelixBrokerStarter(_brokerHost, _clusterName, _zkAddress, brokerConf);\n\n      String pidFile = \".pinotAdminBroker-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2019-04-17 08:48:04","endLine":132,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/52/b046f51604ff2e1e62989ff535ddeb8a0945e9.src","preCode":"  public boolean execute()\n      throws Exception {\n    try {\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_BROKER_QUERY_PORT, _brokerPort);\n        configuration.setProperty(\"pinot.broker.routing.table.builder.class\", \"random\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      final HelixBrokerStarter pinotHelixBrokerStarter =\n          new HelixBrokerStarter(_brokerHost, _clusterName, _zkAddress, configuration);\n\n      String pidFile = \".pinotAdminBroker-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartBrokerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"79b33687a7849e01800d5acdd6f2eefecee82998","commitMessage":"@@@Remove redundant default broker configurations (#4106)\n\n- Remove config based routing configs because the config based\n  routing was removed long time ago\n- Remove HelixBrokerStarter.getZkAddressForBroker() because it\n  does not apply to the current implementation\n- Replace config key strings with constants\n- Change timeout for default broker and broker in integration\n  test to 60s\n- Replace PropertiesConfiguration with light weight\n  BaseConfiguration if not read from config file","date":"2019-04-17 08:48:04","modifiedFileCount":"6","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2019-04-18 04:11:06","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":3,"curCode":"  public boolean execute() throws Exception {\n    try {\n      if (_serverHost == null) {\n        _serverHost = NetUtil.getHostAddress();\n      }\n\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST, _serverHost);\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT, _serverPort);\n        configuration.addProperty(CommonConstants.Server.CONFIG_OF_ADMIN_API_PORT, _serverAdminPort);\n        configuration.addProperty(\"pinot.server.instance.dataDir\", _dataDir + _serverPort + \"/index\");\n        configuration.addProperty(\"pinot.server.instance.segmentTarDir\", _segmentDir + _serverPort + \"/segmentTar\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      new HelixServerStarter(_clusterName, _zkAddress, configuration);\n      String pidFile = \".pinotAdminServer-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":171,"groupId":"9473","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/1d/a8bf9d103371297f6a3448b96ea7c82b75a82f.src","preCode":"  public boolean execute() throws Exception {\n    try {\n      if (_serverHost == null) {\n        _serverHost = NetUtil.getHostAddress();\n      }\n\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST, _serverHost);\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT, _serverPort);\n        configuration.addProperty(CommonConstants.Server.CONFIG_OF_ADMIN_API_PORT, _serverAdminPort);\n        configuration.addProperty(\"pinot.server.instance.dataDir\", _dataDir + _serverPort + \"/index\");\n        configuration.addProperty(\"pinot.server.instance.segmentTarDir\", _segmentDir + _serverPort + \"/segmentTar\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      new HelixServerStarter(_clusterName, _zkAddress, configuration);\n      String pidFile = \".pinotAdminServer-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"N"},{"authorDate":"2019-04-18 04:11:06","commitOrder":3,"curCode":"  public boolean execute()\n      throws Exception {\n    try {\n      Configuration brokerConf = readConfigFromFile(_configFileName);\n      if (brokerConf == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        brokerConf = new BaseConfiguration();\n        brokerConf.addProperty(CommonConstants.Helix.KEY_OF_BROKER_QUERY_PORT, _brokerPort);\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      _brokerStarter = new HelixBrokerStarter(brokerConf, _clusterName, _zkAddress, _brokerHost);\n      _brokerStarter.start();\n\n      String pidFile = \".pinotAdminBroker-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2019-04-18 04:11:06","endLine":136,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/1e/6af767a4edb0f1a3415b1464f8f3e6a36b6771.src","preCode":"  public boolean execute()\n      throws Exception {\n    try {\n      Configuration brokerConf = readConfigFromFile(_configFileName);\n      if (brokerConf == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        brokerConf = new BaseConfiguration();\n        brokerConf.addProperty(CommonConstants.Helix.KEY_OF_BROKER_QUERY_PORT, _brokerPort);\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      new HelixBrokerStarter(_brokerHost, _clusterName, _zkAddress, brokerConf);\n\n      String pidFile = \".pinotAdminBroker-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartBrokerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"0839fb1ee565abd7e6058e1e0fc7372cedd2fa0b","commitMessage":"@@@Refactor HelixBrokerStarter to separate constructor and start() (#4100)\n\nFor the starter class.  constructor should only set the properties. \nbut not start the service.  which should be done by start() instead.\n\n- Refactor HelixBrokerStarter to separate constructor and start()\n- Modify shutdown() to shut done all components properly\n- Change the APIs to plug in custom change handlers without\n  extending the class\n\nNOTE: THIS IS A BACKWARD-INCOMPATIBLE CHANGE\n- Need to call start() separately in order to start the broker\n- Order of arguments changed in constructor (move nullable to the\n  last. This is intentional so that user can find the incompatible\n  easier during compilation.  thus add the start())","date":"2019-04-18 04:11:06","modifiedFileCount":"16","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-05-28 01:34:15","codes":[{"authorDate":"2020-05-28 01:34:15","commitOrder":4,"curCode":"  public boolean execute()\n      throws Exception {\n    try {\n      LOGGER.info(\"Executing command: \" + toString());\n      StartServiceManagerCommand startServiceManagerCommand =\n          new StartServiceManagerCommand().setZkAddress(_zkAddress).setClusterName(_clusterName).setPort(-1)\n              .setBootstrapServices(new String[0]).addBootstrapService(ServiceRole.SERVER, getServerConf());\n      startServiceManagerCommand.execute();\n      String pidFile = \".pinotAdminServer-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2020-05-28 01:34:15","endLine":145,"groupId":"15390","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/bd/943762295d1295704a08a991b15decef262b22.src","preCode":"  public boolean execute()\n      throws Exception {\n    try {\n      if (_serverHost == null) {\n        _serverHost = NetUtil.getHostAddress();\n      }\n\n      Configuration configuration = readConfigFromFile(_configFileName);\n      if (configuration == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        configuration = new PropertiesConfiguration();\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST, _serverHost);\n        configuration.addProperty(CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT, _serverPort);\n        configuration.addProperty(CommonConstants.Server.CONFIG_OF_ADMIN_API_PORT, _serverAdminPort);\n        configuration.addProperty(\"pinot.server.instance.dataDir\", _dataDir + _serverPort + \"/index\");\n        configuration.addProperty(\"pinot.server.instance.segmentTarDir\", _segmentDir + _serverPort + \"/segmentTar\");\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      new HelixServerStarter(_clusterName, _zkAddress, configuration);\n      String pidFile = \".pinotAdminServer-\" + String.valueOf(System.currentTimeMillis()) + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2020-05-28 01:34:15","commitOrder":4,"curCode":"  public boolean execute()\n      throws Exception {\n    try {\n      LOGGER.info(\"Executing command: \" + toString());\n      StartServiceManagerCommand startServiceManagerCommand =\n          new StartServiceManagerCommand().setZkAddress(_zkAddress).setClusterName(_clusterName).setPort(-1)\n              .setBootstrapServices(new String[0]).addBootstrapService(ServiceRole.BROKER, getBrokerConf());\n      startServiceManagerCommand.execute();\n      String pidFile = \".pinotAdminBroker-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2020-05-28 01:34:15","endLine":121,"groupId":"15390","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/50/af52ea62e80eb78531c446f9ec9b85fcb316d1.src","preCode":"  public boolean execute()\n      throws Exception {\n    try {\n      Configuration brokerConf = readConfigFromFile(_configFileName);\n      if (brokerConf == null) {\n        if (_configFileName != null) {\n          LOGGER.error(\"Error: Unable to find file {}.\", _configFileName);\n          return false;\n        }\n\n        brokerConf = new BaseConfiguration();\n        brokerConf.addProperty(CommonConstants.Helix.KEY_OF_BROKER_QUERY_PORT, _brokerPort);\n      }\n\n      LOGGER.info(\"Executing command: \" + toString());\n      _brokerStarter = new HelixBrokerStarter(brokerConf, _clusterName, _zkAddress, _brokerHost);\n      _brokerStarter.start();\n\n      String pidFile = \".pinotAdminBroker-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartBrokerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"3514a1730a3c7e8607c731c5aee4a000d6959fdc","commitMessage":"@@@Add PinotServiceManager to start Pinot components (#5266)\n\n* Make ServiceStatus takes into account multiple services\n\n* Adding PinotServiceManager to manage Pinot Startable lifecycle.","date":"2020-05-28 01:34:15","modifiedFileCount":"17","status":"M","submitter":"Xiang Fu"},{"authorTime":"2021-07-07 15:48:27","codes":[{"authorDate":"2021-07-07 15:48:27","commitOrder":5,"curCode":"  public boolean execute()\n      throws Exception {\n    try {\n      LOGGER.info(\"Executing command: \" + toString());\n      Map<String, Object> serverConf = getServerConf();\n      StartServiceManagerCommand startServiceManagerCommand =\n          new StartServiceManagerCommand().setZkAddress(_zkAddress).setClusterName(_clusterName).setPort(-1)\n              .setBootstrapServices(new String[0]).addBootstrapService(ServiceRole.SERVER, serverConf);\n      startServiceManagerCommand.execute();\n      String pidFile = \".pinotAdminServer-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2021-07-07 15:48:27","endLine":165,"groupId":"101880","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/4b/1fc47f1468a1355ce039402a4f9f4fde8c73b8.src","preCode":"  public boolean execute()\n      throws Exception {\n    try {\n      LOGGER.info(\"Executing command: \" + toString());\n      StartServiceManagerCommand startServiceManagerCommand =\n          new StartServiceManagerCommand().setZkAddress(_zkAddress).setClusterName(_clusterName).setPort(-1)\n              .setBootstrapServices(new String[0]).addBootstrapService(ServiceRole.SERVER, getServerConf());\n      startServiceManagerCommand.execute();\n      String pidFile = \".pinotAdminServer-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting Pinot server, exiting.\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2021-07-07 15:48:27","commitOrder":5,"curCode":"  public boolean execute()\n      throws Exception {\n    try {\n      LOGGER.info(\"Executing command: \" + toString());\n      Map<String, Object> brokerConf = getBrokerConf();\n      StartServiceManagerCommand startServiceManagerCommand =\n          new StartServiceManagerCommand().setZkAddress(_zkAddress).setClusterName(_clusterName).setPort(-1)\n              .setBootstrapServices(new String[0]).addBootstrapService(ServiceRole.BROKER, brokerConf);\n      startServiceManagerCommand.execute();\n      String pidFile = \".pinotAdminBroker-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","date":"2021-07-07 15:48:27","endLine":134,"groupId":"101880","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/56/4b2548657e207a554ef7fff2385a3ba1dca1d8.src","preCode":"  public boolean execute()\n      throws Exception {\n    try {\n      LOGGER.info(\"Executing command: \" + toString());\n      StartServiceManagerCommand startServiceManagerCommand =\n          new StartServiceManagerCommand().setZkAddress(_zkAddress).setClusterName(_clusterName).setPort(-1)\n              .setBootstrapServices(new String[0]).addBootstrapService(ServiceRole.BROKER, getBrokerConf());\n      startServiceManagerCommand.execute();\n      String pidFile = \".pinotAdminBroker-\" + System.currentTimeMillis() + \".pid\";\n      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n      return true;\n    } catch (Exception e) {\n      LOGGER.error(\"Caught exception while starting broker, exiting\", e);\n      System.exit(-1);\n      return false;\n    }\n  }\n","realPath":"pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartBrokerCommand.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"4fdf01b0bfd77569d35078974108cbfec49d2a97","commitMessage":"@@@Fixing init controller conf for StartControllerCommand (#7132)\n\n","date":"2021-07-07 15:48:27","modifiedFileCount":"4","status":"M","submitter":"Xiang Fu"}]
