[{"authorTime":"2019-10-10 03:52:11","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":2,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter,\n            _numTotalRawDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult);\n  }\n","date":"2019-01-12 01:43:41","endLine":94,"groupId":"16821","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/90/37f6b6d0f7fa57233dfaeef32195ac2b986e78.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter,\n            _numTotalRawDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"},{"authorDate":"2019-10-10 03:52:11","commitOrder":2,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter,\n            _numTotalRawDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult, _dataSchema);\n  }\n","date":"2019-10-10 03:52:11","endLine":122,"groupId":"16821","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/62/9631800ca2f67b0219130c911b90997a73c09b.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter,\n            _numTotalRawDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult, _dataSchema);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOrderByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"9362ba4d59b922b8bee30cb36e7e4fda2474b6d6","commitMessage":"@@@First pass of GROUP BY with ORDER BY support (#4602)\n\nThis PR contains the implementation of ORDER BY support in group by.\n* In this first pass.  the changes have been done from CombineGroupByOrderByOperator upwards. The AggregationGroupByOperator hasn't been changed.\n* IndexedTable is used wherever possible (to merge results in CombineGroupByOrderByOperator.  and then to reduce results across servers in the BrokerReduceService)\n* ResultTable has been introduced.  as a standard way to return results to the client.\n* 2 queryOptions have been introduced:\n1) groupByMode - pql/sql - whether to execute the group by in PQL style (split all aggregations and ignore order by) or standard SQL style\n2) responseFormat - pql/sql - whether to present results using List (the PQL way).  or use ResultTable which is closer to the SQL way.\nBy default.  the modes are PQL.  PQL\nIn order to get the order by results in ResultTable.  modes should be SQL. SQL\nIn order to get the order by results.  but in List.  modes should be SQL. PQL","date":"2019-10-10 03:52:11","modifiedFileCount":"29","status":"M","submitter":"Neha Pawar"},{"authorTime":"2020-02-27 09:30:45","codes":[{"authorDate":"2020-02-27 09:30:45","commitOrder":3,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter, _numTotalDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult);\n  }\n","date":"2020-02-27 09:30:45","endLine":92,"groupId":"16821","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/a5/1db1b3bb65aa0fc8370af587621ec8ca14eb34.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter,\n            _numTotalRawDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-02-27 09:30:45","commitOrder":3,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter, _numTotalDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult, _dataSchema);\n  }\n","date":"2020-02-27 09:30:45","endLine":123,"groupId":"16821","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/2c/11b01a0ae48b8c8a83d663ead93539d321749c.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter,\n            _numTotalRawDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult, _dataSchema);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOrderByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"3c91a6d5b446886b2f0e6bb43c920b8e6e397b26","commitMessage":"@@@Remove the support of the old Star-Tree (#5086)\n\nRemove the support of the old Star-Tree generated with the StarTreeIndexSpec (already deprecated)\nRemove the related metadata (rawDoc and aggregatedDoc)\nRemove the field size and derived metric type from MetricFieldSpec\nSimplify the segment generation logic\n\nBackward-incompatible: (checked with the community to make sure there is no use case with the old Star-Tree)\nExisting segments with old Star-Tree won't work properly","date":"2020-02-27 09:30:45","modifiedFileCount":"118","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-03-19 06:54:22","codes":[{"authorDate":"2020-03-19 06:54:22","commitOrder":4,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByExecutor.getResult());\n  }\n","date":"2020-03-19 06:54:22","endLine":82,"groupId":"16821","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/58/ae7b058480da91d66da71c8c7a6099118c7bd9.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter, _numTotalDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-03-19 06:54:22","commitOrder":4,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByExecutor.getResult(), _dataSchema);\n  }\n","date":"2020-03-19 06:54:22","endLine":113,"groupId":"16821","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/95/679408e8bac570d88c098fc5da6dde3f5ec3b3.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    int numDocsScanned = 0;\n\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n    AggregationGroupByResult groupByResult = groupByExecutor.getResult();\n\n    \r\n    long numEntriesScannedInFilter = _transformOperator.getExecutionStatistics().getNumEntriesScannedInFilter();\n    long numEntriesScannedPostFilter = numDocsScanned * _transformOperator.getNumColumnsProjected();\n    _executionStatistics =\n        new ExecutionStatistics(numDocsScanned, numEntriesScannedInFilter, numEntriesScannedPostFilter, _numTotalDocs);\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByResult, _dataSchema);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOrderByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"917493fc96c93442571c47ee5fed36160691b924","commitMessage":"@@@Optimization for selection only queries: Allow early termination (#5163)\n\nIn Pinot CombineOpearator.  queries are scheduled with at most 10 threads. For tables with many segments(say 10k).  it means each thread will process 1k segments.\nFor selection only queries (e.g. select * from myTable limit 10).  each thread may collect enough results to return after scan a few segments. There is no means to wait and scan all the segments.\nThis is extremely useful for people want to randomly browse a big table from query console clicks.","date":"2020-03-19 06:54:22","modifiedFileCount":"13","status":"M","submitter":"Xiang Fu"},{"authorTime":"2020-05-13 05:02:38","codes":[{"authorDate":"2020-05-13 05:02:38","commitOrder":5,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult());\n  }\n","date":"2020-05-13 05:02:38","endLine":83,"groupId":"20779","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/92/365307e1651bfeef02260b4ef5aea98f0796d0.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByExecutor.getResult());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-05-13 05:02:38","commitOrder":5,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n  }\n","date":"2020-05-13 05:02:38","endLine":111,"groupId":"20779","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/ab/d26c3a8bad7992c97c33973d51dc0b269b5a65.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_functionContexts, _groupBy, _maxInitialResultHolderCapacity, _numGroupsLimit,\n              _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_functionContexts, groupByExecutor.getResult(), _dataSchema);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOrderByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"8b0089f4e8f8d323abbdfb0d8dfd0c79e49b41c2","commitMessage":"@@@Clean up AggregationFunctionContext and use TransformExpressionTree as the key in the blockValSetMap passed to the AggregationFunctions (#5364)\n\n- Clean up all the usage of AggregationFunctionContext to directly use AggregationFunction\n- Construct the AggregationFunctions and Group-by Expressions at planning phase and pass them to Operator and Executor to save the extra expression compilation\n- Use TransformExpressionTree as the key in the blockValSetMap passed to the AggregationFunctions\n  - The benefit of this is to save the redundant string conversion.  and more efficient hashCode() and equals()\n  - The keys of the blockValSetMap should be the same as AggregationFunction.getInputExpressions()\n  - The only exception is CountAggregationFunction with Star-Tree where there is a single entry in blockValSetMap (column \"*\")\n- Add base implementation of AggregationFunction: BaseSingleExpressionAggregationFunction for aggregation functions on single expressions\n- For PERCENTILE group aggregation functions.  support using the second arguments to pass in percentile (e.g. PERCENTILE(column.  99).  PERCENTILETDIGEST(column.  90))\n- Enhance Star-Tree Aggregation/Group-by Executor to handle the column name conversion so that AggregationFunctionColumnPair is transparent to the AggregationFunction\n\nBACKWARD-INCOMPATIBLE CHANGE:\nThe following APIs are changed in AggregationFunction (use TransformExpressionTree instead of String as the key of blockValSetMap):\nvoid aggregate(int length.  AggregationResultHolder aggregationResultHolder.  Map<TransformExpressionTree.  BlockValSet> blockValSetMap);\nvoid aggregateGroupBySV(int length.  int[] groupKeyArray.  GroupByResultHolder groupByResultHolder.  Map<TransformExpressionTree.  BlockValSet> blockValSetMap);\nvoid aggregateGroupByMV(int length.  int[][] groupKeysArray.  GroupByResultHolder groupByResultHolder.  Map<TransformExpressionTree.  BlockValSet> blockValSetMap);","date":"2020-05-13 05:02:38","modifiedFileCount":"79","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2021-06-11 05:15:06","codes":[{"authorDate":"2020-05-13 05:02:38","commitOrder":6,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult());\n  }\n","date":"2020-05-13 05:02:38","endLine":83,"groupId":"20779","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/92/365307e1651bfeef02260b4ef5aea98f0796d0.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2021-06-11 05:15:06","commitOrder":6,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    if (_queryContext.getOrderByExpressions() == null || _minSegmentTrimSize <= 0) {\n      \r\n      return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n    }\n    int trimSize = getTableCapacity(_queryContext.getLimit(), _minSegmentTrimSize);\n    \r\n    if (groupByExecutor.getNumGroups() <= trimSize) {\n      return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n    }\n    \r\n    TableResizer tableResizer = new TableResizer(_dataSchema, _queryContext);\n    Collection<IntermediateRecord> intermediateRecords = groupByExecutor.trimGroupByResult(trimSize, tableResizer);\n    return new IntermediateResultsBlock(_aggregationFunctions, intermediateRecords, _dataSchema);\n  }\n","date":"2021-06-11 05:15:06","endLine":134,"groupId":"20779","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/eb/c6947300399532a5ef5b45366d1cba3019467a.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOrderByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"2a5d5b7517a46ec76d73742b31c6d9e457920f21","commitMessage":"@@@Introduce in-Segment Trim for GroupBy OrderBy Query (#6991)\n\nOne of the major bottlenecks for the current GroupBy OrderBy query on high cardinality columns is the merge phase. Essentially every segment brings a large number of intermediate results to a global concurrent map for further aggregation and merge.  which takes up a lot of space and is very time-consuming. This PR introduces an optimization option that each segment trims its intermediate results to a given size. The size is configurable by the user and is guaranteed to be max(limit N * 5.  5000). It won't affect accuracy much but reduces the running time for high cardinality dataset. ~5 times faster for String data with 10M cardinality. This option is turned off by default to ensure backward compatibility.","date":"2021-06-11 05:15:06","modifiedFileCount":"16","status":"M","submitter":"wuwenw"},{"authorTime":"2021-06-19 04:49:39","codes":[{"authorDate":"2020-05-13 05:02:38","commitOrder":7,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult());\n  }\n","date":"2020-05-13 05:02:38","endLine":83,"groupId":"20779","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/92/365307e1651bfeef02260b4ef5aea98f0796d0.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2021-06-19 04:49:39","commitOrder":7,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    int minSegmentTrimSize = calculateMinSegmentTrimSize();\n    \r\n    if (_queryContext.getOrderByExpressions() == null || minSegmentTrimSize <= 0) {\n      \r\n      return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n    }\n    int trimSize = getTableCapacity(_queryContext.getLimit(), minSegmentTrimSize);\n    \r\n    if (groupByExecutor.getNumGroups() <= trimSize) {\n      return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n    }\n    \r\n    TableResizer tableResizer = new TableResizer(_dataSchema, _queryContext);\n    Collection<IntermediateRecord> intermediateRecords = groupByExecutor.trimGroupByResult(trimSize, tableResizer);\n    return new IntermediateResultsBlock(_aggregationFunctions, intermediateRecords, _dataSchema);\n  }\n","date":"2021-06-19 04:49:39","endLine":138,"groupId":"20779","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/c0/91d44b81166f380ceb322be62b3b33d217a8b4.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    if (_queryContext.getOrderByExpressions() == null || _minSegmentTrimSize <= 0) {\n      \r\n      return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n    }\n    int trimSize = getTableCapacity(_queryContext.getLimit(), _minSegmentTrimSize);\n    \r\n    if (groupByExecutor.getNumGroups() <= trimSize) {\n      return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n    }\n    \r\n    TableResizer tableResizer = new TableResizer(_dataSchema, _queryContext);\n    Collection<IntermediateRecord> intermediateRecords = groupByExecutor.trimGroupByResult(trimSize, tableResizer);\n    return new IntermediateResultsBlock(_aggregationFunctions, intermediateRecords, _dataSchema);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOrderByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"f7732082dde93a590488d1e5db2b583050c9fab1","commitMessage":"@@@Add Query Options for GroupBy In-Segment Trim  (#7052)\n\nAdds query options for groupBy in-segment trim. Two options are added: segmentMinTrimSize and segmentEnableTrim.\n\nIf segmentMinTrimSize is set to be positive in the query option.  it will override the server config and trigger the trim based on the given number. If segmentEnableTrim is set to be true in the query option.  it will trigger the trim based on the server config trim size if configured.  or default trim size (5000).\n\nExample:\nminTrimSize in server config: 0\nQuery: \"SELECT metric_0.  max(metric_1) FROM testTable GROUP BY metric_0 ORDER BY max(metric_1) DESC LIMIT 50 OPTION(segmentMinTrimSize=1000)\")\n=> max(5*limit.  1000): 1000\n=> so expectedSize from each segment: 1000","date":"2021-06-19 04:49:39","modifiedFileCount":"4","status":"M","submitter":"wuwenw"},{"authorTime":"2021-08-03 08:38:52","codes":[{"authorDate":"2020-05-13 05:02:38","commitOrder":8,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult());\n  }\n","date":"2020-05-13 05:02:38","endLine":83,"groupId":"10798","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/92/365307e1651bfeef02260b4ef5aea98f0796d0.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2021-08-03 08:38:52","commitOrder":8,"curCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    if (_queryContext.getOrderByExpressions() != null && _minGroupTrimSize > 0) {\n      int trimSize = GroupByUtils.getTableCapacity(_queryContext.getLimit(), _minGroupTrimSize);\n      if (groupByExecutor.getNumGroups() > trimSize) {\n        TableResizer tableResizer = new TableResizer(_dataSchema, _queryContext);\n        Collection<IntermediateRecord> intermediateRecords = groupByExecutor.trimGroupByResult(trimSize, tableResizer);\n        return new IntermediateResultsBlock(_aggregationFunctions, intermediateRecords, _dataSchema);\n      }\n    }\n\n    return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n  }\n","date":"2021-08-03 08:38:52","endLine":135,"groupId":"10798","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"getNextBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/4c/78a49be3d774ac02d3756bba14165576cdcaee.src","preCode":"  protected IntermediateResultsBlock getNextBlock() {\n    \r\n    GroupByExecutor groupByExecutor;\n    if (_useStarTree) {\n      groupByExecutor =\n          new StarTreeGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    } else {\n      groupByExecutor =\n          new DefaultGroupByExecutor(_aggregationFunctions, _groupByExpressions, _maxInitialResultHolderCapacity,\n              _numGroupsLimit, _transformOperator);\n    }\n    TransformBlock transformBlock;\n    while ((transformBlock = _transformOperator.nextBlock()) != null) {\n      _numDocsScanned += transformBlock.getNumDocs();\n      groupByExecutor.process(transformBlock);\n    }\n\n    int minSegmentTrimSize = calculateMinSegmentTrimSize();\n    \r\n    if (_queryContext.getOrderByExpressions() == null || minSegmentTrimSize <= 0) {\n      \r\n      return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n    }\n    int trimSize = getTableCapacity(_queryContext.getLimit(), minSegmentTrimSize);\n    \r\n    if (groupByExecutor.getNumGroups() <= trimSize) {\n      return new IntermediateResultsBlock(_aggregationFunctions, groupByExecutor.getResult(), _dataSchema);\n    }\n    \r\n    TableResizer tableResizer = new TableResizer(_dataSchema, _queryContext);\n    Collection<IntermediateRecord> intermediateRecords = groupByExecutor.trimGroupByResult(trimSize, tableResizer);\n    return new IntermediateResultsBlock(_aggregationFunctions, intermediateRecords, _dataSchema);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/AggregationGroupByOrderByOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"29a6ba9ce4bacfb89037e434b6845acad77b6426","commitMessage":"@@@Make group trim size configurable for better accuracy (#7241)\n\nMake group trim size configurable for segment-level and server-level trim (both server config and query option).\nCurrently server-level group trim size is hard-coded to max(limit * 5.  5000).  which might not be good enough for certain use cases that need better accuracy. This PR make the hard-coded 5000 configurable.  and allow disabling the server-level group trim to get 100% accurate result. Note that disabling the trim or using a very high value could cause memory issue (similar to setting a super high limit).  so use with cautious.\n\nIn server config:\n- `pinot.server.query.executor.min.segment.group.trim.size`: min segment-level group trim size.  default -1 (disable segment-level trim)\n- `pinot.server.query.executor.min.server.group.trim.size`: min server-level group trim size.  default 5000 (backward compatible)\n\nIn query option:\n- `minSegmentGroupTrimSize`: override min segment-level group trim size (replacing `minSegmentTrimSize`)\n- `minServerGroupTrimSize`: override min server-level group trim size","date":"2021-08-03 08:38:52","modifiedFileCount":"14","status":"M","submitter":"Xiaotian (Jackie) Jiang"}]
