[{"authorTime":"2021-03-12 08:22:34","codes":[{"authorDate":"2021-03-12 08:22:34","commitOrder":1,"curCode":"  public void testAggregationOnly() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn), SUM_PRECISION(longColumn), SUM_PRECISION(floatColumn), SUM_PRECISION(doubleColumn), SUM_PRECISION(stringColumn), SUM_PRECISION(bytesColumn) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    List<Object[]> rows = brokerResponse.getResultTable().getRows();\n    assertEquals(rows.size(), 1);\n    BigDecimal intSum = _intSum.multiply(FOUR);\n    BigDecimal longSum = _longSum.multiply(FOUR);\n    BigDecimal floatSum = _floatSum.multiply(FOUR);\n    BigDecimal doubleSum = _doubleSum.multiply(FOUR);\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","date":"2021-03-12 08:22:34","endLine":176,"groupId":"9676","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregationOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/75/90d3f6a0304569d6e5ea087dfacf0c40d5860e.src","preCode":"  public void testAggregationOnly() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn), SUM_PRECISION(longColumn), SUM_PRECISION(floatColumn), SUM_PRECISION(doubleColumn), SUM_PRECISION(stringColumn), SUM_PRECISION(bytesColumn) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    List<Object[]> rows = brokerResponse.getResultTable().getRows();\n    assertEquals(rows.size(), 1);\n    BigDecimal intSum = _intSum.multiply(FOUR);\n    BigDecimal longSum = _longSum.multiply(FOUR);\n    BigDecimal floatSum = _floatSum.multiply(FOUR);\n    BigDecimal doubleSum = _doubleSum.multiply(FOUR);\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/SumPrecisionQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2021-03-12 08:22:34","commitOrder":1,"curCode":"  public void testAggregationWithPrecision() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn, 6), SUM_PRECISION(longColumn, 6), SUM_PRECISION(floatColumn, 6), SUM_PRECISION(doubleColumn, 6), SUM_PRECISION(stringColumn, 6), SUM_PRECISION(bytesColumn, 6) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    List<Object[]> rows = brokerResponse.getResultTable().getRows();\n    assertEquals(rows.size(), 1);\n    MathContext mathContext = new MathContext(6, RoundingMode.HALF_EVEN);\n    BigDecimal intSum = _intSum.multiply(FOUR).round(mathContext);\n    BigDecimal longSum = _longSum.multiply(FOUR).round(mathContext);\n    BigDecimal floatSum = _floatSum.multiply(FOUR).round(mathContext);\n    BigDecimal doubleSum = _doubleSum.multiply(FOUR).round(mathContext);\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","date":"2021-03-12 08:22:34","endLine":206,"groupId":"9676","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregationWithPrecision","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/75/90d3f6a0304569d6e5ea087dfacf0c40d5860e.src","preCode":"  public void testAggregationWithPrecision() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn, 6), SUM_PRECISION(longColumn, 6), SUM_PRECISION(floatColumn, 6), SUM_PRECISION(doubleColumn, 6), SUM_PRECISION(stringColumn, 6), SUM_PRECISION(bytesColumn, 6) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    List<Object[]> rows = brokerResponse.getResultTable().getRows();\n    assertEquals(rows.size(), 1);\n    MathContext mathContext = new MathContext(6, RoundingMode.HALF_EVEN);\n    BigDecimal intSum = _intSum.multiply(FOUR).round(mathContext);\n    BigDecimal longSum = _longSum.multiply(FOUR).round(mathContext);\n    BigDecimal floatSum = _floatSum.multiply(FOUR).round(mathContext);\n    BigDecimal doubleSum = _doubleSum.multiply(FOUR).round(mathContext);\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/SumPrecisionQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"74e40375dcf864f3fcb4d3e22294251a4c5df345","commitMessage":"@@@SumPrecision: support all data types and star-tree (#6668)\n\nCurrently `SumPrecision` aggregation function only supports summing up the serialized BigDecimal bytes.\n\nThis PR enhances the `SumPrecision` with:\n- All data type support (INT.  LONG.  FLOAT.  DOUBLE.  STRING) to perform exact sum\n- Star-tree support (e.g. `SumPrecision__col`)\n\nOther changes:\n- Move the `BigDecimal` related functions into `BigDecimalUtils`\n- Allow creating var-length dictionary for BYTES column","date":"2021-03-12 08:22:34","modifiedFileCount":"10","status":"B","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2021-04-02 12:32:31","codes":[{"authorDate":"2021-04-02 12:32:31","commitOrder":2,"curCode":"  public void testAggregationOnly() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn), SUM_PRECISION(longColumn), SUM_PRECISION(floatColumn), SUM_PRECISION(doubleColumn), SUM_PRECISION(stringColumn), SUM_PRECISION(bytesColumn) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    ResultTable resultTable = brokerResponse.getResultTable();\n    DataSchema expectedDataSchema = new DataSchema(\n        new String[]{\"sumprecision(intColumn)\", \"sumprecision(longColumn)\", \"sumprecision(floatColumn)\", \"sumprecision(doubleColumn)\", \"sumprecision(stringColumn)\", \"sumprecision(bytesColumn)\"},\n        new ColumnDataType[]{ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING});\n    assertEquals(resultTable.getDataSchema(), expectedDataSchema);\n    List<Object[]> rows = resultTable.getRows();\n    assertEquals(rows.size(), 1);\n    String intSum = _intSum.multiply(FOUR).toString();\n    String longSum = _longSum.multiply(FOUR).toString();\n    String floatSum = _floatSum.multiply(FOUR).toString();\n    String doubleSum = _doubleSum.multiply(FOUR).toString();\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","date":"2021-04-02 12:32:31","endLine":184,"groupId":"5573","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregationOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/d3/ba43ad99b9f69222d3976ef88651431a69e207.src","preCode":"  public void testAggregationOnly() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn), SUM_PRECISION(longColumn), SUM_PRECISION(floatColumn), SUM_PRECISION(doubleColumn), SUM_PRECISION(stringColumn), SUM_PRECISION(bytesColumn) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    List<Object[]> rows = brokerResponse.getResultTable().getRows();\n    assertEquals(rows.size(), 1);\n    BigDecimal intSum = _intSum.multiply(FOUR);\n    BigDecimal longSum = _longSum.multiply(FOUR);\n    BigDecimal floatSum = _floatSum.multiply(FOUR);\n    BigDecimal doubleSum = _doubleSum.multiply(FOUR);\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/SumPrecisionQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2021-04-02 12:32:31","commitOrder":2,"curCode":"  public void testAggregationWithPrecision() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn, 6), SUM_PRECISION(longColumn, 6), SUM_PRECISION(floatColumn, 6), SUM_PRECISION(doubleColumn, 6), SUM_PRECISION(stringColumn, 6), SUM_PRECISION(bytesColumn, 6) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    ResultTable resultTable = brokerResponse.getResultTable();\n    DataSchema expectedDataSchema = new DataSchema(\n        new String[]{\"sumprecision(intColumn)\", \"sumprecision(longColumn)\", \"sumprecision(floatColumn)\", \"sumprecision(doubleColumn)\", \"sumprecision(stringColumn)\", \"sumprecision(bytesColumn)\"},\n        new ColumnDataType[]{ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING});\n    assertEquals(resultTable.getDataSchema(), expectedDataSchema);\n    List<Object[]> rows = resultTable.getRows();\n    assertEquals(rows.size(), 1);\n    MathContext mathContext = new MathContext(6, RoundingMode.HALF_EVEN);\n    String intSum = _intSum.multiply(FOUR).round(mathContext).toString();\n    String longSum = _longSum.multiply(FOUR).round(mathContext).toString();\n    String floatSum = _floatSum.multiply(FOUR).round(mathContext).toString();\n    String doubleSum = _doubleSum.multiply(FOUR).round(mathContext).toString();\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","date":"2021-04-02 12:32:31","endLine":219,"groupId":"5573","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregationWithPrecision","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/d3/ba43ad99b9f69222d3976ef88651431a69e207.src","preCode":"  public void testAggregationWithPrecision() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn, 6), SUM_PRECISION(longColumn, 6), SUM_PRECISION(floatColumn, 6), SUM_PRECISION(doubleColumn, 6), SUM_PRECISION(stringColumn, 6), SUM_PRECISION(bytesColumn, 6) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    List<Object[]> rows = brokerResponse.getResultTable().getRows();\n    assertEquals(rows.size(), 1);\n    MathContext mathContext = new MathContext(6, RoundingMode.HALF_EVEN);\n    BigDecimal intSum = _intSum.multiply(FOUR).round(mathContext);\n    BigDecimal longSum = _longSum.multiply(FOUR).round(mathContext);\n    BigDecimal floatSum = _floatSum.multiply(FOUR).round(mathContext);\n    BigDecimal doubleSum = _doubleSum.multiply(FOUR).round(mathContext);\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/SumPrecisionQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"93920b17f9dc06c4d9b9baeb6006ab780afed8dd","commitMessage":"@@@Unify data type conversion and formatting (#6728)\n\nUnify the logic of data type conversion and formatting into `PinotDataType`.  `DataType`.  `ColumnDataType`.\n- `PinotDataType` is used for type conversion\n- `DataType` is used in schema to represent the source data type (only have single-valued type)\n- `ColumnDataType` is used in `DataTable` and `ResultTable` to represent the result type\n\n`BYTES` type is stored as `byte[]` externally but as `ByteArray` internally for hashing and sorting purpose. This PR handles the conversion of `BYTES` type (also new types to be added in the future) so that the the result can be passed to the UDF for post-aggregation calculations.\nAlso adding primitive array types to `PinotDataType`.\n\nWe should consider merging `DataType` and `ColumnDataType` in the future.","date":"2021-04-02 12:32:31","modifiedFileCount":"22","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2021-08-21 12:33:52","codes":[{"authorDate":"2021-08-21 12:33:52","commitOrder":3,"curCode":"  public void testAggregationOnly() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn), SUM_PRECISION(longColumn), SUM_PRECISION(floatColumn), SUM_PRECISION\"\n            + \"(doubleColumn), SUM_PRECISION(stringColumn), SUM_PRECISION(bytesColumn) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    ResultTable resultTable = brokerResponse.getResultTable();\n    DataSchema expectedDataSchema = new DataSchema(new String[]{\n        \"sumprecision(intColumn)\", \"sumprecision(longColumn)\", \"sumprecision(floatColumn)\",\n        \"sumprecision(doubleColumn)\", \"sumprecision(stringColumn)\", \"sumprecision(bytesColumn)\"\n    }, new ColumnDataType[]{\n        ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING,\n        ColumnDataType.STRING, ColumnDataType.STRING\n    });\n    assertEquals(resultTable.getDataSchema(), expectedDataSchema);\n    List<Object[]> rows = resultTable.getRows();\n    assertEquals(rows.size(), 1);\n    String intSum = _intSum.multiply(FOUR).toString();\n    String longSum = _longSum.multiply(FOUR).toString();\n    String floatSum = _floatSum.multiply(FOUR).toString();\n    String doubleSum = _doubleSum.multiply(FOUR).toString();\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","date":"2021-08-21 12:33:52","endLine":189,"groupId":"10150","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testAggregationOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/7f/b7c2d75e3e4d8a2e5c76e8d594e6e44d41d970.src","preCode":"  public void testAggregationOnly() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn), SUM_PRECISION(longColumn), SUM_PRECISION(floatColumn), SUM_PRECISION(doubleColumn), SUM_PRECISION(stringColumn), SUM_PRECISION(bytesColumn) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    ResultTable resultTable = brokerResponse.getResultTable();\n    DataSchema expectedDataSchema = new DataSchema(\n        new String[]{\"sumprecision(intColumn)\", \"sumprecision(longColumn)\", \"sumprecision(floatColumn)\", \"sumprecision(doubleColumn)\", \"sumprecision(stringColumn)\", \"sumprecision(bytesColumn)\"},\n        new ColumnDataType[]{ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING});\n    assertEquals(resultTable.getDataSchema(), expectedDataSchema);\n    List<Object[]> rows = resultTable.getRows();\n    assertEquals(rows.size(), 1);\n    String intSum = _intSum.multiply(FOUR).toString();\n    String longSum = _longSum.multiply(FOUR).toString();\n    String floatSum = _floatSum.multiply(FOUR).toString();\n    String doubleSum = _doubleSum.multiply(FOUR).toString();\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/SumPrecisionQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2021-08-21 12:33:52","commitOrder":3,"curCode":"  public void testAggregationWithPrecision() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn, 6), SUM_PRECISION(longColumn, 6), SUM_PRECISION(floatColumn, 6), \"\n            + \"SUM_PRECISION(doubleColumn, 6), SUM_PRECISION(stringColumn, 6), SUM_PRECISION(bytesColumn, 6) FROM \"\n            + \"testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    ResultTable resultTable = brokerResponse.getResultTable();\n    DataSchema expectedDataSchema = new DataSchema(new String[]{\n        \"sumprecision(intColumn)\", \"sumprecision(longColumn)\", \"sumprecision(floatColumn)\",\n        \"sumprecision(doubleColumn)\", \"sumprecision(stringColumn)\", \"sumprecision(bytesColumn)\"\n    }, new ColumnDataType[]{\n        ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING,\n        ColumnDataType.STRING, ColumnDataType.STRING\n    });\n    assertEquals(resultTable.getDataSchema(), expectedDataSchema);\n    List<Object[]> rows = resultTable.getRows();\n    assertEquals(rows.size(), 1);\n    MathContext mathContext = new MathContext(6, RoundingMode.HALF_EVEN);\n    String intSum = _intSum.multiply(FOUR).round(mathContext).toString();\n    String longSum = _longSum.multiply(FOUR).round(mathContext).toString();\n    String floatSum = _floatSum.multiply(FOUR).round(mathContext).toString();\n    String doubleSum = _doubleSum.multiply(FOUR).round(mathContext).toString();\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","date":"2021-08-21 12:33:52","endLine":230,"groupId":"10150","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testAggregationWithPrecision","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/7f/b7c2d75e3e4d8a2e5c76e8d594e6e44d41d970.src","preCode":"  public void testAggregationWithPrecision() {\n    String query =\n        \"SELECT SUM_PRECISION(intColumn, 6), SUM_PRECISION(longColumn, 6), SUM_PRECISION(floatColumn, 6), SUM_PRECISION(doubleColumn, 6), SUM_PRECISION(stringColumn, 6), SUM_PRECISION(bytesColumn, 6) FROM testTable\";\n\n    \r\n    Operator operator = getOperatorForSqlQuery(query);\n    assertTrue(operator instanceof AggregationOperator);\n    List<Object> aggregationResult = ((AggregationOperator) operator).nextBlock().getAggregationResult();\n    assertNotNull(aggregationResult);\n    assertEquals(aggregationResult.size(), 6);\n    assertEquals(aggregationResult.get(0), _intSum);\n    assertEquals(aggregationResult.get(1), _longSum);\n    assertEquals(aggregationResult.get(2), _floatSum);\n    assertEquals(aggregationResult.get(3), _doubleSum);\n    assertEquals(aggregationResult.get(4), _doubleSum);\n    assertEquals(aggregationResult.get(5), _doubleSum);\n\n    \r\n    BrokerResponseNative brokerResponse = getBrokerResponseForSqlQuery(query);\n    ResultTable resultTable = brokerResponse.getResultTable();\n    DataSchema expectedDataSchema = new DataSchema(\n        new String[]{\"sumprecision(intColumn)\", \"sumprecision(longColumn)\", \"sumprecision(floatColumn)\", \"sumprecision(doubleColumn)\", \"sumprecision(stringColumn)\", \"sumprecision(bytesColumn)\"},\n        new ColumnDataType[]{ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING, ColumnDataType.STRING});\n    assertEquals(resultTable.getDataSchema(), expectedDataSchema);\n    List<Object[]> rows = resultTable.getRows();\n    assertEquals(rows.size(), 1);\n    MathContext mathContext = new MathContext(6, RoundingMode.HALF_EVEN);\n    String intSum = _intSum.multiply(FOUR).round(mathContext).toString();\n    String longSum = _longSum.multiply(FOUR).round(mathContext).toString();\n    String floatSum = _floatSum.multiply(FOUR).round(mathContext).toString();\n    String doubleSum = _doubleSum.multiply(FOUR).round(mathContext).toString();\n    assertEquals(rows.get(0), new Object[]{intSum, longSum, floatSum, doubleSum, doubleSum, doubleSum});\n  }\n","realPath":"pinot-core/src/test/java/org/apache/pinot/queries/SumPrecisionQueriesTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"7e9ca6a5a4afe0d4e283ac1307c45430e474cbf2","commitMessage":"@@@Reformat code base with line length 120 (#7342)\n\n","date":"2021-08-21 12:33:52","modifiedFileCount":"900","status":"M","submitter":"Xiang Fu"}]
