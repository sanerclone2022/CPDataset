[{"authorTime":"2021-04-14 08:20:05","codes":[{"authorDate":"2021-04-14 08:20:05","commitOrder":1,"curCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-04-14 08:20:05","endLine":143,"groupId":"9341","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDataTypeTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/7b/a2f149f2fc836ba7a016097540d79a0d4312ca.src","preCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"},{"authorDate":"2021-04-14 08:20:05","commitOrder":1,"curCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-04-14 08:20:05","endLine":157,"groupId":"12231","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSanitationTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/7b/a2f149f2fc836ba7a016097540d79a0d4312ca.src","preCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"f2e3446e75f1ec1d553805d03f6504f05b3e3c0e","commitMessage":"@@@Pinot SPI refactor contd: Added pinot-segment-local module. (#6761)\n\n- Added pinot-segment-local module that contains all the segment related\n  implementations for the existing local Pinot segment.\n\n- Modules that pinot-segment-local depends on:\n  - pinot-spi\n  - pinot-segment-spi\n  - pinot-common: This is temporary and needed as a lot of common utilities\n    are within pinot-common.\n  - External libraries: Datasketches. TDigest.  HLL.  Lucene.  larray.\n  - For test-scope:\n    - pinot-avro\n    - pinot-csv\n    - pinot-json\n    - pinot-spi\n    - pinot-yammer\n\n- Modules dependent on pinot-segment-local:\n  - pinot-core\n  - pinot-server.  pinot-perf: Only in test-scope\n\nMost moves/refactors done via IDE. Manual changes listed below:\n- Fix typo in Logger for RealtimeLuceneIndexReaderRefreshThread.\n- Moved builder specific util methods from StarTreeUtils to StarTreeBuilderUtils.\n  - `shouldRemove()`\n  - `remove()`\n\n- Made local copy of MAX_DOC_PER_CALL inside of PinotDataBitSetV2.  as it is currently\n  defined in DocIdSetPlanNode.  but segment related code depends on it.\n\n- Made local copy of DEFAULT_TDIGEST_COMPRESSION in PercentileTDigestValueAggregator. \n  originally defined in PercentileTDigestAggregationFunction.\n\n- Made local copy of DEFAULT_MAX_ERROR in PercentileEstValueAggregator.  originally defined in\n  PercentileEstAggregationFunction.\n\n- Split QueryContextRequestUtils into two files.  the new one calle RequestContextConverterUtils\n  is in pinot-common.  as it has utility methods related to classes in pinot-common.\n\n- Created CustomSerDeUtils class.  that has code from ObjectSerDeUtils related to ValueAggregator.\n  This is again to avoid pulling in dependencies from pinot-core into pinot-segment-local.\n\n- Removed reference of Operator in javadoc of EarlyTerminationException.  as it is\n  was causing reference dependency to pinot-core.\n\n- Renamed SegmentGenerationWithNullValueTest to SegmentWithNullValueTest as it has test for segment\n  generation as well as querying.  and can only be housed in pinot-core atm.\n\n- The clas RealtimeSegmentStatsHistory is ser/de using Java object ser/de.  which makes moving the file\n  out of its current package backward incompatible. Addressed this issue by using a custom object\n  input stream that replaces the old package name with new one when deserializing.\n\nMoves done to resolve cross dependency issues:\n- Following moved to pinot-segment-local utils package:\n  - IngestionUtils\n  - TableConfigUtils\n  - SchemaUtils\n  - SegmentTestUtils: This depends on AvroSchemaUtil.  added dependency on pinot-avro in test-scope.\n\n- Following moved to pinot-common:\n  - FilterContext\n  - ExpressionContext\n  - FunctionContext\n  - Predicate\n\n- Following moved to pinot-spi\n  - ReadMode\n  - CommonConstants\n  - ArrayCopyUtils\n  - BadQueryException moved\n  - EarlyTerminationException\n\n- Copied necessary data files in resources/data from pinot-core to pinot-segment-local.","date":"2021-04-14 08:20:05","modifiedFileCount":"562","status":"B","submitter":"Mayank Shrivastava"},{"authorTime":"2021-04-14 08:20:05","codes":[{"authorDate":"2021-04-27 10:21:14","commitOrder":2,"curCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBoolean\"), 1);\n      assertEquals(record.getValue(\"svTimestamp\"), Timestamp.valueOf(\"2020-02-02 22:22:22.222\").getTime());\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-04-27 10:21:14","endLine":149,"groupId":"12230","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDataTypeTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/e4/889d93db42bdf584f0b70b48d311c4d1511cf9.src","preCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2021-04-14 08:20:05","commitOrder":2,"curCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-04-14 08:20:05","endLine":157,"groupId":"12231","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSanitationTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/7b/a2f149f2fc836ba7a016097540d79a0d4312ca.src","preCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"}],"commitId":"75bd7b9317058e7a2d1c2b6e3f9ce3069109ba1d","commitMessage":"@@@Add TIMESTAMP and BOOLEAN data type support (#6719)\n\nAdd `TIMESTAMP` and `BOOLEAN` data type support.  and the primitives to support new data types stored as the supported types.\nInternally `TIMESTAMP` is stored as `LONG` (millis since epoch).  `BOOLEAN` is stored as `INT` (`0` for `false`.  `1` for `true`).\nIn the query response.  `TIMESTAMP` values follow the JDBC format (e.g. `2021-01-01 01:01:01.123`).\n\nThe source data of a `TIMESTAMP` field should be either long values (millis since epoch) or String values of JDBC timestamp format; The source data of a `BOOLEAN` field should be boolean.  numbers (non-zero for `true`.  zero for `false`).  or string (`\"true\"` for `true`.  `false` otherwise).\n\nSupport `TIMESTAMP` and `BOOLEAN` in:\n- Data Ingestion\n- Filtering\n- Selection\n- Distinct\n- Order-by\n- Aggregation\n- Group-by\n- Transform\n- Having\n- Post-Aggregation\n- Scalar function (`java.sql.Timestamp` for `TIMESTAMP` and primitive `boolean` for `BOOLEAN`)\n","date":"2021-04-27 10:21:14","modifiedFileCount":"123","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2021-04-30 04:15:52","codes":[{"authorDate":"2021-04-30 04:15:52","commitOrder":3,"curCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBoolean\"), 1);\n      assertEquals(record.getValue(\"svTimestamp\"), Timestamp.valueOf(\"2020-02-02 22:22:22.222\").getTime());\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      \r\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", 123, 123L, 123f, 123.0});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-04-30 04:15:52","endLine":156,"groupId":"12230","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDataTypeTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/0b/5d7ee419cd889e2a684103b3d9fd20eab8598b.src","preCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBoolean\"), 1);\n      assertEquals(record.getValue(\"svTimestamp\"), Timestamp.valueOf(\"2020-02-02 22:22:22.222\").getTime());\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2021-04-30 04:15:52","commitOrder":3,"curCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", \"123\", \"123\", \"123.0\", \"123.0\"});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-04-30 04:15:52","endLine":172,"groupId":"12231","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSanitationTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/0b/5d7ee419cd889e2a684103b3d9fd20eab8598b.src","preCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"6c43af70c76c14c07eef26fb97c9759e3f7b6f9e","commitMessage":"@@@Modify the SanitizationTransformer String casting to support mixed type for MV string input (#6863)\n\n","date":"2021-04-30 04:15:52","modifiedFileCount":"2","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2021-04-30 04:15:52","codes":[{"authorDate":"2021-05-08 10:52:24","commitOrder":4,"curCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBoolean\"), 1);\n      assertEquals(record.getValue(\"svTimestamp\"), Timestamp.valueOf(\"2020-02-02 22:22:22.222\").getTime());\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"svJson\"), \"{\\\"first\\\":\\\"daffy\\\",\\\"last\\\":\\\"duck\\\"}\");\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      \r\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", 123, 123L, 123f, 123.0});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-05-08 10:52:24","endLine":159,"groupId":"12230","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDataTypeTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/eb/8b031ac9223b6d57b8f8146b6c9cd7c8209b01.src","preCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBoolean\"), 1);\n      assertEquals(record.getValue(\"svTimestamp\"), Timestamp.valueOf(\"2020-02-02 22:22:22.222\").getTime());\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      \r\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", 123, 123L, 123f, 123.0});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2021-04-30 04:15:52","commitOrder":4,"curCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", \"123\", \"123\", \"123.0\", \"123.0\"});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-04-30 04:15:52","endLine":172,"groupId":"12231","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSanitationTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/0b/5d7ee419cd889e2a684103b3d9fd20eab8598b.src","preCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", \"123\", \"123\", \"123.0\", \"123.0\"});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"N"}],"commitId":"bd4239fc6908096f60ead9f1ee2c3576f256618b","commitMessage":"@@@JSON column datatype support. (#6878)\n\n* JSON column datatype support.\n\n* code review changes + additional test cases.\n\n* code review changes.\n\n* Cleanup.\n\n* Rebuild.\n\n* Adjust for UTC based timestamp.\n\n* Adjust for UTC based timestamp.\n\n* Adjust for UTC based timestamp.\n\n* Cleanup.\n\n* code review changes.\n\n* Fix test case.\n\n* add TODO comment.\n\n* add TODO comment.\n\n* Rebuild.\n\n* Rebuild.","date":"2021-05-08 10:52:24","modifiedFileCount":"12","status":"M","submitter":"Amrish Lal"},{"authorTime":"2021-04-30 04:15:52","codes":[{"authorDate":"2021-07-31 08:31:26","commitOrder":5,"curCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBoolean\"), 1);\n      assertEquals(record.getValue(\"svTimestamp\"), Timestamp.valueOf(\"2020-02-02 22:22:22.222\").getTime());\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"svJson\"), \"{\\\"first\\\":\\\"daffy\\\",\\\"last\\\":\\\"duck\\\"}\");\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      \r\n      \r\n      \r\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", \"123\", \"123\", \"123.0\", \"123.0\"});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-07-31 08:31:26","endLine":161,"groupId":"101998","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDataTypeTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/e7/1169714d2d20d04b49ed4fe7a2a0370fb0c2a2.src","preCode":"  public void testDataTypeTransformer() {\n    RecordTransformer transformer = new DataTypeTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svInt\"), 123);\n      assertEquals(record.getValue(\"svLong\"), 123L);\n      assertEquals(record.getValue(\"svFloat\"), 123f);\n      assertEquals(record.getValue(\"svDouble\"), 123d);\n      assertEquals(record.getValue(\"svBoolean\"), 1);\n      assertEquals(record.getValue(\"svTimestamp\"), Timestamp.valueOf(\"2020-02-02 22:22:22.222\").getTime());\n      assertEquals(record.getValue(\"svBytes\"), new byte[]{123, 123});\n      assertEquals(record.getValue(\"svJson\"), \"{\\\"first\\\":\\\"daffy\\\",\\\"last\\\":\\\"duck\\\"}\");\n      assertEquals(record.getValue(\"mvInt\"), new Object[]{123});\n      assertEquals(record.getValue(\"mvLong\"), new Object[]{123L});\n      assertEquals(record.getValue(\"mvFloat\"), new Object[]{123f});\n      assertEquals(record.getValue(\"mvDouble\"), new Object[]{123d});\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\\0002\\0003\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"123\");\n      \r\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", 123, 123L, 123f, 123.0});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2021-04-30 04:15:52","commitOrder":5,"curCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", \"123\", \"123\", \"123.0\", \"123.0\"});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","date":"2021-04-30 04:15:52","endLine":172,"groupId":"101998","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSanitationTransformer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/0b/5d7ee419cd889e2a684103b3d9fd20eab8598b.src","preCode":"  public void testSanitationTransformer() {\n    RecordTransformer transformer = new SanitizationTransformer(SCHEMA);\n    GenericRow record = getRecord();\n    for (int i = 0; i < NUM_ROUNDS; i++) {\n      record = transformer.transform(record);\n      assertNotNull(record);\n      assertEquals(record.getValue(\"svStringWithNullCharacters\"), \"1\");\n      assertEquals(record.getValue(\"svStringWithLengthLimit\"), \"12\");\n      assertEquals(record.getValue(\"mvString1\"), new Object[]{\"123\", \"123\", \"123\", \"123.0\", \"123.0\"});\n      assertEquals(record.getValue(\"mvString2\"), new Object[]{\"123\", \"123\", \"123.0\", \"123.0\", \"123\"});\n      assertNull(record.getValue(\"$virtual\"));\n      assertTrue(record.getNullValueFields().isEmpty());\n    }\n  }\n","realPath":"pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"N"}],"commitId":"78b08e4af41adc2e5e6d7387960df0524e2a7e90","commitMessage":"@@@convert types per value for array with mixing types (#7234)\n\n1. convert types for individual value in array.  handling cases where array contains mixing types\n2. for safety.  stop skipping type conversion based on the speculated type for values in array\n3. cast to Number type for numeric PinotDataTypes to make conversion a bit more general","date":"2021-07-31 08:31:26","modifiedFileCount":"4","status":"M","submitter":"Xiaobing"}]
