[{"authorTime":"2019-01-12 01:43:41","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void deleteOfflineTable(String tableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(tableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n  }\n","date":"2019-01-12 01:43:41","endLine":1339,"groupId":"6401","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteOfflineTable","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/17/cd9240d7fad537ca4ae7c36c3fc22d225cf4fb.src","preCode":"  public void deleteOfflineTable(String tableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(tableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1319,"status":"B"},{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":1371,"groupId":"6399","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteRealtimeTable","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/17/cd9240d7fad537ca4ae7c36c3fc22d225cf4fb.src","preCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1341,"status":"B"}],"commitId":"b497851f3406b72b7f36596c362e1fcbcb4a162a","commitMessage":"@@@Move all files in com.linkedin to org.apache (#3680)\n\n","date":"2019-01-12 01:43:41","modifiedFileCount":"0","status":"B","submitter":"Neha Pawar"},{"authorTime":"2019-02-02 03:30:33","codes":[{"authorDate":"2019-02-02 03:30:33","commitOrder":2,"curCode":"  public void deleteOfflineTable(String rawTableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", offlineTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","date":"2019-02-02 03:30:33","endLine":1357,"groupId":"18964","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteOfflineTable","params":"(StringrawTableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/4e/59582c865fc75bb7cb90d606164d95914e2e07.src","preCode":"  public void deleteOfflineTable(String tableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(tableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1327,"status":"M"},{"authorDate":"2019-02-02 03:30:33","commitOrder":2,"curCode":"  public void deleteRealtimeTable(String rawTableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","date":"2019-02-02 03:30:33","endLine":1399,"groupId":"3894","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteRealtimeTable","params":"(StringrawTableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/4e/59582c865fc75bb7cb90d606164d95914e2e07.src","preCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1359,"status":"M"}],"commitId":"1c7b03f0c494893b36dfdcb2dea28af9171c9400","commitMessage":"@@@Add log for delete table API (#3763)\n\n* Add log for delete table API\n","date":"2019-02-02 03:30:33","modifiedFileCount":"2","status":"M","submitter":"Jialiang Li"},{"authorTime":"2019-05-16 01:34:37","codes":[{"authorDate":"2019-02-02 03:30:33","commitOrder":3,"curCode":"  public void deleteOfflineTable(String rawTableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", offlineTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","date":"2019-02-02 03:30:33","endLine":1357,"groupId":"18964","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteOfflineTable","params":"(StringrawTableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/4e/59582c865fc75bb7cb90d606164d95914e2e07.src","preCode":"  public void deleteOfflineTable(String rawTableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", offlineTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1327,"status":"N"},{"authorDate":"2019-05-16 01:34:37","commitOrder":3,"curCode":"  public void deleteRealtimeTable(String rawTableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","date":"2019-05-16 01:34:37","endLine":1506,"groupId":"18962","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteRealtimeTable","params":"(StringrawTableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/ef/883e998d5365b67759b7a2ae2b118270359900.src","preCode":"  public void deleteRealtimeTable(String rawTableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1462,"status":"M"}],"commitId":"40df151e79882a9debedc2971e71625659e4f24f","commitMessage":"@@@Creation/deletion flow for replica groups sets in realtime (#4193)\n\nCreate the replica group znode for realtime depending on segment assignment strategy. Phase 1- step 1 of https://github.com/apache/incubator-pinot/issues/4192\n","date":"2019-05-16 01:34:37","modifiedFileCount":"6","status":"M","submitter":"Neha Pawar"},{"authorTime":"2019-07-13 11:16:53","codes":[{"authorDate":"2019-02-02 03:30:33","commitOrder":4,"curCode":"  public void deleteOfflineTable(String rawTableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", offlineTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","date":"2019-02-02 03:30:33","endLine":1357,"groupId":"18964","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteOfflineTable","params":"(StringrawTableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/4e/59582c865fc75bb7cb90d606164d95914e2e07.src","preCode":"  public void deleteOfflineTable(String rawTableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", offlineTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1327,"status":"N"},{"authorDate":"2019-07-13 11:16:53","commitOrder":4,"curCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","date":"2019-07-13 11:16:53","endLine":1511,"groupId":"18962","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteRealtimeTable","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/0c/f2f5016d88846ae93e7e15f75acb5d635c43ff.src","preCode":"  public void deleteRealtimeTable(String rawTableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1467,"status":"M"}],"commitId":"626c43a37483af8b32e485ad241962935bd9232f","commitMessage":"@@@Misc fix for controller tests (#4431)\n\n","date":"2019-07-13 11:16:53","modifiedFileCount":"8","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2019-07-13 11:16:53","codes":[{"authorDate":"2019-08-09 08:55:03","commitOrder":5,"curCode":"  public void deleteOfflineTable(String tableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", offlineTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","date":"2019-08-09 08:55:03","endLine":1431,"groupId":"18964","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteOfflineTable","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/3c/8eb625778cd6f378ccd1ec5cb7f31cf8a754f9.src","preCode":"  public void deleteOfflineTable(String rawTableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", offlineTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1401,"status":"M"},{"authorDate":"2019-07-13 11:16:53","commitOrder":5,"curCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","date":"2019-07-13 11:16:53","endLine":1511,"groupId":"18962","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteRealtimeTable","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/0c/f2f5016d88846ae93e7e15f75acb5d635c43ff.src","preCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1467,"status":"N"}],"commitId":"674139674b0e72188b1b49c48f687303d3f7a352","commitMessage":"@@@Fix the toggle table state API (#4509)\n\nCurrently toggle table state API is not calling the correct method to drop the table\nRe-write toggle table state API and move it into PinotHelixResourceManager","date":"2019-08-09 08:55:03","modifiedFileCount":"2","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2019-08-16 08:29:41","codes":[{"authorDate":"2019-08-16 08:29:41","commitOrder":6,"curCode":"  public void deleteOfflineTable(String tableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    InstancePartitionsUtils.removeInstancePartitions(_propertyStore,\n        InstancePartitionsType.OFFLINE.getInstancePartitionsName(TableNameBuilder.extractRawTableName(tableName)));\n    LOGGER.info(\"Deleting table {}: Removed instance partitions\", offlineTableName);\n\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","date":"2019-08-16 08:29:41","endLine":1409,"groupId":"18964","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteOfflineTable","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/c7/fb0730db554b5293451b035fa71321e9fdf37c.src","preCode":"  public void deleteOfflineTable(String tableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", offlineTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1377,"status":"M"},{"authorDate":"2019-08-16 08:29:41","commitOrder":6,"curCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    String rawTableName = TableNameBuilder.extractRawTableName(tableName);\n    InstancePartitionsUtils.removeInstancePartitions(_propertyStore,\n        InstancePartitionsType.CONSUMING.getInstancePartitionsName(rawTableName));\n    InstancePartitionsUtils.removeInstancePartitions(_propertyStore,\n        InstancePartitionsType.COMPLETED.getInstancePartitionsName(rawTableName));\n    LOGGER.info(\"Deleting table {}: Removed instance partitions\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed groupId/partitionId mapping for HLC table\", realtimeTableName);\n\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","date":"2019-08-16 08:29:41","endLine":1460,"groupId":"7366","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteRealtimeTable","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/c7/fb0730db554b5293451b035fa71321e9fdf37c.src","preCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeInstancePartitionAssignmentFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed replica group partition assignment\", realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1411,"status":"M"}],"commitId":"4e41bc36b156b8f1d54619eb79fe161eed2c42c9","commitMessage":"@@@[Instance Assignment] Plug in instance assignment (#4516)\n\n- Add instance assignment APIs including:\n  - GET/PUT/DELETE instance partitions\n  - Assign instances for a table\n  - Replace instance in instance partitions\n- Assign instances if necessary while creating/updating table config\n- Backward-compatible.  no change to the cluster if instance assignment is not configured","date":"2019-08-16 08:29:41","modifiedFileCount":"12","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2021-08-21 08:46:26","codes":[{"authorDate":"2021-08-21 08:46:26","commitOrder":7,"curCode":"  public void deleteOfflineTable(String tableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    InstancePartitionsUtils.removeInstancePartitions(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed instance partitions\", offlineTableName);\n\n    \r\n    SegmentLineageAccessHelper.deleteSegmentLineage(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment lineage\", offlineTableName);\n\n    \r\n    MinionTaskMetadataUtils.deleteTaskMetadata(_propertyStore, MinionConstants.MergeRollupTask.TASK_TYPE, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed merge rollup task metadata\", offlineTableName);\n\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","date":"2021-08-21 08:46:26","endLine":1540,"groupId":"101582","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteOfflineTable","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/8f/be2348214c8d1d090204edd888c64616509e02.src","preCode":"  public void deleteOfflineTable(String tableName) {\n    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", offlineTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", offlineTableName);\n\n    \r\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(offlineTableName)) {\n      _helixAdmin.dropResource(_helixClusterName, offlineTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", offlineTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(offlineTableName, getSegmentsFor(offlineTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", offlineTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, offlineTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n\n    \r\n    InstancePartitionsUtils.removeInstancePartitions(_propertyStore,\n        InstancePartitionsType.OFFLINE.getInstancePartitionsName(TableNameBuilder.extractRawTableName(tableName)));\n    LOGGER.info(\"Deleting table {}: Removed instance partitions\", offlineTableName);\n\n    LOGGER.info(\"Deleting table {}: Finish\", offlineTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1501,"status":"M"},{"authorDate":"2021-08-21 08:46:26","commitOrder":7,"curCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    String rawTableName = TableNameBuilder.extractRawTableName(tableName);\n    InstancePartitionsUtils.removeInstancePartitions(_propertyStore,\n        InstancePartitionsType.CONSUMING.getInstancePartitionsName(rawTableName));\n    InstancePartitionsUtils.removeInstancePartitions(_propertyStore,\n        InstancePartitionsType.COMPLETED.getInstancePartitionsName(rawTableName));\n    LOGGER.info(\"Deleting table {}: Removed instance partitions\", realtimeTableName);\n\n    \r\n    SegmentLineageAccessHelper.deleteSegmentLineage(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment lineage\", realtimeTableName);\n\n    \r\n    MinionTaskMetadataUtils.deleteTaskMetadata(_propertyStore, MinionConstants.MergeRollupTask.TASK_TYPE, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed merge rollup task metadata\", realtimeTableName);\n\n    MinionTaskMetadataUtils.deleteTaskMetadata(_propertyStore, MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed merge realtime to offline metadata\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed groupId/partitionId mapping for HLC table\", realtimeTableName);\n\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","date":"2021-08-21 08:46:26","endLine":1602,"groupId":"101582","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteRealtimeTable","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/8f/be2348214c8d1d090204edd888c64616509e02.src","preCode":"  public void deleteRealtimeTable(String tableName) {\n    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(tableName);\n    LOGGER.info(\"Deleting table {}: Start\", realtimeTableName);\n\n    \r\n    HelixHelper.removeResourceFromBrokerIdealState(_helixZkManager, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed from broker resource\", realtimeTableName);\n\n    \r\n    Set<String> instancesForTable = null;\n    if (_helixAdmin.getResourcesInCluster(_helixClusterName).contains(realtimeTableName)) {\n      instancesForTable = getAllInstancesForTable(realtimeTableName);\n      _helixAdmin.dropResource(_helixClusterName, realtimeTableName);\n      LOGGER.info(\"Deleting table {}: Removed helix table resource\", realtimeTableName);\n    }\n\n    \r\n    _segmentDeletionManager.removeSegmentsFromStore(realtimeTableName, getSegmentsFor(realtimeTableName));\n    LOGGER.info(\"Deleting table {}: Removed stored segments\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceSegmentsFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed segment metadata\", realtimeTableName);\n\n    \r\n    ZKMetadataProvider.removeResourceConfigFromPropertyStore(_propertyStore, realtimeTableName);\n    LOGGER.info(\"Deleting table {}: Removed table config\", realtimeTableName);\n\n    \r\n    String rawTableName = TableNameBuilder.extractRawTableName(tableName);\n    InstancePartitionsUtils.removeInstancePartitions(_propertyStore,\n        InstancePartitionsType.CONSUMING.getInstancePartitionsName(rawTableName));\n    InstancePartitionsUtils.removeInstancePartitions(_propertyStore,\n        InstancePartitionsType.COMPLETED.getInstancePartitionsName(rawTableName));\n    LOGGER.info(\"Deleting table {}: Removed instance partitions\", realtimeTableName);\n\n    \r\n    if (instancesForTable != null) {\n      for (String instance : instancesForTable) {\n        InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(_propertyStore, instance);\n        if (instanceZKMetadata != null) {\n          instanceZKMetadata.removeResource(realtimeTableName);\n          ZKMetadataProvider.setInstanceZKMetadata(_propertyStore, instanceZKMetadata);\n        }\n      }\n    }\n    LOGGER.info(\"Deleting table {}: Removed groupId/partitionId mapping for HLC table\", realtimeTableName);\n\n    LOGGER.info(\"Deleting table {}: Finish\", realtimeTableName);\n  }\n","realPath":"pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":1542,"status":"M"}],"commitId":"5417cbb5ab371de7393b8b055d8faff277fd5041","commitMessage":"@@@Delete metadata properly on table deletion (#7329)\n\nSome of minion tasks interact with the extra metadata\nincluding segment lineage and task specific metadata.\nThose need to be clean up on table deletion.","date":"2021-08-21 08:46:26","modifiedFileCount":"7","status":"M","submitter":"Seunghyun Lee"}]
