[{"authorTime":"2019-03-20 07:35:41","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":2,"curCode":"  private SegmentCompletionProtocol.Response sendRequest(String url) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr =\n          _fileUploadDownloadClient.sendSegmentCompletionProtocolRequest(new URI(url), OTHER_REQUESTS_TIMEOUT)\n              .getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","date":"2019-01-12 01:43:41","endLine":183,"groupId":"7908","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sendRequest","params":"(Stringurl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/6a/bb9fef0b766f88832d59dc68916481c2b6dcc0.src","preCode":"  private SegmentCompletionProtocol.Response sendRequest(String url) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr =\n          _fileUploadDownloadClient.sendSegmentCompletionProtocolRequest(new URI(url), OTHER_REQUESTS_TIMEOUT)\n              .getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/server/realtime/ServerSegmentCompletionProtocolHandler.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"NB"},{"authorDate":"2019-03-20 07:35:41","commitOrder":2,"curCode":"  private SegmentCompletionProtocol.Response sendCommitEndWithMetadataFiles(String url,\n      Map<String, File> metadataFiles) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr = _fileUploadDownloadClient\n          .uploadSegmentMetadataFiles(new URI(url), metadataFiles, SEGMENT_UPLOAD_REQUEST_TIMEOUT_MS).getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","date":"2019-03-20 07:35:41","endLine":220,"groupId":"7908","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sendCommitEndWithMetadataFiles","params":"(Stringurl@Map<String@File>metadataFiles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/22/61c5589cc925976a1d3d35309bbec63d622191.src","preCode":"  private SegmentCompletionProtocol.Response sendCommitEndWithMetadataFiles(String url,\n      Map<String, File> metadataFiles) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr = _fileUploadDownloadClient\n          .uploadSegmentMetadataFiles(new URI(url), metadataFiles, SEGMENT_UPLOAD_REQUEST_TIMEOUT_MS).getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/server/realtime/ServerSegmentCompletionProtocolHandler.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"}],"commitId":"fe203b5be2bbbf6464f1c757f07cb3374fa3bf19","commitMessage":"@@@Pinot server side change to optimize LLC segment completion with direct metadata upload.  (#3941)\n\n* The Pinot server side change to optimize LLC segment complete protocol by uploading metadata directly.\n\n* Minor style and comment fixes.\n\n* Fix error handling and style issues.\n\n* Add missing header..\n\n* Add the config for commit end with metadata into server instance config. Combine integration tests.\n\n* Change comments.\n\n* Minor comment fix.\n\n* Use the metadata files created in the server directly.\n\n* Deprecated the old segmentCommitEnd method and change the default to commentEndWithMetadata.\n\n* Return null instead of crashing server...\n\n* Add comments.\n\n* Invert config checks.\n","date":"2019-03-20 07:35:41","modifiedFileCount":"10","status":"M","submitter":"Ting Chen"},{"authorTime":"2019-04-27 07:42:24","codes":[{"authorDate":"2019-04-27 07:42:24","commitOrder":3,"curCode":"  private SegmentCompletionProtocol.Response sendRequest(String url) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr =\n          _fileUploadDownloadClient.sendSegmentCompletionProtocolRequest(new URI(url), DEFAULT_OTHER_REQUESTS_TIMEOUT)\n              .getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","date":"2019-04-27 07:42:24","endLine":197,"groupId":"7908","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sendRequest","params":"(Stringurl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/bc/fa7eebf410b13b63e279af42eb4e318e4bef34.src","preCode":"  private SegmentCompletionProtocol.Response sendRequest(String url) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr =\n          _fileUploadDownloadClient.sendSegmentCompletionProtocolRequest(new URI(url), OTHER_REQUESTS_TIMEOUT)\n              .getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/server/realtime/ServerSegmentCompletionProtocolHandler.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2019-04-27 07:42:24","commitOrder":3,"curCode":"  private SegmentCompletionProtocol.Response sendCommitEndWithMetadataFiles(String url,\n      Map<String, File> metadataFiles) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr = _fileUploadDownloadClient\n          .uploadSegmentMetadataFiles(new URI(url), metadataFiles, _segmentUploadRequestTimeoutMs).getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","date":"2019-04-27 07:42:24","endLine":220,"groupId":"7908","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sendCommitEndWithMetadataFiles","params":"(Stringurl@Map<String@File>metadataFiles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/bc/fa7eebf410b13b63e279af42eb4e318e4bef34.src","preCode":"  private SegmentCompletionProtocol.Response sendCommitEndWithMetadataFiles(String url,\n      Map<String, File> metadataFiles) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr = _fileUploadDownloadClient\n          .uploadSegmentMetadataFiles(new URI(url), metadataFiles, SEGMENT_UPLOAD_REQUEST_TIMEOUT_MS).getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/server/realtime/ServerSegmentCompletionProtocolHandler.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"7d695d82864771eb9077dee089b9d34c0cd768fb","commitMessage":"@@@Make realtime server upload timeout configurable (#4170)\n\n* Make default upload timeout 5m\n\n* Move config strings and defaults to CommonConstants.Server.SegmentUploadProtocol\n","date":"2019-04-27 07:42:24","modifiedFileCount":"5","status":"M","submitter":"Neha Pawar"},{"authorTime":"2020-04-25 00:20:50","codes":[{"authorDate":"2020-04-25 00:20:50","commitOrder":4,"curCode":"  private SegmentCompletionProtocol.Response sendRequest(String url) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr =\n          _fileUploadDownloadClient.sendSegmentCompletionProtocolRequest(new URI(url), DEFAULT_OTHER_REQUESTS_TIMEOUT)\n              .getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    SegmentCompletionProtocolUtils.raiseSegmentCompletionProtocolResponseMetric(_serverMetrics, response);\n    return response;\n  }\n","date":"2020-04-25 00:20:50","endLine":218,"groupId":"7908","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"sendRequest","params":"(Stringurl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/9e/035f927378fdf657982c704ad36b96c2134976.src","preCode":"  private SegmentCompletionProtocol.Response sendRequest(String url) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr =\n          _fileUploadDownloadClient.sendSegmentCompletionProtocolRequest(new URI(url), DEFAULT_OTHER_REQUESTS_TIMEOUT)\n              .getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/server/realtime/ServerSegmentCompletionProtocolHandler.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2020-04-25 00:20:50","commitOrder":4,"curCode":"  private SegmentCompletionProtocol.Response sendCommitEndWithMetadataFiles(String url,\n      Map<String, File> metadataFiles) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr = _fileUploadDownloadClient\n          .uploadSegmentMetadataFiles(new URI(url), metadataFiles, _segmentUploadRequestTimeoutMs).getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    SegmentCompletionProtocolUtils.raiseSegmentCompletionProtocolResponseMetric(_serverMetrics, response);\n    return response;\n  }\n","date":"2020-04-25 00:20:50","endLine":241,"groupId":"7908","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"sendCommitEndWithMetadataFiles","params":"(Stringurl@Map<String@File>metadataFiles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/9e/035f927378fdf657982c704ad36b96c2134976.src","preCode":"  private SegmentCompletionProtocol.Response sendCommitEndWithMetadataFiles(String url,\n      Map<String, File> metadataFiles) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr = _fileUploadDownloadClient\n          .uploadSegmentMetadataFiles(new URI(url), metadataFiles, _segmentUploadRequestTimeoutMs).getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    raiseSegmentCompletionProtocolResponseMetric(response);\n    return response;\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/server/realtime/ServerSegmentCompletionProtocolHandler.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"f2c56a737dea42b7f97e09afddca6df0e7b4be22","commitMessage":"@@@[Part 2] Deepstore by-pass in LLC: introduce segment uploader for segment split commit. (#5277)\n\n* Introduce the concept of segment uploader and refactor the server LLC logic to use a configurable segment uploader in SegmentCommitter.\n\n* Add a new segment uploader.\n\n* Revert merge errors.\n\n* Delete the BestEffortSegmentUploader for now.\n\n* Update pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SegmentUploader.java\n\nCo-Authored-By: Subbu Subramaniam <mcvsubbu@users.noreply.github.com>\n\n* Refactoring the classes based on Subbu's suggestion.\n\n* Revise based on comments.\n\n* Fix broken integration tests.\n\n* Revise based on feedback.\n\nCo-authored-by: Subbu Subramaniam <mcvsubbu@users.noreply.github.com>","date":"2020-04-25 00:20:50","modifiedFileCount":"4","status":"M","submitter":"Ting Chen"},{"authorTime":"2021-03-30 03:38:42","codes":[{"authorDate":"2021-03-30 03:38:42","commitOrder":5,"curCode":"  private SegmentCompletionProtocol.Response sendRequest(String url) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr = _fileUploadDownloadClient\n          .sendSegmentCompletionProtocolRequest(new URI(url), FileUploadDownloadClient.makeAuthHeader(_authToken), null,\n              DEFAULT_OTHER_REQUESTS_TIMEOUT).getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    SegmentCompletionProtocolUtils.raiseSegmentCompletionProtocolResponseMetric(_serverMetrics, response);\n    return response;\n  }\n","date":"2021-03-30 03:38:42","endLine":233,"groupId":"10532","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"sendRequest","params":"(Stringurl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/56/0f55ea6ad32b16897e8a67fe3a1b8a4de2cff6.src","preCode":"  private SegmentCompletionProtocol.Response sendRequest(String url) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr =\n          _fileUploadDownloadClient.sendSegmentCompletionProtocolRequest(new URI(url), DEFAULT_OTHER_REQUESTS_TIMEOUT)\n              .getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    SegmentCompletionProtocolUtils.raiseSegmentCompletionProtocolResponseMetric(_serverMetrics, response);\n    return response;\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/server/realtime/ServerSegmentCompletionProtocolHandler.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2021-03-30 03:38:42","commitOrder":5,"curCode":"  private SegmentCompletionProtocol.Response sendCommitEndWithMetadataFiles(String url,\n      Map<String, File> metadataFiles) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr = _fileUploadDownloadClient\n          .uploadSegmentMetadataFiles(new URI(url), metadataFiles, FileUploadDownloadClient.makeAuthHeader(_authToken),\n              null, _segmentUploadRequestTimeoutMs).getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    SegmentCompletionProtocolUtils.raiseSegmentCompletionProtocolResponseMetric(_serverMetrics, response);\n    return response;\n  }\n","date":"2021-03-30 03:38:42","endLine":257,"groupId":"10532","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"sendCommitEndWithMetadataFiles","params":"(Stringurl@Map<String@File>metadataFiles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/56/0f55ea6ad32b16897e8a67fe3a1b8a4de2cff6.src","preCode":"  private SegmentCompletionProtocol.Response sendCommitEndWithMetadataFiles(String url,\n      Map<String, File> metadataFiles) {\n    SegmentCompletionProtocol.Response response;\n    try {\n      String responseStr = _fileUploadDownloadClient\n          .uploadSegmentMetadataFiles(new URI(url), metadataFiles, _segmentUploadRequestTimeoutMs).getResponse();\n      response = SegmentCompletionProtocol.Response.fromJsonString(responseStr);\n      LOGGER.info(\"Controller response {} for {}\", response.toJsonString(), url);\n      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {\n        ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n      }\n    } catch (Exception e) {\n      \r\n      response = SegmentCompletionProtocol.RESP_NOT_SENT;\n      LOGGER.error(\"Could not send request {}\", url, e);\n      \r\n      \r\n      ControllerLeaderLocator.getInstance().invalidateCachedControllerLeader();\n    }\n    SegmentCompletionProtocolUtils.raiseSegmentCompletionProtocolResponseMetric(_serverMetrics, response);\n    return response;\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/server/realtime/ServerSegmentCompletionProtocolHandler.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"89a22f097c5ff26396e58950c90d764066a56121","commitMessage":"@@@Basic Auth for pinot-controller (#6613)\n\nAdds support for token-based authentication in pinot-controller.  pinot-broker.  pinot-server.  minion.  and any associated tooling. Furthermore.  adds endpoints to manage different auth workflows via UI and provides a sample implementation using basic auth. Builds on #6507.  relates to #6435.","date":"2021-03-30 03:38:42","modifiedFileCount":"66","status":"M","submitter":"Alexander Pucher"}]
