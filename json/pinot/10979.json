[{"authorTime":"2020-12-03 02:37:09","codes":[{"authorDate":"2020-12-03 02:37:09","commitOrder":1,"curCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.DOUBLE});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    FloatIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextFloat()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","date":"2020-12-03 02:37:09","endLine":60,"groupId":"18148","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/d1/457f0d16f436bd82782edb477cc417c7c010b0.src","preCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.DOUBLE});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    FloatIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextFloat()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/distinct/raw/BaseRawFloatSingleColumnDistinctExecutor.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2020-12-03 02:37:09","commitOrder":1,"curCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.DOUBLE});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    DoubleIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextDouble()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","date":"2020-12-03 02:37:09","endLine":60,"groupId":"18148","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/d5/6d02f608986f01824aa1c5bc6dc955cb7bc430.src","preCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.DOUBLE});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    DoubleIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextDouble()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/distinct/raw/BaseRawDoubleSingleColumnDistinctExecutor.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"66e9394e6d0dc3711ca8bd94d3297e49efba5d5d","commitMessage":"@@@Improve performance for distinct queries (#6285)\n\nCurrently the distinct queries are handled as aggregation.  which has limitations on early termination and special type handling for better performance.\n\nThis PR adds new operators for distinct queries.\nThe new operators:\n- Early terminate the distinct only queries when enough distinct records are collected\n- Specialize the handling for different data types.  using primitives if possible\n- Specialize the handling for single column distinct queries\n- Inner segment.  the operator will calculate the distinct records using dictionary ids if possible.  and only read the dictionary when returning the results","date":"2020-12-03 02:37:09","modifiedFileCount":"10","status":"B","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-12-03 02:37:09","codes":[{"authorDate":"2021-01-06 06:02:27","commitOrder":2,"curCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.FLOAT});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    FloatIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextFloat()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","date":"2021-01-06 06:02:27","endLine":60,"groupId":"18148","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/7d/290864cd3aa5447a0899b7373c155b319796d4.src","preCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.DOUBLE});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    FloatIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextFloat()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/distinct/raw/BaseRawFloatSingleColumnDistinctExecutor.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-12-03 02:37:09","commitOrder":2,"curCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.DOUBLE});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    DoubleIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextDouble()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","date":"2020-12-03 02:37:09","endLine":60,"groupId":"18148","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/d5/6d02f608986f01824aa1c5bc6dc955cb7bc430.src","preCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.DOUBLE});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    DoubleIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextDouble()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/distinct/raw/BaseRawDoubleSingleColumnDistinctExecutor.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"f09de8255b6300a2ca91f9d3d15b38c69beea31a","commitMessage":"@@@Fix the raw single column distinct executors (#6411)\n\n- Fix the typos within the raw single column distinct executor\n- Add unit test for that","date":"2021-01-06 06:02:27","modifiedFileCount":"5","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2021-04-27 10:21:14","codes":[{"authorDate":"2021-04-27 10:21:14","commitOrder":3,"curCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema = new DataSchema(new String[]{_expression.toString()},\n        new ColumnDataType[]{ColumnDataType.fromDataTypeSV(_dataType)});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    FloatIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextFloat()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","date":"2021-04-27 10:21:14","endLine":63,"groupId":"10979","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/06/7d086959fdf3fff5972af72471d91fa9b7cc79.src","preCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.FLOAT});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    FloatIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextFloat()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/distinct/raw/BaseRawFloatSingleColumnDistinctExecutor.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2021-04-27 10:21:14","commitOrder":3,"curCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema = new DataSchema(new String[]{_expression.toString()},\n        new ColumnDataType[]{ColumnDataType.fromDataTypeSV(_dataType)});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    DoubleIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextDouble()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","date":"2021-04-27 10:21:14","endLine":63,"groupId":"10979","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/47/eb0714ddfe23564a5a835103df36bcb00c6869.src","preCode":"  public DistinctTable getResult() {\n    DataSchema dataSchema =\n        new DataSchema(new String[]{_expression.toString()}, new ColumnDataType[]{ColumnDataType.DOUBLE});\n    List<Record> records = new ArrayList<>(_valueSet.size());\n    DoubleIterator valueIterator = _valueSet.iterator();\n    while (valueIterator.hasNext()) {\n      records.add(new Record(new Object[]{valueIterator.nextDouble()}));\n    }\n    return new DistinctTable(dataSchema, records);\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/distinct/raw/BaseRawDoubleSingleColumnDistinctExecutor.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"75bd7b9317058e7a2d1c2b6e3f9ce3069109ba1d","commitMessage":"@@@Add TIMESTAMP and BOOLEAN data type support (#6719)\n\nAdd `TIMESTAMP` and `BOOLEAN` data type support.  and the primitives to support new data types stored as the supported types.\nInternally `TIMESTAMP` is stored as `LONG` (millis since epoch).  `BOOLEAN` is stored as `INT` (`0` for `false`.  `1` for `true`).\nIn the query response.  `TIMESTAMP` values follow the JDBC format (e.g. `2021-01-01 01:01:01.123`).\n\nThe source data of a `TIMESTAMP` field should be either long values (millis since epoch) or String values of JDBC timestamp format; The source data of a `BOOLEAN` field should be boolean.  numbers (non-zero for `true`.  zero for `false`).  or string (`\"true\"` for `true`.  `false` otherwise).\n\nSupport `TIMESTAMP` and `BOOLEAN` in:\n- Data Ingestion\n- Filtering\n- Selection\n- Distinct\n- Order-by\n- Aggregation\n- Group-by\n- Transform\n- Having\n- Post-Aggregation\n- Scalar function (`java.sql.Timestamp` for `TIMESTAMP` and primitive `boolean` for `BOOLEAN`)\n","date":"2021-04-27 10:21:14","modifiedFileCount":"123","status":"M","submitter":"Xiaotian (Jackie) Jiang"}]
