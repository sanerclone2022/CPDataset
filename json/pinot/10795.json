[{"authorTime":"2019-09-24 08:45:11","codes":[{"authorDate":"2019-09-24 08:45:11","commitOrder":2,"curCode":"  public EmptySelectionOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalRawDocs());\n  }\n","date":"2019-09-24 08:45:11","endLine":63,"groupId":"13643","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"EmptySelectionOperator","params":"(IndexSegmentindexSegment@Selectionselection@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/04/4d4c5da230f5951fc6130a32298350d059665c.src","preCode":"  public EmptySelectionOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalRawDocs());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/EmptySelectionOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2019-09-24 08:45:11","commitOrder":2,"curCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = _expressions.size();\n    _expressionMetadata = new TransformResultMetadata[numExpressions];\n    _dictionaries = new Dictionary[numExpressions];\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      _expressionMetadata[i] = expressionMetadata;\n      if (expressionMetadata.hasDictionary()) {\n        _dictionaries[i] = _transformOperator.getDictionary(expression);\n      }\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = selection.getSize();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","date":"2019-09-24 08:45:11","endLine":81,"groupId":"7744","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"SelectionOnlyOperator","params":"(IndexSegmentindexSegment@Selectionselection@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/6c/5cb3c65af8c323b04096a50fa0edf3ac62d32d.src","preCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = _expressions.size();\n    _expressionMetadata = new TransformResultMetadata[numExpressions];\n    _dictionaries = new Dictionary[numExpressions];\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      _expressionMetadata[i] = expressionMetadata;\n      if (expressionMetadata.hasDictionary()) {\n        _dictionaries[i] = _transformOperator.getDictionary(expression);\n      }\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = selection.getSize();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/SelectionOnlyOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"MB"}],"commitId":"f8c2cf3d87a2849c029e861c5470311e0c217011","commitMessage":"@@@Put order-by expressions in front of selection expreesions in selection DataSchema (#4629)\n\nFor selection order-by queries.  put order-by expressions in front of selection expressions in the server response (DataTable)\n- In the DataTable.  all the expressions (both order-by and selection) should be deduplicated\n- This is the behavior before PR #4346\n- Fix the backward-incompatible issue introduced in PR #4346\n- With this.  no need to keep extra column indices to order the rows\nOn Broker side.  when compiling the query.  deduplicate the order-by expressions\n- With this and the DataTable column order.  only need to compare the first numOrderByColumns\nOn Broker side.  add temporary code to handle the DataSchema with different expression orders\n- Temporary code are manually tested\n- Once all the servers are deployed.  will remove the temporary code\nWhen formatting the selection result.  use thread-local DecimalFormat instead of creating one for each value\n\nAlso include some minor bug fixes\n- 'SELECT *' should not select order-by expressions\n- Make EmptySelectionOperator work with transform functions\n\nCode convertion: only use Nullable annotation.  all arguments and return value for the method are by default Nonnull","date":"2019-09-24 08:45:11","modifiedFileCount":"23","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2019-10-01 09:16:13","codes":[{"authorDate":"2019-09-24 08:45:11","commitOrder":3,"curCode":"  public EmptySelectionOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalRawDocs());\n  }\n","date":"2019-09-24 08:45:11","endLine":63,"groupId":"13643","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"EmptySelectionOperator","params":"(IndexSegmentindexSegment@Selectionselection@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/04/4d4c5da230f5951fc6130a32298350d059665c.src","preCode":"  public EmptySelectionOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalRawDocs());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/EmptySelectionOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2019-10-01 09:16:13","commitOrder":3,"curCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = _expressions.size();\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = selection.getSize();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","date":"2019-10-01 09:16:13","endLine":72,"groupId":"13643","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"SelectionOnlyOperator","params":"(IndexSegmentindexSegment@Selectionselection@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/03/299e1c3ffaae8bcae9bd531fc5e396f481d301.src","preCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = _expressions.size();\n    _expressionMetadata = new TransformResultMetadata[numExpressions];\n    _dictionaries = new Dictionary[numExpressions];\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      _expressionMetadata[i] = expressionMetadata;\n      if (expressionMetadata.hasDictionary()) {\n        _dictionaries[i] = _transformOperator.getDictionary(expression);\n      }\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = selection.getSize();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/SelectionOnlyOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"8193e52ad23177700c66e6fcd5593dcd79c1ec45","commitMessage":"@@@Refactor TransformBlockDataFetcher into RowBasedBlockValueFetcher (#4658)\n\nAdd BlockValSet.isSingleValue() interface\nRemove the old value fetcher implementations","date":"2019-10-01 09:16:13","modifiedFileCount":"10","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2019-11-06 08:57:35","codes":[{"authorDate":"2019-11-06 08:57:35","commitOrder":4,"curCode":"  public EmptySelectionOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalRawDocs());\n  }\n","date":"2019-11-06 08:57:35","endLine":63,"groupId":"13643","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"EmptySelectionOperator","params":"(IndexSegmentindexSegment@Selectionselection@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/ae/846d25c83cd9d4c779c27a3e57b56dc215b246.src","preCode":"  public EmptySelectionOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalRawDocs());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/EmptySelectionOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-11-06 08:57:35","commitOrder":4,"curCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment);\n\n    int numExpressions = _expressions.size();\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = selection.getSize();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","date":"2019-11-06 08:57:35","endLine":72,"groupId":"13643","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"SelectionOnlyOperator","params":"(IndexSegmentindexSegment@Selectionselection@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/31/38e1cb8e50eeaa847bb36fc57a90ccd4a66976.src","preCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment, null);\n\n    int numExpressions = _expressions.size();\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = selection.getSize();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/SelectionOnlyOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"052b73b0aed962ecd3916313a11e0dc12bc09b4d","commitMessage":"@@@Enhance Selection Comparator 2 (#4788)\n\n- Change back to row-based switch so that comparison can be inlined\n- Reduce the expression compilation","date":"2019-11-06 08:57:35","modifiedFileCount":"8","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2019-11-06 08:57:35","codes":[{"authorDate":"2020-02-27 09:30:45","commitOrder":5,"curCode":"  public EmptySelectionOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalDocs());\n  }\n","date":"2020-02-27 09:30:45","endLine":63,"groupId":"13643","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"EmptySelectionOperator","params":"(IndexSegmentindexSegment@Selectionselection@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/73/e46e8a1ba64c24dd3ca510c18526720729c9cf.src","preCode":"  public EmptySelectionOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalRawDocs());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/EmptySelectionOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-11-06 08:57:35","commitOrder":5,"curCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment);\n\n    int numExpressions = _expressions.size();\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = selection.getSize();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","date":"2019-11-06 08:57:35","endLine":72,"groupId":"13643","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"SelectionOnlyOperator","params":"(IndexSegmentindexSegment@Selectionselection@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/31/38e1cb8e50eeaa847bb36fc57a90ccd4a66976.src","preCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment);\n\n    int numExpressions = _expressions.size();\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = selection.getSize();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/SelectionOnlyOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"3c91a6d5b446886b2f0e6bb43c920b8e6e397b26","commitMessage":"@@@Remove the support of the old Star-Tree (#5086)\n\nRemove the support of the old Star-Tree generated with the StarTreeIndexSpec (already deprecated)\nRemove the related metadata (rawDoc and aggregatedDoc)\nRemove the field size and derived metric type from MetricFieldSpec\nSimplify the segment generation logic\n\nBackward-incompatible: (checked with the community to make sure there is no use case with the old Star-Tree)\nExisting segments with old Star-Tree won't work properly","date":"2020-02-27 09:30:45","modifiedFileCount":"118","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-06-25 07:34:41","codes":[{"authorDate":"2020-06-25 07:34:41","commitOrder":6,"curCode":"  public EmptySelectionOperator(IndexSegment indexSegment, QueryContext queryContext,\n      TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(queryContext.getSelectExpressions(), indexSegment);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalDocs());\n  }\n","date":"2020-06-25 07:34:41","endLine":64,"groupId":"13643","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"EmptySelectionOperator","params":"(IndexSegmentindexSegment@QueryContextqueryContext@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/a4/ae620e45c3e94bee67803e86ac4d11718d71a1.src","preCode":"  public EmptySelectionOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalDocs());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/EmptySelectionOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2020-06-25 07:34:41","commitOrder":6,"curCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, QueryContext queryContext,\n      TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(queryContext.getSelectExpressions(), indexSegment);\n\n    int numExpressions = _expressions.size();\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = queryContext.getLimit();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","date":"2020-06-25 07:34:41","endLine":72,"groupId":"13643","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"SelectionOnlyOperator","params":"(IndexSegmentindexSegment@QueryContextqueryContext@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/2d/2d4eb942a4ea97d73f17c3532b837ddde733a2.src","preCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, Selection selection, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(selection.getSelectionColumns(), indexSegment);\n\n    int numExpressions = _expressions.size();\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = selection.getSize();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/SelectionOnlyOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"332b460276574ffc2b1fc33ea0934584f467f83a","commitMessage":"@@@[QueryContext] Use QueryContext in Operators and DataTableReducers (#5605)\n\nReplace BrokerRequest with QueryContext in Operators (server side) and DataTableReducers (broker side)\nThe reason to put these 2 part in one PR is because they share the same code for selection queries\nThe change is backward-compatible because it does not involve any change on the wiring layer\n\nChanges for QueryContext:\n- Select expressions will contain both aggregation and non-aggregation expressions so that the columns in the result table can be correctly ordered\n- Change method signature from `getAlias(ExpressionContext expression)` to `getAliasMap()` and return an unmodifiable map to make it easier to use","date":"2020-06-25 07:34:41","modifiedFileCount":"34","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-06-30 01:35:01","codes":[{"authorDate":"2020-06-30 01:35:01","commitOrder":7,"curCode":"  public EmptySelectionOperator(IndexSegment indexSegment, List<ExpressionContext> expressions,\n      TransformOperator transformOperator) {\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      ExpressionContext expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalDocs());\n  }\n","date":"2020-06-30 01:35:01","endLine":59,"groupId":"10795","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"EmptySelectionOperator","params":"(IndexSegmentindexSegment@List<ExpressionContext>expressions@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/f6/8252afd02287f3671d0f0097c3689a043a114a.src","preCode":"  public EmptySelectionOperator(IndexSegment indexSegment, QueryContext queryContext,\n      TransformOperator transformOperator) {\n    List<TransformExpressionTree> expressions =\n        SelectionOperatorUtils.extractExpressions(queryContext.getSelectExpressions(), indexSegment);\n\n    int numExpressions = expressions.size();\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = expressions.get(i);\n      TransformResultMetadata expressionMetadata = transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _executionStatistics = new ExecutionStatistics(0L, 0L, 0L, indexSegment.getSegmentMetadata().getTotalDocs());\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/EmptySelectionOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2020-06-30 01:35:01","commitOrder":7,"curCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, QueryContext queryContext,\n      List<ExpressionContext> expressions, TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = expressions;\n\n    int numExpressions = _expressions.size();\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      ExpressionContext expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = queryContext.getLimit();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","date":"2020-06-30 01:35:01","endLine":72,"groupId":"10795","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"SelectionOnlyOperator","params":"(IndexSegmentindexSegment@QueryContextqueryContext@List<ExpressionContext>expressions@TransformOperatortransformOperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/2c/efb033b435e5b46660c486235f777e7a387f8b.src","preCode":"  public SelectionOnlyOperator(IndexSegment indexSegment, QueryContext queryContext,\n      TransformOperator transformOperator) {\n    _indexSegment = indexSegment;\n    _transformOperator = transformOperator;\n    _expressions = SelectionOperatorUtils.extractExpressions(queryContext.getSelectExpressions(), indexSegment);\n\n    int numExpressions = _expressions.size();\n    _blockValSets = new BlockValSet[numExpressions];\n    String[] columnNames = new String[numExpressions];\n    DataSchema.ColumnDataType[] columnDataTypes = new DataSchema.ColumnDataType[numExpressions];\n    for (int i = 0; i < numExpressions; i++) {\n      TransformExpressionTree expression = _expressions.get(i);\n      TransformResultMetadata expressionMetadata = _transformOperator.getResultMetadata(expression);\n      columnNames[i] = expression.toString();\n      columnDataTypes[i] =\n          DataSchema.ColumnDataType.fromDataType(expressionMetadata.getDataType(), expressionMetadata.isSingleValue());\n    }\n    _dataSchema = new DataSchema(columnNames, columnDataTypes);\n\n    _numRowsToKeep = queryContext.getLimit();\n    _rows = new ArrayList<>(Math.min(_numRowsToKeep, SelectionOperatorUtils.MAX_ROW_HOLDER_INITIAL_CAPACITY));\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/operator/query/SelectionOnlyOperator.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"1d9135bdb84dbae28dd867be7c4a3bcdc667d4c7","commitMessage":"@@@[QueryContext] Use QueryContext in functions (#5613)\n\nReplace BrokerRequest classes (AggregationInfo.  TransformExpressionTree) with QueryContext classes (FunctionContext.  ExpressionContext) for aggregation and transform functions\nThis is the last PR of removing BrokerRequest classes from the query execution path. After this PR.  the query engine will be independent of BrokerRequest and only access QueryContext classes.  and all the redundant expression parsing will be saved.\n\nBesides replacing BrokerRequest classes.  also refactored DistinctCountThetaSketchAggregationFunction to use the QueryContext classes.  which solves the TODO of standardizing the predicate strings and simplifies the predicate handling.\n\nMinor bug-fixes:\n- Fix HLL log2m override for SQL query and make it case insensitive (In BaseBrokerRequestHandler)\n- Add special argument handling for DistinctCountRawThetaSketch (In BrokerRequestToQueryContextConverter)\n- Always use single argument * for COUNT when converting FunctionCallAstNode to FunctionContext (In QueryContextConverterUtils)\n\nDeployment notes:\nBecause of the standardization of the DistinctCountThetaSketch predicate strings.  please upgrade Broker before Server. The new Broker can handle both standard and non-standard predicate strings for backward-compatibility.","date":"2020-06-30 01:35:01","modifiedFileCount":"111","status":"M","submitter":"Xiaotian (Jackie) Jiang"}]
