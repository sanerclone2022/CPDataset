[{"authorTime":"2019-01-12 01:43:41","codes":[{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void aggregateGroupByMV(int length, @Nonnull int[][] groupKeysArray,\n      @Nonnull GroupByResultHolder groupByResultHolder, @Nonnull BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.add((long) value);\n          }\n        }\n        break;\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.merge(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_EST aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":159,"groupId":"17103","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@@Nonnullint[][]groupKeysArray@@NonnullGroupByResultHoldergroupByResultHolder@@NonnullBlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/0b/92847af987fd7566bf697ba848395ebf735dc8.src","preCode":"  public void aggregateGroupByMV(int length, @Nonnull int[][] groupKeysArray,\n      @Nonnull GroupByResultHolder groupByResultHolder, @Nonnull BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.add((long) value);\n          }\n        }\n        break;\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.merge(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_EST aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileEstAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"},{"authorDate":"2019-01-12 01:43:41","commitOrder":1,"curCode":"  public void aggregateGroupByMV(int length, @Nonnull int[][] groupKeysArray,\n      @Nonnull GroupByResultHolder groupByResultHolder, @Nonnull BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(ByteBuffer.wrap(bytesValues[i]));\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_TDIGEST aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-01-12 01:43:41","endLine":162,"groupId":"7392","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@@Nonnullint[][]groupKeysArray@@NonnullGroupByResultHoldergroupByResultHolder@@NonnullBlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/88/7fe087e79363c8a3c8a03328dc162293c0ee56.src","preCode":"  public void aggregateGroupByMV(int length, @Nonnull int[][] groupKeysArray,\n      @Nonnull GroupByResultHolder groupByResultHolder, @Nonnull BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(ByteBuffer.wrap(bytesValues[i]));\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_TDIGEST aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileTDigestAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"}],"commitId":"b497851f3406b72b7f36596c362e1fcbcb4a162a","commitMessage":"@@@Move all files in com.linkedin to org.apache (#3680)\n\n","date":"2019-01-12 01:43:41","modifiedFileCount":"0","status":"B","submitter":"Neha Pawar"},{"authorTime":"2019-09-26 10:02:10","codes":[{"authorDate":"2019-09-26 10:02:10","commitOrder":2,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.add((long) value);\n          }\n        }\n        break;\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.merge(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_EST aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-09-26 10:02:10","endLine":154,"groupId":"17103","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@BlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/e4/fbdeb4cf3d4e42803920f1c174754d71003d10.src","preCode":"  public void aggregateGroupByMV(int length, @Nonnull int[][] groupKeysArray,\n      @Nonnull GroupByResultHolder groupByResultHolder, @Nonnull BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.add((long) value);\n          }\n        }\n        break;\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.merge(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_EST aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileEstAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2019-09-26 10:02:10","commitOrder":2,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(ByteBuffer.wrap(bytesValues[i]));\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_TDIGEST aggregation function: \" + valueType);\n    }\n  }\n","date":"2019-09-26 10:02:10","endLine":157,"groupId":"7392","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@BlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/0e/1ff7eca90504446e5f4c579dc7210ebd8879a9.src","preCode":"  public void aggregateGroupByMV(int length, @Nonnull int[][] groupKeysArray,\n      @Nonnull GroupByResultHolder groupByResultHolder, @Nonnull BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(ByteBuffer.wrap(bytesValues[i]));\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_TDIGEST aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileTDigestAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"4b5c5acba103a7106aa361dde634d2020a2899ce","commitMessage":"@@@Misc fixes for aggregation functions (#4579)\n\n- Make MV functions call the correct visit method\n- Simplify the DistinctCountRawHLLMVAggregationFunction\n- Move AggregationFunctionTypeTest to correct package\n- Remove @Nonnull annotation\n- Optimize imports","date":"2019-09-26 10:02:10","modifiedFileCount":"51","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2019-10-04 02:21:23","codes":[{"authorDate":"2019-10-04 02:21:23","commitOrder":3,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    if (blockValSets[0].getValueType() != DataType.BYTES) {\n      long[] longValues = blockValSets[0].getLongValuesSV();\n      for (int i = 0; i < length; i++) {\n        long value = longValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultQuantileDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          QuantileDigest quantileDigest = groupByResultHolder.getResult(groupKey);\n          if (quantileDigest != null) {\n            quantileDigest.merge(value);\n          } else {\n            \r\n            groupByResultHolder\n                .setValueForKey(groupKey, ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","date":"2019-10-04 02:21:23","endLine":145,"groupId":"12262","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@BlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/2c/eaf85060e25eec6b90beaaf8b01dd4fe45dbd8.src","preCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.add((long) value);\n          }\n        }\n        break;\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n          for (int groupKey : groupKeysArray[i]) {\n            QuantileDigest quantileDigest = getQuantileDigest(groupByResultHolder, groupKey);\n            quantileDigest.merge(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_EST aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileEstAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2019-10-04 02:21:23","commitOrder":3,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    if (blockValSets[0].getValueType() != DataType.BYTES) {\n      double[] doubleValues = blockValSets[0].getDoubleValuesSV();\n      for (int i = 0; i < length; i++) {\n        double value = doubleValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultTDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          TDigest tDigest = groupByResultHolder.getResult(groupKey);\n          if (tDigest != null) {\n            tDigest.add(value);\n          } else {\n            \r\n            groupByResultHolder.setValueForKey(groupKey, ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","date":"2019-10-04 02:21:23","endLine":147,"groupId":"1998","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@BlockValSet...blockValSets)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/02/8a643ef93930ebb391bba0a0822bd787c3ddfd.src","preCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    FieldSpec.DataType valueType = blockValSets[0].getValueType();\n    switch (valueType) {\n      case INT:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n        double[] valueArray = blockValSets[0].getDoubleValuesSV();\n        for (int i = 0; i < length; i++) {\n          double value = valueArray[i];\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n      case BYTES:\n        \r\n        byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n        for (int i = 0; i < length; i++) {\n          TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(ByteBuffer.wrap(bytesValues[i]));\n          for (int groupKey : groupKeysArray[i]) {\n            TDigest tDigest = getTDigest(groupByResultHolder, groupKey);\n            tDigest.add(value);\n          }\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Illegal data type for PERCENTILE_TDIGEST aggregation function: \" + valueType);\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileTDigestAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"48edd8d3207e29152c4ae848823438a15450e797","commitMessage":"@@@Support serialized BYTES data with non-default factor (#4666)\n\nFor the following approximate aggregation functions.  the function allows a factor to tune the result size and accuracy:\n- DistinctCountHLL - log2m for HyperLogLog\n- PercentileEst - max error for QuantileDigest\n- PercentileTDigest - compression for TDigest\nWhen user provides serialized Object via BYTES.  this factor is embedded inside the serialized bytes.\nIn that case.  we should pick the one inside the serialized Object instead of using the default one.\n\nAdded SerializedBytesQueriesTest to test the behavior","date":"2019-10-04 02:21:23","modifiedFileCount":"10","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-04-17 08:48:57","codes":[{"authorDate":"2020-04-17 08:48:57","commitOrder":4,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<String, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_column);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      long[] longValues = blockValSet.getLongValuesSV();\n      for (int i = 0; i < length; i++) {\n        long value = longValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultQuantileDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          QuantileDigest quantileDigest = groupByResultHolder.getResult(groupKey);\n          if (quantileDigest != null) {\n            quantileDigest.merge(value);\n          } else {\n            \r\n            groupByResultHolder\n                .setValueForKey(groupKey, ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","date":"2020-04-17 08:48:57","endLine":170,"groupId":"14439","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@Map<String@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/48/3691e42b8f537c6e539bc5e5553889b101506b.src","preCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    if (blockValSets[0].getValueType() != DataType.BYTES) {\n      long[] longValues = blockValSets[0].getLongValuesSV();\n      for (int i = 0; i < length; i++) {\n        long value = longValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultQuantileDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          QuantileDigest quantileDigest = groupByResultHolder.getResult(groupKey);\n          if (quantileDigest != null) {\n            quantileDigest.merge(value);\n          } else {\n            \r\n            groupByResultHolder\n                .setValueForKey(groupKey, ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileEstAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2020-04-17 08:48:57","commitOrder":4,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<String, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_column);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      double[] doubleValues = blockValSet.getDoubleValuesSV();\n      for (int i = 0; i < length; i++) {\n        double value = doubleValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultTDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          TDigest tDigest = groupByResultHolder.getResult(groupKey);\n          if (tDigest != null) {\n            tDigest.add(value);\n          } else {\n            \r\n            groupByResultHolder.setValueForKey(groupKey, ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","date":"2020-04-17 08:48:57","endLine":171,"groupId":"10047","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@Map<String@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/4e/99e684dcd4f4cdc2156b4f57ce1877cf333ed0.src","preCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      BlockValSet... blockValSets) {\n    if (blockValSets[0].getValueType() != DataType.BYTES) {\n      double[] doubleValues = blockValSets[0].getDoubleValuesSV();\n      for (int i = 0; i < length; i++) {\n        double value = doubleValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultTDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSets[0].getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          TDigest tDigest = groupByResultHolder.getResult(groupKey);\n          if (tDigest != null) {\n            tDigest.add(value);\n          } else {\n            \r\n            groupByResultHolder.setValueForKey(groupKey, ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileTDigestAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"2a311119c13933a65baaab9a7120f0d18c767a3f","commitMessage":"@@@Support Aggregation functions with multiple arguments. (#5259)\n\nThis PR starts to address the issue https://github.com/apache/incubator-pinot/issues/5261. The current implementation assumes that all AggregationFunctions take one argument\nwith the exception of DistinctAggregationFunction. This PR handles changes related\nto supporting AggregationFunctions with multiple arguments.  as we anticipate new\naggregation functions to be added that take multiple arguments.\n\n1. Enhanced parser to allow multiple arguments for aggregation functions.\n2. AggregationFunctionFactory provides the right set of arguments when instantiating\n   individual aggregation functions.\n3. AggregationFunctions now store their arguments.  as opposed to assuming that the right\n   BlockValSet is passed to the aggregate() api's.\n4. AggregationFunction.aggregate() api's now take a Map<String.  BlockValSet> where the key\n   is the argument expression (columnName for simple case).  as opposed to a variable array\n   as that interface does not provide a way to associate BlockValSet with the argument.\n5. Cleanup: Removed env variable to enable/disable Distinct.  as there is no need for it to be\n   disabled anymore.","date":"2020-04-17 08:48:57","modifiedFileCount":"48","status":"M","submitter":"Mayank Shrivastava"},{"authorTime":"2020-05-13 05:02:38","codes":[{"authorDate":"2020-05-13 05:02:38","commitOrder":5,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      long[] longValues = blockValSet.getLongValuesSV();\n      for (int i = 0; i < length; i++) {\n        long value = longValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultQuantileDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          QuantileDigest quantileDigest = groupByResultHolder.getResult(groupKey);\n          if (quantileDigest != null) {\n            quantileDigest.merge(value);\n          } else {\n            \r\n            groupByResultHolder\n                .setValueForKey(groupKey, ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","date":"2020-05-13 05:02:38","endLine":157,"groupId":"14439","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@Map<TransformExpressionTree@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/5a/89731882601f845023e1d7ac6bd82630c5b05f.src","preCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<String, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_column);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      long[] longValues = blockValSet.getLongValuesSV();\n      for (int i = 0; i < length; i++) {\n        long value = longValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultQuantileDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          QuantileDigest quantileDigest = groupByResultHolder.getResult(groupKey);\n          if (quantileDigest != null) {\n            quantileDigest.merge(value);\n          } else {\n            \r\n            groupByResultHolder\n                .setValueForKey(groupKey, ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileEstAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2020-05-13 05:02:38","commitOrder":5,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      double[] doubleValues = blockValSet.getDoubleValuesSV();\n      for (int i = 0; i < length; i++) {\n        double value = doubleValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultTDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          TDigest tDigest = groupByResultHolder.getResult(groupKey);\n          if (tDigest != null) {\n            tDigest.add(value);\n          } else {\n            \r\n            groupByResultHolder.setValueForKey(groupKey, ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","date":"2020-05-13 05:02:38","endLine":159,"groupId":"10047","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@Map<TransformExpressionTree@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/bb/e76dd3324730ca545bce18a3be72d381d9596b.src","preCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<String, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_column);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      double[] doubleValues = blockValSet.getDoubleValuesSV();\n      for (int i = 0; i < length; i++) {\n        double value = doubleValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultTDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          TDigest tDigest = groupByResultHolder.getResult(groupKey);\n          if (tDigest != null) {\n            tDigest.add(value);\n          } else {\n            \r\n            groupByResultHolder.setValueForKey(groupKey, ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileTDigestAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"8b0089f4e8f8d323abbdfb0d8dfd0c79e49b41c2","commitMessage":"@@@Clean up AggregationFunctionContext and use TransformExpressionTree as the key in the blockValSetMap passed to the AggregationFunctions (#5364)\n\n- Clean up all the usage of AggregationFunctionContext to directly use AggregationFunction\n- Construct the AggregationFunctions and Group-by Expressions at planning phase and pass them to Operator and Executor to save the extra expression compilation\n- Use TransformExpressionTree as the key in the blockValSetMap passed to the AggregationFunctions\n  - The benefit of this is to save the redundant string conversion.  and more efficient hashCode() and equals()\n  - The keys of the blockValSetMap should be the same as AggregationFunction.getInputExpressions()\n  - The only exception is CountAggregationFunction with Star-Tree where there is a single entry in blockValSetMap (column \"*\")\n- Add base implementation of AggregationFunction: BaseSingleExpressionAggregationFunction for aggregation functions on single expressions\n- For PERCENTILE group aggregation functions.  support using the second arguments to pass in percentile (e.g. PERCENTILE(column.  99).  PERCENTILETDIGEST(column.  90))\n- Enhance Star-Tree Aggregation/Group-by Executor to handle the column name conversion so that AggregationFunctionColumnPair is transparent to the AggregationFunction\n\nBACKWARD-INCOMPATIBLE CHANGE:\nThe following APIs are changed in AggregationFunction (use TransformExpressionTree instead of String as the key of blockValSetMap):\nvoid aggregate(int length.  AggregationResultHolder aggregationResultHolder.  Map<TransformExpressionTree.  BlockValSet> blockValSetMap);\nvoid aggregateGroupBySV(int length.  int[] groupKeyArray.  GroupByResultHolder groupByResultHolder.  Map<TransformExpressionTree.  BlockValSet> blockValSetMap);\nvoid aggregateGroupByMV(int length.  int[][] groupKeysArray.  GroupByResultHolder groupByResultHolder.  Map<TransformExpressionTree.  BlockValSet> blockValSetMap);","date":"2020-05-13 05:02:38","modifiedFileCount":"79","status":"M","submitter":"Xiaotian (Jackie) Jiang"},{"authorTime":"2020-06-30 01:35:01","codes":[{"authorDate":"2020-06-30 01:35:01","commitOrder":6,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      long[] longValues = blockValSet.getLongValuesSV();\n      for (int i = 0; i < length; i++) {\n        long value = longValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultQuantileDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          QuantileDigest quantileDigest = groupByResultHolder.getResult(groupKey);\n          if (quantileDigest != null) {\n            quantileDigest.merge(value);\n          } else {\n            \r\n            groupByResultHolder\n                .setValueForKey(groupKey, ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","date":"2020-06-30 01:35:01","endLine":157,"groupId":"10914","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@Map<ExpressionContext@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/b4/4eb746c64a0b4f9f017f8951a35e4c791ac7f1.src","preCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      long[] longValues = blockValSet.getLongValuesSV();\n      for (int i = 0; i < length; i++) {\n        long value = longValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultQuantileDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        QuantileDigest value = ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          QuantileDigest quantileDigest = groupByResultHolder.getResult(groupKey);\n          if (quantileDigest != null) {\n            quantileDigest.merge(value);\n          } else {\n            \r\n            groupByResultHolder\n                .setValueForKey(groupKey, ObjectSerDeUtils.QUANTILE_DIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileEstAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2020-06-30 01:35:01","commitOrder":6,"curCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      double[] doubleValues = blockValSet.getDoubleValuesSV();\n      for (int i = 0; i < length; i++) {\n        double value = doubleValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultTDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          TDigest tDigest = groupByResultHolder.getResult(groupKey);\n          if (tDigest != null) {\n            tDigest.add(value);\n          } else {\n            \r\n            groupByResultHolder.setValueForKey(groupKey, ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","date":"2020-06-30 01:35:01","endLine":159,"groupId":"10914","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregateGroupByMV","params":"(intlength@int[][]groupKeysArray@GroupByResultHoldergroupByResultHolder@Map<ExpressionContext@BlockValSet>blockValSetMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pinot-10-0.7/blobInfo/CC_OUT/blobs/cf/78dd27a386baae23406220e6bd59dc7fd2f1ac.src","preCode":"  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n      Map<TransformExpressionTree, BlockValSet> blockValSetMap) {\n    BlockValSet blockValSet = blockValSetMap.get(_expression);\n    if (blockValSet.getValueType() != DataType.BYTES) {\n      double[] doubleValues = blockValSet.getDoubleValuesSV();\n      for (int i = 0; i < length; i++) {\n        double value = doubleValues[i];\n        for (int groupKey : groupKeysArray[i]) {\n          getDefaultTDigest(groupByResultHolder, groupKey).add(value);\n        }\n      }\n    } else {\n      \r\n      byte[][] bytesValues = blockValSet.getBytesValuesSV();\n      for (int i = 0; i < length; i++) {\n        TDigest value = ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]);\n        for (int groupKey : groupKeysArray[i]) {\n          TDigest tDigest = groupByResultHolder.getResult(groupKey);\n          if (tDigest != null) {\n            tDigest.add(value);\n          } else {\n            \r\n            groupByResultHolder.setValueForKey(groupKey, ObjectSerDeUtils.TDIGEST_SER_DE.deserialize(bytesValues[i]));\n          }\n        }\n      }\n    }\n  }\n","realPath":"pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PercentileTDigestAggregationFunction.java","repoName":"pinot","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"1d9135bdb84dbae28dd867be7c4a3bcdc667d4c7","commitMessage":"@@@[QueryContext] Use QueryContext in functions (#5613)\n\nReplace BrokerRequest classes (AggregationInfo.  TransformExpressionTree) with QueryContext classes (FunctionContext.  ExpressionContext) for aggregation and transform functions\nThis is the last PR of removing BrokerRequest classes from the query execution path. After this PR.  the query engine will be independent of BrokerRequest and only access QueryContext classes.  and all the redundant expression parsing will be saved.\n\nBesides replacing BrokerRequest classes.  also refactored DistinctCountThetaSketchAggregationFunction to use the QueryContext classes.  which solves the TODO of standardizing the predicate strings and simplifies the predicate handling.\n\nMinor bug-fixes:\n- Fix HLL log2m override for SQL query and make it case insensitive (In BaseBrokerRequestHandler)\n- Add special argument handling for DistinctCountRawThetaSketch (In BrokerRequestToQueryContextConverter)\n- Always use single argument * for COUNT when converting FunctionCallAstNode to FunctionContext (In QueryContextConverterUtils)\n\nDeployment notes:\nBecause of the standardization of the DistinctCountThetaSketch predicate strings.  please upgrade Broker before Server. The new Broker can handle both standard and non-standard predicate strings for backward-compatibility.","date":"2020-06-30 01:35:01","modifiedFileCount":"111","status":"M","submitter":"Xiaotian (Jackie) Jiang"}]
