[{"authorTime":"2018-10-05 23:41:09","codes":[{"authorDate":"2018-08-30 19:08:42","commitOrder":2,"curCode":"\tpublic MeterFilter metricsHttpServerUriTagFilter() {\n\t\tString metricName = this.properties.getWeb().getServer().getRequestsMetricName();\n\t\tMeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String\n\t\t\t\t.format(\"Reached the maximum number of URI tags for '%s'.\", metricName));\n\t\treturn MeterFilter.maximumAllowableTags(metricName, \"uri\",\n\t\t\t\tthis.properties.getWeb().getServer().getMaxUriTags(), filter);\n\t}\n","date":"2018-08-30 19:08:42","endLine":80,"groupId":"7550","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"metricsHttpServerUriTagFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/40/d79038d6e2903f1cc47ca52c23845ea0bc24b3.src","preCode":"\tpublic MeterFilter metricsHttpServerUriTagFilter() {\n\t\tString metricName = this.properties.getWeb().getServer().getRequestsMetricName();\n\t\tMeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String\n\t\t\t\t.format(\"Reached the maximum number of URI tags for '%s'.\", metricName));\n\t\treturn MeterFilter.maximumAllowableTags(metricName, \"uri\",\n\t\t\t\tthis.properties.getWeb().getServer().getMaxUriTags(), filter);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebFluxMetricsAutoConfiguration.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"NB"},{"authorDate":"2018-10-05 23:41:09","commitOrder":2,"curCode":"\tpublic MeterFilter jerseyMetricsUriTagFilter() {\n\t\tString metricName = this.properties.getWeb().getServer().getRequestsMetricName();\n\t\tMeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String\n\t\t\t\t.format(\"Reached the maximum number of URI tags for '%s'.\", metricName));\n\t\treturn MeterFilter.maximumAllowableTags(metricName, \"uri\",\n\t\t\t\tthis.properties.getWeb().getServer().getMaxUriTags(), filter);\n\t}\n","date":"2018-10-05 23:41:09","endLine":96,"groupId":"7550","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"jerseyMetricsUriTagFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4a/791db7b0fee1d85a2d5558208d3ee140e59f36.src","preCode":"\tpublic MeterFilter jerseyMetricsUriTagFilter() {\n\t\tString metricName = this.properties.getWeb().getServer().getRequestsMetricName();\n\t\tMeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String\n\t\t\t\t.format(\"Reached the maximum number of URI tags for '%s'.\", metricName));\n\t\treturn MeterFilter.maximumAllowableTags(metricName, \"uri\",\n\t\t\t\tthis.properties.getWeb().getServer().getMaxUriTags(), filter);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jersey/JerseyServerMetricsAutoConfiguration.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"}],"commitId":"1c0be1ced91063e1bce762f54dab9bccabf5a365","commitMessage":"@@@Merge pull request #12482 from Michael Weirauch and Michael Simons\n\n* gh-12482:\n  Polish \"Auto-configure Micrometer's Jersey 2 server instrumentation\"\n  Auto-configure Micrometer's Jersey 2 server instrumentation\n","date":"2018-10-05 23:41:09","modifiedFileCount":"0","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-01 14:17:42","codes":[{"authorDate":"2019-05-01 14:17:42","commitOrder":3,"curCode":"\tpublic MeterFilter metricsHttpServerUriTagFilter() {\n\t\tString metricName = this.properties.getWeb().getServer().getRequest()\n\t\t\t\t.getMetricName();\n\t\tMeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String\n\t\t\t\t.format(\"Reached the maximum number of URI tags for '%s'.\", metricName));\n\t\treturn MeterFilter.maximumAllowableTags(metricName, \"uri\",\n\t\t\t\tthis.properties.getWeb().getServer().getMaxUriTags(), filter);\n\t}\n","date":"2019-05-01 14:17:42","endLine":83,"groupId":"101008","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"metricsHttpServerUriTagFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fc/9327ee32598619defbb7eae2c0ede78dcdfc1e.src","preCode":"\tpublic MeterFilter metricsHttpServerUriTagFilter() {\n\t\tString metricName = this.properties.getWeb().getServer().getRequestsMetricName();\n\t\tMeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String\n\t\t\t\t.format(\"Reached the maximum number of URI tags for '%s'.\", metricName));\n\t\treturn MeterFilter.maximumAllowableTags(metricName, \"uri\",\n\t\t\t\tthis.properties.getWeb().getServer().getMaxUriTags(), filter);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebFluxMetricsAutoConfiguration.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2019-05-01 14:17:42","commitOrder":3,"curCode":"\tpublic MeterFilter jerseyMetricsUriTagFilter() {\n\t\tString metricName = this.properties.getWeb().getServer().getRequest()\n\t\t\t\t.getMetricName();\n\t\tMeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String\n\t\t\t\t.format(\"Reached the maximum number of URI tags for '%s'.\", metricName));\n\t\treturn MeterFilter.maximumAllowableTags(metricName, \"uri\",\n\t\t\t\tthis.properties.getWeb().getServer().getMaxUriTags(), filter);\n\t}\n","date":"2019-05-01 14:17:42","endLine":96,"groupId":"101008","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"jerseyMetricsUriTagFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d6/57e0a5d09f6bd4efde4ce677263161014a14a8.src","preCode":"\tpublic MeterFilter jerseyMetricsUriTagFilter() {\n\t\tString metricName = this.properties.getWeb().getServer().getRequestsMetricName();\n\t\tMeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String\n\t\t\t\t.format(\"Reached the maximum number of URI tags for '%s'.\", metricName));\n\t\treturn MeterFilter.maximumAllowableTags(metricName, \"uri\",\n\t\t\t\tthis.properties.getWeb().getServer().getMaxUriTags(), filter);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jersey/JerseyServerMetricsAutoConfiguration.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"eb028fa77db248e46f9c17ee1fd2f488a0af6a2c","commitMessage":"@@@Merge pull request #15988 from ttddyy\n\n* pr/15988:\n  Polish \"Allow configuration of auto-timed metrics\"\n  Allow configuration of auto-timed metrics\n","date":"2019-05-01 14:17:42","modifiedFileCount":"24","status":"M","submitter":"Stephane Nicoll"}]
