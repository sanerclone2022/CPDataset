[{"authorTime":"2018-01-10 12:57:10","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":1,"curCode":"\tpublic void getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> 0L);\n\t\t\tMap<String, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(\"test\"));\n\t\t\toperations.values().forEach((operation) -> assertThat(operation.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class));\n\t\t});\n\t}\n","date":"2018-01-20 12:44:24","endLine":161,"groupId":"4694","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d7/90e83d94b6897d425faffb6b5c52ade06b89e6.src","preCode":"\tpublic void getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> 0L);\n\t\t\tMap<String, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(\"test\"));\n\t\t\toperations.values().forEach((operation) -> assertThat(operation.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2018-01-10 12:57:10","commitOrder":1,"curCode":"\tpublic void getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> (endpointId.equals(\"test\") ? 500L : 0L));\n\t\t\tMap<String, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(\"test\"));\n\t\t\tTestOperation getAll = operations.get(findTestEndpointMethod(\"getAll\"));\n\t\t\tTestOperation getOne = operations\n\t\t\t\t\t.get(findTestEndpointMethod(\"getOne\", String.class));\n\t\t\tTestOperation update = operations.get(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpoint.class, \"update\", String.class, String.class));\n\t\t\tassertThat(((CachingOperationInvoker) getAll.getInvoker()).getTimeToLive())\n\t\t\t\t\t.isEqualTo(500);\n\t\t\tassertThat(getOne.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(update.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class);\n\t\t});\n\t}\n","date":"2018-01-20 12:44:24","endLine":198,"groupId":"4694","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d7/90e83d94b6897d425faffb6b5c52ade06b89e6.src","preCode":"\tpublic void getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> (endpointId.equals(\"test\") ? 500L : 0L));\n\t\t\tMap<String, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(\"test\"));\n\t\t\tTestOperation getAll = operations.get(findTestEndpointMethod(\"getAll\"));\n\t\t\tTestOperation getOne = operations\n\t\t\t\t\t.get(findTestEndpointMethod(\"getOne\", String.class));\n\t\t\tTestOperation update = operations.get(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpoint.class, \"update\", String.class, String.class));\n\t\t\tassertThat(((CachingOperationInvoker) getAll.getInvoker()).getTimeToLive())\n\t\t\t\t\t.isEqualTo(500);\n\t\t\tassertThat(getOne.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(update.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"}],"commitId":"1d39feffeabf4b94e3f900b941b58e0443d5887a","commitMessage":"@@@Overhaul actuator endpoint code\n\nRefactor several areas of the actuator endpoint code in order to make\nfuture extensions easier. The primary goal is to introduce the concept\nof an `ExposableEndpoint` that has technology specific subclasses and\ncan carry additional data for filters to use. Many other changes have\nbeen made along the way including:\n\n* A new EndpointSupplier interface that allows cleaner separation of\n  supplying vs discovering endpoints. This allows cleaner class names\n  and allows for better auto-configuration since a user can choose to\n  provide their own supplier entirely.\n\n* A `DiscoveredEndpoint` interface that allows the `EndpointFilter`\n  to be greatly simplified. A filter now doesn't need to know about\n  discovery concerns unless absolutely necessary.\n\n* Improved naming and package structure. Many technology specific\n  concerns are now grouped in a better way. Related concerns are\n  co-located and concepts from one area no longer leakage into another.\n\n* Simplified `HandlerMapping` implementations. Many common concerns have\n  been pulled up helping to create simpler subclasses.\n\n* Simplified JMX adapters. Many of the intermediary `Info` classes have\n  been removed. The `DiscoveredJmxOperation` is now responsible for\n  mapping methods to operations.\n\n* A specific @`HealthEndpointCloudFoundryExtension` for Cloud Foundry.\n  The extension logic used to create a \"full\" health endpoint extension\n  has been made explicit.\n\nFixes gh-11428\nFixes gh-11581\n","date":"2018-01-20 12:44:24","modifiedFileCount":"63","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> 0L);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")));\n\t\t\toperations.values().forEach((operation) -> assertThat(operation.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class));\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":164,"groupId":"7351","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a2/6a0773ab3d9d56fb0e28bd6fd2519c7b3c1c78.src","preCode":"\tpublic void getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> 0L);\n\t\t\tMap<String, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(\"test\"));\n\t\t\toperations.values().forEach((operation) -> assertThat(operation.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"},{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> (endpointId.equals(EndpointId.of(\"test\")) ? 500L\n\t\t\t\t\t\t\t: 0L));\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")));\n\t\t\tTestOperation getAll = operations.get(findTestEndpointMethod(\"getAll\"));\n\t\t\tTestOperation getOne = operations\n\t\t\t\t\t.get(findTestEndpointMethod(\"getOne\", String.class));\n\t\t\tTestOperation update = operations.get(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpoint.class, \"update\", String.class, String.class));\n\t\t\tassertThat(((CachingOperationInvoker) getAll.getInvoker()).getTimeToLive())\n\t\t\t\t\t.isEqualTo(500);\n\t\t\tassertThat(getOne.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(update.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class);\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":204,"groupId":"7351","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a2/6a0773ab3d9d56fb0e28bd6fd2519c7b3c1c78.src","preCode":"\tpublic void getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> (endpointId.equals(\"test\") ? 500L : 0L));\n\t\t\tMap<String, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(\"test\"));\n\t\t\tTestOperation getAll = operations.get(findTestEndpointMethod(\"getAll\"));\n\t\t\tTestOperation getOne = operations\n\t\t\t\t\t.get(findTestEndpointMethod(\"getOne\", String.class));\n\t\t\tTestOperation update = operations.get(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpoint.class, \"update\", String.class, String.class));\n\t\t\tassertThat(((CachingOperationInvoker) getAll.getInvoker()).getTimeToLive())\n\t\t\t\t\t.isEqualTo(500);\n\t\t\tassertThat(getOne.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(update.getInvoker())\n\t\t\t\t\t.isNotInstanceOf(CachingOperationInvoker.class);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context, (endpointId) -> 0L);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of(\"test\")));\n\t\t\toperations.values().forEach(\n\t\t\t\t\t(operation) -> assertThat(operation.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class));\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":163,"groupId":"10394","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/5734d8be02a5dd04ae88742b6ec518a0917dbe.src","preCode":"\tpublic void getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context, (endpointId) -> 0L);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of(\"test\")));\n\t\t\toperations.values().forEach(\n\t\t\t\t\t(operation) -> assertThat(operation.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> (endpointId.equals(EndpointId.of(\"test\")) ? 500L : 0L));\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of(\"test\")));\n\t\t\tTestOperation getAll = operations.get(findTestEndpointMethod(\"getAll\"));\n\t\t\tTestOperation getOne = operations.get(findTestEndpointMethod(\"getOne\", String.class));\n\t\t\tTestOperation update = operations\n\t\t\t\t\t.get(ReflectionUtils.findMethod(TestEndpoint.class, \"update\", String.class, String.class));\n\t\t\tassertThat(((CachingOperationInvoker) getAll.getInvoker()).getTimeToLive()).isEqualTo(500);\n\t\t\tassertThat(getOne.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(update.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class);\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":194,"groupId":"10394","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/5734d8be02a5dd04ae88742b6ec518a0917dbe.src","preCode":"\tpublic void getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls() {\n\t\tload(TestEndpointConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context,\n\t\t\t\t\t(endpointId) -> (endpointId.equals(EndpointId.of(\"test\")) ? 500L : 0L));\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of(\"test\")));\n\t\t\tTestOperation getAll = operations.get(findTestEndpointMethod(\"getAll\"));\n\t\t\tTestOperation getOne = operations.get(findTestEndpointMethod(\"getOne\", String.class));\n\t\t\tTestOperation update = operations\n\t\t\t\t\t.get(ReflectionUtils.findMethod(TestEndpoint.class, \"update\", String.class, String.class));\n\t\t\tassertThat(((CachingOperationInvoker) getAll.getInvoker()).getTimeToLive()).isEqualTo(500);\n\t\t\tassertThat(getOne.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(update.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
