[{"authorTime":"2020-03-09 23:55:02","codes":[{"authorDate":"2020-03-09 23:55:02","commitOrder":1,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient().build();\n\t\twebClient.get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\twebClient.get().retrieve().toBodilessEntity().doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tthis.webServer.stop();\n\t\tassertThat(errorReference.get()).hasCauseInstanceOf(ConnectException.class);\n\t}\n","date":"2020-03-10 02:12:20","endLine":284,"groupId":"1124","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5b/452e8d5a77ae60ca06dfe3a43575da67a83c5f.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient().build();\n\t\twebClient.get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\twebClient.get().retrieve().toBodilessEntity().doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tthis.webServer.stop();\n\t\tassertThat(errorReference.get()).hasCauseInstanceOf(ConnectException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"B"},{"authorDate":"2020-03-09 23:55:02","commitOrder":1,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\t\r\n\t\t\r\n\t\tCountDownLatch responseLatch = new CountDownLatch(1);\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tblockingHandler.completeOne();\n\t\tresponseLatch.await(5, TimeUnit.SECONDS);\n\t\tthis.webServer.stop();\n\t\tThrowable error = await().atMost(Duration.ofSeconds(5)).until(errorReference::get, (ex) -> ex != null);\n\t\tassertThat(error).isInstanceOf(IOException.class);\n\t}\n","date":"2020-03-10 02:12:20","endLine":148,"groupId":"15661","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e4/870b5d5afc346f32fafe93b78f97d6722ff683.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\t\r\n\t\t\r\n\t\tCountDownLatch responseLatch = new CountDownLatch(1);\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tblockingHandler.completeOne();\n\t\tresponseLatch.await(5, TimeUnit.SECONDS);\n\t\tthis.webServer.stop();\n\t\tThrowable error = await().atMost(Duration.ofSeconds(5)).until(errorReference::get, (ex) -> ex != null);\n\t\tassertThat(error).isInstanceOf(IOException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"308e1d36759db12f3e49fa158514e6d0c8fd66ed","commitMessage":"@@@Add support for gracefully shutting down the web server\n\nThis commit adds support for gracefully shutting down the embedded\nweb server. When a grace period is configured\n(server.shutdown.grace-period).  upon shutdown.  the web server will no\nlonger permit new requests and will wait for up to the grace period\nfor active requests to complete.\n\nCloses gh-4657\n","date":"2020-03-10 02:12:20","modifiedFileCount":"32","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2020-03-10 02:36:04","codes":[{"authorDate":"2020-03-09 23:55:02","commitOrder":2,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient().build();\n\t\twebClient.get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\twebClient.get().retrieve().toBodilessEntity().doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tthis.webServer.stop();\n\t\tassertThat(errorReference.get()).hasCauseInstanceOf(ConnectException.class);\n\t}\n","date":"2020-03-10 02:12:20","endLine":284,"groupId":"1124","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5b/452e8d5a77ae60ca06dfe3a43575da67a83c5f.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient().build();\n\t\twebClient.get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\twebClient.get().retrieve().toBodilessEntity().doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tthis.webServer.stop();\n\t\tassertThat(errorReference.get()).hasCauseInstanceOf(ConnectException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"N"},{"authorDate":"2020-03-10 02:36:04","commitOrder":2,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\t\r\n\t\t\r\n\t\tCountDownLatch responseLatch = new CountDownLatch(1);\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tblockingHandler.completeOne();\n\t\tresponseLatch.await(5, TimeUnit.SECONDS);\n\t\tthis.webServer.stop();\n\t\tThrowable error = await().atMost(Duration.ofSeconds(30)).until(errorReference::get, (ex) -> ex != null);\n\t\tassertThat(error).isInstanceOf(IOException.class);\n\t}\n","date":"2020-03-10 02:36:04","endLine":148,"groupId":"15661","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/6a596f653a32410194c96144f689ffcc27b433.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\t\r\n\t\t\r\n\t\tCountDownLatch responseLatch = new CountDownLatch(1);\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tblockingHandler.completeOne();\n\t\tresponseLatch.await(5, TimeUnit.SECONDS);\n\t\tthis.webServer.stop();\n\t\tThrowable error = await().atMost(Duration.ofSeconds(5)).until(errorReference::get, (ex) -> ex != null);\n\t\tassertThat(error).isInstanceOf(IOException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"da06b38117116ec5bb56d0b372cb6ba4fec51bb5","commitMessage":"@@@Polish\n\nSee gh-4657\n","date":"2020-03-10 02:36:04","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-03-10 16:37:04","codes":[{"authorDate":"2020-03-09 23:55:02","commitOrder":3,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient().build();\n\t\twebClient.get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\twebClient.get().retrieve().toBodilessEntity().doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tthis.webServer.stop();\n\t\tassertThat(errorReference.get()).hasCauseInstanceOf(ConnectException.class);\n\t}\n","date":"2020-03-10 02:12:20","endLine":284,"groupId":"1124","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5b/452e8d5a77ae60ca06dfe3a43575da67a83c5f.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient().build();\n\t\twebClient.get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\twebClient.get().retrieve().toBodilessEntity().doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tthis.webServer.stop();\n\t\tassertThat(errorReference.get()).hasCauseInstanceOf(ConnectException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"N"},{"authorDate":"2020-03-10 16:37:04","commitOrder":3,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tCountDownLatch responseLatch = new CountDownLatch(1);\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().subscribe((response) -> responseLatch.countDown());\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\t\r\n\t\t\r\n\t\tMono<ResponseEntity<Void>> unconnectableRequest1 = getWebClient().build().get().retrieve().toBodilessEntity();\n\t\tMono<ResponseEntity<Void>> unconnectableRequest2 = getWebClient().build().get().retrieve().toBodilessEntity();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tresponseLatch.await(5, TimeUnit.SECONDS);\n\t\tthis.webServer.stop();\n\t\tList<Object> results = new ArrayList<>();\n\t\ttry {\n\t\t\tresults.add(unconnectableRequest1.block());\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tresults.add(ex);\n\t\t}\n\t\ttry {\n\t\t\tresults.add(unconnectableRequest2.block());\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tresults.add(ex);\n\t\t}\n\t\tassertThat(results).anySatisfy((result) -> assertThat(result).isInstanceOf(Exception.class));\n\t}\n","date":"2020-03-10 16:37:29","endLine":157,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/88/6eb0a95f042ae34c3bbc74adda32d470296a01.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\t\r\n\t\t\r\n\t\tCountDownLatch responseLatch = new CountDownLatch(1);\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().doOnSuccess((response) -> responseLatch.countDown())\n\t\t\t\t.doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tblockingHandler.completeOne();\n\t\tresponseLatch.await(5, TimeUnit.SECONDS);\n\t\tthis.webServer.stop();\n\t\tThrowable error = await().atMost(Duration.ofSeconds(30)).until(errorReference::get, (ex) -> ex != null);\n\t\tassertThat(error).isInstanceOf(IOException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"5bb66e1b85e64f8356106975313eaffcac31bf08","commitMessage":"@@@Try to make reactive Jetty connect after shutdown test more robust\n\nSee gh-4657\n","date":"2020-03-10 16:37:29","modifiedFileCount":"1","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-03-10 20:19:44","codes":[{"authorDate":"2020-03-10 20:19:44","commitOrder":4,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient(this.webServer.getPort()).build();\n\t\twebClient.get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\twebClient.get().retrieve().toBodilessEntity().doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tthis.webServer.stop();\n\t\tassertThat(errorReference.get()).hasCauseInstanceOf(ConnectException.class);\n\t}\n","date":"2020-03-10 20:30:25","endLine":284,"groupId":"5282","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8c/7eeaaf020a71fc9ebbd9cf165e128a6eed0815.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient().build();\n\t\twebClient.get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\twebClient.get().retrieve().toBodilessEntity().doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tthis.webServer.stop();\n\t\tassertThat(errorReference.get()).hasCauseInstanceOf(ConnectException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2020-03-10 20:19:44","commitOrder":4,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tCountDownLatch responseLatch = new CountDownLatch(1);\n\t\tgetWebClient(port).build().get().retrieve().toBodilessEntity()\n\t\t\t\t.subscribe((response) -> responseLatch.countDown());\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tMono<ResponseEntity<Void>> unconnectableRequest = getWebClient(port).build().get().retrieve()\n\t\t\t\t.toBodilessEntity();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> unconnectableRequest.block())\n\t\t\t\t.withCauseInstanceOf(ConnectException.class);\n\t}\n","date":"2020-03-10 20:30:25","endLine":142,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7b/f3c53059a12e1166b8fcfca6438f76afb82c0d.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tCountDownLatch responseLatch = new CountDownLatch(1);\n\t\tgetWebClient().build().get().retrieve().toBodilessEntity().subscribe((response) -> responseLatch.countDown());\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\t\r\n\t\t\r\n\t\tMono<ResponseEntity<Void>> unconnectableRequest1 = getWebClient().build().get().retrieve().toBodilessEntity();\n\t\tMono<ResponseEntity<Void>> unconnectableRequest2 = getWebClient().build().get().retrieve().toBodilessEntity();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tresponseLatch.await(5, TimeUnit.SECONDS);\n\t\tthis.webServer.stop();\n\t\tList<Object> results = new ArrayList<>();\n\t\ttry {\n\t\t\tresults.add(unconnectableRequest1.block());\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tresults.add(ex);\n\t\t}\n\t\ttry {\n\t\t\tresults.add(unconnectableRequest2.block());\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tresults.add(ex);\n\t\t}\n\t\tassertThat(results).anySatisfy((result) -> assertThat(result).isInstanceOf(Exception.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"b8cb61bbe09f26576a5d362b0e8e490444fedc95","commitMessage":"@@@Align embedded Jetty's graceful shutdown behaviour with standalone\n\nStandalone Jetty will.  by default.  include a Connection: close header\nin all responses once graceful shutdown has begun. Previously.  the\nway in which we were shutting Jetty down did not cause this to happen.\n\nThis commit updates JettyGracefulShutdown to shut down each connector.\nThis causes Jetty to send the Connection: close header.  aligning its\nbehaviour more closely with what it does when used standalone. The\ntests have also been updated to verify this behaviour and to ensure\nthat the correct port is used for requests even once the connector is\nno longer bound and the web server no longer knows its ephemeral port.\n\nSee gh-4657\n","date":"2020-03-10 20:30:25","modifiedFileCount":"10","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-05-08 01:02:28","codes":[{"authorDate":"2020-05-08 01:02:28","commitOrder":5,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient(this.webServer.getPort()).build();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tAwaitility.await().atMost(Duration.ofSeconds(30)).until(() -> {\n\t\t\tblockingHandler.stopBlocking();\n\t\t\ttry {\n\t\t\t\twebClient.get().retrieve().toBodilessEntity().block();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (RuntimeException ex) {\n\t\t\t\treturn ex.getCause() instanceof ConnectException;\n\t\t\t}\n\t\t});\n\t\tthis.webServer.stop();\n\t}\n","date":"2020-05-13 02:59:52","endLine":278,"groupId":"16231","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/93/cc4a46c942897bed60f1eb9033a4de3cbf26fb.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient(this.webServer.getPort()).build();\n\t\twebClient.get().retrieve().toBodilessEntity().subscribe();\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tAtomicReference<Throwable> errorReference = new AtomicReference<>();\n\t\twebClient.get().retrieve().toBodilessEntity().doOnError(errorReference::set).subscribe();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tthis.webServer.stop();\n\t\tassertThat(errorReference.get()).hasCauseInstanceOf(ConnectException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"},{"authorDate":"2020-05-08 01:02:28","commitOrder":5,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient(this.webServer.getPort()).build();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tAwaitility.await().atMost(Duration.ofSeconds(30)).until(() -> {\n\t\t\tblockingHandler.stopBlocking();\n\t\t\ttry {\n\t\t\t\twebClient.get().retrieve().toBodilessEntity().block();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (RuntimeException ex) {\n\t\t\t\treturn ex.getCause() instanceof ConnectException;\n\t\t\t}\n\t\t});\n\t\tthis.webServer.stop();\n\t}\n","date":"2020-05-13 02:59:52","endLine":139,"groupId":"16231","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/62/1a44c466e5e9eb4acfe6314de95f9c901c5ecc.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tCountDownLatch responseLatch = new CountDownLatch(1);\n\t\tgetWebClient(port).build().get().retrieve().toBodilessEntity()\n\t\t\t\t.subscribe((response) -> responseLatch.countDown());\n\t\tblockingHandler.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tMono<ResponseEntity<Void>> unconnectableRequest = getWebClient(port).build().get().retrieve()\n\t\t\t\t.toBodilessEntity();\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingHandler.completeOne();\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> unconnectableRequest.block())\n\t\t\t\t.withCauseInstanceOf(ConnectException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"240898121ff8a06d5e3fdc53f992b1130f81cc96","commitMessage":"@@@Use SmartLifecycle for graceful web server shutdown\n\nCloses gh-21325\n","date":"2020-05-13 02:59:52","modifiedFileCount":"32","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-05-17 16:15:00","codes":[{"authorDate":"2021-05-17 16:15:00","commitOrder":6,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient(this.webServer.getPort()).build();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tAwaitility.await().atMost(Duration.ofSeconds(30)).until(() -> {\n\t\t\tblockingHandler.stopBlocking();\n\t\t\ttry {\n\t\t\t\twebClient.get().retrieve().toBodilessEntity().block();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (RuntimeException ex) {\n\t\t\t\treturn ex.getCause() instanceof ConnectException;\n\t\t\t}\n\t\t});\n\t\tthis.webServer.stop();\n\t}\n","date":"2021-05-17 16:15:00","endLine":265,"groupId":"102061","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5b/6ff84e7a2def50f5f247cd2a61de347e31f612.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tTomcatReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient(this.webServer.getPort()).build();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tAwaitility.await().atMost(Duration.ofSeconds(30)).until(() -> {\n\t\t\tblockingHandler.stopBlocking();\n\t\t\ttry {\n\t\t\t\twebClient.get().retrieve().toBodilessEntity().block();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (RuntimeException ex) {\n\t\t\t\treturn ex.getCause() instanceof ConnectException;\n\t\t\t}\n\t\t});\n\t\tthis.webServer.stop();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2021-05-17 16:15:00","commitOrder":6,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient(this.webServer.getPort()).build();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tAwaitility.await().atMost(Duration.ofSeconds(30)).until(() -> {\n\t\t\tblockingHandler.stopBlocking();\n\t\t\ttry {\n\t\t\t\twebClient.get().retrieve().toBodilessEntity().block();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (RuntimeException ex) {\n\t\t\t\treturn ex.getCause() instanceof ConnectException;\n\t\t\t}\n\t\t});\n\t\tthis.webServer.stop();\n\t}\n","date":"2021-05-17 16:15:00","endLine":139,"groupId":"102061","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e6/a93f803367282cae5da929f11b1760c082b143.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingHandler blockingHandler = new BlockingHandler();\n\t\tthis.webServer = factory.getWebServer(blockingHandler);\n\t\tthis.webServer.start();\n\t\tWebClient webClient = getWebClient(this.webServer.getPort()).build();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tAwaitility.await().atMost(Duration.ofSeconds(30)).until(() -> {\n\t\t\tblockingHandler.stopBlocking();\n\t\t\ttry {\n\t\t\t\twebClient.get().retrieve().toBodilessEntity().block();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (RuntimeException ex) {\n\t\t\t\treturn ex.getCause() instanceof ConnectException;\n\t\t\t}\n\t\t});\n\t\tthis.webServer.stop();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"21a3f03d20a24934e38a26843872778598da7ad3","commitMessage":"@@@Merge pull request #26441 from weixsun\n\n* pr/26441:\n  Polish \"Remove unnecessary throws declaration in tests\"\n  Remove unnecessary throws declaration in tests\n\nCloses gh-26441\n","date":"2021-05-17 16:15:00","modifiedFileCount":"172","status":"M","submitter":"Stephane Nicoll"}]
