[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void fileInArchiveNotOverwrittenByDefault() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tFile conflict = new File(folder, \"test.txt\");\n\t\tassertThat(conflict.createNewFile()).as(\"Should have been able to create file\")\n\t\t\t\t.isTrue();\n\t\tlong fileLength = conflict.length();\n\t\t\r\n\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\n\t\t\t\t\"application/zip\", \"demo.zip\", archive);\n\t\tmockSuccessfulProjectGeneration(request);\n\t\tassertThat(this.command.run(\"--extract\", folder.getAbsolutePath()))\n\t\t\t\t.isEqualTo(ExitStatus.ERROR);\n\t\tassertThat(conflict.length()).as(\"File should not have changed\")\n\t\t\t\t.isEqualTo(fileLength);\n\t}\n","date":"2017-10-05 11:18:56","endLine":260,"groupId":"2473","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fileInArchiveNotOverwrittenByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/02/8e34629bec0daa88958051b5e9c669cd30d450.src","preCode":"\tpublic void fileInArchiveNotOverwrittenByDefault() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tFile conflict = new File(folder, \"test.txt\");\n\t\tassertThat(conflict.createNewFile()).as(\"Should have been able to create file\")\n\t\t\t\t.isTrue();\n\t\tlong fileLength = conflict.length();\n\t\t\r\n\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\n\t\t\t\t\"application/zip\", \"demo.zip\", archive);\n\t\tmockSuccessfulProjectGeneration(request);\n\t\tassertThat(this.command.run(\"--extract\", folder.getAbsolutePath()))\n\t\t\t\t.isEqualTo(ExitStatus.ERROR);\n\t\tassertThat(conflict.length()).as(\"File should not have changed\")\n\t\t\t\t.isEqualTo(fileLength);\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void overwriteFileInArchive() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tFile conflict = new File(folder, \"test.txt\");\n\t\tassertThat(conflict.createNewFile()).as(\"Should have been able to create file\")\n\t\t\t\t.isTrue();\n\t\tlong fileLength = conflict.length();\n\t\t\r\n\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\n\t\t\t\t\"application/zip\", \"demo.zip\", archive);\n\t\tmockSuccessfulProjectGeneration(request);\n\t\tassertThat(this.command.run(\"--force\", \"--extract\", folder.getAbsolutePath()))\n\t\t\t\t.isEqualTo(ExitStatus.OK);\n\t\tassertThat(fileLength != conflict.length()).as(\"File should have changed\")\n\t\t\t\t.isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":305,"groupId":"2473","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"overwriteFileInArchive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/02/8e34629bec0daa88958051b5e9c669cd30d450.src","preCode":"\tpublic void overwriteFileInArchive() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tFile conflict = new File(folder, \"test.txt\");\n\t\tassertThat(conflict.createNewFile()).as(\"Should have been able to create file\")\n\t\t\t\t.isTrue();\n\t\tlong fileLength = conflict.length();\n\t\t\r\n\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\n\t\t\t\t\"application/zip\", \"demo.zip\", archive);\n\t\tmockSuccessfulProjectGeneration(request);\n\t\tassertThat(this.command.run(\"--force\", \"--extract\", folder.getAbsolutePath()))\n\t\t\t\t.isEqualTo(ExitStatus.OK);\n\t\tassertThat(fileLength != conflict.length()).as(\"File should have changed\")\n\t\t\t\t.isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid fileInArchiveNotOverwrittenByDefault(@TempDir File tempDir) throws Exception {\n\t\tFile conflict = new File(tempDir, \"test.txt\");\n\t\tassertThat(conflict.createNewFile()).as(\"Should have been able to create file\").isTrue();\n\t\tlong fileLength = conflict.length();\n\t\t\r\n\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\"application/zip\", \"demo.zip\",\n\t\t\t\tarchive);\n\t\tmockSuccessfulProjectGeneration(request);\n\t\tassertThat(this.command.run(\"--extract\", tempDir.getAbsolutePath())).isEqualTo(ExitStatus.ERROR);\n\t\tassertThat(conflict.length()).as(\"File should not have changed\").isEqualTo(fileLength);\n\t}\n","date":"2019-06-07 19:25:54","endLine":252,"groupId":"10611","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fileInArchiveNotOverwrittenByDefault","params":"(@TempDirFiletempDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/67/eb369cbb11f49d1f9faa88a9f92b8d5cb2e09c.src","preCode":"\tpublic void fileInArchiveNotOverwrittenByDefault() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tFile conflict = new File(folder, \"test.txt\");\n\t\tassertThat(conflict.createNewFile()).as(\"Should have been able to create file\").isTrue();\n\t\tlong fileLength = conflict.length();\n\t\t\r\n\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\"application/zip\", \"demo.zip\",\n\t\t\t\tarchive);\n\t\tmockSuccessfulProjectGeneration(request);\n\t\tassertThat(this.command.run(\"--extract\", folder.getAbsolutePath())).isEqualTo(ExitStatus.ERROR);\n\t\tassertThat(conflict.length()).as(\"File should not have changed\").isEqualTo(fileLength);\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid overwriteFileInArchive(@TempDir File tempDir) throws Exception {\n\t\tFile conflict = new File(tempDir, \"test.txt\");\n\t\tassertThat(conflict.createNewFile()).as(\"Should have been able to create file\").isTrue();\n\t\tlong fileLength = conflict.length();\n\t\t\r\n\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\"application/zip\", \"demo.zip\",\n\t\t\t\tarchive);\n\t\tmockSuccessfulProjectGeneration(request);\n\t\tassertThat(this.command.run(\"--force\", \"--extract\", tempDir.getAbsolutePath())).isEqualTo(ExitStatus.OK);\n\t\tassertThat(fileLength != conflict.length()).as(\"File should have changed\").isTrue();\n\t}\n","date":"2019-06-07 19:25:54","endLine":291,"groupId":"10611","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"overwriteFileInArchive","params":"(@TempDirFiletempDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/67/eb369cbb11f49d1f9faa88a9f92b8d5cb2e09c.src","preCode":"\tpublic void overwriteFileInArchive() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tFile conflict = new File(folder, \"test.txt\");\n\t\tassertThat(conflict.createNewFile()).as(\"Should have been able to create file\").isTrue();\n\t\tlong fileLength = conflict.length();\n\t\t\r\n\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\"application/zip\", \"demo.zip\",\n\t\t\t\tarchive);\n\t\tmockSuccessfulProjectGeneration(request);\n\t\tassertThat(this.command.run(\"--force\", \"--extract\", folder.getAbsolutePath())).isEqualTo(ExitStatus.OK);\n\t\tassertThat(fileLength != conflict.length()).as(\"File should have changed\").isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
