[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void parseProjectOptions() throws Exception {\n\t\tthis.handler.disableProjectGeneration();\n\t\tthis.command.run(\"-g=org.demo\", \"-a=acme\", \"-v=1.2.3-SNAPSHOT\", \"-n=acme-sample\",\n\t\t\t\t\"--description=Acme sample project\", \"--package-name=demo.foo\",\n\t\t\t\t\"-t=ant-project\", \"--build=grunt\", \"--format=web\", \"-p=war\", \"-j=1.9\",\n\t\t\t\t\"-l=groovy\", \"-b=1.2.0.RELEASE\", \"-d=web,data-jpa\");\n\t\tassertThat(this.handler.lastRequest.getGroupId()).isEqualTo(\"org.demo\");\n\t\tassertThat(this.handler.lastRequest.getArtifactId()).isEqualTo(\"acme\");\n\t\tassertThat(this.handler.lastRequest.getVersion()).isEqualTo(\"1.2.3-SNAPSHOT\");\n\t\tassertThat(this.handler.lastRequest.getName()).isEqualTo(\"acme-sample\");\n\t\tassertThat(this.handler.lastRequest.getDescription())\n\t\t\t\t.isEqualTo(\"Acme sample project\");\n\t\tassertThat(this.handler.lastRequest.getPackageName()).isEqualTo(\"demo.foo\");\n\t\tassertThat(this.handler.lastRequest.getType()).isEqualTo(\"ant-project\");\n\t\tassertThat(this.handler.lastRequest.getBuild()).isEqualTo(\"grunt\");\n\t\tassertThat(this.handler.lastRequest.getFormat()).isEqualTo(\"web\");\n\t\tassertThat(this.handler.lastRequest.getPackaging()).isEqualTo(\"war\");\n\t\tassertThat(this.handler.lastRequest.getJavaVersion()).isEqualTo(\"1.9\");\n\t\tassertThat(this.handler.lastRequest.getLanguage()).isEqualTo(\"groovy\");\n\t\tassertThat(this.handler.lastRequest.getBootVersion()).isEqualTo(\"1.2.0.RELEASE\");\n\t\tList<String> dependencies = this.handler.lastRequest.getDependencies();\n\t\tassertThat(dependencies).hasSize(2);\n\t\tassertThat(dependencies.contains(\"web\")).isTrue();\n\t\tassertThat(dependencies.contains(\"data-jpa\")).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":287,"groupId":"2474","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseProjectOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/02/8e34629bec0daa88958051b5e9c669cd30d450.src","preCode":"\tpublic void parseProjectOptions() throws Exception {\n\t\tthis.handler.disableProjectGeneration();\n\t\tthis.command.run(\"-g=org.demo\", \"-a=acme\", \"-v=1.2.3-SNAPSHOT\", \"-n=acme-sample\",\n\t\t\t\t\"--description=Acme sample project\", \"--package-name=demo.foo\",\n\t\t\t\t\"-t=ant-project\", \"--build=grunt\", \"--format=web\", \"-p=war\", \"-j=1.9\",\n\t\t\t\t\"-l=groovy\", \"-b=1.2.0.RELEASE\", \"-d=web,data-jpa\");\n\t\tassertThat(this.handler.lastRequest.getGroupId()).isEqualTo(\"org.demo\");\n\t\tassertThat(this.handler.lastRequest.getArtifactId()).isEqualTo(\"acme\");\n\t\tassertThat(this.handler.lastRequest.getVersion()).isEqualTo(\"1.2.3-SNAPSHOT\");\n\t\tassertThat(this.handler.lastRequest.getName()).isEqualTo(\"acme-sample\");\n\t\tassertThat(this.handler.lastRequest.getDescription())\n\t\t\t\t.isEqualTo(\"Acme sample project\");\n\t\tassertThat(this.handler.lastRequest.getPackageName()).isEqualTo(\"demo.foo\");\n\t\tassertThat(this.handler.lastRequest.getType()).isEqualTo(\"ant-project\");\n\t\tassertThat(this.handler.lastRequest.getBuild()).isEqualTo(\"grunt\");\n\t\tassertThat(this.handler.lastRequest.getFormat()).isEqualTo(\"web\");\n\t\tassertThat(this.handler.lastRequest.getPackaging()).isEqualTo(\"war\");\n\t\tassertThat(this.handler.lastRequest.getJavaVersion()).isEqualTo(\"1.9\");\n\t\tassertThat(this.handler.lastRequest.getLanguage()).isEqualTo(\"groovy\");\n\t\tassertThat(this.handler.lastRequest.getBootVersion()).isEqualTo(\"1.2.0.RELEASE\");\n\t\tList<String> dependencies = this.handler.lastRequest.getDependencies();\n\t\tassertThat(dependencies).hasSize(2);\n\t\tassertThat(dependencies.contains(\"web\")).isTrue();\n\t\tassertThat(dependencies.contains(\"data-jpa\")).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void parseBuildOnly() throws Exception {\n\t\tthis.handler.disableProjectGeneration();\n\t\tthis.command.run(\"--build=ant\");\n\t\tassertThat(this.handler.lastRequest.getBuild()).isEqualTo(\"ant\");\n\t\tassertThat(this.handler.lastRequest.getFormat()).isEqualTo(\"project\");\n\t\tassertThat(this.handler.lastRequest.isDetectType()).isTrue();\n\t\tassertThat(this.handler.lastRequest.getType()).isNull();\n\t}\n","date":"2017-10-05 11:18:56","endLine":325,"groupId":"13470","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parseBuildOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/02/8e34629bec0daa88958051b5e9c669cd30d450.src","preCode":"\tpublic void parseBuildOnly() throws Exception {\n\t\tthis.handler.disableProjectGeneration();\n\t\tthis.command.run(\"--build=ant\");\n\t\tassertThat(this.handler.lastRequest.getBuild()).isEqualTo(\"ant\");\n\t\tassertThat(this.handler.lastRequest.getFormat()).isEqualTo(\"project\");\n\t\tassertThat(this.handler.lastRequest.isDetectType()).isTrue();\n\t\tassertThat(this.handler.lastRequest.getType()).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid parseProjectOptions() throws Exception {\n\t\tthis.handler.disableProjectGeneration();\n\t\tthis.command.run(\"-g=org.demo\", \"-a=acme\", \"-v=1.2.3-SNAPSHOT\", \"-n=acme-sample\",\n\t\t\t\t\"--description=Acme sample project\", \"--package-name=demo.foo\", \"-t=ant-project\", \"--build=grunt\",\n\t\t\t\t\"--format=web\", \"-p=war\", \"-j=1.9\", \"-l=groovy\", \"-b=1.2.0.RELEASE\", \"-d=web,data-jpa\");\n\t\tassertThat(this.handler.lastRequest.getGroupId()).isEqualTo(\"org.demo\");\n\t\tassertThat(this.handler.lastRequest.getArtifactId()).isEqualTo(\"acme\");\n\t\tassertThat(this.handler.lastRequest.getVersion()).isEqualTo(\"1.2.3-SNAPSHOT\");\n\t\tassertThat(this.handler.lastRequest.getName()).isEqualTo(\"acme-sample\");\n\t\tassertThat(this.handler.lastRequest.getDescription()).isEqualTo(\"Acme sample project\");\n\t\tassertThat(this.handler.lastRequest.getPackageName()).isEqualTo(\"demo.foo\");\n\t\tassertThat(this.handler.lastRequest.getType()).isEqualTo(\"ant-project\");\n\t\tassertThat(this.handler.lastRequest.getBuild()).isEqualTo(\"grunt\");\n\t\tassertThat(this.handler.lastRequest.getFormat()).isEqualTo(\"web\");\n\t\tassertThat(this.handler.lastRequest.getPackaging()).isEqualTo(\"war\");\n\t\tassertThat(this.handler.lastRequest.getJavaVersion()).isEqualTo(\"1.9\");\n\t\tassertThat(this.handler.lastRequest.getLanguage()).isEqualTo(\"groovy\");\n\t\tassertThat(this.handler.lastRequest.getBootVersion()).isEqualTo(\"1.2.0.RELEASE\");\n\t\tList<String> dependencies = this.handler.lastRequest.getDependencies();\n\t\tassertThat(dependencies).hasSize(2);\n\t\tassertThat(dependencies.contains(\"web\")).isTrue();\n\t\tassertThat(dependencies.contains(\"data-jpa\")).isTrue();\n\t}\n","date":"2019-06-07 19:25:54","endLine":277,"groupId":"10613","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parseProjectOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/67/eb369cbb11f49d1f9faa88a9f92b8d5cb2e09c.src","preCode":"\tpublic void parseProjectOptions() throws Exception {\n\t\tthis.handler.disableProjectGeneration();\n\t\tthis.command.run(\"-g=org.demo\", \"-a=acme\", \"-v=1.2.3-SNAPSHOT\", \"-n=acme-sample\",\n\t\t\t\t\"--description=Acme sample project\", \"--package-name=demo.foo\", \"-t=ant-project\", \"--build=grunt\",\n\t\t\t\t\"--format=web\", \"-p=war\", \"-j=1.9\", \"-l=groovy\", \"-b=1.2.0.RELEASE\", \"-d=web,data-jpa\");\n\t\tassertThat(this.handler.lastRequest.getGroupId()).isEqualTo(\"org.demo\");\n\t\tassertThat(this.handler.lastRequest.getArtifactId()).isEqualTo(\"acme\");\n\t\tassertThat(this.handler.lastRequest.getVersion()).isEqualTo(\"1.2.3-SNAPSHOT\");\n\t\tassertThat(this.handler.lastRequest.getName()).isEqualTo(\"acme-sample\");\n\t\tassertThat(this.handler.lastRequest.getDescription()).isEqualTo(\"Acme sample project\");\n\t\tassertThat(this.handler.lastRequest.getPackageName()).isEqualTo(\"demo.foo\");\n\t\tassertThat(this.handler.lastRequest.getType()).isEqualTo(\"ant-project\");\n\t\tassertThat(this.handler.lastRequest.getBuild()).isEqualTo(\"grunt\");\n\t\tassertThat(this.handler.lastRequest.getFormat()).isEqualTo(\"web\");\n\t\tassertThat(this.handler.lastRequest.getPackaging()).isEqualTo(\"war\");\n\t\tassertThat(this.handler.lastRequest.getJavaVersion()).isEqualTo(\"1.9\");\n\t\tassertThat(this.handler.lastRequest.getLanguage()).isEqualTo(\"groovy\");\n\t\tassertThat(this.handler.lastRequest.getBootVersion()).isEqualTo(\"1.2.0.RELEASE\");\n\t\tList<String> dependencies = this.handler.lastRequest.getDependencies();\n\t\tassertThat(dependencies).hasSize(2);\n\t\tassertThat(dependencies.contains(\"web\")).isTrue();\n\t\tassertThat(dependencies.contains(\"data-jpa\")).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid parseBuildOnly() throws Exception {\n\t\tthis.handler.disableProjectGeneration();\n\t\tthis.command.run(\"--build=ant\");\n\t\tassertThat(this.handler.lastRequest.getBuild()).isEqualTo(\"ant\");\n\t\tassertThat(this.handler.lastRequest.getFormat()).isEqualTo(\"project\");\n\t\tassertThat(this.handler.lastRequest.isDetectType()).isTrue();\n\t\tassertThat(this.handler.lastRequest.getType()).isNull();\n\t}\n","date":"2019-06-07 19:25:54","endLine":311,"groupId":"10613","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parseBuildOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/67/eb369cbb11f49d1f9faa88a9f92b8d5cb2e09c.src","preCode":"\tpublic void parseBuildOnly() throws Exception {\n\t\tthis.handler.disableProjectGeneration();\n\t\tthis.command.run(\"--build=ant\");\n\t\tassertThat(this.handler.lastRequest.getBuild()).isEqualTo(\"ant\");\n\t\tassertThat(this.handler.lastRequest.getFormat()).isEqualTo(\"project\");\n\t\tassertThat(this.handler.lastRequest.isDetectType()).isTrue();\n\t\tassertThat(this.handler.lastRequest.getType()).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
