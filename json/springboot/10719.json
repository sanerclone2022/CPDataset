[{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void preHandleWhenApplicationIdIsNullShouldReturnError() throws Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(this.tokenValidator,\n\t\t\t\tthis.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith(throwable -> assertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2017-11-03 09:00:55","endLine":108,"groupId":"9159","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenApplicationIdIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a9/3a33f215f6e8bbfbaab304db45b5582682d800.src","preCode":"\tpublic void preHandleWhenApplicationIdIsNullShouldReturnError() throws Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(this.tokenValidator,\n\t\t\t\tthis.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith(throwable -> assertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"},{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError()\n\t\t\tthrows Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(this.tokenValidator, null,\n\t\t\t\t\"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith(throwable -> assertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2017-11-03 09:00:55","endLine":123,"groupId":"9158","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a9/3a33f215f6e8bbfbaab304db45b5582682d800.src","preCode":"\tpublic void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError()\n\t\t\tthrows Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(this.tokenValidator, null,\n\t\t\t\t\"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith(throwable -> assertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"}],"commitId":"d50fe8874fa442cbd3ea380754e7b412a77aed9a","commitMessage":"@@@Add CF support for reactive actuators\n\nCloses gh-10780\n","date":"2017-11-03 09:00:55","modifiedFileCount":"5","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2017-11-03 15:03:36","codes":[{"authorDate":"2017-11-03 15:03:36","commitOrder":2,"curCode":"\tpublic void preHandleWhenApplicationIdIsNullShouldReturnError() throws Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, this.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2017-11-03 15:13:02","endLine":106,"groupId":"9159","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenApplicationIdIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e5/c847b7055485c1de2dcb1e0d00d41eaae48369.src","preCode":"\tpublic void preHandleWhenApplicationIdIsNullShouldReturnError() throws Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(this.tokenValidator,\n\t\t\t\tthis.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith(throwable -> assertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2017-11-03 15:03:36","commitOrder":2,"curCode":"\tpublic void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError()\n\t\t\tthrows Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, null, \"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2017-11-03 15:13:02","endLine":120,"groupId":"9158","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e5/c847b7055485c1de2dcb1e0d00d41eaae48369.src","preCode":"\tpublic void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError()\n\t\t\tthrows Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(this.tokenValidator, null,\n\t\t\t\t\"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith(throwable -> assertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"3f00ba3cad8c708eaa06ef599be104e077736132","commitMessage":"@@@Polish\n","date":"2017-11-03 15:13:02","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void preHandleWhenApplicationIdIsNullShouldReturnError() {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, this.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2017-12-12 18:57:30","endLine":104,"groupId":"9159","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenApplicationIdIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/85/1ec6b5f3d924fb4f77b72c8712c53830a7796b.src","preCode":"\tpublic void preHandleWhenApplicationIdIsNullShouldReturnError() throws Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, this.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError() {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, null, \"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2017-12-12 18:57:30","endLine":117,"groupId":"9158","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/85/1ec6b5f3d924fb4f77b72c8712c53830a7796b.src","preCode":"\tpublic void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError()\n\t\t\tthrows Exception {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, null, \"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-01-10 12:57:10","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":4,"curCode":"\tpublic void preHandleWhenApplicationIdIsNullShouldReturnError() {\n\t\tthis.interceptor = new CloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, this.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2018-01-20 12:44:24","endLine":104,"groupId":"9159","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenApplicationIdIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6c/89c56e7c1ef94f306d364a1084e792679ac6ba.src","preCode":"\tpublic void preHandleWhenApplicationIdIsNullShouldReturnError() {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, this.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2018-01-10 12:57:10","commitOrder":4,"curCode":"\tpublic void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError() {\n\t\tthis.interceptor = new CloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, null, \"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2018-01-20 12:44:24","endLine":117,"groupId":"9158","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6c/89c56e7c1ef94f306d364a1084e792679ac6ba.src","preCode":"\tpublic void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError() {\n\t\tthis.interceptor = new ReactiveCloudFoundrySecurityInterceptor(\n\t\t\t\tthis.tokenValidator, null, \"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(\n\t\t\t\t\t\t((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"1d39feffeabf4b94e3f900b941b58e0443d5887a","commitMessage":"@@@Overhaul actuator endpoint code\n\nRefactor several areas of the actuator endpoint code in order to make\nfuture extensions easier. The primary goal is to introduce the concept\nof an `ExposableEndpoint` that has technology specific subclasses and\ncan carry additional data for filters to use. Many other changes have\nbeen made along the way including:\n\n* A new EndpointSupplier interface that allows cleaner separation of\n  supplying vs discovering endpoints. This allows cleaner class names\n  and allows for better auto-configuration since a user can choose to\n  provide their own supplier entirely.\n\n* A `DiscoveredEndpoint` interface that allows the `EndpointFilter`\n  to be greatly simplified. A filter now doesn't need to know about\n  discovery concerns unless absolutely necessary.\n\n* Improved naming and package structure. Many technology specific\n  concerns are now grouped in a better way. Related concerns are\n  co-located and concepts from one area no longer leakage into another.\n\n* Simplified `HandlerMapping` implementations. Many common concerns have\n  been pulled up helping to create simpler subclasses.\n\n* Simplified JMX adapters. Many of the intermediary `Info` classes have\n  been removed. The `DiscoveredJmxOperation` is now responsible for\n  mapping methods to operations.\n\n* A specific @`HealthEndpointCloudFoundryExtension` for Cloud Foundry.\n  The extension logic used to create a \"full\" health endpoint extension\n  has been made explicit.\n\nFixes gh-11428\nFixes gh-11581\n","date":"2018-01-20 12:44:24","modifiedFileCount":"63","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid preHandleWhenApplicationIdIsNullShouldReturnError() {\n\t\tthis.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, this.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2019-06-07 19:25:54","endLine":96,"groupId":"10719","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenApplicationIdIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/16/28e08958339a97f14ad6ec8e53235d39c530f9.src","preCode":"\tpublic void preHandleWhenApplicationIdIsNullShouldReturnError() {\n\t\tthis.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, this.securityService, null);\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError() {\n\t\tthis.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, null, \"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","date":"2019-06-07 19:25:54","endLine":107,"groupId":"10719","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/16/28e08958339a97f14ad6ec8e53235d39c530f9.src","preCode":"\tpublic void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError() {\n\t\tthis.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, null, \"my-app-id\");\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeErrorWith((ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason())\n\t\t\t\t\t\t.isEqualTo(Reason.SERVICE_UNAVAILABLE))\n\t\t\t\t.verify();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
