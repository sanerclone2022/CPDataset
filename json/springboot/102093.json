[{"authorTime":"2018-01-30 01:55:25","codes":[{"authorDate":"2018-01-30 01:55:25","commitOrder":1,"curCode":"\tpublic void callbacksInvokeWhenNoGenericShouldInvokeCallbacks() {\n\t\tNonGenericCallback callbackInstance = mock(NonGenericCallback.class);\n\t\tString argument = \"foo\";\n\t\tLambdaSafe\n\t\t\t\t.callbacks(NonGenericCallback.class,\n\t\t\t\t\t\tCollections.singleton(callbackInstance), argument)\n\t\t\t\t.invoke((c) -> c.handle(argument));\n\t\tverify(callbackInstance).handle(argument);\n\t}\n","date":"2018-01-30 06:31:11","endLine":227,"groupId":"6330","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"callbacksInvokeWhenNoGenericShouldInvokeCallbacks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3b/bcd2ba21c5bee1940bf44e469067b22cc8bc0c.src","preCode":"\tpublic void callbacksInvokeWhenNoGenericShouldInvokeCallbacks() {\n\t\tNonGenericCallback callbackInstance = mock(NonGenericCallback.class);\n\t\tString argument = \"foo\";\n\t\tLambdaSafe\n\t\t\t\t.callbacks(NonGenericCallback.class,\n\t\t\t\t\t\tCollections.singleton(callbackInstance), argument)\n\t\t\t\t.invoke((c) -> c.handle(argument));\n\t\tverify(callbackInstance).handle(argument);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"},{"authorDate":"2018-01-30 01:55:25","commitOrder":1,"curCode":"\tpublic void callbacksInvokeWhenHasResolvableGenericMatchShouldInvokeCallback() {\n\t\tStringBuilderCallback callbackInstance = mock(StringBuilderCallback.class);\n\t\tStringBuilder argument = new StringBuilder(\"foo\");\n\t\tLambdaSafe.callbacks(GenericCallback.class,\n\t\t\t\tCollections.singleton(callbackInstance), argument)\n\t\t\t\t.invoke((c) -> c.handle(argument));\n\t\tverify(callbackInstance).handle(argument);\n\t}\n","date":"2018-01-30 06:31:11","endLine":249,"groupId":"6330","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"callbacksInvokeWhenHasResolvableGenericMatchShouldInvokeCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3b/bcd2ba21c5bee1940bf44e469067b22cc8bc0c.src","preCode":"\tpublic void callbacksInvokeWhenHasResolvableGenericMatchShouldInvokeCallback() {\n\t\tStringBuilderCallback callbackInstance = mock(StringBuilderCallback.class);\n\t\tStringBuilder argument = new StringBuilder(\"foo\");\n\t\tLambdaSafe.callbacks(GenericCallback.class,\n\t\t\t\tCollections.singleton(callbackInstance), argument)\n\t\t\t\t.invoke((c) -> c.handle(argument));\n\t\tverify(callbackInstance).handle(argument);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"}],"commitId":"798882bd3f5b787dafefa15c5fbd670f175b23e7","commitMessage":"@@@Merge branch 'gh-11584'\n","date":"2018-01-30 06:31:11","modifiedFileCount":"5","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid callbacksInvokeWhenNoGenericShouldInvokeCallbacks() {\n\t\tNonGenericCallback callbackInstance = mock(NonGenericCallback.class);\n\t\tString argument = \"foo\";\n\t\tLambdaSafe.callbacks(NonGenericCallback.class, Collections.singleton(callbackInstance), argument)\n\t\t\t\t.invoke((c) -> c.handle(argument));\n\t\tverify(callbackInstance).handle(argument);\n\t}\n","date":"2019-06-07 19:25:54","endLine":203,"groupId":"102093","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"callbacksInvokeWhenNoGenericShouldInvokeCallbacks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d1/350e29739eaa3ba60ce6db03e7b4a87df084e4.src","preCode":"\tpublic void callbacksInvokeWhenNoGenericShouldInvokeCallbacks() {\n\t\tNonGenericCallback callbackInstance = mock(NonGenericCallback.class);\n\t\tString argument = \"foo\";\n\t\tLambdaSafe.callbacks(NonGenericCallback.class, Collections.singleton(callbackInstance), argument)\n\t\t\t\t.invoke((c) -> c.handle(argument));\n\t\tverify(callbackInstance).handle(argument);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid callbacksInvokeWhenHasResolvableGenericMatchShouldInvokeCallback() {\n\t\tStringBuilderCallback callbackInstance = mock(StringBuilderCallback.class);\n\t\tStringBuilder argument = new StringBuilder(\"foo\");\n\t\tLambdaSafe.callbacks(GenericCallback.class, Collections.singleton(callbackInstance), argument)\n\t\t\t\t.invoke((c) -> c.handle(argument));\n\t\tverify(callbackInstance).handle(argument);\n\t}\n","date":"2019-06-07 19:25:54","endLine":223,"groupId":"102093","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"callbacksInvokeWhenHasResolvableGenericMatchShouldInvokeCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d1/350e29739eaa3ba60ce6db03e7b4a87df084e4.src","preCode":"\tpublic void callbacksInvokeWhenHasResolvableGenericMatchShouldInvokeCallback() {\n\t\tStringBuilderCallback callbackInstance = mock(StringBuilderCallback.class);\n\t\tStringBuilder argument = new StringBuilder(\"foo\");\n\t\tLambdaSafe.callbacks(GenericCallback.class, Collections.singleton(callbackInstance), argument)\n\t\t\t\t.invoke((c) -> c.handle(argument));\n\t\tverify(callbackInstance).handle(argument);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
