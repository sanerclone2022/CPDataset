[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToMapShouldBindToMapValue() throws Exception {\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.bar.baz\", \"1\");\n\t\tsource.put(\"foo.bar.bin\", \"2\");\n\t\tsource.put(\"foo.far.baz\", \"3\");\n\t\tsource.put(\"foo.far.bin\", \"4\");\n\t\tsource.put(\"faf.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tMap<String, Map<String, Integer>> result = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.<Map<String, Map<String, Integer>>>of(type)).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(result.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","date":"2017-10-05 11:18:56","endLine":138,"groupId":"14299","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToMapShouldBindToMapValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c9/62c042e104d1f72847861212a3759a4c4319b0.src","preCode":"\tpublic void bindToMapShouldBindToMapValue() throws Exception {\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.bar.baz\", \"1\");\n\t\tsource.put(\"foo.bar.bin\", \"2\");\n\t\tsource.put(\"foo.far.baz\", \"3\");\n\t\tsource.put(\"foo.far.bin\", \"4\");\n\t\tsource.put(\"faf.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tMap<String, Map<String, Integer>> result = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.<Map<String, Map<String, Integer>>>of(type)).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(result.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToMapShouldBindNestedMapValue() throws Exception {\n\t\tResolvableType nestedType = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), nestedType);\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.nested.bar.baz\", \"1\");\n\t\tsource.put(\"foo.nested.bar.bin\", \"2\");\n\t\tsource.put(\"foo.nested.far.baz\", \"3\");\n\t\tsource.put(\"foo.nested.far.bin\", \"4\");\n\t\tsource.put(\"faf.nested.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tBindable<Map<String, Map<String, Map<String, Integer>>>> target = Bindable\n\t\t\t\t.of(type);\n\t\tMap<String, Map<String, Map<String, Integer>>> result = this.binder\n\t\t\t\t.bind(\"foo\", target).get();\n\t\tMap<String, Map<String, Integer>> nested = result.get(\"nested\");\n\t\tassertThat(nested).hasSize(2);\n\t\tassertThat(nested.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(nested.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","date":"2017-10-05 11:18:56","endLine":161,"groupId":"14301","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToMapShouldBindNestedMapValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c9/62c042e104d1f72847861212a3759a4c4319b0.src","preCode":"\tpublic void bindToMapShouldBindNestedMapValue() throws Exception {\n\t\tResolvableType nestedType = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), nestedType);\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.nested.bar.baz\", \"1\");\n\t\tsource.put(\"foo.nested.bar.bin\", \"2\");\n\t\tsource.put(\"foo.nested.far.baz\", \"3\");\n\t\tsource.put(\"foo.nested.far.bin\", \"4\");\n\t\tsource.put(\"faf.nested.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tBindable<Map<String, Map<String, Map<String, Integer>>>> target = Bindable\n\t\t\t\t.of(type);\n\t\tMap<String, Map<String, Map<String, Integer>>> result = this.binder\n\t\t\t\t.bind(\"foo\", target).get();\n\t\tMap<String, Map<String, Integer>> nested = result.get(\"nested\");\n\t\tassertThat(nested).hasSize(2);\n\t\tassertThat(nested.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(nested.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToMapShouldBindToMapValue() {\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.bar.baz\", \"1\");\n\t\tsource.put(\"foo.bar.bin\", \"2\");\n\t\tsource.put(\"foo.far.baz\", \"3\");\n\t\tsource.put(\"foo.far.bin\", \"4\");\n\t\tsource.put(\"faf.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tMap<String, Map<String, Integer>> result = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.<Map<String, Map<String, Integer>>>of(type)).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(result.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","date":"2017-12-12 18:57:30","endLine":139,"groupId":"14299","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToMapShouldBindToMapValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/be/7c39de7bba2dd03c538fff9ecc598f2ca502e3.src","preCode":"\tpublic void bindToMapShouldBindToMapValue() throws Exception {\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.bar.baz\", \"1\");\n\t\tsource.put(\"foo.bar.bin\", \"2\");\n\t\tsource.put(\"foo.far.baz\", \"3\");\n\t\tsource.put(\"foo.far.bin\", \"4\");\n\t\tsource.put(\"faf.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tMap<String, Map<String, Integer>> result = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.<Map<String, Map<String, Integer>>>of(type)).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(result.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToMapShouldBindNestedMapValue() {\n\t\tResolvableType nestedType = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), nestedType);\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.nested.bar.baz\", \"1\");\n\t\tsource.put(\"foo.nested.bar.bin\", \"2\");\n\t\tsource.put(\"foo.nested.far.baz\", \"3\");\n\t\tsource.put(\"foo.nested.far.bin\", \"4\");\n\t\tsource.put(\"faf.nested.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tBindable<Map<String, Map<String, Map<String, Integer>>>> target = Bindable\n\t\t\t\t.of(type);\n\t\tMap<String, Map<String, Map<String, Integer>>> result = this.binder\n\t\t\t\t.bind(\"foo\", target).get();\n\t\tMap<String, Map<String, Integer>> nested = result.get(\"nested\");\n\t\tassertThat(nested).hasSize(2);\n\t\tassertThat(nested.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(nested.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","date":"2017-12-12 18:57:30","endLine":162,"groupId":"14301","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToMapShouldBindNestedMapValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/be/7c39de7bba2dd03c538fff9ecc598f2ca502e3.src","preCode":"\tpublic void bindToMapShouldBindNestedMapValue() throws Exception {\n\t\tResolvableType nestedType = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), nestedType);\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.nested.bar.baz\", \"1\");\n\t\tsource.put(\"foo.nested.bar.bin\", \"2\");\n\t\tsource.put(\"foo.nested.far.baz\", \"3\");\n\t\tsource.put(\"foo.nested.far.bin\", \"4\");\n\t\tsource.put(\"faf.nested.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tBindable<Map<String, Map<String, Map<String, Integer>>>> target = Bindable\n\t\t\t\t.of(type);\n\t\tMap<String, Map<String, Map<String, Integer>>> result = this.binder\n\t\t\t\t.bind(\"foo\", target).get();\n\t\tMap<String, Map<String, Integer>> nested = result.get(\"nested\");\n\t\tassertThat(nested).hasSize(2);\n\t\tassertThat(nested.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(nested.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid bindToMapShouldBindToMapValue() {\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(String.class),\n\t\t\t\tSTRING_INTEGER_MAP.getType());\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.bar.baz\", \"1\");\n\t\tsource.put(\"foo.bar.bin\", \"2\");\n\t\tsource.put(\"foo.far.baz\", \"3\");\n\t\tsource.put(\"foo.far.bin\", \"4\");\n\t\tsource.put(\"faf.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tMap<String, Map<String, Integer>> result = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.<Map<String, Map<String, Integer>>>of(type)).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(result.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","date":"2019-06-07 19:25:54","endLine":135,"groupId":"101383","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToMapShouldBindToMapValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/36/b30f26577f68c3eb5e6c18d90cca4b6a62f01d.src","preCode":"\tpublic void bindToMapShouldBindToMapValue() {\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(String.class),\n\t\t\t\tSTRING_INTEGER_MAP.getType());\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.bar.baz\", \"1\");\n\t\tsource.put(\"foo.bar.bin\", \"2\");\n\t\tsource.put(\"foo.far.baz\", \"3\");\n\t\tsource.put(\"foo.far.bin\", \"4\");\n\t\tsource.put(\"faf.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tMap<String, Map<String, Integer>> result = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.<Map<String, Map<String, Integer>>>of(type)).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(result.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid bindToMapShouldBindNestedMapValue() {\n\t\tResolvableType nestedType = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(String.class),\n\t\t\t\tnestedType);\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.nested.bar.baz\", \"1\");\n\t\tsource.put(\"foo.nested.bar.bin\", \"2\");\n\t\tsource.put(\"foo.nested.far.baz\", \"3\");\n\t\tsource.put(\"foo.nested.far.bin\", \"4\");\n\t\tsource.put(\"faf.nested.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tBindable<Map<String, Map<String, Map<String, Integer>>>> target = Bindable.of(type);\n\t\tMap<String, Map<String, Map<String, Integer>>> result = this.binder.bind(\"foo\", target).get();\n\t\tMap<String, Map<String, Integer>> nested = result.get(\"nested\");\n\t\tassertThat(nested).hasSize(2);\n\t\tassertThat(nested.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(nested.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","date":"2019-06-07 19:25:54","endLine":156,"groupId":"101383","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToMapShouldBindNestedMapValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/36/b30f26577f68c3eb5e6c18d90cca4b6a62f01d.src","preCode":"\tpublic void bindToMapShouldBindNestedMapValue() {\n\t\tResolvableType nestedType = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\tResolvableType.forClass(String.class), STRING_INTEGER_MAP.getType());\n\t\tResolvableType type = ResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(String.class),\n\t\t\t\tnestedType);\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.nested.bar.baz\", \"1\");\n\t\tsource.put(\"foo.nested.bar.bin\", \"2\");\n\t\tsource.put(\"foo.nested.far.baz\", \"3\");\n\t\tsource.put(\"foo.nested.far.bin\", \"4\");\n\t\tsource.put(\"faf.nested.far.bin\", \"x\");\n\t\tthis.sources.add(source);\n\t\tBindable<Map<String, Map<String, Map<String, Integer>>>> target = Bindable.of(type);\n\t\tMap<String, Map<String, Map<String, Integer>>> result = this.binder.bind(\"foo\", target).get();\n\t\tMap<String, Map<String, Integer>> nested = result.get(\"nested\");\n\t\tassertThat(nested).hasSize(2);\n\t\tassertThat(nested.get(\"bar\")).containsEntry(\"baz\", 1).containsEntry(\"bin\", 2);\n\t\tassertThat(nested.get(\"far\")).containsEntry(\"baz\", 3).containsEntry(\"bin\", 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
