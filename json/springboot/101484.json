[{"authorTime":"2019-09-20 03:34:11","codes":[{"authorDate":"2019-09-20 03:34:11","commitOrder":1,"curCode":"\tvoid registerWhenNotAlreadyRegisteredAddBeanDefinition() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registrar.register(BeanConfigurationProperties.class);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isEqualTo(BeanConfigurationProperties.class.getName());\n\t}\n","date":"2019-09-21 04:42:33","endLine":49,"groupId":"8272","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"registerWhenNotAlreadyRegisteredAddBeanDefinition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/53/e1d6e9478310a40a72cf1c375193d1b2029557.src","preCode":"\tvoid registerWhenNotAlreadyRegisteredAddBeanDefinition() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registrar.register(BeanConfigurationProperties.class);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isEqualTo(BeanConfigurationProperties.class.getName());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"},{"authorDate":"2019-09-20 03:34:11","commitOrder":1,"curCode":"\tvoid registerWhenAlreadyContainsNameDoesNotReplace() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registry.registerBeanDefinition(beanName, new GenericBeanDefinition());\n\t\tthis.registrar.register(BeanConfigurationProperties.class);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isNull();\n\t}\n","date":"2019-09-21 04:42:33","endLine":59,"groupId":"8273","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"registerWhenAlreadyContainsNameDoesNotReplace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/53/e1d6e9478310a40a72cf1c375193d1b2029557.src","preCode":"\tvoid registerWhenAlreadyContainsNameDoesNotReplace() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registry.registerBeanDefinition(beanName, new GenericBeanDefinition());\n\t\tthis.registrar.register(BeanConfigurationProperties.class);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"221ff0ff6de8bd9557f3fb6d7b336a188b2dd224","commitMessage":"@@@Polish configuration property bean classes\n\nRefactor the `org.springframework.boot.actuate.context` package\nwith the following changes:\n\n- Deprecate several classes which would ideally be internal\n\n- Replace `ConfigurationBeanFactoryMetadata` with a new\n  `ConfigurationPropertiesBean` class to better reflect that we no\n  longer maintain meta-data directly.\n\n- Use constructor injection and final fields whenever possible\n\n- Rename `ConfiguraionPropertiesBeanDefinition` to\n  `ConfigurationPropertiesValueObjectBeanDefinition` to align\n  with the binder changes made in commit 0b3015e4ff\n\n- Add additional tests\n\nCloses gh-16903\n","date":"2019-09-21 04:42:33","modifiedFileCount":"14","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-09-16 01:51:30","codes":[{"authorDate":"2020-09-16 01:51:30","commitOrder":2,"curCode":"\tvoid registerWhenNotAlreadyRegisteredAddBeanDefinition() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registrar.register(BeanConfigurationProperties.class, null, false);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isEqualTo(BeanConfigurationProperties.class.getName());\n\t}\n","date":"2020-09-16 02:36:00","endLine":50,"groupId":"8272","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"registerWhenNotAlreadyRegisteredAddBeanDefinition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a5/fd9989775426f34953857a27005f2cea778b3c.src","preCode":"\tvoid registerWhenNotAlreadyRegisteredAddBeanDefinition() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registrar.register(BeanConfigurationProperties.class);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isEqualTo(BeanConfigurationProperties.class.getName());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2020-09-16 01:51:30","commitOrder":2,"curCode":"\tvoid registerWhenAlreadyContainsNameDoesNotReplace() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registry.registerBeanDefinition(beanName, new GenericBeanDefinition());\n\t\tthis.registrar.register(BeanConfigurationProperties.class, null, false);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isNull();\n\t}\n","date":"2020-09-16 02:36:00","endLine":60,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"registerWhenAlreadyContainsNameDoesNotReplace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a5/fd9989775426f34953857a27005f2cea778b3c.src","preCode":"\tvoid registerWhenAlreadyContainsNameDoesNotReplace() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registry.registerBeanDefinition(beanName, new GenericBeanDefinition());\n\t\tthis.registrar.register(BeanConfigurationProperties.class);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"5f49d4a8d70cd126bdce8eef42026053c301bd84","commitMessage":"@@@Rename @ConfigurationPropertiesImport\n\nRename `@ConfigurationPropertiesImport` to\n`@ImportAsConfigurationPropertiesBean` and also refine the registrar\nso that it can be used with type directly annotated with\n`@ConfigurationProperties`.\n\nCloses gh-23172\n","date":"2020-09-16 02:36:00","modifiedFileCount":"15","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-10-06 22:06:10","codes":[{"authorDate":"2020-10-06 22:06:10","commitOrder":3,"curCode":"\tvoid registerWhenNotAlreadyRegisteredAddBeanDefinition() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registrar.register(BeanConfigurationProperties.class);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isEqualTo(BeanConfigurationProperties.class.getName());\n\t}\n","date":"2020-10-07 16:53:01","endLine":49,"groupId":"101484","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"registerWhenNotAlreadyRegisteredAddBeanDefinition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/86/5c41f640ab5763ff9c2bb9b17d5f8e210e9b79.src","preCode":"\tvoid registerWhenNotAlreadyRegisteredAddBeanDefinition() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registrar.register(BeanConfigurationProperties.class, null, false);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isEqualTo(BeanConfigurationProperties.class.getName());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2020-10-06 22:06:10","commitOrder":3,"curCode":"\tvoid registerWhenAlreadyContainsNameDoesNotReplace() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registry.registerBeanDefinition(beanName, new GenericBeanDefinition());\n\t\tthis.registrar.register(BeanConfigurationProperties.class);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isNull();\n\t}\n","date":"2020-10-07 16:53:01","endLine":59,"groupId":"101484","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"registerWhenAlreadyContainsNameDoesNotReplace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/86/5c41f640ab5763ff9c2bb9b17d5f8e210e9b79.src","preCode":"\tvoid registerWhenAlreadyContainsNameDoesNotReplace() {\n\t\tString beanName = \"beancp-\" + BeanConfigurationProperties.class.getName();\n\t\tthis.registry.registerBeanDefinition(beanName, new GenericBeanDefinition());\n\t\tthis.registrar.register(BeanConfigurationProperties.class, null, false);\n\t\tBeanDefinition definition = this.registry.getBeanDefinition(beanName);\n\t\tassertThat(definition).isNotNull();\n\t\tassertThat(definition.getBeanClassName()).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"1296b4dfe687d1f4c6461c05f1a23f86caf199bb","commitMessage":"@@@Revert \"Support constructor binding on 3rd party classes\"\n\nThis commit reverts the support of constructor binding on 3rd party\nclasses using @ImportConfigurationPropertiesBean\n\nSee gh-23172\n\nCloses gh-23593\n","date":"2020-10-07 16:53:01","modifiedFileCount":"20","status":"M","submitter":"Stephane Nicoll"}]
