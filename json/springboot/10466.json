[{"authorTime":"2019-03-05 18:05:19","codes":[{"authorDate":"2018-01-24 09:15:25","commitOrder":2,"curCode":"\tpublic void onStartupWhenHasInitParametersShouldRegisterInitParameters()\n\t\t\tthrows Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class).withInitParameter(\"a\", \"b\"));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\",\n\t\t\t\tCollections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t}\n","date":"2018-01-25 09:06:13","endLine":114,"groupId":"2990","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onStartupWhenHasInitParametersShouldRegisterInitParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/54/2f435bc25dca6b8662294f45ee9d4f046e01d0.src","preCode":"\tpublic void onStartupWhenHasInitParametersShouldRegisterInitParameters()\n\t\t\tthrows Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class).withInitParameter(\"a\", \"b\"));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\",\n\t\t\t\tCollections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"NB"},{"authorDate":"2019-03-05 18:05:19","commitOrder":2,"curCode":"\tpublic void onStartupWhenHasNotLoadOnStartupShouldRegisterDefaultValue()\n\t\t\tthrows Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\",\n\t\t\t\tCollections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setLoadOnStartup(-1);\n\t}\n","date":"2019-03-05 18:05:19","endLine":143,"groupId":"2990","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onStartupWhenHasNotLoadOnStartupShouldRegisterDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/62/f4a44bedd67618efaf3fcee1817d367878b69a.src","preCode":"\tpublic void onStartupWhenHasNotLoadOnStartupShouldRegisterDefaultValue()\n\t\t\tthrows Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\",\n\t\t\t\tCollections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setLoadOnStartup(-1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"d403dae6fc7f87ee669108ad830401fa3d01f0bb","commitMessage":"@@@Merge pull request #16053 from juliojgd\n\n* pr/16053:\n  Polish \"Add loadOnStartup property to EndpointServlet\"\n  Add loadOnStartup property to EndpointServlet\n","date":"2019-03-05 18:05:19","modifiedFileCount":"4","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-03-05 18:05:19","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid onStartupWhenHasInitParametersShouldRegisterInitParameters() throws Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class).withInitParameter(\"a\", \"b\"));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\", Collections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t}\n","date":"2019-06-07 19:25:54","endLine":111,"groupId":"2990","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onStartupWhenHasInitParametersShouldRegisterInitParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/86/51d2a5343c2aba39531ab55a23069a93572eb2.src","preCode":"\tpublic void onStartupWhenHasInitParametersShouldRegisterInitParameters() throws Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class).withInitParameter(\"a\", \"b\"));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\", Collections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-03-05 18:05:19","commitOrder":3,"curCode":"\tpublic void onStartupWhenHasNotLoadOnStartupShouldRegisterDefaultValue()\n\t\t\tthrows Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\",\n\t\t\t\tCollections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setLoadOnStartup(-1);\n\t}\n","date":"2019-03-05 18:05:19","endLine":143,"groupId":"2990","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onStartupWhenHasNotLoadOnStartupShouldRegisterDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/62/f4a44bedd67618efaf3fcee1817d367878b69a.src","preCode":"\tpublic void onStartupWhenHasNotLoadOnStartupShouldRegisterDefaultValue()\n\t\t\tthrows Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\",\n\t\t\t\tCollections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setLoadOnStartup(-1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"N"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-08-08 22:53:42","codes":[{"authorDate":"2020-08-08 22:53:42","commitOrder":4,"curCode":"\tvoid onStartupWhenHasInitParametersShouldRegisterInitParameters() throws Exception {\n\t\tgiven(this.servletContext.addServlet(any(String.class), any(Servlet.class))).willReturn(this.dynamic);\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class).withInitParameter(\"a\", \"b\"));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\", Collections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t}\n","date":"2020-08-10 22:22:03","endLine":108,"groupId":"10466","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"onStartupWhenHasInitParametersShouldRegisterInitParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e4/e2a419c53a1e15366fba1acf42519361015061.src","preCode":"\tvoid onStartupWhenHasInitParametersShouldRegisterInitParameters() throws Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class).withInitParameter(\"a\", \"b\"));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\", Collections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-08-08 22:53:42","commitOrder":4,"curCode":"\tvoid onStartupWhenHasNotLoadOnStartupShouldRegisterDefaultValue() throws Exception {\n\t\tgiven(this.servletContext.addServlet(any(String.class), any(Servlet.class))).willReturn(this.dynamic);\n\t\tExposableServletEndpoint endpoint = mockEndpoint(new EndpointServlet(TestServlet.class));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\", Collections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setLoadOnStartup(-1);\n\t}\n","date":"2020-08-10 22:22:03","endLine":126,"groupId":"10466","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"onStartupWhenHasNotLoadOnStartupShouldRegisterDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e4/e2a419c53a1e15366fba1acf42519361015061.src","preCode":"\tpublic void onStartupWhenHasNotLoadOnStartupShouldRegisterDefaultValue()\n\t\t\tthrows Exception {\n\t\tExposableServletEndpoint endpoint = mockEndpoint(\n\t\t\t\tnew EndpointServlet(TestServlet.class));\n\t\tServletEndpointRegistrar registrar = new ServletEndpointRegistrar(\"/actuator\",\n\t\t\t\tCollections.singleton(endpoint));\n\t\tregistrar.onStartup(this.servletContext);\n\t\tverify(this.dynamic).setLoadOnStartup(-1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrarTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"969dd35e456e6683dd5b767be2079085ccff3941","commitMessage":"@@@Upgrade to Mockito 3.4.6\n\nCloses gh-22838\n","date":"2020-08-10 22:22:03","modifiedFileCount":"68","status":"M","submitter":"Andy Wilkinson"}]
