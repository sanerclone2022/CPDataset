[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void startupWithDefaults() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"mockFilter\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(true);\n\t\tverify(this.registration).addMappingForUrlPatterns(\n\t\t\t\tEnumSet.of(DispatcherType.REQUEST), false, \"/*\");\n\t}\n","date":"2017-10-05 11:18:56","endLine":76,"groupId":"3541","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startupWithDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bd/e8b57f960cb32fd0507c7fa0305c278a81b8c1.src","preCode":"\tpublic void startupWithDefaults() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"mockFilter\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(true);\n\t\tverify(this.registration).addMappingForUrlPatterns(\n\t\t\t\tEnumSet.of(DispatcherType.REQUEST), false, \"/*\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void startupWithSpecifiedValues() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.setName(\"test\");\n\t\tbean.setAsyncSupported(false);\n\t\tbean.setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t\tbean.addInitParameter(\"c\", \"d\");\n\t\tbean.setUrlPatterns(new LinkedHashSet<>(Arrays.asList(\"/a\", \"/b\")));\n\t\tbean.addUrlPatterns(\"/c\");\n\t\tbean.setServletNames(new LinkedHashSet<>(Arrays.asList(\"s1\", \"s2\")));\n\t\tbean.addServletNames(\"s3\");\n\t\tbean.setServletRegistrationBeans(\n\t\t\t\tCollections.singleton(mockServletRegistration(\"s4\")));\n\t\tbean.addServletRegistrationBeans(mockServletRegistration(\"s5\"));\n\t\tbean.setMatchAfter(true);\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"test\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(false);\n\t\tMap<String, String> expectedInitParameters = new HashMap<>();\n\t\texpectedInitParameters.put(\"a\", \"b\");\n\t\texpectedInitParameters.put(\"c\", \"d\");\n\t\tverify(this.registration).setInitParameters(expectedInitParameters);\n\t\tverify(this.registration).addMappingForUrlPatterns(\n\t\t\t\tEnumSet.of(DispatcherType.REQUEST), true, \"/a\", \"/b\", \"/c\");\n\t\tverify(this.registration).addMappingForServletNames(\n\t\t\t\tEnumSet.of(DispatcherType.REQUEST), true, \"s4\", \"s5\", \"s1\", \"s2\", \"s3\");\n\t}\n","date":"2017-10-05 11:18:56","endLine":104,"groupId":"13076","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startupWithSpecifiedValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bd/e8b57f960cb32fd0507c7fa0305c278a81b8c1.src","preCode":"\tpublic void startupWithSpecifiedValues() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.setName(\"test\");\n\t\tbean.setAsyncSupported(false);\n\t\tbean.setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t\tbean.addInitParameter(\"c\", \"d\");\n\t\tbean.setUrlPatterns(new LinkedHashSet<>(Arrays.asList(\"/a\", \"/b\")));\n\t\tbean.addUrlPatterns(\"/c\");\n\t\tbean.setServletNames(new LinkedHashSet<>(Arrays.asList(\"s1\", \"s2\")));\n\t\tbean.addServletNames(\"s3\");\n\t\tbean.setServletRegistrationBeans(\n\t\t\t\tCollections.singleton(mockServletRegistration(\"s4\")));\n\t\tbean.addServletRegistrationBeans(mockServletRegistration(\"s5\"));\n\t\tbean.setMatchAfter(true);\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"test\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(false);\n\t\tMap<String, String> expectedInitParameters = new HashMap<>();\n\t\texpectedInitParameters.put(\"a\", \"b\");\n\t\texpectedInitParameters.put(\"c\", \"d\");\n\t\tverify(this.registration).setInitParameters(expectedInitParameters);\n\t\tverify(this.registration).addMappingForUrlPatterns(\n\t\t\t\tEnumSet.of(DispatcherType.REQUEST), true, \"/a\", \"/b\", \"/c\");\n\t\tverify(this.registration).addMappingForServletNames(\n\t\t\t\tEnumSet.of(DispatcherType.REQUEST), true, \"s4\", \"s5\", \"s1\", \"s2\", \"s3\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid startupWithDefaults() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"mockFilter\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(true);\n\t\tverify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, \"/*\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":70,"groupId":"3541","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startupWithDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/10/d94e541102731b5f6b4b95458025cd06794d11.src","preCode":"\tpublic void startupWithDefaults() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"mockFilter\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(true);\n\t\tverify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, \"/*\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid startupWithSpecifiedValues() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.setName(\"test\");\n\t\tbean.setAsyncSupported(false);\n\t\tbean.setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t\tbean.addInitParameter(\"c\", \"d\");\n\t\tbean.setUrlPatterns(new LinkedHashSet<>(Arrays.asList(\"/a\", \"/b\")));\n\t\tbean.addUrlPatterns(\"/c\");\n\t\tbean.setServletNames(new LinkedHashSet<>(Arrays.asList(\"s1\", \"s2\")));\n\t\tbean.addServletNames(\"s3\");\n\t\tbean.setServletRegistrationBeans(Collections.singleton(mockServletRegistration(\"s4\")));\n\t\tbean.addServletRegistrationBeans(mockServletRegistration(\"s5\"));\n\t\tbean.setMatchAfter(true);\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"test\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(false);\n\t\tMap<String, String> expectedInitParameters = new HashMap<>();\n\t\texpectedInitParameters.put(\"a\", \"b\");\n\t\texpectedInitParameters.put(\"c\", \"d\");\n\t\tverify(this.registration).setInitParameters(expectedInitParameters);\n\t\tverify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), true, \"/a\", \"/b\", \"/c\");\n\t\tverify(this.registration).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), true, \"s4\", \"s5\", \"s1\",\n\t\t\t\t\"s2\", \"s3\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":96,"groupId":"13076","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"startupWithSpecifiedValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/10/d94e541102731b5f6b4b95458025cd06794d11.src","preCode":"\tpublic void startupWithSpecifiedValues() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.setName(\"test\");\n\t\tbean.setAsyncSupported(false);\n\t\tbean.setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t\tbean.addInitParameter(\"c\", \"d\");\n\t\tbean.setUrlPatterns(new LinkedHashSet<>(Arrays.asList(\"/a\", \"/b\")));\n\t\tbean.addUrlPatterns(\"/c\");\n\t\tbean.setServletNames(new LinkedHashSet<>(Arrays.asList(\"s1\", \"s2\")));\n\t\tbean.addServletNames(\"s3\");\n\t\tbean.setServletRegistrationBeans(Collections.singleton(mockServletRegistration(\"s4\")));\n\t\tbean.addServletRegistrationBeans(mockServletRegistration(\"s5\"));\n\t\tbean.setMatchAfter(true);\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"test\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(false);\n\t\tMap<String, String> expectedInitParameters = new HashMap<>();\n\t\texpectedInitParameters.put(\"a\", \"b\");\n\t\texpectedInitParameters.put(\"c\", \"d\");\n\t\tverify(this.registration).setInitParameters(expectedInitParameters);\n\t\tverify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), true, \"/a\", \"/b\", \"/c\");\n\t\tverify(this.registration).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), true, \"s4\", \"s5\", \"s1\",\n\t\t\t\t\"s2\", \"s3\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-08-08 22:53:42","codes":[{"authorDate":"2020-08-08 22:53:42","commitOrder":3,"curCode":"\tvoid startupWithDefaults() throws Exception {\n\t\tgiven(this.servletContext.addFilter(anyString(), any(Filter.class))).willReturn(this.registration);\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"mockFilter\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(true);\n\t\tverify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, \"/*\");\n\t}\n","date":"2020-08-10 22:22:03","endLine":66,"groupId":"102019","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"startupWithDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/77/c9e9513925f9d11bb32032d3a9c57174e0e604.src","preCode":"\tvoid startupWithDefaults() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"mockFilter\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(true);\n\t\tverify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, \"/*\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-08-08 22:53:42","commitOrder":3,"curCode":"\tvoid startupWithSpecifiedValues() throws Exception {\n\t\tgiven(this.servletContext.addFilter(anyString(), any(Filter.class))).willReturn(this.registration);\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.setName(\"test\");\n\t\tbean.setAsyncSupported(false);\n\t\tbean.setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t\tbean.addInitParameter(\"c\", \"d\");\n\t\tbean.setUrlPatterns(new LinkedHashSet<>(Arrays.asList(\"/a\", \"/b\")));\n\t\tbean.addUrlPatterns(\"/c\");\n\t\tbean.setServletNames(new LinkedHashSet<>(Arrays.asList(\"s1\", \"s2\")));\n\t\tbean.addServletNames(\"s3\");\n\t\tbean.setServletRegistrationBeans(Collections.singleton(mockServletRegistration(\"s4\")));\n\t\tbean.addServletRegistrationBeans(mockServletRegistration(\"s5\"));\n\t\tbean.setMatchAfter(true);\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"test\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(false);\n\t\tMap<String, String> expectedInitParameters = new HashMap<>();\n\t\texpectedInitParameters.put(\"a\", \"b\");\n\t\texpectedInitParameters.put(\"c\", \"d\");\n\t\tverify(this.registration).setInitParameters(expectedInitParameters);\n\t\tverify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), true, \"/a\", \"/b\", \"/c\");\n\t\tverify(this.registration).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), true, \"s4\", \"s5\", \"s1\",\n\t\t\t\t\"s2\", \"s3\");\n\t}\n","date":"2020-08-10 22:22:03","endLine":93,"groupId":"102019","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"startupWithSpecifiedValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/77/c9e9513925f9d11bb32032d3a9c57174e0e604.src","preCode":"\tvoid startupWithSpecifiedValues() throws Exception {\n\t\tAbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean();\n\t\tbean.setName(\"test\");\n\t\tbean.setAsyncSupported(false);\n\t\tbean.setInitParameters(Collections.singletonMap(\"a\", \"b\"));\n\t\tbean.addInitParameter(\"c\", \"d\");\n\t\tbean.setUrlPatterns(new LinkedHashSet<>(Arrays.asList(\"/a\", \"/b\")));\n\t\tbean.addUrlPatterns(\"/c\");\n\t\tbean.setServletNames(new LinkedHashSet<>(Arrays.asList(\"s1\", \"s2\")));\n\t\tbean.addServletNames(\"s3\");\n\t\tbean.setServletRegistrationBeans(Collections.singleton(mockServletRegistration(\"s4\")));\n\t\tbean.addServletRegistrationBeans(mockServletRegistration(\"s5\"));\n\t\tbean.setMatchAfter(true);\n\t\tbean.onStartup(this.servletContext);\n\t\tverify(this.servletContext).addFilter(eq(\"test\"), getExpectedFilter());\n\t\tverify(this.registration).setAsyncSupported(false);\n\t\tMap<String, String> expectedInitParameters = new HashMap<>();\n\t\texpectedInitParameters.put(\"a\", \"b\");\n\t\texpectedInitParameters.put(\"c\", \"d\");\n\t\tverify(this.registration).setInitParameters(expectedInitParameters);\n\t\tverify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), true, \"/a\", \"/b\", \"/c\");\n\t\tverify(this.registration).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), true, \"s4\", \"s5\", \"s1\",\n\t\t\t\t\"s2\", \"s3\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"969dd35e456e6683dd5b767be2079085ccff3941","commitMessage":"@@@Upgrade to Mockito 3.4.6\n\nCloses gh-22838\n","date":"2020-08-10 22:22:03","modifiedFileCount":"68","status":"M","submitter":"Andy Wilkinson"}]
