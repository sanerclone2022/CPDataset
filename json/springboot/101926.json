[{"authorTime":"2018-01-23 18:54:49","codes":[{"authorDate":"2018-01-23 18:54:49","commitOrder":1,"curCode":"\tpublic void notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes\n\t\t\t\t.getErrorAttributes(buildServerRequest(request, ex), false);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2018-01-23 18:55:34","endLine":169,"groupId":"2148","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/676c16d367966778df9413629a87c53e375af1.src","preCode":"\tpublic void notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes\n\t\t\t\t.getErrorAttributes(buildServerRequest(request, ex), false);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"B"},{"authorDate":"2018-01-23 18:54:49","commitOrder":1,"curCode":"\tpublic void extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(\n\t\t\t\tCollections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes\n\t\t\t\t.getErrorAttributes(buildServerRequest(request, ex), false);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"public int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","date":"2018-01-23 18:55:34","endLine":204,"groupId":"2148","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/676c16d367966778df9413629a87c53e375af1.src","preCode":"\tpublic void extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(\n\t\t\t\tCollections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes\n\t\t\t\t.getErrorAttributes(buildServerRequest(request, ex), false);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"public int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"}],"commitId":"be7c0a15f7fbd729983614e8ad66399bebe9f647","commitMessage":"@@@Move reactive ErrorAttributes into spring-boot\n\nCloses gh-11714\n","date":"2018-01-23 18:55:34","modifiedFileCount":"3","status":"B","submitter":"Brian Clozel"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2019-06-07 19:25:54","endLine":173,"groupId":"2148","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/51/9c182bee0aa962c7e6837882041a51ca190733.src","preCode":"\tpublic void notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"public int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","date":"2019-06-07 19:25:54","endLine":214,"groupId":"2148","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/51/9c182bee0aa962c7e6837882041a51ca190733.src","preCode":"\tpublic void extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"public int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-07-02 03:29:51","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2019-06-07 19:25:54","endLine":173,"groupId":"2148","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/51/9c182bee0aa962c7e6837882041a51ca190733.src","preCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"N"},{"authorDate":"2019-07-02 03:29:51","commitOrder":3,"curCode":"\tvoid extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","date":"2019-07-04 02:39:47","endLine":214,"groupId":"2148","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/93/0024ad8089b4001b879b126d4ee5e730177dc2.src","preCode":"\tvoid extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"public int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"a66c4d3096877b33119366ea9ea165c892b462c8","commitMessage":"@@@Unify method visibility of private classes\n\nApply checkstyle rule to ensure that private and package private\nclasses do not have unnecessary public methods. Test classes have\nalso been unified as much as possible to use default scoped\ninner-classes.\n\nCloses gh-7316\n","date":"2019-07-04 02:39:47","modifiedFileCount":"906","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-04-14 22:29:54","codes":[{"authorDate":"2020-04-14 22:29:54","commitOrder":4,"curCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2020-04-16 23:46:36","endLine":197,"groupId":"2148","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/df/c4824595f20470d3989e076a284a878e0b9184.src","preCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2020-04-14 22:29:54","commitOrder":4,"curCode":"\tvoid extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\ttrue);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","date":"2020-04-16 23:46:36","endLine":239,"groupId":"2148","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/df/c4824595f20470d3989e076a284a878e0b9184.src","preCode":"\tvoid extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"70d4994502c848b3db82845c97a033448356c938","commitMessage":"@@@Disable exception details on default error views\n\nPrior to this commit.  default error responses included the message\nfrom a handled exception. When the exception was a BindException.  the\nerror responses could also include an errors attribute containing the\ndetails of the binding failure. These details could leak information\nabout the application.\n\nThis commit removes the exception message and binding errors detail\nfrom error responses by default.  and introduces a\n`server.error.include-details` property that can be used to cause\nthese details to be included in the response.\n\nFixes gh-20505\n","date":"2020-04-16 23:46:36","modifiedFileCount":"24","status":"M","submitter":"Scott Frederick"},{"authorTime":"2020-04-30 06:56:47","codes":[{"authorDate":"2020-04-30 06:56:47","commitOrder":5,"curCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse, false);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2020-04-30 06:56:47","endLine":197,"groupId":"2148","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/cf/3d7e4cf675f916949cdb7cbc725f1c0a9ec65c.src","preCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2020-04-30 06:56:47","commitOrder":5,"curCode":"\tvoid extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\ttrue, true);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","date":"2020-04-30 06:56:47","endLine":239,"groupId":"2148","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/cf/3d7e4cf675f916949cdb7cbc725f1c0a9ec65c.src","preCode":"\tvoid extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\ttrue);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"a30740f8d2e590c1f3adc20fbc4ea9c653c5a94b","commitMessage":"@@@Separate server properties for message and errors\n\nPrior to this commit.  there was a property server.error.include-details\nthat allowed configuration of the message and errors attributes in a\nserver error response.\n\nThis commit separates the control of the message and errors attributes\ninto two separate properties named server.error.include-message and\nserver.error.include-binding-errors. When the message attribute is\nexcluded from a servlet response.  the value is changed from a\nhard-coded text value to an empty value.\n\nFixes gh-20505\n","date":"2020-04-30 06:56:47","modifiedFileCount":"25","status":"M","submitter":"Scott Frederick"},{"authorTime":"2020-05-07 05:31:30","codes":[{"authorDate":"2020-05-07 05:31:30","commitOrder":6,"curCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2020-05-12 04:36:24","endLine":204,"groupId":"101926","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/59/66056319d32cbe8f90bff50b2568b75b11a9a8.src","preCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse, false);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2020-05-07 05:31:30","commitOrder":6,"curCode":"\tvoid extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.of(Include.MESSAGE, Include.BINDING_ERRORS));\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","date":"2020-05-12 04:36:24","endLine":247,"groupId":"101926","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/59/66056319d32cbe8f90bff50b2568b75b11a9a8.src","preCode":"\tvoid extractBindingResultErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\ttrue, true);\n\t\tassertThat(attributes.get(\"message\")).asString()\n\t\t\t\t.startsWith(\"Validation failed for argument at index 0 in method: \"\n\t\t\t\t\t\t+ \"int org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests\"\n\t\t\t\t\t\t+ \".method(java.lang.String), with 1 error(s)\");\n\t\tassertThat(attributes.get(\"errors\")).isEqualTo(bindingResult.getAllErrors());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"158933c3e57e921a0339cdb7635b12ae0ad89832","commitMessage":"@@@Improve API of ErrorAttributes and DefaultErrorAttributes\n\nThis commit improves the backward-compatibility of the ErrorAttributes\ninterfaces by providing a default implementation of a new method. It\nalso encapsulates several parameters that control the inclusion or\nexclusion of error attributes into a new ErrorAttributeOptions type to\nmake it easier and less intrusive to add additional options in the\nfuture. This encapsulation also makes the handling of the\nincludeException option more similar to other options.\n\nFixes gh-21324\n","date":"2020-05-12 04:36:24","modifiedFileCount":"17","status":"M","submitter":"Scott Frederick"}]
