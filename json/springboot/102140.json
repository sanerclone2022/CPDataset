[{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, Binder binder, ResourceLoader resourceLoader,\n\t\t\tList<String> names) {\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","date":"2020-07-23 12:02:32","endLine":70,"groupId":"13676","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ConfigDataLocationResolvers","params":"(DeferredLogFactorylogFactory@Binderbinder@ResourceLoaderresourceLoader@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a6/befcef2ad664a4f4a7d002d83a2cf367484bcf.src","preCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, Binder binder, ResourceLoader resourceLoader,\n\t\t\tList<String> names) {\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> availableParameters.add(Log.class, logFactory::getLog));\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","date":"2020-07-23 12:02:32","endLine":65,"groupId":"5013","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ConfigDataLoaders","params":"(DeferredLogFactorylogFactory@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f9/70ec8e408b36ceb0ae44fa5cd3d176c90a6a38.src","preCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> availableParameters.add(Log.class, logFactory::getLog));\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"3352024b1ca641fa0beaaa4cd87788c190242eb0","commitMessage":"@@@Provide ConfigFileApplicationListener replacement\n\nDeprecate `ConfigFileApplicationListener` and provide a replacement\nmechanism that supports arbitrary config data imports.\n\nThis commit updates the following areas:\n\n- Extract `EnvironmentPostProcessor` invocation logic from the\n  `ConfigFileApplicationListener` to new dedicated listener. Also\n  providing support for `Log` injection.\n\n- Extract `RandomPropertySource` adding logic from the\n  `ConfigFileApplicationListener` to a dedicated class.\n\n- Migrate to the recently introduced `DefaultPropertiesPropertySource`\n  class when moving the defaultProperties `PropertySource`\n\n- Replace processing logic with a phased approach to ensure that\n  profile enablement happens in a distinct phase and that profiles\n  can no longer be activated on an ad-hoc basis.\n\n- Provide a more predictable and logical import order for processing\n  `application.properties` and `application.yml` files.\n\n- Add support for a `spring.config.import` property which can be used\n  to import additional config data. Also provide a pluggable API\n  allowing third-parties to resolve and load locations themselves.\n\n- Add `spring.config.activate.on-profile` support which replaces the\n  existing `spring.profiles` property.\n\n- Add `spring.config.activate.on-cloud-platform` support which allows\n  a config data document to be active only on a given cloud platform.\n\n- Support a `spring.config.use-legacy-processing` property allowing the\n  previous processing logic to be used.\n\nCloses gh-22497\n\nCo-authored-by: Madhura Bhave <mbhave@vmware.com>\n","date":"2020-07-23 12:02:32","modifiedFileCount":"17","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2020-08-25 04:04:50","commitOrder":2,"curCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, Binder binder, ResourceLoader resourceLoader,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","date":"2020-08-26 03:56:55","endLine":76,"groupId":"13676","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ConfigDataLocationResolvers","params":"(DeferredLogFactorylogFactory@Binderbinder@ResourceLoaderresourceLoader@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bf/e2991ef5763028ed9d5d392a9d8168854b7470.src","preCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, Binder binder, ResourceLoader resourceLoader,\n\t\t\tList<String> names) {\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-07-14 12:19:10","commitOrder":2,"curCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> availableParameters.add(Log.class, logFactory::getLog));\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","date":"2020-07-23 12:02:32","endLine":65,"groupId":"5013","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ConfigDataLoaders","params":"(DeferredLogFactorylogFactory@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f9/70ec8e408b36ceb0ae44fa5cd3d176c90a6a38.src","preCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> availableParameters.add(Log.class, logFactory::getLog));\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"}],"commitId":"081a7ee28cb5aa7342520d946e68a589378ed154","commitMessage":"@@@Throw exception if import locations are not found\n\nUpdate config data processing code so that import locations are\nmandatory by default. Any import request will now throw a\n`ConfigDataLocationNotFoundException` if the specified import\nlocation cannot be found. For optional imports.  the user can\nuse the `optional:` prefix to indicate that the application should\ncontinue to start.  even if the location does not exist.\n\nCloses gh-23032\n","date":"2020-08-26 03:56:55","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-08-27 11:11:40","codes":[{"authorDate":"2020-08-27 11:11:40","commitOrder":3,"curCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, boolean allLocationsOptional, Binder binder,\n\t\t\tResourceLoader resourceLoader, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.allLocationsOptional = allLocationsOptional;\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","date":"2020-08-27 11:11:40","endLine":82,"groupId":"13676","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"ConfigDataLocationResolvers","params":"(DeferredLogFactorylogFactory@booleanallLocationsOptional@Binderbinder@ResourceLoaderresourceLoader@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/34/d7b35b5f742d8febc631d0856d9c9640582982.src","preCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, Binder binder, ResourceLoader resourceLoader,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-08-27 11:11:40","commitOrder":3,"curCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, boolean allLocationsOptional, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.allLocationsOptional = allLocationsOptional;\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> availableParameters.add(Log.class, logFactory::getLog));\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","date":"2020-08-27 11:11:40","endLine":71,"groupId":"5013","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ConfigDataLoaders","params":"(DeferredLogFactorylogFactory@booleanallLocationsOptional@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/93/5a205e450905a818e8ccc1fd72ffff95c4f71a.src","preCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> availableParameters.add(Log.class, logFactory::getLog));\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"aa0f20473291e92630e39805f822364b189217a3","commitMessage":"@@@Add global optional config data opt-out\n\nSupport a `spring.config.all-locations-optional` property which can be\nset to `true` if all config data locations should be considered\noptional.\n\nCloses gh-23097\n","date":"2020-08-27 11:11:40","modifiedFileCount":"9","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-08-29 07:14:08","codes":[{"authorDate":"2020-08-29 07:14:08","commitOrder":4,"curCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, ConfigDataLocationNotFoundAction locationNotFoundAction,\n\t\t\tBinder binder, ResourceLoader resourceLoader, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.locationNotFoundAction = locationNotFoundAction;\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","date":"2020-08-29 07:30:39","endLine":84,"groupId":"13676","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"ConfigDataLocationResolvers","params":"(DeferredLogFactorylogFactory@ConfigDataLocationNotFoundActionlocationNotFoundAction@Binderbinder@ResourceLoaderresourceLoader@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/42/2d936a142488e529169f0e2da41350b64a6435.src","preCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, boolean allLocationsOptional, Binder binder,\n\t\t\tResourceLoader resourceLoader, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.allLocationsOptional = allLocationsOptional;\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2020-08-29 07:14:08","commitOrder":4,"curCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, ConfigDataLocationNotFoundAction locationNotFoundAction,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.locationNotFoundAction = locationNotFoundAction;\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> availableParameters.add(Log.class, logFactory::getLog));\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","date":"2020-08-29 07:30:39","endLine":74,"groupId":"5013","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"ConfigDataLoaders","params":"(DeferredLogFactorylogFactory@ConfigDataLocationNotFoundActionlocationNotFoundAction@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/36/88649da5b9d9f7ad7a4744d1a297b38e51faf0.src","preCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, boolean allLocationsOptional, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.allLocationsOptional = allLocationsOptional;\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> availableParameters.add(Log.class, logFactory::getLog));\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"0ddd1b6ce81a24c14518ef715527aa72b524d7eb","commitMessage":"@@@Refine global optional config data opt-out\n\nRename the opt-out property and use an enum in case we want to provide\nadditional options in the future.\n\nCloses gh-23097\n","date":"2020-08-29 07:30:39","modifiedFileCount":"9","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-09-17 15:09:41","codes":[{"authorDate":"2020-09-17 15:09:41","commitOrder":5,"curCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tConfigDataLocationNotFoundAction locationNotFoundAction, Binder binder, ResourceLoader resourceLoader,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.locationNotFoundAction = locationNotFoundAction;\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","date":"2020-09-17 15:31:00","endLine":93,"groupId":"13676","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"ConfigDataLocationResolvers","params":"(DeferredLogFactorylogFactory@ConfigurableBootstrapContextbootstrapContext@ConfigDataLocationNotFoundActionlocationNotFoundAction@Binderbinder@ResourceLoaderresourceLoader@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6b/07ffb14e864493f901e182ce1fd396588d6fe2.src","preCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, ConfigDataLocationNotFoundAction locationNotFoundAction,\n\t\t\tBinder binder, ResourceLoader resourceLoader, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.locationNotFoundAction = locationNotFoundAction;\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-09-17 15:09:41","commitOrder":5,"curCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tConfigDataLocationNotFoundAction locationNotFoundAction, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.locationNotFoundAction = locationNotFoundAction;\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","date":"2020-09-17 15:31:00","endLine":86,"groupId":"5013","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"ConfigDataLoaders","params":"(DeferredLogFactorylogFactory@ConfigurableBootstrapContextbootstrapContext@ConfigDataLocationNotFoundActionlocationNotFoundAction@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e7/cc4e1fc520e85268a4eb7d8ad0c39ef927e84b.src","preCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, ConfigDataLocationNotFoundAction locationNotFoundAction,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.locationNotFoundAction = locationNotFoundAction;\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> availableParameters.add(Log.class, logFactory::getLog));\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"1ae14362110360cc558bcd498fa67f70a35b8373","commitMessage":"@@@Refactor BootstrapRegistry support\n\nRefactor `BootstrapRegistry` support following initial prototype work\nwith the Spring Cloud team.\n\nThis update splits the `BootstrapRegistry` API into `BootstrapRegistry`. \n`BootstrapContext` and  `ConfigurableBootstrapContext` interfaces and\nmoves it to the same package as `SpringApplication`.\n\nA new `Bootstrapper` interface has been introduced that can be added\nto the `SpringApplication` to customize the `BootstrapRegistry` before\nit's used.\n\nCloses gh-23326\n","date":"2020-09-17 15:31:00","modifiedFileCount":"40","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-10-14 05:43:34","codes":[{"authorDate":"2020-10-14 05:43:34","commitOrder":6,"curCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tBinder binder, ResourceLoader resourceLoader, List<String> names) {\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","date":"2020-10-16 02:33:57","endLine":80,"groupId":"13676","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"ConfigDataLocationResolvers","params":"(DeferredLogFactorylogFactory@ConfigurableBootstrapContextbootstrapContext@Binderbinder@ResourceLoaderresourceLoader@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ab/77cb3adbacb7e6793bceb7b86ef598fc7bec81.src","preCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tConfigDataLocationNotFoundAction locationNotFoundAction, Binder binder, ResourceLoader resourceLoader,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.locationNotFoundAction = locationNotFoundAction;\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2020-10-14 05:43:34","commitOrder":6,"curCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.resourceTypes = getResourceTypes(this.loaders);\n\t}\n","date":"2020-10-16 02:33:57","endLine":77,"groupId":"5013","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"ConfigDataLoaders","params":"(DeferredLogFactorylogFactory@ConfigurableBootstrapContextbootstrapContext@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d2/c1c681e20ccbeab450ff61326f847ce8fb78f2.src","preCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tConfigDataLocationNotFoundAction locationNotFoundAction, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tthis.locationNotFoundAction = locationNotFoundAction;\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.locationTypes = getLocationTypes(this.loaders);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"1cf9fc107e5ed29a44935688eaca2bf6fa85108b","commitMessage":"@@@Improve ConfigData processing code\n\nRefactor `ConfigData` processing code to make it less awkward to\nfollow.\n\nPrior to this commit the `ConfigDataLocationResolver` would take a\nString location and return a `ConfigDataLocation` instance. This was\na little confusing since sometimes we would refer to `location` as the\nString value.  and sometimes it would be the typed instance. We also\nhad nowhere sensible to put the `optional:` prefix logic and we needed\nto pass a `boolean` parameter to a number of methods. The recently\nintroduced `Orgin` support also didn't have a good home.\n\nTo solve this.  `ConfigDataLocation` has been renamed to\n`ConfigDataResource`. This frees up `ConfigDataLocation` to be used\nas a richer `location` type that holds the String value.  the `Orgin`\nand provides a home for the `optional:` logic.\n\nThis commit also cleans up a few other areas of the code.  including\nrenaming `ResourceConfigData...` to `StandardConfigData...`. It also\nintroduces a new exception hierarchy for `ConfigDataNotFoundExceptions`.\n\nCloses gh-23711\n","date":"2020-10-16 02:33:57","modifiedFileCount":"41","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-01-26 15:13:38","codes":[{"authorDate":"2021-01-26 15:13:38","commitOrder":7,"curCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tBinder binder, ResourceLoader resourceLoader, List<String> names) {\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(DeferredLogFactory.class, logFactory);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","date":"2021-01-26 15:13:38","endLine":81,"groupId":"13676","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"ConfigDataLocationResolvers","params":"(DeferredLogFactorylogFactory@ConfigurableBootstrapContextbootstrapContext@Binderbinder@ResourceLoaderresourceLoader@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/60/f5ce9269a11165ce1ec7294b958e9a373aaa84.src","preCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tBinder binder, ResourceLoader resourceLoader, List<String> names) {\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2021-01-26 15:13:38","commitOrder":7,"curCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(DeferredLogFactory.class, logFactory);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.resourceTypes = getResourceTypes(this.loaders);\n\t}\n","date":"2021-01-26 15:13:38","endLine":78,"groupId":"1765","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"ConfigDataLoaders","params":"(DeferredLogFactorylogFactory@ConfigurableBootstrapContextbootstrapContext@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/86/ef04d5f23999a72f36c7c91872f44a732afab4.src","preCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.resourceTypes = getResourceTypes(this.loaders);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"439344fdd82771a802517b8f941600c99fbff6af","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-24996\n","date":"2021-01-26 15:13:38","modifiedFileCount":"6","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-06-24 15:04:44","codes":[{"authorDate":"2021-06-24 15:04:44","commitOrder":8,"curCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tBinder binder, ResourceLoader resourceLoader, List<String> names) {\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(DeferredLogFactory.class, logFactory);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(resourceLoader.getClassLoader(), names));\n\t}\n","date":"2021-06-24 15:04:44","endLine":81,"groupId":"102140","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"ConfigDataLocationResolvers","params":"(DeferredLogFactorylogFactory@ConfigurableBootstrapContextbootstrapContext@Binderbinder@ResourceLoaderresourceLoader@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bf/dc0ac5fe3b0a10ea31fc304516d028be1df242.src","preCode":"\tConfigDataLocationResolvers(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tBinder binder, ResourceLoader resourceLoader, List<String> names) {\n\t\tInstantiator<ConfigDataLocationResolver<?>> instantiator = new Instantiator<>(ConfigDataLocationResolver.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(DeferredLogFactory.class, logFactory);\n\t\t\t\t\tavailableParameters.add(Binder.class, binder);\n\t\t\t\t\tavailableParameters.add(ResourceLoader.class, resourceLoader);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.resolvers = reorder(instantiator.instantiate(names));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLocationResolvers.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2021-06-24 15:04:44","commitOrder":8,"curCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tClassLoader classLoader, List<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(DeferredLogFactory.class, logFactory);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.loaders = instantiator.instantiate(classLoader, names);\n\t\tthis.resourceTypes = getResourceTypes(this.loaders);\n\t}\n","date":"2021-06-24 15:04:44","endLine":82,"groupId":"102140","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"ConfigDataLoaders","params":"(DeferredLogFactorylogFactory@ConfigurableBootstrapContextbootstrapContext@ClassLoaderclassLoader@List<String>names)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c9/636ed4ccb860f43d6f1b541d99ae453a55434a.src","preCode":"\tConfigDataLoaders(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,\n\t\t\tList<String> names) {\n\t\tthis.logger = logFactory.getLog(getClass());\n\t\tInstantiator<ConfigDataLoader<?>> instantiator = new Instantiator<>(ConfigDataLoader.class,\n\t\t\t\t(availableParameters) -> {\n\t\t\t\t\tavailableParameters.add(Log.class, logFactory::getLog);\n\t\t\t\t\tavailableParameters.add(DeferredLogFactory.class, logFactory);\n\t\t\t\t\tavailableParameters.add(ConfigurableBootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapContext.class, bootstrapContext);\n\t\t\t\t\tavailableParameters.add(BootstrapRegistry.class, bootstrapContext);\n\t\t\t\t});\n\t\tthis.loaders = instantiator.instantiate(names);\n\t\tthis.resourceTypes = getResourceTypes(this.loaders);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataLoaders.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"6686a49b1f8d576c64230b2f6c332d0f504e5b89","commitMessage":"@@@Merge branch '2.5.x'\n\nCloses gh-27074\n","date":"2021-06-24 15:04:44","modifiedFileCount":"5","status":"M","submitter":"Phillip Webb"}]
