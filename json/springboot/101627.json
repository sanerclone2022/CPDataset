[{"authorTime":"2020-08-23 10:59:22","codes":[{"authorDate":"2020-08-23 10:59:22","commitOrder":1,"curCode":"\tvoid ofUnboundImportCreatesImportedContributor() {\n\t\tTestLocation location = new TestLocation(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofUnboundImport(location,\n\t\t\t\tconfigData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.UNBOUND_IMPORT);\n\t\tassertThat(contributor.getLocation()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).isEmpty();\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2020-08-24 11:27:12","endLine":292,"groupId":"6910","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ofUnboundImportCreatesImportedContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/680de4ae66b06f7b3902e931bd1f5938e375df.src","preCode":"\tvoid ofUnboundImportCreatesImportedContributor() {\n\t\tTestLocation location = new TestLocation(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofUnboundImport(location,\n\t\t\t\tconfigData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.UNBOUND_IMPORT);\n\t\tassertThat(contributor.getLocation()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).isEmpty();\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"B"},{"authorDate":"2020-08-23 10:59:22","commitOrder":1,"curCode":"\tvoid bindCreatesImportedContributor() {\n\t\tTestLocation location = new TestLocation(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(location, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.BOUND_IMPORT);\n\t\tassertThat(contributor.getLocation()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).containsExactly(\"test\");\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2020-08-24 11:27:12","endLine":308,"groupId":"6908","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bindCreatesImportedContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/680de4ae66b06f7b3902e931bd1f5938e375df.src","preCode":"\tvoid bindCreatesImportedContributor() {\n\t\tTestLocation location = new TestLocation(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(location, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.BOUND_IMPORT);\n\t\tassertThat(contributor.getLocation()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).containsExactly(\"test\");\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"B"}],"commitId":"758df17c7d60e387ead9c65b81f250fd7b00a47c","commitMessage":"@@@Allow placeholders to be used in imports\n\nAllow `${..}` property placeholders to be used in `spring.config.import`\nproperties. Prior to this commit.  placeholders were not resolved when\nbinding the `ConfigDataProperty` instance. Furthermore.  binding happened\ntoo early for all placeholders to be resolved correctly. The\n`ConfigDataEnvironmentContributor` class now has two states for imported\ncontributors.  `UNBOUND_IMPORT` has the initial unbound state and is\neventually replaced with a `BOUND_IMPORT`.\n\nCloses gh-23020\n","date":"2020-08-24 11:27:12","modifiedFileCount":"7","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-10-14 05:43:34","codes":[{"authorDate":"2020-10-14 05:43:34","commitOrder":2,"curCode":"\tvoid ofUnboundImportCreatesImportedContributor() {\n\t\tTestResource location = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofUnboundImport(location,\n\t\t\t\tconfigData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.UNBOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).isEmpty();\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2020-10-16 02:33:57","endLine":295,"groupId":"4832","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ofUnboundImportCreatesImportedContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4c/6cdb0df7ad560f250e5d5254e5063855c8cf91.src","preCode":"\tvoid ofUnboundImportCreatesImportedContributor() {\n\t\tTestLocation location = new TestLocation(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofUnboundImport(location,\n\t\t\t\tconfigData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.UNBOUND_IMPORT);\n\t\tassertThat(contributor.getLocation()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).isEmpty();\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"},{"authorDate":"2020-10-14 05:43:34","commitOrder":2,"curCode":"\tvoid bindCreatesImportedContributor() {\n\t\tTestResource location = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(location, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.BOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).containsExactly(TEST_LOCATION);\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2020-10-16 02:33:57","endLine":311,"groupId":"12679","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bindCreatesImportedContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4c/6cdb0df7ad560f250e5d5254e5063855c8cf91.src","preCode":"\tvoid bindCreatesImportedContributor() {\n\t\tTestLocation location = new TestLocation(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(location, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.BOUND_IMPORT);\n\t\tassertThat(contributor.getLocation()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).containsExactly(\"test\");\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"}],"commitId":"1cf9fc107e5ed29a44935688eaca2bf6fa85108b","commitMessage":"@@@Improve ConfigData processing code\n\nRefactor `ConfigData` processing code to make it less awkward to\nfollow.\n\nPrior to this commit the `ConfigDataLocationResolver` would take a\nString location and return a `ConfigDataLocation` instance. This was\na little confusing since sometimes we would refer to `location` as the\nString value.  and sometimes it would be the typed instance. We also\nhad nowhere sensible to put the `optional:` prefix logic and we needed\nto pass a `boolean` parameter to a number of methods. The recently\nintroduced `Orgin` support also didn't have a good home.\n\nTo solve this.  `ConfigDataLocation` has been renamed to\n`ConfigDataResource`. This frees up `ConfigDataLocation` to be used\nas a richer `location` type that holds the String value.  the `Orgin`\nand provides a home for the `optional:` logic.\n\nThis commit also cleans up a few other areas of the code.  including\nrenaming `ResourceConfigData...` to `StandardConfigData...`. It also\nintroduces a new exception hierarchy for `ConfigDataNotFoundExceptions`.\n\nCloses gh-23711\n","date":"2020-10-16 02:33:57","modifiedFileCount":"41","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-12-02 09:35:04","codes":[{"authorDate":"2020-12-02 09:35:04","commitOrder":3,"curCode":"\tvoid ofUnboundImportCreatesImportedContributor() {\n\t\tTestResource resource = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofUnboundImport(TEST_LOCATION,\n\t\t\t\tresource, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.UNBOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(resource);\n\t\tassertThat(contributor.getImports()).isEmpty();\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2020-12-02 13:33:59","endLine":295,"groupId":"773","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"ofUnboundImportCreatesImportedContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4d/c99e18ec0fc79a487eefd5bd3f8f1b04801c50.src","preCode":"\tvoid ofUnboundImportCreatesImportedContributor() {\n\t\tTestResource location = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofUnboundImport(location,\n\t\t\t\tconfigData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.UNBOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).isEmpty();\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"},{"authorDate":"2020-12-02 09:35:04","commitOrder":3,"curCode":"\tvoid bindCreatesImportedContributor() {\n\t\tTestResource resource = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(resource, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.BOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(resource);\n\t\tassertThat(contributor.getImports()).containsExactly(TEST_LOCATION);\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2020-12-02 13:33:59","endLine":311,"groupId":"12679","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bindCreatesImportedContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4d/c99e18ec0fc79a487eefd5bd3f8f1b04801c50.src","preCode":"\tvoid bindCreatesImportedContributor() {\n\t\tTestResource location = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(location, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.BOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(location);\n\t\tassertThat(contributor.getImports()).containsExactly(TEST_LOCATION);\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"}],"commitId":"3dc03ac2752a06e015fc8ae7a6eba483b2cc863e","commitMessage":"@@@Refine non-optional classpath location checking\n\nUpdate `StandardConfigDataLocationResolver` to no longer check if\ndirectories exist for classpath resources. Unfortunately checking for\nthe parent directory of a `ClassPathResource` isn't always possible\nwithout resorting something similar to the\n`PathMatchingResourcePatternResolver` which would add a lot of\ncomplexity to the resolver.\n\nIn order to ensure that non-optional locations are always resolved. \nthe `ConfigDataEnvironment` now checks that all imported locations\nhave been loaded.\n\nCloses gh-24143\n","date":"2020-12-02 13:33:59","modifiedFileCount":"9","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-12-02 09:35:04","codes":[{"authorDate":"2021-01-13 03:49:15","commitOrder":4,"curCode":"\tvoid ofUnboundImportCreatesImportedContributor() {\n\t\tTestResource resource = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofUnboundImport(TEST_LOCATION,\n\t\t\t\tresource, false, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.UNBOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(resource);\n\t\tassertThat(contributor.getImports()).isEmpty();\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2021-01-13 03:49:15","endLine":295,"groupId":"101627","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"ofUnboundImportCreatesImportedContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/42/fe1b5968dbb8c835a5926a39f4f55d7a6086e7.src","preCode":"\tvoid ofUnboundImportCreatesImportedContributor() {\n\t\tTestResource resource = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofUnboundImport(TEST_LOCATION,\n\t\t\t\tresource, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.UNBOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(resource);\n\t\tassertThat(contributor.getImports()).isEmpty();\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"},{"authorDate":"2020-12-02 09:35:04","commitOrder":4,"curCode":"\tvoid bindCreatesImportedContributor() {\n\t\tTestResource resource = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(resource, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.BOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(resource);\n\t\tassertThat(contributor.getImports()).containsExactly(TEST_LOCATION);\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2020-12-02 13:33:59","endLine":311,"groupId":"101627","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"bindCreatesImportedContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4d/c99e18ec0fc79a487eefd5bd3f8f1b04801c50.src","preCode":"\tvoid bindCreatesImportedContributor() {\n\t\tTestResource resource = new TestResource(\"test\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"test\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(resource, configData, 0);\n\t\tassertThat(contributor.getKind()).isEqualTo(Kind.BOUND_IMPORT);\n\t\tassertThat(contributor.getResource()).isSameAs(resource);\n\t\tassertThat(contributor.getImports()).containsExactly(TEST_LOCATION);\n\t\tassertThat(contributor.isActive(this.activationContext)).isTrue();\n\t\tassertThat(contributor.getPropertySource()).isEqualTo(propertySource);\n\t\tassertThat(contributor.getConfigurationPropertySource()).isNotNull();\n\t\tassertThat(contributor.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"N"}],"commitId":"48e00fc7f4283f4a2b0277f1304386621d8bc5f0","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-24793\n","date":"2021-01-13 03:49:15","modifiedFileCount":"14","status":"M","submitter":"Phillip Webb"}]
