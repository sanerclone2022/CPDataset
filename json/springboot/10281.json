[{"authorTime":"2017-11-16 03:25:41","codes":[{"authorDate":"2017-11-16 03:25:41","commitOrder":2,"curCode":"\tpublic void testCycle() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(CycleConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tConfigurationPropertiesDescriptor properties = endpoint\n\t\t\t\t\t.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor cycle = properties.getBeans()\n\t\t\t\t\t.get(\"cycle\");\n\t\t\tassertThat(cycle.getPrefix()).isEqualTo(\"cycle\");\n\t\t\tMap<String, Object> map = cycle.getProperties();\n\t\t\tassertThat(map).isNotNull();\n\t\t\tassertThat(map).containsOnlyKeys(\"error\");\n\t\t\tassertThat(map).containsEntry(\"error\", \"Cannot serialize 'cycle'\");\n\t\t});\n\t}\n","date":"2017-11-16 03:43:32","endLine":132,"groupId":"12542","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/46/98754c1058645a158fd92e3eb8cea29778146f.src","preCode":"\tpublic void testCycle() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(CycleConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tConfigurationPropertiesDescriptor properties = endpoint\n\t\t\t\t\t.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor cycle = properties.getBeans()\n\t\t\t\t\t.get(\"cycle\");\n\t\t\tassertThat(cycle.getPrefix()).isEqualTo(\"cycle\");\n\t\t\tMap<String, Object> map = cycle.getProperties();\n\t\t\tassertThat(map).isNotNull();\n\t\t\tassertThat(map).containsOnlyKeys(\"error\");\n\t\t\tassertThat(map).containsEntry(\"error\", \"Cannot serialize 'cycle'\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpointSerializationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"MB"},{"authorDate":"2017-11-16 03:25:41","commitOrder":2,"curCode":"\tpublic void hikariDataSourceConfigurationPropertiesBeanCanBeSerialized() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(HikariDataSourceConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tConfigurationPropertiesDescriptor properties = endpoint\n\t\t\t\t\t.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor hikariDataSource = properties.getBeans()\n\t\t\t\t\t.get(\"hikariDataSource\");\n\t\t\tMap<String, Object> nestedProperties = hikariDataSource.getProperties();\n\t\t\tassertThat(nestedProperties).doesNotContainKey(\"error\");\n\t\t});\n\t}\n","date":"2017-11-16 03:43:32","endLine":254,"groupId":"12544","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"hikariDataSourceConfigurationPropertiesBeanCanBeSerialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/46/98754c1058645a158fd92e3eb8cea29778146f.src","preCode":"\tpublic void hikariDataSourceConfigurationPropertiesBeanCanBeSerialized() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(HikariDataSourceConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tConfigurationPropertiesDescriptor properties = endpoint\n\t\t\t\t\t.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor hikariDataSource = properties.getBeans()\n\t\t\t\t\t.get(\"hikariDataSource\");\n\t\t\tMap<String, Object> nestedProperties = hikariDataSource.getProperties();\n\t\t\tassertThat(nestedProperties).doesNotContainKey(\"error\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpointSerializationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"B"}],"commitId":"cf485ce1445b0dd664ac1d95208000a810d210f0","commitMessage":"@@@Merge branch '1.5.x'\n","date":"2017-11-16 03:43:32","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-01-15 21:36:20","codes":[{"authorDate":"2018-01-15 21:36:20","commitOrder":3,"curCode":"\tpublic void testCycle() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(CycleConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tApplicationConfigurationProperties applicationProperties = endpoint\n\t\t\t\t\t.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor cycle = applicationProperties\n\t\t\t\t\t.getContexts().get(context.getId()).getBeans().get(\"cycle\");\n\t\t\tassertThat(cycle.getPrefix()).isEqualTo(\"cycle\");\n\t\t\tMap<String, Object> map = cycle.getProperties();\n\t\t\tassertThat(map).isNotNull();\n\t\t\tassertThat(map).containsOnlyKeys(\"error\");\n\t\t\tassertThat(map).containsEntry(\"error\", \"Cannot serialize 'cycle'\");\n\t\t});\n\t}\n","date":"2018-01-16 17:53:52","endLine":135,"groupId":"11580","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e9/752550c9461dddc37247cb9d2a7cb5081ed88a.src","preCode":"\tpublic void testCycle() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(CycleConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tConfigurationPropertiesDescriptor properties = endpoint\n\t\t\t\t\t.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor cycle = properties.getBeans()\n\t\t\t\t\t.get(\"cycle\");\n\t\t\tassertThat(cycle.getPrefix()).isEqualTo(\"cycle\");\n\t\t\tMap<String, Object> map = cycle.getProperties();\n\t\t\tassertThat(map).isNotNull();\n\t\t\tassertThat(map).containsOnlyKeys(\"error\");\n\t\t\tassertThat(map).containsEntry(\"error\", \"Cannot serialize 'cycle'\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpointSerializationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2018-01-15 21:36:20","commitOrder":3,"curCode":"\tpublic void hikariDataSourceConfigurationPropertiesBeanCanBeSerialized() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(HikariDataSourceConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tApplicationConfigurationProperties applicationProperties = endpoint\n\t\t\t\t\t.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor hikariDataSource = applicationProperties\n\t\t\t\t\t.getContexts().get(context.getId()).getBeans()\n\t\t\t\t\t.get(\"hikariDataSource\");\n\t\t\tMap<String, Object> nestedProperties = hikariDataSource.getProperties();\n\t\t\tassertThat(nestedProperties).doesNotContainKey(\"error\");\n\t\t});\n\t}\n","date":"2018-01-16 17:53:52","endLine":261,"groupId":"7998","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"hikariDataSourceConfigurationPropertiesBeanCanBeSerialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e9/752550c9461dddc37247cb9d2a7cb5081ed88a.src","preCode":"\tpublic void hikariDataSourceConfigurationPropertiesBeanCanBeSerialized() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(HikariDataSourceConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tConfigurationPropertiesDescriptor properties = endpoint\n\t\t\t\t\t.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor hikariDataSource = properties.getBeans()\n\t\t\t\t\t.get(\"hikariDataSource\");\n\t\t\tMap<String, Object> nestedProperties = hikariDataSource.getProperties();\n\t\t\tassertThat(nestedProperties).doesNotContainKey(\"error\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpointSerializationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"5b8a2f96750c969c06b0765546312c37b22f0282","commitMessage":"@@@Improve context hierarchy handling in Actuator endpoints\n\nPreviously.  a number of Actuator endpoints ignored a context hierarchy\nor assumed that it would always be linear. This commit reworks the\naffected endpoints so that the no longer assume a linear hierarchy.\n\nA side-effect of a non-linear hierarchy is that there may be multiple\ndifferent beans with the same name (in a linear hierarchy.  a bean\nwith the same name as one in an ancestor context.  replaces that bean).\nThe affected endpoints have also been updated so that.  when bean names\nare used as keys.  those keys are grouped by application context. This\nprevents a bean in one context from accidentially overwriting a bean\nin another context.\n\nCloses gh-11019\n","date":"2018-01-16 17:53:52","modifiedFileCount":"25","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid testCycle() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(CycleConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor cycle = applicationProperties.getContexts().get(context.getId())\n\t\t\t\t\t.getBeans().get(\"cycle\");\n\t\t\tassertThat(cycle.getPrefix()).isEqualTo(\"cycle\");\n\t\t\tMap<String, Object> map = cycle.getProperties();\n\t\t\tassertThat(map).isNotNull();\n\t\t\tassertThat(map).containsOnlyKeys(\"error\");\n\t\t\tassertThat(map).containsEntry(\"error\", \"Cannot serialize 'cycle'\");\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":125,"groupId":"10281","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b6/d365f9c2e494ae154a6bcf16f7fd07a45e02a6.src","preCode":"\tpublic void testCycle() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(CycleConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor cycle = applicationProperties.getContexts().get(context.getId())\n\t\t\t\t\t.getBeans().get(\"cycle\");\n\t\t\tassertThat(cycle.getPrefix()).isEqualTo(\"cycle\");\n\t\t\tMap<String, Object> map = cycle.getProperties();\n\t\t\tassertThat(map).isNotNull();\n\t\t\tassertThat(map).containsOnlyKeys(\"error\");\n\t\t\tassertThat(map).containsEntry(\"error\", \"Cannot serialize 'cycle'\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpointSerializationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid hikariDataSourceConfigurationPropertiesBeanCanBeSerialized() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(HikariDataSourceConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor hikariDataSource = applicationProperties.getContexts()\n\t\t\t\t\t.get(context.getId()).getBeans().get(\"hikariDataSource\");\n\t\t\tMap<String, Object> nestedProperties = hikariDataSource.getProperties();\n\t\t\tassertThat(nestedProperties).doesNotContainKey(\"error\");\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":239,"groupId":"10281","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"hikariDataSourceConfigurationPropertiesBeanCanBeSerialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b6/d365f9c2e494ae154a6bcf16f7fd07a45e02a6.src","preCode":"\tpublic void hikariDataSourceConfigurationPropertiesBeanCanBeSerialized() {\n\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t\t.withUserConfiguration(HikariDataSourceConfig.class);\n\t\tcontextRunner.run((context) -> {\n\t\t\tConfigurationPropertiesReportEndpoint endpoint = context\n\t\t\t\t\t.getBean(ConfigurationPropertiesReportEndpoint.class);\n\t\t\tApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties();\n\t\t\tConfigurationPropertiesBeanDescriptor hikariDataSource = applicationProperties.getContexts()\n\t\t\t\t\t.get(context.getId()).getBeans().get(\"hikariDataSource\");\n\t\t\tMap<String, Object> nestedProperties = hikariDataSource.getProperties();\n\t\t\tassertThat(nestedProperties).doesNotContainKey(\"error\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpointSerializationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
