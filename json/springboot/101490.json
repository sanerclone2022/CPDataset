[{"authorTime":"2018-02-02 08:13:25","codes":[{"authorDate":"2018-02-02 08:13:25","commitOrder":1,"curCode":"\tpublic void tryEnvironmentPreparedEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createEnvironmentPreparedEvent(\"spring.pid.file\",\n\t\t\t\tfile.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationEnvironmentPreparedEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isNotEmpty();\n\t}\n","date":"2018-02-02 08:44:42","endLine":113,"groupId":"2316","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"tryEnvironmentPreparedEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3f/f1760dbfb349ad933ee5d6fa9a2dafbc7894de.src","preCode":"\tpublic void tryEnvironmentPreparedEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createEnvironmentPreparedEvent(\"spring.pid.file\",\n\t\t\t\tfile.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationEnvironmentPreparedEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"},{"authorDate":"2018-02-02 08:13:25","commitOrder":1,"curCode":"\tpublic void tryReadyEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createReadyEvent(\"spring.pid.file\",\n\t\t\t\tfile.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationReadyEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isNotEmpty();\n\t}\n","date":"2018-02-02 08:44:42","endLine":126,"groupId":"2316","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"tryReadyEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3f/f1760dbfb349ad933ee5d6fa9a2dafbc7894de.src","preCode":"\tpublic void tryReadyEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createReadyEvent(\"spring.pid.file\",\n\t\t\t\tfile.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationReadyEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"}],"commitId":"c3ec316890aea840efc9ebb2582b310d5263d0b4","commitMessage":"@@@Move Application* and *FileWriter classes\n\nMove `ApplicationHome`.  `ApplicationPid` and `ApplicationTemp` to the\n`system` package. Since `system` package is now much lower level.  the\nexisting `FileWriter` implementations also needed to move to prevent\npackage tangles.\n\nFixes gh-8614\n","date":"2018-02-02 08:44:42","modifiedFileCount":"12","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-01-28 17:09:08","codes":[{"authorDate":"2019-01-28 17:09:08","commitOrder":2,"curCode":"\tpublic void tryEnvironmentPreparedEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createEnvironmentPreparedEvent(\"spring.pid.file\",\n\t\t\t\tfile.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationEnvironmentPreparedEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}\n","date":"2019-01-28 17:09:08","endLine":107,"groupId":"2316","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"tryEnvironmentPreparedEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b6/e0e8002509f3ef105e29d1af3dfbda00cc27e5.src","preCode":"\tpublic void tryEnvironmentPreparedEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createEnvironmentPreparedEvent(\"spring.pid.file\",\n\t\t\t\tfile.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationEnvironmentPreparedEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2019-01-28 17:09:08","commitOrder":2,"curCode":"\tpublic void tryReadyEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createReadyEvent(\"spring.pid.file\",\n\t\t\t\tfile.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationReadyEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}\n","date":"2019-01-28 17:09:08","endLine":120,"groupId":"2316","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"tryReadyEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b6/e0e8002509f3ef105e29d1af3dfbda00cc27e5.src","preCode":"\tpublic void tryReadyEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createReadyEvent(\"spring.pid.file\",\n\t\t\t\tfile.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationReadyEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(FileCopyUtils.copyToString(new FileReader(file))).isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"e2532e1ef5a9d523869d70cdb131b1e25ee0271d","commitMessage":"@@@Merge pull request #15793 from dreis2211\n\n* pr/15793:\n  Use Assertions.contentOf() where possible\n","date":"2019-01-28 17:09:08","modifiedFileCount":"8","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid tryEnvironmentPreparedEvent() throws Exception {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tfile.createNewFile();\n\t\tSpringApplicationEvent event = createEnvironmentPreparedEvent(\"spring.pid.file\", file.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationEnvironmentPreparedEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}\n","date":"2019-06-07 19:25:54","endLine":104,"groupId":"101490","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"tryEnvironmentPreparedEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/57/64afbe319322ee9eaef3aae5c04e0a403bd74a.src","preCode":"\tpublic void tryEnvironmentPreparedEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createEnvironmentPreparedEvent(\"spring.pid.file\", file.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationEnvironmentPreparedEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid tryReadyEvent() throws Exception {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tfile.createNewFile();\n\t\tSpringApplicationEvent event = createReadyEvent(\"spring.pid.file\", file.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationReadyEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}\n","date":"2019-06-07 19:25:54","endLine":117,"groupId":"101490","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"tryReadyEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/57/64afbe319322ee9eaef3aae5c04e0a403bd74a.src","preCode":"\tpublic void tryReadyEvent() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tSpringApplicationEvent event = createReadyEvent(\"spring.pid.file\", file.getAbsolutePath());\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter();\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isEmpty();\n\t\tlistener.setTriggerEventType(ApplicationReadyEvent.class);\n\t\tlistener.onApplicationEvent(event);\n\t\tassertThat(contentOf(file)).isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
