[{"authorTime":"2019-12-05 20:54:21","codes":[{"authorDate":"2019-09-25 20:57:33","commitOrder":3,"curCode":"\tprotected void testClientAuthFailure(Ssl sslConfiguration, ReactorClientHttpConnector clientConnector) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setSsl(sslConfiguration);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(clientConnector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tStepVerifier.create(result).expectError(SSLException.class).verify(Duration.ofSeconds(10));\n\t}\n","date":"2019-09-25 20:57:33","endLine":215,"groupId":"11024","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClientAuthFailure","params":"(SslsslConfiguration@ReactorClientHttpConnectorclientConnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/9a4beef872ac33577a12f400e9ea075125c2a1.src","preCode":"\tprotected void testClientAuthFailure(Ssl sslConfiguration, ReactorClientHttpConnector clientConnector) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setSsl(sslConfiguration);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(clientConnector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tStepVerifier.create(result).expectError(SSLException.class).verify(Duration.ofSeconds(10));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"NB"},{"authorDate":"2019-12-05 20:54:21","commitOrder":3,"curCode":"\tprotected Mono<String> testSslWithAlias(String alias) {\n\t\tString keyStore = \"classpath:test.jks\";\n\t\tString keyPassword = \"password\";\n\t\tNettyReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyAlias(alias);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\treturn client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t}\n","date":"2019-12-05 20:54:21","endLine":129,"groupId":"8663","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSslWithAlias","params":"(Stringalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/05/d276fc6c8feecfe5f4c0291401e607728c2874.src","preCode":"\tprotected Mono<String> testSslWithAlias(String alias) {\n\t\tString keyStore = \"classpath:test.jks\";\n\t\tString keyPassword = \"password\";\n\t\tNettyReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyAlias(alias);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\treturn client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"}],"commitId":"4957994defc20f4fe6ae0a2aa071e0fafe420e08","commitMessage":"@@@Merge branch '2.2.x'\n\nCloses gh-19305\n","date":"2019-12-05 20:54:21","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-02-10 22:37:33","codes":[{"authorDate":"2019-09-25 20:57:33","commitOrder":4,"curCode":"\tprotected void testClientAuthFailure(Ssl sslConfiguration, ReactorClientHttpConnector clientConnector) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setSsl(sslConfiguration);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(clientConnector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tStepVerifier.create(result).expectError(SSLException.class).verify(Duration.ofSeconds(10));\n\t}\n","date":"2019-09-25 20:57:33","endLine":215,"groupId":"11024","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClientAuthFailure","params":"(SslsslConfiguration@ReactorClientHttpConnectorclientConnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/9a4beef872ac33577a12f400e9ea075125c2a1.src","preCode":"\tprotected void testClientAuthFailure(Ssl sslConfiguration, ReactorClientHttpConnector clientConnector) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setSsl(sslConfiguration);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(clientConnector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tStepVerifier.create(result).expectError(SSLException.class).verify(Duration.ofSeconds(10));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"},{"authorDate":"2020-02-10 22:37:33","commitOrder":4,"curCode":"\tprotected Mono<String> testSslWithAlias(String alias) {\n\t\tString keyStore = \"classpath:test.jks\";\n\t\tString keyPassword = \"password\";\n\t\tNettyReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyAlias(alias);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\treturn client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromValue(\"Hello World\"))\n\t\t\t\t.exchange().flatMap((response) -> response.bodyToMono(String.class));\n\t}\n","date":"2020-02-10 22:37:33","endLine":128,"groupId":"8663","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSslWithAlias","params":"(Stringalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/56/2a08ece22591a1ca5872bd8f194e6151d8bf46.src","preCode":"\tprotected Mono<String> testSslWithAlias(String alias) {\n\t\tString keyStore = \"classpath:test.jks\";\n\t\tString keyPassword = \"password\";\n\t\tNettyReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyAlias(alias);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\treturn client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"b18db5eea707e33085a0e30f96cde3d3b3744c86","commitMessage":"@@@Merge pull request #20108 from dreis2211\n\n* pr/20108:\n  Fix some deprecation warnings\n\nCloses gh-20108\n","date":"2020-02-10 22:37:33","modifiedFileCount":"9","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2020-02-10 22:37:33","codes":[{"authorDate":"2020-09-14 22:08:56","commitOrder":5,"curCode":"\tprotected void testClientAuthFailure(Ssl sslConfiguration, ReactorClientHttpConnector clientConnector) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setSsl(sslConfiguration);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(clientConnector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tStepVerifier.create(result).expectError(WebClientRequestException.class).verify(Duration.ofSeconds(10));\n\t}\n","date":"2020-09-14 22:08:56","endLine":273,"groupId":"11024","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testClientAuthFailure","params":"(SslsslConfiguration@ReactorClientHttpConnectorclientConnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d3/d90c9fc16000b83f25072f082a20b76d1be2eb.src","preCode":"\tprotected void testClientAuthFailure(Ssl sslConfiguration, ReactorClientHttpConnector clientConnector) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setSsl(sslConfiguration);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(clientConnector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tStepVerifier.create(result).expectError(SSLException.class).verify(Duration.ofSeconds(10));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2020-02-10 22:37:33","commitOrder":5,"curCode":"\tprotected Mono<String> testSslWithAlias(String alias) {\n\t\tString keyStore = \"classpath:test.jks\";\n\t\tString keyPassword = \"password\";\n\t\tNettyReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyAlias(alias);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\treturn client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromValue(\"Hello World\"))\n\t\t\t\t.exchange().flatMap((response) -> response.bodyToMono(String.class));\n\t}\n","date":"2020-02-10 22:37:33","endLine":128,"groupId":"8663","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSslWithAlias","params":"(Stringalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/56/2a08ece22591a1ca5872bd8f194e6151d8bf46.src","preCode":"\tprotected Mono<String> testSslWithAlias(String alias) {\n\t\tString keyStore = \"classpath:test.jks\";\n\t\tString keyPassword = \"password\";\n\t\tNettyReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyAlias(alias);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\treturn client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromValue(\"Hello World\"))\n\t\t\t\t.exchange().flatMap((response) -> response.bodyToMono(String.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"7562c4eb6f678bf221299c08f74684f304062705","commitMessage":"@@@Adapt to WebClient's new exception wrapping\n\nSee spring-projects/spring-framework#23842\nSee gh-23170\n","date":"2020-09-14 22:08:56","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-09-30 19:21:16","codes":[{"authorDate":"2020-09-30 19:21:16","commitOrder":6,"curCode":"\tprotected void testClientAuthFailure(Ssl sslConfiguration, ReactorClientHttpConnector clientConnector) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setSsl(sslConfiguration);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(clientConnector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tStepVerifier.create(result).expectError(WebClientRequestException.class).verify(Duration.ofSeconds(10));\n\t}\n","date":"2020-09-30 19:46:57","endLine":270,"groupId":"101908","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testClientAuthFailure","params":"(SslsslConfiguration@ReactorClientHttpConnectorclientConnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/7ed7191ac2d8b055dd714c69dbf65005365e00.src","preCode":"\tprotected void testClientAuthFailure(Ssl sslConfiguration, ReactorClientHttpConnector clientConnector) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setSsl(sslConfiguration);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(clientConnector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tStepVerifier.create(result).expectError(WebClientRequestException.class).verify(Duration.ofSeconds(10));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"},{"authorDate":"2020-09-30 19:21:16","commitOrder":6,"curCode":"\tprotected Mono<String> testSslWithAlias(String alias) {\n\t\tString keyStore = \"classpath:test.jks\";\n\t\tString keyPassword = \"password\";\n\t\tNettyReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyAlias(alias);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\treturn client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromValue(\"Hello World\"))\n\t\t\t\t.retrieve().bodyToMono(String.class);\n\t}\n","date":"2020-09-30 19:46:57","endLine":144,"groupId":"101908","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSslWithAlias","params":"(Stringalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c7/cb4b8fc233fa72ed5cf8ed0e9df9dd99f134d2.src","preCode":"\tprotected Mono<String> testSslWithAlias(String alias) {\n\t\tString keyStore = \"classpath:test.jks\";\n\t\tString keyPassword = \"password\";\n\t\tNettyReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyAlias(alias);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\treturn client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromValue(\"Hello World\"))\n\t\t\t\t.exchange().flatMap((response) -> response.bodyToMono(String.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"366fec33d06b6ab4ee4f1bc9513c07a227d207de","commitMessage":"@@@Adapt to API change in Spring Framework 5.3.0 snapshots\n\nSee gh-23534\n","date":"2020-09-30 19:46:57","modifiedFileCount":"9","status":"M","submitter":"Stephane Nicoll"}]
