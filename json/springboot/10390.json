[{"authorTime":"2018-02-12 18:44:28","codes":[{"authorDate":"2018-02-12 18:44:28","commitOrder":2,"curCode":"\tpublic void invokeShouldInvokeMethod() {\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target,\n\t\t\t\tthis.operationMethod, this.parameterValueMapper);\n\t\tObject result = invoker.invoke(\n\t\t\t\tnew InvocationContext(null, Collections.singletonMap(\"name\", \"boot\")));\n\t\tassertThat(result).isEqualTo(\"toob\");\n\t}\n","date":"2018-02-12 18:46:19","endLine":90,"groupId":"4502","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeShouldInvokeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ba/425dfeb31e272f800a7600479c01d836d8772e.src","preCode":"\tpublic void invokeShouldInvokeMethod() {\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target,\n\t\t\t\tthis.operationMethod, this.parameterValueMapper);\n\t\tObject result = invoker.invoke(\n\t\t\t\tnew InvocationContext(null, Collections.singletonMap(\"name\", \"boot\")));\n\t\tassertThat(result).isEqualTo(\"toob\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2018-02-12 18:44:28","commitOrder":2,"curCode":"\tpublic void invokeWhenMissingNullableArgumentShouldInvoke() {\n\t\tOperationMethod operationMethod = new OperationMethod(ReflectionUtils.findMethod(\n\t\t\t\tExample.class, \"reverseNullable\", String.class), OperationType.READ);\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target,\n\t\t\t\toperationMethod, this.parameterValueMapper);\n\t\tObject result = invoker.invoke(\n\t\t\t\tnew InvocationContext(null, Collections.singletonMap(\"name\", null)));\n\t\tassertThat(result).isEqualTo(\"llun\");\n\t}\n","date":"2018-02-12 18:46:19","endLine":110,"groupId":"4382","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeWhenMissingNullableArgumentShouldInvoke","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ba/425dfeb31e272f800a7600479c01d836d8772e.src","preCode":"\tpublic void invokeWhenMissingNullableArgumentShouldInvoke() {\n\t\tOperationMethod operationMethod = new OperationMethod(ReflectionUtils.findMethod(\n\t\t\t\tExample.class, \"reverseNullable\", String.class), OperationType.READ);\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target,\n\t\t\t\toperationMethod, this.parameterValueMapper);\n\t\tObject result = invoker.invoke(\n\t\t\t\tnew InvocationContext(null, Collections.singletonMap(\"name\", null)));\n\t\tassertThat(result).isEqualTo(\"llun\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"MB"}],"commitId":"bc814d203937e59ba2c48318c12289fb272db4ab","commitMessage":"@@@Prevent authenticated principal from clashing with argument of same name\n\nCloses gh-11988\n","date":"2018-02-12 18:46:19","modifiedFileCount":"18","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-02-20 15:34:26","codes":[{"authorDate":"2018-02-20 15:34:26","commitOrder":3,"curCode":"\tpublic void invokeShouldInvokeMethod() {\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target,\n\t\t\t\tthis.operationMethod, this.parameterValueMapper);\n\t\tObject result = invoker.invoke(new InvocationContext(mock(SecurityContext.class),\n\t\t\t\tCollections.singletonMap(\"name\", \"boot\")));\n\t\tassertThat(result).isEqualTo(\"toob\");\n\t}\n","date":"2018-02-20 20:12:05","endLine":92,"groupId":"4382","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeShouldInvokeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9b/b76d960af5035d4c15684c4e8a800fce35ee52.src","preCode":"\tpublic void invokeShouldInvokeMethod() {\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target,\n\t\t\t\tthis.operationMethod, this.parameterValueMapper);\n\t\tObject result = invoker.invoke(\n\t\t\t\tnew InvocationContext(null, Collections.singletonMap(\"name\", \"boot\")));\n\t\tassertThat(result).isEqualTo(\"toob\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2018-02-20 15:34:26","commitOrder":3,"curCode":"\tpublic void invokeWhenMissingNullableArgumentShouldInvoke() {\n\t\tOperationMethod operationMethod = new OperationMethod(ReflectionUtils.findMethod(\n\t\t\t\tExample.class, \"reverseNullable\", String.class), OperationType.READ);\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target,\n\t\t\t\toperationMethod, this.parameterValueMapper);\n\t\tObject result = invoker.invoke(new InvocationContext(mock(SecurityContext.class),\n\t\t\t\tCollections.singletonMap(\"name\", null)));\n\t\tassertThat(result).isEqualTo(\"llun\");\n\t}\n","date":"2018-02-20 20:12:05","endLine":112,"groupId":"4382","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeWhenMissingNullableArgumentShouldInvoke","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9b/b76d960af5035d4c15684c4e8a800fce35ee52.src","preCode":"\tpublic void invokeWhenMissingNullableArgumentShouldInvoke() {\n\t\tOperationMethod operationMethod = new OperationMethod(ReflectionUtils.findMethod(\n\t\t\t\tExample.class, \"reverseNullable\", String.class), OperationType.READ);\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target,\n\t\t\t\toperationMethod, this.parameterValueMapper);\n\t\tObject result = invoker.invoke(\n\t\t\t\tnew InvocationContext(null, Collections.singletonMap(\"name\", null)));\n\t\tassertThat(result).isEqualTo(\"llun\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"3e4baf744ea24ffa12eafa91db3cb5d69ebbb41a","commitMessage":"@@@Use role-based security to show details in the health endpoint\n\nCloses gh-11869\n","date":"2018-02-20 20:12:05","modifiedFileCount":"23","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid invokeShouldInvokeMethod() {\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, this.operationMethod,\n\t\t\t\tthis.parameterValueMapper);\n\t\tObject result = invoker\n\t\t\t\t.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap(\"name\", \"boot\")));\n\t\tassertThat(result).isEqualTo(\"toob\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":86,"groupId":"4382","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeShouldInvokeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/dc/f1a9a3bb3c0257c0625ba8af873666e757a51e.src","preCode":"\tpublic void invokeShouldInvokeMethod() {\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, this.operationMethod,\n\t\t\t\tthis.parameterValueMapper);\n\t\tObject result = invoker\n\t\t\t\t.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap(\"name\", \"boot\")));\n\t\tassertThat(result).isEqualTo(\"toob\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid invokeWhenMissingNullableArgumentShouldInvoke() {\n\t\tOperationMethod operationMethod = new OperationMethod(\n\t\t\t\tReflectionUtils.findMethod(Example.class, \"reverseNullable\", String.class), OperationType.READ);\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, operationMethod,\n\t\t\t\tthis.parameterValueMapper);\n\t\tObject result = invoker\n\t\t\t\t.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap(\"name\", null)));\n\t\tassertThat(result).isEqualTo(\"llun\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":105,"groupId":"4382","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeWhenMissingNullableArgumentShouldInvoke","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/dc/f1a9a3bb3c0257c0625ba8af873666e757a51e.src","preCode":"\tpublic void invokeWhenMissingNullableArgumentShouldInvoke() {\n\t\tOperationMethod operationMethod = new OperationMethod(\n\t\t\t\tReflectionUtils.findMethod(Example.class, \"reverseNullable\", String.class), OperationType.READ);\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, operationMethod,\n\t\t\t\tthis.parameterValueMapper);\n\t\tObject result = invoker\n\t\t\t\t.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap(\"name\", null)));\n\t\tassertThat(result).isEqualTo(\"llun\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-09-26 13:53:55","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid invokeShouldInvokeMethod() {\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, this.operationMethod,\n\t\t\t\tthis.parameterValueMapper);\n\t\tObject result = invoker\n\t\t\t\t.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap(\"name\", \"boot\")));\n\t\tassertThat(result).isEqualTo(\"toob\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":86,"groupId":"10390","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeShouldInvokeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/dc/f1a9a3bb3c0257c0625ba8af873666e757a51e.src","preCode":"\tvoid invokeShouldInvokeMethod() {\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, this.operationMethod,\n\t\t\t\tthis.parameterValueMapper);\n\t\tObject result = invoker\n\t\t\t\t.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap(\"name\", \"boot\")));\n\t\tassertThat(result).isEqualTo(\"toob\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"},{"authorDate":"2019-09-26 13:53:55","commitOrder":5,"curCode":"\tvoid invokeWhenMissingNullableArgumentShouldInvoke() {\n\t\tOperationMethod operationMethod = new OperationMethod(ReflectionUtils.findMethod(Example.class,\n\t\t\t\t\"reverseNullable\", ApiVersion.class, SecurityContext.class, String.class), OperationType.READ);\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, operationMethod,\n\t\t\t\tthis.parameterValueMapper);\n\t\tObject result = invoker\n\t\t\t\t.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap(\"name\", null)));\n\t\tassertThat(result).isEqualTo(\"llun\");\n\t}\n","date":"2019-09-27 07:16:15","endLine":106,"groupId":"10390","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeWhenMissingNullableArgumentShouldInvoke","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/eb5bae88fa684c5c6163cb8f5a75ff75a9de32.src","preCode":"\tvoid invokeWhenMissingNullableArgumentShouldInvoke() {\n\t\tOperationMethod operationMethod = new OperationMethod(\n\t\t\t\tReflectionUtils.findMethod(Example.class, \"reverseNullable\", String.class), OperationType.READ);\n\t\tReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, operationMethod,\n\t\t\t\tthis.parameterValueMapper);\n\t\tObject result = invoker\n\t\t\t\t.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap(\"name\", null)));\n\t\tassertThat(result).isEqualTo(\"llun\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"deb9d67cef7fe55bd08ab292659b611419031403","commitMessage":"@@@Add Actuator ApiVersion support and bump version\n\nAdd `ApiVersion` enum that can be injected into actuator endpoints if\nthey need to support more than one API revision.\n\nSpring MVC.  WebFlux and Jersey integrations now detect the API version\nbased on the HTTP accept header. If the request explicitly accepts a\n`application/vnd.spring-boot.actuator.v` media type then the version\nis set from the header. If no explicit Spring Boot media type is\naccepted then the latest `ApiVersion` is assumed.\n\nA new v3 API revision has also been introduced to allow upcoming health\nendpoint format changes. By default all endpoints now consume and\ncan produce v3.  v2 and `application/json` media types.\n\nSee gh-17929\n","date":"2019-09-27 07:16:15","modifiedFileCount":"13","status":"M","submitter":"Phillip Webb"}]
