[{"authorTime":"2018-12-03 22:27:52","codes":[{"authorDate":"2018-12-03 22:27:52","commitOrder":1,"curCode":"\tpublic void healthIndicatorWithDefaultSettings() {\n\t\tthis.indicator.setDataSource(this.dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsOnly(\n\t\t\t\tentry(\"database\", \"HSQL Database Engine\"), entry(\"result\", 1L),\n\t\t\t\tentry(\"validationQuery\", DatabaseDriver.HSQLDB.getValidationQuery()));\n\t}\n","date":"2018-12-03 22:27:52","endLine":76,"groupId":"13516","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"healthIndicatorWithDefaultSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/80/aeacdb207ed1ce8d7f0779e10b83a1575cfc8d.src","preCode":"\tpublic void healthIndicatorWithDefaultSettings() {\n\t\tthis.indicator.setDataSource(this.dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsOnly(\n\t\t\t\tentry(\"database\", \"HSQL Database Engine\"), entry(\"result\", 1L),\n\t\t\t\tentry(\"validationQuery\", DatabaseDriver.HSQLDB.getValidationQuery()));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2018-12-03 22:27:52","commitOrder":1,"curCode":"\tpublic void healthIndicatorCloseConnection() throws Exception {\n\t\tDataSource dataSource = mock(DataSource.class);\n\t\tConnection connection = mock(Connection.class);\n\t\tgiven(connection.getMetaData())\n\t\t\t\t.willReturn(this.dataSource.getConnection().getMetaData());\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tthis.indicator.setDataSource(dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getDetails().get(\"database\")).isNotNull();\n\t\tverify(connection, times(2)).close();\n\t}\n","date":"2018-12-03 22:27:52","endLine":117,"groupId":"3904","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"healthIndicatorCloseConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/80/aeacdb207ed1ce8d7f0779e10b83a1575cfc8d.src","preCode":"\tpublic void healthIndicatorCloseConnection() throws Exception {\n\t\tDataSource dataSource = mock(DataSource.class);\n\t\tConnection connection = mock(Connection.class);\n\t\tgiven(connection.getMetaData())\n\t\t\t\t.willReturn(this.dataSource.getConnection().getMetaData());\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tthis.indicator.setDataSource(dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getDetails().get(\"database\")).isNotNull();\n\t\tverify(connection, times(2)).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"9483c91d58333e03c3d5ff5e9c8468c9256703b8","commitMessage":"@@@Make sure to include validation query in case of failure\n\nSee gh-15055\n","date":"2018-12-03 22:27:52","modifiedFileCount":"2","status":"B","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid healthIndicatorWithDefaultSettings() {\n\t\tthis.indicator.setDataSource(this.dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsOnly(entry(\"database\", \"HSQL Database Engine\"), entry(\"result\", 1L),\n\t\t\t\tentry(\"validationQuery\", DatabaseDriver.HSQLDB.getValidationQuery()));\n\t}\n","date":"2019-06-07 19:25:54","endLine":74,"groupId":"13516","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"healthIndicatorWithDefaultSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2a/d4facce8717e81573e09eb928f2dc929869a04.src","preCode":"\tpublic void healthIndicatorWithDefaultSettings() {\n\t\tthis.indicator.setDataSource(this.dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsOnly(entry(\"database\", \"HSQL Database Engine\"), entry(\"result\", 1L),\n\t\t\t\tentry(\"validationQuery\", DatabaseDriver.HSQLDB.getValidationQuery()));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid healthIndicatorCloseConnection() throws Exception {\n\t\tDataSource dataSource = mock(DataSource.class);\n\t\tConnection connection = mock(Connection.class);\n\t\tgiven(connection.getMetaData()).willReturn(this.dataSource.getConnection().getMetaData());\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tthis.indicator.setDataSource(dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getDetails().get(\"database\")).isNotNull();\n\t\tverify(connection, times(2)).close();\n\t}\n","date":"2019-06-07 19:25:54","endLine":110,"groupId":"3904","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"healthIndicatorCloseConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2a/d4facce8717e81573e09eb928f2dc929869a04.src","preCode":"\tpublic void healthIndicatorCloseConnection() throws Exception {\n\t\tDataSource dataSource = mock(DataSource.class);\n\t\tConnection connection = mock(Connection.class);\n\t\tgiven(connection.getMetaData()).willReturn(this.dataSource.getConnection().getMetaData());\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tthis.indicator.setDataSource(dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getDetails().get(\"database\")).isNotNull();\n\t\tverify(connection, times(2)).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2020-02-18 21:59:06","commitOrder":3,"curCode":"\tvoid healthIndicatorWithDefaultSettings() {\n\t\tthis.indicator.setDataSource(this.dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsOnly(entry(\"database\", \"HSQL Database Engine\"),\n\t\t\t\tentry(\"validationQuery\", \"isValid()\"));\n\t}\n","date":"2020-02-18 21:59:06","endLine":74,"groupId":"10274","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"healthIndicatorWithDefaultSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/7352e08f299668a4e1bad95f701e93b215c9a1.src","preCode":"\tvoid healthIndicatorWithDefaultSettings() {\n\t\tthis.indicator.setDataSource(this.dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsOnly(entry(\"database\", \"HSQL Database Engine\"), entry(\"result\", 1L),\n\t\t\t\tentry(\"validationQuery\", DatabaseDriver.HSQLDB.getValidationQuery()));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid healthIndicatorCloseConnection() throws Exception {\n\t\tDataSource dataSource = mock(DataSource.class);\n\t\tConnection connection = mock(Connection.class);\n\t\tgiven(connection.getMetaData()).willReturn(this.dataSource.getConnection().getMetaData());\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tthis.indicator.setDataSource(dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getDetails().get(\"database\")).isNotNull();\n\t\tverify(connection, times(2)).close();\n\t}\n","date":"2019-06-07 19:25:54","endLine":110,"groupId":"10274","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"healthIndicatorCloseConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2a/d4facce8717e81573e09eb928f2dc929869a04.src","preCode":"\tvoid healthIndicatorCloseConnection() throws Exception {\n\t\tDataSource dataSource = mock(DataSource.class);\n\t\tConnection connection = mock(Connection.class);\n\t\tgiven(connection.getMetaData()).willReturn(this.dataSource.getConnection().getMetaData());\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tthis.indicator.setDataSource(dataSource);\n\t\tHealth health = this.indicator.health();\n\t\tassertThat(health.getDetails().get(\"database\")).isNotNull();\n\t\tverify(connection, times(2)).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"}],"commitId":"16111f126e707fb5064bab6150df7a77f54850ee","commitMessage":"@@@Use query-less datasource validation by default\n\nThis commit changes DataSourceHealthIndicator to validate the connection\nrather than issuing a query to the database. If a custom validation\nquery is specified.  it uses that as before.\n\nCloses gh-17582\n","date":"2020-02-18 21:59:06","modifiedFileCount":"2","status":"M","submitter":"Stephane Nicoll"}]
