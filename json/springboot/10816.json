[{"authorTime":"2021-05-20 06:01:45","codes":[{"authorDate":"2021-02-10 06:15:08","commitOrder":3,"curCode":"\tvoid linksPageIsNotAvailableWhenDisabled() {\n\t\tgetContextRunner(new Class<?>[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class })\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.discovery.enabled:false\").run((context) -> {\n\t\t\t\t\tint port = context\n\t\t\t\t\t\t\t.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t\t\t.getWebServer().getPort();\n\t\t\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isNotFound();\n\t\t\t\t});\n\t}\n","date":"2021-02-10 06:15:08","endLine":63,"groupId":"15335","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"linksPageIsNotAvailableWhenDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b2/0f9310875d4092b0a8cc51f55b9b9ee2b95170.src","preCode":"\tvoid linksPageIsNotAvailableWhenDisabled() {\n\t\tgetContextRunner(new Class<?>[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class })\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.discovery.enabled:false\").run((context) -> {\n\t\t\t\t\tint port = context\n\t\t\t\t\t\t\t.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t\t\t.getWebServer().getPort();\n\t\t\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isNotFound();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JerseyEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"NB"},{"authorDate":"2021-05-20 06:01:45","commitOrder":3,"curCode":"\tvoid actuatorEndpointsWhenSecurityAvailable() {\n\t\tWebApplicationContextRunner contextRunner = getContextRunner(\n\t\t\t\tnew Class[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class },\n\t\t\t\tgetAutoconfigurations(SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class));\n\t\tcontextRunner.run((context) -> {\n\t\t\tint port = context.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t.getWebServer().getPort();\n\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isUnauthorized();\n\t\t});\n\n\t}\n","date":"2021-05-20 06:01:45","endLine":88,"groupId":"15335","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"actuatorEndpointsWhenSecurityAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f4/3cba996905152d529e417a9d581a9665798e78.src","preCode":"\tvoid actuatorEndpointsWhenSecurityAvailable() {\n\t\tWebApplicationContextRunner contextRunner = getContextRunner(\n\t\t\t\tnew Class[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class },\n\t\t\t\tgetAutoconfigurations(SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class));\n\t\tcontextRunner.run((context) -> {\n\t\t\tint port = context.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t.getWebServer().getPort();\n\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isUnauthorized();\n\t\t});\n\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JerseyEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"3ef9b7e634382f797d9b4e8a09e0524fcd183991","commitMessage":"@@@Merge branch '2.4.x' into main\n\nCloses gh-26612\n","date":"2021-05-20 06:01:45","modifiedFileCount":"3","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2021-05-20 06:27:48","codes":[{"authorDate":"2021-02-10 06:15:08","commitOrder":4,"curCode":"\tvoid linksPageIsNotAvailableWhenDisabled() {\n\t\tgetContextRunner(new Class<?>[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class })\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.discovery.enabled:false\").run((context) -> {\n\t\t\t\t\tint port = context\n\t\t\t\t\t\t\t.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t\t\t.getWebServer().getPort();\n\t\t\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isNotFound();\n\t\t\t\t});\n\t}\n","date":"2021-02-10 06:15:08","endLine":63,"groupId":"15335","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"linksPageIsNotAvailableWhenDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b2/0f9310875d4092b0a8cc51f55b9b9ee2b95170.src","preCode":"\tvoid linksPageIsNotAvailableWhenDisabled() {\n\t\tgetContextRunner(new Class<?>[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class })\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.discovery.enabled:false\").run((context) -> {\n\t\t\t\t\tint port = context\n\t\t\t\t\t\t\t.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t\t\t.getWebServer().getPort();\n\t\t\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isNotFound();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JerseyEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2021-05-20 06:27:48","commitOrder":4,"curCode":"\tvoid actuatorEndpointsWhenSecurityAvailable() {\n\t\tWebApplicationContextRunner contextRunner = getContextRunner(\n\t\t\t\tnew Class<?>[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class },\n\t\t\t\tgetAutoconfigurations(SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class));\n\t\tcontextRunner.run((context) -> {\n\t\t\tint port = context.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t.getWebServer().getPort();\n\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isUnauthorized();\n\t\t});\n\n\t}\n","date":"2021-05-20 06:27:48","endLine":88,"groupId":"15335","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"actuatorEndpointsWhenSecurityAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9f/70c92c38f506f682b61adde443d25cd8b255de.src","preCode":"\tvoid actuatorEndpointsWhenSecurityAvailable() {\n\t\tWebApplicationContextRunner contextRunner = getContextRunner(\n\t\t\t\tnew Class[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class },\n\t\t\t\tgetAutoconfigurations(SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class));\n\t\tcontextRunner.run((context) -> {\n\t\t\tint port = context.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t.getWebServer().getPort();\n\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isUnauthorized();\n\t\t});\n\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JerseyEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"99ed291184bbec1bd9b027ab4acc8c40257de231","commitMessage":"@@@Merge branch '2.4.x' into main\n","date":"2021-05-20 06:27:48","modifiedFileCount":"1","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2021-07-23 20:09:37","codes":[{"authorDate":"2021-07-23 20:09:37","commitOrder":5,"curCode":"\tvoid linksPageIsNotAvailableWhenDisabled() {\n\t\tgetContextRunner(new Class<?>[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class })\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.discovery.enabled:false\").run((context) -> {\n\t\t\t\t\tint port = context\n\t\t\t\t\t\t\t.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t\t\t.getWebServer().getPort();\n\t\t\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port)\n\t\t\t\t\t\t\t.responseTimeout(Duration.ofMinutes(5)).build();\n\t\t\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isNotFound();\n\t\t\t\t});\n\t}\n","date":"2021-07-23 20:09:37","endLine":71,"groupId":"10816","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"linksPageIsNotAvailableWhenDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c6/0196cebfde659e10faf5bc8045e1071992b129.src","preCode":"\tvoid linksPageIsNotAvailableWhenDisabled() {\n\t\tgetContextRunner(new Class<?>[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class })\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.discovery.enabled:false\").run((context) -> {\n\t\t\t\t\tint port = context\n\t\t\t\t\t\t\t.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t\t\t.getWebServer().getPort();\n\t\t\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isNotFound();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JerseyEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-07-23 20:09:37","commitOrder":5,"curCode":"\tvoid actuatorEndpointsWhenSecurityAvailable() {\n\t\tWebApplicationContextRunner contextRunner = getContextRunner(\n\t\t\t\tnew Class<?>[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class },\n\t\t\t\tgetAutoconfigurations(SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class));\n\t\tcontextRunner.run((context) -> {\n\t\t\tint port = context.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t.getWebServer().getPort();\n\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port)\n\t\t\t\t\t.responseTimeout(Duration.ofMinutes(5)).build();\n\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isUnauthorized();\n\t\t});\n\n\t}\n","date":"2021-07-23 20:09:37","endLine":91,"groupId":"10816","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"actuatorEndpointsWhenSecurityAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c6/0196cebfde659e10faf5bc8045e1071992b129.src","preCode":"\tvoid actuatorEndpointsWhenSecurityAvailable() {\n\t\tWebApplicationContextRunner contextRunner = getContextRunner(\n\t\t\t\tnew Class<?>[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class },\n\t\t\t\tgetAutoconfigurations(SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class));\n\t\tcontextRunner.run((context) -> {\n\t\t\tint port = context.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class)\n\t\t\t\t\t.getWebServer().getPort();\n\t\t\tWebTestClient client = WebTestClient.bindToServer().baseUrl(\"http://localhost:\" + port).build();\n\t\t\tclient.get().uri(\"/actuator\").exchange().expectStatus().isUnauthorized();\n\t\t});\n\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JerseyEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"355226c21e06f7957975764d8fdc60d2ca269c29","commitMessage":"@@@Merge branch '2.5.x'\n\nCloses gh-27474\n","date":"2021-07-23 20:09:37","modifiedFileCount":"13","status":"M","submitter":"Andy Wilkinson"}]
