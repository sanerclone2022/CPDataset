[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void generateProjectAndExtractUnsupportedArchive() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tString fileName = UUID.randomUUID().toString() + \".zip\";\n\t\tFile file = new File(fileName);\n\t\tassertThat(file.exists()).as(\"file should not exist\").isFalse();\n\t\ttry {\n\t\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\n\t\t\t\t\t\"application/foobar\", fileName, archive);\n\t\t\tmockSuccessfulProjectGeneration(request);\n\t\t\tassertThat(this.command.run(\"--extract\", folder.getAbsolutePath()))\n\t\t\t\t\t.isEqualTo(ExitStatus.OK);\n\t\t\tassertThat(file.exists()).as(\"file should have been saved instead\").isTrue();\n\t\t}\n\t\tfinally {\n\t\t\tassertThat(file.delete()).as(\"failed to delete test file\").isTrue();\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":198,"groupId":"2468","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateProjectAndExtractUnsupportedArchive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/02/8e34629bec0daa88958051b5e9c669cd30d450.src","preCode":"\tpublic void generateProjectAndExtractUnsupportedArchive() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tString fileName = UUID.randomUUID().toString() + \".zip\";\n\t\tFile file = new File(fileName);\n\t\tassertThat(file.exists()).as(\"file should not exist\").isFalse();\n\t\ttry {\n\t\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\n\t\t\t\t\t\"application/foobar\", fileName, archive);\n\t\t\tmockSuccessfulProjectGeneration(request);\n\t\t\tassertThat(this.command.run(\"--extract\", folder.getAbsolutePath()))\n\t\t\t\t\t.isEqualTo(ExitStatus.OK);\n\t\t\tassertThat(file.exists()).as(\"file should have been saved instead\").isTrue();\n\t\t}\n\t\tfinally {\n\t\t\tassertThat(file.delete()).as(\"failed to delete test file\").isTrue();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void generateProjectAndExtractUnknownContentType() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tString fileName = UUID.randomUUID().toString() + \".zip\";\n\t\tFile file = new File(fileName);\n\t\tassertThat(file.exists()).as(\"file should not exist\").isFalse();\n\t\ttry {\n\t\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\n\t\t\t\t\tnull, fileName, archive);\n\t\t\tmockSuccessfulProjectGeneration(request);\n\t\t\tassertThat(this.command.run(\"--extract\", folder.getAbsolutePath()))\n\t\t\t\t\t.isEqualTo(ExitStatus.OK);\n\t\t\tassertThat(file.exists()).as(\"file should have been saved instead\").isTrue();\n\t\t}\n\t\tfinally {\n\t\t\tassertThat(file.delete()).as(\"failed to delete test file\").isTrue();\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":218,"groupId":"2469","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateProjectAndExtractUnknownContentType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/02/8e34629bec0daa88958051b5e9c669cd30d450.src","preCode":"\tpublic void generateProjectAndExtractUnknownContentType() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tString fileName = UUID.randomUUID().toString() + \".zip\";\n\t\tFile file = new File(fileName);\n\t\tassertThat(file.exists()).as(\"file should not exist\").isFalse();\n\t\ttry {\n\t\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\n\t\t\t\t\tnull, fileName, archive);\n\t\t\tmockSuccessfulProjectGeneration(request);\n\t\t\tassertThat(this.command.run(\"--extract\", folder.getAbsolutePath()))\n\t\t\t\t\t.isEqualTo(ExitStatus.OK);\n\t\t\tassertThat(file.exists()).as(\"file should have been saved instead\").isTrue();\n\t\t}\n\t\tfinally {\n\t\t\tassertThat(file.delete()).as(\"failed to delete test file\").isTrue();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid generateProjectAndExtractUnsupportedArchive(@TempDir File tempDir) throws Exception {\n\t\tString fileName = UUID.randomUUID().toString() + \".zip\";\n\t\tFile file = new File(fileName);\n\t\tassertThat(file.exists()).as(\"file should not exist\").isFalse();\n\t\ttry {\n\t\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\"application/foobar\",\n\t\t\t\t\tfileName, archive);\n\t\t\tmockSuccessfulProjectGeneration(request);\n\t\t\tassertThat(this.command.run(\"--extract\", tempDir.getAbsolutePath())).isEqualTo(ExitStatus.OK);\n\t\t\tassertThat(file.exists()).as(\"file should have been saved instead\").isTrue();\n\t\t}\n\t\tfinally {\n\t\t\tassertThat(file.delete()).as(\"failed to delete test file\").isTrue();\n\t\t}\n\t}\n","date":"2019-06-07 19:25:54","endLine":197,"groupId":"10609","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateProjectAndExtractUnsupportedArchive","params":"(@TempDirFiletempDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/67/eb369cbb11f49d1f9faa88a9f92b8d5cb2e09c.src","preCode":"\tpublic void generateProjectAndExtractUnsupportedArchive() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tString fileName = UUID.randomUUID().toString() + \".zip\";\n\t\tFile file = new File(fileName);\n\t\tassertThat(file.exists()).as(\"file should not exist\").isFalse();\n\t\ttry {\n\t\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\"application/foobar\",\n\t\t\t\t\tfileName, archive);\n\t\t\tmockSuccessfulProjectGeneration(request);\n\t\t\tassertThat(this.command.run(\"--extract\", folder.getAbsolutePath())).isEqualTo(ExitStatus.OK);\n\t\t\tassertThat(file.exists()).as(\"file should have been saved instead\").isTrue();\n\t\t}\n\t\tfinally {\n\t\t\tassertThat(file.delete()).as(\"failed to delete test file\").isTrue();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid generateProjectAndExtractUnknownContentType(@TempDir File tempDir) throws Exception {\n\t\tString fileName = UUID.randomUUID().toString() + \".zip\";\n\t\tFile file = new File(fileName);\n\t\tassertThat(file.exists()).as(\"file should not exist\").isFalse();\n\t\ttry {\n\t\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(null, fileName, archive);\n\t\t\tmockSuccessfulProjectGeneration(request);\n\t\t\tassertThat(this.command.run(\"--extract\", tempDir.getAbsolutePath())).isEqualTo(ExitStatus.OK);\n\t\t\tassertThat(file.exists()).as(\"file should have been saved instead\").isTrue();\n\t\t}\n\t\tfinally {\n\t\t\tassertThat(file.delete()).as(\"failed to delete test file\").isTrue();\n\t\t}\n\t}\n","date":"2019-06-07 19:25:54","endLine":214,"groupId":"10609","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateProjectAndExtractUnknownContentType","params":"(@TempDirFiletempDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/67/eb369cbb11f49d1f9faa88a9f92b8d5cb2e09c.src","preCode":"\tpublic void generateProjectAndExtractUnknownContentType() throws Exception {\n\t\tFile folder = this.temporaryFolder.newFolder();\n\t\tString fileName = UUID.randomUUID().toString() + \".zip\";\n\t\tFile file = new File(fileName);\n\t\tassertThat(file.exists()).as(\"file should not exist\").isFalse();\n\t\ttry {\n\t\t\tbyte[] archive = createFakeZipArchive(\"test.txt\", \"Fake content\");\n\t\t\tMockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(null, fileName, archive);\n\t\t\tmockSuccessfulProjectGeneration(request);\n\t\t\tassertThat(this.command.run(\"--extract\", folder.getAbsolutePath())).isEqualTo(ExitStatus.OK);\n\t\t\tassertThat(file.exists()).as(\"file should have been saved instead\").isTrue();\n\t\t}\n\t\tfinally {\n\t\t\tassertThat(file.delete()).as(\"failed to delete test file\").isTrue();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
