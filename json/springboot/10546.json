[{"authorTime":"2020-02-21 00:12:29","codes":[{"authorDate":"2020-02-21 00:12:29","commitOrder":1,"curCode":"\tvoid healthIndicatorWhenDatabaseUpWithConnectionValidation() {\n\t\tCloseableConnectionFactory connectionFactory = createTestDatabase();\n\t\ttry {\n\t\t\tConnectionFactoryHealthIndicator healthIndicator = new ConnectionFactoryHealthIndicator(connectionFactory);\n\t\t\thealthIndicator.health().as(StepVerifier::create).assertNext((actual) -> {\n\t\t\t\tassertThat(actual.getStatus()).isEqualTo(Status.UP);\n\t\t\t\tassertThat(actual.getDetails()).containsOnly(entry(\"database\", \"H2\"),\n\t\t\t\t\t\tentry(\"validationQuery\", \"validate(REMOTE)\"));\n\t\t\t}).verifyComplete();\n\t\t}\n\t\tfinally {\n\t\t\tconnectionFactory.close();\n\t\t}\n\t}\n","date":"2020-02-25 22:22:31","endLine":64,"groupId":"13931","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"healthIndicatorWhenDatabaseUpWithConnectionValidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/13/27743f83b7fd9bcaeeda2cfb08f87c28955c68.src","preCode":"\tvoid healthIndicatorWhenDatabaseUpWithConnectionValidation() {\n\t\tCloseableConnectionFactory connectionFactory = createTestDatabase();\n\t\ttry {\n\t\t\tConnectionFactoryHealthIndicator healthIndicator = new ConnectionFactoryHealthIndicator(connectionFactory);\n\t\t\thealthIndicator.health().as(StepVerifier::create).assertNext((actual) -> {\n\t\t\t\tassertThat(actual.getStatus()).isEqualTo(Status.UP);\n\t\t\t\tassertThat(actual.getDetails()).containsOnly(entry(\"database\", \"H2\"),\n\t\t\t\t\t\tentry(\"validationQuery\", \"validate(REMOTE)\"));\n\t\t\t}).verifyComplete();\n\t\t}\n\t\tfinally {\n\t\t\tconnectionFactory.close();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/r2dbc/ConnectionFactoryHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2020-02-21 00:12:29","commitOrder":1,"curCode":"\tvoid healthIndicatorWhenDatabaseUpWithFailureValidationQuery() {\n\t\tCloseableConnectionFactory connectionFactory = createTestDatabase();\n\t\ttry {\n\t\t\tString invalidValidationQuery = \"SELECT COUNT(*) from DOES_NOT_EXIST\";\n\t\t\tReactiveHealthIndicator healthIndicator = new ConnectionFactoryHealthIndicator(connectionFactory,\n\t\t\t\t\tinvalidValidationQuery);\n\t\t\thealthIndicator.health().as(StepVerifier::create).assertNext((actual) -> {\n\t\t\t\tassertThat(actual.getStatus()).isEqualTo(Status.DOWN);\n\t\t\t\tassertThat(actual.getDetails()).contains(entry(\"database\", \"H2\"),\n\t\t\t\t\t\tentry(\"validationQuery\", invalidValidationQuery));\n\t\t\t\tassertThat(actual.getDetails()).containsOnlyKeys(\"database\", \"error\", \"validationQuery\");\n\t\t\t}).verifyComplete();\n\t\t}\n\t\tfinally {\n\t\t\tconnectionFactory.close();\n\t\t}\n\t}\n","date":"2020-02-25 22:22:31","endLine":135,"groupId":"10969","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"healthIndicatorWhenDatabaseUpWithFailureValidationQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/13/27743f83b7fd9bcaeeda2cfb08f87c28955c68.src","preCode":"\tvoid healthIndicatorWhenDatabaseUpWithFailureValidationQuery() {\n\t\tCloseableConnectionFactory connectionFactory = createTestDatabase();\n\t\ttry {\n\t\t\tString invalidValidationQuery = \"SELECT COUNT(*) from DOES_NOT_EXIST\";\n\t\t\tReactiveHealthIndicator healthIndicator = new ConnectionFactoryHealthIndicator(connectionFactory,\n\t\t\t\t\tinvalidValidationQuery);\n\t\t\thealthIndicator.health().as(StepVerifier::create).assertNext((actual) -> {\n\t\t\t\tassertThat(actual.getStatus()).isEqualTo(Status.DOWN);\n\t\t\t\tassertThat(actual.getDetails()).contains(entry(\"database\", \"H2\"),\n\t\t\t\t\t\tentry(\"validationQuery\", invalidValidationQuery));\n\t\t\t\tassertThat(actual.getDetails()).containsOnlyKeys(\"database\", \"error\", \"validationQuery\");\n\t\t\t}).verifyComplete();\n\t\t}\n\t\tfinally {\n\t\t\tconnectionFactory.close();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/r2dbc/ConnectionFactoryHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"bee7302fc7f7c3751f2eaa633cde8aaddff12c56","commitMessage":"@@@Add R2BC connection factory health check\n\nThis commit adds an health indicator for R2DBC. If a validation query is\nprovided.  it is used to validate the state of the database. If not.  a\ncheck of the connection is issued.\n\nSee gh-19988\n\nCo-authored-by: Mark Paluch <mpaluch@pivotal.io>\n","date":"2020-02-25 22:22:31","modifiedFileCount":"0","status":"B","submitter":"Stephane Nicoll"},{"authorTime":"2021-03-10 22:15:42","codes":[{"authorDate":"2021-03-10 22:15:42","commitOrder":2,"curCode":"\tvoid healthIndicatorWhenDatabaseUpWithConnectionValidation() {\n\t\tCloseableConnectionFactory connectionFactory = createTestDatabase();\n\t\ttry {\n\t\t\tConnectionFactoryHealthIndicator healthIndicator = new ConnectionFactoryHealthIndicator(connectionFactory);\n\t\t\thealthIndicator.health().as(StepVerifier::create).assertNext((actual) -> {\n\t\t\t\tassertThat(actual.getStatus()).isEqualTo(Status.UP);\n\t\t\t\tassertThat(actual.getDetails()).containsOnly(entry(\"database\", \"H2\"),\n\t\t\t\t\t\tentry(\"validationQuery\", \"validate(REMOTE)\"));\n\t\t\t}).verifyComplete();\n\t\t}\n\t\tfinally {\n\t\t\tStepVerifier.create(connectionFactory.close()).verifyComplete();\n\t\t}\n\t}\n","date":"2021-03-10 22:15:42","endLine":64,"groupId":"10546","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"healthIndicatorWhenDatabaseUpWithConnectionValidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d5/a743dd974f7c98e4b9a17d5aa194349bda36ff.src","preCode":"\tvoid healthIndicatorWhenDatabaseUpWithConnectionValidation() {\n\t\tCloseableConnectionFactory connectionFactory = createTestDatabase();\n\t\ttry {\n\t\t\tConnectionFactoryHealthIndicator healthIndicator = new ConnectionFactoryHealthIndicator(connectionFactory);\n\t\t\thealthIndicator.health().as(StepVerifier::create).assertNext((actual) -> {\n\t\t\t\tassertThat(actual.getStatus()).isEqualTo(Status.UP);\n\t\t\t\tassertThat(actual.getDetails()).containsOnly(entry(\"database\", \"H2\"),\n\t\t\t\t\t\tentry(\"validationQuery\", \"validate(REMOTE)\"));\n\t\t\t}).verifyComplete();\n\t\t}\n\t\tfinally {\n\t\t\tconnectionFactory.close();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/r2dbc/ConnectionFactoryHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2021-03-10 22:15:42","commitOrder":2,"curCode":"\tvoid healthIndicatorWhenDatabaseUpWithFailureValidationQuery() {\n\t\tCloseableConnectionFactory connectionFactory = createTestDatabase();\n\t\ttry {\n\t\t\tString invalidValidationQuery = \"SELECT COUNT(*) from DOES_NOT_EXIST\";\n\t\t\tReactiveHealthIndicator healthIndicator = new ConnectionFactoryHealthIndicator(connectionFactory,\n\t\t\t\t\tinvalidValidationQuery);\n\t\t\thealthIndicator.health().as(StepVerifier::create).assertNext((actual) -> {\n\t\t\t\tassertThat(actual.getStatus()).isEqualTo(Status.DOWN);\n\t\t\t\tassertThat(actual.getDetails()).contains(entry(\"database\", \"H2\"),\n\t\t\t\t\t\tentry(\"validationQuery\", invalidValidationQuery));\n\t\t\t\tassertThat(actual.getDetails()).containsOnlyKeys(\"database\", \"error\", \"validationQuery\");\n\t\t\t}).verifyComplete();\n\t\t}\n\t\tfinally {\n\t\t\tStepVerifier.create(connectionFactory.close()).verifyComplete();\n\t\t}\n\t}\n","date":"2021-03-10 22:15:42","endLine":135,"groupId":"10546","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"healthIndicatorWhenDatabaseUpWithFailureValidationQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d5/a743dd974f7c98e4b9a17d5aa194349bda36ff.src","preCode":"\tvoid healthIndicatorWhenDatabaseUpWithFailureValidationQuery() {\n\t\tCloseableConnectionFactory connectionFactory = createTestDatabase();\n\t\ttry {\n\t\t\tString invalidValidationQuery = \"SELECT COUNT(*) from DOES_NOT_EXIST\";\n\t\t\tReactiveHealthIndicator healthIndicator = new ConnectionFactoryHealthIndicator(connectionFactory,\n\t\t\t\t\tinvalidValidationQuery);\n\t\t\thealthIndicator.health().as(StepVerifier::create).assertNext((actual) -> {\n\t\t\t\tassertThat(actual.getStatus()).isEqualTo(Status.DOWN);\n\t\t\t\tassertThat(actual.getDetails()).contains(entry(\"database\", \"H2\"),\n\t\t\t\t\t\tentry(\"validationQuery\", invalidValidationQuery));\n\t\t\t\tassertThat(actual.getDetails()).containsOnlyKeys(\"database\", \"error\", \"validationQuery\");\n\t\t\t}).verifyComplete();\n\t\t}\n\t\tfinally {\n\t\t\tconnectionFactory.close();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/r2dbc/ConnectionFactoryHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"2c8e78b0829bee31d76490c0a1bdf00b3c853b87","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-25574\n","date":"2021-03-10 22:15:42","modifiedFileCount":"2","status":"M","submitter":"Stephane Nicoll"}]
