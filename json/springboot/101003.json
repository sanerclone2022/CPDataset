[{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":2,"curCode":"\tprivate Token getToken(ServerHttpRequest request) {\n\t\tString authorization = request.getHeaders().getFirst(\"Authorization\");\n\t\tString bearerPrefix = \"bearer \";\n\t\tif (authorization == null\n\t\t\t\t|| !authorization.toLowerCase().startsWith(bearerPrefix)) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.MISSING_AUTHORIZATION,\n\t\t\t\t\t\"Authorization header is missing or invalid\");\n\t\t}\n\t\treturn new Token(authorization.substring(bearerPrefix.length()));\n\t}\n","date":"2018-01-20 12:44:24","endLine":117,"groupId":"4156","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getToken","params":"(ServerHttpRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ea/379d6dbdf3ddba59fb0c7f880b11f509c5c5a4.src","preCode":"\tprivate Token getToken(ServerHttpRequest request) {\n\t\tString authorization = request.getHeaders().getFirst(\"Authorization\");\n\t\tString bearerPrefix = \"bearer \";\n\t\tif (authorization == null\n\t\t\t\t|| !authorization.toLowerCase().startsWith(bearerPrefix)) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.MISSING_AUTHORIZATION,\n\t\t\t\t\t\"Authorization header is missing or invalid\");\n\t\t}\n\t\treturn new Token(authorization.substring(bearerPrefix.length()));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2017-11-03 09:00:55","commitOrder":2,"curCode":"\tprivate Token getToken(HttpServletRequest request) {\n\t\tString authorization = request.getHeader(\"Authorization\");\n\t\tString bearerPrefix = \"bearer \";\n\t\tif (authorization == null\n\t\t\t\t|| !authorization.toLowerCase().startsWith(bearerPrefix)) {\n\t\t\tthrow new CloudFoundryAuthorizationException(\n\t\t\t\t\tReason.MISSING_AUTHORIZATION,\n\t\t\t\t\t\"Authorization header is missing or invalid\");\n\t\t}\n\t\treturn new Token(authorization.substring(bearerPrefix.length()));\n\t}\n","date":"2017-11-03 09:00:55","endLine":116,"groupId":"4156","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getToken","params":"(HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9b/6bc518787edfe3a4fb48f30cfdfe0dc925fa69.src","preCode":"\tprivate Token getToken(HttpServletRequest request) {\n\t\tString authorization = request.getHeader(\"Authorization\");\n\t\tString bearerPrefix = \"bearer \";\n\t\tif (authorization == null\n\t\t\t\t|| !authorization.toLowerCase().startsWith(bearerPrefix)) {\n\t\t\tthrow new CloudFoundryAuthorizationException(\n\t\t\t\t\tReason.MISSING_AUTHORIZATION,\n\t\t\t\t\t\"Authorization header is missing or invalid\");\n\t\t}\n\t\treturn new Token(authorization.substring(bearerPrefix.length()));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptor.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"NB"}],"commitId":"1d39feffeabf4b94e3f900b941b58e0443d5887a","commitMessage":"@@@Overhaul actuator endpoint code\n\nRefactor several areas of the actuator endpoint code in order to make\nfuture extensions easier. The primary goal is to introduce the concept\nof an `ExposableEndpoint` that has technology specific subclasses and\ncan carry additional data for filters to use. Many other changes have\nbeen made along the way including:\n\n* A new EndpointSupplier interface that allows cleaner separation of\n  supplying vs discovering endpoints. This allows cleaner class names\n  and allows for better auto-configuration since a user can choose to\n  provide their own supplier entirely.\n\n* A `DiscoveredEndpoint` interface that allows the `EndpointFilter`\n  to be greatly simplified. A filter now doesn't need to know about\n  discovery concerns unless absolutely necessary.\n\n* Improved naming and package structure. Many technology specific\n  concerns are now grouped in a better way. Related concerns are\n  co-located and concepts from one area no longer leakage into another.\n\n* Simplified `HandlerMapping` implementations. Many common concerns have\n  been pulled up helping to create simpler subclasses.\n\n* Simplified JMX adapters. Many of the intermediary `Info` classes have\n  been removed. The `DiscoveredJmxOperation` is now responsible for\n  mapping methods to operations.\n\n* A specific @`HealthEndpointCloudFoundryExtension` for Cloud Foundry.\n  The extension logic used to create a \"full\" health endpoint extension\n  has been made explicit.\n\nFixes gh-11428\nFixes gh-11581\n","date":"2018-01-20 12:44:24","modifiedFileCount":"63","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-02-27 01:03:32","codes":[{"authorDate":"2018-02-27 01:03:32","commitOrder":3,"curCode":"\tprivate Token getToken(ServerHttpRequest request) {\n\t\tString authorization = request.getHeaders().getFirst(\"Authorization\");\n\t\tString bearerPrefix = \"bearer \";\n\t\tif (authorization == null\n\t\t\t\t|| !authorization.toLowerCase(Locale.ENGLISH).startsWith(bearerPrefix)) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.MISSING_AUTHORIZATION,\n\t\t\t\t\t\"Authorization header is missing or invalid\");\n\t\t}\n\t\treturn new Token(authorization.substring(bearerPrefix.length()));\n\t}\n","date":"2018-02-27 01:03:32","endLine":120,"groupId":"101003","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getToken","params":"(ServerHttpRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/76/0b6690901e6baef19fe292af835fb104c3d789.src","preCode":"\tprivate Token getToken(ServerHttpRequest request) {\n\t\tString authorization = request.getHeaders().getFirst(\"Authorization\");\n\t\tString bearerPrefix = \"bearer \";\n\t\tif (authorization == null\n\t\t\t\t|| !authorization.toLowerCase().startsWith(bearerPrefix)) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.MISSING_AUTHORIZATION,\n\t\t\t\t\t\"Authorization header is missing or invalid\");\n\t\t}\n\t\treturn new Token(authorization.substring(bearerPrefix.length()));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2018-02-27 01:03:32","commitOrder":3,"curCode":"\tprivate Token getToken(HttpServletRequest request) {\n\t\tString authorization = request.getHeader(\"Authorization\");\n\t\tString bearerPrefix = \"bearer \";\n\t\tif (authorization == null\n\t\t\t\t|| !authorization.toLowerCase(Locale.ENGLISH).startsWith(bearerPrefix)) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.MISSING_AUTHORIZATION,\n\t\t\t\t\t\"Authorization header is missing or invalid\");\n\t\t}\n\t\treturn new Token(authorization.substring(bearerPrefix.length()));\n\t}\n","date":"2018-02-27 01:03:32","endLine":114,"groupId":"101003","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getToken","params":"(HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d0/40302b058439664e94dd143fb29b31316c70b5.src","preCode":"\tprivate Token getToken(HttpServletRequest request) {\n\t\tString authorization = request.getHeader(\"Authorization\");\n\t\tString bearerPrefix = \"bearer \";\n\t\tif (authorization == null\n\t\t\t\t|| !authorization.toLowerCase().startsWith(bearerPrefix)) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.MISSING_AUTHORIZATION,\n\t\t\t\t\t\"Authorization header is missing or invalid\");\n\t\t}\n\t\treturn new Token(authorization.substring(bearerPrefix.length()));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptor.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"306c79f0de3166288a9bdc570776b7743b58b5c7","commitMessage":"@@@Merge branch '1.5.x'\n","date":"2018-02-27 01:03:32","modifiedFileCount":"25","status":"M","submitter":"Stephane Nicoll"}]
