[{"authorTime":"2019-02-12 23:35:40","codes":[{"authorDate":"2019-01-28 17:09:08","commitOrder":3,"curCode":"\tpublic void testMaxFileSizeProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","date":"2019-01-28 17:09:08","endLine":367,"groupId":"646","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxFileSizeProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/11653037397b305df3f689f310a73f688acaa0.src","preCode":"\tpublic void testMaxFileSizeProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"NB"},{"authorDate":"2019-02-12 23:35:40","commitOrder":3,"curCode":"\tpublic void testTotalSizeCapProperty() {\n\t\tString expectedSize = \"101 MB\";\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.total-size-cap\", expectedSize);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\")\n\t\t\t\t.toString()).isEqualTo(expectedSize);\n\t}\n","date":"2019-02-12 23:35:40","endLine":458,"groupId":"646","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTotalSizeCapProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/61/7e1a30c706c88ab072007b47916b5f931d0eae.src","preCode":"\tpublic void testTotalSizeCapProperty() {\n\t\tString expectedSize = \"101 MB\";\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.total-size-cap\", expectedSize);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\")\n\t\t\t\t.toString()).isEqualTo(expectedSize);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"B"}],"commitId":"81e6a5a4d9b0c4749eb653782d2d1530958035cd","commitMessage":"@@@Merge pull request #15325 from thorntonrp\n\n* pr/15325:\n  Polish \"Support for capping archived log files\"\n  Support for capping archived log files\n","date":"2019-02-12 23:35:40","modifiedFileCount":"3","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-02-19 18:13:21","codes":[{"authorDate":"2019-02-19 18:13:21","commitOrder":4,"curCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(expectedFileSize);\n\t}\n","date":"2019-02-19 18:16:31","endLine":411,"groupId":"646","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxFileSizeProperty","params":"(StringsizeValue@StringexpectedFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/93/8e9fceff83a7ed43cd6a6f94bb23c838f7aef3.src","preCode":"\tpublic void testMaxFileSizeProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"},{"authorDate":"2019-02-19 18:13:21","commitOrder":4,"curCode":"\tprivate void testTotalSizeCapProperty(String sizeValue, String expectFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.total-size-cap\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\")\n\t\t\t\t.toString()).isEqualTo(expectFileSize);\n\t}\n","date":"2019-02-19 18:16:31","endLine":485,"groupId":"646","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTotalSizeCapProperty","params":"(StringsizeValue@StringexpectFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/93/8e9fceff83a7ed43cd6a6f94bb23c838f7aef3.src","preCode":"\tpublic void testTotalSizeCapProperty() {\n\t\tString expectedSize = \"101 MB\";\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.total-size-cap\", expectedSize);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\")\n\t\t\t\t.toString()).isEqualTo(expectedSize);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"}],"commitId":"eee07efee1bb6a9bdfd6e34000eb91b7cf347502","commitMessage":"@@@Switch Logback's file size properties to DataSize\n\nThis commit changes the target type of file size-based properties to\n`DataSize` and tolerates Logback's specific format.\n\nCloses gh-15930\n","date":"2019-02-19 18:16:31","modifiedFileCount":"2","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-03-05 15:19:42","codes":[{"authorDate":"2019-02-19 18:13:21","commitOrder":5,"curCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(expectedFileSize);\n\t}\n","date":"2019-02-19 18:16:31","endLine":411,"groupId":"646","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxFileSizeProperty","params":"(StringsizeValue@StringexpectedFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/93/8e9fceff83a7ed43cd6a6f94bb23c838f7aef3.src","preCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(expectedFileSize);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"N"},{"authorDate":"2019-03-05 15:19:42","commitOrder":5,"curCode":"\tprivate void testTotalSizeCapProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.total-size-cap\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\")\n\t\t\t\t.toString()).isEqualTo(expectedFileSize);\n\t}\n","date":"2019-03-05 15:19:42","endLine":486,"groupId":"646","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTotalSizeCapProperty","params":"(StringsizeValue@StringexpectedFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/0f/a1d7e7af61c701289957ecf210af365b521073.src","preCode":"\tprivate void testTotalSizeCapProperty(String sizeValue, String expectFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.total-size-cap\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\")\n\t\t\t\t.toString()).isEqualTo(expectFileSize);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"}],"commitId":"873fd3f6b0eb1a251499aacc5f4358873b7d79c4","commitMessage":"@@@Merge pull request #16094 from izeye\n\n* pr/16094:\n  Polish\n","date":"2019-03-05 15:19:42","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2020-10-22 07:05:14","codes":[{"authorDate":"2020-10-22 07:05:14","commitOrder":6,"curCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tthis.environment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(this.environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tinitialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\").toString())\n\t\t\t\t.isEqualTo(expectedFileSize);\n\t}\n","date":"2020-10-23 03:55:02","endLine":385,"groupId":"101135","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxFileSizeProperty","params":"(StringsizeValue@StringexpectedFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/64/e8170081155f450b4c996aaaadd19b5ab5346c.src","preCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\").toString())\n\t\t\t\t.isEqualTo(expectedFileSize);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"},{"authorDate":"2020-10-22 07:05:14","commitOrder":6,"curCode":"\tprivate void testTotalSizeCapProperty(String sizeValue, String expectedFileSize) {\n\t\tthis.environment.setProperty(\"logging.file.total-size-cap\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(this.environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tinitialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\").toString())\n\t\t\t\t.isEqualTo(expectedFileSize);\n\t}\n","date":"2020-10-23 03:55:02","endLine":448,"groupId":"101135","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTotalSizeCapProperty","params":"(StringsizeValue@StringexpectedFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/64/e8170081155f450b4c996aaaadd19b5ab5346c.src","preCode":"\tprivate void testTotalSizeCapProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.total-size-cap\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"totalSizeCap\").toString())\n\t\t\t\t.isEqualTo(expectedFileSize);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"}],"commitId":"1725594a0edae57a50614210f094e59b6edca305","commitMessage":"@@@Rationalize Logback logging properties\n\nDeprecate and provide alternatives for logging properties that are\nspecific to Logback.\n\nThe following Spring Boot properties have been changed:\n\n  * logging.pattern.rolling-file-name ->\n    logging.logback.rollingpolicy.file-name-pattern\n\n  * logging.file.clean-history-on-start ->\n    logging.logback.rollingpolicy.clean-history-on-start\n\n  * logging.file.max-size ->\n    logging.logback.rollingpolicy.max-file-size\n\n  * logging.file.total-size-cap ->\n    logging.logback.rollingpolicy.total-size-cap\n\n  * logging.file.max-history ->\n    logging.logback.rollingpolicy.max-history\n\nAs have the system environment properties that they map to:\n\n  * ROLLING_FILE_NAME_PATTERN ->\n    LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN\n\n  * LOG_FILE_CLEAN_HISTORY_ON_START ->\n    LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START\n\n  * LOG_FILE_MAX_SIZE ->\n    LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE\n\n  * LOG_FILE_TOTAL_SIZE_CAP ->\n    LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP\n\n  * LOG_FILE_MAX_HISTORY ->\n    LOGBACK_ROLLINGPOLICY_MAX_HISTORY\n\nThis commit also cleans up and simplifies `DefaultLogbackConfiguration`.\n\nCloses gh-23609\n","date":"2020-10-23 03:55:02","modifiedFileCount":"8","status":"M","submitter":"Phillip Webb"}]
