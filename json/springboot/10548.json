[{"authorTime":"2017-10-31 00:04:42","codes":[{"authorDate":"2017-10-31 00:04:42","commitOrder":2,"curCode":"\tpublic void redisIsUp() {\n\t\tProperties info = new Properties();\n\t\tinfo.put(\"redis_version\", \"2.8.9\");\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.just(info));\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(\n\t\t\t\tredisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails()).containsOnlyKeys(\"version\");\n\t\t\tassertThat(h.getDetails().get(\"version\")).isEqualTo(\"2.8.9\");\n\t\t}).verifyComplete();\n\t\tverify(redisConnection).close();\n\t}\n","date":"2017-10-31 00:04:42","endLine":63,"groupId":"526","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"redisIsUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e9/3bcb5c2c6474273a15b901c9b9e82dd51cff62.src","preCode":"\tpublic void redisIsUp() {\n\t\tProperties info = new Properties();\n\t\tinfo.put(\"redis_version\", \"2.8.9\");\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.just(info));\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(\n\t\t\t\tredisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails()).containsOnlyKeys(\"version\");\n\t\t\tassertThat(h.getDetails().get(\"version\")).isEqualTo(\"2.8.9\");\n\t\t}).verifyComplete();\n\t\tverify(redisConnection).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"MB"},{"authorDate":"2017-10-31 00:04:42","commitOrder":2,"curCode":"\tpublic void redisCommandIsDown() {\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(\n\t\t\t\tMono.error(new RedisConnectionFailureException(\"Connection failed\")));\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(\n\t\t\t\tredisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health)\n\t\t\t\t.consumeNextWith((h) -> assertThat(h.getStatus()).isEqualTo(Status.DOWN))\n\t\t\t\t.verifyComplete();\n\t\tverify(redisConnection).close();\n\t}\n","date":"2017-10-31 00:04:42","endLine":78,"groupId":"525","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"redisCommandIsDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e9/3bcb5c2c6474273a15b901c9b9e82dd51cff62.src","preCode":"\tpublic void redisCommandIsDown() {\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(\n\t\t\t\tMono.error(new RedisConnectionFailureException(\"Connection failed\")));\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(\n\t\t\t\tredisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health)\n\t\t\t\t.consumeNextWith((h) -> assertThat(h.getStatus()).isEqualTo(Status.DOWN))\n\t\t\t\t.verifyComplete();\n\t\tverify(redisConnection).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"1225a6a05e7701a9f40d10334f9bec19789eb1a4","commitMessage":"@@@Merge pull request #10822 from GreyTeardrop:reactive-redis-heath-connection-failure\n\n* pr/10822:\n  Polish \"Handle AbstractReactiveHealthIndicator.doHealthCheck exception\"\n  Handle AbstractReactiveHealthIndicator.doHealthCheck exception\n","date":"2017-10-31 00:04:42","modifiedFileCount":"2","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-15 12:30:34","codes":[{"authorDate":"2019-05-15 12:30:34","commitOrder":3,"curCode":"\tpublic void redisIsUp() {\n\t\tProperties info = new Properties();\n\t\tinfo.put(\"redis_version\", \"2.8.9\");\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.just(info));\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(\n\t\t\t\tredisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails()).containsOnlyKeys(\"version\");\n\t\t\tassertThat(h.getDetails().get(\"version\")).isEqualTo(\"2.8.9\");\n\t\t}).verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","date":"2019-05-15 12:31:08","endLine":65,"groupId":"526","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"redisIsUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/cb/88aa549821afaf8965f7e7bceea8874c2f80fa.src","preCode":"\tpublic void redisIsUp() {\n\t\tProperties info = new Properties();\n\t\tinfo.put(\"redis_version\", \"2.8.9\");\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.just(info));\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(\n\t\t\t\tredisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails()).containsOnlyKeys(\"version\");\n\t\t\tassertThat(h.getDetails().get(\"version\")).isEqualTo(\"2.8.9\");\n\t\t}).verifyComplete();\n\t\tverify(redisConnection).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-05-15 12:30:34","commitOrder":3,"curCode":"\tpublic void redisCommandIsDown() {\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(\n\t\t\t\tMono.error(new RedisConnectionFailureException(\"Connection failed\")));\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(\n\t\t\t\tredisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health)\n\t\t\t\t.consumeNextWith((h) -> assertThat(h.getStatus()).isEqualTo(Status.DOWN))\n\t\t\t\t.verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","date":"2019-05-15 12:31:08","endLine":81,"groupId":"15770","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"redisCommandIsDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/cb/88aa549821afaf8965f7e7bceea8874c2f80fa.src","preCode":"\tpublic void redisCommandIsDown() {\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(\n\t\t\t\tMono.error(new RedisConnectionFailureException(\"Connection failed\")));\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(\n\t\t\t\tredisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health)\n\t\t\t\t.consumeNextWith((h) -> assertThat(h.getStatus()).isEqualTo(Status.DOWN))\n\t\t\t\t.verifyComplete();\n\t\tverify(redisConnection).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"963a544fb193d168c47c2f54cfc40c0a8eecadc8","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-16860\n","date":"2019-05-15 12:31:08","modifiedFileCount":"2","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid redisIsUp() {\n\t\tProperties info = new Properties();\n\t\tinfo.put(\"redis_version\", \"2.8.9\");\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.just(info));\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails()).containsOnlyKeys(\"version\");\n\t\t\tassertThat(h.getDetails().get(\"version\")).isEqualTo(\"2.8.9\");\n\t\t}).verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","date":"2019-06-07 19:25:54","endLine":64,"groupId":"526","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"redisIsUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6f/cce879c30bcd70ef4507933ddeb8c81d801857.src","preCode":"\tpublic void redisIsUp() {\n\t\tProperties info = new Properties();\n\t\tinfo.put(\"redis_version\", \"2.8.9\");\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.just(info));\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails()).containsOnlyKeys(\"version\");\n\t\t\tassertThat(h.getDetails().get(\"version\")).isEqualTo(\"2.8.9\");\n\t\t}).verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid redisCommandIsDown() {\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.error(new RedisConnectionFailureException(\"Connection failed\")));\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> assertThat(h.getStatus()).isEqualTo(Status.DOWN))\n\t\t\t\t.verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","date":"2019-06-07 19:25:54","endLine":77,"groupId":"15770","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"redisCommandIsDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6f/cce879c30bcd70ef4507933ddeb8c81d801857.src","preCode":"\tpublic void redisCommandIsDown() {\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.error(new RedisConnectionFailureException(\"Connection failed\")));\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> assertThat(h.getStatus()).isEqualTo(Status.DOWN))\n\t\t\t\t.verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-11-25 21:36:16","codes":[{"authorDate":"2020-11-25 21:36:16","commitOrder":5,"curCode":"\tvoid redisIsUp() {\n\t\tProperties info = new Properties();\n\t\tinfo.put(\"redis_version\", \"2.8.9\");\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info(\"server\")).willReturn(Mono.just(info));\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails()).containsOnlyKeys(\"version\");\n\t\t\tassertThat(h.getDetails().get(\"version\")).isEqualTo(\"2.8.9\");\n\t\t}).verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","date":"2020-11-25 21:36:16","endLine":67,"groupId":"10548","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"redisIsUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/84/52982dbdfd6553ae2508ce266d515c75b16668.src","preCode":"\tvoid redisIsUp() {\n\t\tProperties info = new Properties();\n\t\tinfo.put(\"redis_version\", \"2.8.9\");\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.just(info));\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails()).containsOnlyKeys(\"version\");\n\t\t\tassertThat(h.getDetails().get(\"version\")).isEqualTo(\"2.8.9\");\n\t\t}).verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-11-25 21:36:16","commitOrder":5,"curCode":"\tvoid redisCommandIsDown() {\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info(\"server\")).willReturn(Mono.error(new RedisConnectionFailureException(\"Connection failed\")));\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> assertThat(h.getStatus()).isEqualTo(Status.DOWN))\n\t\t\t\t.verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","date":"2020-11-25 21:36:16","endLine":102,"groupId":"10548","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"redisCommandIsDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/84/52982dbdfd6553ae2508ce266d515c75b16668.src","preCode":"\tvoid redisCommandIsDown() {\n\t\tReactiveServerCommands commands = mock(ReactiveServerCommands.class);\n\t\tgiven(commands.info()).willReturn(Mono.error(new RedisConnectionFailureException(\"Connection failed\")));\n\t\tReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);\n\t\tgiven(redisConnection.closeLater()).willReturn(Mono.empty());\n\t\tRedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> assertThat(h.getStatus()).isEqualTo(Status.DOWN))\n\t\t\t\t.verifyComplete();\n\t\tverify(redisConnection).closeLater();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"b1678ee6ad6575bf2803ce40011bdbbd03248c32","commitMessage":"@@@Merge branch '2.3.x'\n\nCloses gh-24251\n","date":"2020-11-25 21:36:16","modifiedFileCount":"4","status":"M","submitter":"Stephane Nicoll"}]
