[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void defaultFilterConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory()\n\t\t\t\t\t\t.getMetadataReader(DefaultConfigurationFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationFilter.class.getName());\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat((EnumSet<DispatcherType>) propertyValues.get(\"dispatcherTypes\"))\n\t\t\t\t.containsExactly(DispatcherType.REQUEST);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\")))\n\t\t\t\t.isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"servletNames\")).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"urlPatterns\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"name\"))\n\t\t\t\t.isEqualTo(DefaultConfigurationFilter.class.getName());\n\t\tassertThat(propertyValues.get(\"filter\")).isEqualTo(scanned);\n\t}\n","date":"2017-10-05 11:18:56","endLine":80,"groupId":"3378","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultFilterConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7d/a39d8cb589aad03a845ab1701a93d221c4b21b.src","preCode":"\tpublic void defaultFilterConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory()\n\t\t\t\t\t\t.getMetadataReader(DefaultConfigurationFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationFilter.class.getName());\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat((EnumSet<DispatcherType>) propertyValues.get(\"dispatcherTypes\"))\n\t\t\t\t.containsExactly(DispatcherType.REQUEST);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\")))\n\t\t\t\t.isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"servletNames\")).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"urlPatterns\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"name\"))\n\t\t\t\t.isEqualTo(DefaultConfigurationFilter.class.getName());\n\t\tassertThat(propertyValues.get(\"filter\")).isEqualTo(scanned);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebFilterHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void filterWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory()\n\t\t\t\t\t\t.getMetadataReader(CustomNameFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","date":"2017-10-05 11:18:56","endLine":91,"groupId":"1229","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"filterWithCustomName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7d/a39d8cb589aad03a845ab1701a93d221c4b21b.src","preCode":"\tpublic void filterWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory()\n\t\t\t\t\t\t.getMetadataReader(CustomNameFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebFilterHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid defaultFilterConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(DefaultConfigurationFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationFilter.class.getName());\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat((EnumSet<DispatcherType>) propertyValues.get(\"dispatcherTypes\"))\n\t\t\t\t.containsExactly(DispatcherType.REQUEST);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"servletNames\")).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"urlPatterns\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationFilter.class.getName());\n\t\tassertThat(propertyValues.get(\"filter\")).isEqualTo(scanned);\n\t}\n","date":"2019-06-07 19:25:54","endLine":72,"groupId":"3378","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultFilterConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c1/f8a26ed697ee1edd3edd1ca19f61bacf041359.src","preCode":"\tpublic void defaultFilterConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(DefaultConfigurationFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationFilter.class.getName());\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat((EnumSet<DispatcherType>) propertyValues.get(\"dispatcherTypes\"))\n\t\t\t\t.containsExactly(DispatcherType.REQUEST);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"servletNames\")).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"urlPatterns\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationFilter.class.getName());\n\t\tassertThat(propertyValues.get(\"filter\")).isEqualTo(scanned);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebFilterHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid filterWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(CustomNameFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":82,"groupId":"1229","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"filterWithCustomName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c1/f8a26ed697ee1edd3edd1ca19f61bacf041359.src","preCode":"\tpublic void filterWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(CustomNameFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebFilterHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-11-07 17:33:11","codes":[{"authorDate":"2019-11-07 17:33:11","commitOrder":3,"curCode":"\tvoid defaultFilterConfiguration() throws IOException {\n\t\tAnnotatedBeanDefinition definition = createBeanDefinition(DefaultConfigurationFilter.class);\n\t\tthis.handler.handle(definition, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationFilter.class.getName());\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat((EnumSet<DispatcherType>) propertyValues.get(\"dispatcherTypes\"))\n\t\t\t\t.containsExactly(DispatcherType.REQUEST);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"servletNames\")).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"urlPatterns\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationFilter.class.getName());\n\t\tassertThat(propertyValues.get(\"filter\")).isEqualTo(definition);\n\t}\n","date":"2019-11-07 17:33:11","endLine":73,"groupId":"102020","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultFilterConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/81/8fe38fbdef8ee01063b7a9ae0dc6f1756f6cd0.src","preCode":"\tvoid defaultFilterConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(DefaultConfigurationFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationFilter.class.getName());\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat((EnumSet<DispatcherType>) propertyValues.get(\"dispatcherTypes\"))\n\t\t\t\t.containsExactly(DispatcherType.REQUEST);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"servletNames\")).isEmpty();\n\t\tassertThat((String[]) propertyValues.get(\"urlPatterns\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationFilter.class.getName());\n\t\tassertThat(propertyValues.get(\"filter\")).isEqualTo(scanned);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebFilterHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-11-07 17:33:11","commitOrder":3,"curCode":"\tvoid filterWithCustomName() throws IOException {\n\t\tAnnotatedBeanDefinition definition = createBeanDefinition(CustomNameFilter.class);\n\t\tthis.handler.handle(definition, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","date":"2019-11-07 17:33:11","endLine":82,"groupId":"102020","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"filterWithCustomName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/81/8fe38fbdef8ee01063b7a9ae0dc6f1756f6cd0.src","preCode":"\tvoid filterWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(CustomNameFilter.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition filterRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebFilterHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"dd4377e69c2c4b4ae277590fc43424af9524cf8d","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-18912\n","date":"2019-11-07 17:33:11","modifiedFileCount":"9","status":"M","submitter":"Andy Wilkinson"}]
