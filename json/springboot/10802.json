[{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withUnauthorizedRequest());\n\t\tthis.thrown\n\t\t\t\t.expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_TOKEN));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","date":"2017-11-03 09:00:55","endLine":130,"groupId":"10003","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getAccessLevelWhenTokenIsNotValidShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/53/0446519734d461948fcea268b336c36680e3fb.src","preCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withUnauthorizedRequest());\n\t\tthis.thrown\n\t\t\t\t.expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_TOKEN));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"},{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void getAccessLevelWhenCloudControllerIsNotReachableThrowsException()\n\t\t\tthrows Exception {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withServerError());\n\t\tthis.thrown.expect(\n\t\t\t\tAuthorizationExceptionMatcher.withReason(Reason.SERVICE_UNAVAILABLE));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","date":"2017-11-03 09:00:55","endLine":151,"groupId":"2854","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getAccessLevelWhenCloudControllerIsNotReachableThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/53/0446519734d461948fcea268b336c36680e3fb.src","preCode":"\tpublic void getAccessLevelWhenCloudControllerIsNotReachableThrowsException()\n\t\t\tthrows Exception {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withServerError());\n\t\tthis.thrown.expect(\n\t\t\t\tAuthorizationExceptionMatcher.withReason(Reason.SERVICE_UNAVAILABLE));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"}],"commitId":"d50fe8874fa442cbd3ea380754e7b412a77aed9a","commitMessage":"@@@Add CF support for reactive actuators\n\nCloses gh-10780\n","date":"2017-11-03 09:00:55","modifiedFileCount":"5","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withUnauthorizedRequest());\n\t\tthis.thrown\n\t\t\t\t.expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_TOKEN));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","date":"2017-12-12 18:57:30","endLine":129,"groupId":"10003","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getAccessLevelWhenTokenIsNotValidShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6b/e4bec67b00a02a8e6f85c83f6b1f059d9007e8.src","preCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withUnauthorizedRequest());\n\t\tthis.thrown\n\t\t\t\t.expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_TOKEN));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void getAccessLevelWhenCloudControllerIsNotReachableThrowsException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withServerError());\n\t\tthis.thrown.expect(\n\t\t\t\tAuthorizationExceptionMatcher.withReason(Reason.SERVICE_UNAVAILABLE));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","date":"2017-12-12 18:57:30","endLine":149,"groupId":"2854","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getAccessLevelWhenCloudControllerIsNotReachableThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6b/e4bec67b00a02a8e6f85c83f6b1f059d9007e8.src","preCode":"\tpublic void getAccessLevelWhenCloudControllerIsNotReachableThrowsException()\n\t\t\tthrows Exception {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withServerError());\n\t\tthis.thrown.expect(\n\t\t\t\tAuthorizationExceptionMatcher.withReason(Reason.SERVICE_UNAVAILABLE));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-10-02 02:18:16","codes":[{"authorDate":"2018-10-02 02:18:16","commitOrder":3,"curCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withUnauthorizedRequest());\n\t\tassertThatExceptionOfType(CloudFoundryAuthorizationException.class).isThrownBy(\n\t\t\t\t() -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.satisfies(reasonRequirement(Reason.INVALID_TOKEN));\n\t}\n","date":"2018-10-03 01:55:28","endLine":126,"groupId":"12308","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getAccessLevelWhenTokenIsNotValidShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/20/fb599511530f872cfbf039141606da501f1326.src","preCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withUnauthorizedRequest());\n\t\tthis.thrown\n\t\t\t\t.expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_TOKEN));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2018-10-02 02:18:16","commitOrder":3,"curCode":"\tpublic void getAccessLevelWhenCloudControllerIsNotReachableThrowsException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withServerError());\n\t\tassertThatExceptionOfType(CloudFoundryAuthorizationException.class).isThrownBy(\n\t\t\t\t() -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.satisfies(reasonRequirement(Reason.SERVICE_UNAVAILABLE));\n\t}\n","date":"2018-10-03 01:55:28","endLine":146,"groupId":"12314","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getAccessLevelWhenCloudControllerIsNotReachableThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/20/fb599511530f872cfbf039141606da501f1326.src","preCode":"\tpublic void getAccessLevelWhenCloudControllerIsNotReachableThrowsException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\"))\n\t\t\t\t.andRespond(withServerError());\n\t\tthis.thrown.expect(\n\t\t\t\tAuthorizationExceptionMatcher.withReason(Reason.SERVICE_UNAVAILABLE));\n\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"d76bba5e6f5c702c8bf2aa86fee19ec7de8ed3cb","commitMessage":"@@@Migrate from ExpectedException rule to AssertJ\n\nReplace ExpectedException JUnit rules with AssertJ exception\nassertions.\n\nCloses gh-14336\n","date":"2018-10-03 01:55:28","modifiedFileCount":"271","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid getAccessLevelWhenTokenIsNotValidShouldThrowException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\")).andRespond(withUnauthorizedRequest());\n\t\tassertThatExceptionOfType(CloudFoundryAuthorizationException.class)\n\t\t\t\t.isThrownBy(() -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.satisfies(reasonRequirement(Reason.INVALID_TOKEN));\n\t}\n","date":"2019-06-07 19:25:54","endLine":115,"groupId":"10802","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getAccessLevelWhenTokenIsNotValidShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/42/a2352f94efbed3c4e9e74e8dcc30ad5abc594b.src","preCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\")).andRespond(withUnauthorizedRequest());\n\t\tassertThatExceptionOfType(CloudFoundryAuthorizationException.class)\n\t\t\t\t.isThrownBy(() -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.satisfies(reasonRequirement(Reason.INVALID_TOKEN));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid getAccessLevelWhenCloudControllerIsNotReachableThrowsException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\")).andRespond(withServerError());\n\t\tassertThatExceptionOfType(CloudFoundryAuthorizationException.class)\n\t\t\t\t.isThrownBy(() -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.satisfies(reasonRequirement(Reason.SERVICE_UNAVAILABLE));\n\t}\n","date":"2019-06-07 19:25:54","endLine":134,"groupId":"10802","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getAccessLevelWhenCloudControllerIsNotReachableThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/42/a2352f94efbed3c4e9e74e8dcc30ad5abc594b.src","preCode":"\tpublic void getAccessLevelWhenCloudControllerIsNotReachableThrowsException() {\n\t\tthis.server.expect(requestTo(CLOUD_CONTROLLER_PERMISSIONS))\n\t\t\t\t.andExpect(header(\"Authorization\", \"bearer my-access-token\")).andRespond(withServerError());\n\t\tassertThatExceptionOfType(CloudFoundryAuthorizationException.class)\n\t\t\t\t.isThrownBy(() -> this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.satisfies(reasonRequirement(Reason.SERVICE_UNAVAILABLE));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
