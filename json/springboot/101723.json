[{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","date":"2020-07-23 12:02:32","endLine":56,"groupId":"1039","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4d/e530d9856badf50ae60546208ee1be033dffd3.src","preCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","date":"2020-07-23 12:02:32","endLine":65,"groupId":"9382","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadWhenMultipleLoadersSupportLocationThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4d/e530d9856badf50ae60546208ee1be033dffd3.src","preCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"3352024b1ca641fa0beaaa4cd87788c190242eb0","commitMessage":"@@@Provide ConfigFileApplicationListener replacement\n\nDeprecate `ConfigFileApplicationListener` and provide a replacement\nmechanism that supports arbitrary config data imports.\n\nThis commit updates the following areas:\n\n- Extract `EnvironmentPostProcessor` invocation logic from the\n  `ConfigFileApplicationListener` to new dedicated listener. Also\n  providing support for `Log` injection.\n\n- Extract `RandomPropertySource` adding logic from the\n  `ConfigFileApplicationListener` to a dedicated class.\n\n- Migrate to the recently introduced `DefaultPropertiesPropertySource`\n  class when moving the defaultProperties `PropertySource`\n\n- Replace processing logic with a phased approach to ensure that\n  profile enablement happens in a distinct phase and that profiles\n  can no longer be activated on an ad-hoc basis.\n\n- Provide a more predictable and logical import order for processing\n  `application.properties` and `application.yml` files.\n\n- Add support for a `spring.config.import` property which can be used\n  to import additional config data. Also provide a pluggable API\n  allowing third-parties to resolve and load locations themselves.\n\n- Add `spring.config.activate.on-profile` support which replaces the\n  existing `spring.profiles` property.\n\n- Add `spring.config.activate.on-cloud-platform` support which allows\n  a config data document to be active only on a given cloud platform.\n\n- Support a `spring.config.use-legacy-processing` property allowing the\n  previous processing logic to be used.\n\nCloses gh-22497\n\nCo-authored-by: Madhura Bhave <mbhave@vmware.com>\n","date":"2020-07-23 12:02:32","modifiedFileCount":"17","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-08-21 08:26:01","codes":[{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","date":"2020-08-21 12:49:03","endLine":59,"groupId":"1039","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d8/311df8a38cd0c391c555d4d271052fb6dd08e0.src","preCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","date":"2020-08-21 12:49:03","endLine":68,"groupId":"9382","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadWhenMultipleLoadersSupportLocationThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d8/311df8a38cd0c391c555d4d271052fb6dd08e0.src","preCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"d123c924a0e1fbe6b4e8f27baf98b5bfd1a64a86","commitMessage":"@@@Add BootstrapRegisty support for config data\n\nExpose the `BootstrapRegisty` to both `ConfigDataLocationResolver` and\n`ConfigDataLoader` implementations. The registry is exposed via the\ncontext interfaces and may be used to reuse instances that are expensive\nto create. It may also be used to ultimately register beans with the\n`ApplicationContext`.\n\nCloses gh-22956\n","date":"2020-08-21 12:49:03","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-08-27 11:11:40","codes":[{"authorDate":"2020-08-27 11:11:40","commitOrder":3,"curCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, false,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","date":"2020-08-27 11:11:40","endLine":59,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/08/ca86e3487837599b471eb5168338d77703652e.src","preCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-08-27 11:11:40","commitOrder":3,"curCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, false,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","date":"2020-08-27 11:11:40","endLine":68,"groupId":"9382","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadWhenMultipleLoadersSupportLocationThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/08/ca86e3487837599b471eb5168338d77703652e.src","preCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"aa0f20473291e92630e39805f822364b189217a3","commitMessage":"@@@Add global optional config data opt-out\n\nSupport a `spring.config.all-locations-optional` property which can be\nset to `true` if all config data locations should be considered\noptional.\n\nCloses gh-23097\n","date":"2020-08-27 11:11:40","modifiedFileCount":"9","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-08-29 07:14:08","codes":[{"authorDate":"2020-08-29 07:14:08","commitOrder":4,"curCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, ConfigDataLocationNotFoundAction.FAIL,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","date":"2020-08-29 07:30:39","endLine":60,"groupId":"13195","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b1/e3b0f88b1281c28e7a6c094f026506324e28da.src","preCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, false,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-08-29 07:14:08","commitOrder":4,"curCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, ConfigDataLocationNotFoundAction.FAIL,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","date":"2020-08-29 07:30:39","endLine":69,"groupId":"9382","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadWhenMultipleLoadersSupportLocationThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b1/e3b0f88b1281c28e7a6c094f026506324e28da.src","preCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, false,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"0ddd1b6ce81a24c14518ef715527aa72b524d7eb","commitMessage":"@@@Refine global optional config data opt-out\n\nRename the opt-out property and use an enum in case we want to provide\nadditional options in the future.\n\nCloses gh-23097\n","date":"2020-08-29 07:30:39","modifiedFileCount":"9","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-09-17 15:09:41","codes":[{"authorDate":"2020-09-17 15:09:41","commitOrder":5,"curCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tConfigDataLocationNotFoundAction.FAIL, Arrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","date":"2020-09-17 15:31:00","endLine":74,"groupId":"13195","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f6/9339508e1dbf81d14d9e343a04c15792df496e.src","preCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, ConfigDataLocationNotFoundAction.FAIL,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2020-09-17 15:09:41","commitOrder":5,"curCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tConfigDataLocationNotFoundAction.FAIL,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","date":"2020-09-17 15:31:00","endLine":84,"groupId":"9382","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadWhenMultipleLoadersSupportLocationThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f6/9339508e1dbf81d14d9e343a04c15792df496e.src","preCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, ConfigDataLocationNotFoundAction.FAIL,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"1ae14362110360cc558bcd498fa67f70a35b8373","commitMessage":"@@@Refactor BootstrapRegistry support\n\nRefactor `BootstrapRegistry` support following initial prototype work\nwith the Spring Cloud team.\n\nThis update splits the `BootstrapRegistry` API into `BootstrapRegistry`. \n`BootstrapContext` and  `ConfigurableBootstrapContext` interfaces and\nmoves it to the same package as `SpringApplication`.\n\nA new `Bootstrapper` interface has been introduced that can be added\nto the `SpringApplication` to customize the `BootstrapRegistry` before\nit's used.\n\nCloses gh-23326\n","date":"2020-09-17 15:31:00","modifiedFileCount":"40","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-10-14 05:43:34","codes":[{"authorDate":"2020-10-14 05:43:34","commitOrder":6,"curCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","date":"2020-10-16 02:33:57","endLine":74,"groupId":"15597","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/0aa74b3819012abfdf341960fe7dfcee8ef1a2.src","preCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tConfigDataLocationNotFoundAction.FAIL, Arrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2020-10-14 05:43:34","commitOrder":6,"curCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for resource 'test'\");\n\t}\n","date":"2020-10-16 02:33:57","endLine":83,"groupId":"15599","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"loadWhenMultipleLoadersSupportLocationThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/0aa74b3819012abfdf341960fe7dfcee8ef1a2.src","preCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataLocation location = new TestConfigDataLocation(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tConfigDataLocationNotFoundAction.FAIL,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for location test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"1cf9fc107e5ed29a44935688eaca2bf6fa85108b","commitMessage":"@@@Improve ConfigData processing code\n\nRefactor `ConfigData` processing code to make it less awkward to\nfollow.\n\nPrior to this commit the `ConfigDataLocationResolver` would take a\nString location and return a `ConfigDataLocation` instance. This was\na little confusing since sometimes we would refer to `location` as the\nString value.  and sometimes it would be the typed instance. We also\nhad nowhere sensible to put the `optional:` prefix logic and we needed\nto pass a `boolean` parameter to a number of methods. The recently\nintroduced `Orgin` support also didn't have a good home.\n\nTo solve this.  `ConfigDataLocation` has been renamed to\n`ConfigDataResource`. This frees up `ConfigDataLocation` to be used\nas a richer `location` type that holds the String value.  the `Orgin`\nand provides a home for the `optional:` logic.\n\nThis commit also cleans up a few other areas of the code.  including\nrenaming `ResourceConfigData...` to `StandardConfigData...`. It also\nintroduces a new exception hierarchy for `ConfigDataNotFoundExceptions`.\n\nCloses gh-23711\n","date":"2020-10-16 02:33:57","modifiedFileCount":"41","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-05-17 16:15:00","codes":[{"authorDate":"2020-10-14 05:43:34","commitOrder":7,"curCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","date":"2020-10-16 02:33:57","endLine":74,"groupId":"15597","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/0aa74b3819012abfdf341960fe7dfcee8ef1a2.src","preCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2021-05-17 16:15:00","commitOrder":7,"curCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for resource 'test'\");\n\t}\n","date":"2021-05-17 16:15:00","endLine":97,"groupId":"15599","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"loadWhenMultipleLoadersSupportLocationThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b6/ddb6e6ae1700d776172d12633069793f00b783.src","preCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() throws Exception {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for resource 'test'\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"21a3f03d20a24934e38a26843872778598da7ad3","commitMessage":"@@@Merge pull request #26441 from weixsun\n\n* pr/26441:\n  Polish \"Remove unnecessary throws declaration in tests\"\n  Remove unnecessary throws declaration in tests\n\nCloses gh-26441\n","date":"2021-05-17 16:15:00","modifiedFileCount":"172","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2021-06-24 15:04:44","codes":[{"authorDate":"2021-06-24 15:04:44","commitOrder":8,"curCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext, null,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","date":"2021-06-24 15:04:44","endLine":88,"groupId":"101723","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3b/d6ad6a988932304509602731a0dbd6cc71a424.src","preCode":"\tvoid loadWhenSingleLoaderSupportsLocationReturnsLoadedConfigData() throws Exception {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tArrays.asList(TestConfigDataLoader.class.getName()));\n\t\tConfigData loaded = loaders.load(this.context, location);\n\t\tassertThat(getLoader(loaded)).isInstanceOf(TestConfigDataLoader.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2021-06-24 15:04:44","commitOrder":8,"curCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext, null,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for resource 'test'\");\n\t}\n","date":"2021-06-24 15:04:44","endLine":97,"groupId":"101723","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"loadWhenMultipleLoadersSupportLocationThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3b/d6ad6a988932304509602731a0dbd6cc71a424.src","preCode":"\tvoid loadWhenMultipleLoadersSupportLocationThrowsException() {\n\t\tTestConfigDataResource location = new TestConfigDataResource(\"test\");\n\t\tConfigDataLoaders loaders = new ConfigDataLoaders(this.logFactory, this.bootstrapContext,\n\t\t\t\tArrays.asList(LoggingConfigDataLoader.class.getName(), TestConfigDataLoader.class.getName()));\n\t\tassertThatIllegalStateException().isThrownBy(() -> loaders.load(this.context, location))\n\t\t\t\t.withMessageContaining(\"Multiple loaders found for resource 'test'\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLoadersTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"6686a49b1f8d576c64230b2f6c332d0f504e5b89","commitMessage":"@@@Merge branch '2.5.x'\n\nCloses gh-27074\n","date":"2021-06-24 15:04:44","modifiedFileCount":"5","status":"M","submitter":"Phillip Webb"}]
