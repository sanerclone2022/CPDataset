[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void exitWithExplicitCodeFromException() throws Exception {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","date":"2017-10-05 11:18:56","endLine":665,"groupId":"2039","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"exitWithExplicitCodeFromException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fa/493d81f5e428b159f4a804648dffee325268c7.src","preCode":"\tpublic void exitWithExplicitCodeFromException() throws Exception {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void exitWithExplicitCodeFromMappedException() throws Exception {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tMappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","date":"2017-10-05 11:18:56","endLine":690,"groupId":"2039","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"exitWithExplicitCodeFromMappedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fa/493d81f5e428b159f4a804648dffee325268c7.src","preCode":"\tpublic void exitWithExplicitCodeFromMappedException() throws Exception {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tMappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void exitWithExplicitCodeFromException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","date":"2017-12-12 18:57:30","endLine":696,"groupId":"2039","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"exitWithExplicitCodeFromException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1e/de3d5a84ed0656d647a5905984c4106b295996.src","preCode":"\tpublic void exitWithExplicitCodeFromException() throws Exception {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":674,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void exitWithExplicitCodeFromMappedException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tMappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","date":"2017-12-12 18:57:30","endLine":721,"groupId":"2039","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"exitWithExplicitCodeFromMappedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1e/de3d5a84ed0656d647a5905984c4106b295996.src","preCode":"\tpublic void exitWithExplicitCodeFromMappedException() throws Exception {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tMappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":699,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-02-04 20:36:33","codes":[{"authorDate":"2019-02-04 20:36:33","commitOrder":3,"curCode":"\tpublic void exitWithExplicitCodeFromException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","date":"2019-02-04 20:36:33","endLine":850,"groupId":"6347","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"exitWithExplicitCodeFromException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/5e1ace377dac820ab232feac62b2fe9c1aae17.src","preCode":"\tpublic void exitWithExplicitCodeFromException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":833,"status":"M"},{"authorDate":"2019-02-04 20:36:33","commitOrder":3,"curCode":"\tpublic void exitWithExplicitCodeFromMappedException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tMappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","date":"2019-02-04 20:36:33","endLine":870,"groupId":"6347","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"exitWithExplicitCodeFromMappedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/5e1ace377dac820ab232feac62b2fe9c1aae17.src","preCode":"\tpublic void exitWithExplicitCodeFromMappedException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(\n\t\t\t\tMappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\ttry {\n\t\t\tapplication.run();\n\t\t\tfail(\"Did not throw\");\n\t\t}\n\t\tcatch (IllegalStateException ex) {\n\t\t}\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"M"}],"commitId":"45cc649c7db6c5f205f512878956890078d2ecbf","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-02-04 20:36:33","modifiedFileCount":"26","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid exitWithExplicitCodeFromException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(ExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","date":"2019-06-07 19:25:54","endLine":788,"groupId":"101859","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"exitWithExplicitCodeFromException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/b7ed11c647d2d175a7e722635161ed6ad25db5.src","preCode":"\tpublic void exitWithExplicitCodeFromException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(ExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":772,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid exitWithExplicitCodeFromMappedException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(MappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","date":"2019-06-07 19:25:54","endLine":807,"groupId":"101859","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"exitWithExplicitCodeFromMappedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/b7ed11c647d2d175a7e722635161ed6ad25db5.src","preCode":"\tpublic void exitWithExplicitCodeFromMappedException() {\n\t\tfinal SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);\n\t\tSpringApplication application = new SpringApplication(MappedExitCodeCommandLineRunConfig.class) {\n\n\t\t\t@Override\n\t\t\tSpringBootExceptionHandler getSpringBootExceptionHandler() {\n\t\t\t\treturn handler;\n\t\t\t}\n\n\t\t};\n\t\tExitCodeListener listener = new ExitCodeListener();\n\t\tapplication.addListeners(listener);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tassertThatIllegalStateException().isThrownBy(application::run);\n\t\tverify(handler).registerExitCode(11);\n\t\tassertThat(listener.getExitCode()).isEqualTo(11);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
