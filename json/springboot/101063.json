[{"authorTime":"2018-09-01 08:17:28","codes":[{"authorDate":"2018-09-01 08:17:28","commitOrder":1,"curCode":"\tpublic void shouldApplySpringSecurityConfigurer() {\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(webTestClient, \"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(httpHandlerBuilder, \"filters\");\n\t\t\t\t\tassertThat(filters.get(0).getClass().getName()).isEqualTo(\n\t\t\t\t\t\t\t\"org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter\");\n\t\t\t\t});\n\t}\n","date":"2018-09-12 04:28:13","endLine":103,"groupId":"14851","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldApplySpringSecurityConfigurer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/38/01dbb9734e3c694400a01e06c4e0612440a6b2.src","preCode":"\tpublic void shouldApplySpringSecurityConfigurer() {\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(webTestClient, \"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(httpHandlerBuilder, \"filters\");\n\t\t\t\t\tassertThat(filters.get(0).getClass().getName()).isEqualTo(\n\t\t\t\t\t\t\t\"org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"},{"authorDate":"2018-09-01 08:17:28","commitOrder":1,"curCode":"\tpublic void shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath() {\n\t\tFilteredClassLoader classLoader = new FilteredClassLoader(\n\t\t\t\tSecurityMockServerConfigurers.class);\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class)\n\t\t\t\t.withClassLoader(classLoader).run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(webTestClient, \"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(httpHandlerBuilder, \"filters\");\n\t\t\t\t\tassertThat(filters.size()).isEqualTo(0);\n\t\t\t\t});\n\t}\n","date":"2018-09-12 04:28:13","endLine":121,"groupId":"14851","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/38/01dbb9734e3c694400a01e06c4e0612440a6b2.src","preCode":"\tpublic void shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath() {\n\t\tFilteredClassLoader classLoader = new FilteredClassLoader(\n\t\t\t\tSecurityMockServerConfigurers.class);\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class)\n\t\t\t\t.withClassLoader(classLoader).run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(webTestClient, \"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(httpHandlerBuilder, \"filters\");\n\t\t\t\t\tassertThat(filters.size()).isEqualTo(0);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"ab6bdc7ae20a4990d20cf39f0ce20d3846e1b739","commitMessage":"@@@Apply springSecurity configurer to WebTestClient\n\nAlso.  @WebFluxTest now adds any ServerHttpSecurity beans\nto the context.\n\nCloses gh-13632\n","date":"2018-09-12 04:28:13","modifiedFileCount":"9","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2018-09-20 15:51:32","codes":[{"authorDate":"2018-09-01 08:17:28","commitOrder":2,"curCode":"\tpublic void shouldApplySpringSecurityConfigurer() {\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(webTestClient, \"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(httpHandlerBuilder, \"filters\");\n\t\t\t\t\tassertThat(filters.get(0).getClass().getName()).isEqualTo(\n\t\t\t\t\t\t\t\"org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter\");\n\t\t\t\t});\n\t}\n","date":"2018-09-12 04:28:13","endLine":103,"groupId":"14851","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldApplySpringSecurityConfigurer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/38/01dbb9734e3c694400a01e06c4e0612440a6b2.src","preCode":"\tpublic void shouldApplySpringSecurityConfigurer() {\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(webTestClient, \"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(httpHandlerBuilder, \"filters\");\n\t\t\t\t\tassertThat(filters.get(0).getClass().getName()).isEqualTo(\n\t\t\t\t\t\t\t\"org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2018-09-20 15:51:32","commitOrder":2,"curCode":"\tpublic void shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath() {\n\t\tFilteredClassLoader classLoader = new FilteredClassLoader(\n\t\t\t\tSecurityMockServerConfigurers.class);\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class)\n\t\t\t\t.withClassLoader(classLoader).run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(webTestClient, \"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(httpHandlerBuilder, \"filters\");\n\t\t\t\t\tassertThat(filters).isEmpty();\n\t\t\t\t});\n\t}\n","date":"2018-09-20 15:51:32","endLine":121,"groupId":"14851","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/17/4213bcc0cce0ae7fe3f521dceaf7a252b198ef.src","preCode":"\tpublic void shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath() {\n\t\tFilteredClassLoader classLoader = new FilteredClassLoader(\n\t\t\t\tSecurityMockServerConfigurers.class);\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class)\n\t\t\t\t.withClassLoader(classLoader).run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(webTestClient, \"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(httpHandlerBuilder, \"filters\");\n\t\t\t\t\tassertThat(filters.size()).isEqualTo(0);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"f67067715b0f2bfd0042fe7a42af7cef078f48e7","commitMessage":"@@@Merge pull request #14517 from izeye:polish-20180920\n\n* pr/14517:\n  Polish\n","date":"2018-09-20 15:51:32","modifiedFileCount":"8","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid shouldApplySpringSecurityConfigurer() {\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> {\n\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils.getField(webTestClient,\n\t\t\t\t\t\"builder\");\n\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils.getField(builder,\n\t\t\t\t\t\"httpHandlerBuilder\");\n\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils.getField(httpHandlerBuilder, \"filters\");\n\t\t\tassertThat(filters.get(0).getClass().getName()).isEqualTo(\n\t\t\t\t\t\"org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter\");\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":96,"groupId":"101063","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldApplySpringSecurityConfigurer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e9/941f77044ad209c4fe4cfcc890f5dec849c120.src","preCode":"\tpublic void shouldApplySpringSecurityConfigurer() {\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> {\n\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils.getField(webTestClient,\n\t\t\t\t\t\"builder\");\n\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils.getField(builder,\n\t\t\t\t\t\"httpHandlerBuilder\");\n\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils.getField(httpHandlerBuilder, \"filters\");\n\t\t\tassertThat(filters.get(0).getClass().getName()).isEqualTo(\n\t\t\t\t\t\"org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath() {\n\t\tFilteredClassLoader classLoader = new FilteredClassLoader(SecurityMockServerConfigurers.class);\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class).withClassLoader(classLoader)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils.getField(webTestClient,\n\t\t\t\t\t\t\t\"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils.getField(httpHandlerBuilder,\n\t\t\t\t\t\t\t\"filters\");\n\t\t\t\t\tassertThat(filters).isEmpty();\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":113,"groupId":"101063","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e9/941f77044ad209c4fe4cfcc890f5dec849c120.src","preCode":"\tpublic void shouldNotApplySpringSecurityConfigurerWhenSpringSecurityNotOnClassPath() {\n\t\tFilteredClassLoader classLoader = new FilteredClassLoader(SecurityMockServerConfigurers.class);\n\t\tthis.contextRunner.withUserConfiguration(BaseConfiguration.class).withClassLoader(classLoader)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = context.getBean(WebTestClient.class);\n\t\t\t\t\tWebTestClient.Builder builder = (WebTestClient.Builder) ReflectionTestUtils.getField(webTestClient,\n\t\t\t\t\t\t\t\"builder\");\n\t\t\t\t\tWebHttpHandlerBuilder httpHandlerBuilder = (WebHttpHandlerBuilder) ReflectionTestUtils\n\t\t\t\t\t\t\t.getField(builder, \"httpHandlerBuilder\");\n\t\t\t\t\tList<WebFilter> filters = (List<WebFilter>) ReflectionTestUtils.getField(httpHandlerBuilder,\n\t\t\t\t\t\t\t\"filters\");\n\t\t\t\t\tassertThat(filters).isEmpty();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
