[{"authorTime":"2020-06-11 09:52:32","codes":[{"authorDate":"2019-06-30 06:53:56","commitOrder":4,"curCode":"\tvoid getLoggingConfigurations() {\n\t\tthis.loggingSystem.beforeInitialize();\n\t\tthis.loggingSystem.initialize(this.initializationContext, null, null);\n\t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n\t\tList<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations();\n\t\tassertThat(configurations).isNotEmpty();\n\t\tassertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME);\n\t}\n","date":"2019-06-30 06:53:56","endLine":196,"groupId":"7966","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getLoggingConfigurations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/14/f71ae79ea54790e38db9ccd6e440fc1cfb6154.src","preCode":"\tvoid getLoggingConfigurations() {\n\t\tthis.loggingSystem.beforeInitialize();\n\t\tthis.loggingSystem.initialize(this.initializationContext, null, null);\n\t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n\t\tList<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations();\n\t\tassertThat(configurations).isNotEmpty();\n\t\tassertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"NB"},{"authorDate":"2020-06-11 09:52:32","commitOrder":4,"curCode":"\tvoid getLoggingConfigurationsShouldReturnAllLoggers() {\n\t\tLogManager.getLogger(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests$Nested\");\n\t\tthis.loggingSystem.beforeInitialize();\n\t\tthis.loggingSystem.initialize(null, null, null);\n\t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n\t\tList<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations();\n\t\tassertThat(configurations).isNotEmpty();\n\t\tassertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME);\n\t\tMap<String, LogLevel> loggers = new LinkedHashMap<>();\n\t\tconfigurations.forEach((logger) -> loggers.put(logger.getName(), logger.getConfiguredLevel()));\n\t\tassertIsPresent(\"org\", loggers, null);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2\", loggers, null);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests\", loggers, LogLevel.DEBUG);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests$Nested\", loggers, null);\n\t}\n","date":"2020-06-11 09:52:32","endLine":193,"groupId":"7966","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getLoggingConfigurationsShouldReturnAllLoggers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4c/cc6bb31a7297fb6550dee60be8f1e07bd7c486.src","preCode":"\tvoid getLoggingConfigurationsShouldReturnAllLoggers() {\n\t\tLogManager.getLogger(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests$Nested\");\n\t\tthis.loggingSystem.beforeInitialize();\n\t\tthis.loggingSystem.initialize(null, null, null);\n\t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n\t\tList<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations();\n\t\tassertThat(configurations).isNotEmpty();\n\t\tassertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME);\n\t\tMap<String, LogLevel> loggers = new LinkedHashMap<>();\n\t\tconfigurations.forEach((logger) -> loggers.put(logger.getName(), logger.getConfiguredLevel()));\n\t\tassertIsPresent(\"org\", loggers, null);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2\", loggers, null);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests\", loggers, LogLevel.DEBUG);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests$Nested\", loggers, null);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"f96a2f2b8321f2321fbf9418c8018771370adb5a","commitMessage":"@@@Merge branch '2.3.x'\n\nCloses gh-21881\n","date":"2020-06-11 09:52:32","modifiedFileCount":"3","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2020-06-11 09:52:32","codes":[{"authorDate":"2020-10-22 07:05:14","commitOrder":5,"curCode":"\tvoid getLoggingConfigurations() {\n\t\tthis.loggingSystem.beforeInitialize();\n\t\tinitialize(this.initializationContext, null, null);\n\t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n\t\tList<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations();\n\t\tassertThat(configurations).isNotEmpty();\n\t\tassertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME);\n\t}\n","date":"2020-10-23 03:55:02","endLine":212,"groupId":"101094","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getLoggingConfigurations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/64/e8170081155f450b4c996aaaadd19b5ab5346c.src","preCode":"\tvoid getLoggingConfigurations() {\n\t\tthis.loggingSystem.beforeInitialize();\n\t\tthis.loggingSystem.initialize(this.initializationContext, null, null);\n\t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n\t\tList<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations();\n\t\tassertThat(configurations).isNotEmpty();\n\t\tassertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2020-06-11 09:52:32","commitOrder":5,"curCode":"\tvoid getLoggingConfigurationsShouldReturnAllLoggers() {\n\t\tLogManager.getLogger(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests$Nested\");\n\t\tthis.loggingSystem.beforeInitialize();\n\t\tthis.loggingSystem.initialize(null, null, null);\n\t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n\t\tList<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations();\n\t\tassertThat(configurations).isNotEmpty();\n\t\tassertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME);\n\t\tMap<String, LogLevel> loggers = new LinkedHashMap<>();\n\t\tconfigurations.forEach((logger) -> loggers.put(logger.getName(), logger.getConfiguredLevel()));\n\t\tassertIsPresent(\"org\", loggers, null);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2\", loggers, null);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests\", loggers, LogLevel.DEBUG);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests$Nested\", loggers, null);\n\t}\n","date":"2020-06-11 09:52:32","endLine":193,"groupId":"101094","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getLoggingConfigurationsShouldReturnAllLoggers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4c/cc6bb31a7297fb6550dee60be8f1e07bd7c486.src","preCode":"\tvoid getLoggingConfigurationsShouldReturnAllLoggers() {\n\t\tLogManager.getLogger(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests$Nested\");\n\t\tthis.loggingSystem.beforeInitialize();\n\t\tthis.loggingSystem.initialize(null, null, null);\n\t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n\t\tList<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations();\n\t\tassertThat(configurations).isNotEmpty();\n\t\tassertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME);\n\t\tMap<String, LogLevel> loggers = new LinkedHashMap<>();\n\t\tconfigurations.forEach((logger) -> loggers.put(logger.getName(), logger.getConfiguredLevel()));\n\t\tassertIsPresent(\"org\", loggers, null);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2\", loggers, null);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests\", loggers, LogLevel.DEBUG);\n\t\tassertIsPresent(\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests$Nested\", loggers, null);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"N"}],"commitId":"1725594a0edae57a50614210f094e59b6edca305","commitMessage":"@@@Rationalize Logback logging properties\n\nDeprecate and provide alternatives for logging properties that are\nspecific to Logback.\n\nThe following Spring Boot properties have been changed:\n\n  * logging.pattern.rolling-file-name ->\n    logging.logback.rollingpolicy.file-name-pattern\n\n  * logging.file.clean-history-on-start ->\n    logging.logback.rollingpolicy.clean-history-on-start\n\n  * logging.file.max-size ->\n    logging.logback.rollingpolicy.max-file-size\n\n  * logging.file.total-size-cap ->\n    logging.logback.rollingpolicy.total-size-cap\n\n  * logging.file.max-history ->\n    logging.logback.rollingpolicy.max-history\n\nAs have the system environment properties that they map to:\n\n  * ROLLING_FILE_NAME_PATTERN ->\n    LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN\n\n  * LOG_FILE_CLEAN_HISTORY_ON_START ->\n    LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START\n\n  * LOG_FILE_MAX_SIZE ->\n    LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE\n\n  * LOG_FILE_TOTAL_SIZE_CAP ->\n    LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP\n\n  * LOG_FILE_MAX_HISTORY ->\n    LOGBACK_ROLLINGPOLICY_MAX_HISTORY\n\nThis commit also cleans up and simplifies `DefaultLogbackConfiguration`.\n\nCloses gh-23609\n","date":"2020-10-23 03:55:02","modifiedFileCount":"8","status":"M","submitter":"Phillip Webb"}]
