[{"authorTime":"2019-07-15 20:29:12","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":2,"curCode":"\tprivate static ServiceLocator createServiceLocator() {\n\t\tDefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tlocator.addService(RepositorySystem.class, DefaultRepositorySystem.class);\n\t\tlocator.addService(RepositoryConnectorFactory.class,\n\t\t\t\tBasicRepositoryConnectorFactory.class);\n\t\tlocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tlocator.addService(TransporterFactory.class, FileTransporterFactory.class);\n\t\treturn locator;\n\t}\n","date":"2017-10-05 11:18:56","endLine":72,"groupId":"1589","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createServiceLocator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/94/6e5cd1d29a5e778ebf481e35a1b06bbdef8d7e.src","preCode":"\tprivate static ServiceLocator createServiceLocator() {\n\t\tDefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tlocator.addService(RepositorySystem.class, DefaultRepositorySystem.class);\n\t\tlocator.addService(RepositoryConnectorFactory.class,\n\t\t\t\tBasicRepositoryConnectorFactory.class);\n\t\tlocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tlocator.addService(TransporterFactory.class, FileTransporterFactory.class);\n\t\treturn locator;\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"},{"authorDate":"2019-07-15 20:29:12","commitOrder":2,"curCode":"\tprivate static List<URL> resolveCoordinates(String[] coordinates) {\n\t\tDefaultServiceLocator serviceLocator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tserviceLocator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n\t\tserviceLocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tRepositorySystem repositorySystem = serviceLocator.getService(RepositorySystem.class);\n\t\tDefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\t\tLocalRepository localRepository = new LocalRepository(System.getProperty(\"user.home\") + \"/.m2/repository\");\n\t\tsession.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(session, localRepository));\n\t\tCollectRequest collectRequest = new CollectRequest(null, Arrays.asList(\n\t\t\t\tnew RemoteRepository.Builder(\"central\", \"default\", \"https://repo.maven.apache.org/maven2\").build()));\n\n\t\tcollectRequest.setDependencies(createDependencies(coordinates));\n\t\tDependencyRequest dependencyRequest = new DependencyRequest(collectRequest, null);\n\t\ttry {\n\t\t\tDependencyResult result = repositorySystem.resolveDependencies(session, dependencyRequest);\n\t\t\tList<URL> resolvedArtifacts = new ArrayList<>();\n\t\t\tfor (ArtifactResult artifact : result.getArtifactResults()) {\n\t\t\t\tresolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL());\n\t\t\t}\n\t\t\treturn resolvedArtifacts;\n\t\t}\n\t\tcatch (Exception ignored) {\n\t\t\treturn Collections.emptyList();\n\n\t\t}\n\t}\n","date":"2019-07-15 20:40:26","endLine":209,"groupId":"15263","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveCoordinates","params":"(String[]coordinates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/07/d2ba543755e257955961bead1f0aee927e606d.src","preCode":"\tprivate static List<URL> resolveCoordinates(String[] coordinates) {\n\t\tDefaultServiceLocator serviceLocator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tserviceLocator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n\t\tserviceLocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tRepositorySystem repositorySystem = serviceLocator.getService(RepositorySystem.class);\n\t\tDefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\t\tLocalRepository localRepository = new LocalRepository(System.getProperty(\"user.home\") + \"/.m2/repository\");\n\t\tsession.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(session, localRepository));\n\t\tCollectRequest collectRequest = new CollectRequest(null, Arrays.asList(\n\t\t\t\tnew RemoteRepository.Builder(\"central\", \"default\", \"https://repo.maven.apache.org/maven2\").build()));\n\n\t\tcollectRequest.setDependencies(createDependencies(coordinates));\n\t\tDependencyRequest dependencyRequest = new DependencyRequest(collectRequest, null);\n\t\ttry {\n\t\t\tDependencyResult result = repositorySystem.resolveDependencies(session, dependencyRequest);\n\t\t\tList<URL> resolvedArtifacts = new ArrayList<>();\n\t\t\tfor (ArtifactResult artifact : result.getArtifactResults()) {\n\t\t\t\tresolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL());\n\t\t\t}\n\t\t\treturn resolvedArtifacts;\n\t\t}\n\t\tcatch (Exception ignored) {\n\t\t\treturn Collections.emptyList();\n\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/classpath/ModifiedClassPathClassLoader.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"}],"commitId":"eff1147cccb72483267dd82f33b15e359fb70a8f","commitMessage":"@@@Rename classpath runner package\n\nRemove `runner` since we're no longer tied to JUnit 4.\n\nSee gh-17491\n","date":"2019-07-15 20:40:26","modifiedFileCount":"35","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-08-06 22:14:16","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":3,"curCode":"\tprivate static ServiceLocator createServiceLocator() {\n\t\tDefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tlocator.addService(RepositorySystem.class, DefaultRepositorySystem.class);\n\t\tlocator.addService(RepositoryConnectorFactory.class,\n\t\t\t\tBasicRepositoryConnectorFactory.class);\n\t\tlocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tlocator.addService(TransporterFactory.class, FileTransporterFactory.class);\n\t\treturn locator;\n\t}\n","date":"2017-10-05 11:18:56","endLine":72,"groupId":"1589","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createServiceLocator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/94/6e5cd1d29a5e778ebf481e35a1b06bbdef8d7e.src","preCode":"\tprivate static ServiceLocator createServiceLocator() {\n\t\tDefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tlocator.addService(RepositorySystem.class, DefaultRepositorySystem.class);\n\t\tlocator.addService(RepositoryConnectorFactory.class,\n\t\t\t\tBasicRepositoryConnectorFactory.class);\n\t\tlocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tlocator.addService(TransporterFactory.class, FileTransporterFactory.class);\n\t\treturn locator;\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2020-08-06 22:14:16","commitOrder":3,"curCode":"\tprivate static List<URL> resolveCoordinates(String[] coordinates) {\n\t\tException latestFailure = null;\n\t\tDefaultServiceLocator serviceLocator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tserviceLocator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n\t\tserviceLocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tRepositorySystem repositorySystem = serviceLocator.getService(RepositorySystem.class);\n\t\tDefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\t\tLocalRepository localRepository = new LocalRepository(System.getProperty(\"user.home\") + \"/.m2/repository\");\n\t\tsession.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(session, localRepository));\n\t\tfor (int i = 0; i < MAX_RESOLUTION_ATTEMPTS; i++) {\n\t\t\tCollectRequest collectRequest = new CollectRequest(null,\n\t\t\t\t\tArrays.asList(\n\t\t\t\t\t\t\tnew RemoteRepository.Builder(\"central\", \"default\", \"https://repo.maven.apache.org/maven2\")\n\t\t\t\t\t\t\t\t\t.build()));\n\t\t\tcollectRequest.setDependencies(createDependencies(coordinates));\n\t\t\tDependencyRequest dependencyRequest = new DependencyRequest(collectRequest, null);\n\t\t\ttry {\n\t\t\t\tDependencyResult result = repositorySystem.resolveDependencies(session, dependencyRequest);\n\t\t\t\tList<URL> resolvedArtifacts = new ArrayList<>();\n\t\t\t\tfor (ArtifactResult artifact : result.getArtifactResults()) {\n\t\t\t\t\tresolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL());\n\t\t\t\t}\n\t\t\t\treturn resolvedArtifacts;\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tlatestFailure = ex;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\"Resolution failed after \" + MAX_RESOLUTION_ATTEMPTS + \" attempts\",\n\t\t\t\tlatestFailure);\n\t}\n","date":"2020-08-06 22:14:16","endLine":224,"groupId":"8590","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveCoordinates","params":"(String[]coordinates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/39/b6ba5d4145a972218e24bd1f275002519cdc07.src","preCode":"\tprivate static List<URL> resolveCoordinates(String[] coordinates) {\n\t\tDefaultServiceLocator serviceLocator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tserviceLocator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n\t\tserviceLocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tRepositorySystem repositorySystem = serviceLocator.getService(RepositorySystem.class);\n\t\tDefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\t\tLocalRepository localRepository = new LocalRepository(System.getProperty(\"user.home\") + \"/.m2/repository\");\n\t\tsession.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(session, localRepository));\n\t\tCollectRequest collectRequest = new CollectRequest(null, Arrays.asList(\n\t\t\t\tnew RemoteRepository.Builder(\"central\", \"default\", \"https://repo.maven.apache.org/maven2\").build()));\n\n\t\tcollectRequest.setDependencies(createDependencies(coordinates));\n\t\tDependencyRequest dependencyRequest = new DependencyRequest(collectRequest, null);\n\t\ttry {\n\t\t\tDependencyResult result = repositorySystem.resolveDependencies(session, dependencyRequest);\n\t\t\tList<URL> resolvedArtifacts = new ArrayList<>();\n\t\t\tfor (ArtifactResult artifact : result.getArtifactResults()) {\n\t\t\t\tresolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL());\n\t\t\t}\n\t\t\treturn resolvedArtifacts;\n\t\t}\n\t\tcatch (Exception ignored) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/classpath/ModifiedClassPathClassLoader.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"8b3f8a6138760512728f94f3734c8fa942b3ecfc","commitMessage":"@@@Merge branch '2.3.x'\n\nCloses gh-22768\n","date":"2020-08-06 22:14:16","modifiedFileCount":"1","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-08-07 01:15:36","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":4,"curCode":"\tprivate static ServiceLocator createServiceLocator() {\n\t\tDefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tlocator.addService(RepositorySystem.class, DefaultRepositorySystem.class);\n\t\tlocator.addService(RepositoryConnectorFactory.class,\n\t\t\t\tBasicRepositoryConnectorFactory.class);\n\t\tlocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tlocator.addService(TransporterFactory.class, FileTransporterFactory.class);\n\t\treturn locator;\n\t}\n","date":"2017-10-05 11:18:56","endLine":72,"groupId":"10648","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createServiceLocator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/94/6e5cd1d29a5e778ebf481e35a1b06bbdef8d7e.src","preCode":"\tprivate static ServiceLocator createServiceLocator() {\n\t\tDefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tlocator.addService(RepositorySystem.class, DefaultRepositorySystem.class);\n\t\tlocator.addService(RepositoryConnectorFactory.class,\n\t\t\t\tBasicRepositoryConnectorFactory.class);\n\t\tlocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tlocator.addService(TransporterFactory.class, FileTransporterFactory.class);\n\t\treturn locator;\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2020-08-07 01:15:36","commitOrder":4,"curCode":"\tprivate static List<URL> resolveCoordinates(String[] coordinates) {\n\t\tException latestFailure = null;\n\t\tDefaultServiceLocator serviceLocator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tserviceLocator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n\t\tserviceLocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tRepositorySystem repositorySystem = serviceLocator.getService(RepositorySystem.class);\n\t\tDefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\t\tLocalRepository localRepository = new LocalRepository(System.getProperty(\"user.home\") + \"/.m2/repository\");\n\t\tRemoteRepository remoteRepository = new RemoteRepository.Builder(\"central\", \"default\",\n\t\t\t\t\"https://repo.maven.apache.org/maven2\").build();\n\t\tsession.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(session, localRepository));\n\t\tfor (int i = 0; i < MAX_RESOLUTION_ATTEMPTS; i++) {\n\t\t\tCollectRequest collectRequest = new CollectRequest(null, Arrays.asList(remoteRepository));\n\t\t\tcollectRequest.setDependencies(createDependencies(coordinates));\n\t\t\tDependencyRequest dependencyRequest = new DependencyRequest(collectRequest, null);\n\t\t\ttry {\n\t\t\t\tDependencyResult result = repositorySystem.resolveDependencies(session, dependencyRequest);\n\t\t\t\tList<URL> resolvedArtifacts = new ArrayList<>();\n\t\t\t\tfor (ArtifactResult artifact : result.getArtifactResults()) {\n\t\t\t\t\tresolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL());\n\t\t\t\t}\n\t\t\t\treturn resolvedArtifacts;\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tlatestFailure = ex;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\"Resolution failed after \" + MAX_RESOLUTION_ATTEMPTS + \" attempts\",\n\t\t\t\tlatestFailure);\n\t}\n","date":"2020-08-07 01:15:36","endLine":223,"groupId":"10648","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveCoordinates","params":"(String[]coordinates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/21/c0a75cc816071820ebdf91f2579ef165f5592b.src","preCode":"\tprivate static List<URL> resolveCoordinates(String[] coordinates) {\n\t\tException latestFailure = null;\n\t\tDefaultServiceLocator serviceLocator = MavenRepositorySystemUtils.newServiceLocator();\n\t\tserviceLocator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n\t\tserviceLocator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n\t\tRepositorySystem repositorySystem = serviceLocator.getService(RepositorySystem.class);\n\t\tDefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n\t\tLocalRepository localRepository = new LocalRepository(System.getProperty(\"user.home\") + \"/.m2/repository\");\n\t\tsession.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(session, localRepository));\n\t\tfor (int i = 0; i < MAX_RESOLUTION_ATTEMPTS; i++) {\n\t\t\tCollectRequest collectRequest = new CollectRequest(null,\n\t\t\t\t\tArrays.asList(\n\t\t\t\t\t\t\tnew RemoteRepository.Builder(\"central\", \"default\", \"https://repo.maven.apache.org/maven2\")\n\t\t\t\t\t\t\t\t\t.build()));\n\t\t\tcollectRequest.setDependencies(createDependencies(coordinates));\n\t\t\tDependencyRequest dependencyRequest = new DependencyRequest(collectRequest, null);\n\t\t\ttry {\n\t\t\t\tDependencyResult result = repositorySystem.resolveDependencies(session, dependencyRequest);\n\t\t\t\tList<URL> resolvedArtifacts = new ArrayList<>();\n\t\t\t\tfor (ArtifactResult artifact : result.getArtifactResults()) {\n\t\t\t\t\tresolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL());\n\t\t\t\t}\n\t\t\t\treturn resolvedArtifacts;\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tlatestFailure = ex;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\"Resolution failed after \" + MAX_RESOLUTION_ATTEMPTS + \" attempts\",\n\t\t\t\tlatestFailure);\n\t}\n","realPath":"spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/classpath/ModifiedClassPathClassLoader.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"8d06b0f368aa4b2a554125f7cdcef00f4fe85d05","commitMessage":"@@@Merge branch '2.3.x'\n","date":"2020-08-07 01:15:36","modifiedFileCount":"3","status":"M","submitter":"Phillip Webb"}]
