[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(\"LOG_EXCEPTION_CONVERSION_WORD\", \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null,\n\t\t\t\t\tgetLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"LOG_EXCEPTION_CONVERSION_WORD\");\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":376,"groupId":"8735","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2c/5b047bd6727c93556a231337b7b5cc5aaed4f7.src","preCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(\"LOG_EXCEPTION_CONVERSION_WORD\", \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null,\n\t\t\t\t\tgetLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"LOG_EXCEPTION_CONVERSION_WORD\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(\"LOG_EXCEPTION_CONVERSION_WORD\", \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, null, getLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"LOG_EXCEPTION_CONVERSION_WORD\");\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":278,"groupId":"8735","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/78de8ce7310dcfa1059d840b3f6d960b515207.src","preCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(\"LOG_EXCEPTION_CONVERSION_WORD\", \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, null, getLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"LOG_EXCEPTION_CONVERSION_WORD\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-06 23:00:50","codes":[{"authorDate":"2017-12-06 23:00:50","commitOrder":2,"curCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null,\n\t\t\t\t\tgetLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2017-12-06 23:00:50","endLine":413,"groupId":"8735","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e4/62af5649d95e489ad7db54480aa8bc22f4ec12.src","preCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(\"LOG_EXCEPTION_CONVERSION_WORD\", \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null,\n\t\t\t\t\tgetLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"LOG_EXCEPTION_CONVERSION_WORD\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"},{"authorDate":"2017-12-06 23:00:50","commitOrder":2,"curCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, null, getLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2017-12-06 23:00:50","endLine":279,"groupId":"8735","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5c/ca9f5ad29857f9bd631d379e1973f427e6cb2d.src","preCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(\"LOG_EXCEPTION_CONVERSION_WORD\", \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, null, getLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"LOG_EXCEPTION_CONVERSION_WORD\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"154d9284a8b035d6925a69fa2601b5a9124c4a7a","commitMessage":"@@@Merge pull request #11240 from Johnny Lim\n\n* gh-11240:\n  Polish \"Use LoggingSystemProperties constants\"\n  Use LoggingSystemProperties constants\n","date":"2017-12-06 23:00:50","modifiedFileCount":"9","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-01-28 17:09:08","codes":[{"authorDate":"2019-01-28 17:09:08","commitOrder":3,"curCode":"\tpublic void customExceptionConversionWord() {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null,\n\t\t\t\t\tgetLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2019-01-28 17:09:08","endLine":446,"groupId":"8735","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/11653037397b305df3f689f310a73f688acaa0.src","preCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null,\n\t\t\t\t\tgetLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"},{"authorDate":"2019-01-28 17:09:08","commitOrder":3,"curCode":"\tpublic void customExceptionConversionWord() {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, null, getLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2019-01-28 17:09:08","endLine":281,"groupId":"8735","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8c/2d6223548be5a156d3cb23ed7dc0e6008c1d57.src","preCode":"\tpublic void customExceptionConversionWord() throws Exception {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, null, getLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(\n\t\t\t\t\tcontainsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\",\n\t\t\t\t\tnew RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = FileCopyUtils\n\t\t\t\t\t.copyToString(new FileReader(new File(tmpDir() + \"/spring.log\")));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"e2532e1ef5a9d523869d70cdb131b1e25ee0271d","commitMessage":"@@@Merge pull request #15793 from dreis2211\n\n* pr/15793:\n  Use Assertions.contentOf() where possible\n","date":"2019-01-28 17:09:08","modifiedFileCount":"8","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-06-30 06:53:56","codes":[{"authorDate":"2019-06-30 06:53:56","commitOrder":4,"curCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null, getLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2019-06-30 06:53:56","endLine":474,"groupId":"3978","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"(CapturedOutputoutput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/14/f71ae79ea54790e38db9ccd6e440fc1cfb6154.src","preCode":"\tpublic void customExceptionConversionWord() {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null, getLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(containsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"M"},{"authorDate":"2019-06-30 06:53:56","commitOrder":4,"curCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, null, getLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2019-06-30 06:53:56","endLine":253,"groupId":"3978","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"(CapturedOutputoutput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6c/6320253e6a02add53321fb3ed1bf80ff820f24.src","preCode":"\tpublic void customExceptionConversionWord() {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, null, getLogFile(null, tmpDir()));\n\t\t\tMatcher<String> expectedOutput = Matchers.allOf(containsString(\"java.lang.RuntimeException: Expected\"),\n\t\t\t\t\tnot(containsString(\"Wrapped by:\")));\n\t\t\tthis.output.expect(expectedOutput);\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).is(Matched.by(expectedOutput));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"a5f430264968166c80f2a3d88bc0f96d0c3c2521","commitMessage":"@@@Merge pull request #17107 from L00kian\n\n* gh-17107:\n  Polish \"Migrate LogbackLoggingSystemTests to JUnit 5\"\n  Migrate LogbackLoggingSystemTests to JUnit 5\n\nCloses gh-17107\n","date":"2019-06-30 06:53:56","modifiedFileCount":"4","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-05-06 05:14:24","codes":[{"authorDate":"2019-06-30 06:53:56","commitOrder":5,"curCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null, getLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2019-06-30 06:53:56","endLine":474,"groupId":"3978","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"(CapturedOutputoutput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/14/f71ae79ea54790e38db9ccd6e440fc1cfb6154.src","preCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null, getLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"N"},{"authorDate":"2020-05-06 05:14:24","commitOrder":5,"curCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, getRelativeClasspathLocation(\"log4j2-file.xml\"),\n\t\t\t\t\tgetLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2020-05-06 05:14:24","endLine":277,"groupId":"13513","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"(CapturedOutputoutput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/4964e2e8a34b4ad60c91aba86f8d8a89e80973.src","preCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, null, getLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"}],"commitId":"f23d0501e4a7db003771780b1d2795fe50bc3561","commitMessage":"@@@Merge branch '2.2.x'\n\nCloses gh-21323\n","date":"2020-05-06 05:14:24","modifiedFileCount":"2","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2020-05-06 05:14:24","codes":[{"authorDate":"2020-10-22 07:05:14","commitOrder":6,"curCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tinitialize(this.initializationContext, null, getLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2020-10-23 03:55:02","endLine":488,"groupId":"101157","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"(CapturedOutputoutput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/64/e8170081155f450b4c996aaaadd19b5ab5346c.src","preCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(this.initializationContext, null, getLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"},{"authorDate":"2020-05-06 05:14:24","commitOrder":6,"curCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, getRelativeClasspathLocation(\"log4j2-file.xml\"),\n\t\t\t\t\tgetLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","date":"2020-05-06 05:14:24","endLine":277,"groupId":"101157","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"customExceptionConversionWord","params":"(CapturedOutputoutput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/4964e2e8a34b4ad60c91aba86f8d8a89e80973.src","preCode":"\tvoid customExceptionConversionWord(CapturedOutput output) {\n\t\tSystem.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, \"%ex\");\n\t\ttry {\n\t\t\tthis.loggingSystem.beforeInitialize();\n\t\t\tthis.logger.info(\"Hidden\");\n\t\t\tthis.loggingSystem.initialize(null, getRelativeClasspathLocation(\"log4j2-file.xml\"),\n\t\t\t\t\tgetLogFile(null, tmpDir()));\n\t\t\tthis.logger.warn(\"Expected exception\", new RuntimeException(\"Expected\", new RuntimeException(\"Cause\")));\n\t\t\tString fileContents = contentOf(new File(tmpDir() + \"/spring.log\"));\n\t\t\tassertThat(fileContents).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t\tassertThat(output).contains(\"java.lang.RuntimeException: Expected\").doesNotContain(\"Wrapped by:\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"1725594a0edae57a50614210f094e59b6edca305","commitMessage":"@@@Rationalize Logback logging properties\n\nDeprecate and provide alternatives for logging properties that are\nspecific to Logback.\n\nThe following Spring Boot properties have been changed:\n\n  * logging.pattern.rolling-file-name ->\n    logging.logback.rollingpolicy.file-name-pattern\n\n  * logging.file.clean-history-on-start ->\n    logging.logback.rollingpolicy.clean-history-on-start\n\n  * logging.file.max-size ->\n    logging.logback.rollingpolicy.max-file-size\n\n  * logging.file.total-size-cap ->\n    logging.logback.rollingpolicy.total-size-cap\n\n  * logging.file.max-history ->\n    logging.logback.rollingpolicy.max-history\n\nAs have the system environment properties that they map to:\n\n  * ROLLING_FILE_NAME_PATTERN ->\n    LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN\n\n  * LOG_FILE_CLEAN_HISTORY_ON_START ->\n    LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START\n\n  * LOG_FILE_MAX_SIZE ->\n    LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE\n\n  * LOG_FILE_TOTAL_SIZE_CAP ->\n    LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP\n\n  * LOG_FILE_MAX_HISTORY ->\n    LOGBACK_ROLLINGPOLICY_MAX_HISTORY\n\nThis commit also cleans up and simplifies `DefaultLogbackConfiguration`.\n\nCloses gh-23609\n","date":"2020-10-23 03:55:02","modifiedFileCount":"8","status":"M","submitter":"Phillip Webb"}]
