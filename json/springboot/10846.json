[{"authorTime":"2017-11-23 14:32:11","codes":[{"authorDate":"2018-04-30 22:34:36","commitOrder":3,"curCode":"\tpublic void allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\", responseFields(\n\t\t\t\t\t\tfieldWithPath(\"cacheManagers\")\n\t\t\t\t\t\t\t\t.description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*\")\n\t\t\t\t\t\t\t\t.description(\"Caches in the application context keyed by \"\n\t\t\t\t\t\t\t\t\t\t+ \"name.\"))\n\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.*.\", fieldWithPath(\"target\")\n\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\"Fully qualified name of the native cache.\"))));\n\t}\n","date":"2018-04-30 22:34:36","endLine":76,"groupId":"5208","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"allCaches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/7ce02993d325741a00ef45c6e55b6cd8a81258.src","preCode":"\tpublic void allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\", responseFields(\n\t\t\t\t\t\tfieldWithPath(\"cacheManagers\")\n\t\t\t\t\t\t\t\t.description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*\")\n\t\t\t\t\t\t\t\t.description(\"Caches in the application context keyed by \"\n\t\t\t\t\t\t\t\t\t\t+ \"name.\"))\n\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.*.\", fieldWithPath(\"target\")\n\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\"Fully qualified name of the native cache.\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/CachesEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2017-11-23 14:32:11","commitOrder":3,"curCode":"\tpublic void allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels())\n\t\t\t\t.willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations()).willReturn(Arrays.asList(\n\t\t\t\tnew LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tfieldWithPath(\"levels\").description(\n\t\t\t\t\t\t\t\t\t\t\"Levels support by the logging system.\"),\n\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"))\n\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)));\n\t}\n","date":"2017-11-23 15:18:22","endLine":77,"groupId":"14714","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"allLoggers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/44/1ca4b978a98d00f3105d9a39113082c1661edf.src","preCode":"\tpublic void allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels())\n\t\t\t\t.willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations()).willReturn(Arrays.asList(\n\t\t\t\tnew LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tfieldWithPath(\"levels\").description(\n\t\t\t\t\t\t\t\t\t\t\"Levels support by the logging system.\"),\n\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"))\n\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/LoggersEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"}],"commitId":"bb614b5968fb52aaadcdf7c9fd6e1c3a39d12a12","commitMessage":"@@@Merge pull request #12216 from Mon\n\n* pr/12216:\n  Polish \"Add cache actuator endpoint\"\n  Add cache actuator endpoint\n","date":"2018-04-30 22:34:36","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2017-11-23 14:32:11","codes":[{"authorDate":"2018-05-09 17:07:37","commitOrder":4,"curCode":"\tpublic void allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\", responseFields(\n\t\t\t\t\t\tfieldWithPath(\"cacheManagers\")\n\t\t\t\t\t\t\t\t.description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*.caches\").description(\n\t\t\t\t\t\t\t\t\"Caches in the application context keyed by \" + \"name.\"))\n\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.caches.*.\",\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"target\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Fully qualified name of the native cache.\"))));\n\t}\n","date":"2018-05-09 17:08:23","endLine":76,"groupId":"14714","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"allCaches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9f/657419d143cf5c00dc3f5cf96980afc2188500.src","preCode":"\tpublic void allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\", responseFields(\n\t\t\t\t\t\tfieldWithPath(\"cacheManagers\")\n\t\t\t\t\t\t\t\t.description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*\").description(\n\t\t\t\t\t\t\t\t\"Caches in the application context keyed by \" + \"name.\"))\n\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.*.\",\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"target\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Fully qualified name of the native cache.\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/CachesEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2017-11-23 14:32:11","commitOrder":4,"curCode":"\tpublic void allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels())\n\t\t\t\t.willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations()).willReturn(Arrays.asList(\n\t\t\t\tnew LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tfieldWithPath(\"levels\").description(\n\t\t\t\t\t\t\t\t\t\t\"Levels support by the logging system.\"),\n\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"))\n\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)));\n\t}\n","date":"2017-11-23 15:18:22","endLine":77,"groupId":"14714","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"allLoggers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/44/1ca4b978a98d00f3105d9a39113082c1661edf.src","preCode":"\tpublic void allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels())\n\t\t\t\t.willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations()).willReturn(Arrays.asList(\n\t\t\t\tnew LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tfieldWithPath(\"levels\").description(\n\t\t\t\t\t\t\t\t\t\t\"Levels support by the logging system.\"),\n\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"))\n\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/LoggersEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"c72df104d8ad8f534a422835be5d8b6f0ebf490b","commitMessage":"@@@Improve caches endpoint format\n\nThis commit adds an intermediate \"caches\" element so that additional\ncache manager attributes can be added in the future.\n\nCloses gh-13079\n","date":"2018-05-09 17:08:23","modifiedFileCount":"4","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"cacheManagers\").description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*.caches\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Caches in the application context keyed by \" + \"name.\"))\n\t\t\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.caches.*.\", fieldWithPath(\"target\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the native cache.\"))));\n\t}\n","date":"2019-06-07 19:25:54","endLine":72,"groupId":"14714","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"allCaches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/de/5b1d7e91cf8a3c065af73c33fa84509ba29838.src","preCode":"\tpublic void allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"cacheManagers\").description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*.caches\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Caches in the application context keyed by \" + \"name.\"))\n\t\t\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.caches.*.\", fieldWithPath(\"target\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the native cache.\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/CachesEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels()).willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations())\n\t\t\t\t.willReturn(Arrays.asList(new LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"levels\").description(\"Levels support by the logging system.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"))\n\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)));\n\t}\n","date":"2019-06-07 19:25:54","endLine":71,"groupId":"14714","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"allLoggers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/de037ec935e25f44274e4bb6d497cd926c6d26.src","preCode":"\tpublic void allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels()).willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations())\n\t\t\t\t.willReturn(Arrays.asList(new LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"levels\").description(\"Levels support by the logging system.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"))\n\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/LoggersEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-07-15 02:39:18","commitOrder":6,"curCode":"\tvoid allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"cacheManagers\").description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*.caches\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Caches in the application context keyed by name.\"))\n\t\t\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.caches.*.\", fieldWithPath(\"target\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the native cache.\"))));\n\t}\n","date":"2019-07-15 07:24:19","endLine":72,"groupId":"14714","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"allCaches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9b/9e0a408c8b32cce0dc65e92857b2198a4cbce2.src","preCode":"\tvoid allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"cacheManagers\").description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*.caches\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Caches in the application context keyed by \" + \"name.\"))\n\t\t\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.caches.*.\", fieldWithPath(\"target\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the native cache.\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/CachesEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels()).willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations())\n\t\t\t\t.willReturn(Arrays.asList(new LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"levels\").description(\"Levels support by the logging system.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"))\n\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)));\n\t}\n","date":"2019-06-07 19:25:54","endLine":71,"groupId":"14714","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"allLoggers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/de037ec935e25f44274e4bb6d497cd926c6d26.src","preCode":"\tvoid allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels()).willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations())\n\t\t\t\t.willReturn(Arrays.asList(new LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"levels\").description(\"Levels support by the logging system.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"))\n\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/LoggersEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"}],"commitId":"01933f9b064860e5bbca4e3ff71789dbcf615e19","commitMessage":"@@@Merge previously split strings\n\nMerge some string lines that were previously split because of the\n90 chars wide formatting.\n","date":"2019-07-15 07:24:19","modifiedFileCount":"173","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-07-31 02:58:39","codes":[{"authorDate":"2019-07-15 02:39:18","commitOrder":7,"curCode":"\tvoid allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"cacheManagers\").description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*.caches\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Caches in the application context keyed by name.\"))\n\t\t\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.caches.*.\", fieldWithPath(\"target\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the native cache.\"))));\n\t}\n","date":"2019-07-15 07:24:19","endLine":72,"groupId":"10846","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"allCaches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9b/9e0a408c8b32cce0dc65e92857b2198a4cbce2.src","preCode":"\tvoid allCaches() throws Exception {\n\t\tthis.mockMvc.perform(get(\"/actuator/caches\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"caches/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"cacheManagers\").description(\"Cache managers keyed by id.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"cacheManagers.*.caches\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Caches in the application context keyed by name.\"))\n\t\t\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"cacheManagers.*.caches.*.\", fieldWithPath(\"target\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the native cache.\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/CachesEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-07-31 02:58:39","commitOrder":7,"curCode":"\tvoid allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels()).willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations())\n\t\t\t\t.willReturn(Arrays.asList(new LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"levels\").description(\"Levels support by the logging system.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"groups\").description(\"Logger groups keyed by name\"))\n\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)\n\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"groups.*.\", groupLevelFields)));\n\t}\n","date":"2019-07-31 02:58:39","endLine":89,"groupId":"10846","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"allLoggers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/37/263c135caf0f6db13d1532df2b291dcc6afd96.src","preCode":"\tvoid allLoggers() throws Exception {\n\t\tgiven(this.loggingSystem.getSupportedLogLevels()).willReturn(EnumSet.allOf(LogLevel.class));\n\t\tgiven(this.loggingSystem.getLoggerConfigurations())\n\t\t\t\t.willReturn(Arrays.asList(new LoggerConfiguration(\"ROOT\", LogLevel.INFO, LogLevel.INFO),\n\t\t\t\t\t\tnew LoggerConfiguration(\"com.example\", LogLevel.DEBUG, LogLevel.DEBUG)));\n\t\tthis.mockMvc.perform(get(\"/actuator/loggers\")).andExpect(status().isOk())\n\t\t\t\t.andDo(MockMvcRestDocumentation.document(\"loggers/all\",\n\t\t\t\t\t\tresponseFields(fieldWithPath(\"levels\").description(\"Levels support by the logging system.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"loggers\").description(\"Loggers keyed by name.\"))\n\t\t\t\t\t\t\t\t\t\t.andWithPrefix(\"loggers.*.\", levelFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/LoggersEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"6e1fb5a1c69ed760b99b69fca70ea2e20d2d8e75","commitMessage":"@@@Merge pull request #17515 from htztomic\n\n* pr/17515:\n  Polish \"Add support for configuring logging groups\"\n  Add support for configuring logging groups via endpoint\n\nCloses gh-17515\n","date":"2019-07-31 02:58:39","modifiedFileCount":"7","status":"M","submitter":"Madhura Bhave"}]
