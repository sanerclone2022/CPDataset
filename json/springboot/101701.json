[{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid getBinderWhenHasMultipleSourcesPicksFirst() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tArrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"one\");\n\t}\n","date":"2020-07-23 12:02:32","endLine":225,"groupId":"13945","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getBinderWhenHasMultipleSourcesPicksFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/51/e4c10b8d27184c87144ec1e21558d4150649d7.src","preCode":"\tvoid getBinderWhenHasMultipleSourcesPicksFirst() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tArrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"one\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"B"},{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tArrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}\n","date":"2020-07-23 12:02:32","endLine":293,"groupId":"13945","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/51/e4c10b8d27184c87144ec1e21558d4150649d7.src","preCode":"\tvoid getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tArrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"B"}],"commitId":"3352024b1ca641fa0beaaa4cd87788c190242eb0","commitMessage":"@@@Provide ConfigFileApplicationListener replacement\n\nDeprecate `ConfigFileApplicationListener` and provide a replacement\nmechanism that supports arbitrary config data imports.\n\nThis commit updates the following areas:\n\n- Extract `EnvironmentPostProcessor` invocation logic from the\n  `ConfigFileApplicationListener` to new dedicated listener. Also\n  providing support for `Log` injection.\n\n- Extract `RandomPropertySource` adding logic from the\n  `ConfigFileApplicationListener` to a dedicated class.\n\n- Migrate to the recently introduced `DefaultPropertiesPropertySource`\n  class when moving the defaultProperties `PropertySource`\n\n- Replace processing logic with a phased approach to ensure that\n  profile enablement happens in a distinct phase and that profiles\n  can no longer be activated on an ad-hoc basis.\n\n- Provide a more predictable and logical import order for processing\n  `application.properties` and `application.yml` files.\n\n- Add support for a `spring.config.import` property which can be used\n  to import additional config data. Also provide a pluggable API\n  allowing third-parties to resolve and load locations themselves.\n\n- Add `spring.config.activate.on-profile` support which replaces the\n  existing `spring.profiles` property.\n\n- Add `spring.config.activate.on-cloud-platform` support which allows\n  a config data document to be active only on a given cloud platform.\n\n- Support a `spring.config.use-legacy-processing` property allowing the\n  previous processing logic to be used.\n\nCloses gh-22497\n\nCo-authored-by: Madhura Bhave <mbhave@vmware.com>\n","date":"2020-07-23 12:02:32","modifiedFileCount":"17","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-08-21 08:26:01","codes":[{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid getBinderWhenHasMultipleSourcesPicksFirst() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"one\");\n\t}\n","date":"2020-08-21 12:49:03","endLine":279,"groupId":"13945","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getBinderWhenHasMultipleSourcesPicksFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/52/42572bf158ed16f03b782ff30b1cfaf5bd0590.src","preCode":"\tvoid getBinderWhenHasMultipleSourcesPicksFirst() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tArrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"one\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}\n","date":"2020-08-21 12:49:03","endLine":347,"groupId":"13945","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/52/42572bf158ed16f03b782ff30b1cfaf5bd0590.src","preCode":"\tvoid getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tArrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"d123c924a0e1fbe6b4e8f27baf98b5bfd1a64a86","commitMessage":"@@@Add BootstrapRegisty support for config data\n\nExpose the `BootstrapRegisty` to both `ConfigDataLocationResolver` and\n`ConfigDataLoader` implementations. The registry is exposed via the\ncontext interfaces and may be used to reuse instances that are expensive\nto create. It may also be used to ultimately register beans with the\n`ApplicationContext`.\n\nCloses gh-22956\n","date":"2020-08-21 12:49:03","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-08-23 10:59:22","codes":[{"authorDate":"2020-08-23 10:59:22","commitOrder":3,"curCode":"\tvoid getBinderWhenHasMultipleSourcesPicksFirst() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"one\");\n\t}\n","date":"2020-08-24 11:27:12","endLine":277,"groupId":"13945","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getBinderWhenHasMultipleSourcesPicksFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/01/2fff99126983daee3f5d7638f4e46fb630a89a.src","preCode":"\tvoid getBinderWhenHasMultipleSourcesPicksFirst() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"one\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2020-08-23 10:59:22","commitOrder":3,"curCode":"\tvoid getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}\n","date":"2020-08-24 11:27:12","endLine":339,"groupId":"13945","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/01/2fff99126983daee3f5d7638f4e46fb630a89a.src","preCode":"\tvoid getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor secondContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tconfigData, 1, this.activationContext);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"758df17c7d60e387ead9c65b81f250fd7b00a47c","commitMessage":"@@@Allow placeholders to be used in imports\n\nAllow `${..}` property placeholders to be used in `spring.config.import`\nproperties. Prior to this commit.  placeholders were not resolved when\nbinding the `ConfigDataProperty` instance. Furthermore.  binding happened\ntoo early for all placeholders to be resolved correctly. The\n`ConfigDataEnvironmentContributor` class now has two states for imported\ncontributors.  `UNBOUND_IMPORT` has the initial unbound state and is\neventually replaced with a `BOUND_IMPORT`.\n\nCloses gh-23020\n","date":"2020-08-24 11:27:12","modifiedFileCount":"7","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-09-17 15:09:41","codes":[{"authorDate":"2020-09-17 15:09:41","commitOrder":4,"curCode":"\tvoid getBinderWhenHasMultipleSourcesPicksFirst() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"one\");\n\t}\n","date":"2020-09-17 15:31:00","endLine":278,"groupId":"101701","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getBinderWhenHasMultipleSourcesPicksFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/32/25b68ecc8bebd82d588ca305422b1c761a3af5.src","preCode":"\tvoid getBinderWhenHasMultipleSourcesPicksFirst() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext);\n\t\tassertThat(binder.bind(\"test\", String.class).get()).isEqualTo(\"one\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2020-09-17 15:09:41","commitOrder":4,"curCode":"\tvoid getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}\n","date":"2020-09-17 15:31:00","endLine":340,"groupId":"101701","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/32/25b68ecc8bebd82d588ca305422b1c761a3af5.src","preCode":"\tvoid getBinderWhenFailOnBindToInactiveSourceWithFirstInactiveThrowsException() {\n\t\tMockPropertySource firstPropertySource = new MockPropertySource();\n\t\tfirstPropertySource.setProperty(\"test\", \"one\");\n\t\tfirstPropertySource.setProperty(\"spring.config.activate.on-profile\", \"production\");\n\t\tMockPropertySource secondPropertySource = new MockPropertySource();\n\t\tsecondPropertySource.setProperty(\"test\", \"two\");\n\t\tConfigData configData = new ConfigData(Arrays.asList(firstPropertySource, secondPropertySource));\n\t\tConfigDataEnvironmentContributor firstContributor = createBoundImportContributor(configData, 0);\n\t\tConfigDataEnvironmentContributor secondContributor = createBoundImportContributor(configData, 1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(firstContributor, secondContributor));\n\t\tBinder binder = contributors.getBinder(this.activationContext, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> binder.bind(\"test\", String.class))\n\t\t\t\t.satisfies((ex) -> assertThat(ex.getCause()).isInstanceOf(InactiveConfigDataAccessException.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"1ae14362110360cc558bcd498fa67f70a35b8373","commitMessage":"@@@Refactor BootstrapRegistry support\n\nRefactor `BootstrapRegistry` support following initial prototype work\nwith the Spring Cloud team.\n\nThis update splits the `BootstrapRegistry` API into `BootstrapRegistry`. \n`BootstrapContext` and  `ConfigurableBootstrapContext` interfaces and\nmoves it to the same package as `SpringApplication`.\n\nA new `Bootstrapper` interface has been introduced that can be added\nto the `SpringApplication` to customize the `BootstrapRegistry` before\nit's used.\n\nCloses gh-23326\n","date":"2020-09-17 15:31:00","modifiedFileCount":"40","status":"M","submitter":"Phillip Webb"}]
