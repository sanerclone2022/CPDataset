[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToMapShouldTriggerOnSuccess() throws Exception {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"1\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, Integer>> target = STRING_INTEGER_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(Integer.class)), any(), eq(1));\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","date":"2017-10-05 11:18:56","endLine":359,"groupId":"7294","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToMapShouldTriggerOnSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c9/62c042e104d1f72847861212a3759a4c4319b0.src","preCode":"\tpublic void bindToMapShouldTriggerOnSuccess() throws Exception {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"1\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, Integer>> target = STRING_INTEGER_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(Integer.class)), any(), eq(1));\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToMapStringArrayShouldTriggerOnSuccess() throws Exception {\n\t\tthis.sources\n\t\t\t\t.add(new MockConfigurationPropertySource(\"foo.bar\", \"a,b,c\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, String[]>> target = STRING_ARRAY_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tArgumentCaptor<String[]> array = ArgumentCaptor.forClass(String[].class);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(String[].class)), any(), array.capture());\n\t\tassertThat(array.getValue()).containsExactly(\"a\", \"b\", \"c\");\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","date":"2017-10-05 11:18:56","endLine":376,"groupId":"6063","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToMapStringArrayShouldTriggerOnSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c9/62c042e104d1f72847861212a3759a4c4319b0.src","preCode":"\tpublic void bindToMapStringArrayShouldTriggerOnSuccess() throws Exception {\n\t\tthis.sources\n\t\t\t\t.add(new MockConfigurationPropertySource(\"foo.bar\", \"a,b,c\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, String[]>> target = STRING_ARRAY_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tArgumentCaptor<String[]> array = ArgumentCaptor.forClass(String[].class);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(String[].class)), any(), array.capture());\n\t\tassertThat(array.getValue()).containsExactly(\"a\", \"b\", \"c\");\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToMapShouldTriggerOnSuccess() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"1\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, Integer>> target = STRING_INTEGER_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(Integer.class)), any(), eq(1));\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","date":"2017-12-12 18:57:30","endLine":357,"groupId":"7294","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToMapShouldTriggerOnSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/be/7c39de7bba2dd03c538fff9ecc598f2ca502e3.src","preCode":"\tpublic void bindToMapShouldTriggerOnSuccess() throws Exception {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"1\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, Integer>> target = STRING_INTEGER_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(Integer.class)), any(), eq(1));\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToMapStringArrayShouldTriggerOnSuccess() {\n\t\tthis.sources\n\t\t\t\t.add(new MockConfigurationPropertySource(\"foo.bar\", \"a,b,c\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, String[]>> target = STRING_ARRAY_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tArgumentCaptor<String[]> array = ArgumentCaptor.forClass(String[].class);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(String[].class)), any(), array.capture());\n\t\tassertThat(array.getValue()).containsExactly(\"a\", \"b\", \"c\");\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","date":"2017-12-12 18:57:30","endLine":374,"groupId":"6063","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToMapStringArrayShouldTriggerOnSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/be/7c39de7bba2dd03c538fff9ecc598f2ca502e3.src","preCode":"\tpublic void bindToMapStringArrayShouldTriggerOnSuccess() throws Exception {\n\t\tthis.sources\n\t\t\t\t.add(new MockConfigurationPropertySource(\"foo.bar\", \"a,b,c\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, String[]>> target = STRING_ARRAY_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tArgumentCaptor<String[]> array = ArgumentCaptor.forClass(String[].class);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(String[].class)), any(), array.capture());\n\t\tassertThat(array.getValue()).containsExactly(\"a\", \"b\", \"c\");\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-10-27 07:42:38","codes":[{"authorDate":"2018-10-27 07:42:38","commitOrder":3,"curCode":"\tpublic void bindToMapShouldTriggerOnSuccess() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"1\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class, Answers.CALLS_REAL_METHODS);\n\t\tBindable<Map<String, Integer>> target = STRING_INTEGER_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(Integer.class)), any(), eq(1));\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","date":"2018-10-27 07:42:38","endLine":359,"groupId":"7294","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToMapShouldTriggerOnSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8a/76e698dda2c6cf9ec7e0b8c13edc773cdf309b.src","preCode":"\tpublic void bindToMapShouldTriggerOnSuccess() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"1\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, Integer>> target = STRING_INTEGER_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(Integer.class)), any(), eq(1));\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"},{"authorDate":"2018-10-27 07:42:38","commitOrder":3,"curCode":"\tpublic void bindToMapStringArrayShouldTriggerOnSuccess() {\n\t\tthis.sources\n\t\t\t\t.add(new MockConfigurationPropertySource(\"foo.bar\", \"a,b,c\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class, Answers.CALLS_REAL_METHODS);\n\t\tBindable<Map<String, String[]>> target = STRING_ARRAY_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tArgumentCaptor<String[]> array = ArgumentCaptor.forClass(String[].class);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(String[].class)), any(), array.capture());\n\t\tassertThat(array.getValue()).containsExactly(\"a\", \"b\", \"c\");\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","date":"2018-10-27 07:42:38","endLine":375,"groupId":"6063","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToMapStringArrayShouldTriggerOnSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8a/76e698dda2c6cf9ec7e0b8c13edc773cdf309b.src","preCode":"\tpublic void bindToMapStringArrayShouldTriggerOnSuccess() {\n\t\tthis.sources\n\t\t\t\t.add(new MockConfigurationPropertySource(\"foo.bar\", \"a,b,c\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tBindable<Map<String, String[]>> target = STRING_ARRAY_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tArgumentCaptor<String[]> array = ArgumentCaptor.forClass(String[].class);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),\n\t\t\t\teq(Bindable.of(String[].class)), any(), array.capture());\n\t\tassertThat(array.getValue()).containsExactly(\"a\", \"b\", \"c\");\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),\n\t\t\t\teq(target), any(), isA(Map.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"M"}],"commitId":"621eb85ad78ae860591ee2e15890f8696bc3d3fb","commitMessage":"@@@Merge pull request #14971 from dreis2211\n\n* pr/14971:\n  Polish mocks with default answer\n","date":"2018-10-27 07:42:38","modifiedFileCount":"5","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid bindToMapShouldTriggerOnSuccess() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"1\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class, Answers.CALLS_REAL_METHODS);\n\t\tBindable<Map<String, Integer>> target = STRING_INTEGER_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")), eq(Bindable.of(Integer.class)),\n\t\t\t\tany(), eq(1));\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")), eq(target), any(), isA(Map.class));\n\t}\n","date":"2019-06-07 19:25:54","endLine":338,"groupId":"101384","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToMapShouldTriggerOnSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/36/b30f26577f68c3eb5e6c18d90cca4b6a62f01d.src","preCode":"\tpublic void bindToMapShouldTriggerOnSuccess() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"1\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class, Answers.CALLS_REAL_METHODS);\n\t\tBindable<Map<String, Integer>> target = STRING_INTEGER_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")), eq(Bindable.of(Integer.class)),\n\t\t\t\tany(), eq(1));\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")), eq(target), any(), isA(Map.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid bindToMapStringArrayShouldTriggerOnSuccess() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"a,b,c\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class, Answers.CALLS_REAL_METHODS);\n\t\tBindable<Map<String, String[]>> target = STRING_ARRAY_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tArgumentCaptor<String[]> array = ArgumentCaptor.forClass(String[].class);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")), eq(Bindable.of(String[].class)),\n\t\t\t\tany(), array.capture());\n\t\tassertThat(array.getValue()).containsExactly(\"a\", \"b\", \"c\");\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")), eq(target), any(), isA(Map.class));\n\t}\n","date":"2019-06-07 19:25:54","endLine":352,"groupId":"101384","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToMapStringArrayShouldTriggerOnSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/36/b30f26577f68c3eb5e6c18d90cca4b6a62f01d.src","preCode":"\tpublic void bindToMapStringArrayShouldTriggerOnSuccess() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo.bar\", \"a,b,c\", \"line1\"));\n\t\tBindHandler handler = mock(BindHandler.class, Answers.CALLS_REAL_METHODS);\n\t\tBindable<Map<String, String[]>> target = STRING_ARRAY_MAP;\n\t\tthis.binder.bind(\"foo\", target, handler);\n\t\tInOrder ordered = inOrder(handler);\n\t\tArgumentCaptor<String[]> array = ArgumentCaptor.forClass(String[].class);\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")), eq(Bindable.of(String[].class)),\n\t\t\t\tany(), array.capture());\n\t\tassertThat(array.getValue()).containsExactly(\"a\", \"b\", \"c\");\n\t\tordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")), eq(target), any(), isA(Map.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
