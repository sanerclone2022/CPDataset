[{"authorTime":"2017-12-06 23:31:32","codes":[{"authorDate":"2017-11-03 06:24:11","commitOrder":2,"curCode":"\tpublic void testMaxFileSizeProperty() throws Exception {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","date":"2017-11-03 06:24:11","endLine":362,"groupId":"646","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxFileSizeProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9d/b78444bb91fe244c455be2a11f9e245b07c31d.src","preCode":"\tpublic void testMaxFileSizeProperty() throws Exception {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"NB"},{"authorDate":"2017-12-06 23:31:32","commitOrder":2,"curCode":"\tpublic void testMaxFileSizePropertyWithXmlConfiguration() throws Exception {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext,\n\t\t\t\t\"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","date":"2017-12-06 23:31:32","endLine":379,"groupId":"646","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFileSizePropertyWithXmlConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/14/cae94634c397f0cbc21586f22f9627f666b9d6.src","preCode":"\tpublic void testMaxFileSizePropertyWithXmlConfiguration() throws Exception {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext,\n\t\t\t\t\"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"}],"commitId":"6d6abce55cd775299b5578192f62dbebdb987469","commitMessage":"@@@Merge pull request #11232 from Johnny Lim\n\n* gh-11232:\n  Polish \"Fix system properties in file-appender.xml\"\n  Fix system properties in file-appender.xml\n","date":"2017-12-06 23:31:32","modifiedFileCount":"1","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-01-28 17:09:08","codes":[{"authorDate":"2019-01-28 17:09:08","commitOrder":3,"curCode":"\tpublic void testMaxFileSizeProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","date":"2019-01-28 17:09:08","endLine":367,"groupId":"646","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxFileSizeProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/11653037397b305df3f689f310a73f688acaa0.src","preCode":"\tpublic void testMaxFileSizeProperty() throws Exception {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"},{"authorDate":"2019-01-28 17:09:08","commitOrder":3,"curCode":"\tpublic void testMaxFileSizePropertyWithXmlConfiguration() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext,\n\t\t\t\t\"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","date":"2019-01-28 17:09:08","endLine":383,"groupId":"646","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFileSizePropertyWithXmlConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/11653037397b305df3f689f310a73f688acaa0.src","preCode":"\tpublic void testMaxFileSizePropertyWithXmlConfiguration() throws Exception {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext,\n\t\t\t\t\"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"e2532e1ef5a9d523869d70cdb131b1e25ee0271d","commitMessage":"@@@Merge pull request #15793 from dreis2211\n\n* pr/15793:\n  Use Assertions.contentOf() where possible\n","date":"2019-01-28 17:09:08","modifiedFileCount":"8","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-01-28 17:09:08","codes":[{"authorDate":"2019-02-19 18:13:21","commitOrder":4,"curCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(expectedFileSize);\n\t}\n","date":"2019-02-19 18:16:31","endLine":411,"groupId":"646","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxFileSizeProperty","params":"(StringsizeValue@StringexpectedFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/93/8e9fceff83a7ed43cd6a6f94bb23c838f7aef3.src","preCode":"\tpublic void testMaxFileSizeProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"},{"authorDate":"2019-01-28 17:09:08","commitOrder":4,"curCode":"\tpublic void testMaxFileSizePropertyWithXmlConfiguration() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext,\n\t\t\t\t\"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","date":"2019-01-28 17:09:08","endLine":383,"groupId":"646","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFileSizePropertyWithXmlConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/11653037397b305df3f689f310a73f688acaa0.src","preCode":"\tpublic void testMaxFileSizePropertyWithXmlConfiguration() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext,\n\t\t\t\t\"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"N"}],"commitId":"eee07efee1bb6a9bdfd6e34000eb91b7cf347502","commitMessage":"@@@Switch Logback's file size properties to DataSize\n\nThis commit changes the target type of file size-based properties to\n`DataSize` and tolerates Logback's specific format.\n\nCloses gh-15930\n","date":"2019-02-19 18:16:31","modifiedFileCount":"2","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-06-30 06:53:56","codes":[{"authorDate":"2019-02-19 18:13:21","commitOrder":5,"curCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(expectedFileSize);\n\t}\n","date":"2019-02-19 18:16:31","endLine":411,"groupId":"646","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxFileSizeProperty","params":"(StringsizeValue@StringexpectedFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/93/8e9fceff83a7ed43cd6a6f94bb23c838f7aef3.src","preCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(\n\t\t\t\tenvironment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\")\n\t\t\t\t.toString()).isEqualTo(expectedFileSize);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"N"},{"authorDate":"2019-06-30 06:53:56","commitOrder":5,"curCode":"\tvoid testMaxFileSizePropertyWithXmlConfiguration() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, \"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\").toString()).isEqualTo(\"100 MB\");\n\t}\n","date":"2019-06-30 06:53:56","endLine":379,"groupId":"646","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFileSizePropertyWithXmlConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/14/f71ae79ea54790e38db9ccd6e440fc1cfb6154.src","preCode":"\tpublic void testMaxFileSizePropertyWithXmlConfiguration() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, \"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\").toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"}],"commitId":"a5f430264968166c80f2a3d88bc0f96d0c3c2521","commitMessage":"@@@Merge pull request #17107 from L00kian\n\n* gh-17107:\n  Polish \"Migrate LogbackLoggingSystemTests to JUnit 5\"\n  Migrate LogbackLoggingSystemTests to JUnit 5\n\nCloses gh-17107\n","date":"2019-06-30 06:53:56","modifiedFileCount":"4","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-10-22 07:05:14","codes":[{"authorDate":"2020-10-22 07:05:14","commitOrder":6,"curCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tthis.environment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(this.environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tinitialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\").toString())\n\t\t\t\t.isEqualTo(expectedFileSize);\n\t}\n","date":"2020-10-23 03:55:02","endLine":385,"groupId":"101132","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxFileSizeProperty","params":"(StringsizeValue@StringexpectedFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/64/e8170081155f450b4c996aaaadd19b5ab5346c.src","preCode":"\tprivate void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", sizeValue);\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, null, logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\").toString())\n\t\t\t\t.isEqualTo(expectedFileSize);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"},{"authorDate":"2020-10-22 07:05:14","commitOrder":6,"curCode":"\tvoid testMaxFileSizePropertyWithXmlConfiguration() {\n\t\tthis.environment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(this.environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tinitialize(loggingInitializationContext, \"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\").toString()).isEqualTo(\"100 MB\");\n\t}\n","date":"2020-10-23 03:55:02","endLine":397,"groupId":"101132","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFileSizePropertyWithXmlConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/64/e8170081155f450b4c996aaaadd19b5ab5346c.src","preCode":"\tvoid testMaxFileSizePropertyWithXmlConfiguration() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setProperty(\"logging.file.max-size\", \"100MB\");\n\t\tLoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment);\n\t\tFile file = new File(tmpDir(), \"logback-test.log\");\n\t\tLogFile logFile = getLogFile(file.getPath(), null);\n\t\tthis.loggingSystem.initialize(loggingInitializationContext, \"classpath:logback-include-base.xml\", logFile);\n\t\tthis.logger.info(\"Hello world\");\n\t\tassertThat(getLineWithText(file, \"Hello world\")).contains(\"INFO\");\n\t\tassertThat(ReflectionTestUtils.getField(getRollingPolicy(), \"maxFileSize\").toString()).isEqualTo(\"100 MB\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"M"}],"commitId":"1725594a0edae57a50614210f094e59b6edca305","commitMessage":"@@@Rationalize Logback logging properties\n\nDeprecate and provide alternatives for logging properties that are\nspecific to Logback.\n\nThe following Spring Boot properties have been changed:\n\n  * logging.pattern.rolling-file-name ->\n    logging.logback.rollingpolicy.file-name-pattern\n\n  * logging.file.clean-history-on-start ->\n    logging.logback.rollingpolicy.clean-history-on-start\n\n  * logging.file.max-size ->\n    logging.logback.rollingpolicy.max-file-size\n\n  * logging.file.total-size-cap ->\n    logging.logback.rollingpolicy.total-size-cap\n\n  * logging.file.max-history ->\n    logging.logback.rollingpolicy.max-history\n\nAs have the system environment properties that they map to:\n\n  * ROLLING_FILE_NAME_PATTERN ->\n    LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN\n\n  * LOG_FILE_CLEAN_HISTORY_ON_START ->\n    LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START\n\n  * LOG_FILE_MAX_SIZE ->\n    LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE\n\n  * LOG_FILE_TOTAL_SIZE_CAP ->\n    LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP\n\n  * LOG_FILE_MAX_HISTORY ->\n    LOGBACK_ROLLINGPOLICY_MAX_HISTORY\n\nThis commit also cleans up and simplifies `DefaultLogbackConfiguration`.\n\nCloses gh-23609\n","date":"2020-10-23 03:55:02","modifiedFileCount":"8","status":"M","submitter":"Phillip Webb"}]
