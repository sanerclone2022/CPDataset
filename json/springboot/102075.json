[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void persistAndLoad() throws Exception {\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(this.expiration, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence\n\t\t\t\t.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.get(\"abc\").getExpiration()).isEqualTo(this.expiration);\n\t\tassertThat(restored.get(\"abc\").getSessionData().get(\"spring\")).isEqualTo(\"boot\");\n\t}\n","date":"2017-10-05 11:18:56","endLine":77,"groupId":"9654","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"persistAndLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/0c/eecf3be2b274a72004b37335d80b02c0b9639c.src","preCode":"\tpublic void persistAndLoad() throws Exception {\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(this.expiration, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence\n\t\t\t\t.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.get(\"abc\").getExpiration()).isEqualTo(this.expiration);\n\t\tassertThat(restored.get(\"abc\").getSessionData().get(\"spring\")).isEqualTo(\"boot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistenceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void dontRestoreExpired() throws Exception {\n\t\tDate expired = new Date(System.currentTimeMillis() - 1000);\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(expired, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence\n\t\t\t\t.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.containsKey(\"abc\")).isFalse();\n\t}\n","date":"2017-10-05 11:18:56","endLine":92,"groupId":"155","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"dontRestoreExpired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/0c/eecf3be2b274a72004b37335d80b02c0b9639c.src","preCode":"\tpublic void dontRestoreExpired() throws Exception {\n\t\tDate expired = new Date(System.currentTimeMillis() - 1000);\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(expired, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence\n\t\t\t\t.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.containsKey(\"abc\")).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistenceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void persistAndLoad() {\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(this.expiration, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence\n\t\t\t\t.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.get(\"abc\").getExpiration()).isEqualTo(this.expiration);\n\t\tassertThat(restored.get(\"abc\").getSessionData().get(\"spring\")).isEqualTo(\"boot\");\n\t}\n","date":"2017-12-12 18:57:30","endLine":77,"groupId":"9654","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"persistAndLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/cb7c649eeadc4997b030bd1ebecf58ccf18746.src","preCode":"\tpublic void persistAndLoad() throws Exception {\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(this.expiration, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence\n\t\t\t\t.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.get(\"abc\").getExpiration()).isEqualTo(this.expiration);\n\t\tassertThat(restored.get(\"abc\").getSessionData().get(\"spring\")).isEqualTo(\"boot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistenceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void dontRestoreExpired() {\n\t\tDate expired = new Date(System.currentTimeMillis() - 1000);\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(expired, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence\n\t\t\t\t.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.containsKey(\"abc\")).isFalse();\n\t}\n","date":"2017-12-12 18:57:30","endLine":92,"groupId":"155","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"dontRestoreExpired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/cb7c649eeadc4997b030bd1ebecf58ccf18746.src","preCode":"\tpublic void dontRestoreExpired() throws Exception {\n\t\tDate expired = new Date(System.currentTimeMillis() - 1000);\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(expired, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence\n\t\t\t\t.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.containsKey(\"abc\")).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistenceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid persistAndLoad() {\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(this.expiration, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.get(\"abc\").getExpiration()).isEqualTo(this.expiration);\n\t\tassertThat(restored.get(\"abc\").getSessionData().get(\"spring\")).isEqualTo(\"boot\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":72,"groupId":"9654","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"persistAndLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6d/b83a32de9687633d5f41d59c34b5a8fc1b58eb.src","preCode":"\tpublic void persistAndLoad() {\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(this.expiration, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.get(\"abc\").getExpiration()).isEqualTo(this.expiration);\n\t\tassertThat(restored.get(\"abc\").getSessionData().get(\"spring\")).isEqualTo(\"boot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistenceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid dontRestoreExpired() {\n\t\tDate expired = new Date(System.currentTimeMillis() - 1000);\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(expired, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.containsKey(\"abc\")).isFalse();\n\t}\n","date":"2019-06-07 19:25:54","endLine":86,"groupId":"155","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"dontRestoreExpired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6d/b83a32de9687633d5f41d59c34b5a8fc1b58eb.src","preCode":"\tpublic void dontRestoreExpired() {\n\t\tDate expired = new Date(System.currentTimeMillis() - 1000);\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(expired, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.containsKey(\"abc\")).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistenceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-01-22 21:32:47","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid persistAndLoad() {\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(this.expiration, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.get(\"abc\").getExpiration()).isEqualTo(this.expiration);\n\t\tassertThat(restored.get(\"abc\").getSessionData().get(\"spring\")).isEqualTo(\"boot\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":72,"groupId":"102075","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"persistAndLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6d/b83a32de9687633d5f41d59c34b5a8fc1b58eb.src","preCode":"\tvoid persistAndLoad() {\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(this.expiration, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.get(\"abc\").getExpiration()).isEqualTo(this.expiration);\n\t\tassertThat(restored.get(\"abc\").getSessionData().get(\"spring\")).isEqualTo(\"boot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistenceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2021-01-22 21:32:47","commitOrder":4,"curCode":"\tvoid dontRestoreExpired() {\n\t\tDate expired = new Date(System.currentTimeMillis() - 1000);\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(expired, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored).doesNotContainKey(\"abc\");\n\t}\n","date":"2021-01-22 21:32:47","endLine":86,"groupId":"102075","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"dontRestoreExpired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c1/952a1ad1f38c307ba576a60a147ed84dd20bc6.src","preCode":"\tvoid dontRestoreExpired() {\n\t\tDate expired = new Date(System.currentTimeMillis() - 1000);\n\t\tMap<String, PersistentSession> sessionData = new LinkedHashMap<>();\n\t\tMap<String, Object> data = new LinkedHashMap<>();\n\t\tdata.put(\"spring\", \"boot\");\n\t\tPersistentSession session = new PersistentSession(expired, data);\n\t\tsessionData.put(\"abc\", session);\n\t\tthis.persistence.persistSessions(\"test\", sessionData);\n\t\tMap<String, PersistentSession> restored = this.persistence.loadSessionAttributes(\"test\", this.classLoader);\n\t\tassertThat(restored).isNotNull();\n\t\tassertThat(restored.containsKey(\"abc\")).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistenceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"1370e8ca979da9f4b8fc87fdb2eb8a9a65d0033c","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-24974\n","date":"2021-01-22 21:32:47","modifiedFileCount":"5","status":"M","submitter":"Andy Wilkinson"}]
