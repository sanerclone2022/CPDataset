[{"authorTime":"2018-05-10 03:04:34","codes":[{"authorDate":"2018-05-10 03:04:34","commitOrder":1,"curCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tServerWebExchangeMatcher matcher = EndpointRequest.toAnyEndpoint()\n\t\t\t\t.excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(\"foo\", \"foo\"));\n\t\tendpoints.add(mockEndpoint(\"bar\", \"bar\"));\n\t\tendpoints.add(mockEndpoint(\"baz\", \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\", () -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","date":"2018-05-10 03:04:34","endLine":131,"groupId":"9498","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"excludeByClassShouldNotMatchExcluded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/85/ff64afa433111c247050990489b0eda73ddd7f.src","preCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tServerWebExchangeMatcher matcher = EndpointRequest.toAnyEndpoint()\n\t\t\t\t.excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(\"foo\", \"foo\"));\n\t\tendpoints.add(mockEndpoint(\"bar\", \"bar\"));\n\t\tendpoints.add(mockEndpoint(\"baz\", \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\", () -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequestTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2018-05-10 03:04:34","commitOrder":1,"curCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tRequestMatcher matcher = EndpointRequest.toAnyEndpoint()\n\t\t\t\t.excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(\"foo\", \"foo\"));\n\t\tendpoints.add(mockEndpoint(\"bar\", \"bar\"));\n\t\tendpoints.add(mockEndpoint(\"baz\", \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\", () -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","date":"2018-05-10 03:04:34","endLine":153,"groupId":"9498","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"excludeByClassShouldNotMatchExcluded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e4/4eaf1a9d7e8e476123590a598dfcb37cf67930.src","preCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tRequestMatcher matcher = EndpointRequest.toAnyEndpoint()\n\t\t\t\t.excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(\"foo\", \"foo\"));\n\t\tendpoints.add(mockEndpoint(\"bar\", \"bar\"));\n\t\tendpoints.add(mockEndpoint(\"baz\", \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\", () -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequestTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"36c7602f2a3c2a11e86ef68ef649f1fdf5808ba7","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-05-10 03:04:34","modifiedFileCount":"4","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tServerWebExchangeMatcher matcher = EndpointRequest.toAnyEndpoint()\n\t\t\t\t.excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"foo\"), \"foo\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"bar\"), \"bar\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"baz\"), \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\",\n\t\t\t\t() -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","date":"2018-10-15 04:53:28","endLine":142,"groupId":"7410","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"excludeByClassShouldNotMatchExcluded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/52/cd3932679470e22675bdc621964f277ce81d81.src","preCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tServerWebExchangeMatcher matcher = EndpointRequest.toAnyEndpoint()\n\t\t\t\t.excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(\"foo\", \"foo\"));\n\t\tendpoints.add(mockEndpoint(\"bar\", \"bar\"));\n\t\tendpoints.add(mockEndpoint(\"baz\", \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\",\n\t\t\t\t() -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequestTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tRequestMatcher matcher = EndpointRequest.toAnyEndpoint()\n\t\t\t\t.excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"foo\"), \"foo\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"bar\"), \"bar\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"baz\"), \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\",\n\t\t\t\t() -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","date":"2018-10-15 04:53:28","endLine":176,"groupId":"7410","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"excludeByClassShouldNotMatchExcluded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3e/a45365ada761daf5d8044b1ade91c146b2d4a7.src","preCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tRequestMatcher matcher = EndpointRequest.toAnyEndpoint()\n\t\t\t\t.excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(\"foo\", \"foo\"));\n\t\tendpoints.add(mockEndpoint(\"bar\", \"bar\"));\n\t\tendpoints.add(mockEndpoint(\"baz\", \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\",\n\t\t\t\t() -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequestTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid excludeByClassShouldNotMatchExcluded() {\n\t\tServerWebExchangeMatcher matcher = EndpointRequest.toAnyEndpoint().excluding(FooEndpoint.class,\n\t\t\t\tBazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"foo\"), \"foo\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"bar\"), \"bar\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"baz\"), \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\", () -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":142,"groupId":"10691","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"excludeByClassShouldNotMatchExcluded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2b/0b18088cc4888bedaa4bb8f8423019fb4d921f.src","preCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tServerWebExchangeMatcher matcher = EndpointRequest.toAnyEndpoint().excluding(FooEndpoint.class,\n\t\t\t\tBazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"foo\"), \"foo\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"bar\"), \"bar\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"baz\"), \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\", () -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequestTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid excludeByClassShouldNotMatchExcluded() {\n\t\tRequestMatcher matcher = EndpointRequest.toAnyEndpoint().excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"foo\"), \"foo\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"bar\"), \"bar\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"baz\"), \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\", () -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":152,"groupId":"10691","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"excludeByClassShouldNotMatchExcluded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bb/31be525d072a7cdc6ee15c193d1d66bf611be4.src","preCode":"\tpublic void excludeByClassShouldNotMatchExcluded() {\n\t\tRequestMatcher matcher = EndpointRequest.toAnyEndpoint().excluding(FooEndpoint.class, BazServletEndpoint.class);\n\t\tList<ExposableEndpoint<?>> endpoints = new ArrayList<>();\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"foo\"), \"foo\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"bar\"), \"bar\"));\n\t\tendpoints.add(mockEndpoint(EndpointId.of(\"baz\"), \"baz\"));\n\t\tPathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints(\"/actuator\", () -> endpoints);\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/foo\");\n\t\tassertMatcher(matcher, pathMappedEndpoints).doesNotMatch(\"/actuator/baz\");\n\t\tassertMatcher(matcher).matches(\"/actuator/bar\");\n\t\tassertMatcher(matcher).matches(\"/actuator\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequestTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
