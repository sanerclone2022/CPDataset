[{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.FULL));\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t\t\t.isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.env.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.env.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","date":"2017-11-03 09:00:55","endLine":134,"groupId":"3220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d2/0f5f81a6cba09f7832497a343d5ee833dfeeb2.src","preCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.FULL));\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t\t\t.isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.env.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.env.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void linksToOtherEndpointsWithRestrictedAccess() {\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t\t\t.isEqualTo(2).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.env\").doesNotExist().jsonPath(\"_links.test\")\n\t\t\t\t\t\t.doesNotExist().jsonPath(\"_links.test-part\").doesNotExist());\n\t}\n","date":"2017-11-03 09:00:55","endLine":157,"groupId":"3220","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsWithRestrictedAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/4740038210eae929385f6cac62b5788e7e4f23.src","preCode":"\tpublic void linksToOtherEndpointsWithRestrictedAccess() {\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t\t\t.isEqualTo(2).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.env\").doesNotExist().jsonPath(\"_links.test\")\n\t\t\t\t\t\t.doesNotExist().jsonPath(\"_links.test-part\").doesNotExist());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryMvcWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"}],"commitId":"d50fe8874fa442cbd3ea380754e7b412a77aed9a","commitMessage":"@@@Add CF support for reactive actuators\n\nCloses gh-10780\n","date":"2017-11-03 09:00:55","modifiedFileCount":"5","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2018-08-20 23:00:36","commitOrder":2,"curCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.FULL));\n\t\tthis.contextRunner.run(withWebTestClient((client) -> client.get()\n\t\t\t\t.uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t.isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.env.href\").isNotEmpty().jsonPath(\"_links.env.templated\")\n\t\t\t\t.isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true)));\n\t}\n","date":"2018-08-20 23:00:36","endLine":140,"groupId":"3220","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/6ae48cfc2cf771facda9d638e61fddcc8cfe9c.src","preCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.FULL));\n\t\tload(TestEndpointConfiguration.class, (client) -> client.get()\n\t\t\t\t.uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t.isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.env.href\").isNotEmpty().jsonPath(\"_links.env.templated\")\n\t\t\t\t.isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2017-11-03 09:00:55","commitOrder":2,"curCode":"\tpublic void linksToOtherEndpointsWithRestrictedAccess() {\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t\t\t.isEqualTo(2).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.env\").doesNotExist().jsonPath(\"_links.test\")\n\t\t\t\t\t\t.doesNotExist().jsonPath(\"_links.test-part\").doesNotExist());\n\t}\n","date":"2017-11-03 09:00:55","endLine":157,"groupId":"3220","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsWithRestrictedAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/4740038210eae929385f6cac62b5788e7e4f23.src","preCode":"\tpublic void linksToOtherEndpointsWithRestrictedAccess() {\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t\t\t.isEqualTo(2).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.env\").doesNotExist().jsonPath(\"_links.test\")\n\t\t\t\t\t\t.doesNotExist().jsonPath(\"_links.test-part\").doesNotExist());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryMvcWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"b60fbe5a1ff82ad99c60ea66d3537dd6eb1dc808","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-08-20 23:00:36","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\"))).willReturn(Mono.just(AccessLevel.FULL));\n\t\tthis.contextRunner\n\t\t\t\t.run(withWebTestClient((client) -> client.get().uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false).jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false).jsonPath(\"_links.env.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.env.templated\").isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false).jsonPath(\"_links.test-part.href\")\n\t\t\t\t\t\t.isNotEmpty().jsonPath(\"_links.test-part.templated\").isEqualTo(true)));\n\t}\n","date":"2019-06-07 19:25:54","endLine":124,"groupId":"10426","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ec/59a4bca7b4c6e9d4e08e9db6d0fb4b31dd951b.src","preCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\"))).willReturn(Mono.just(AccessLevel.FULL));\n\t\tthis.contextRunner\n\t\t\t\t.run(withWebTestClient((client) -> client.get().uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false).jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false).jsonPath(\"_links.env.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.env.templated\").isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false).jsonPath(\"_links.test-part.href\")\n\t\t\t\t\t\t.isNotEmpty().jsonPath(\"_links.test-part.templated\").isEqualTo(true)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid linksToOtherEndpointsWithRestrictedAccess() {\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\"))).willReturn(AccessLevel.RESTRICTED);\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(2).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false).jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false).jsonPath(\"_links.env\").doesNotExist()\n\t\t\t\t\t\t.jsonPath(\"_links.test\").doesNotExist().jsonPath(\"_links.test-part\").doesNotExist());\n\t}\n","date":"2019-06-07 19:25:54","endLine":135,"groupId":"10426","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsWithRestrictedAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e1/0f46a35c27e2e427b03ba681e3ca001d147091.src","preCode":"\tpublic void linksToOtherEndpointsWithRestrictedAccess() {\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\"))).willReturn(AccessLevel.RESTRICTED);\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(2).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false).jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false).jsonPath(\"_links.env\").doesNotExist()\n\t\t\t\t\t\t.jsonPath(\"_links.test\").doesNotExist().jsonPath(\"_links.test-part\").doesNotExist());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryMvcWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
