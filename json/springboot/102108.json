[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void getExitCodeWhenAllNegativeShouldReturnLowestValue() throws Exception {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(-1));\n\t\tgenerators.add(mockGenerator(-3));\n\t\tgenerators.add(mockGenerator(-2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(-3);\n\t}\n","date":"2017-10-05 11:18:56","endLine":76,"groupId":"11387","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getExitCodeWhenAllNegativeShouldReturnLowestValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/4732b6f09369596650cc741247288c7db07dde.src","preCode":"\tpublic void getExitCodeWhenAllNegativeShouldReturnLowestValue() throws Exception {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(-1));\n\t\tgenerators.add(mockGenerator(-3));\n\t\tgenerators.add(mockGenerator(-2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(-3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void getExitCodeWhenAllPositiveShouldReturnHighestValue() throws Exception {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(1));\n\t\tgenerators.add(mockGenerator(3));\n\t\tgenerators.add(mockGenerator(2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(3);\n\t}\n","date":"2017-10-05 11:18:56","endLine":85,"groupId":"11388","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getExitCodeWhenAllPositiveShouldReturnHighestValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/4732b6f09369596650cc741247288c7db07dde.src","preCode":"\tpublic void getExitCodeWhenAllPositiveShouldReturnHighestValue() throws Exception {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(1));\n\t\tgenerators.add(mockGenerator(3));\n\t\tgenerators.add(mockGenerator(2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void getExitCodeWhenAllNegativeShouldReturnLowestValue() {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(-1));\n\t\tgenerators.add(mockGenerator(-3));\n\t\tgenerators.add(mockGenerator(-2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(-3);\n\t}\n","date":"2017-12-12 18:57:30","endLine":76,"groupId":"11387","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getExitCodeWhenAllNegativeShouldReturnLowestValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fb/06d0b7ef719c73ac75bbef41030b607aa3f087.src","preCode":"\tpublic void getExitCodeWhenAllNegativeShouldReturnLowestValue() throws Exception {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(-1));\n\t\tgenerators.add(mockGenerator(-3));\n\t\tgenerators.add(mockGenerator(-2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(-3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void getExitCodeWhenAllPositiveShouldReturnHighestValue() {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(1));\n\t\tgenerators.add(mockGenerator(3));\n\t\tgenerators.add(mockGenerator(2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(3);\n\t}\n","date":"2017-12-12 18:57:30","endLine":85,"groupId":"11388","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getExitCodeWhenAllPositiveShouldReturnHighestValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fb/06d0b7ef719c73ac75bbef41030b607aa3f087.src","preCode":"\tpublic void getExitCodeWhenAllPositiveShouldReturnHighestValue() throws Exception {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(1));\n\t\tgenerators.add(mockGenerator(3));\n\t\tgenerators.add(mockGenerator(2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getExitCodeWhenAllNegativeShouldReturnLowestValue() {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(-1));\n\t\tgenerators.add(mockGenerator(-3));\n\t\tgenerators.add(mockGenerator(-2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(-3);\n\t}\n","date":"2019-06-07 19:25:54","endLine":71,"groupId":"102108","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getExitCodeWhenAllNegativeShouldReturnLowestValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9a/81e716265322df26d5f6b57d22d6e0d34c764a.src","preCode":"\tpublic void getExitCodeWhenAllNegativeShouldReturnLowestValue() {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(-1));\n\t\tgenerators.add(mockGenerator(-3));\n\t\tgenerators.add(mockGenerator(-2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(-3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getExitCodeWhenAllPositiveShouldReturnHighestValue() {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(1));\n\t\tgenerators.add(mockGenerator(3));\n\t\tgenerators.add(mockGenerator(2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(3);\n\t}\n","date":"2019-06-07 19:25:54","endLine":80,"groupId":"102108","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getExitCodeWhenAllPositiveShouldReturnHighestValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9a/81e716265322df26d5f6b57d22d6e0d34c764a.src","preCode":"\tpublic void getExitCodeWhenAllPositiveShouldReturnHighestValue() {\n\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\tgenerators.add(mockGenerator(1));\n\t\tgenerators.add(mockGenerator(3));\n\t\tgenerators.add(mockGenerator(2));\n\t\tassertThat(generators.getExitCode()).isEqualTo(3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ExitCodeGeneratorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
