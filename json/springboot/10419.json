[{"authorTime":"2018-02-09 04:43:24","codes":[{"authorDate":"2018-02-09 04:43:24","commitOrder":1,"curCode":"\tpublic void resolvedLinksContainsALinkForServletEndpoint() {\n\t\tExposableServletEndpoint servletEndpoint = mock(ExposableServletEndpoint.class);\n\t\tgiven(servletEndpoint.getId()).willReturn(\"alpha\");\n\t\tgiven(servletEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(servletEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(\n\t\t\t\tCollections.singletonList(servletEndpoint)).resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","date":"2018-02-09 18:56:15","endLine":94,"groupId":"15586","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resolvedLinksContainsALinkForServletEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/32/ae0fe60efa76e29d0cf2e208797b8d500cb378.src","preCode":"\tpublic void resolvedLinksContainsALinkForServletEndpoint() {\n\t\tExposableServletEndpoint servletEndpoint = mock(ExposableServletEndpoint.class);\n\t\tgiven(servletEndpoint.getId()).willReturn(\"alpha\");\n\t\tgiven(servletEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(servletEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(\n\t\t\t\tCollections.singletonList(servletEndpoint)).resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/EndpointLinksResolverTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2018-02-09 04:43:24","commitOrder":1,"curCode":"\tpublic void resolvedLinksContainsALinkForControllerEndpoint() {\n\t\tExposableControllerEndpoint controllerEndpoint = mock(\n\t\t\t\tExposableControllerEndpoint.class);\n\t\tgiven(controllerEndpoint.getId()).willReturn(\"alpha\");\n\t\tgiven(controllerEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(controllerEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(\n\t\t\t\tCollections.singletonList(controllerEndpoint)).resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","date":"2018-02-09 18:56:15","endLine":111,"groupId":"15586","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resolvedLinksContainsALinkForControllerEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/32/ae0fe60efa76e29d0cf2e208797b8d500cb378.src","preCode":"\tpublic void resolvedLinksContainsALinkForControllerEndpoint() {\n\t\tExposableControllerEndpoint controllerEndpoint = mock(\n\t\t\t\tExposableControllerEndpoint.class);\n\t\tgiven(controllerEndpoint.getId()).willReturn(\"alpha\");\n\t\tgiven(controllerEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(controllerEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(\n\t\t\t\tCollections.singletonList(controllerEndpoint)).resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/EndpointLinksResolverTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"2993dccd1e521c2c2945cecd3ad0b432ed45bc3a","commitMessage":"@@@Provide links to all types of endpoints\n\nPreviously.  links were only provide to web endpoints. This commit\nexpands link resolution to also provide links for servlet endpoints. \ncontroller endpoints.  and rest controller endpoints.\n\nCloses gh-11902\n","date":"2018-02-09 18:56:15","modifiedFileCount":"21","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void resolvedLinksContainsALinkForServletEndpoint() {\n\t\tExposableServletEndpoint servletEndpoint = mock(ExposableServletEndpoint.class);\n\t\tgiven(servletEndpoint.getEndpointId()).willReturn(EndpointId.of(\"alpha\"));\n\t\tgiven(servletEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(servletEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(\n\t\t\t\tCollections.singletonList(servletEndpoint)).resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","date":"2018-10-15 04:53:28","endLine":95,"groupId":"15586","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resolvedLinksContainsALinkForServletEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b9/7e33550f4d041ac0fd103f90ae35c84186a8a5.src","preCode":"\tpublic void resolvedLinksContainsALinkForServletEndpoint() {\n\t\tExposableServletEndpoint servletEndpoint = mock(ExposableServletEndpoint.class);\n\t\tgiven(servletEndpoint.getId()).willReturn(\"alpha\");\n\t\tgiven(servletEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(servletEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(\n\t\t\t\tCollections.singletonList(servletEndpoint)).resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/EndpointLinksResolverTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void resolvedLinksContainsALinkForControllerEndpoint() {\n\t\tExposableControllerEndpoint controllerEndpoint = mock(\n\t\t\t\tExposableControllerEndpoint.class);\n\t\tgiven(controllerEndpoint.getEndpointId()).willReturn(EndpointId.of(\"alpha\"));\n\t\tgiven(controllerEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(controllerEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(\n\t\t\t\tCollections.singletonList(controllerEndpoint)).resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","date":"2018-10-15 04:53:28","endLine":112,"groupId":"15586","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resolvedLinksContainsALinkForControllerEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b9/7e33550f4d041ac0fd103f90ae35c84186a8a5.src","preCode":"\tpublic void resolvedLinksContainsALinkForControllerEndpoint() {\n\t\tExposableControllerEndpoint controllerEndpoint = mock(\n\t\t\t\tExposableControllerEndpoint.class);\n\t\tgiven(controllerEndpoint.getId()).willReturn(\"alpha\");\n\t\tgiven(controllerEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(controllerEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(\n\t\t\t\tCollections.singletonList(controllerEndpoint)).resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\",\n\t\t\t\tlinkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/EndpointLinksResolverTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid resolvedLinksContainsALinkForServletEndpoint() {\n\t\tExposableServletEndpoint servletEndpoint = mock(ExposableServletEndpoint.class);\n\t\tgiven(servletEndpoint.getEndpointId()).willReturn(EndpointId.of(\"alpha\"));\n\t\tgiven(servletEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(servletEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(Collections.singletonList(servletEndpoint))\n\t\t\t\t.resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\", linkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\", linkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","date":"2019-06-07 19:25:54","endLine":89,"groupId":"10419","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"resolvedLinksContainsALinkForServletEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8c/a98ddd660a85e103f82ea724fc6a6c2f256d14.src","preCode":"\tpublic void resolvedLinksContainsALinkForServletEndpoint() {\n\t\tExposableServletEndpoint servletEndpoint = mock(ExposableServletEndpoint.class);\n\t\tgiven(servletEndpoint.getEndpointId()).willReturn(EndpointId.of(\"alpha\"));\n\t\tgiven(servletEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(servletEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(Collections.singletonList(servletEndpoint))\n\t\t\t\t.resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\", linkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\", linkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/EndpointLinksResolverTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid resolvedLinksContainsALinkForControllerEndpoint() {\n\t\tExposableControllerEndpoint controllerEndpoint = mock(ExposableControllerEndpoint.class);\n\t\tgiven(controllerEndpoint.getEndpointId()).willReturn(EndpointId.of(\"alpha\"));\n\t\tgiven(controllerEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(controllerEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(Collections.singletonList(controllerEndpoint))\n\t\t\t\t.resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\", linkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\", linkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","date":"2019-06-07 19:25:54","endLine":103,"groupId":"10419","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"resolvedLinksContainsALinkForControllerEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8c/a98ddd660a85e103f82ea724fc6a6c2f256d14.src","preCode":"\tpublic void resolvedLinksContainsALinkForControllerEndpoint() {\n\t\tExposableControllerEndpoint controllerEndpoint = mock(ExposableControllerEndpoint.class);\n\t\tgiven(controllerEndpoint.getEndpointId()).willReturn(EndpointId.of(\"alpha\"));\n\t\tgiven(controllerEndpoint.isEnableByDefault()).willReturn(true);\n\t\tgiven(controllerEndpoint.getRootPath()).willReturn(\"alpha\");\n\t\tString requestUrl = \"https://api.example.com/actuator\";\n\t\tMap<String, Link> links = new EndpointLinksResolver(Collections.singletonList(controllerEndpoint))\n\t\t\t\t.resolveLinks(requestUrl);\n\t\tassertThat(links).hasSize(2);\n\t\tassertThat(links).hasEntrySatisfying(\"self\", linkWithHref(\"https://api.example.com/actuator\"));\n\t\tassertThat(links).hasEntrySatisfying(\"alpha\", linkWithHref(\"https://api.example.com/actuator/alpha\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/EndpointLinksResolverTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
