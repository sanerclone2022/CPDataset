[{"authorTime":"2020-05-07 05:31:30","codes":[{"authorDate":"2020-05-07 05:31:30","commitOrder":2,"curCode":"\tvoid servletErrorWithoutMessage() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex);\n\t\tassertThat(attributes.containsKey(\"exception\")).isFalse();\n\t\tassertThat(attributes.get(\"message\").toString()).contains(\"\");\n\t}\n","date":"2020-05-12 04:36:24","endLine":117,"groupId":"16312","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"servletErrorWithoutMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/22/ac9eee8492d580c128a16e752534cb5fbf1785.src","preCode":"\tvoid servletErrorWithoutMessage() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex);\n\t\tassertThat(attributes.containsKey(\"exception\")).isFalse();\n\t\tassertThat(attributes.get(\"message\").toString()).contains(\"\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"MB"},{"authorDate":"2020-05-07 05:31:30","commitOrder":2,"curCode":"\tvoid withoutStackTraceAttribute() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.containsKey(\"trace\")).isFalse();\n\t}\n","date":"2020-05-12 04:36:24","endLine":250,"groupId":"16312","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"withoutStackTraceAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/22/ac9eee8492d580c128a16e752534cb5fbf1785.src","preCode":"\tvoid withoutStackTraceAttribute() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.containsKey(\"trace\")).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"}],"commitId":"158933c3e57e921a0339cdb7635b12ae0ad89832","commitMessage":"@@@Improve API of ErrorAttributes and DefaultErrorAttributes\n\nThis commit improves the backward-compatibility of the ErrorAttributes\ninterfaces by providing a default implementation of a new method. It\nalso encapsulates several parameters that control the inclusion or\nexclusion of error attributes into a new ErrorAttributeOptions type to\nmake it easier and less intrusive to add additional options in the\nfuture. This encapsulation also makes the handling of the\nincludeException option more similar to other options.\n\nFixes gh-21324\n","date":"2020-05-12 04:36:24","modifiedFileCount":"17","status":"M","submitter":"Scott Frederick"},{"authorTime":"2021-01-22 21:32:47","codes":[{"authorDate":"2021-01-22 21:32:47","commitOrder":3,"curCode":"\tvoid servletErrorWithoutMessage() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex);\n\t\tassertThat(attributes).doesNotContainKey(\"exception\");\n\t\tassertThat(attributes.get(\"message\").toString()).contains(\"\");\n\t}\n","date":"2021-01-22 21:32:47","endLine":117,"groupId":"16312","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"servletErrorWithoutMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/1ade7d78f2136c2718d3c6b81198004b3de80e.src","preCode":"\tvoid servletErrorWithoutMessage() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex);\n\t\tassertThat(attributes.containsKey(\"exception\")).isFalse();\n\t\tassertThat(attributes.get(\"message\").toString()).contains(\"\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2021-01-22 21:32:47","commitOrder":3,"curCode":"\tvoid withoutStackTraceAttribute() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes).doesNotContainKey(\"trace\");\n\t}\n","date":"2021-01-22 21:32:47","endLine":250,"groupId":"16312","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"withoutStackTraceAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/1ade7d78f2136c2718d3c6b81198004b3de80e.src","preCode":"\tvoid withoutStackTraceAttribute() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.containsKey(\"trace\")).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"1370e8ca979da9f4b8fc87fdb2eb8a9a65d0033c","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-24974\n","date":"2021-01-22 21:32:47","modifiedFileCount":"5","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-01-22 21:32:47","codes":[{"authorDate":"2021-01-22 22:10:02","commitOrder":4,"curCode":"\tvoid servletErrorWithoutMessage() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex);\n\t\tassertThat(attributes).doesNotContainKey(\"exception\");\n\t\tassertThat(attributes).doesNotContainKey(\"message\");\n\t}\n","date":"2021-01-22 22:10:02","endLine":117,"groupId":"16312","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"servletErrorWithoutMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9b/1bf5e58dd95f9dd2daf8fd98f41a315130889f.src","preCode":"\tvoid servletErrorWithoutMessage() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex);\n\t\tassertThat(attributes).doesNotContainKey(\"exception\");\n\t\tassertThat(attributes.get(\"message\").toString()).contains(\"\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2021-01-22 21:32:47","commitOrder":4,"curCode":"\tvoid withoutStackTraceAttribute() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes).doesNotContainKey(\"trace\");\n\t}\n","date":"2021-01-22 21:32:47","endLine":250,"groupId":"16312","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"withoutStackTraceAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/1ade7d78f2136c2718d3c6b81198004b3de80e.src","preCode":"\tvoid withoutStackTraceAttribute() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes).doesNotContainKey(\"trace\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"}],"commitId":"5a56f8864f9400ef843b69c81bd7ea2fd61a5b51","commitMessage":"@@@Remove error message attribute instead of blanking it when not included\n\nCloses gh-24712\n","date":"2021-01-22 22:10:02","modifiedFileCount":"7","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-01-22 21:32:47","codes":[{"authorDate":"2021-04-01 22:33:31","commitOrder":5,"curCode":"\tvoid servletErrorWithoutMessage() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex);\n\t\tassertThat(this.webRequest.getAttribute(ErrorAttributes.ERROR_ATTRIBUTE, WebRequest.SCOPE_REQUEST))\n\t\t\t\t.isSameAs(ex);\n\t\tassertThat(attributes).doesNotContainKey(\"exception\");\n\t\tassertThat(attributes).doesNotContainKey(\"message\");\n\t}\n","date":"2021-04-02 03:09:46","endLine":123,"groupId":"102014","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"servletErrorWithoutMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/66/58819dd3049d5216d0448ed2b16eaf5963d8b5.src","preCode":"\tvoid servletErrorWithoutMessage() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex);\n\t\tassertThat(attributes).doesNotContainKey(\"exception\");\n\t\tassertThat(attributes).doesNotContainKey(\"message\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2021-01-22 21:32:47","commitOrder":5,"curCode":"\tvoid withoutStackTraceAttribute() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes).doesNotContainKey(\"trace\");\n\t}\n","date":"2021-01-22 21:32:47","endLine":250,"groupId":"102014","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"withoutStackTraceAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/1ade7d78f2136c2718d3c6b81198004b3de80e.src","preCode":"\tvoid withoutStackTraceAttribute() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tthis.request.setAttribute(\"javax.servlet.error.exception\", ex);\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest,\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes).doesNotContainKey(\"trace\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"}],"commitId":"72a1eb6384bc5ca9171e0433dc6a3bb750c8e8b0","commitMessage":"@@@Allow to manually tag request metrics with exceptions\n\nPrior to this commit.  some exceptions handled at the controller or\nhandler function level would:\n\n* not bubble up to the Spring Boot error handling support\n* not be tagged as part of the request metrics\n\nThis situation is inconsistent because in general.  exceptions handled at\nthe controller level can be considered as expected behavior.\nAlso.  depending on how the exception is handled.  the request metrics\nmight not be tagged with the exception.\nThis will be reconsidered in gh-23795.\n\nThis commit prepares a transition to the new situation. Developers can\nnow opt-in and set the handled exception as a request attribute. This\nwell-known attribute will be later read by the metrics support and used\nfor tagging the request metrics with the exception provided.\n\nThis mechanism is automatically used by the error handling support in\nSpring Boot.\n\nCloses gh-24028\n","date":"2021-04-02 03:09:46","modifiedFileCount":"10","status":"M","submitter":"Brian Clozel"}]
