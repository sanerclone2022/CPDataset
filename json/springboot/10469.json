[{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsWhenHasJmxExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationJmxEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tassertJmxTestEndpoint(endpoints.get(EndpointId.of(\"test\")));\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":127,"groupId":"15899","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasJmxExtensionShouldOverrideStandardEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/19/ed42f56cd42d97cd1ad433b1243ccfa1f4a7ad.src","preCode":"\tpublic void getEndpointsWhenHasJmxExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationJmxEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tassertJmxTestEndpoint(endpoints.get(EndpointId.of(\"test\")));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsWhenHasJmxExtensionWithNewOperationAddsExtraOperation() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\"update\", \"deleteSomething\", \"getAnother\");\n\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\tassertThat(getAnother.getDescription()).isEqualTo(\"Get another thing\");\n\t\t\tassertThat(getAnother.getOutputType()).isEqualTo(Object.class);\n\t\t\tassertThat(getAnother.getParameters()).isEmpty();\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":143,"groupId":"15899","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsWhenHasJmxExtensionWithNewOperationAddsExtraOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/19/ed42f56cd42d97cd1ad433b1243ccfa1f4a7ad.src","preCode":"\tpublic void getEndpointsWhenHasJmxExtensionWithNewOperationAddsExtraOperation() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\"update\", \"deleteSomething\", \"getAnother\");\n\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\tassertThat(getAnother.getDescription()).isEqualTo(\"Get another thing\");\n\t\t\tassertThat(getAnother.getOutputType()).isEqualTo(Object.class);\n\t\t\tassertThat(getAnother.getParameters()).isEmpty();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"MB"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getEndpointsWhenHasJmxExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationJmxEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tassertJmxTestEndpoint(endpoints.get(EndpointId.of(\"test\")));\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":119,"groupId":"10469","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasJmxExtensionShouldOverrideStandardEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c6/dc8be8889645fc8f3f245fb547255d5bc9d04c.src","preCode":"\tpublic void getEndpointsWhenHasJmxExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationJmxEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tassertJmxTestEndpoint(endpoints.get(EndpointId.of(\"test\")));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getEndpointsWhenHasJmxExtensionWithNewOperationAddsExtraOperation() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\", \"update\", \"deleteSomething\",\n\t\t\t\t\t\"getAnother\");\n\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\tassertThat(getAnother.getDescription()).isEqualTo(\"Get another thing\");\n\t\t\tassertThat(getAnother.getOutputType()).isEqualTo(Object.class);\n\t\t\tassertThat(getAnother.getParameters()).isEmpty();\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":135,"groupId":"10469","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsWhenHasJmxExtensionWithNewOperationAddsExtraOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c6/dc8be8889645fc8f3f245fb547255d5bc9d04c.src","preCode":"\tpublic void getEndpointsWhenHasJmxExtensionWithNewOperationAddsExtraOperation() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\", \"update\", \"deleteSomething\",\n\t\t\t\t\t\"getAnother\");\n\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\tassertThat(getAnother.getDescription()).isEqualTo(\"Get another thing\");\n\t\t\tassertThat(getAnother.getOutputType()).isEqualTo(Object.class);\n\t\t\tassertThat(getAnother.getParameters()).isEmpty();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
