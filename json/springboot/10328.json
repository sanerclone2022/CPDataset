[{"authorTime":"2019-03-06 21:24:33","codes":[{"authorDate":"2019-03-06 21:24:33","commitOrder":5,"curCode":"\tpublic void whenHealthIsDown503ResponseIsReturned() throws Exception {\n\t\twithHealthIndicator(\"charlie\", () -> Health.down().build(),\n\t\t\t\t() -> Mono.just(Health.down().build()), () -> {\n\t\t\t\t\tclient.get().uri(\"/actuator/health\").exchange().expectStatus()\n\t\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n\t\t\t\t\t\t\t.jsonPath(\"status\").isEqualTo(\"DOWN\")\n\t\t\t\t\t\t\t.jsonPath(\"details.alpha.status\").isEqualTo(\"UP\")\n\t\t\t\t\t\t\t.jsonPath(\"details.bravo.status\").isEqualTo(\"UP\")\n\t\t\t\t\t\t\t.jsonPath(\"details.charlie.status\").isEqualTo(\"DOWN\");\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t}\n","date":"2019-03-06 21:24:33","endLine":72,"groupId":"9699","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"whenHealthIsDown503ResponseIsReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8b/c03e6b2b186d6ebeb27111bf71ea6d4ecbaf0e.src","preCode":"\tpublic void whenHealthIsDown503ResponseIsReturned() throws Exception {\n\t\twithHealthIndicator(\"charlie\", () -> Health.down().build(),\n\t\t\t\t() -> Mono.just(Health.down().build()), () -> {\n\t\t\t\t\tclient.get().uri(\"/actuator/health\").exchange().expectStatus()\n\t\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n\t\t\t\t\t\t\t.jsonPath(\"status\").isEqualTo(\"DOWN\")\n\t\t\t\t\t\t\t.jsonPath(\"details.alpha.status\").isEqualTo(\"UP\")\n\t\t\t\t\t\t\t.jsonPath(\"details.bravo.status\").isEqualTo(\"UP\")\n\t\t\t\t\t\t\t.jsonPath(\"details.charlie.status\").isEqualTo(\"DOWN\");\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"MB"},{"authorDate":"2019-03-06 21:24:33","commitOrder":5,"curCode":"\tpublic void whenComponentInstanceHealthIsDown503ResponseIsReturned()\n\t\t\tthrows Exception {\n\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\tnew OrderedHealthAggregator(),\n\t\t\t\tCollections.singletonMap(\"one\", () -> Health.down().build()));\n\t\tCompositeReactiveHealthIndicator reactiveComposite = new CompositeReactiveHealthIndicator(\n\t\t\t\tnew OrderedHealthAggregator(),\n\t\t\t\tnew DefaultReactiveHealthIndicatorRegistry(Collections.singletonMap(\"one\",\n\t\t\t\t\t\t() -> Mono.just(Health.down().build()))));\n\t\twithHealthIndicator(\"charlie\", composite, reactiveComposite, () -> {\n\t\t\tclient.get().uri(\"/actuator/health/charlie/one\").exchange().expectStatus()\n\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n\t\t\t\t\t.jsonPath(\"status\").isEqualTo(\"DOWN\");\n\t\t\treturn null;\n\t\t});\n\t}\n","date":"2019-03-06 21:24:33","endLine":101,"groupId":"8863","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"whenComponentInstanceHealthIsDown503ResponseIsReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8b/c03e6b2b186d6ebeb27111bf71ea6d4ecbaf0e.src","preCode":"\tpublic void whenComponentInstanceHealthIsDown503ResponseIsReturned()\n\t\t\tthrows Exception {\n\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(\n\t\t\t\tnew OrderedHealthAggregator(),\n\t\t\t\tCollections.singletonMap(\"one\", () -> Health.down().build()));\n\t\tCompositeReactiveHealthIndicator reactiveComposite = new CompositeReactiveHealthIndicator(\n\t\t\t\tnew OrderedHealthAggregator(),\n\t\t\t\tnew DefaultReactiveHealthIndicatorRegistry(Collections.singletonMap(\"one\",\n\t\t\t\t\t\t() -> Mono.just(Health.down().build()))));\n\t\twithHealthIndicator(\"charlie\", composite, reactiveComposite, () -> {\n\t\t\tclient.get().uri(\"/actuator/health/charlie/one\").exchange().expectStatus()\n\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody()\n\t\t\t\t\t.jsonPath(\"status\").isEqualTo(\"DOWN\");\n\t\t\treturn null;\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"acdbd18a7b7a4b070c086bc6d5a07dfb6342ecb8","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-03-06 21:24:33","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid whenHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client) throws Exception {\n\t\twithHealthIndicator(context, \"charlie\", () -> Health.down().build(), () -> Mono.just(Health.down().build()),\n\t\t\t\t() -> {\n\t\t\t\t\tclient.get().uri(\"/actuator/health\").exchange().expectStatus()\n\t\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\")\n\t\t\t\t\t\t\t.jsonPath(\"details.alpha.status\").isEqualTo(\"UP\").jsonPath(\"details.bravo.status\")\n\t\t\t\t\t\t\t.isEqualTo(\"UP\").jsonPath(\"details.charlie.status\").isEqualTo(\"DOWN\");\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":63,"groupId":"9699","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"whenHealthIsDown503ResponseIsReturned","params":"(ApplicationContextcontext@WebTestClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5c/92e2b8253fd3fc53fde9d3478516b7312e61c5.src","preCode":"\tpublic void whenHealthIsDown503ResponseIsReturned() throws Exception {\n\t\twithHealthIndicator(\"charlie\", () -> Health.down().build(), () -> Mono.just(Health.down().build()), () -> {\n\t\t\tclient.get().uri(\"/actuator/health\").exchange().expectStatus().isEqualTo(HttpStatus.SERVICE_UNAVAILABLE)\n\t\t\t\t\t.expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\").jsonPath(\"details.alpha.status\").isEqualTo(\"UP\")\n\t\t\t\t\t.jsonPath(\"details.bravo.status\").isEqualTo(\"UP\").jsonPath(\"details.charlie.status\")\n\t\t\t\t\t.isEqualTo(\"DOWN\");\n\t\t\treturn null;\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid whenComponentInstanceHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client)\n\t\t\tthrows Exception {\n\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(new OrderedHealthAggregator(),\n\t\t\t\tCollections.singletonMap(\"one\", () -> Health.down().build()));\n\t\tCompositeReactiveHealthIndicator reactiveComposite = new CompositeReactiveHealthIndicator(\n\t\t\t\tnew OrderedHealthAggregator(), new DefaultReactiveHealthIndicatorRegistry(\n\t\t\t\t\t\tCollections.singletonMap(\"one\", () -> Mono.just(Health.down().build()))));\n\t\twithHealthIndicator(context, \"charlie\", composite, reactiveComposite, () -> {\n\t\t\tclient.get().uri(\"/actuator/health/charlie/one\").exchange().expectStatus()\n\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\");\n\t\t\treturn null;\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":90,"groupId":"9700","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"whenComponentInstanceHealthIsDown503ResponseIsReturned","params":"(ApplicationContextcontext@WebTestClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5c/92e2b8253fd3fc53fde9d3478516b7312e61c5.src","preCode":"\tpublic void whenComponentInstanceHealthIsDown503ResponseIsReturned() throws Exception {\n\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(new OrderedHealthAggregator(),\n\t\t\t\tCollections.singletonMap(\"one\", () -> Health.down().build()));\n\t\tCompositeReactiveHealthIndicator reactiveComposite = new CompositeReactiveHealthIndicator(\n\t\t\t\tnew OrderedHealthAggregator(), new DefaultReactiveHealthIndicatorRegistry(\n\t\t\t\t\t\tCollections.singletonMap(\"one\", () -> Mono.just(Health.down().build()))));\n\t\twithHealthIndicator(\"charlie\", composite, reactiveComposite, () -> {\n\t\t\tclient.get().uri(\"/actuator/health/charlie/one\").exchange().expectStatus()\n\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\");\n\t\t\treturn null;\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-08-21 05:18:27","codes":[{"authorDate":"2019-08-21 05:18:27","commitOrder":7,"curCode":"\tvoid whenHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client) {\n\t\tHealthIndicator healthIndicator = () -> Health.down().build();\n\t\tReactiveHealthIndicator reactiveHealthIndicator = () -> Mono.just(Health.down().build());\n\t\twithHealthContributor(context, \"charlie\", healthIndicator, reactiveHealthIndicator,\n\t\t\t\t() -> client.get().uri(\"/actuator/health\").exchange().expectStatus()\n\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\")\n\t\t\t\t\t\t.jsonPath(\"details.alpha.status\").isEqualTo(\"UP\").jsonPath(\"details.bravo.status\")\n\t\t\t\t\t\t.isEqualTo(\"UP\").jsonPath(\"details.charlie.status\").isEqualTo(\"DOWN\"));\n\t}\n","date":"2019-08-22 09:43:25","endLine":61,"groupId":"14520","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"whenHealthIsDown503ResponseIsReturned","params":"(ApplicationContextcontext@WebTestClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a5/b4532d03fb4fd073bf7e0c80fee5b4cb02ffee.src","preCode":"\tvoid whenHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client) throws Exception {\n\t\twithHealthIndicator(context, \"charlie\", () -> Health.down().build(), () -> Mono.just(Health.down().build()),\n\t\t\t\t() -> {\n\t\t\t\t\tclient.get().uri(\"/actuator/health\").exchange().expectStatus()\n\t\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\")\n\t\t\t\t\t\t\t.jsonPath(\"details.alpha.status\").isEqualTo(\"UP\").jsonPath(\"details.bravo.status\")\n\t\t\t\t\t\t\t.isEqualTo(\"UP\").jsonPath(\"details.charlie.status\").isEqualTo(\"DOWN\");\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2019-08-21 05:18:27","commitOrder":7,"curCode":"\tvoid whenComponentInstanceHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client) {\n\t\tHealthIndicator healthIndicator = () -> Health.down().build();\n\t\tCompositeHealthContributor composite = CompositeHealthContributor\n\t\t\t\t.fromMap(Collections.singletonMap(\"one\", healthIndicator));\n\t\tReactiveHealthIndicator reactiveHealthIndicator = () -> Mono.just(Health.down().build());\n\t\tCompositeReactiveHealthContributor reactiveComposite = CompositeReactiveHealthContributor\n\t\t\t\t.fromMap(Collections.singletonMap(\"one\", reactiveHealthIndicator));\n\t\twithHealthContributor(context, \"charlie\", composite, reactiveComposite,\n\t\t\t\t() -> client.get().uri(\"/actuator/health/charlie/one\").exchange().expectStatus()\n\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\"));\n\t}\n","date":"2019-08-22 09:43:25","endLine":83,"groupId":"14518","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"whenComponentInstanceHealthIsDown503ResponseIsReturned","params":"(ApplicationContextcontext@WebTestClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a5/b4532d03fb4fd073bf7e0c80fee5b4cb02ffee.src","preCode":"\tvoid whenComponentInstanceHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client)\n\t\t\tthrows Exception {\n\t\tCompositeHealthIndicator composite = new CompositeHealthIndicator(new OrderedHealthAggregator(),\n\t\t\t\tCollections.singletonMap(\"one\", () -> Health.down().build()));\n\t\tCompositeReactiveHealthIndicator reactiveComposite = new CompositeReactiveHealthIndicator(\n\t\t\t\tnew OrderedHealthAggregator(), new DefaultReactiveHealthIndicatorRegistry(\n\t\t\t\t\t\tCollections.singletonMap(\"one\", () -> Mono.just(Health.down().build()))));\n\t\twithHealthIndicator(context, \"charlie\", composite, reactiveComposite, () -> {\n\t\t\tclient.get().uri(\"/actuator/health/charlie/one\").exchange().expectStatus()\n\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\");\n\t\t\treturn null;\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"3c535e0de340a718d6cf0d863a6529b314a38f42","commitMessage":"@@@Add HealthContributor and refactor HealthEndpoint\n\nOverhaul `HealthEndpoint` support to make it easier to support health\ngroups. Prior to this commit the `HealthIndicator` interface was used\nfor both regular indicators and composite indicators. In addition the\n`Health` result was used to both represent individual.  system and\ncomposite health. This design unfortunately means that all health\ncontributors need to be aware of the `HealthAggregator` and could not\neasily support heath groups if per-group aggregation is required.\n\nThis commit reworks many aspects of the health support in order to\nprovide a cleaner separation between a `HealthIndicator`and a\ncomposite. The following changes have been made:\n\n- A `HealthContributor` interface has been introduced to represent\n  the general concept of something that contributes health information.\n  A contributor can either be a `HealthIndicator` or a\n  `CompositeHealthContributor`.\n\n- A `HealthComponent` class has been introduced to mirror the\n  contributor arrangement. The component can be either\n  `CompositeHealth` or `Health`.\n\n- The `HealthAggregator` interface has been replaced with a more\n  focused `StatusAggregator` interface which only deals with `Status`\n  results.\n\n- `CompositeHealthIndicator` has been replaced with\n  `CompositeHealthContributor` which only provides access to other\n  contributors. A composite can no longer directly return `Health`.\n\n- `HealthIndicatorRegistry` has been replaced with\n  `HealthContributorRegistry` and the default implementation now\n  uses a copy-on-write strategy.\n\n- `HealthEndpoint`.  `HealthEndpointWebExtension` and\n  `ReactiveHealthEndpointWebExtension` now extend a common\n  `HealthEndpointSupport` class. They are now driven by a\n  health contributor registry and `HealthEndpointSettings`.\n\n- The `HealthStatusHttpMapper` class has been replaced by a\n  `HttpCodeStatusMapper` interface.\n\n- The `HealthWebEndpointResponseMapper` class has been replaced\n  by a `HealthEndpointSettings` strategy. This allows us to move\n  role related logic and `ShowDetails` to the auto-configure module.\n\n- `SimpleHttpCodeStatusMapper` and `SimpleStatusAggregator`\n  implementations have been added which are configured via constructor\n  arguments rather than setters.\n\n- Endpoint auto-configuration has been reworked and the\n  `CompositeHealthIndicatorConfiguration` class has been replaced\n  by `CompositeHealthContributorConfiguration`.\n\n- The endpoint JSON has been changed make `details` distinct from\n  `components`.\n\nSee gh-17926\n","date":"2019-08-22 09:43:25","modifiedFileCount":"75","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-09-26 13:46:37","codes":[{"authorDate":"2019-09-26 13:46:37","commitOrder":8,"curCode":"\tvoid whenHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client) {\n\t\tHealthIndicator healthIndicator = () -> Health.down().build();\n\t\tReactiveHealthIndicator reactiveHealthIndicator = () -> Mono.just(Health.down().build());\n\t\twithHealthContributor(context, \"charlie\", healthIndicator, reactiveHealthIndicator,\n\t\t\t\t() -> client.get().uri(\"/actuator/health\").accept(MediaType.APPLICATION_JSON).exchange().expectStatus()\n\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\")\n\t\t\t\t\t\t.jsonPath(\"components.alpha.status\").isEqualTo(\"UP\").jsonPath(\"components.bravo.status\")\n\t\t\t\t\t\t.isEqualTo(\"UP\").jsonPath(\"components.charlie.status\").isEqualTo(\"DOWN\"));\n\t}\n","date":"2019-09-27 07:16:23","endLine":89,"groupId":"10328","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"whenHealthIsDown503ResponseIsReturned","params":"(ApplicationContextcontext@WebTestClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/11aec206d24903cc83114a9a817f196280de0c.src","preCode":"\tvoid whenHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client) {\n\t\tHealthIndicator healthIndicator = () -> Health.down().build();\n\t\tReactiveHealthIndicator reactiveHealthIndicator = () -> Mono.just(Health.down().build());\n\t\twithHealthContributor(context, \"charlie\", healthIndicator, reactiveHealthIndicator,\n\t\t\t\t() -> client.get().uri(\"/actuator/health\").exchange().expectStatus()\n\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\")\n\t\t\t\t\t\t.jsonPath(\"details.alpha.status\").isEqualTo(\"UP\").jsonPath(\"details.bravo.status\")\n\t\t\t\t\t\t.isEqualTo(\"UP\").jsonPath(\"details.charlie.status\").isEqualTo(\"DOWN\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2019-09-26 13:46:37","commitOrder":8,"curCode":"\tvoid whenComponentInstanceHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client) {\n\t\tHealthIndicator healthIndicator = () -> Health.down().build();\n\t\tCompositeHealthContributor composite = CompositeHealthContributor\n\t\t\t\t.fromMap(Collections.singletonMap(\"one\", healthIndicator));\n\t\tReactiveHealthIndicator reactiveHealthIndicator = () -> Mono.just(Health.down().build());\n\t\tCompositeReactiveHealthContributor reactiveComposite = CompositeReactiveHealthContributor\n\t\t\t\t.fromMap(Collections.singletonMap(\"one\", reactiveHealthIndicator));\n\t\twithHealthContributor(context, \"charlie\", composite, reactiveComposite,\n\t\t\t\t() -> client.get().uri(\"/actuator/health/charlie/one\").accept(MediaType.APPLICATION_JSON).exchange()\n\t\t\t\t\t\t.expectStatus().isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\")\n\t\t\t\t\t\t.isEqualTo(\"DOWN\"));\n\t}\n","date":"2019-09-27 07:16:23","endLine":113,"groupId":"10328","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"whenComponentInstanceHealthIsDown503ResponseIsReturned","params":"(ApplicationContextcontext@WebTestClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/11aec206d24903cc83114a9a817f196280de0c.src","preCode":"\tvoid whenComponentInstanceHealthIsDown503ResponseIsReturned(ApplicationContext context, WebTestClient client) {\n\t\tHealthIndicator healthIndicator = () -> Health.down().build();\n\t\tCompositeHealthContributor composite = CompositeHealthContributor\n\t\t\t\t.fromMap(Collections.singletonMap(\"one\", healthIndicator));\n\t\tReactiveHealthIndicator reactiveHealthIndicator = () -> Mono.just(Health.down().build());\n\t\tCompositeReactiveHealthContributor reactiveComposite = CompositeReactiveHealthContributor\n\t\t\t\t.fromMap(Collections.singletonMap(\"one\", reactiveHealthIndicator));\n\t\twithHealthContributor(context, \"charlie\", composite, reactiveComposite,\n\t\t\t\t() -> client.get().uri(\"/actuator/health/charlie/one\").exchange().expectStatus()\n\t\t\t\t\t\t.isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).expectBody().jsonPath(\"status\").isEqualTo(\"DOWN\"));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthEndpointWebIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"69c561a69a54a32ba31f4bc66e7954ee21e6445f","commitMessage":"@@@Rename health JSON 'details' to 'components' in v3\n\nUpdate the health endpoint so the nested components are now exposed\nunder `components` rather than `details` when v3 of the actuator\nREST API is being used.\n\nThis distinction helps to clarify the difference between composite\nhealth (health composed of other health components) and health\ndetails (technology specific information gathered by the indicator).\n\nSince this is a breaking change for the REST API.  it is only returned\nfor v3 payloads. Requests made accepting only a v2 response will have\nJSON provided in the original form.\n\nCloses gh-17929\n","date":"2019-09-27 07:16:23","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"}]
