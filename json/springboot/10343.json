[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void propertyEntry() {\n\t\tTestPropertyValues.of(\"my.foo=another\").applyToSystemProperties(() -> {\n\t\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\t\tTestPropertyValues.of(\"my.foo=bar\", \"my.foo2=bar2\").applyTo(environment,\n\t\t\t\t\tTestPropertyValues.Type.MAP, \"test\");\n\t\t\tEnvironmentEntryDescriptor descriptor = new EnvironmentEndpoint(environment)\n\t\t\t\t\t.environmentEntry(\"my.foo\");\n\t\t\tassertThat(descriptor).isNotNull();\n\t\t\tassertThat(descriptor.getProperty()).isNotNull();\n\t\t\tassertThat(descriptor.getProperty().getSource()).isEqualTo(\"test\");\n\t\t\tassertThat(descriptor.getProperty().getValue()).isEqualTo(\"bar\");\n\t\t\tMap<String, PropertySourceEntryDescriptor> sources = propertySources(\n\t\t\t\t\tdescriptor);\n\t\t\tassertThat(sources.keySet()).containsExactly(\"test\", \"systemProperties\",\n\t\t\t\t\t\"systemEnvironment\");\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"test\"), \"bar\", null);\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"systemProperties\"),\n\t\t\t\t\t\"another\", null);\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"systemEnvironment\"), null,\n\t\t\t\t\tnull);\n\t\t\treturn null;\n\t\t});\n\t}\n","date":"2017-10-05 11:18:56","endLine":260,"groupId":"13884","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"propertyEntry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2d/1a3a7ab716190b919c929596276cc3cf43eb0b.src","preCode":"\tpublic void propertyEntry() {\n\t\tTestPropertyValues.of(\"my.foo=another\").applyToSystemProperties(() -> {\n\t\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\t\tTestPropertyValues.of(\"my.foo=bar\", \"my.foo2=bar2\").applyTo(environment,\n\t\t\t\t\tTestPropertyValues.Type.MAP, \"test\");\n\t\t\tEnvironmentEntryDescriptor descriptor = new EnvironmentEndpoint(environment)\n\t\t\t\t\t.environmentEntry(\"my.foo\");\n\t\t\tassertThat(descriptor).isNotNull();\n\t\t\tassertThat(descriptor.getProperty()).isNotNull();\n\t\t\tassertThat(descriptor.getProperty().getSource()).isEqualTo(\"test\");\n\t\t\tassertThat(descriptor.getProperty().getValue()).isEqualTo(\"bar\");\n\t\t\tMap<String, PropertySourceEntryDescriptor> sources = propertySources(\n\t\t\t\t\tdescriptor);\n\t\t\tassertThat(sources.keySet()).containsExactly(\"test\", \"systemProperties\",\n\t\t\t\t\t\"systemEnvironment\");\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"test\"), \"bar\", null);\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"systemProperties\"),\n\t\t\t\t\t\"another\", null);\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"systemEnvironment\"), null,\n\t\t\t\t\tnull);\n\t\t\treturn null;\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/env/EnvironmentEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void propertyEntryNotFound() {\n\t\tConfigurableEnvironment environment = emptyEnvironment();\n\t\tenvironment.getPropertySources()\n\t\t\t\t.addFirst(singleKeyPropertySource(\"test\", \"foo\", \"bar\"));\n\t\tEnvironmentEntryDescriptor descriptor = new EnvironmentEndpoint(environment)\n\t\t\t\t.environmentEntry(\"does.not.exist\");\n\t\tassertThat(descriptor).isNotNull();\n\t\tassertThat(descriptor.getProperty()).isNull();\n\t\tMap<String, PropertySourceEntryDescriptor> sources = propertySources(descriptor);\n\t\tassertThat(sources.keySet()).containsExactly(\"test\");\n\t\tassertPropertySourceEntryDescriptor(sources.get(\"test\"), null, null);\n\t}\n","date":"2017-10-05 11:18:56","endLine":274,"groupId":"2089","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"propertyEntryNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2d/1a3a7ab716190b919c929596276cc3cf43eb0b.src","preCode":"\tpublic void propertyEntryNotFound() {\n\t\tConfigurableEnvironment environment = emptyEnvironment();\n\t\tenvironment.getPropertySources()\n\t\t\t\t.addFirst(singleKeyPropertySource(\"test\", \"foo\", \"bar\"));\n\t\tEnvironmentEntryDescriptor descriptor = new EnvironmentEndpoint(environment)\n\t\t\t\t.environmentEntry(\"does.not.exist\");\n\t\tassertThat(descriptor).isNotNull();\n\t\tassertThat(descriptor.getProperty()).isNull();\n\t\tMap<String, PropertySourceEntryDescriptor> sources = propertySources(descriptor);\n\t\tassertThat(sources.keySet()).containsExactly(\"test\");\n\t\tassertPropertySourceEntryDescriptor(sources.get(\"test\"), null, null);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/env/EnvironmentEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid propertyEntry() {\n\t\tTestPropertyValues.of(\"my.foo=another\").applyToSystemProperties(() -> {\n\t\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\t\tTestPropertyValues.of(\"my.foo=bar\", \"my.foo2=bar2\").applyTo(environment, TestPropertyValues.Type.MAP,\n\t\t\t\t\t\"test\");\n\t\t\tEnvironmentEntryDescriptor descriptor = new EnvironmentEndpoint(environment).environmentEntry(\"my.foo\");\n\t\t\tassertThat(descriptor).isNotNull();\n\t\t\tassertThat(descriptor.getProperty()).isNotNull();\n\t\t\tassertThat(descriptor.getProperty().getSource()).isEqualTo(\"test\");\n\t\t\tassertThat(descriptor.getProperty().getValue()).isEqualTo(\"bar\");\n\t\t\tMap<String, PropertySourceEntryDescriptor> sources = propertySources(descriptor);\n\t\t\tassertThat(sources.keySet()).containsExactly(\"test\", \"systemProperties\", \"systemEnvironment\");\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"test\"), \"bar\", null);\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"systemProperties\"), \"another\", null);\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"systemEnvironment\"), null, null);\n\t\t\treturn null;\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":221,"groupId":"10343","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"propertyEntry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/91/17649fb0343e2860e8d3025f67fd792912199c.src","preCode":"\tpublic void propertyEntry() {\n\t\tTestPropertyValues.of(\"my.foo=another\").applyToSystemProperties(() -> {\n\t\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\t\tTestPropertyValues.of(\"my.foo=bar\", \"my.foo2=bar2\").applyTo(environment, TestPropertyValues.Type.MAP,\n\t\t\t\t\t\"test\");\n\t\t\tEnvironmentEntryDescriptor descriptor = new EnvironmentEndpoint(environment).environmentEntry(\"my.foo\");\n\t\t\tassertThat(descriptor).isNotNull();\n\t\t\tassertThat(descriptor.getProperty()).isNotNull();\n\t\t\tassertThat(descriptor.getProperty().getSource()).isEqualTo(\"test\");\n\t\t\tassertThat(descriptor.getProperty().getValue()).isEqualTo(\"bar\");\n\t\t\tMap<String, PropertySourceEntryDescriptor> sources = propertySources(descriptor);\n\t\t\tassertThat(sources.keySet()).containsExactly(\"test\", \"systemProperties\", \"systemEnvironment\");\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"test\"), \"bar\", null);\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"systemProperties\"), \"another\", null);\n\t\t\tassertPropertySourceEntryDescriptor(sources.get(\"systemEnvironment\"), null, null);\n\t\t\treturn null;\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/env/EnvironmentEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid propertyEntryNotFound() {\n\t\tConfigurableEnvironment environment = emptyEnvironment();\n\t\tenvironment.getPropertySources().addFirst(singleKeyPropertySource(\"test\", \"foo\", \"bar\"));\n\t\tEnvironmentEntryDescriptor descriptor = new EnvironmentEndpoint(environment).environmentEntry(\"does.not.exist\");\n\t\tassertThat(descriptor).isNotNull();\n\t\tassertThat(descriptor.getProperty()).isNull();\n\t\tMap<String, PropertySourceEntryDescriptor> sources = propertySources(descriptor);\n\t\tassertThat(sources.keySet()).containsExactly(\"test\");\n\t\tassertPropertySourceEntryDescriptor(sources.get(\"test\"), null, null);\n\t}\n","date":"2019-06-07 19:25:54","endLine":233,"groupId":"10343","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"propertyEntryNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/91/17649fb0343e2860e8d3025f67fd792912199c.src","preCode":"\tpublic void propertyEntryNotFound() {\n\t\tConfigurableEnvironment environment = emptyEnvironment();\n\t\tenvironment.getPropertySources().addFirst(singleKeyPropertySource(\"test\", \"foo\", \"bar\"));\n\t\tEnvironmentEntryDescriptor descriptor = new EnvironmentEndpoint(environment).environmentEntry(\"does.not.exist\");\n\t\tassertThat(descriptor).isNotNull();\n\t\tassertThat(descriptor.getProperty()).isNull();\n\t\tMap<String, PropertySourceEntryDescriptor> sources = propertySources(descriptor);\n\t\tassertThat(sources.keySet()).containsExactly(\"test\");\n\t\tassertPropertySourceEntryDescriptor(sources.get(\"test\"), null, null);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/env/EnvironmentEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
