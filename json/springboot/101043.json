[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":68,"groupId":"9580","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f3/ab2b13adbb45be2725d3262ff9fbfd2af1d6d5.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":57,"groupId":"3606","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b1/1acf59b857a09a1a868a245d4609127109423d.src","preCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-02-28 13:01:13","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":2,"curCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":68,"groupId":"9580","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f3/ab2b13adbb45be2725d3262ff9fbfd2af1d6d5.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"},{"authorDate":"2018-02-28 13:01:13","commitOrder":2,"curCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","date":"2018-02-28 13:05:35","endLine":59,"groupId":"3606","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/10/5b0dcf11678b0212caeb06b15875a6540a5df5.src","preCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"eef6fdb0664526f027c7fb59eda05ff1acebce07","commitMessage":"@@@Include WebSecurityConfigurer beans in @WebMvcTest\n\nUpdate `WebMvcTypeExcludeFilter` to include `WebSecurityConfigurer`\nbeans.\n\nFixes gh-12275\n","date":"2018-02-28 13:05:35","modifiedFileCount":"2","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-03-01 01:41:39","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":3,"curCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":68,"groupId":"9580","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f3/ab2b13adbb45be2725d3262ff9fbfd2af1d6d5.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"},{"authorDate":"2018-03-01 01:41:39","commitOrder":3,"curCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2018-03-01 02:59:26","endLine":57,"groupId":"3606","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b1/1acf59b857a09a1a868a245d4609127109423d.src","preCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"67998e983f3a57c11919ea04b4f26f8cc8183b18","commitMessage":"@@@Revert \"Include WebSecurityConfigurer beans in @WebMvcTest\"\n\nThis reverts commit eef6fdb0664526f027c7fb59eda05ff1acebce07.\n","date":"2018-03-01 02:59:26","modifiedFileCount":"2","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-08-31 06:43:17","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":4,"curCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":68,"groupId":"9580","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f3/ab2b13adbb45be2725d3262ff9fbfd2af1d6d5.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"},{"authorDate":"2018-08-31 06:43:17","commitOrder":4,"curCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","date":"2018-08-31 07:47:31","endLine":59,"groupId":"3606","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a0/82bd6a69e0d14659c0bc6b30e76d2bc8f6bb6d.src","preCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"0384a88b57b70c2ad73f84447a87429ae0d83edf","commitMessage":"@@@Include web security config classes in @WebMvcTest\n\nSecurity config classes are not included when the\nsecure flag is set to false.\n\nCloses gh-6514\n","date":"2018-08-31 07:47:31","modifiedFileCount":"3","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2018-08-31 06:43:17","codes":[{"authorDate":"2018-09-01 08:17:28","commitOrder":5,"curCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse();\n\t}\n","date":"2018-09-12 04:28:13","endLine":71,"groupId":"9580","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/b5f1122730e7f0a94ee3970f81a029c88fe874.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2018-08-31 06:43:17","commitOrder":5,"curCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","date":"2018-08-31 07:47:31","endLine":59,"groupId":"3606","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a0/82bd6a69e0d14659c0bc6b30e76d2bc8f6bb6d.src","preCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"ab6bdc7ae20a4990d20cf39f0ce20d3846e1b739","commitMessage":"@@@Apply springSecurity configurer to WebTestClient\n\nAlso.  @WebFluxTest now adds any ServerHttpSecurity beans\nto the context.\n\nCloses gh-13632\n","date":"2018-09-12 04:28:13","modifiedFileCount":"9","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2018-08-31 06:43:17","codes":[{"authorDate":"2019-03-21 09:00:48","commitOrder":6,"curCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2019-03-21 09:00:48","endLine":68,"groupId":"9580","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/28/b9bc9e2b9a75c08deae95576260d2b07bfd278.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2018-08-31 06:43:17","commitOrder":6,"curCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","date":"2018-08-31 07:47:31","endLine":59,"groupId":"3606","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a0/82bd6a69e0d14659c0bc6b30e76d2bc8f6bb6d.src","preCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(\n\t\t\t\tWithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"0d136f057347dbb71cf70f22e15dfdce025900cc","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-03-21 09:00:48","modifiedFileCount":"2","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":7,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2019-06-07 19:25:54","endLine":66,"groupId":"9580","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ef/8a06374e2b7609ef5187574b4d9ad56a54a097.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":7,"curCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","date":"2019-06-07 19:25:54","endLine":58,"groupId":"3606","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/87/553ac522415cdcc1dd4e3a1cd84d89577c7cfe.src","preCode":"\tpublic void matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-07-23 03:35:50","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":8,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2019-06-07 19:25:54","endLine":66,"groupId":"9580","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ef/8a06374e2b7609ef5187574b4d9ad56a54a097.src","preCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2019-07-23 03:35:50","commitOrder":8,"curCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t}\n","date":"2019-07-23 03:35:50","endLine":60,"groupId":"3606","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e9/480855fcdf2cb00940241a2d11eabde48e71af.src","preCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"9f69b61d493c29ff5026bbbee306d507d60a0eac","commitMessage":"@@@Merge pull request #17600 from nosan\n\n* pr/17600:\n  Include HandlerInterceptor beans in WebMvcTest slice\n\nCloses gh-17600\n","date":"2019-07-23 03:35:50","modifiedFileCount":"2","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2019-07-23 03:35:50","codes":[{"authorDate":"2019-07-23 03:39:26","commitOrder":9,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t}\n","date":"2019-07-23 03:39:26","endLine":72,"groupId":"9580","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/66/563d166661bb2fb1d4ca305f12c397e3c87c4b.src","preCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-07-23 03:35:50","commitOrder":9,"curCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t}\n","date":"2019-07-23 03:35:50","endLine":60,"groupId":"3606","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e9/480855fcdf2cb00940241a2d11eabde48e71af.src","preCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"6580d394653b3fb0752a3a358abb3b525d92f2c1","commitMessage":"@@@Merge pull request #17601 from nosan\n\n* pr/17601:\n  Include WebFilter beans in WebFluxTest slice\n\nCloses gh-17601\n","date":"2019-07-23 03:39:26","modifiedFileCount":"2","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2020-07-27 17:12:09","codes":[{"authorDate":"2020-07-27 17:12:09","commitOrder":10,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","date":"2020-07-27 17:12:09","endLine":75,"groupId":"9580","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/ce35b10194fb750e568492599ade27ba4cbdb0.src","preCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-07-27 17:12:09","commitOrder":10,"curCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","date":"2020-07-27 17:12:09","endLine":62,"groupId":"3606","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/79/b430b93fa272559696d1abc593bf732da76912.src","preCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"8a9cc6422111c3c1c6da42ed3eb67d26921ebb04","commitMessage":"@@@Merge branch '2.3.x'\n\nCloses gh-22577\n","date":"2020-07-27 17:12:09","modifiedFileCount":"4","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-08-15 03:21:35","codes":[{"authorDate":"2020-07-27 17:12:09","commitOrder":11,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","date":"2020-07-27 17:12:09","endLine":75,"groupId":"9580","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/ce35b10194fb750e568492599ade27ba4cbdb0.src","preCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2020-08-15 03:21:35","commitOrder":11,"curCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, SecurityFilterChain.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","date":"2020-08-15 03:24:25","endLine":64,"groupId":"3606","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9c/a2e188c56223e1d91cd9281101055a2d093f85.src","preCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"bbbbe8e4d28b1a355fa055aa1425602aca20e946","commitMessage":"@@@Make security auto-configs back off when SecurityFilterChain present\n\nCloses gh-22739\n","date":"2020-08-15 03:24:25","modifiedFileCount":"15","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2021-02-01 23:39:52","codes":[{"authorDate":"2021-02-01 23:39:52","commitOrder":12,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleDialect.class)).isFalse();\n\t}\n","date":"2021-02-01 23:39:52","endLine":78,"groupId":"9580","id":23,"instanceNumber":1,"isCurCommit":1,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/ff59b9fb2deabf78477caa065297583fef0c86.src","preCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-02-01 23:39:52","commitOrder":12,"curCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, SecurityFilterChain.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleDialect.class)).isFalse();\n\t}\n","date":"2021-02-01 23:39:52","endLine":66,"groupId":"3606","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ce/8477be4223adbf8a94c9b59b642daf26a73137.src","preCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, SecurityFilterChain.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"7f8ea33359603a0501e9fdbea1a8602b0bc36429","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-25073\n","date":"2021-02-01 23:39:52","modifiedFileCount":"4","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-09-10 14:06:15","codes":[{"authorDate":"2021-02-01 23:39:52","commitOrder":13,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleDialect.class)).isFalse();\n\t}\n","date":"2021-02-01 23:39:52","endLine":78,"groupId":"101043","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/ff59b9fb2deabf78477caa065297583fef0c86.src","preCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleDialect.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2021-09-10 14:06:15","commitOrder":13,"curCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWebMvcRegistrations.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, SecurityFilterChain.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleDialect.class)).isFalse();\n\t}\n","date":"2021-09-10 14:06:15","endLine":69,"groupId":"101043","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"matchWhenHasNoControllers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/19/8ecf7295a28f369d9ac8c78718e0bbd79a7008.src","preCode":"\tvoid matchWhenHasNoControllers() throws Exception {\n\t\tWebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(WithNoControllers.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();\n\t\tassertThat(excludes(filter, SecurityFilterChain.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleHandlerInterceptor.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleDialect.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"657b8cea51800bd42abf10cbef1767a3c00592d6","commitMessage":"@@@Merge pull request #27823 from quaff\n\n* pr/27823:\n  Include WebMvcRegistrations beans in WebMvcTest\n\nCloses gh-27823\n","date":"2021-09-10 14:06:15","modifiedFileCount":"2","status":"M","submitter":"Stephane Nicoll"}]
