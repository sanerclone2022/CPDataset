[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void simple() throws Exception {\n\t\tString s = \"one two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"one\",\n\t\t\t\t\"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"one\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isTrue();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t}\n","date":"2017-10-05 11:18:56","endLine":42,"groupId":"8826","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"simple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fd/29aed763c27110d906e45ce8d93dc201a07e3e.src","preCode":"\tpublic void simple() throws Exception {\n\t\tString s = \"one two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"one\",\n\t\t\t\t\"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"one\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isTrue();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/shell/EscapeAwareWhiteSpaceArgumentDelimiterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void escaped() throws Exception {\n\t\tString s = \"o\\\\ ne two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"o\\\\ ne\",\n\t\t\t\t\"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"o ne\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 5)).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":54,"groupId":"8826","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"escaped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fd/29aed763c27110d906e45ce8d93dc201a07e3e.src","preCode":"\tpublic void escaped() throws Exception {\n\t\tString s = \"o\\\\ ne two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"o\\\\ ne\",\n\t\t\t\t\"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"o ne\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 5)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/shell/EscapeAwareWhiteSpaceArgumentDelimiterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void simple() {\n\t\tString s = \"one two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"one\",\n\t\t\t\t\"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"one\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isTrue();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t}\n","date":"2017-12-12 18:57:30","endLine":42,"groupId":"8826","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"simple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e8/20ce2e2f5cf967ce1a9048dda884334ac727cc.src","preCode":"\tpublic void simple() throws Exception {\n\t\tString s = \"one two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"one\",\n\t\t\t\t\"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"one\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isTrue();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/shell/EscapeAwareWhiteSpaceArgumentDelimiterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void escaped() {\n\t\tString s = \"o\\\\ ne two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"o\\\\ ne\",\n\t\t\t\t\"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"o ne\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 5)).isTrue();\n\t}\n","date":"2017-12-12 18:57:30","endLine":54,"groupId":"8826","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"escaped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e8/20ce2e2f5cf967ce1a9048dda884334ac727cc.src","preCode":"\tpublic void escaped() throws Exception {\n\t\tString s = \"o\\\\ ne two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"o\\\\ ne\",\n\t\t\t\t\"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"o ne\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 5)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/shell/EscapeAwareWhiteSpaceArgumentDelimiterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid simple() {\n\t\tString s = \"one two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"one\", \"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"one\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isTrue();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t}\n","date":"2019-06-07 19:25:54","endLine":41,"groupId":"10604","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"simple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5d/58440e7348b71f27038bd6f19716e66d4355ce.src","preCode":"\tpublic void simple() {\n\t\tString s = \"one two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"one\", \"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"one\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isTrue();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/shell/EscapeAwareWhiteSpaceArgumentDelimiterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid escaped() {\n\t\tString s = \"o\\\\ ne two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"o\\\\ ne\", \"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"o ne\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 5)).isTrue();\n\t}\n","date":"2019-06-07 19:25:54","endLine":52,"groupId":"10604","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"escaped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5d/58440e7348b71f27038bd6f19716e66d4355ce.src","preCode":"\tpublic void escaped() {\n\t\tString s = \"o\\\\ ne two\";\n\t\tassertThat(this.delimiter.delimit(s, 0).getArguments()).containsExactly(\"o\\\\ ne\", \"two\");\n\t\tassertThat(this.delimiter.parseArguments(s)).containsExactly(\"o ne\", \"two\");\n\t\tassertThat(this.delimiter.isDelimiter(s, 2)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 3)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 4)).isFalse();\n\t\tassertThat(this.delimiter.isDelimiter(s, 5)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/shell/EscapeAwareWhiteSpaceArgumentDelimiterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
