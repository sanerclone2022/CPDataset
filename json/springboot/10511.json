[{"authorTime":"2018-04-27 19:54:14","codes":[{"authorDate":"2018-04-27 19:54:14","commitOrder":1,"curCode":"\tpublic void filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\"))\n\t\t\t\t.build();\n\t\tExchangeFunction errorExchange = r -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange)\n\t\t\t\t.onErrorResume(IOException.class, t -> Mono.empty()).block();\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer()\n\t\t\t\t.count()).isEqualTo(1);\n\t}\n","date":"2018-04-27 19:54:14","endLine":104,"groupId":"1809","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"filterWhenIoExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2f/4d7b95136dffc3a0c946aff51b627913f6eae0.src","preCode":"\tpublic void filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\"))\n\t\t\t\t.build();\n\t\tExchangeFunction errorExchange = r -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange)\n\t\t\t\t.onErrorResume(IOException.class, t -> Mono.empty()).block();\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer()\n\t\t\t\t.count()).isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"},{"authorDate":"2018-04-27 19:54:14","commitOrder":1,"curCode":"\tpublic void filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\"))\n\t\t\t\t.build();\n\t\tExchangeFunction exchange = r -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange)\n\t\t\t\t.onErrorResume(IllegalArgumentException.class, t -> Mono.empty()).block();\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer()\n\t\t\t\t.count()).isEqualTo(1);\n\t}\n","date":"2018-04-27 19:54:14","endLine":117,"groupId":"1809","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"filterWhenExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2f/4d7b95136dffc3a0c946aff51b627913f6eae0.src","preCode":"\tpublic void filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\"))\n\t\t\t\t.build();\n\t\tExchangeFunction exchange = r -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange)\n\t\t\t\t.onErrorResume(IllegalArgumentException.class, t -> Mono.empty()).block();\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer()\n\t\t\t\t.count()).isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"1ef0098ab58ee12677da1bf9d42ce03331ca3226","commitMessage":"@@@Add WebClient metrics support\n\nThis commit adds support for Actuator Metrics for WebClient.\nThis support mirrors the current behavior for `RestTemplate`.  reusing\nthe same metric name `\"http.client.requests\"` and tags.\n\n`WebClient` is instrumented by a `MetricsWebClientFilterFunction` which\nis applied by a `WebClientCustomizer`. This instrumentation happens\nautomatically only if you create an instance of `WebClient` using an\nauto-configured `WebClient.Builder` bean.\n\nThis infrastructure is reusing de facto the `MeterFilter` that has been\nadded for `RestTemplate` in order to limit the \"uri\" tag cardinality.\n\nCloses gh-12228\n","date":"2018-04-27 19:54:14","modifiedFileCount":"5","status":"B","submitter":"Brian Clozel"},{"authorTime":"2018-05-02 19:22:16","codes":[{"authorDate":"2018-05-02 19:22:16","commitOrder":2,"curCode":"\tpublic void filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"http://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction errorExchange = (r) -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange)\n\t\t\t\t.onErrorResume(IOException.class, (t) -> Mono.empty()).block();\n\t\tassertThat(\n\t\t\t\tthis.registry\n\t\t\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"IO_ERROR\")\n\t\t\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","date":"2018-05-02 19:26:23","endLine":104,"groupId":"620","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"filterWhenIoExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/53/3df63d244a58f9c42cd8971037e8acf66d9dec.src","preCode":"\tpublic void filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\"))\n\t\t\t\t.build();\n\t\tExchangeFunction errorExchange = r -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange)\n\t\t\t\t.onErrorResume(IOException.class, t -> Mono.empty()).block();\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer()\n\t\t\t\t.count()).isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2018-05-02 19:22:16","commitOrder":2,"curCode":"\tpublic void filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"http://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange)\n\t\t\t\t.onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty())\n\t\t\t\t.block();\n\t\tassertThat(this.registry\n\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\")\n\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","date":"2018-05-02 19:26:23","endLine":118,"groupId":"620","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"filterWhenExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/53/3df63d244a58f9c42cd8971037e8acf66d9dec.src","preCode":"\tpublic void filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"http://example.com/projects/spring-boot\"))\n\t\t\t\t.build();\n\t\tExchangeFunction exchange = r -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange)\n\t\t\t\t.onErrorResume(IllegalArgumentException.class, t -> Mono.empty()).block();\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer()\n\t\t\t\t.count()).isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"0526594a3cb0f5d50f5b8f47dff654f7254ad0e6","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-05-02 19:26:23","modifiedFileCount":"10","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-12-20 23:30:51","codes":[{"authorDate":"2018-12-20 23:30:51","commitOrder":3,"curCode":"\tpublic void filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"http://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction errorExchange = (r) -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange)\n\t\t\t\t.onErrorResume(IOException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(\n\t\t\t\tthis.registry\n\t\t\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"IO_ERROR\")\n\t\t\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","date":"2018-12-20 23:30:51","endLine":108,"groupId":"4891","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"filterWhenIoExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/3d4b14f5a05cf790bcb1d05e2c641f06e040b7.src","preCode":"\tpublic void filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"http://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction errorExchange = (r) -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange)\n\t\t\t\t.onErrorResume(IOException.class, (t) -> Mono.empty()).block();\n\t\tassertThat(\n\t\t\t\tthis.registry\n\t\t\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"IO_ERROR\")\n\t\t\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2018-12-20 23:30:51","commitOrder":3,"curCode":"\tpublic void filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"http://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange)\n\t\t\t\t.onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(this.registry\n\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\")\n\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","date":"2018-12-20 23:30:51","endLine":122,"groupId":"4891","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"filterWhenExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/3d4b14f5a05cf790bcb1d05e2c641f06e040b7.src","preCode":"\tpublic void filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"http://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange)\n\t\t\t\t.onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty())\n\t\t\t\t.block();\n\t\tassertThat(this.registry\n\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\")\n\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"9d2d6d5812d34b0bc04da3a124b9c5c0da511c04","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-20 23:30:51","modifiedFileCount":"22","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-03-28 19:48:47","codes":[{"authorDate":"2019-03-28 19:48:47","commitOrder":4,"curCode":"\tpublic void filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction errorExchange = (r) -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange)\n\t\t\t\t.onErrorResume(IOException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(\n\t\t\t\tthis.registry\n\t\t\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"IO_ERROR\")\n\t\t\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","date":"2019-03-28 19:48:47","endLine":108,"groupId":"4891","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"filterWhenIoExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/87/f422e7a515024933c0fd4cd0e7e29b56f6f9f5.src","preCode":"\tpublic void filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"http://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction errorExchange = (r) -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange)\n\t\t\t\t.onErrorResume(IOException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(\n\t\t\t\tthis.registry\n\t\t\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"IO_ERROR\")\n\t\t\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2019-03-28 19:48:47","commitOrder":4,"curCode":"\tpublic void filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange)\n\t\t\t\t.onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(this.registry\n\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\")\n\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","date":"2019-03-28 19:48:47","endLine":122,"groupId":"4891","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"filterWhenExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/87/f422e7a515024933c0fd4cd0e7e29b56f6f9f5.src","preCode":"\tpublic void filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest.create(HttpMethod.GET,\n\t\t\t\tURI.create(\"http://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange)\n\t\t\t\t.onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(this.registry\n\t\t\t\t.get(\"http.client.requests\").tags(\"method\", \"GET\", \"uri\",\n\t\t\t\t\t\t\"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\")\n\t\t\t\t.timer().count()).isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"878a635bfb6c28ee135b4f84e12fc09a42d1a3a9","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-03-28 19:48:47","modifiedFileCount":"67","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction errorExchange = (r) -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange).onErrorResume(IOException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer().count())\n\t\t\t\t\t\t.isEqualTo(1);\n\t}\n","date":"2019-06-07 19:25:54","endLine":102,"groupId":"4891","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"filterWhenIoExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/70/b53d80548fdea2fd3837ed7964043fd11832d6.src","preCode":"\tpublic void filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction errorExchange = (r) -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange).onErrorResume(IOException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer().count())\n\t\t\t\t\t\t.isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange).onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer().count())\n\t\t\t\t\t\t.isEqualTo(1);\n\t}\n","date":"2019-06-07 19:25:54","endLine":114,"groupId":"4891","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"filterWhenExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/70/b53d80548fdea2fd3837ed7964043fd11832d6.src","preCode":"\tpublic void filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange).onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer().count())\n\t\t\t\t\t\t.isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-04-11 04:25:46","codes":[{"authorDate":"2020-04-11 04:25:46","commitOrder":6,"curCode":"\tvoid filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction errorExchange = (r) -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange).onErrorResume(IOException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(5));\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer().count())\n\t\t\t\t\t\t.isEqualTo(1);\n\t}\n","date":"2020-04-11 04:37:00","endLine":103,"groupId":"10511","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"filterWhenIoExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/55/da4909476efc9814f9e4a6a5de7e7d60a5346e.src","preCode":"\tvoid filterWhenIoExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction errorExchange = (r) -> Mono.error(new IOException());\n\t\tthis.filterFunction.filter(request, errorExchange).onErrorResume(IOException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"IO_ERROR\").timer().count())\n\t\t\t\t\t\t.isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-04-11 04:25:46","commitOrder":6,"curCode":"\tvoid filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange).onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(5));\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer().count())\n\t\t\t\t\t\t.isEqualTo(1);\n\t}\n","date":"2020-04-11 04:37:00","endLine":115,"groupId":"10511","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"filterWhenExceptionThrownShouldRecordTimer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/55/da4909476efc9814f9e4a6a5de7e7d60a5346e.src","preCode":"\tvoid filterWhenExceptionThrownShouldRecordTimer() {\n\t\tClientRequest request = ClientRequest\n\t\t\t\t.create(HttpMethod.GET, URI.create(\"https://example.com/projects/spring-boot\")).build();\n\t\tExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException());\n\t\tthis.filterFunction.filter(request, exchange).onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty())\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertThat(this.registry.get(\"http.client.requests\")\n\t\t\t\t.tags(\"method\", \"GET\", \"uri\", \"/projects/spring-boot\", \"status\", \"CLIENT_ERROR\").timer().count())\n\t\t\t\t\t\t.isEqualTo(1);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"3879a7505c7c395c93875d6d5b043d251a59663d","commitMessage":"@@@Record cancelled client requests in WebClient\n\nPrior to this commit.  cancelled client requests (for example as a result\nof a `timeout()` reactor operator would not be recorded by Micrometer.\n\nThis commit instruments the cancelled signal for outgoing client\nrequests and assigns a status `CLIENT_ERROR`.\nThe cancellation can be intentional (triggering a timeout and falling\nback on a faster alternative) or considered as an error. The intent\ncannot be derived from the signal itself so we're considering it as a\nclient error.\n\nCloses gh-18444\n","date":"2020-04-11 04:37:00","modifiedFileCount":"6","status":"M","submitter":"Brian Clozel"}]
