[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\"));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","date":"2017-10-05 11:18:56","endLine":561,"groupId":"5265","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sslWantsClientAuthenticationSucceedsWithClientCertificate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/779a44c49daf64ead469014da81e6f86fb0528.src","preCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\"));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":541,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider).getKeyStore();\n\t\tverify(sslStoreProvider).getTrustStore();\n\t}\n","date":"2017-10-05 11:18:56","endLine":611,"groupId":"5265","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sslWithCustomSslStoreProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/779a44c49daf64ead469014da81e6f86fb0528.src","preCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider).getKeyStore();\n\t\tverify(sslStoreProvider).getTrustStore();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-04-20 06:00:38","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":2,"curCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\"));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","date":"2017-10-05 11:18:56","endLine":561,"groupId":"5265","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sslWantsClientAuthenticationSucceedsWithClientCertificate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/779a44c49daf64ead469014da81e6f86fb0528.src","preCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\"));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":541,"status":"N"},{"authorDate":"2018-04-20 06:00:38","commitOrder":2,"curCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","date":"2018-04-20 06:00:38","endLine":625,"groupId":"5265","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sslWithCustomSslStoreProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/dc/757b2adc1117626327512989bf1d6a0987e0f0.src","preCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider).getKeyStore();\n\t\tverify(sslStoreProvider).getTrustStore();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":597,"status":"M"}],"commitId":"d7abbe37cd54da04070d99b76e038d18b560479e","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-04-20 06:00:38","modifiedFileCount":"1","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2018-04-20 06:00:38","codes":[{"authorDate":"2018-08-11 01:03:56","commitOrder":3,"curCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null,\n\t\t\t\tnew String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","date":"2018-08-14 13:51:38","endLine":578,"groupId":"5265","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"sslWantsClientAuthenticationSucceedsWithClientCertificate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/09/92609a3be22811b72a0ee2e77210bc4de0eb1d.src","preCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\"));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"M"},{"authorDate":"2018-04-20 06:00:38","commitOrder":3,"curCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","date":"2018-04-20 06:00:38","endLine":625,"groupId":"5265","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"sslWithCustomSslStoreProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/dc/757b2adc1117626327512989bf1d6a0987e0f0.src","preCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":597,"status":"N"}],"commitId":"9032e5b470fb41ce40aef7e769edaf9aba2a5d94","commitMessage":"@@@Update SSL tests and certs for Java 11 and TLSv1.3\n\nSee gh-14028\n","date":"2018-08-14 13:51:38","modifiedFileCount":"1","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-03-30 00:12:40","codes":[{"authorDate":"2018-08-11 01:03:56","commitOrder":4,"curCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null,\n\t\t\t\tnew String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","date":"2018-08-14 13:51:38","endLine":578,"groupId":"5265","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"sslWantsClientAuthenticationSucceedsWithClientCertificate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/09/92609a3be22811b72a0ee2e77210bc4de0eb1d.src","preCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null,\n\t\t\t\tnew String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"N"},{"authorDate":"2019-03-30 00:12:40","commitOrder":4,"curCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray(),\n\t\t\t\t\t\t\t\tnew PrivateKeyStrategy() {\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic String chooseAlias(\n\t\t\t\t\t\t\t\t\t\t\tMap<String, PrivateKeyDetails> aliases,\n\t\t\t\t\t\t\t\t\t\t\tSocket socket) {\n\t\t\t\t\t\t\t\t\t\treturn \"spring-boot\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t.build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","date":"2019-03-30 00:12:40","endLine":660,"groupId":"15870","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"sslWithCustomSslStoreProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d7/612e08dc6e145887fd6659455b76fa974b2aad.src","preCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"M"}],"commitId":"6615e11e65e1a687de41839d131d43af5f7f2bb6","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-03-30 00:12:40","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-06-02 04:14:51","codes":[{"authorDate":"2018-08-11 01:03:56","commitOrder":5,"curCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null,\n\t\t\t\tnew String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","date":"2018-08-14 13:51:38","endLine":578,"groupId":"5265","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"sslWantsClientAuthenticationSucceedsWithClientCertificate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/09/92609a3be22811b72a0ee2e77210bc4de0eb1d.src","preCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate()\n\t\t\tthrows Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null,\n\t\t\t\tnew String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"N"},{"authorDate":"2019-06-02 04:14:51","commitOrder":5,"curCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray(),\n\t\t\t\t\t\t\t\t(aliases, socket) -> \"spring-boot\")\n\t\t\t\t\t\t.build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","date":"2019-06-02 04:14:51","endLine":632,"groupId":"15870","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"sslWithCustomSslStoreProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b0/9b3b7fcbfaa0c08a4591c003d4c076499c85d4.src","preCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")),\n\t\t\t\t\"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder()\n\t\t\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray(),\n\t\t\t\t\t\t\t\tnew PrivateKeyStrategy() {\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic String chooseAlias(\n\t\t\t\t\t\t\t\t\t\t\tMap<String, PrivateKeyDetails> aliases,\n\t\t\t\t\t\t\t\t\t\t\tSocket socket) {\n\t\t\t\t\t\t\t\t\t\treturn \"spring-boot\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t.build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory)\n\t\t\t\t.build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\thttpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n\t\t\t\t.isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":602,"status":"M"}],"commitId":"ec72d2874c9b0f2347ec3d7c922c073b2ca7d8d7","commitMessage":"@@@Merge pull request #17040 from wonwoo\n\n* pr/17040:\n  Polish \"Replace anonymous class with lambdas\"\n  Replace anonymous class with lambdas\n\nCloses gh-17040\n","date":"2019-06-02 04:14:51","modifiedFileCount":"2","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid sslWantsClientAuthenticationSucceedsWithClientCertificate() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(\n\t\t\t\tgetSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null, new String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":516,"groupId":"5265","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"sslWantsClientAuthenticationSucceedsWithClientCertificate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3a/d43aa3647fe43b229f82a62bb32039d0be8f53.src","preCode":"\tpublic void sslWantsClientAuthenticationSucceedsWithClientCertificate() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(\n\t\t\t\tgetSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null, new String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":501,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(new SSLContextBuilder()\n\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray(), (aliases, socket) -> \"spring-boot\").build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","date":"2019-06-07 19:25:54","endLine":556,"groupId":"15870","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"sslWithCustomSslStoreProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3a/d43aa3647fe43b229f82a62bb32039d0be8f53.src","preCode":"\tpublic void sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(new SSLContextBuilder()\n\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray(), (aliases, socket) -> \"spring-boot\").build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-09-02 03:10:57","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":7,"curCode":"\tvoid sslWantsClientAuthenticationSucceedsWithClientCertificate() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(\n\t\t\t\tgetSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null, new String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":516,"groupId":"5265","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"sslWantsClientAuthenticationSucceedsWithClientCertificate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3a/d43aa3647fe43b229f82a62bb32039d0be8f53.src","preCode":"\tvoid sslWantsClientAuthenticationSucceedsWithClientCertificate() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(\n\t\t\t\tgetSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null, new String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":501,"status":"N"},{"authorDate":"2019-09-02 03:10:57","commitOrder":7,"curCode":"\tvoid sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","date":"2019-09-02 03:10:57","endLine":556,"groupId":"5265","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"sslWithCustomSslStoreProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/af/71fdac1185cf37b5b02175a13293acc0e77243.src","preCode":"\tvoid sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(new SSLContextBuilder()\n\t\t\t\t.loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray(), (aliases, socket) -> \"spring-boot\").build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"M"}],"commitId":"6017f2f52944215af07cddd98e5515d6fdcd31ce","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-18083\n","date":"2019-09-02 03:10:57","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-01-10 21:48:43","codes":[{"authorDate":"2020-01-10 21:48:43","commitOrder":8,"curCode":"\tvoid sslWantsClientAuthenticationSucceedsWithClientCertificate() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(\n\t\t\t\tgetSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null, new String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = this.httpClientBuilder.get().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t}\n","date":"2020-01-10 22:15:35","endLine":559,"groupId":"5265","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"sslWantsClientAuthenticationSucceedsWithClientCertificate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/db/f98c89b0ed1c62f1cfa8dea1de5df28d516f0b.src","preCode":"\tvoid sslWantsClientAuthenticationSucceedsWithClientCertificate() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(\n\t\t\t\tgetSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null, new String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"M"},{"authorDate":"2020-01-10 21:48:43","commitOrder":8,"curCode":"\tvoid sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = this.httpClientBuilder.get().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","date":"2020-01-10 22:15:35","endLine":599,"groupId":"5265","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"sslWithCustomSslStoreProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/db/f98c89b0ed1c62f1cfa8dea1de5df28d516f0b.src","preCode":"\tvoid sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"M"}],"commitId":"ce99db19028b54886ae99c1fd916e613a982b65f","commitMessage":"@@@Port the build to Gradle\n\nCloses gh-19609\nCloses gh-19608\n","date":"2020-01-10 22:15:35","modifiedFileCount":"46","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-04-08 16:14:03","codes":[{"authorDate":"2021-04-08 16:14:03","commitOrder":9,"curCode":"\tvoid sslWantsClientAuthenticationSucceedsWithClientCertificate() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(\n\t\t\t\tgetSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null, new String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tloadStore(keyStore, new FileSystemResource(\"src/test/resources/test.jks\"));\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = this.httpClientBuilder.get().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t}\n","date":"2021-04-08 16:14:03","endLine":604,"groupId":"102001","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"sslWantsClientAuthenticationSucceedsWithClientCertificate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/eb/5d64c3a9b551dfa20020bba5b791fcba1e9fd6.src","preCode":"\tvoid sslWantsClientAuthenticationSucceedsWithClientCertificate() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(\n\t\t\t\tgetSsl(ClientAuth.WANT, \"password\", \"classpath:test.jks\", null, new String[] { \"TLSv1.2\" }, null));\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = this.httpClientBuilder.get().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"},{"authorDate":"2021-04-08 16:14:03","commitOrder":9,"curCode":"\tvoid sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tloadStore(keyStore, new FileSystemResource(\"src/test/resources/test.jks\"));\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = this.httpClientBuilder.get().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","date":"2021-04-08 16:14:03","endLine":644,"groupId":"102001","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"sslWithCustomSslStoreProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/eb/5d64c3a9b551dfa20020bba5b791fcba1e9fd6.src","preCode":"\tvoid sslWithCustomSslStoreProvider() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\taddTestTxtFile(factory);\n\t\tSsl ssl = new Ssl();\n\t\tssl.setClientAuth(ClientAuth.NEED);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tfactory.setSslStoreProvider(sslStoreProvider);\n\t\tthis.webServer = factory.getWebServer();\n\t\tthis.webServer.start();\n\t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\tkeyStore.load(new FileInputStream(new File(\"src/test/resources/test.jks\")), \"secret\".toCharArray());\n\t\tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(\n\t\t\t\tnew SSLContextBuilder().loadTrustMaterial(null, new TrustSelfSignedStrategy())\n\t\t\t\t\t\t.loadKeyMaterial(keyStore, \"password\".toCharArray()).build());\n\t\tHttpClient httpClient = this.httpClientBuilder.get().setSSLSocketFactory(socketFactory).build();\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory)).isEqualTo(\"test\");\n\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":621,"status":"M"}],"commitId":"b52902e92a30b78bf803ad382c14a4daa6ef2a20","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-25923\n","date":"2021-04-08 16:14:03","modifiedFileCount":"7","status":"M","submitter":"Stephane Nicoll"}]
