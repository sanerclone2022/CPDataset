[{"authorTime":"2019-09-29 13:45:56","codes":[{"authorDate":"2019-09-29 13:45:56","commitOrder":1,"curCode":"\tvoid cacheInTtlWithMonoResponse() {\n\t\tMonoOperationInvoker.invocations = 0;\n\t\tMonoOperationInvoker target = new MonoOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, 500L);\n\t\tObject response = ((Mono<?>) invoker.invoke(context)).block();\n\t\tObject cachedResponse = ((Mono<?>) invoker.invoke(context)).block();\n\t\tassertThat(MonoOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","date":"2019-09-29 13:45:56","endLine":81,"groupId":"14696","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cacheInTtlWithMonoResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fa/befe5c5d6726305af60ff3e2fe78a72dc10757.src","preCode":"\tvoid cacheInTtlWithMonoResponse() {\n\t\tMonoOperationInvoker.invocations = 0;\n\t\tMonoOperationInvoker target = new MonoOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, 500L);\n\t\tObject response = ((Mono<?>) invoker.invoke(context)).block();\n\t\tObject cachedResponse = ((Mono<?>) invoker.invoke(context)).block();\n\t\tassertThat(MonoOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2019-09-29 13:45:56","commitOrder":1,"curCode":"\tvoid cacheInTtlWithFluxResponse() {\n\t\tFluxOperationInvoker.invocations = 0;\n\t\tFluxOperationInvoker target = new FluxOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, 500L);\n\t\tObject response = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tObject cachedResponse = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tassertThat(FluxOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","date":"2019-09-29 13:45:56","endLine":93,"groupId":"14697","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cacheInTtlWithFluxResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fa/befe5c5d6726305af60ff3e2fe78a72dc10757.src","preCode":"\tvoid cacheInTtlWithFluxResponse() {\n\t\tFluxOperationInvoker.invocations = 0;\n\t\tFluxOperationInvoker target = new FluxOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, 500L);\n\t\tObject response = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tObject cachedResponse = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tassertThat(FluxOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"}],"commitId":"869a8c2691731c079c36fd2bd38d09c06e927657","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-18411\n","date":"2019-09-29 13:45:56","modifiedFileCount":"2","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-12-06 04:04:46","codes":[{"authorDate":"2019-12-06 04:04:46","commitOrder":2,"curCode":"\tvoid cacheInTtlWithMonoResponse() {\n\t\tMonoOperationInvoker.invocations = 0;\n\t\tMonoOperationInvoker target = new MonoOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, CACHE_TTL);\n\t\tObject response = ((Mono<?>) invoker.invoke(context)).block();\n\t\tObject cachedResponse = ((Mono<?>) invoker.invoke(context)).block();\n\t\tassertThat(MonoOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","date":"2019-12-06 04:04:46","endLine":85,"groupId":"573","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cacheInTtlWithMonoResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/de/2f33713d6d85a758427477837924394209299e.src","preCode":"\tvoid cacheInTtlWithMonoResponse() {\n\t\tMonoOperationInvoker.invocations = 0;\n\t\tMonoOperationInvoker target = new MonoOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, 500L);\n\t\tObject response = ((Mono<?>) invoker.invoke(context)).block();\n\t\tObject cachedResponse = ((Mono<?>) invoker.invoke(context)).block();\n\t\tassertThat(MonoOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2019-12-06 04:04:46","commitOrder":2,"curCode":"\tvoid cacheInTtlWithFluxResponse() {\n\t\tFluxOperationInvoker.invocations = 0;\n\t\tFluxOperationInvoker target = new FluxOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, CACHE_TTL);\n\t\tObject response = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tObject cachedResponse = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tassertThat(FluxOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","date":"2019-12-06 04:04:46","endLine":97,"groupId":"10810","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cacheInTtlWithFluxResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/de/2f33713d6d85a758427477837924394209299e.src","preCode":"\tvoid cacheInTtlWithFluxResponse() {\n\t\tFluxOperationInvoker.invocations = 0;\n\t\tFluxOperationInvoker target = new FluxOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, 500L);\n\t\tObject response = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tObject cachedResponse = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tassertThat(FluxOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"b42bc1b23d59856045de70ae7e9e0cfcd85bac52","commitMessage":"@@@Merge branch '2.2.x'\n\nCloses gh-19314\n","date":"2019-12-06 04:04:46","modifiedFileCount":"1","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2020-02-20 18:03:41","codes":[{"authorDate":"2020-02-20 18:03:41","commitOrder":3,"curCode":"\tvoid cacheInTtlWithMonoResponse() {\n\t\tMonoOperationInvoker.invocations = new AtomicInteger();\n\t\tMonoOperationInvoker target = new MonoOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, CACHE_TTL);\n\t\tObject response = ((Mono<?>) invoker.invoke(context)).block();\n\t\tObject cachedResponse = ((Mono<?>) invoker.invoke(context)).block();\n\t\tassertThat(MonoOperationInvoker.invocations).hasValue(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","date":"2020-02-20 18:03:41","endLine":85,"groupId":"10388","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"cacheInTtlWithMonoResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3e/897ef625ce75d76bfa5179f32fdbb5e8eb7282.src","preCode":"\tvoid cacheInTtlWithMonoResponse() {\n\t\tMonoOperationInvoker.invocations = 0;\n\t\tMonoOperationInvoker target = new MonoOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, CACHE_TTL);\n\t\tObject response = ((Mono<?>) invoker.invoke(context)).block();\n\t\tObject cachedResponse = ((Mono<?>) invoker.invoke(context)).block();\n\t\tassertThat(MonoOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-02-20 18:03:41","commitOrder":3,"curCode":"\tvoid cacheInTtlWithFluxResponse() {\n\t\tFluxOperationInvoker.invocations = new AtomicInteger();\n\t\tFluxOperationInvoker target = new FluxOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, CACHE_TTL);\n\t\tObject response = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tObject cachedResponse = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tassertThat(FluxOperationInvoker.invocations).hasValue(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","date":"2020-02-20 18:03:41","endLine":97,"groupId":"10388","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"cacheInTtlWithFluxResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3e/897ef625ce75d76bfa5179f32fdbb5e8eb7282.src","preCode":"\tvoid cacheInTtlWithFluxResponse() {\n\t\tFluxOperationInvoker.invocations = 0;\n\t\tFluxOperationInvoker target = new FluxOperationInvoker();\n\t\tInvocationContext context = new InvocationContext(mock(SecurityContext.class), Collections.emptyMap());\n\t\tCachingOperationInvoker invoker = new CachingOperationInvoker(target, CACHE_TTL);\n\t\tObject response = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tObject cachedResponse = ((Flux<?>) invoker.invoke(context)).blockLast();\n\t\tassertThat(FluxOperationInvoker.invocations).isEqualTo(1);\n\t\tassertThat(response).isSameAs(cachedResponse);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"26c673a1a4bb435d7753e38b1165e66c89f8f202","commitMessage":"@@@Merge branch '2.2.x'\n","date":"2020-02-20 18:03:41","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"}]
