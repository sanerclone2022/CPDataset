[{"authorTime":"2019-07-03 06:55:58","codes":[{"authorDate":"2019-07-03 06:55:58","commitOrder":1,"curCode":"\tpublic void run(ApplicationArguments args) throws Exception {\n\t\tthis.serviceProperties.getInputDir().mkdirs();\n\t\tif (args.getNonOptionArgs().size() > 0) {\n\t\t\tFileOutputStream stream = new FileOutputStream(\n\t\t\t\t\tnew File(this.serviceProperties.getInputDir(), \"data\" + System.currentTimeMillis() + \".txt\"));\n\t\t\tfor (String arg : args.getNonOptionArgs()) {\n\t\t\t\tstream.write(arg.getBytes());\n\t\t\t}\n\t\t\tstream.flush();\n\t\t\tstream.close();\n\t\t}\n\t}\n","date":"2019-07-03 06:55:58","endLine":52,"groupId":"5461","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"(ApplicationArgumentsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3d/c4a689c23c884670aa0ca0b481e18e27b20360.src","preCode":"\tpublic void run(ApplicationArguments args) throws Exception {\n\t\tthis.serviceProperties.getInputDir().mkdirs();\n\t\tif (args.getNonOptionArgs().size() > 0) {\n\t\t\tFileOutputStream stream = new FileOutputStream(\n\t\t\t\t\tnew File(this.serviceProperties.getInputDir(), \"data\" + System.currentTimeMillis() + \".txt\"));\n\t\t\tfor (String arg : args.getNonOptionArgs()) {\n\t\t\t\tstream.write(arg.getBytes());\n\t\t\t}\n\t\t\tstream.flush();\n\t\t\tstream.close();\n\t\t}\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-integration/src/test/java/smoketest/integration/producer/ProducerApplication.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"},{"authorDate":"2019-07-03 06:55:58","commitOrder":1,"curCode":"\tpublic void run(ApplicationArguments args) throws Exception {\n\t\tthis.serviceProperties.getInputDir().mkdirs();\n\t\tif (args.getNonOptionArgs().size() > 0) {\n\t\t\tFileOutputStream stream = new FileOutputStream(\n\t\t\t\t\tnew File(this.serviceProperties.getInputDir(), \"data\" + System.currentTimeMillis() + \".txt\"));\n\t\t\tfor (String arg : args.getNonOptionArgs()) {\n\t\t\t\tstream.write(arg.getBytes());\n\t\t\t}\n\t\t\tstream.flush();\n\t\t\tstream.close();\n\t\t}\n\t}\n","date":"2019-07-03 06:55:58","endLine":52,"groupId":"5461","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"(ApplicationArgumentsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/ee22afb62e0e72ae1d6a53c8b27e8db902004f.src","preCode":"\tpublic void run(ApplicationArguments args) throws Exception {\n\t\tthis.serviceProperties.getInputDir().mkdirs();\n\t\tif (args.getNonOptionArgs().size() > 0) {\n\t\t\tFileOutputStream stream = new FileOutputStream(\n\t\t\t\t\tnew File(this.serviceProperties.getInputDir(), \"data\" + System.currentTimeMillis() + \".txt\"));\n\t\t\tfor (String arg : args.getNonOptionArgs()) {\n\t\t\t\tstream.write(arg.getBytes());\n\t\t\t}\n\t\t\tstream.flush();\n\t\t\tstream.close();\n\t\t}\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/test/java/smoketest/parent/producer/ProducerApplication.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"}],"commitId":"d9466f5659435eb8ff73cdb347a86f0ede403cce","commitMessage":"@@@Move smoke tests under spring-boot-test\n\nSee gh-17393\n","date":"2019-07-03 06:55:58","modifiedFileCount":"0","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2020-03-04 07:47:19","codes":[{"authorDate":"2020-03-04 07:47:19","commitOrder":2,"curCode":"\tpublic void run(ApplicationArguments args) throws Exception {\n\t\tthis.serviceProperties.getInputDir().mkdirs();\n\t\tif (!args.getNonOptionArgs().isEmpty()) {\n\t\t\tFileOutputStream stream = new FileOutputStream(\n\t\t\t\t\tnew File(this.serviceProperties.getInputDir(), \"data\" + System.currentTimeMillis() + \".txt\"));\n\t\t\tfor (String arg : args.getNonOptionArgs()) {\n\t\t\t\tstream.write(arg.getBytes());\n\t\t\t}\n\t\t\tstream.flush();\n\t\t\tstream.close();\n\t\t}\n\t}\n","date":"2020-03-04 07:47:20","endLine":52,"groupId":"10246","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"run","params":"(ApplicationArgumentsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/16/2f9075ec9be57ca7c7bf0821fa470c7b8ebd13.src","preCode":"\tpublic void run(ApplicationArguments args) throws Exception {\n\t\tthis.serviceProperties.getInputDir().mkdirs();\n\t\tif (args.getNonOptionArgs().size() > 0) {\n\t\t\tFileOutputStream stream = new FileOutputStream(\n\t\t\t\t\tnew File(this.serviceProperties.getInputDir(), \"data\" + System.currentTimeMillis() + \".txt\"));\n\t\t\tfor (String arg : args.getNonOptionArgs()) {\n\t\t\t\tstream.write(arg.getBytes());\n\t\t\t}\n\t\t\tstream.flush();\n\t\t\tstream.close();\n\t\t}\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-integration/src/test/java/smoketest/integration/producer/ProducerApplication.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-03-04 07:47:19","commitOrder":2,"curCode":"\tpublic void run(ApplicationArguments args) throws Exception {\n\t\tthis.serviceProperties.getInputDir().mkdirs();\n\t\tif (!args.getNonOptionArgs().isEmpty()) {\n\t\t\tFileOutputStream stream = new FileOutputStream(\n\t\t\t\t\tnew File(this.serviceProperties.getInputDir(), \"data\" + System.currentTimeMillis() + \".txt\"));\n\t\t\tfor (String arg : args.getNonOptionArgs()) {\n\t\t\t\tstream.write(arg.getBytes());\n\t\t\t}\n\t\t\tstream.flush();\n\t\t\tstream.close();\n\t\t}\n\t}\n","date":"2020-03-04 07:47:20","endLine":52,"groupId":"10246","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"run","params":"(ApplicationArgumentsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f3/3e25bedbcfc85defe1cb052f01868faea73854.src","preCode":"\tpublic void run(ApplicationArguments args) throws Exception {\n\t\tthis.serviceProperties.getInputDir().mkdirs();\n\t\tif (args.getNonOptionArgs().size() > 0) {\n\t\t\tFileOutputStream stream = new FileOutputStream(\n\t\t\t\t\tnew File(this.serviceProperties.getInputDir(), \"data\" + System.currentTimeMillis() + \".txt\"));\n\t\t\tfor (String arg : args.getNonOptionArgs()) {\n\t\t\t\tstream.write(arg.getBytes());\n\t\t\t}\n\t\t\tstream.flush();\n\t\t\tstream.close();\n\t\t}\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/test/java/smoketest/parent/producer/ProducerApplication.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"73777af3887b158ef75fd2780cb5524f0786a448","commitMessage":"@@@Merge pull request #20370 from dreis2211\n\n* pr/20370:\n  Use isEmpty() where possible\n\nCloses gh-20370\n","date":"2020-03-04 07:47:20","modifiedFileCount":"7","status":"M","submitter":"Stephane Nicoll"}]
