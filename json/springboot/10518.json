[{"authorTime":"2017-10-11 05:04:25","codes":[{"authorDate":"2017-10-11 05:04:25","commitOrder":1,"curCode":"\tpublic void listNamesRecursesOverCompositeRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.listNames().getNames()).containsOnly(\"counter1\", \"counter2\");\n\t}\n","date":"2017-10-11 05:04:25","endLine":70,"groupId":"3248","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listNamesRecursesOverCompositeRegistries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8b/36d0cf119b504dab72dd585509631bcb25798d.src","preCode":"\tpublic void listNamesRecursesOverCompositeRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.listNames().getNames()).containsOnly(\"counter1\", \"counter2\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2017-10-11 05:04:25","commitOrder":1,"curCode":"\tpublic void metricPresentInOneRegistryOfACompositeAndNotAnother() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.metric(\"counter1\", Collections.emptyList())).isNotNull();\n\t\tassertThat(endpoint.metric(\"counter2\", Collections.emptyList())).isNotNull();\n\t}\n","date":"2017-10-11 05:04:25","endLine":109,"groupId":"3248","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"metricPresentInOneRegistryOfACompositeAndNotAnother","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8b/36d0cf119b504dab72dd585509631bcb25798d.src","preCode":"\tpublic void metricPresentInOneRegistryOfACompositeAndNotAnother() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.metric(\"counter1\", Collections.emptyList())).isNotNull();\n\t\tassertThat(endpoint.metric(\"counter2\", Collections.emptyList())).isNotNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"96cb94846126d65e7301bbb46342d37492b59752","commitMessage":"@@@Merge pull request #10535 from jkschneider/micrometer-rc2-2\n\n* pr/10535:\n  Polish MetricsEndpoint\n  Support composite registries in MetricsEndpoint\n","date":"2017-10-11 05:04:25","modifiedFileCount":"2","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid listNamesRecursesOverCompositeRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.listNames().getNames()).containsOnly(\"counter1\", \"counter2\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":75,"groupId":"3248","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listNamesRecursesOverCompositeRegistries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/12/e3aae028bfd0e235882675fe3f4b2afec25eb6.src","preCode":"\tpublic void listNamesRecursesOverCompositeRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.listNames().getNames()).containsOnly(\"counter1\", \"counter2\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid metricPresentInOneRegistryOfACompositeAndNotAnother() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.metric(\"counter1\", Collections.emptyList())).isNotNull();\n\t\tassertThat(endpoint.metric(\"counter2\", Collections.emptyList())).isNotNull();\n\t}\n","date":"2019-06-07 19:25:54","endLine":162,"groupId":"3248","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"metricPresentInOneRegistryOfACompositeAndNotAnother","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/12/e3aae028bfd0e235882675fe3f4b2afec25eb6.src","preCode":"\tpublic void metricPresentInOneRegistryOfACompositeAndNotAnother() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.metric(\"counter1\", Collections.emptyList())).isNotNull();\n\t\tassertThat(endpoint.metric(\"counter2\", Collections.emptyList())).isNotNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2020-01-30 22:05:53","commitOrder":3,"curCode":"\tvoid listNamesRecursesOverCompositeRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.listNames().getNames()).containsExactly(\"counter1\", \"counter2\");\n\t}\n","date":"2020-01-30 22:05:53","endLine":80,"groupId":"10518","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"listNamesRecursesOverCompositeRegistries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ef/5e12899951f87cf121d9d78dd902c4243234f7.src","preCode":"\tvoid listNamesRecursesOverCompositeRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.listNames().getNames()).containsOnly(\"counter1\", \"counter2\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid metricPresentInOneRegistryOfACompositeAndNotAnother() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.metric(\"counter1\", Collections.emptyList())).isNotNull();\n\t\tassertThat(endpoint.metric(\"counter2\", Collections.emptyList())).isNotNull();\n\t}\n","date":"2019-06-07 19:25:54","endLine":162,"groupId":"10518","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"metricPresentInOneRegistryOfACompositeAndNotAnother","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/12/e3aae028bfd0e235882675fe3f4b2afec25eb6.src","preCode":"\tvoid metricPresentInOneRegistryOfACompositeAndNotAnother() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry reg1 = new SimpleMeterRegistry();\n\t\tSimpleMeterRegistry reg2 = new SimpleMeterRegistry();\n\t\tcomposite.add(reg1);\n\t\tcomposite.add(reg2);\n\t\treg1.counter(\"counter1\").increment();\n\t\treg2.counter(\"counter2\").increment();\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tassertThat(endpoint.metric(\"counter1\", Collections.emptyList())).isNotNull();\n\t\tassertThat(endpoint.metric(\"counter2\", Collections.emptyList())).isNotNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"}],"commitId":"6db5ca97d344ecc73a090f901bb167eb3b6ac554","commitMessage":"@@@Sort names alphabetically in metrics list response\n\nCloses gh-19934\n","date":"2020-01-30 22:05:53","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"}]
