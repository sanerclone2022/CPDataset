[{"authorTime":"2018-02-02 08:13:25","codes":[{"authorDate":"2018-02-02 08:13:25","commitOrder":1,"curCode":"\tpublic void throwWhenPidFileIsReadOnly() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSystem.setProperty(\"PID_FAIL_ON_WRITE_ERROR\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tthis.exception.expect(IllegalStateException.class);\n\t\tthis.exception.expectMessage(\"Cannot create pid file\");\n\t\tlistener.onApplicationEvent(EVENT);\n\t}\n","date":"2018-02-02 08:44:42","endLine":156,"groupId":"2319","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"throwWhenPidFileIsReadOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3f/f1760dbfb349ad933ee5d6fa9a2dafbc7894de.src","preCode":"\tpublic void throwWhenPidFileIsReadOnly() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSystem.setProperty(\"PID_FAIL_ON_WRITE_ERROR\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tthis.exception.expect(IllegalStateException.class);\n\t\tthis.exception.expectMessage(\"Cannot create pid file\");\n\t\tlistener.onApplicationEvent(EVENT);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"},{"authorDate":"2018-02-02 08:13:25","commitOrder":1,"curCode":"\tpublic void throwWhenPidFileIsReadOnlyWithSpring() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSpringApplicationEvent event = createPreparedEvent(\n\t\t\t\t\"spring.pid.fail-on-write-error\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tthis.exception.expect(IllegalStateException.class);\n\t\tthis.exception.expectMessage(\"Cannot create pid file\");\n\t\tlistener.onApplicationEvent(event);\n\t}\n","date":"2018-02-02 08:44:42","endLine":168,"groupId":"2320","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"throwWhenPidFileIsReadOnlyWithSpring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3f/f1760dbfb349ad933ee5d6fa9a2dafbc7894de.src","preCode":"\tpublic void throwWhenPidFileIsReadOnlyWithSpring() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSpringApplicationEvent event = createPreparedEvent(\n\t\t\t\t\"spring.pid.fail-on-write-error\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tthis.exception.expect(IllegalStateException.class);\n\t\tthis.exception.expectMessage(\"Cannot create pid file\");\n\t\tlistener.onApplicationEvent(event);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"}],"commitId":"c3ec316890aea840efc9ebb2582b310d5263d0b4","commitMessage":"@@@Move Application* and *FileWriter classes\n\nMove `ApplicationHome`.  `ApplicationPid` and `ApplicationTemp` to the\n`system` package. Since `system` package is now much lower level.  the\nexisting `FileWriter` implementations also needed to move to prevent\npackage tangles.\n\nFixes gh-8614\n","date":"2018-02-02 08:44:42","modifiedFileCount":"12","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-10-02 02:18:16","codes":[{"authorDate":"2018-10-02 02:18:16","commitOrder":2,"curCode":"\tpublic void throwWhenPidFileIsReadOnly() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSystem.setProperty(\"PID_FAIL_ON_WRITE_ERROR\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tassertThatIllegalStateException()\n\t\t\t\t.isThrownBy(() -> listener.onApplicationEvent(EVENT))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t}\n","date":"2018-10-03 01:55:28","endLine":153,"groupId":"9325","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"throwWhenPidFileIsReadOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/74/6be3994e54fe9ebe7247377e7774dfe9881be4.src","preCode":"\tpublic void throwWhenPidFileIsReadOnly() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSystem.setProperty(\"PID_FAIL_ON_WRITE_ERROR\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tthis.exception.expect(IllegalStateException.class);\n\t\tthis.exception.expectMessage(\"Cannot create pid file\");\n\t\tlistener.onApplicationEvent(EVENT);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2018-10-02 02:18:16","commitOrder":2,"curCode":"\tpublic void throwWhenPidFileIsReadOnlyWithSpring() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSpringApplicationEvent event = createPreparedEvent(\n\t\t\t\t\"spring.pid.fail-on-write-error\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tassertThatIllegalStateException()\n\t\t\t\t.isThrownBy(() -> listener.onApplicationEvent(event))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t}\n","date":"2018-10-03 01:55:28","endLine":165,"groupId":"9325","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"throwWhenPidFileIsReadOnlyWithSpring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/74/6be3994e54fe9ebe7247377e7774dfe9881be4.src","preCode":"\tpublic void throwWhenPidFileIsReadOnlyWithSpring() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSpringApplicationEvent event = createPreparedEvent(\n\t\t\t\t\"spring.pid.fail-on-write-error\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tthis.exception.expect(IllegalStateException.class);\n\t\tthis.exception.expectMessage(\"Cannot create pid file\");\n\t\tlistener.onApplicationEvent(event);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"d76bba5e6f5c702c8bf2aa86fee19ec7de8ed3cb","commitMessage":"@@@Migrate from ExpectedException rule to AssertJ\n\nReplace ExpectedException JUnit rules with AssertJ exception\nassertions.\n\nCloses gh-14336\n","date":"2018-10-03 01:55:28","modifiedFileCount":"271","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid throwWhenPidFileIsReadOnly() throws Exception {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tfile.createNewFile();\n\t\tfile.setReadOnly();\n\t\tSystem.setProperty(\"PID_FAIL_ON_WRITE_ERROR\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(EVENT))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":147,"groupId":"9325","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"throwWhenPidFileIsReadOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/57/64afbe319322ee9eaef3aae5c04e0a403bd74a.src","preCode":"\tpublic void throwWhenPidFileIsReadOnly() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSystem.setProperty(\"PID_FAIL_ON_WRITE_ERROR\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(EVENT))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid throwWhenPidFileIsReadOnlyWithSpring() throws Exception {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tfile.createNewFile();\n\t\tfile.setReadOnly();\n\t\tSpringApplicationEvent event = createPreparedEvent(\"spring.pid.fail-on-write-error\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(event))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":158,"groupId":"9325","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"throwWhenPidFileIsReadOnlyWithSpring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/57/64afbe319322ee9eaef3aae5c04e0a403bd74a.src","preCode":"\tpublic void throwWhenPidFileIsReadOnlyWithSpring() throws Exception {\n\t\tFile file = this.temporaryFolder.newFile();\n\t\tfile.setReadOnly();\n\t\tSpringApplicationEvent event = createPreparedEvent(\"spring.pid.fail-on-write-error\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(event))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-06-10 16:24:06","codes":[{"authorDate":"2019-06-10 16:24:06","commitOrder":4,"curCode":"\tvoid throwWhenPidFileIsReadOnly() throws Exception {\n\t\twithReadOnlyPidFile((file) -> {\n\t\t\tSystem.setProperty(\"PID_FAIL_ON_WRITE_ERROR\", \"true\");\n\t\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(EVENT))\n\t\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t\t});\n\t}\n","date":"2019-06-13 16:24:31","endLine":147,"groupId":"101491","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"throwWhenPidFileIsReadOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/78/f6643de55b97c2fdc3731f703ea5d2edee1cf3.src","preCode":"\tvoid throwWhenPidFileIsReadOnly() throws Exception {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tfile.createNewFile();\n\t\tfile.setReadOnly();\n\t\tSystem.setProperty(\"PID_FAIL_ON_WRITE_ERROR\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(EVENT))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2019-06-10 16:24:06","commitOrder":4,"curCode":"\tvoid throwWhenPidFileIsReadOnlyWithSpring() throws Exception {\n\t\twithReadOnlyPidFile((file) -> {\n\t\t\tSpringApplicationEvent event = createPreparedEvent(\"spring.pid.fail-on-write-error\", \"true\");\n\t\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(event))\n\t\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t\t});\n\t}\n","date":"2019-06-13 16:24:31","endLine":157,"groupId":"101491","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"throwWhenPidFileIsReadOnlyWithSpring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/78/f6643de55b97c2fdc3731f703ea5d2edee1cf3.src","preCode":"\tvoid throwWhenPidFileIsReadOnlyWithSpring() throws Exception {\n\t\tFile file = new File(this.tempDir, \"pid\");\n\t\tfile.createNewFile();\n\t\tfile.setReadOnly();\n\t\tSpringApplicationEvent event = createPreparedEvent(\"spring.pid.fail-on-write-error\", \"true\");\n\t\tApplicationPidFileWriter listener = new ApplicationPidFileWriter(file);\n\t\tassertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(event))\n\t\t\t\t.withMessageContaining(\"Cannot create pid file\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/ApplicationPidFileWriterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"cffc870fd6e189a3f4fe30d9a44300703dff922a","commitMessage":"@@@Fix test failures on Windows\n\nSince the move to JUnit 5.  a number of tests were failing on Windows.\nThe majority were failing due to open file handles preventing the\nclean up of the tests' temporary directory. This commit addresses\nthese failures by updating the tests to close JarFiles.  InputStreams. \nOutputStreams etc.\n\nA change has also been made to CachingOperationInvokerTests to make\na flakey test more robust. Due to System.currentTimeMillis() being\nless precise on Windows than it is on *nix platforms.  the test could\nfail as it would not sleep for long enough for the TTL period to have\nexpired.\n","date":"2019-06-13 16:24:31","modifiedFileCount":"21","status":"M","submitter":"Andy Wilkinson"}]
