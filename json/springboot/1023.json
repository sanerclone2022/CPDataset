[{"authorTime":"2019-07-27 05:41:49","codes":[{"authorDate":"2019-07-27 05:41:49","commitOrder":1,"curCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\t\r\n\t\t\thttp.authorizeExchange((exchanges) ->\n\t\t\t\t\texchanges\n\t\t\t\t\t\t.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll()\n\t\t\t\t\t\t.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole(\"ACTUATOR\")\n\t\t\t\t\t\t.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()\n\t\t\t\t\t\t.pathMatchers(\"/login\").permitAll()\n\t\t\t\t\t\t.anyExchange().authenticated())\n\t\t\t\t.httpBasic(Customizer.withDefaults());\n\t\t\t\r\n\t\t\treturn http.build();\n\t\t}\n","date":"2019-07-27 05:41:49","endLine":130,"groupId":"14064","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"springSecurityFilterChain","params":"(ServerHttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/16/de5894eb9c2e8ed20a688b32fcf4f7114892d3.src","preCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\t\r\n\t\t\thttp.authorizeExchange((exchanges) ->\n\t\t\t\t\texchanges\n\t\t\t\t\t\t.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll()\n\t\t\t\t\t\t.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole(\"ACTUATOR\")\n\t\t\t\t\t\t.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()\n\t\t\t\t\t\t.pathMatchers(\"/login\").permitAll()\n\t\t\t\t\t\t.anyExchange().authenticated())\n\t\t\t\t.httpBasic(Customizer.withDefaults());\n\t\t\t\r\n\t\t\treturn http.build();\n\t\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure-webflux/src/test/java/smoketest/secure/webflux/SampleSecureWebFluxCustomSecurityTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"},{"authorDate":"2019-07-27 05:41:49","commitOrder":1,"curCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\t\r\n\t\t\thttp.authorizeExchange((exchanges) ->\n\t\t\t\t\texchanges\n\t\t\t\t\t\t.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll()\n\t\t\t\t\t\t.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole(\"ACTUATOR\")\n\t\t\t\t\t\t.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()\n\t\t\t\t\t\t.pathMatchers(\"/login\").permitAll()\n\t\t\t\t\t\t.anyExchange().authenticated())\n\t\t\t\t.httpBasic();\n\t\t\t\r\n\t\t\treturn http.build();\n\t\t}\n","date":"2019-07-27 05:41:49","endLine":105,"groupId":"14064","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"springSecurityFilterChain","params":"(ServerHttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a6/6476454c5741d4d6f98d6e7874666799696d36.src","preCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\t\r\n\t\t\thttp.authorizeExchange((exchanges) ->\n\t\t\t\t\texchanges\n\t\t\t\t\t\t.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll()\n\t\t\t\t\t\t.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole(\"ACTUATOR\")\n\t\t\t\t\t\t.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()\n\t\t\t\t\t\t.pathMatchers(\"/login\").permitAll()\n\t\t\t\t\t\t.anyExchange().authenticated())\n\t\t\t\t.httpBasic();\n\t\t\t\r\n\t\t\treturn http.build();\n\t\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure-webflux/src/test/java/smoketest/secure/webflux/ManagementPortSampleSecureWebFluxTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"39a7b9da38756a77d38c9bd6c56e6da194a87d62","commitMessage":"@@@Switch to lambda style security configuration\n\nCloses gh-17525\n","date":"2019-07-27 05:41:49","modifiedFileCount":"19","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2019-07-29 18:28:51","codes":[{"authorDate":"2019-07-29 18:28:51","commitOrder":2,"curCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic(Customizer.withDefaults());\n\t\t\treturn http.build();\n\t\t}\n","date":"2019-07-29 18:28:51","endLine":129,"groupId":"7086","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"springSecurityFilterChain","params":"(ServerHttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/65/75c61ce856791acc532101139d36431ce05703.src","preCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\t\r\n\t\t\thttp.authorizeExchange((exchanges) ->\n\t\t\t\t\texchanges\n\t\t\t\t\t\t.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll()\n\t\t\t\t\t\t.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole(\"ACTUATOR\")\n\t\t\t\t\t\t.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()\n\t\t\t\t\t\t.pathMatchers(\"/login\").permitAll()\n\t\t\t\t\t\t.anyExchange().authenticated())\n\t\t\t\t.httpBasic(Customizer.withDefaults());\n\t\t\t\r\n\t\t\treturn http.build();\n\t\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure-webflux/src/test/java/smoketest/secure/webflux/SampleSecureWebFluxCustomSecurityTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2019-07-29 18:28:51","commitOrder":2,"curCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic();\n\t\t\treturn http.build();\n\t\t}\n","date":"2019-07-29 18:28:51","endLine":104,"groupId":"7086","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"springSecurityFilterChain","params":"(ServerHttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/87/c37fa6c301291637e2d48446412953d3236239.src","preCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\t\r\n\t\t\thttp.authorizeExchange((exchanges) ->\n\t\t\t\t\texchanges\n\t\t\t\t\t\t.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll()\n\t\t\t\t\t\t.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole(\"ACTUATOR\")\n\t\t\t\t\t\t.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()\n\t\t\t\t\t\t.pathMatchers(\"/login\").permitAll()\n\t\t\t\t\t\t.anyExchange().authenticated())\n\t\t\t\t.httpBasic();\n\t\t\t\r\n\t\t\treturn http.build();\n\t\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure-webflux/src/test/java/smoketest/secure/webflux/ManagementPortSampleSecureWebFluxTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"6675f49334b6c27d55cae05203f233dc5b38551b","commitMessage":"@@@Switch to multi-line security configuration\n\nNow that we have lambda style security configuration we can further\nimprove readability by switching to one statement per line.\n\nSee gh-17525\n","date":"2019-07-29 18:28:51","modifiedFileCount":"19","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-01-22 07:15:02","codes":[{"authorDate":"2021-01-22 07:15:02","commitOrder":3,"curCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic(Customizer.withDefaults());\n\t\t\treturn http.build();\n\t\t}\n","date":"2021-01-22 07:15:03","endLine":128,"groupId":"7086","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"springSecurityFilterChain","params":"(ServerHttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f9/d535b9a63b3a97d313d26aaef5c22af74c5838.src","preCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic(Customizer.withDefaults());\n\t\t\treturn http.build();\n\t\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure-webflux/src/test/java/smoketest/secure/webflux/SampleSecureWebFluxCustomSecurityTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2021-01-22 07:15:02","commitOrder":3,"curCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic();\n\t\t\treturn http.build();\n\t\t}\n","date":"2021-01-22 07:15:03","endLine":104,"groupId":"7086","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"springSecurityFilterChain","params":"(ServerHttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f8/5dd38774b5399df1d282d342afea793f1bdcdb.src","preCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\", \"info\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic();\n\t\t\treturn http.build();\n\t\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure-webflux/src/test/java/smoketest/secure/webflux/ManagementPortSampleSecureWebFluxTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"587f96d4e099f8ae9d27e61a53e5512e6263db71","commitMessage":"@@@Merge pull request #24715 from hatefpalizgar\n\n* pr/24715:\n  Polish \" Change info endpoint to be secure and unexposed by default\"\n  Change info endpoint to be secure and unexposed by default\n\nCloses gh-24715\n","date":"2021-01-22 07:15:03","modifiedFileCount":"14","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2021-05-17 16:15:00","codes":[{"authorDate":"2021-05-17 16:15:00","commitOrder":4,"curCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic(Customizer.withDefaults());\n\t\t\treturn http.build();\n\t\t}\n","date":"2021-05-17 16:15:00","endLine":128,"groupId":"1023","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"springSecurityFilterChain","params":"(ServerHttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/58/ba49ad829c2dae683747f5bdeaaa7dfa4e464b.src","preCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic(Customizer.withDefaults());\n\t\t\treturn http.build();\n\t\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure-webflux/src/test/java/smoketest/secure/webflux/SampleSecureWebFluxCustomSecurityTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2021-05-17 16:15:00","commitOrder":4,"curCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic();\n\t\t\treturn http.build();\n\t\t}\n","date":"2021-05-17 16:15:00","endLine":104,"groupId":"1023","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"springSecurityFilterChain","params":"(ServerHttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e3/38be7593acf2af8b930e033f86c8cfd31446d6.src","preCode":"\t\tSecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception {\n\t\t\thttp.authorizeExchange((exchanges) -> {\n\t\t\t\texchanges.matchers(EndpointRequest.to(\"health\")).permitAll();\n\t\t\t\texchanges.matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\t\texchanges.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\t\texchanges.pathMatchers(\"/login\").permitAll();\n\t\t\t\texchanges.anyExchange().authenticated();\n\t\t\t});\n\t\t\thttp.httpBasic();\n\t\t\treturn http.build();\n\t\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure-webflux/src/test/java/smoketest/secure/webflux/ManagementPortSampleSecureWebFluxTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"21a3f03d20a24934e38a26843872778598da7ad3","commitMessage":"@@@Merge pull request #26441 from weixsun\n\n* pr/26441:\n  Polish \"Remove unnecessary throws declaration in tests\"\n  Remove unnecessary throws declaration in tests\n\nCloses gh-26441\n","date":"2021-05-17 16:15:00","modifiedFileCount":"172","status":"M","submitter":"Stephane Nicoll"}]
