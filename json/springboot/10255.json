[{"authorTime":"2019-07-29 18:28:51","codes":[{"authorDate":"2019-07-29 18:28:51","commitOrder":3,"curCode":"\tprotected void configure(HttpSecurity http) throws Exception {\n\t\thttp.authorizeRequests((requests) -> {\n\t\t\trequests.mvcMatchers(\"/actuator/beans\").hasRole(\"BEANS\");\n\t\t\trequests.requestMatchers(EndpointRequest.to(\"health\", \"info\")).permitAll();\n\t\t\trequests.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\trequests.requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\trequests.antMatchers(\"/**\").hasRole(\"USER\");\n\t\t});\n\t\thttp.cors(Customizer.withDefaults());\n\t\thttp.httpBasic();\n\t}\n","date":"2019-07-29 18:28:51","endLine":69,"groupId":"2207","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(HttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/21/709bbc65b6b9368b8e497de077a1e79d23df1f.src","preCode":"\tprotected void configure(HttpSecurity http) throws Exception {\n\t\thttp.authorizeRequests((requests) -> {\n\t\t\trequests.mvcMatchers(\"/actuator/beans\").hasRole(\"BEANS\");\n\t\t\trequests.requestMatchers(EndpointRequest.to(\"health\", \"info\")).permitAll();\n\t\t\trequests.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\trequests.requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\trequests.antMatchers(\"/**\").hasRole(\"USER\");\n\t\t});\n\t\thttp.cors(Customizer.withDefaults());\n\t\thttp.httpBasic();\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/SecurityConfiguration.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"MB"},{"authorDate":"2019-07-29 18:28:51","commitOrder":3,"curCode":"\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests((requests) -> {\n\t\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\t\trequests.anyRequest().authenticated();\n\t\t\t});\n\t\t\thttp.formLogin(Customizer.withDefaults());\n\t\t\thttp.httpBasic();\n\t\t}\n","date":"2019-07-29 18:28:51","endLine":136,"groupId":"842","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(HttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/37/5b6e3cf7dc6b49c0ea07a63e3d1cdd6eedce0d.src","preCode":"\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests((requests) -> {\n\t\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\t\trequests.anyRequest().authenticated();\n\t\t\t});\n\t\t\thttp.formLogin(Customizer.withDefaults());\n\t\t\thttp.httpBasic();\n\t\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/ManagementWebSecurityAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"}],"commitId":"6675f49334b6c27d55cae05203f233dc5b38551b","commitMessage":"@@@Switch to multi-line security configuration\n\nNow that we have lambda style security configuration we can further\nimprove readability by switching to one statement per line.\n\nSee gh-17525\n","date":"2019-07-29 18:28:51","modifiedFileCount":"19","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-07-29 18:28:51","codes":[{"authorDate":"2020-08-15 02:09:37","commitOrder":4,"curCode":"\tSecurityFilterChain configure(HttpSecurity http) throws Exception {\n\t\thttp.authorizeRequests((requests) -> {\n\t\t\trequests.mvcMatchers(\"/actuator/beans\").hasRole(\"BEANS\");\n\t\t\trequests.requestMatchers(EndpointRequest.to(\"health\", \"info\")).permitAll();\n\t\t\trequests.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\trequests.requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\trequests.antMatchers(\"/**\").hasRole(\"USER\");\n\t\t});\n\t\thttp.cors(Customizer.withDefaults());\n\t\thttp.httpBasic();\n\t\treturn http.build();\n\t}\n","date":"2020-10-27 14:47:14","endLine":70,"groupId":"2207","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(HttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9c/e59217ce72018c06244cda333a4517c52d571f.src","preCode":"\tprotected void configure(HttpSecurity http) throws Exception {\n\t\thttp.authorizeRequests((requests) -> {\n\t\t\trequests.mvcMatchers(\"/actuator/beans\").hasRole(\"BEANS\");\n\t\t\trequests.requestMatchers(EndpointRequest.to(\"health\", \"info\")).permitAll();\n\t\t\trequests.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\trequests.requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\trequests.antMatchers(\"/**\").hasRole(\"USER\");\n\t\t});\n\t\thttp.cors(Customizer.withDefaults());\n\t\thttp.httpBasic();\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/SecurityConfiguration.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2019-07-29 18:28:51","commitOrder":4,"curCode":"\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests((requests) -> {\n\t\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\t\trequests.anyRequest().authenticated();\n\t\t\t});\n\t\t\thttp.formLogin(Customizer.withDefaults());\n\t\t\thttp.httpBasic();\n\t\t}\n","date":"2019-07-29 18:28:51","endLine":136,"groupId":"842","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(HttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/37/5b6e3cf7dc6b49c0ea07a63e3d1cdd6eedce0d.src","preCode":"\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests((requests) -> {\n\t\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\t\trequests.anyRequest().authenticated();\n\t\t\t});\n\t\t\thttp.formLogin(Customizer.withDefaults());\n\t\t\thttp.httpBasic();\n\t\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/ManagementWebSecurityAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"}],"commitId":"0818f27f44317c52f66b9f0e7030fa8fcb7a92f0","commitMessage":"@@@Configure WebSecurity using WebSecurityCustomizer\n\nReplace `WebSecurityConfigurer` and `WebSecurityConfigurerAdapter`\nconfigurations with `WebSecurityCustomizer` or `SecurityFilterChain`\nbeans.\n\nCloses gh-23421\n","date":"2020-10-27 14:47:14","modifiedFileCount":"20","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2019-07-29 18:28:51","codes":[{"authorDate":"2021-01-22 07:15:02","commitOrder":5,"curCode":"\tSecurityFilterChain configure(HttpSecurity http) throws Exception {\n\t\thttp.authorizeRequests((requests) -> {\n\t\t\trequests.mvcMatchers(\"/actuator/beans\").hasRole(\"BEANS\");\n\t\t\trequests.requestMatchers(EndpointRequest.to(\"health\")).permitAll();\n\t\t\trequests.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\trequests.requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\trequests.antMatchers(\"/**\").hasRole(\"USER\");\n\t\t});\n\t\thttp.cors(Customizer.withDefaults());\n\t\thttp.httpBasic();\n\t\treturn http.build();\n\t}\n","date":"2021-01-22 07:15:03","endLine":70,"groupId":"10255","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(HttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1e/3f35bb0c637a934e12e9717fffd15c3570449c.src","preCode":"\tSecurityFilterChain configure(HttpSecurity http) throws Exception {\n\t\thttp.authorizeRequests((requests) -> {\n\t\t\trequests.mvcMatchers(\"/actuator/beans\").hasRole(\"BEANS\");\n\t\t\trequests.requestMatchers(EndpointRequest.to(\"health\", \"info\")).permitAll();\n\t\t\trequests.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n\t\t\t\t\t.hasRole(\"ACTUATOR\");\n\t\t\trequests.requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\trequests.antMatchers(\"/**\").hasRole(\"USER\");\n\t\t});\n\t\thttp.cors(Customizer.withDefaults());\n\t\thttp.httpBasic();\n\t\treturn http.build();\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/SecurityConfiguration.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2019-07-29 18:28:51","commitOrder":5,"curCode":"\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests((requests) -> {\n\t\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\t\trequests.anyRequest().authenticated();\n\t\t\t});\n\t\t\thttp.formLogin(Customizer.withDefaults());\n\t\t\thttp.httpBasic();\n\t\t}\n","date":"2019-07-29 18:28:51","endLine":136,"groupId":"10255","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(HttpSecurityhttp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/37/5b6e3cf7dc6b49c0ea07a63e3d1cdd6eedce0d.src","preCode":"\t\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t\thttp.authorizeRequests((requests) -> {\n\t\t\t\trequests.antMatchers(\"/foo\").permitAll();\n\t\t\t\trequests.anyRequest().authenticated();\n\t\t\t});\n\t\t\thttp.formLogin(Customizer.withDefaults());\n\t\t\thttp.httpBasic();\n\t\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/ManagementWebSecurityAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"}],"commitId":"587f96d4e099f8ae9d27e61a53e5512e6263db71","commitMessage":"@@@Merge pull request #24715 from hatefpalizgar\n\n* pr/24715:\n  Polish \" Change info endpoint to be secure and unexposed by default\"\n  Change info endpoint to be secure and unexposed by default\n\nCloses gh-24715\n","date":"2021-01-22 07:15:03","modifiedFileCount":"14","status":"M","submitter":"Madhura Bhave"}]
