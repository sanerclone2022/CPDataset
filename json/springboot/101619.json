[{"authorTime":"2020-10-14 05:43:34","codes":[{"authorDate":"2020-10-14 05:43:34","commitOrder":1,"curCode":"\tvoid resolveResolvesUsingFirstSupportedResolver() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, null);\n\t\tassertThat(resolved).hasSize(1);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t}\n","date":"2020-10-16 02:33:57","endLine":128,"groupId":"9415","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveResolvesUsingFirstSupportedResolver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/78/4e723c159c50f67fc89ac4b079a2fbf2f6c225.src","preCode":"\tvoid resolveResolvesUsingFirstSupportedResolver() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, null);\n\t\tassertThat(resolved).hasSize(1);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2020-10-14 05:43:34","commitOrder":1,"curCode":"\tvoid resolveWhenProfileMergesResolvedLocations() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, this.profiles);\n\t\tassertThat(resolved).hasSize(2);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t\tTestConfigDataResource profileResource = (TestConfigDataResource) resolved.get(1).getResource();\n\t\tassertThat(profileResource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(profileResource.getLocation()).isEqualTo(location);\n\t\tassertThat(profileResource.isProfileSpecific()).isTrue();\n\t}\n","date":"2020-10-16 02:33:57","endLine":146,"groupId":"9415","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveWhenProfileMergesResolvedLocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/78/4e723c159c50f67fc89ac4b079a2fbf2f6c225.src","preCode":"\tvoid resolveWhenProfileMergesResolvedLocations() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, this.profiles);\n\t\tassertThat(resolved).hasSize(2);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t\tTestConfigDataResource profileResource = (TestConfigDataResource) resolved.get(1).getResource();\n\t\tassertThat(profileResource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(profileResource.getLocation()).isEqualTo(location);\n\t\tassertThat(profileResource.isProfileSpecific()).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"1cf9fc107e5ed29a44935688eaca2bf6fa85108b","commitMessage":"@@@Improve ConfigData processing code\n\nRefactor `ConfigData` processing code to make it less awkward to\nfollow.\n\nPrior to this commit the `ConfigDataLocationResolver` would take a\nString location and return a `ConfigDataLocation` instance. This was\na little confusing since sometimes we would refer to `location` as the\nString value.  and sometimes it would be the typed instance. We also\nhad nowhere sensible to put the `optional:` prefix logic and we needed\nto pass a `boolean` parameter to a number of methods. The recently\nintroduced `Orgin` support also didn't have a good home.\n\nTo solve this.  `ConfigDataLocation` has been renamed to\n`ConfigDataResource`. This frees up `ConfigDataLocation` to be used\nas a richer `location` type that holds the String value.  the `Orgin`\nand provides a home for the `optional:` logic.\n\nThis commit also cleans up a few other areas of the code.  including\nrenaming `ResourceConfigData...` to `StandardConfigData...`. It also\nintroduces a new exception hierarchy for `ConfigDataNotFoundExceptions`.\n\nCloses gh-23711\n","date":"2020-10-16 02:33:57","modifiedFileCount":"41","status":"B","submitter":"Phillip Webb"},{"authorTime":"2021-06-04 13:24:17","codes":[{"authorDate":"2021-06-04 13:24:17","commitOrder":2,"curCode":"\tvoid resolveResolvesUsingFirstSupportedResolver() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, null, true);\n\t\tassertThat(resolved).hasSize(1);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t}\n","date":"2021-06-04 13:24:17","endLine":140,"groupId":"9415","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveResolvesUsingFirstSupportedResolver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/99/9fca26d69ff6ff3a0816aa1b2d3e72af90fd69.src","preCode":"\tvoid resolveResolvesUsingFirstSupportedResolver() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, null);\n\t\tassertThat(resolved).hasSize(1);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-06-04 13:24:17","commitOrder":2,"curCode":"\tvoid resolveWhenProfileMergesResolvedLocations() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, this.profiles, true);\n\t\tassertThat(resolved).hasSize(2);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t\tTestConfigDataResource profileResource = (TestConfigDataResource) resolved.get(1).getResource();\n\t\tassertThat(profileResource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(profileResource.getLocation()).isEqualTo(location);\n\t\tassertThat(profileResource.isProfileSpecific()).isTrue();\n\t}\n","date":"2021-06-04 13:24:17","endLine":158,"groupId":"9415","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveWhenProfileMergesResolvedLocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/99/9fca26d69ff6ff3a0816aa1b2d3e72af90fd69.src","preCode":"\tvoid resolveWhenProfileMergesResolvedLocations() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, this.profiles);\n\t\tassertThat(resolved).hasSize(2);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t\tTestConfigDataResource profileResource = (TestConfigDataResource) resolved.get(1).getResource();\n\t\tassertThat(profileResource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(profileResource.getLocation()).isEqualTo(location);\n\t\tassertThat(profileResource.isProfileSpecific()).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"e73062aefa622781ee8bcb490f513c1fc8068d62","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-26755\n","date":"2021-06-04 13:24:17","modifiedFileCount":"8","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-06-22 09:37:43","codes":[{"authorDate":"2021-06-22 09:37:43","commitOrder":3,"curCode":"\tvoid resolveResolvesUsingFirstSupportedResolver() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, null);\n\t\tassertThat(resolved).hasSize(1);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t}\n","date":"2021-06-22 09:37:43","endLine":140,"groupId":"101619","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"resolveResolvesUsingFirstSupportedResolver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/16/9101a8d6cc08c98da397ab6ab6c2b1849e11ba.src","preCode":"\tvoid resolveResolvesUsingFirstSupportedResolver() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, null, true);\n\t\tassertThat(resolved).hasSize(1);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-06-22 09:37:43","commitOrder":3,"curCode":"\tvoid resolveWhenProfileMergesResolvedLocations() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, this.profiles);\n\t\tassertThat(resolved).hasSize(2);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t\tTestConfigDataResource profileResource = (TestConfigDataResource) resolved.get(1).getResource();\n\t\tassertThat(profileResource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(profileResource.getLocation()).isEqualTo(location);\n\t\tassertThat(profileResource.isProfileSpecific()).isTrue();\n\t}\n","date":"2021-06-22 09:37:43","endLine":158,"groupId":"101619","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"resolveWhenProfileMergesResolvedLocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/16/9101a8d6cc08c98da397ab6ab6c2b1849e11ba.src","preCode":"\tvoid resolveWhenProfileMergesResolvedLocations() {\n\t\tConfigDataLocationResolvers resolvers = new ConfigDataLocationResolvers(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.binder, this.resourceLoader,\n\t\t\t\tArrays.asList(LowestTestResolver.class.getName(), HighestTestResolver.class.getName()));\n\t\tConfigDataLocation location = ConfigDataLocation.of(\"LowestTestResolver:test\");\n\t\tList<ConfigDataResolutionResult> resolved = resolvers.resolve(this.context, location, this.profiles, true);\n\t\tassertThat(resolved).hasSize(2);\n\t\tTestConfigDataResource resource = (TestConfigDataResource) resolved.get(0).getResource();\n\t\tassertThat(resource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(resource.getLocation()).isEqualTo(location);\n\t\tassertThat(resource.isProfileSpecific()).isFalse();\n\t\tTestConfigDataResource profileResource = (TestConfigDataResource) resolved.get(1).getResource();\n\t\tassertThat(profileResource.getResolver()).isInstanceOf(LowestTestResolver.class);\n\t\tassertThat(profileResource.getLocation()).isEqualTo(location);\n\t\tassertThat(profileResource.isProfileSpecific()).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataLocationResolversTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"86dc156162f544053ec5c8575881a3c24dc78084","commitMessage":"@@@Merge branch '2.5.x'\n\nCloses gh-27006\n","date":"2021-06-22 09:37:43","modifiedFileCount":"7","status":"M","submitter":"Phillip Webb"}]
