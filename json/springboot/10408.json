[{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-08-08 20:13:06","commitOrder":5,"curCode":"\tvoid getEndpointsWhenHasProxiedEndpointShouldReturnEndpoint() {\n\t\tload(ProxiedSpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"), EndpointId.of(\"specialized\"));\n\t\t});\n\t}\n","date":"2019-08-08 20:13:06","endLine":248,"groupId":"12017","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasProxiedEndpointShouldReturnEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/c08155ea691828e614842419d3bd475b330ad4.src","preCode":"\tvoid getEndpointsWhenHasProxiedEndpointShouldReturnEndpoint() {\n\t\tload(ProxiedSpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"), EndpointId.of(\"specialized\"));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tEndpointId id = endpoint.getEndpointId();\n\t\t\t\treturn !id.equals(EndpointId.of(\"specialized\"));\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context,\n\t\t\t\t\tCollections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":251,"groupId":"8966","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldApplyFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/5734d8be02a5dd04ae88742b6ec518a0917dbe.src","preCode":"\tvoid getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tEndpointId id = endpoint.getEndpointId();\n\t\t\t\treturn !id.equals(EndpointId.of(\"specialized\"));\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context,\n\t\t\t\t\tCollections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"NB"}],"commitId":"71cf0a3ec8963f79d02e27b8ab9e74d5524f37a4","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-17812\n","date":"2019-08-08 20:13:06","modifiedFileCount":"2","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-11-05 19:05:51","codes":[{"authorDate":"2019-08-08 20:13:06","commitOrder":6,"curCode":"\tvoid getEndpointsWhenHasProxiedEndpointShouldReturnEndpoint() {\n\t\tload(ProxiedSpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"), EndpointId.of(\"specialized\"));\n\t\t});\n\t}\n","date":"2019-08-08 20:13:06","endLine":248,"groupId":"10408","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasProxiedEndpointShouldReturnEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/c08155ea691828e614842419d3bd475b330ad4.src","preCode":"\tvoid getEndpointsWhenHasProxiedEndpointShouldReturnEndpoint() {\n\t\tload(ProxiedSpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"), EndpointId.of(\"specialized\"));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"N"},{"authorDate":"2019-11-05 19:05:51","commitOrder":6,"curCode":"\tvoid getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tEndpointId id = endpoint.getEndpointId();\n\t\t\t\treturn !id.equals(EndpointId.of(\"specialized\")) && !id.equals(EndpointId.of(\"specialized-superclass\"));\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context,\n\t\t\t\t\tCollections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","date":"2019-11-05 19:05:51","endLine":263,"groupId":"10408","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldApplyFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/53/8b002c4c971048189cb66cd9410f18a18d0b0b.src","preCode":"\tvoid getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tEndpointId id = endpoint.getEndpointId();\n\t\t\t\treturn !id.equals(EndpointId.of(\"specialized\"));\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context,\n\t\t\t\t\tCollections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"ce01f7f1509fd3583b3320b4809969611ffaba08","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-18882\n","date":"2019-11-05 19:05:51","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"}]
