[{"authorTime":"2019-04-24 22:09:41","codes":[{"authorDate":"2019-04-24 22:09:41","commitOrder":1,"curCode":"\tpublic void counterIsIncrementedOncePerEventWithoutCompositeMeterRegistry() {\n\t\tnew ApplicationContextRunner()\n\t\t\t\t.with(MetricsRun.limitedTo(JmxMetricsExportAutoConfiguration.class))\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(LogbackMetricsAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tLogger logger = ((LoggerContext) StaticLoggerBinder.getSingleton()\n\t\t\t\t\t\t\t.getLoggerFactory()).getLogger(\"test-logger\");\n\t\t\t\t\tlogger.error(\"Error.\");\n\n\t\t\t\t\tMap<String, MeterRegistry> registriesByName = context\n\t\t\t\t\t\t\t.getBeansOfType(MeterRegistry.class);\n\t\t\t\t\tassertThat(registriesByName).hasSize(1);\n\t\t\t\t\tMeterRegistry registry = registriesByName.values().iterator().next();\n\t\t\t\t\tassertThat(registry.get(\"logback.events\").tag(\"level\", \"error\")\n\t\t\t\t\t\t\t.counter().count()).isEqualTo(1);\n\t\t\t\t});\n\t}\n","date":"2019-04-24 22:09:41","endLine":95,"groupId":"10937","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"counterIsIncrementedOncePerEventWithoutCompositeMeterRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5e/d5d6d2c46654b9a192187a81af949c630abf51.src","preCode":"\tpublic void counterIsIncrementedOncePerEventWithoutCompositeMeterRegistry() {\n\t\tnew ApplicationContextRunner()\n\t\t\t\t.with(MetricsRun.limitedTo(JmxMetricsExportAutoConfiguration.class))\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(LogbackMetricsAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tLogger logger = ((LoggerContext) StaticLoggerBinder.getSingleton()\n\t\t\t\t\t\t\t.getLoggerFactory()).getLogger(\"test-logger\");\n\t\t\t\t\tlogger.error(\"Error.\");\n\n\t\t\t\t\tMap<String, MeterRegistry> registriesByName = context\n\t\t\t\t\t\t\t.getBeansOfType(MeterRegistry.class);\n\t\t\t\t\tassertThat(registriesByName).hasSize(1);\n\t\t\t\t\tMeterRegistry registry = registriesByName.values().iterator().next();\n\t\t\t\t\tassertThat(registry.get(\"logback.events\").tag(\"level\", \"error\")\n\t\t\t\t\t\t\t.counter().count()).isEqualTo(1);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2019-04-24 22:09:41","commitOrder":1,"curCode":"\tpublic void counterIsIncrementedOncePerEventWithCompositeMeterRegistry() {\n\t\tnew ApplicationContextRunner()\n\t\t\t\t.with(MetricsRun.limitedTo(JmxMetricsExportAutoConfiguration.class,\n\t\t\t\t\t\tPrometheusMetricsExportAutoConfiguration.class))\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(LogbackMetricsAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tLogger logger = ((LoggerContext) StaticLoggerBinder.getSingleton()\n\t\t\t\t\t\t\t.getLoggerFactory()).getLogger(\"test-logger\");\n\t\t\t\t\tlogger.error(\"Error.\");\n\t\t\t\t\tMap<String, MeterRegistry> registriesByName = context\n\t\t\t\t\t\t\t.getBeansOfType(MeterRegistry.class);\n\t\t\t\t\tassertThat(registriesByName).hasSize(3);\n\t\t\t\t\tregistriesByName.forEach((name,\n\t\t\t\t\t\t\tregistry) -> assertThat(registry.get(\"logback.events\")\n\t\t\t\t\t\t\t\t\t.tag(\"level\", \"error\").counter().count())\n\t\t\t\t\t\t\t\t\t\t\t.isEqualTo(1));\n\t\t\t\t});\n\t}\n","date":"2019-04-24 22:09:41","endLine":116,"groupId":"10937","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"counterIsIncrementedOncePerEventWithCompositeMeterRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5e/d5d6d2c46654b9a192187a81af949c630abf51.src","preCode":"\tpublic void counterIsIncrementedOncePerEventWithCompositeMeterRegistry() {\n\t\tnew ApplicationContextRunner()\n\t\t\t\t.with(MetricsRun.limitedTo(JmxMetricsExportAutoConfiguration.class,\n\t\t\t\t\t\tPrometheusMetricsExportAutoConfiguration.class))\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(LogbackMetricsAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tLogger logger = ((LoggerContext) StaticLoggerBinder.getSingleton()\n\t\t\t\t\t\t\t.getLoggerFactory()).getLogger(\"test-logger\");\n\t\t\t\t\tlogger.error(\"Error.\");\n\t\t\t\t\tMap<String, MeterRegistry> registriesByName = context\n\t\t\t\t\t\t\t.getBeansOfType(MeterRegistry.class);\n\t\t\t\t\tassertThat(registriesByName).hasSize(3);\n\t\t\t\t\tregistriesByName.forEach((name,\n\t\t\t\t\t\t\tregistry) -> assertThat(registry.get(\"logback.events\")\n\t\t\t\t\t\t\t\t\t.tag(\"level\", \"error\").counter().count())\n\t\t\t\t\t\t\t\t\t\t\t.isEqualTo(1));\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"4754386361ce7ea774fe9d985ca585ec098dcc0b","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-16644\n","date":"2019-04-24 22:09:41","modifiedFileCount":"5","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid counterIsIncrementedOncePerEventWithoutCompositeMeterRegistry() {\n\t\tnew ApplicationContextRunner().with(MetricsRun.limitedTo(JmxMetricsExportAutoConfiguration.class))\n\t\t\t\t.withConfiguration(AutoConfigurations.of(LogbackMetricsAutoConfiguration.class)).run((context) -> {\n\t\t\t\t\tLogger logger = ((LoggerContext) StaticLoggerBinder.getSingleton().getLoggerFactory())\n\t\t\t\t\t\t\t.getLogger(\"test-logger\");\n\t\t\t\t\tlogger.error(\"Error.\");\n\t\t\t\t\tMap<String, MeterRegistry> registriesByName = context.getBeansOfType(MeterRegistry.class);\n\t\t\t\t\tassertThat(registriesByName).hasSize(1);\n\t\t\t\t\tMeterRegistry registry = registriesByName.values().iterator().next();\n\t\t\t\t\tassertThat(registry.get(\"logback.events\").tag(\"level\", \"error\").counter().count()).isEqualTo(1);\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":88,"groupId":"10891","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"counterIsIncrementedOncePerEventWithoutCompositeMeterRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5f/54204fd1280b29c95a6b9425fa85a71810edef.src","preCode":"\tpublic void counterIsIncrementedOncePerEventWithoutCompositeMeterRegistry() {\n\t\tnew ApplicationContextRunner().with(MetricsRun.limitedTo(JmxMetricsExportAutoConfiguration.class))\n\t\t\t\t.withConfiguration(AutoConfigurations.of(LogbackMetricsAutoConfiguration.class)).run((context) -> {\n\t\t\t\t\tLogger logger = ((LoggerContext) StaticLoggerBinder.getSingleton().getLoggerFactory())\n\t\t\t\t\t\t\t.getLogger(\"test-logger\");\n\t\t\t\t\tlogger.error(\"Error.\");\n\t\t\t\t\tMap<String, MeterRegistry> registriesByName = context.getBeansOfType(MeterRegistry.class);\n\t\t\t\t\tassertThat(registriesByName).hasSize(1);\n\t\t\t\t\tMeterRegistry registry = registriesByName.values().iterator().next();\n\t\t\t\t\tassertThat(registry.get(\"logback.events\").tag(\"level\", \"error\").counter().count()).isEqualTo(1);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid counterIsIncrementedOncePerEventWithCompositeMeterRegistry() {\n\t\tnew ApplicationContextRunner()\n\t\t\t\t.with(MetricsRun.limitedTo(JmxMetricsExportAutoConfiguration.class,\n\t\t\t\t\t\tPrometheusMetricsExportAutoConfiguration.class))\n\t\t\t\t.withConfiguration(AutoConfigurations.of(LogbackMetricsAutoConfiguration.class)).run((context) -> {\n\t\t\t\t\tLogger logger = ((LoggerContext) StaticLoggerBinder.getSingleton().getLoggerFactory())\n\t\t\t\t\t\t\t.getLogger(\"test-logger\");\n\t\t\t\t\tlogger.error(\"Error.\");\n\t\t\t\t\tMap<String, MeterRegistry> registriesByName = context.getBeansOfType(MeterRegistry.class);\n\t\t\t\t\tassertThat(registriesByName).hasSize(3);\n\t\t\t\t\tregistriesByName.forEach((name,\n\t\t\t\t\t\t\tregistry) -> assertThat(\n\t\t\t\t\t\t\t\t\tregistry.get(\"logback.events\").tag(\"level\", \"error\").counter().count())\n\t\t\t\t\t\t\t\t\t\t\t.isEqualTo(1));\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":106,"groupId":"10891","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"counterIsIncrementedOncePerEventWithCompositeMeterRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5f/54204fd1280b29c95a6b9425fa85a71810edef.src","preCode":"\tpublic void counterIsIncrementedOncePerEventWithCompositeMeterRegistry() {\n\t\tnew ApplicationContextRunner()\n\t\t\t\t.with(MetricsRun.limitedTo(JmxMetricsExportAutoConfiguration.class,\n\t\t\t\t\t\tPrometheusMetricsExportAutoConfiguration.class))\n\t\t\t\t.withConfiguration(AutoConfigurations.of(LogbackMetricsAutoConfiguration.class)).run((context) -> {\n\t\t\t\t\tLogger logger = ((LoggerContext) StaticLoggerBinder.getSingleton().getLoggerFactory())\n\t\t\t\t\t\t\t.getLogger(\"test-logger\");\n\t\t\t\t\tlogger.error(\"Error.\");\n\t\t\t\t\tMap<String, MeterRegistry> registriesByName = context.getBeansOfType(MeterRegistry.class);\n\t\t\t\t\tassertThat(registriesByName).hasSize(3);\n\t\t\t\t\tregistriesByName.forEach((name,\n\t\t\t\t\t\t\tregistry) -> assertThat(\n\t\t\t\t\t\t\t\t\tregistry.get(\"logback.events\").tag(\"level\", \"error\").counter().count())\n\t\t\t\t\t\t\t\t\t\t\t.isEqualTo(1));\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
