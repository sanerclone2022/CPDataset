[{"authorTime":"2018-10-11 03:33:35","codes":[{"authorDate":"2018-10-11 03:33:35","commitOrder":1,"curCode":"\tpublic void loadWithoutConfigurationPropertiesBindHandlerAdvisor() {\n\t\tload(WithoutConfigurationPropertiesBindHandlerAdvisor.class,\n\t\t\t\t\"foo.bar.default.content-type=text/plain\",\n\t\t\t\t\"foo.bar.bindings.input.destination=d1\",\n\t\t\t\t\"foo.bar.bindings.input.content-type=text/xml\",\n\t\t\t\t\"foo.bar.bindings.output.destination=d2\");\n\t\tBindingServiceProperties properties = this.context\n\t\t\t\t.getBean(BindingServiceProperties.class);\n\t\tBindingProperties input = properties.getBindings().get(\"input\");\n\t\tassertThat(input.getDestination()).isEqualTo(\"d1\");\n\t\tassertThat(input.getContentType()).isEqualTo(\"text/xml\");\n\t\tBindingProperties output = properties.getBindings().get(\"output\");\n\t\tassertThat(output.getDestination()).isEqualTo(\"d2\");\n\t\tassertThat(output.getContentType()).isEqualTo(\"application/json\");\n\t}\n","date":"2018-10-11 03:40:11","endLine":68,"groupId":"1139","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadWithoutConfigurationPropertiesBindHandlerAdvisor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a1/4732066d34deae39b3e28bd5d916de46ebc433.src","preCode":"\tpublic void loadWithoutConfigurationPropertiesBindHandlerAdvisor() {\n\t\tload(WithoutConfigurationPropertiesBindHandlerAdvisor.class,\n\t\t\t\t\"foo.bar.default.content-type=text/plain\",\n\t\t\t\t\"foo.bar.bindings.input.destination=d1\",\n\t\t\t\t\"foo.bar.bindings.input.content-type=text/xml\",\n\t\t\t\t\"foo.bar.bindings.output.destination=d2\");\n\t\tBindingServiceProperties properties = this.context\n\t\t\t\t.getBean(BindingServiceProperties.class);\n\t\tBindingProperties input = properties.getBindings().get(\"input\");\n\t\tassertThat(input.getDestination()).isEqualTo(\"d1\");\n\t\tassertThat(input.getContentType()).isEqualTo(\"text/xml\");\n\t\tBindingProperties output = properties.getBindings().get(\"output\");\n\t\tassertThat(output.getDestination()).isEqualTo(\"d2\");\n\t\tassertThat(output.getContentType()).isEqualTo(\"application/json\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindHandlerAdvisorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-10-11 03:33:35","commitOrder":1,"curCode":"\tpublic void loadWithConfigurationPropertiesBindHandlerAdvisor() {\n\t\tload(WithConfigurationPropertiesBindHandlerAdvisor.class,\n\t\t\t\t\"foo.bar.default.content-type=text/plain\",\n\t\t\t\t\"foo.bar.bindings.input.destination=d1\",\n\t\t\t\t\"foo.bar.bindings.input.content-type=text/xml\",\n\t\t\t\t\"foo.bar.bindings.output.destination=d2\");\n\t\tBindingServiceProperties properties = this.context\n\t\t\t\t.getBean(BindingServiceProperties.class);\n\t\tBindingProperties input = properties.getBindings().get(\"input\");\n\t\tassertThat(input.getDestination()).isEqualTo(\"d1\");\n\t\tassertThat(input.getContentType()).isEqualTo(\"text/xml\");\n\t\tBindingProperties output = properties.getBindings().get(\"output\");\n\t\tassertThat(output.getDestination()).isEqualTo(\"d2\");\n\t\tassertThat(output.getContentType()).isEqualTo(\"text/plain\");\n\t}\n","date":"2018-10-11 03:40:11","endLine":85,"groupId":"1139","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadWithConfigurationPropertiesBindHandlerAdvisor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a1/4732066d34deae39b3e28bd5d916de46ebc433.src","preCode":"\tpublic void loadWithConfigurationPropertiesBindHandlerAdvisor() {\n\t\tload(WithConfigurationPropertiesBindHandlerAdvisor.class,\n\t\t\t\t\"foo.bar.default.content-type=text/plain\",\n\t\t\t\t\"foo.bar.bindings.input.destination=d1\",\n\t\t\t\t\"foo.bar.bindings.input.content-type=text/xml\",\n\t\t\t\t\"foo.bar.bindings.output.destination=d2\");\n\t\tBindingServiceProperties properties = this.context\n\t\t\t\t.getBean(BindingServiceProperties.class);\n\t\tBindingProperties input = properties.getBindings().get(\"input\");\n\t\tassertThat(input.getDestination()).isEqualTo(\"d1\");\n\t\tassertThat(input.getContentType()).isEqualTo(\"text/xml\");\n\t\tBindingProperties output = properties.getBindings().get(\"output\");\n\t\tassertThat(output.getDestination()).isEqualTo(\"d2\");\n\t\tassertThat(output.getContentType()).isEqualTo(\"text/plain\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindHandlerAdvisorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"33c2d245602722214809437e672c21536eeda8e5","commitMessage":"@@@Support ConfigurationProperties BindHandler advise\n\nAllow custom `BinderHandler` advise to be applied to the `Binder` used\nfor `@ConfigurationProperties`.  This mechanism has been added to allow\nSpring Cloud Stream to manipulate `Bindable` instances before binding\noccurs.\n\nNOTE: This commit introduces a breaking change to the `BindHandler`\ninterface since the `onStart` method now returns a `Bindable` rather\nthan a `boolean`.\n\nCloses gh-14745\n","date":"2018-10-11 03:40:11","modifiedFileCount":"6","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid loadWithoutConfigurationPropertiesBindHandlerAdvisor() {\n\t\tload(WithoutConfigurationPropertiesBindHandlerAdvisor.class, \"foo.bar.default.content-type=text/plain\",\n\t\t\t\t\"foo.bar.bindings.input.destination=d1\", \"foo.bar.bindings.input.content-type=text/xml\",\n\t\t\t\t\"foo.bar.bindings.output.destination=d2\");\n\t\tBindingServiceProperties properties = this.context.getBean(BindingServiceProperties.class);\n\t\tBindingProperties input = properties.getBindings().get(\"input\");\n\t\tassertThat(input.getDestination()).isEqualTo(\"d1\");\n\t\tassertThat(input.getContentType()).isEqualTo(\"text/xml\");\n\t\tBindingProperties output = properties.getBindings().get(\"output\");\n\t\tassertThat(output.getDestination()).isEqualTo(\"d2\");\n\t\tassertThat(output.getContentType()).isEqualTo(\"application/json\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":65,"groupId":"101271","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadWithoutConfigurationPropertiesBindHandlerAdvisor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bc/df73475cd45b36b1c77ec6e5ac193f5c466edf.src","preCode":"\tpublic void loadWithoutConfigurationPropertiesBindHandlerAdvisor() {\n\t\tload(WithoutConfigurationPropertiesBindHandlerAdvisor.class, \"foo.bar.default.content-type=text/plain\",\n\t\t\t\t\"foo.bar.bindings.input.destination=d1\", \"foo.bar.bindings.input.content-type=text/xml\",\n\t\t\t\t\"foo.bar.bindings.output.destination=d2\");\n\t\tBindingServiceProperties properties = this.context.getBean(BindingServiceProperties.class);\n\t\tBindingProperties input = properties.getBindings().get(\"input\");\n\t\tassertThat(input.getDestination()).isEqualTo(\"d1\");\n\t\tassertThat(input.getContentType()).isEqualTo(\"text/xml\");\n\t\tBindingProperties output = properties.getBindings().get(\"output\");\n\t\tassertThat(output.getDestination()).isEqualTo(\"d2\");\n\t\tassertThat(output.getContentType()).isEqualTo(\"application/json\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindHandlerAdvisorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid loadWithConfigurationPropertiesBindHandlerAdvisor() {\n\t\tload(WithConfigurationPropertiesBindHandlerAdvisor.class, \"foo.bar.default.content-type=text/plain\",\n\t\t\t\t\"foo.bar.bindings.input.destination=d1\", \"foo.bar.bindings.input.content-type=text/xml\",\n\t\t\t\t\"foo.bar.bindings.output.destination=d2\");\n\t\tBindingServiceProperties properties = this.context.getBean(BindingServiceProperties.class);\n\t\tBindingProperties input = properties.getBindings().get(\"input\");\n\t\tassertThat(input.getDestination()).isEqualTo(\"d1\");\n\t\tassertThat(input.getContentType()).isEqualTo(\"text/xml\");\n\t\tBindingProperties output = properties.getBindings().get(\"output\");\n\t\tassertThat(output.getDestination()).isEqualTo(\"d2\");\n\t\tassertThat(output.getContentType()).isEqualTo(\"text/plain\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":79,"groupId":"101271","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadWithConfigurationPropertiesBindHandlerAdvisor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bc/df73475cd45b36b1c77ec6e5ac193f5c466edf.src","preCode":"\tpublic void loadWithConfigurationPropertiesBindHandlerAdvisor() {\n\t\tload(WithConfigurationPropertiesBindHandlerAdvisor.class, \"foo.bar.default.content-type=text/plain\",\n\t\t\t\t\"foo.bar.bindings.input.destination=d1\", \"foo.bar.bindings.input.content-type=text/xml\",\n\t\t\t\t\"foo.bar.bindings.output.destination=d2\");\n\t\tBindingServiceProperties properties = this.context.getBean(BindingServiceProperties.class);\n\t\tBindingProperties input = properties.getBindings().get(\"input\");\n\t\tassertThat(input.getDestination()).isEqualTo(\"d1\");\n\t\tassertThat(input.getContentType()).isEqualTo(\"text/xml\");\n\t\tBindingProperties output = properties.getBindings().get(\"output\");\n\t\tassertThat(output.getDestination()).isEqualTo(\"d2\");\n\t\tassertThat(output.getContentType()).isEqualTo(\"text/plain\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindHandlerAdvisorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
