[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = WebClient.create(\"http://localhost:\" + specificPort).post()\n\t\t\t\t.uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2017-10-05 11:18:56","endLine":84,"groupId":"561","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2c/51c47c6f7323838d4b6825dcc9f45867efa2c7.src","preCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = WebClient.create(\"http://localhost:\" + specificPort).post()\n\t\t\t\t.uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\"))\n\t\t\t\t.isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2017-10-05 11:18:56","endLine":255,"groupId":"10422","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/779a44c49daf64ead469014da81e6f86fb0528.src","preCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\"))\n\t\t\t\t.isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-11-03 05:42:26","commitOrder":2,"curCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post()\n\t\t\t\t.uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2017-11-03 20:56:06","endLine":88,"groupId":"3364","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bd/6b0e30ba9beed311a8186d05052082529535b4.src","preCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = WebClient.create(\"http://localhost:\" + specificPort).post()\n\t\t\t\t.uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2017-10-05 07:38:18","commitOrder":2,"curCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\"))\n\t\t\t\t.isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2017-10-05 11:18:56","endLine":255,"groupId":"10422","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/779a44c49daf64ead469014da81e6f86fb0528.src","preCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\"))\n\t\t\t\t.isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"}],"commitId":"7f58db7d0e9084881f4171a9cc5ac4ae19647598","commitMessage":"@@@Apply TLS configuration to reactive web servers\n\nThis commit applies the SSL configuration to the following reactive web\nservers: Jetty.  Tomcat.  Undertow.  Reactor Netty.\n\nCloses gh-9431\n","date":"2017-11-03 20:56:06","modifiedFileCount":"10","status":"M","submitter":"Brian Clozel"},{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void specificPort() {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\")\n\t\t\t\t.contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2017-12-12 18:57:30","endLine":88,"groupId":"3364","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b9/d4cb5766de3f721eae4b697ebad597e2ff433c.src","preCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\")\n\t\t\t\t.contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2017-10-05 07:38:18","commitOrder":3,"curCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\"))\n\t\t\t\t.isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2017-10-05 11:18:56","endLine":255,"groupId":"10422","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/779a44c49daf64ead469014da81e6f86fb0528.src","preCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\"))\n\t\t\t\t.isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2018-12-20 23:30:51","commitOrder":4,"curCode":"\tpublic void specificPort() {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\")\n\t\t\t\t.contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2018-12-20 23:30:51","endLine":105,"groupId":"3364","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/efb072bf19178cd3bf5a868ea286c7a541560c.src","preCode":"\tpublic void specificPort() {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\")\n\t\t\t\t.contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2017-10-05 07:38:18","commitOrder":4,"curCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\"))\n\t\t\t\t.isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2017-10-05 11:18:56","endLine":255,"groupId":"10422","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/779a44c49daf64ead469014da81e6f86fb0528.src","preCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\"))\n\t\t\t\t.isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"}],"commitId":"9d2d6d5812d34b0bc04da3a124b9c5c0da511c04","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-20 23:30:51","modifiedFileCount":"22","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid specificPort() {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2019-06-07 19:25:54","endLine":104,"groupId":"3364","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a9/a739d292ccd3041f23b75eb257d34a1f1c2441.src","preCode":"\tpublic void specificPort() {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2019-06-07 19:25:54","endLine":255,"groupId":"10422","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3a/d43aa3647fe43b229f82a62bb32039d0be8f53.src","preCode":"\tpublic void specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-09-25 20:57:33","commitOrder":6,"curCode":"\tvoid specificPort() {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2019-09-25 20:57:33","endLine":101,"groupId":"3364","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/9a4beef872ac33577a12f400e9ea075125c2a1.src","preCode":"\tvoid specificPort() {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2019-06-07 19:25:54","endLine":255,"groupId":"10422","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3a/d43aa3647fe43b229f82a62bb32039d0be8f53.src","preCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"N"}],"commitId":"7548da1b400fe5feac6be7c8e094bfad2f7d5fee","commitMessage":"@@@Merge pull request #18349 from dreis2211\n\n* gh-18349:\n  Fix deprecation warnings caused by BodyInserters.fromObject\n\nCloses gh-18349\n","date":"2019-09-25 20:57:33","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-12-20 23:28:40","codes":[{"authorDate":"2019-12-20 23:28:40","commitOrder":7,"curCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2019-12-20 23:28:40","endLine":105,"groupId":"13629","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5e/fcd52c27bf10106b5907e6d3ea753ac46739a7.src","preCode":"\tvoid specificPort() {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-12-20 23:28:40","commitOrder":7,"curCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2019-12-20 23:28:40","endLine":259,"groupId":"12395","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ba/b8246d9357645b595347d992afa88a8588c68f.src","preCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n\t\tfactory.setPort(specificPort);\n\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"07857f7f24232f52a108d4f30e93a3aefd43814c","commitMessage":"@@@Merge branch '2.2.x'\n\nCloses gh-19418\n","date":"2019-12-20 23:28:40","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-12-20 23:28:40","codes":[{"authorDate":"2020-03-10 20:19:44","commitOrder":8,"curCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tMono<String> result = getWebClient(this.webServer.getPort()).build().post().uri(\"/test\")\n\t\t\t\t.contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2020-03-10 20:30:25","endLine":117,"groupId":"1964","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d7/7f79384cbd056d9fbb249e1ed285ffc2cf8bb6.src","preCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tMono<String> result = getWebClient().build().post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2019-12-20 23:28:40","commitOrder":8,"curCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2019-12-20 23:28:40","endLine":259,"groupId":"12395","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ba/b8246d9357645b595347d992afa88a8588c68f.src","preCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"N"}],"commitId":"b8cb61bbe09f26576a5d362b0e8e490444fedc95","commitMessage":"@@@Align embedded Jetty's graceful shutdown behaviour with standalone\n\nStandalone Jetty will.  by default.  include a Connection: close header\nin all responses once graceful shutdown has begun. Previously.  the\nway in which we were shutting Jetty down did not cause this to happen.\n\nThis commit updates JettyGracefulShutdown to shut down each connector.\nThis causes Jetty to send the Connection: close header.  aligning its\nbehaviour more closely with what it does when used standalone. The\ntests have also been updated to verify this behaviour and to ensure\nthat the correct port is used for requests even once the connector is\nno longer bound and the web server no longer knows its ephemeral port.\n\nSee gh-4657\n","date":"2020-03-10 20:30:25","modifiedFileCount":"10","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-12-20 23:28:40","codes":[{"authorDate":"2020-09-30 19:21:16","commitOrder":9,"curCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tMono<String> result = getWebClient(this.webServer.getPort()).build().post().uri(\"/test\")\n\t\t\t\t.contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromValue(\"Hello World\")).retrieve()\n\t\t\t\t.bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2020-09-30 19:46:57","endLine":118,"groupId":"101895","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/7ed7191ac2d8b055dd714c69dbf65005365e00.src","preCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tMono<String> result = getWebClient(this.webServer.getPort()).build().post().uri(\"/test\")\n\t\t\t\t.contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-12-20 23:28:40","commitOrder":9,"curCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","date":"2019-12-20 23:28:40","endLine":259,"groupId":"101895","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"specificPort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ba/b8246d9357645b595347d992afa88a8588c68f.src","preCode":"\tvoid specificPort() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tint specificPort = doWithRetry(() -> {\n\t\t\tint port = SocketUtils.findAvailableTcpPort(41000);\n\t\t\tfactory.setPort(port);\n\t\t\tthis.webServer = factory.getWebServer(exampleServletRegistration());\n\t\t\tthis.webServer.start();\n\t\t\treturn port;\n\t\t});\n\t\tassertThat(getResponse(\"http://localhost:\" + specificPort + \"/hello\")).isEqualTo(\"Hello World\");\n\t\tassertThat(this.webServer.getPort()).isEqualTo(specificPort);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"N"}],"commitId":"366fec33d06b6ab4ee4f1bc9513c07a227d207de","commitMessage":"@@@Adapt to API change in Spring Framework 5.3.0 snapshots\n\nSee gh-23534\n","date":"2020-09-30 19:46:57","modifiedFileCount":"9","status":"M","submitter":"Stephane Nicoll"}]
