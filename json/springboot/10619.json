[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void excludedWins() throws Exception {\n\t\tResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"*\"),\n\t\t\t\tArrays.asList(\"**/*.jar\"));\n\t\tList<MatchedResource> found = resourceMatcher\n\t\t\t\t.find(Arrays.asList(new File(\"src/test/resources\")));\n\t\tassertThat(found).areNot(new Condition<MatchedResource>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(MatchedResource value) {\n\t\t\t\treturn value.getFile().getName().equals(\"foo.jar\");\n\t\t\t}\n\n\t\t});\n\t}\n","date":"2017-10-05 11:18:56","endLine":78,"groupId":"12123","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"excludedWins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fe/1275cf5ec95196cb91837a30ea26d33a464e2a.src","preCode":"\tpublic void excludedWins() throws Exception {\n\t\tResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"*\"),\n\t\t\t\tArrays.asList(\"**/*.jar\"));\n\t\tList<MatchedResource> found = resourceMatcher\n\t\t\t\t.find(Arrays.asList(new File(\"src/test/resources\")));\n\t\tassertThat(found).areNot(new Condition<MatchedResource>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(MatchedResource value) {\n\t\t\t\treturn value.getFile().getName().equals(\"foo.jar\");\n\t\t\t}\n\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/archive/ResourceMatcherTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void jarFileAlwaysMatches() throws Exception {\n\t\tResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"*\"),\n\t\t\t\tArrays.asList(\"**/*.jar\"));\n\t\tList<MatchedResource> found = resourceMatcher\n\t\t\t\t.find(Arrays.asList(new File(\"src/test/resources/templates\"),\n\t\t\t\t\t\tnew File(\"src/test/resources/foo.jar\")));\n\t\tassertThat(found).areAtLeastOne(new Condition<MatchedResource>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(MatchedResource value) {\n\t\t\t\treturn value.getFile().getName().equals(\"foo.jar\") && value.isRoot();\n\t\t\t}\n\n\t\t});\n\t}\n","date":"2017-10-05 11:18:56","endLine":131,"groupId":"9520","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"jarFileAlwaysMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fe/1275cf5ec95196cb91837a30ea26d33a464e2a.src","preCode":"\tpublic void jarFileAlwaysMatches() throws Exception {\n\t\tResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"*\"),\n\t\t\t\tArrays.asList(\"**/*.jar\"));\n\t\tList<MatchedResource> found = resourceMatcher\n\t\t\t\t.find(Arrays.asList(new File(\"src/test/resources/templates\"),\n\t\t\t\t\t\tnew File(\"src/test/resources/foo.jar\")));\n\t\tassertThat(found).areAtLeastOne(new Condition<MatchedResource>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(MatchedResource value) {\n\t\t\t\treturn value.getFile().getName().equals(\"foo.jar\") && value.isRoot();\n\t\t\t}\n\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/archive/ResourceMatcherTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid excludedWins() throws Exception {\n\t\tResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"*\"), Arrays.asList(\"**/*.jar\"));\n\t\tList<MatchedResource> found = resourceMatcher.find(Arrays.asList(new File(\"src/test/resources\")));\n\t\tassertThat(found).areNot(new Condition<MatchedResource>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(MatchedResource value) {\n\t\t\t\treturn value.getFile().getName().equals(\"foo.jar\");\n\t\t\t}\n\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":71,"groupId":"10619","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"excludedWins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3b/53eb236af28caeb28c6608eb02ce449d839c52.src","preCode":"\tpublic void excludedWins() throws Exception {\n\t\tResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"*\"), Arrays.asList(\"**/*.jar\"));\n\t\tList<MatchedResource> found = resourceMatcher.find(Arrays.asList(new File(\"src/test/resources\")));\n\t\tassertThat(found).areNot(new Condition<MatchedResource>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(MatchedResource value) {\n\t\t\t\treturn value.getFile().getName().equals(\"foo.jar\");\n\t\t\t}\n\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/archive/ResourceMatcherTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid jarFileAlwaysMatches() throws Exception {\n\t\tResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"*\"), Arrays.asList(\"**/*.jar\"));\n\t\tList<MatchedResource> found = resourceMatcher\n\t\t\t\t.find(Arrays.asList(new File(\"src/test/resources/templates\"), new File(\"src/test/resources/foo.jar\")));\n\t\tassertThat(found).areAtLeastOne(new Condition<MatchedResource>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(MatchedResource value) {\n\t\t\t\treturn value.getFile().getName().equals(\"foo.jar\") && value.isRoot();\n\t\t\t}\n\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":116,"groupId":"10619","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"jarFileAlwaysMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3b/53eb236af28caeb28c6608eb02ce449d839c52.src","preCode":"\tpublic void jarFileAlwaysMatches() throws Exception {\n\t\tResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList(\"*\"), Arrays.asList(\"**/*.jar\"));\n\t\tList<MatchedResource> found = resourceMatcher\n\t\t\t\t.find(Arrays.asList(new File(\"src/test/resources/templates\"), new File(\"src/test/resources/foo.jar\")));\n\t\tassertThat(found).areAtLeastOne(new Condition<MatchedResource>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(MatchedResource value) {\n\t\t\t\treturn value.getFile().getName().equals(\"foo.jar\") && value.isRoot();\n\t\t\t}\n\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/archive/ResourceMatcherTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
