[{"authorTime":"2020-08-21 08:26:01","codes":[{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","date":"2020-08-21 12:49:03","endLine":181,"groupId":"10164","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBinder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/52/42572bf158ed16f03b782ff30b1cfaf5bd0590.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"MB"},{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapRegistry()).isSameAs(this.bootstrapRegistry);\n\t}\n","date":"2020-08-21 12:49:03","endLine":229,"groupId":"10164","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/52/42572bf158ed16f03b782ff30b1cfaf5bd0590.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapRegistry()).isSameAs(this.bootstrapRegistry);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"}],"commitId":"d123c924a0e1fbe6b4e8f27baf98b5bfd1a64a86","commitMessage":"@@@Add BootstrapRegisty support for config data\n\nExpose the `BootstrapRegisty` to both `ConfigDataLocationResolver` and\n`ConfigDataLoader` implementations. The registry is exposed via the\ncontext interfaces and may be used to reuse instances that are expensive\nto create. It may also be used to ultimately register beans with the\n`ApplicationContext`.\n\nCloses gh-22956\n","date":"2020-08-21 12:49:03","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-09-17 15:09:41","codes":[{"authorDate":"2020-09-17 15:09:41","commitOrder":3,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","date":"2020-09-17 15:31:00","endLine":182,"groupId":"15417","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBinder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/32/25b68ecc8bebd82d588ca305422b1c761a3af5.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2020-09-17 15:09:41","commitOrder":3,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","date":"2020-09-17 15:31:00","endLine":230,"groupId":"15417","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/32/25b68ecc8bebd82d588ca305422b1c761a3af5.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapRegistry()).isSameAs(this.bootstrapRegistry);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"1ae14362110360cc558bcd498fa67f70a35b8373","commitMessage":"@@@Refactor BootstrapRegistry support\n\nRefactor `BootstrapRegistry` support following initial prototype work\nwith the Spring Cloud team.\n\nThis update splits the `BootstrapRegistry` API into `BootstrapRegistry`. \n`BootstrapContext` and  `ConfigurableBootstrapContext` interfaces and\nmoves it to the same package as `SpringApplication`.\n\nA new `Bootstrapper` interface has been introduced that can be added\nto the `SpringApplication` to customize the `BootstrapRegistry` before\nit's used.\n\nCloses gh-23326\n","date":"2020-09-17 15:31:00","modifiedFileCount":"40","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-10-14 05:43:34","codes":[{"authorDate":"2020-10-14 05:43:34","commitOrder":4,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResource, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataResource(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","date":"2020-10-16 02:33:57","endLine":184,"groupId":"12355","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBinder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/df/bc888a083825fdeeb20473fb6e17a4ac7cde20.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2020-10-14 05:43:34","commitOrder":4,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResource, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataResource(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","date":"2020-10-16 02:33:57","endLine":231,"groupId":"12355","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/df/bc888a083825fdeeb20473fb6e17a4ac7cde20.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<String> locations = Arrays.asList(\"testimport\");\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataLocation, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataLocation(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(\"testimport\");\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"}],"commitId":"1cf9fc107e5ed29a44935688eaca2bf6fa85108b","commitMessage":"@@@Improve ConfigData processing code\n\nRefactor `ConfigData` processing code to make it less awkward to\nfollow.\n\nPrior to this commit the `ConfigDataLocationResolver` would take a\nString location and return a `ConfigDataLocation` instance. This was\na little confusing since sometimes we would refer to `location` as the\nString value.  and sometimes it would be the typed instance. We also\nhad nowhere sensible to put the `optional:` prefix logic and we needed\nto pass a `boolean` parameter to a number of methods. The recently\nintroduced `Orgin` support also didn't have a good home.\n\nTo solve this.  `ConfigDataLocation` has been renamed to\n`ConfigDataResource`. This frees up `ConfigDataLocation` to be used\nas a richer `location` type that holds the String value.  the `Orgin`\nand provides a home for the `optional:` logic.\n\nThis commit also cleans up a few other areas of the code.  including\nrenaming `ResourceConfigData...` to `StandardConfigData...`. It also\nintroduces a new exception hierarchy for `ConfigDataNotFoundExceptions`.\n\nCloses gh-23711\n","date":"2020-10-16 02:33:57","modifiedFileCount":"41","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-12-02 09:35:04","codes":[{"authorDate":"2020-12-02 09:35:04","commitOrder":5,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\")),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","date":"2020-12-02 13:33:59","endLine":188,"groupId":"7761","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBinder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c6/c430ecda06f4a8a42a9bb0d290a066947432af.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResource, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataResource(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2020-12-02 09:35:04","commitOrder":5,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\")),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","date":"2020-12-02 13:33:59","endLine":238,"groupId":"7761","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c6/c430ecda06f4a8a42a9bb0d290a066947432af.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResource, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new TestConfigDataResource(\"a'\"), new ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"3dc03ac2752a06e015fc8ae7a6eba483b2cc863e","commitMessage":"@@@Refine non-optional classpath location checking\n\nUpdate `StandardConfigDataLocationResolver` to no longer check if\ndirectories exist for classpath resources. Unfortunately checking for\nthe parent directory of a `ClassPathResource` isn't always possible\nwithout resorting something similar to the\n`PathMatchingResourcePatternResolver` which would add a lot of\ncomplexity to the resolver.\n\nIn order to ensure that non-optional locations are always resolved. \nthe `ConfigDataEnvironment` now checks that all imported locations\nhave been loaded.\n\nCloses gh-24143\n","date":"2020-12-02 13:33:59","modifiedFileCount":"9","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-01-13 03:49:15","codes":[{"authorDate":"2021-01-13 03:49:15","commitOrder":6,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","date":"2021-01-13 03:49:15","endLine":188,"groupId":"2926","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBinder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/54/ca2020c003fc1900ed56dadcb04949a6912da9.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\")),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2021-01-13 03:49:15","commitOrder":6,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","date":"2021-01-13 03:49:15","endLine":238,"groupId":"2926","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/54/ca2020c003fc1900ed56dadcb04949a6912da9.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\")),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"48e00fc7f4283f4a2b0277f1304386621d8bc5f0","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-24793\n","date":"2021-01-13 03:49:15","modifiedFileCount":"14","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-06-04 13:24:17","codes":[{"authorDate":"2021-06-04 13:24:17","commitOrder":7,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations), anyBoolean()))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any(), anyBoolean());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","date":"2021-06-04 13:24:17","endLine":191,"groupId":"15452","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBinder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3c/08c41f59d01846290c1f05e4b34e794c9a58e6.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2021-06-04 13:24:17","commitOrder":7,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations), anyBoolean()))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any(), anyBoolean());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","date":"2021-06-04 13:24:17","endLine":242,"groupId":"15452","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3c/08c41f59d01846290c1f05e4b34e794c9a58e6.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"e73062aefa622781ee8bcb490f513c1fc8068d62","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-26755\n","date":"2021-06-04 13:24:17","modifiedFileCount":"8","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-06-22 09:37:43","codes":[{"authorDate":"2021-06-22 09:37:43","commitOrder":8,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","date":"2021-06-22 09:37:43","endLine":190,"groupId":"101695","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBinder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f0/280d7047247007c5a1aaa0958aa4d008051a9f.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBinder() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations), anyBoolean()))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any(), anyBoolean());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBinder().bind(\"test\", String.class).get()).isEqualTo(\"springboot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2021-06-22 09:37:43","commitOrder":8,"curCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations)))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","date":"2021-06-22 09:37:43","endLine":240,"groupId":"101695","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f0/280d7047247007c5a1aaa0958aa4d008051a9f.src","preCode":"\tvoid withProcessedImportsProvidesLocationResolverContextWithAccessToBootstrapRegistry() {\n\t\tMockPropertySource existingPropertySource = new MockPropertySource();\n\t\texistingPropertySource.setProperty(\"test\", \"springboot\");\n\t\tConfigDataEnvironmentContributor existingContributor = ConfigDataEnvironmentContributor\n\t\t\t\t.ofExisting(existingPropertySource);\n\t\tthis.importer = mock(ConfigDataImporter.class);\n\t\tList<ConfigDataLocation> locations = Arrays.asList(LOCATION_1);\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tMap<ConfigDataResolutionResult, ConfigData> imported = new LinkedHashMap<>();\n\t\timported.put(new ConfigDataResolutionResult(LOCATION_1, new TestConfigDataResource(\"a'\"), false),\n\t\t\t\tnew ConfigData(Arrays.asList(propertySource)));\n\t\tgiven(this.importer.resolveAndLoad(eq(this.activationContext), any(), any(), eq(locations), anyBoolean()))\n\t\t\t\t.willReturn(imported);\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1);\n\t\tConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,\n\t\t\t\tthis.bootstrapContext, Arrays.asList(existingContributor, contributor));\n\t\tcontributors.withProcessedImports(this.importer, this.activationContext);\n\t\tverify(this.importer).resolveAndLoad(any(), this.locationResolverContext.capture(), any(), any(), anyBoolean());\n\t\tConfigDataLocationResolverContext context = this.locationResolverContext.getValue();\n\t\tassertThat(context.getBootstrapContext()).isSameAs(this.bootstrapContext);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorsTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"86dc156162f544053ec5c8575881a3c24dc78084","commitMessage":"@@@Merge branch '2.5.x'\n\nCloses gh-27006\n","date":"2021-06-22 09:37:43","modifiedFileCount":"7","status":"M","submitter":"Phillip Webb"}]
