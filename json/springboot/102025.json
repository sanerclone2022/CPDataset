[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void defaultServletConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory()\n\t\t\t\t\t\t.getMetadataReader(DefaultConfigurationServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationServlet.class.getName());\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean\n\t\t\t\t.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\")))\n\t\t\t\t.isEmpty();\n\t\tassertThat((Integer) propertyValues.get(\"loadOnStartup\")).isEqualTo(-1);\n\t\tassertThat(propertyValues.get(\"name\"))\n\t\t\t\t.isEqualTo(DefaultConfigurationServlet.class.getName());\n\t\tassertThat((String[]) propertyValues.get(\"urlMappings\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"servlet\")).isEqualTo(scanned);\n\t}\n","date":"2017-10-05 11:18:56","endLine":71,"groupId":"1228","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultServletConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/69/92b1237360452fde124f7cce8382517a2f4440.src","preCode":"\tpublic void defaultServletConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory()\n\t\t\t\t\t\t.getMetadataReader(DefaultConfigurationServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationServlet.class.getName());\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean\n\t\t\t\t.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\")))\n\t\t\t\t.isEmpty();\n\t\tassertThat((Integer) propertyValues.get(\"loadOnStartup\")).isEqualTo(-1);\n\t\tassertThat(propertyValues.get(\"name\"))\n\t\t\t\t.isEqualTo(DefaultConfigurationServlet.class.getName());\n\t\tassertThat((String[]) propertyValues.get(\"urlMappings\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"servlet\")).isEqualTo(scanned);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebServletHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void servletWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory()\n\t\t\t\t\t\t.getMetadataReader(CustomNameServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean\n\t\t\t\t.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","date":"2017-10-05 11:18:56","endLine":84,"groupId":"1229","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"servletWithCustomName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/69/92b1237360452fde124f7cce8382517a2f4440.src","preCode":"\tpublic void servletWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory()\n\t\t\t\t\t\t.getMetadataReader(CustomNameServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean\n\t\t\t\t.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebServletHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid defaultServletConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(DefaultConfigurationServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationServlet.class.getName());\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((Integer) propertyValues.get(\"loadOnStartup\")).isEqualTo(-1);\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationServlet.class.getName());\n\t\tassertThat((String[]) propertyValues.get(\"urlMappings\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"servlet\")).isEqualTo(scanned);\n\t}\n","date":"2019-06-07 19:25:54","endLine":63,"groupId":"1228","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultServletConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/42/df4f0d10cc8cb7707f93c8ce78a83c35215fa8.src","preCode":"\tpublic void defaultServletConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(DefaultConfigurationServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationServlet.class.getName());\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((Integer) propertyValues.get(\"loadOnStartup\")).isEqualTo(-1);\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationServlet.class.getName());\n\t\tassertThat((String[]) propertyValues.get(\"urlMappings\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"servlet\")).isEqualTo(scanned);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebServletHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid servletWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(CustomNameServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":73,"groupId":"1229","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"servletWithCustomName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/42/df4f0d10cc8cb7707f93c8ce78a83c35215fa8.src","preCode":"\tpublic void servletWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(CustomNameServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebServletHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-11-07 17:33:11","codes":[{"authorDate":"2019-11-07 17:33:11","commitOrder":3,"curCode":"\tvoid defaultServletConfiguration() throws IOException {\n\t\tAnnotatedBeanDefinition servletdefinition = createBeanDefinition(DefaultConfigurationServlet.class);\n\t\tthis.handler.handle(servletdefinition, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationServlet.class.getName());\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((Integer) propertyValues.get(\"loadOnStartup\")).isEqualTo(-1);\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationServlet.class.getName());\n\t\tassertThat((String[]) propertyValues.get(\"urlMappings\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"servlet\")).isEqualTo(servletdefinition);\n\t}\n","date":"2019-11-07 17:33:11","endLine":64,"groupId":"1228","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultServletConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/10/a1a1e99ffc3eb8daaf41b999231ddb58c36a27.src","preCode":"\tvoid defaultServletConfiguration() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(DefaultConfigurationServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationServlet.class.getName());\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((Integer) propertyValues.get(\"loadOnStartup\")).isEqualTo(-1);\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationServlet.class.getName());\n\t\tassertThat((String[]) propertyValues.get(\"urlMappings\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"servlet\")).isEqualTo(scanned);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebServletHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-11-07 17:33:11","commitOrder":3,"curCode":"\tvoid servletWithCustomName() throws IOException {\n\t\tAnnotatedBeanDefinition definition = createBeanDefinition(CustomNameServlet.class);\n\t\tthis.handler.handle(definition, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","date":"2019-11-07 17:33:11","endLine":73,"groupId":"1229","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"servletWithCustomName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/10/a1a1e99ffc3eb8daaf41b999231ddb58c36a27.src","preCode":"\tvoid servletWithCustomName() throws IOException {\n\t\tScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(CustomNameServlet.class.getName()));\n\t\tthis.handler.handle(scanned, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebServletHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"dd4377e69c2c4b4ae277590fc43424af9524cf8d","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-18912\n","date":"2019-11-07 17:33:11","modifiedFileCount":"9","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-11-07 17:33:11","codes":[{"authorDate":"2020-04-25 14:56:57","commitOrder":4,"curCode":"\tvoid defaultServletConfiguration() throws IOException {\n\t\tAnnotatedBeanDefinition servletDefinition = createBeanDefinition(DefaultConfigurationServlet.class);\n\t\tthis.handler.handle(servletDefinition, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationServlet.class.getName());\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((Integer) propertyValues.get(\"loadOnStartup\")).isEqualTo(-1);\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationServlet.class.getName());\n\t\tassertThat((String[]) propertyValues.get(\"urlMappings\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"servlet\")).isEqualTo(servletDefinition);\n\t}\n","date":"2020-04-25 14:56:57","endLine":64,"groupId":"102025","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultServletConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/78/17a4471d7a0ae20b4dfe6e19a4ba4618def843.src","preCode":"\tvoid defaultServletConfiguration() throws IOException {\n\t\tAnnotatedBeanDefinition servletdefinition = createBeanDefinition(DefaultConfigurationServlet.class);\n\t\tthis.handler.handle(servletdefinition, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry\n\t\t\t\t.getBeanDefinition(DefaultConfigurationServlet.class.getName());\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"asyncSupported\")).isEqualTo(false);\n\t\tassertThat(((Map<String, String>) propertyValues.get(\"initParameters\"))).isEmpty();\n\t\tassertThat((Integer) propertyValues.get(\"loadOnStartup\")).isEqualTo(-1);\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(DefaultConfigurationServlet.class.getName());\n\t\tassertThat((String[]) propertyValues.get(\"urlMappings\")).isEmpty();\n\t\tassertThat(propertyValues.get(\"servlet\")).isEqualTo(servletdefinition);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebServletHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-11-07 17:33:11","commitOrder":4,"curCode":"\tvoid servletWithCustomName() throws IOException {\n\t\tAnnotatedBeanDefinition definition = createBeanDefinition(CustomNameServlet.class);\n\t\tthis.handler.handle(definition, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","date":"2019-11-07 17:33:11","endLine":73,"groupId":"102025","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"servletWithCustomName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/10/a1a1e99ffc3eb8daaf41b999231ddb58c36a27.src","preCode":"\tvoid servletWithCustomName() throws IOException {\n\t\tAnnotatedBeanDefinition definition = createBeanDefinition(CustomNameServlet.class);\n\t\tthis.handler.handle(definition, this.registry);\n\t\tBeanDefinition servletRegistrationBean = this.registry.getBeanDefinition(\"custom\");\n\t\tMutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues();\n\t\tassertThat(propertyValues.get(\"name\")).isEqualTo(\"custom\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/WebServletHandlerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"3907fb9e0258bc21cadfca905c21c5482d69f798","commitMessage":"@@@Merge pull request #21009 from dreis2211\n\n* pr/21009:\n  Update copyright year of changed file\n  Polish\n\nCloses gh-21009\n","date":"2020-04-25 14:56:57","modifiedFileCount":"33","status":"M","submitter":"Stephane Nicoll"}]
