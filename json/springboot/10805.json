[{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnFalse() throws Exception {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tSecurityResponse response = this.interceptor\n\t\t\t\t.preHandle(this.request, \"/a\");\n\t\tassertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t}\n","date":"2017-11-03 09:00:55","endLine":122,"groupId":"1671","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenAccessIsNotAllowedShouldReturnFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/5cab8282a2a64f01452e9f5c24071ef6610527.src","preCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnFalse() throws Exception {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tSecurityResponse response = this.interceptor\n\t\t\t\t.preHandle(this.request, \"/a\");\n\t\tassertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"},{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void preHandleSuccessfulWithFullAccess() throws Exception {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.FULL);\n\t\tSecurityResponse response = this.interceptor\n\t\t\t\t.preHandle(this.request, \"/a\");\n\t\tArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass(Token.class);\n\t\tverify(this.tokenValidator).validate(tokenArgumentCaptor.capture());\n\t\tToken token = tokenArgumentCaptor.getValue();\n\t\tassertThat(token.toString()).isEqualTo(accessToken);\n\t\tassertThat(response.getStatus()).isEqualTo(HttpStatus.OK);\n\t\tassertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\"))\n\t\t\t\t.isEqualTo(AccessLevel.FULL);\n\t}\n","date":"2017-11-03 09:00:55","endLine":139,"groupId":"5100","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleSuccessfulWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/5cab8282a2a64f01452e9f5c24071ef6610527.src","preCode":"\tpublic void preHandleSuccessfulWithFullAccess() throws Exception {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.FULL);\n\t\tSecurityResponse response = this.interceptor\n\t\t\t\t.preHandle(this.request, \"/a\");\n\t\tArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass(Token.class);\n\t\tverify(this.tokenValidator).validate(tokenArgumentCaptor.capture());\n\t\tToken token = tokenArgumentCaptor.getValue();\n\t\tassertThat(token.toString()).isEqualTo(accessToken);\n\t\tassertThat(response.getStatus()).isEqualTo(HttpStatus.OK);\n\t\tassertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\"))\n\t\t\t\t.isEqualTo(AccessLevel.FULL);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"}],"commitId":"d50fe8874fa442cbd3ea380754e7b412a77aed9a","commitMessage":"@@@Add CF support for reactive actuators\n\nCloses gh-10780\n","date":"2017-11-03 09:00:55","modifiedFileCount":"5","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnFalse() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, \"/a\");\n\t\tassertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t}\n","date":"2017-12-12 18:57:30","endLine":115,"groupId":"1671","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenAccessIsNotAllowedShouldReturnFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d1/b4da936da123b02344b5372e731798e2cbd518.src","preCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnFalse() throws Exception {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, \"/a\");\n\t\tassertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void preHandleSuccessfulWithFullAccess() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.FULL);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, \"/a\");\n\t\tArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass(Token.class);\n\t\tverify(this.tokenValidator).validate(tokenArgumentCaptor.capture());\n\t\tToken token = tokenArgumentCaptor.getValue();\n\t\tassertThat(token.toString()).isEqualTo(accessToken);\n\t\tassertThat(response.getStatus()).isEqualTo(HttpStatus.OK);\n\t\tassertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\"))\n\t\t\t\t.isEqualTo(AccessLevel.FULL);\n\t}\n","date":"2017-12-12 18:57:30","endLine":131,"groupId":"5100","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleSuccessfulWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d1/b4da936da123b02344b5372e731798e2cbd518.src","preCode":"\tpublic void preHandleSuccessfulWithFullAccess() throws Exception {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.FULL);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, \"/a\");\n\t\tArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass(Token.class);\n\t\tverify(this.tokenValidator).validate(tokenArgumentCaptor.capture());\n\t\tToken token = tokenArgumentCaptor.getValue();\n\t\tassertThat(token.toString()).isEqualTo(accessToken);\n\t\tassertThat(response.getStatus()).isEqualTo(HttpStatus.OK);\n\t\tassertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\"))\n\t\t\t\t.isEqualTo(AccessLevel.FULL);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":3,"curCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnFalse() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request,\n\t\t\t\tEndpointId.of(\"test\"));\n\t\tassertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t}\n","date":"2018-10-15 04:53:28","endLine":122,"groupId":"1671","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenAccessIsNotAllowedShouldReturnFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d4/3668c5e8c401a62ca82fb6ff85849c1cda3158.src","preCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnFalse() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.RESTRICTED);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, \"/a\");\n\t\tassertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2018-10-15 04:53:28","commitOrder":3,"curCode":"\tpublic void preHandleSuccessfulWithFullAccess() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.FULL);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request,\n\t\t\t\tEndpointId.of(\"test\"));\n\t\tArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass(Token.class);\n\t\tverify(this.tokenValidator).validate(tokenArgumentCaptor.capture());\n\t\tToken token = tokenArgumentCaptor.getValue();\n\t\tassertThat(token.toString()).isEqualTo(accessToken);\n\t\tassertThat(response.getStatus()).isEqualTo(HttpStatus.OK);\n\t\tassertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\"))\n\t\t\t\t.isEqualTo(AccessLevel.FULL);\n\t}\n","date":"2018-10-15 04:53:28","endLine":139,"groupId":"5100","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleSuccessfulWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d4/3668c5e8c401a62ca82fb6ff85849c1cda3158.src","preCode":"\tpublic void preHandleSuccessfulWithFullAccess() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\"))\n\t\t\t\t.willReturn(AccessLevel.FULL);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, \"/a\");\n\t\tArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass(Token.class);\n\t\tverify(this.tokenValidator).validate(tokenArgumentCaptor.capture());\n\t\tToken token = tokenArgumentCaptor.getValue();\n\t\tassertThat(token.toString()).isEqualTo(accessToken);\n\t\tassertThat(response.getStatus()).isEqualTo(HttpStatus.OK);\n\t\tassertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\"))\n\t\t\t\t.isEqualTo(AccessLevel.FULL);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid preHandleWhenAccessIsNotAllowedShouldReturnFalse() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\")).willReturn(AccessLevel.RESTRICTED);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, EndpointId.of(\"test\"));\n\t\tassertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t}\n","date":"2019-06-07 19:25:54","endLine":108,"groupId":"10805","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenAccessIsNotAllowedShouldReturnFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6c/660f86b978ece38d6c12d2ba8fb16168ee2cb9.src","preCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnFalse() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\")).willReturn(AccessLevel.RESTRICTED);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, EndpointId.of(\"test\"));\n\t\tassertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid preHandleSuccessfulWithFullAccess() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\")).willReturn(AccessLevel.FULL);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, EndpointId.of(\"test\"));\n\t\tArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass(Token.class);\n\t\tverify(this.tokenValidator).validate(tokenArgumentCaptor.capture());\n\t\tToken token = tokenArgumentCaptor.getValue();\n\t\tassertThat(token.toString()).isEqualTo(accessToken);\n\t\tassertThat(response.getStatus()).isEqualTo(HttpStatus.OK);\n\t\tassertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\")).isEqualTo(AccessLevel.FULL);\n\t}\n","date":"2019-06-07 19:25:54","endLine":122,"groupId":"10805","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleSuccessfulWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6c/660f86b978ece38d6c12d2ba8fb16168ee2cb9.src","preCode":"\tpublic void preHandleSuccessfulWithFullAccess() {\n\t\tString accessToken = mockAccessToken();\n\t\tthis.request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n\t\tgiven(this.securityService.getAccessLevel(accessToken, \"my-app-id\")).willReturn(AccessLevel.FULL);\n\t\tSecurityResponse response = this.interceptor.preHandle(this.request, EndpointId.of(\"test\"));\n\t\tArgumentCaptor<Token> tokenArgumentCaptor = ArgumentCaptor.forClass(Token.class);\n\t\tverify(this.tokenValidator).validate(tokenArgumentCaptor.capture());\n\t\tToken token = tokenArgumentCaptor.getValue();\n\t\tassertThat(token.toString()).isEqualTo(accessToken);\n\t\tassertThat(response.getStatus()).isEqualTo(HttpStatus.OK);\n\t\tassertThat(this.request.getAttribute(\"cloudFoundryAccessLevel\")).isEqualTo(AccessLevel.FULL);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
