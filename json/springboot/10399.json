[{"authorTime":"2018-01-10 12:57:10","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":1,"curCode":"\tpublic void getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<String, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(\"test\"));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpointSubclass.class, \"updateWithMoreArguments\", String.class,\n\t\t\t\t\tString.class, String.class));\n\t\t});\n\t}\n","date":"2018-01-20 12:44:24","endLine":138,"groupId":"4516","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d7/90e83d94b6897d425faffb6b5c52ade06b89e6.src","preCode":"\tpublic void getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<String, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(\"test\"));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpointSubclass.class, \"updateWithMoreArguments\", String.class,\n\t\t\t\t\tString.class, String.class));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2018-01-10 12:57:10","commitOrder":1,"curCode":"\tpublic void getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tString id = endpoint.getId();\n\t\t\t\treturn !id.equals(\"specialized\");\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(\n\t\t\t\t\tcontext, Collections.singleton(filter));\n\t\t\tMap<String, SpecializedExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t});\n\t}\n","date":"2018-01-20 12:44:24","endLine":249,"groupId":"2262","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldApplyFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d7/90e83d94b6897d425faffb6b5c52ade06b89e6.src","preCode":"\tpublic void getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tString id = endpoint.getId();\n\t\t\t\treturn !id.equals(\"specialized\");\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(\n\t\t\t\t\tcontext, Collections.singleton(filter));\n\t\t\tMap<String, SpecializedExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"}],"commitId":"1d39feffeabf4b94e3f900b941b58e0443d5887a","commitMessage":"@@@Overhaul actuator endpoint code\n\nRefactor several areas of the actuator endpoint code in order to make\nfuture extensions easier. The primary goal is to introduce the concept\nof an `ExposableEndpoint` that has technology specific subclasses and\ncan carry additional data for filters to use. Many other changes have\nbeen made along the way including:\n\n* A new EndpointSupplier interface that allows cleaner separation of\n  supplying vs discovering endpoints. This allows cleaner class names\n  and allows for better auto-configuration since a user can choose to\n  provide their own supplier entirely.\n\n* A `DiscoveredEndpoint` interface that allows the `EndpointFilter`\n  to be greatly simplified. A filter now doesn't need to know about\n  discovery concerns unless absolutely necessary.\n\n* Improved naming and package structure. Many technology specific\n  concerns are now grouped in a better way. Related concerns are\n  co-located and concepts from one area no longer leakage into another.\n\n* Simplified `HandlerMapping` implementations. Many common concerns have\n  been pulled up helping to create simpler subclasses.\n\n* Simplified JMX adapters. Many of the intermediary `Info` classes have\n  been removed. The `DiscoveredJmxOperation` is now responsible for\n  mapping methods to operations.\n\n* A specific @`HealthEndpointCloudFoundryExtension` for Cloud Foundry.\n  The extension logic used to create a \"full\" health endpoint extension\n  has been made explicit.\n\nFixes gh-11428\nFixes gh-11581\n","date":"2018-01-20 12:44:24","modifiedFileCount":"63","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpointSubclass.class, \"updateWithMoreArguments\", String.class,\n\t\t\t\t\tString.class, String.class));\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":140,"groupId":"12017","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a2/6a0773ab3d9d56fb0e28bd6fd2519c7b3c1c78.src","preCode":"\tpublic void getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<String, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(\"test\"));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpointSubclass.class, \"updateWithMoreArguments\", String.class,\n\t\t\t\t\tString.class, String.class));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tString id = endpoint.getId();\n\t\t\t\treturn !id.equals(\"specialized\");\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(\n\t\t\t\t\tcontext, Collections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":275,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldApplyFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a2/6a0773ab3d9d56fb0e28bd6fd2519c7b3c1c78.src","preCode":"\tpublic void getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tString id = endpoint.getId();\n\t\t\t\treturn !id.equals(\"specialized\");\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(\n\t\t\t\t\tcontext, Collections.singleton(filter));\n\t\t\tMap<String, SpecializedExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-10-15 04:40:19","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":3,"curCode":"\tpublic void getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpointSubclass.class, \"updateWithMoreArguments\", String.class,\n\t\t\t\t\tString.class, String.class));\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":140,"groupId":"12017","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a2/6a0773ab3d9d56fb0e28bd6fd2519c7b3c1c78.src","preCode":"\tpublic void getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(\n\t\t\t\t\tTestEndpointSubclass.class, \"updateWithMoreArguments\", String.class,\n\t\t\t\t\tString.class, String.class));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"},{"authorDate":"2018-10-15 04:40:19","commitOrder":3,"curCode":"\tpublic void getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tEndpointId id = endpoint.getEndpointId();\n\t\t\t\treturn !id.equals(EndpointId.of(\"specialized\"));\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(\n\t\t\t\t\tcontext, Collections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","date":"2018-10-15 04:55:13","endLine":275,"groupId":"8966","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldApplyFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a4/65f180bcbc9e1ac56b1b6949d32f13e414fdc0.src","preCode":"\tpublic void getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tString id = endpoint.getId();\n\t\t\t\treturn !id.equals(\"specialized\");\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(\n\t\t\t\t\tcontext, Collections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"18319ac2768688cb4ae22987622e64bf5325f432","commitMessage":"@@@Remove deprecated Endpoint ID methods\n\nSee gh-14773\n","date":"2018-10-15 04:55:13","modifiedFileCount":"18","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of(\"test\")));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(TestEndpointSubclass.class,\n\t\t\t\t\t\"updateWithMoreArguments\", String.class, String.class, String.class));\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":134,"groupId":"12017","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/5734d8be02a5dd04ae88742b6ec518a0917dbe.src","preCode":"\tpublic void getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of(\"test\")));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(TestEndpointSubclass.class,\n\t\t\t\t\t\"updateWithMoreArguments\", String.class, String.class, String.class));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tEndpointId id = endpoint.getEndpointId();\n\t\t\t\treturn !id.equals(EndpointId.of(\"specialized\"));\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context,\n\t\t\t\t\tCollections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":251,"groupId":"8966","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldApplyFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/5734d8be02a5dd04ae88742b6ec518a0917dbe.src","preCode":"\tpublic void getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tEndpointId id = endpoint.getEndpointId();\n\t\t\t\treturn !id.equals(EndpointId.of(\"specialized\"));\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context,\n\t\t\t\t\tCollections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-11-05 19:05:51","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of(\"test\")));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(TestEndpointSubclass.class,\n\t\t\t\t\t\"updateWithMoreArguments\", String.class, String.class, String.class));\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":134,"groupId":"10399","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/5734d8be02a5dd04ae88742b6ec518a0917dbe.src","preCode":"\tvoid getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {\n\t\tload(TestEndpointSubclassConfiguration.class, (context) -> {\n\t\t\tTestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context);\n\t\t\tMap<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of(\"test\")));\n\t\t\tassertThat(operations).hasSize(5);\n\t\t\tassertThat(operations).containsKeys(testEndpointMethods());\n\t\t\tassertThat(operations).containsKeys(ReflectionUtils.findMethod(TestEndpointSubclass.class,\n\t\t\t\t\t\"updateWithMoreArguments\", String.class, String.class, String.class));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"N"},{"authorDate":"2019-11-05 19:05:51","commitOrder":5,"curCode":"\tvoid getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tEndpointId id = endpoint.getEndpointId();\n\t\t\t\treturn !id.equals(EndpointId.of(\"specialized\")) && !id.equals(EndpointId.of(\"specialized-superclass\"));\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context,\n\t\t\t\t\tCollections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","date":"2019-11-05 19:05:51","endLine":263,"groupId":"10399","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldApplyFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/53/8b002c4c971048189cb66cd9410f18a18d0b0b.src","preCode":"\tvoid getEndpointsShouldApplyFilters() {\n\t\tload(SpecializedEndpointsConfiguration.class, (context) -> {\n\t\t\tEndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {\n\t\t\t\tEndpointId id = endpoint.getEndpointId();\n\t\t\t\treturn !id.equals(EndpointId.of(\"specialized\"));\n\t\t\t};\n\t\t\tSpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context,\n\t\t\t\t\tCollections.singleton(filter));\n\t\t\tMap<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"ce01f7f1509fd3583b3320b4809969611ffaba08","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-18882\n","date":"2019-11-05 19:05:51","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"}]
