[{"authorTime":"2017-11-29 10:48:33","codes":[{"authorDate":"2017-11-29 10:48:33","commitOrder":1,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class, HealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping().getEndpoints();\n\t\tEndpointInfo endpointInfo = (EndpointInfo) (endpoints.toArray()[0]);\n\t\tWebOperation webOperation = (WebOperation) endpointInfo.getOperations().toArray()[0];\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\")).isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","date":"2017-11-29 10:49:17","endLine":240,"groupId":"8262","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/55/d19506a702b6e5cea42dadbfca86054c16fc72.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class, HealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping().getEndpoints();\n\t\tEndpointInfo endpointInfo = (EndpointInfo) (endpoints.toArray()[0]);\n\t\tWebOperation webOperation = (WebOperation) endpointInfo.getOperations().toArray()[0];\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\")).isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"},{"authorDate":"2017-11-29 10:48:33","commitOrder":1,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class, HealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class).getEndpoints();\n\t\tEndpointInfo endpointInfo = (EndpointInfo) (endpoints.toArray()[0]);\n\t\tWebOperation webOperation = (WebOperation) endpointInfo.getOperations().toArray()[0];\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\")).isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","date":"2017-11-29 10:49:17","endLine":263,"groupId":"15767","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/80/4986bb388138467e38f410aa63fbc2850b0b91.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class, HealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class).getEndpoints();\n\t\tEndpointInfo endpointInfo = (EndpointInfo) (endpoints.toArray()[0]);\n\t\tWebOperation webOperation = (WebOperation) endpointInfo.getOperations().toArray()[0];\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\")).isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"}],"commitId":"9e9548364504dc6508820919461d38104e4ee982","commitMessage":"@@@Add cloudfoundry health extensions\n\nFixes gh-11192\n","date":"2017-11-29 10:49:17","modifiedFileCount":"7","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2017-12-08 02:27:52","codes":[{"authorDate":"2017-12-08 02:27:52","commitOrder":2,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","date":"2017-12-08 02:27:52","endLine":244,"groupId":"8262","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/62/124e8db25ec8e479d64c9b7a84ba3d5f72b208.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo endpointInfo = (EndpointInfo) (endpoints.toArray()[0]);\n\t\tWebOperation webOperation = (WebOperation) endpointInfo.getOperations()\n\t\t\t\t.toArray()[0];\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"},{"authorDate":"2017-12-08 02:27:52","commitOrder":2,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","date":"2017-12-08 02:27:52","endLine":268,"groupId":"8262","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/45/4bc65eadbca84a4730f3935c111c81136c5274.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo endpointInfo = (EndpointInfo) (endpoints.toArray()[0]);\n\t\tWebOperation webOperation = (WebOperation) endpointInfo.getOperations()\n\t\t\t\t.toArray()[0];\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"c0e3ae90420c0971aa429992ada65d5cf6980e53","commitMessage":"@@@Polish\n","date":"2017-12-08 02:27:52","modifiedFileCount":"4","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","date":"2017-12-12 18:57:30","endLine":242,"groupId":"8262","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d3/cc6613edffba459f5bd671dc53602e315a294d.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","date":"2017-12-12 18:57:30","endLine":266,"groupId":"8262","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/f59344cf611c5d241148eeaadc40ccfde4aec5.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() throws Exception {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2017-12-14 00:47:18","codes":[{"authorDate":"2017-12-14 00:47:18","commitOrder":4,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","date":"2017-12-14 00:47:18","endLine":240,"groupId":"8262","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/48/35fc71d45ef2bb8d416c1db862a439d0b516c8.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2017-12-14 00:47:18","commitOrder":4,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","date":"2017-12-14 00:47:18","endLine":264,"groupId":"8262","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c9/7b2219cd9d78059df95e916b043f5e5e3d625b.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tHealthWebEndpointManagementContextConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"681fdb1ee80670cec20867f9540627ee1bdc6103","commitMessage":"@@@Property detect Health web extension with management context\n\nPreviously.  the Health web extension was defined in the management\ncontext and.  as a result.  it wasn't found when a separate port was\nrequired. The side effect is that anything that the health web extension\ndoes was not active anymore in that case.\n\nThis commit makes sure that the extension is always defined as part of\nthe main context where operations are discovered and merged.\n\nCloses gh-11285\n","date":"2017-12-14 00:47:18","modifiedFileCount":"5","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2017-12-23 21:23:42","codes":[{"authorDate":"2017-12-23 21:23:42","commitOrder":5,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","date":"2017-12-23 21:23:42","endLine":240,"groupId":"8262","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f3/e0c7fde6af338aa1390368a59f9a1af7f5a289.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2017-12-23 21:23:42","commitOrder":5,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","date":"2017-12-23 21:23:42","endLine":264,"groupId":"8262","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4e/090ab7e2d84411b291c0c7d4f3bb606046e007.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointManagementContextConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"db2de63106e5bcb3e4cc4efce21ce4d4cdf3a440","commitMessage":"@@@Merge pull request #11400 from izeye:rename-auto-configuration\n\n* pr/11400:\n  Rename CloudFoundryHealthWebEndpointManagementContextConfiguration\n","date":"2017-12-23 21:23:42","modifiedFileCount":"2","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-01-10 06:42:28","codes":[{"authorDate":"2018-01-10 06:42:28","commitOrder":6,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","date":"2018-01-10 06:42:28","endLine":237,"groupId":"8262","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/43/3c530f0b8f6b2355f6182c706fb0d7c8c8c086.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2018-01-10 06:42:28","commitOrder":6,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","date":"2018-01-10 06:42:28","endLine":262,"groupId":"8262","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/22/eb968a1a345d09608ceb2e0b7aa37a6cc87412.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.register(HealthEndpointAutoConfiguration.class,\n\t\t\t\tCloudFoundryHealthWebEndpointAutoConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"3d30c621620b7475e62cfbef880a730782b84f28","commitMessage":"@@@Fix package tangle in cloudfoundry configuration\n\nFixes gh-11273\n","date":"2018-01-10 06:42:28","modifiedFileCount":"4","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2018-01-10 12:57:10","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":7,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.refresh();\n\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping().getEndpoints();\n\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpoint.getOperations().iterator().next();\n\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","date":"2018-01-20 12:44:24","endLine":233,"groupId":"3154","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/8e1b48f7adf50e4d6fd797e1c7ffda49689fbb.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = getHandlerMapping()\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2018-01-10 12:57:10","commitOrder":7,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.refresh();\n\t\tCollection<ExposableWebEndpoint> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpoint.getOperations().iterator().next();\n\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","date":"2018-01-20 12:44:24","endLine":259,"groupId":"3154","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e7/288da5e65a07abed095d1293e6dbb490e739bd.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.refresh();\n\t\tCollection<EndpointInfo<WebOperation>> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpointInfo = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpointInfo.getOperations().iterator().next();\n\t\tReflectiveOperationInvoker invoker = (ReflectiveOperationInvoker) webOperation\n\t\t\t\t.getInvoker();\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"1d39feffeabf4b94e3f900b941b58e0443d5887a","commitMessage":"@@@Overhaul actuator endpoint code\n\nRefactor several areas of the actuator endpoint code in order to make\nfuture extensions easier. The primary goal is to introduce the concept\nof an `ExposableEndpoint` that has technology specific subclasses and\ncan carry additional data for filters to use. Many other changes have\nbeen made along the way including:\n\n* A new EndpointSupplier interface that allows cleaner separation of\n  supplying vs discovering endpoints. This allows cleaner class names\n  and allows for better auto-configuration since a user can choose to\n  provide their own supplier entirely.\n\n* A `DiscoveredEndpoint` interface that allows the `EndpointFilter`\n  to be greatly simplified. A filter now doesn't need to know about\n  discovery concerns unless absolutely necessary.\n\n* Improved naming and package structure. Many technology specific\n  concerns are now grouped in a better way. Related concerns are\n  co-located and concepts from one area no longer leakage into another.\n\n* Simplified `HandlerMapping` implementations. Many common concerns have\n  been pulled up helping to create simpler subclasses.\n\n* Simplified JMX adapters. Many of the intermediary `Info` classes have\n  been removed. The `DiscoveredJmxOperation` is now responsible for\n  mapping methods to operations.\n\n* A specific @`HealthEndpointCloudFoundryExtension` for Cloud Foundry.\n  The extension logic used to create a \"full\" health endpoint extension\n  has been made explicit.\n\nFixes gh-11428\nFixes gh-11581\n","date":"2018-01-20 12:44:24","modifiedFileCount":"63","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-01-03 03:13:23","codes":[{"authorDate":"2018-01-03 03:13:23","commitOrder":8,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run(context -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(context).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2018-03-03 10:30:55","endLine":264,"groupId":"31","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fe/f5777e431c7382be54b7cc937bd93608ceab3f.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.refresh();\n\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping().getEndpoints();\n\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpoint.getOperations().iterator().next();\n\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2018-01-03 03:13:23","commitOrder":8,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.run(context -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\n\t}\n","date":"2018-03-03 10:30:55","endLine":260,"groupId":"3154","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c9/100d317a86cf8ef992a6e0b5a741387b1d9dea.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tTestPropertyValues\n\t\t\t\t.of(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.applyTo(this.context);\n\t\tthis.context.refresh();\n\t\tCollection<ExposableWebEndpoint> endpoints = this.context\n\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t.getEndpoints();\n\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\tWebOperation webOperation = endpoint.getOperations().iterator().next();\n\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"1c27a8e6e271a86c8600fcfa2b1f221e9023efe9","commitMessage":"@@@Move tests to ApplicationContextRunner\n","date":"2018-03-03 10:30:55","modifiedFileCount":"2","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2018-03-13 07:30:55","codes":[{"authorDate":"2018-03-13 07:30:55","commitOrder":9,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(\n\t\t\t\t\t\t\tcontext).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator()\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(\n\t\t\t\t\t\t\t\t\tCloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2018-03-15 05:05:26","endLine":293,"groupId":"31","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/1366da84f09ee18009d12fa38e750b65df230c.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run(context -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(context).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2018-03-13 07:30:55","commitOrder":9,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator()\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2018-03-15 05:05:26","endLine":287,"groupId":"3154","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/94/e6afde968ca3c3032e3fdea386bf0e8c19026e.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.run(context -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"a4b0be089da735c481ede50d66f8abc1d3d2cccd","commitMessage":"@@@Polish\n","date":"2018-03-15 05:05:26","modifiedFileCount":"29","status":"M","submitter":"Phillip Webb"},{"authorTime":"2016-01-19 04:17:55","codes":[{"authorDate":"2018-03-13 07:30:55","commitOrder":10,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(\n\t\t\t\t\t\t\tcontext).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator()\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(\n\t\t\t\t\t\t\t\t\tCloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2018-03-15 05:05:26","endLine":293,"groupId":"31","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/1366da84f09ee18009d12fa38e750b65df230c.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(\n\t\t\t\t\t\t\tcontext).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator()\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(\n\t\t\t\t\t\t\t\t\tCloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"N"},{"authorDate":"2016-01-19 04:17:55","commitOrder":10,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthIndicatorAutoConfiguration.class,\n\t\t\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator()\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2018-05-16 19:59:34","endLine":289,"groupId":"3154","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/16/c4bc607223203dccda75aca37acfe509801867.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator()\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"d829d522be8c3c6ebc3cbdfbc49aca4815e969c5","commitMessage":"@@@Introduce HealthIndicatorRegistry\n\nThis commit introduces HealthIndicatorRegistry which handles\nregistration of HealthIndicator instances. Registering new\nHealthIndicator instances is now possible in runtime.\n\nSee gh-4965\n","date":"2018-05-16 19:59:34","modifiedFileCount":"14","status":"M","submitter":"Vedran Pavic"},{"authorTime":"2018-05-17 17:49:05","codes":[{"authorDate":"2018-05-17 17:49:05","commitOrder":11,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(\n\t\t\t\t\t\t\tcontext).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint,\n\t\t\t\t\t\t\t\"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(\n\t\t\t\t\t\t\t\t\tCloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2018-05-17 21:26:38","endLine":296,"groupId":"31","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5b/1d82913b0b1597e9b47372c04327ab9d987bc6.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(\n\t\t\t\t\t\t\tcontext).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator()\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(\n\t\t\t\t\t\t\t\t\tCloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2018-05-17 17:49:05","commitOrder":11,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthIndicatorAutoConfiguration.class,\n\t\t\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint,\n\t\t\t\t\t\t\t\"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2018-05-17 21:26:38","endLine":290,"groupId":"4548","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/81/79f965a555c68dc5903fbe237e24e12dc12432.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthIndicatorAutoConfiguration.class,\n\t\t\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tWebOperation webOperation = endpoint.getOperations().iterator()\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"b51b997b70bbb7ffc5b2291fd6309acb55dd3f31","commitMessage":"@@@Run specific health check\n\nThis commit improves the `health` endpoint to run health check for a\nparticular component or.  if that component is itself a composite.  an\ninstance of that component.\n\nConcretely.  it is now possible to issue a `GET` on\n`/actuator/health/{component}` and\n`/actuator/health/{component}/instance` to retrieve the health of a\ncomponent or an instance of a composite component.  respectively.\n\nIf details cannot be showed for the current user.  any request leads to a\n404 and does not invoke the health check at all.\n\nCloses gh-8865\n","date":"2018-05-17 21:26:38","modifiedFileCount":"10","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-03-28 19:48:47","codes":[{"authorDate":"2019-03-28 19:48:47","commitOrder":12,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(\n\t\t\t\t\t\t\tcontext).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint,\n\t\t\t\t\t\t\t\"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(\n\t\t\t\t\t\t\t\t\tCloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2019-03-28 19:48:47","endLine":304,"groupId":"31","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2f/e52b48f3711d510072999b9d7d6357be766177.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(\n\t\t\t\t\t\t\tcontext).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint,\n\t\t\t\t\t\t\t\"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(\n\t\t\t\t\t\t\t\t\tCloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2019-03-28 19:48:47","commitOrder":12,"curCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthIndicatorAutoConfiguration.class,\n\t\t\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint,\n\t\t\t\t\t\t\t\"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2019-03-28 19:48:47","endLine":293,"groupId":"4548","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ac/60d415603be0262c4d922a1be7920a98ca5b52.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(HealthIndicatorAutoConfiguration.class,\n\t\t\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint,\n\t\t\t\t\t\t\t\"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation,\n\t\t\t\t\t\t\t\"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"}],"commitId":"878a635bfb6c28ee135b4f84e12fc09a42d1a3a9","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-03-28 19:48:47","modifiedFileCount":"67","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":13,"curCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(context).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":246,"groupId":"31","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/dc/ac9ee8d9051b313821e885b1ad75293e602f47.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(context).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":13,"curCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HealthIndicatorAutoConfiguration.class,\n\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":237,"groupId":"4548","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f9/4072091366163790d53977168bcb9b5a12dd29.src","preCode":"\tpublic void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HealthIndicatorAutoConfiguration.class,\n\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-08-21 05:18:27","codes":[{"authorDate":"2019-08-21 05:18:27","commitOrder":14,"curCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(context).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(2);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2019-08-22 09:43:25","endLine":246,"groupId":"31","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ce/7f8aac151aff2dab31fc1ff73756570918fd3e.src","preCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(context).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2019-08-21 05:18:27","commitOrder":14,"curCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HealthContributorAutoConfiguration.class,\n\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(2);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2019-08-22 09:43:25","endLine":237,"groupId":"4548","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/de/a8001a8d39e5b02b541e6b49fbb5c27d4352a3.src","preCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HealthIndicatorAutoConfiguration.class,\n\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(3);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"3c535e0de340a718d6cf0d863a6529b314a38f42","commitMessage":"@@@Add HealthContributor and refactor HealthEndpoint\n\nOverhaul `HealthEndpoint` support to make it easier to support health\ngroups. Prior to this commit the `HealthIndicator` interface was used\nfor both regular indicators and composite indicators. In addition the\n`Health` result was used to both represent individual.  system and\ncomposite health. This design unfortunately means that all health\ncontributors need to be aware of the `HealthAggregator` and could not\neasily support heath groups if per-group aggregation is required.\n\nThis commit reworks many aspects of the health support in order to\nprovide a cleaner separation between a `HealthIndicator`and a\ncomposite. The following changes have been made:\n\n- A `HealthContributor` interface has been introduced to represent\n  the general concept of something that contributes health information.\n  A contributor can either be a `HealthIndicator` or a\n  `CompositeHealthContributor`.\n\n- A `HealthComponent` class has been introduced to mirror the\n  contributor arrangement. The component can be either\n  `CompositeHealth` or `Health`.\n\n- The `HealthAggregator` interface has been replaced with a more\n  focused `StatusAggregator` interface which only deals with `Status`\n  results.\n\n- `CompositeHealthIndicator` has been replaced with\n  `CompositeHealthContributor` which only provides access to other\n  contributors. A composite can no longer directly return `Health`.\n\n- `HealthIndicatorRegistry` has been replaced with\n  `HealthContributorRegistry` and the default implementation now\n  uses a copy-on-write strategy.\n\n- `HealthEndpoint`.  `HealthEndpointWebExtension` and\n  `ReactiveHealthEndpointWebExtension` now extend a common\n  `HealthEndpointSupport` class. They are now driven by a\n  health contributor registry and `HealthEndpointSettings`.\n\n- The `HealthStatusHttpMapper` class has been replaced by a\n  `HttpCodeStatusMapper` interface.\n\n- The `HealthWebEndpointResponseMapper` class has been replaced\n  by a `HealthEndpointSettings` strategy. This allows us to move\n  role related logic and `ShowDetails` to the auto-configure module.\n\n- `SimpleHttpCodeStatusMapper` and `SimpleStatusAggregator`\n  implementations have been added which are configured via constructor\n  arguments rather than setters.\n\n- Endpoint auto-configuration has been reworked and the\n  `CompositeHealthIndicatorConfiguration` class has been replaced\n  by `CompositeHealthContributorConfiguration`.\n\n- The endpoint JSON has been changed make `details` distinct from\n  `components`.\n\nSee gh-17926\n","date":"2019-08-22 09:43:25","modifiedFileCount":"75","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-02-19 16:35:47","codes":[{"authorDate":"2020-02-19 16:35:47","commitOrder":15,"curCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(context).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(2);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tassertThat(webOperation).extracting(\"invoker\").extracting(\"target\")\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2020-02-19 16:35:47","endLine":246,"groupId":"10734","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/93/836b307c6a849b9a03093cb144d67a1d94d0d6.src","preCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class))\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = getHandlerMapping(context).getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(2);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryReactiveHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"},{"authorDate":"2020-02-19 16:35:47","commitOrder":15,"curCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HealthContributorAutoConfiguration.class,\n\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(2);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tassertThat(webOperation).extracting(\"invoker\").extracting(\"target\")\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","date":"2020-02-19 16:35:47","endLine":237,"groupId":"10734","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"healthEndpointInvokerShouldBeCloudFoundryWebExtension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a5/65106a26781e96d809a4494119facde2e00a21.src","preCode":"\tvoid healthEndpointInvokerShouldBeCloudFoundryWebExtension() {\n\t\tthis.contextRunner\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HealthContributorAutoConfiguration.class,\n\t\t\t\t\t\tHealthEndpointAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = context\n\t\t\t\t\t\t\t.getBean(\"cloudFoundryWebEndpointServletHandlerMapping\",\n\t\t\t\t\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping.class)\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(2);\n\t\t\t\t\tWebOperation webOperation = findOperationWithRequestPath(endpoint, \"health\");\n\t\t\t\t\tObject invoker = ReflectionTestUtils.getField(webOperation, \"invoker\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(invoker, \"target\"))\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryHealthEndpointWebExtension.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"fc3fb7fb449165903ce907d1846cfc653b3a2ef3","commitMessage":"@@@Merge pull request #20226 from izeye\n\n* pr/20226:\n  Update copyright year of changed files\n  Polish\n\nCloses gh-20226\n","date":"2020-02-19 16:35:47","modifiedFileCount":"16","status":"M","submitter":"Stephane Nicoll"}]
