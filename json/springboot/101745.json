[{"authorTime":"2020-07-24 02:40:49","codes":[{"authorDate":"2020-07-24 02:40:49","commitOrder":1,"curCode":"\tvoid ofClassesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","date":"2020-07-24 02:43:02","endLine":53,"groupId":"7665","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ofClassesReturnsFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/26/24d64681462959eee16bd0c458edfefdef9265.src","preCode":"\tvoid ofClassesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2020-07-24 02:40:49","commitOrder":1,"curCode":"\tvoid ofClassNamesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","date":"2020-07-24 02:43:02","endLine":62,"groupId":"7665","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ofClassNamesReturnsFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/26/24d64681462959eee16bd0c458edfefdef9265.src","preCode":"\tvoid ofClassNamesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"}],"commitId":"36a6ca6e6e63d16c3b5cfc163071d4bdaf14ea1f","commitMessage":"@@@Add EnvironmentPostProcessorsFactory\n\nUpdate `EnvironmentPostProcessorApplicationListener` so that it can\neither use values from `spring.factories` or use a factory interface.\n\nCloses gh-22529\n","date":"2020-07-24 02:43:02","modifiedFileCount":"3","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-08-21 03:51:34","codes":[{"authorDate":"2020-08-21 03:51:34","commitOrder":2,"curCode":"\tvoid ofClassesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","date":"2020-08-21 12:45:02","endLine":57,"groupId":"7665","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ofClassesReturnsFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/21/2ac2c1a947b00304d0331d50f83255c68b9298.src","preCode":"\tvoid ofClassesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-08-21 03:51:34","commitOrder":2,"curCode":"\tvoid ofClassNamesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","date":"2020-08-21 12:45:02","endLine":67,"groupId":"7665","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ofClassNamesReturnsFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/21/2ac2c1a947b00304d0331d50f83255c68b9298.src","preCode":"\tvoid ofClassNamesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"22606577810bc47d41ef9ed70f9f9f6b972d69ce","commitMessage":"@@@Add BootstrapRegistry for long lived instances\n\nAdd a simple `BootstrapRegistry` that can be used to store and share\nobject instances across `EnvironmentPostProcessors`. The registry\ncan be injected into the constructor of any `EnvironmentPostProcessor`.\n\nRegistrations can also perform additional actions when the\n`ApplicationContext` has been prepared. For example.  they could register\nthe the bootstrap instances as beans so that they become available to\nthe application.\n\nSee gh-22956\n","date":"2020-08-21 12:45:02","modifiedFileCount":"8","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-09-17 15:09:41","codes":[{"authorDate":"2020-09-17 15:09:41","commitOrder":3,"curCode":"\tvoid ofClassesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","date":"2020-09-17 15:31:00","endLine":58,"groupId":"101745","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"ofClassesReturnsFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fd/5e6cd5b85b7c41c00788c700a031c1fa231ff2.src","preCode":"\tvoid ofClassesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class);\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-09-17 15:09:41","commitOrder":3,"curCode":"\tvoid ofClassNamesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapContext);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","date":"2020-09-17 15:31:00","endLine":68,"groupId":"101745","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ofClassNamesReturnsFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fd/5e6cd5b85b7c41c00788c700a031c1fa231ff2.src","preCode":"\tvoid ofClassNamesReturnsFactory() {\n\t\tEnvironmentPostProcessorsFactory factory = EnvironmentPostProcessorsFactory\n\t\t\t\t.of(TestEnvironmentPostProcessor.class.getName());\n\t\tList<EnvironmentPostProcessor> processors = factory.getEnvironmentPostProcessors(this.logFactory,\n\t\t\t\tthis.bootstrapRegistry);\n\t\tassertThat(processors).hasSize(1);\n\t\tassertThat(processors.get(0)).isInstanceOf(TestEnvironmentPostProcessor.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/EnvironmentPostProcessorsFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"1ae14362110360cc558bcd498fa67f70a35b8373","commitMessage":"@@@Refactor BootstrapRegistry support\n\nRefactor `BootstrapRegistry` support following initial prototype work\nwith the Spring Cloud team.\n\nThis update splits the `BootstrapRegistry` API into `BootstrapRegistry`. \n`BootstrapContext` and  `ConfigurableBootstrapContext` interfaces and\nmoves it to the same package as `SpringApplication`.\n\nA new `Bootstrapper` interface has been introduced that can be added\nto the `SpringApplication` to customize the `BootstrapRegistry` before\nit's used.\n\nCloses gh-23326\n","date":"2020-09-17 15:31:00","modifiedFileCount":"40","status":"M","submitter":"Phillip Webb"}]
