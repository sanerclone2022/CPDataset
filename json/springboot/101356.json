[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void fromPropertySourceShouldFlattenPropertySources() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources\n\t\t\t\t.from(sources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","date":"2017-10-05 11:18:56","endLine":120,"groupId":"9095","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromPropertySourceShouldFlattenPropertySources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1f/962bf0b6500308d315361c672478aaa5542ab2.src","preCode":"\tpublic void fromPropertySourceShouldFlattenPropertySources() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources\n\t\t\t\t.from(sources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void shouldFlattenEnvironment() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(\n\t\t\t\tsources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","date":"2017-10-05 11:18:56","endLine":122,"groupId":"9095","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFlattenEnvironment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/78/6020ca758fec56556e559992fa6694e322b036.src","preCode":"\tpublic void shouldFlattenEnvironment() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(\n\t\t\t\tsources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-10-24 21:48:49","codes":[{"authorDate":"2017-10-24 21:48:49","commitOrder":2,"curCode":"\tpublic void fromPropertySourceShouldFlattenPropertySources() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources\n\t\t\t\t.from(sources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","date":"2017-10-24 21:48:49","endLine":120,"groupId":"9095","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fromPropertySourceShouldFlattenPropertySources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/aa/9ef5e3157ec15499d187f7ad9fca06af370181.src","preCode":"\tpublic void fromPropertySourceShouldFlattenPropertySources() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources\n\t\t\t\t.from(sources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2017-10-24 21:48:49","commitOrder":2,"curCode":"\tpublic void shouldFlattenEnvironment() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(\n\t\t\t\tsources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","date":"2017-10-24 21:48:49","endLine":122,"groupId":"9095","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFlattenEnvironment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/0235abd400f2f0ac5f90dd7ee5593d6aadd4ea.src","preCode":"\tpublic void shouldFlattenEnvironment() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\",\n\t\t\t\tCollections.<String, Object>singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(\n\t\t\t\tsources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"35c6b83fce86a83e4b2b9ec9fb5cbe0646eb23a5","commitMessage":"@@@Merge pull request #10494 from Johnny Lim\n\n* gh-10494:\n  Polish ?Remove explicit type arguments?\n  Remove explicit type arguments\n","date":"2017-10-24 21:48:49","modifiedFileCount":"61","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void fromPropertySourceShouldFlattenPropertySources() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources\n\t\t\t\t.from(sources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","date":"2017-12-12 18:57:30","endLine":119,"groupId":"9095","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fromPropertySourceShouldFlattenPropertySources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/02/f7b4853851d49d12193a6a5c5a36cd4bc2b429.src","preCode":"\tpublic void fromPropertySourceShouldFlattenPropertySources() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources\n\t\t\t\t.from(sources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void shouldFlattenEnvironment() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(\n\t\t\t\tsources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","date":"2017-12-12 18:57:30","endLine":150,"groupId":"9095","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFlattenEnvironment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d7/53c78e84dba4e2fddd0d3fb0577444eaf31b4d.src","preCode":"\tpublic void shouldFlattenEnvironment() throws Exception {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(\n\t\t\t\tsources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-03-06 22:38:17","codes":[{"authorDate":"2019-03-06 22:38:17","commitOrder":4,"curCode":"\tpublic void fromPropertySourceShouldFlattenPropertySources() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources\n\t\t\t\t.from(sources);\n\t\tassertThat(configurationSources.iterator()).toIterable().hasSize(5);\n\t}\n","date":"2019-03-06 22:38:17","endLine":131,"groupId":"9095","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fromPropertySourceShouldFlattenPropertySources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/56/d367696de764ab6091ddbbd09c7c331762bb69.src","preCode":"\tpublic void fromPropertySourceShouldFlattenPropertySources() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources\n\t\t\t\t.from(sources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2019-03-06 22:38:17","commitOrder":4,"curCode":"\tpublic void shouldFlattenEnvironment() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(\n\t\t\t\tsources);\n\t\tassertThat(configurationSources.iterator()).toIterable().hasSize(5);\n\t}\n","date":"2019-03-06 22:38:17","endLine":159,"groupId":"9095","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFlattenEnvironment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/76/f77ec2d8672431f0e45d164144bbd7ce7280e1.src","preCode":"\tpublic void shouldFlattenEnvironment() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(\n\t\t\t\tnew MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(\n\t\t\t\tnew MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(\n\t\t\t\tsources);\n\t\tassertThat(configurationSources.iterator()).hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"87d696d6971c8bbd28be4fa885f9cf5719309c99","commitMessage":"@@@Align with breaking API change in AssertJ 3.12\n\nCloses gh-16145\n","date":"2019-03-06 22:38:17","modifiedFileCount":"9","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid fromPropertySourceShouldFlattenPropertySources() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources.from(sources);\n\t\tassertThat(configurationSources.iterator()).toIterable().hasSize(5);\n\t}\n","date":"2019-06-07 19:25:54","endLine":122,"groupId":"101356","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"fromPropertySourceShouldFlattenPropertySources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/52/e9f9be3b2cfe75673abcc8285c205afe763676.src","preCode":"\tpublic void fromPropertySourceShouldFlattenPropertySources() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tIterable<ConfigurationPropertySource> configurationSources = ConfigurationPropertySources.from(sources);\n\t\tassertThat(configurationSources.iterator()).toIterable().hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid shouldFlattenEnvironment() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(sources);\n\t\tassertThat(configurationSources.iterator()).toIterable().hasSize(5);\n\t}\n","date":"2019-06-07 19:25:54","endLine":135,"groupId":"101356","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFlattenEnvironment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6f/ed843b7c895bdebb8e4c96c648b80290a90d4d.src","preCode":"\tpublic void shouldFlattenEnvironment() {\n\t\tStandardEnvironment environment = new StandardEnvironment();\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"foo\", Collections.singletonMap(\"foo\", \"bar\")));\n\t\tenvironment.getPropertySources().addFirst(new MapPropertySource(\"far\", Collections.singletonMap(\"far\", \"far\")));\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addFirst(new PropertySource<Environment>(\"env\", environment) {\n\n\t\t\t@Override\n\t\t\tpublic String getProperty(String key) {\n\t\t\t\treturn this.source.getProperty(key);\n\t\t\t}\n\n\t\t});\n\t\tsources.addLast(new MapPropertySource(\"baz\", Collections.singletonMap(\"baz\", \"barf\")));\n\t\tSpringConfigurationPropertySources configurationSources = new SpringConfigurationPropertySources(sources);\n\t\tassertThat(configurationSources.iterator()).toIterable().hasSize(5);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySourcesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
