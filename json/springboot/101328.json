[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void ofNameWithWhitespaceInAssociativeElement() throws Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[b a r]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[b a r]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"b a r\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":208,"groupId":"1389","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ofNameWithWhitespaceInAssociativeElement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/04/3e9cf99dc3e9ef9c502c4944bdf304909b9137.src","preCode":"\tpublic void ofNameWithWhitespaceInAssociativeElement() throws Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[b a r]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[b a r]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"b a r\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void ofNameWithUppercaseInAssociativeElement() throws Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[BAR]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[BAR]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"BAR\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":218,"groupId":"1389","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ofNameWithUppercaseInAssociativeElement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/04/3e9cf99dc3e9ef9c502c4944bdf304909b9137.src","preCode":"\tpublic void ofNameWithUppercaseInAssociativeElement() throws Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[BAR]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[BAR]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"BAR\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void ofNameWithWhitespaceInAssociativeElement() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[b a r]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[b a r]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"b a r\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","date":"2017-12-12 18:57:30","endLine":208,"groupId":"1389","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ofNameWithWhitespaceInAssociativeElement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/aa/89e8ab53ef7be05fa4d769ffdd4814cb5ace22.src","preCode":"\tpublic void ofNameWithWhitespaceInAssociativeElement() throws Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[b a r]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[b a r]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"b a r\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void ofNameWithUppercaseInAssociativeElement() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[BAR]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[BAR]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"BAR\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","date":"2017-12-12 18:57:30","endLine":218,"groupId":"1389","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ofNameWithUppercaseInAssociativeElement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/aa/89e8ab53ef7be05fa4d769ffdd4814cb5ace22.src","preCode":"\tpublic void ofNameWithUppercaseInAssociativeElement() throws Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[BAR]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[BAR]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"BAR\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid ofNameWithWhitespaceInAssociativeElement() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[b a r]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[b a r]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"b a r\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","date":"2019-06-07 19:25:54","endLine":193,"groupId":"101328","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"ofNameWithWhitespaceInAssociativeElement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/87/6066ecf5459bdebe15f6dc43a6885a8e116a34.src","preCode":"\tpublic void ofNameWithWhitespaceInAssociativeElement() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[b a r]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[b a r]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"b a r\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid ofNameWithUppercaseInAssociativeElement() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[BAR]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[BAR]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"BAR\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","date":"2019-06-07 19:25:54","endLine":203,"groupId":"101328","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ofNameWithUppercaseInAssociativeElement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/87/6066ecf5459bdebe15f6dc43a6885a8e116a34.src","preCode":"\tpublic void ofNameWithUppercaseInAssociativeElement() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo[BAR]\");\n\t\tassertThat(name.toString()).isEqualTo(\"foo[BAR]\");\n\t\tassertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo(\"foo\");\n\t\tassertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo(\"BAR\");\n\t\tassertThat(name.isIndexed(0)).isFalse();\n\t\tassertThat(name.isIndexed(1)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
