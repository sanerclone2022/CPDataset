[{"authorTime":"2018-02-08 21:07:06","codes":[{"authorDate":"2018-02-08 21:07:06","commitOrder":1,"curCode":"\tpublic void filterCapturesSessionIdWhenSessionIsUsed()\n\t\t\tthrows ServletException, IOException {\n\t\tthis.filter.filter(\n\t\t\t\tMockServerWebExchange\n\t\t\t\t\t\t.from(MockServerHttpRequest.get(\"https://api.example.com\")),\n\t\t\t\tnew WebFilterChain() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange) {\n\t\t\t\t\t\texchange.getSession().block().getAttributes().put(\"a\", \"alpha\");\n\t\t\t\t\t\treturn Mono.empty();\n\t\t\t\t\t}\n\n\t\t\t\t}).block();\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","date":"2018-02-08 21:08:27","endLine":94,"groupId":"5425","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"filterCapturesSessionIdWhenSessionIsUsed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/07/50ff908b3db5cebeca1d764adbf023f5b54de9.src","preCode":"\tpublic void filterCapturesSessionIdWhenSessionIsUsed()\n\t\t\tthrows ServletException, IOException {\n\t\tthis.filter.filter(\n\t\t\t\tMockServerWebExchange\n\t\t\t\t\t\t.from(MockServerHttpRequest.get(\"https://api.example.com\")),\n\t\t\t\tnew WebFilterChain() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange) {\n\t\t\t\t\t\texchange.getSession().block().getAttributes().put(\"a\", \"alpha\");\n\t\t\t\t\t\treturn Mono.empty();\n\t\t\t\t\t}\n\n\t\t\t\t}).block();\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/reactive/HttpTraceWebFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2018-02-08 21:07:06","commitOrder":1,"curCode":"\tpublic void filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(),\n\t\t\t\tnew MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository\n\t\t\t\t.findAll().get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","date":"2018-02-08 21:08:27","endLine":104,"groupId":"7583","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"filterCapturesPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/70/8a03135c0dd809b8e4a49a6e210a95d2483521.src","preCode":"\tpublic void filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(),\n\t\t\t\tnew MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository\n\t\t\t\t.findAll().get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/servlet/HttpTraceFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"4beb6be179ff8c4d83ea2638b65f4bede99922d6","commitMessage":"@@@Rename HTTP trace properties and packages\n\nCloses gh-11934\n","date":"2018-02-08 21:08:27","modifiedFileCount":"14","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2018-02-08 21:07:06","codes":[{"authorDate":"2018-12-20 23:30:51","commitOrder":2,"curCode":"\tpublic void filterCapturesSessionIdWhenSessionIsUsed()\n\t\t\tthrows ServletException, IOException {\n\t\tthis.filter.filter(\n\t\t\t\tMockServerWebExchange\n\t\t\t\t\t\t.from(MockServerHttpRequest.get(\"https://api.example.com\")),\n\t\t\t\tnew WebFilterChain() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange) {\n\t\t\t\t\t\texchange.getSession().block(Duration.ofSeconds(30))\n\t\t\t\t\t\t\t\t.getAttributes().put(\"a\", \"alpha\");\n\t\t\t\t\t\treturn Mono.empty();\n\t\t\t\t\t}\n\n\t\t\t\t}).block(Duration.ofSeconds(30));\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","date":"2018-12-20 23:30:51","endLine":96,"groupId":"15023","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"filterCapturesSessionIdWhenSessionIsUsed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2b/c1890bf3f8f453630232df786bd24330156f97.src","preCode":"\tpublic void filterCapturesSessionIdWhenSessionIsUsed()\n\t\t\tthrows ServletException, IOException {\n\t\tthis.filter.filter(\n\t\t\t\tMockServerWebExchange\n\t\t\t\t\t\t.from(MockServerHttpRequest.get(\"https://api.example.com\")),\n\t\t\t\tnew WebFilterChain() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange) {\n\t\t\t\t\t\texchange.getSession().block().getAttributes().put(\"a\", \"alpha\");\n\t\t\t\t\t\treturn Mono.empty();\n\t\t\t\t\t}\n\n\t\t\t\t}).block();\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/reactive/HttpTraceWebFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2018-02-08 21:07:06","commitOrder":2,"curCode":"\tpublic void filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(),\n\t\t\t\tnew MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository\n\t\t\t\t.findAll().get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","date":"2018-02-08 21:08:27","endLine":104,"groupId":"7583","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"filterCapturesPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/70/8a03135c0dd809b8e4a49a6e210a95d2483521.src","preCode":"\tpublic void filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(),\n\t\t\t\tnew MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository\n\t\t\t\t.findAll().get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/servlet/HttpTraceFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"}],"commitId":"9d2d6d5812d34b0bc04da3a124b9c5c0da511c04","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-20 23:30:51","modifiedFileCount":"22","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-02-08 21:07:06","codes":[{"authorDate":"2018-12-21 00:54:08","commitOrder":3,"curCode":"\tpublic void filterCapturesSessionIdWhenSessionIsUsed()\n\t\t\tthrows ServletException, IOException {\n\t\tthis.filter.filter(\n\t\t\t\tMockServerWebExchange\n\t\t\t\t\t\t.from(MockServerHttpRequest.get(\"https://api.example.com\")),\n\t\t\t\t(exchange) -> {\n\t\t\t\t\texchange.getSession().block(Duration.ofSeconds(30)).getAttributes()\n\t\t\t\t\t\t\t.put(\"a\", \"alpha\");\n\t\t\t\t\treturn Mono.empty();\n\t\t\t\t}).block(Duration.ofSeconds(30));\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","date":"2018-12-21 00:54:08","endLine":82,"groupId":"15023","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"filterCapturesSessionIdWhenSessionIsUsed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/06/2511a8b469b4c6798f8252cfac6462f0974463.src","preCode":"\tpublic void filterCapturesSessionIdWhenSessionIsUsed()\n\t\t\tthrows ServletException, IOException {\n\t\tthis.filter.filter(\n\t\t\t\tMockServerWebExchange\n\t\t\t\t\t\t.from(MockServerHttpRequest.get(\"https://api.example.com\")),\n\t\t\t\tnew WebFilterChain() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Mono<Void> filter(ServerWebExchange exchange) {\n\t\t\t\t\t\texchange.getSession().block(Duration.ofSeconds(30))\n\t\t\t\t\t\t\t\t.getAttributes().put(\"a\", \"alpha\");\n\t\t\t\t\t\treturn Mono.empty();\n\t\t\t\t\t}\n\n\t\t\t\t}).block(Duration.ofSeconds(30));\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/reactive/HttpTraceWebFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2018-02-08 21:07:06","commitOrder":3,"curCode":"\tpublic void filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(),\n\t\t\t\tnew MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository\n\t\t\t\t.findAll().get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","date":"2018-02-08 21:08:27","endLine":104,"groupId":"7583","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"filterCapturesPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/70/8a03135c0dd809b8e4a49a6e210a95d2483521.src","preCode":"\tpublic void filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(),\n\t\t\t\tnew MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository\n\t\t\t\t.findAll().get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/servlet/HttpTraceFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"}],"commitId":"9d67400afa1b933d7cd5cdbda335d251ef8ea4dd","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-21 00:54:08","modifiedFileCount":"19","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-02-08 21:07:06","codes":[{"authorDate":"2019-02-09 01:35:12","commitOrder":4,"curCode":"\tpublic void filterCapturesSessionIdWhenSessionIsUsed() {\n\t\texecuteFilter(\n\t\t\t\tMockServerWebExchange\n\t\t\t\t\t\t.from(MockServerHttpRequest.get(\"https://api.example.com\")),\n\t\t\t\t(exchange) -> {\n\t\t\t\t\texchange.getSession().block(Duration.ofSeconds(30)).getAttributes()\n\t\t\t\t\t\t\t.put(\"a\", \"alpha\");\n\t\t\t\t\treturn Mono.empty();\n\t\t\t\t}).block(Duration.ofSeconds(30));\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","date":"2019-02-09 01:35:12","endLine":79,"groupId":"15023","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"filterCapturesSessionIdWhenSessionIsUsed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/af/82cc82bfa804eb3fd7903d149187840a3e73f9.src","preCode":"\tpublic void filterCapturesSessionIdWhenSessionIsUsed()\n\t\t\tthrows ServletException, IOException {\n\t\tthis.filter.filter(\n\t\t\t\tMockServerWebExchange\n\t\t\t\t\t\t.from(MockServerHttpRequest.get(\"https://api.example.com\")),\n\t\t\t\t(exchange) -> {\n\t\t\t\t\texchange.getSession().block(Duration.ofSeconds(30)).getAttributes()\n\t\t\t\t\t\t\t.put(\"a\", \"alpha\");\n\t\t\t\t\treturn Mono.empty();\n\t\t\t\t}).block(Duration.ofSeconds(30));\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/reactive/HttpTraceWebFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2018-02-08 21:07:06","commitOrder":4,"curCode":"\tpublic void filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(),\n\t\t\t\tnew MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository\n\t\t\t\t.findAll().get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","date":"2018-02-08 21:08:27","endLine":104,"groupId":"7583","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"filterCapturesPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/70/8a03135c0dd809b8e4a49a6e210a95d2483521.src","preCode":"\tpublic void filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(),\n\t\t\t\tnew MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository\n\t\t\t\t.findAll().get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/servlet/HttpTraceFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"}],"commitId":"99656b9dd8e26b0741d55e9937d8c1aa8aa751a9","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-02-09 01:35:12","modifiedFileCount":"3","status":"M","submitter":"Brian Clozel"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid filterCapturesSessionIdWhenSessionIsUsed() {\n\t\texecuteFilter(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\")), (exchange) -> {\n\t\t\texchange.getSession().block(Duration.ofSeconds(30)).getAttributes().put(\"a\", \"alpha\");\n\t\t\treturn Mono.empty();\n\t\t}).block(Duration.ofSeconds(30));\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","date":"2019-06-07 19:25:54","endLine":72,"groupId":"15023","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"filterCapturesSessionIdWhenSessionIsUsed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/0f/a0c8e2ef89447a25283cac71182ef2f0bafd3a.src","preCode":"\tpublic void filterCapturesSessionIdWhenSessionIsUsed() {\n\t\texecuteFilter(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\")), (exchange) -> {\n\t\t\texchange.getSession().block(Duration.ofSeconds(30)).getAttributes().put(\"a\", \"alpha\");\n\t\t\treturn Mono.empty();\n\t\t}).block(Duration.ofSeconds(30));\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/reactive/HttpTraceWebFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(), new MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll()\n\t\t\t\t.get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":99,"groupId":"7583","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"filterCapturesPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/48/fdcbc42c8a22b1af73456b32afd9238802e1ac.src","preCode":"\tpublic void filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(), new MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll()\n\t\t\t\t.get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/servlet/HttpTraceFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2021-06-04 23:49:52","commitOrder":6,"curCode":"\tvoid filterCapturesSessionIdWhenSessionIsUsed() {\n\t\texecuteFilter(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\")),\n\t\t\t\t(exchange) -> exchange.getSession().doOnNext((session) -> session.getAttributes().put(\"a\", \"alpha\"))\n\t\t\t\t\t\t.then());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","date":"2021-06-04 23:49:52","endLine":71,"groupId":"10348","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"filterCapturesSessionIdWhenSessionIsUsed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/af/ecd178f8eafc2d1f7481afce5e791168000b38.src","preCode":"\tvoid filterCapturesSessionIdWhenSessionIsUsed() {\n\t\texecuteFilter(MockServerWebExchange.from(MockServerHttpRequest.get(\"https://api.example.com\")), (exchange) -> {\n\t\t\texchange.getSession().block(Duration.ofSeconds(30)).getAttributes().put(\"a\", \"alpha\");\n\t\t\treturn Mono.empty();\n\t\t}).block(Duration.ofSeconds(30));\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\tSession session = this.repository.findAll().get(0).getSession();\n\t\tassertThat(session).isNotNull();\n\t\tassertThat(session.getId()).isNotNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/reactive/HttpTraceWebFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(), new MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll()\n\t\t\t\t.get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":99,"groupId":"10348","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"filterCapturesPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/48/fdcbc42c8a22b1af73456b32afd9238802e1ac.src","preCode":"\tvoid filterCapturesPrincipal() throws ServletException, IOException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tPrincipal principal = mock(Principal.class);\n\t\tgiven(principal.getName()).willReturn(\"alice\");\n\t\trequest.setUserPrincipal(principal);\n\t\tthis.filter.doFilter(request, new MockHttpServletResponse(), new MockFilterChain());\n\t\tassertThat(this.repository.findAll()).hasSize(1);\n\t\torg.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll()\n\t\t\t\t.get(0).getPrincipal();\n\t\tassertThat(tracedPrincipal).isNotNull();\n\t\tassertThat(tracedPrincipal.getName()).isEqualTo(\"alice\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/http/servlet/HttpTraceFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"5ac503817695d94154cebafc46200733d3d1ab45","commitMessage":"@@@Merge branch '2.4.x'\n","date":"2021-06-04 23:49:52","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"}]
