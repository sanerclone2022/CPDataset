[{"authorTime":"2018-02-23 03:55:11","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void bindToClassWhenIterableShouldBindNestedBasedOnInstance() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value-bean.int-value\", \"123\");\n\t\tsource.put(\"foo.value-bean.string-value\", \"foo\");\n\t\tthis.sources.add(source);\n\t\tExampleNestedBeanWithoutSetterOrType bean = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.of(ExampleNestedBeanWithoutSetterOrType.class))\n\t\t\t\t.get();\n\t\tExampleValueBean valueBean = (ExampleValueBean) bean.getValueBean();\n\t\tassertThat(valueBean.getIntValue()).isEqualTo(123);\n\t\tassertThat(valueBean.getStringValue()).isEqualTo(\"foo\");\n\t}\n","date":"2017-12-12 18:57:30","endLine":285,"groupId":"8149","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToClassWhenIterableShouldBindNestedBasedOnInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/31/c42c80b2def6a1047a275e69110e61be5228d0.src","preCode":"\tpublic void bindToClassWhenIterableShouldBindNestedBasedOnInstance() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value-bean.int-value\", \"123\");\n\t\tsource.put(\"foo.value-bean.string-value\", \"foo\");\n\t\tthis.sources.add(source);\n\t\tExampleNestedBeanWithoutSetterOrType bean = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.of(ExampleNestedBeanWithoutSetterOrType.class))\n\t\t\t\t.get();\n\t\tExampleValueBean valueBean = (ExampleValueBean) bean.getValueBean();\n\t\tassertThat(valueBean.getIntValue()).isEqualTo(123);\n\t\tassertThat(valueBean.getStringValue()).isEqualTo(\"foo\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"NB"},{"authorDate":"2018-02-23 03:55:11","commitOrder":3,"curCode":"\tpublic void bindWhenValueIsConvertedWithPropertyEditorShouldBind() {\n\t\t\r\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"java.lang.RuntimeException\");\n\t\tthis.sources.add(source);\n\t\tExampleWithPropertyEditorType bean = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.of(ExampleWithPropertyEditorType.class)).get();\n\t\tassertThat(bean.getValue()).isEqualTo(RuntimeException.class);\n\t}\n","date":"2018-02-23 13:26:36","endLine":477,"groupId":"1128","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bindWhenValueIsConvertedWithPropertyEditorShouldBind","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8f/60f6ac3ac63968043d2b415974b88d5cba3d64.src","preCode":"\tpublic void bindWhenValueIsConvertedWithPropertyEditorShouldBind() {\n\t\t\r\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"java.lang.RuntimeException\");\n\t\tthis.sources.add(source);\n\t\tExampleWithPropertyEditorType bean = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.of(ExampleWithPropertyEditorType.class)).get();\n\t\tassertThat(bean.getValue()).isEqualTo(RuntimeException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":469,"status":"B"}],"commitId":"3dea6fc645a6157447a2e98a036b01fcd2fcce00","commitMessage":"@@@Fix bind TypeConverter delegation with collections\n\nUpdate `BindConverter` so that delegation to `SimpleTypeConverter` also\nworks with Collections and Arrays.\n\nPrior to this commit.  conversion that relied on a `PropertyEditor` would\nonly work for simple types. For example.  \"String -> Class<?>\" would use\nthe `ClassEditor` but \"String -> List<Class<?>>\" would fail.\n\nThe `BindConverter` now uses a minimal `ConversionService` as an adapter\nto the `SimpleTypeConverter`. This allows us to use the same delimited\nstring conversion logic as the `ApplicationConverter`.\n\nFixes gh-12166\n","date":"2018-02-23 13:26:36","modifiedFileCount":"7","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid bindToClassWhenIterableShouldBindNestedBasedOnInstance() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value-bean.int-value\", \"123\");\n\t\tsource.put(\"foo.value-bean.string-value\", \"foo\");\n\t\tthis.sources.add(source);\n\t\tExampleNestedBeanWithoutSetterOrType bean = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.of(ExampleNestedBeanWithoutSetterOrType.class)).get();\n\t\tExampleValueBean valueBean = (ExampleValueBean) bean.getValueBean();\n\t\tassertThat(valueBean.getIntValue()).isEqualTo(123);\n\t\tassertThat(valueBean.getStringValue()).isEqualTo(\"foo\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":271,"groupId":"101458","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToClassWhenIterableShouldBindNestedBasedOnInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d4/449a6e5fb91916f2e96ce10c7c3ccca2bd5803.src","preCode":"\tpublic void bindToClassWhenIterableShouldBindNestedBasedOnInstance() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value-bean.int-value\", \"123\");\n\t\tsource.put(\"foo.value-bean.string-value\", \"foo\");\n\t\tthis.sources.add(source);\n\t\tExampleNestedBeanWithoutSetterOrType bean = this.binder\n\t\t\t\t.bind(\"foo\", Bindable.of(ExampleNestedBeanWithoutSetterOrType.class)).get();\n\t\tExampleValueBean valueBean = (ExampleValueBean) bean.getValueBean();\n\t\tassertThat(valueBean.getIntValue()).isEqualTo(123);\n\t\tassertThat(valueBean.getStringValue()).isEqualTo(\"foo\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid bindWhenValueIsConvertedWithPropertyEditorShouldBind() {\n\t\t\r\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"java.lang.RuntimeException\");\n\t\tthis.sources.add(source);\n\t\tExampleWithPropertyEditorType bean = this.binder.bind(\"foo\", Bindable.of(ExampleWithPropertyEditorType.class))\n\t\t\t\t.get();\n\t\tassertThat(bean.getValue()).isEqualTo(RuntimeException.class);\n\t}\n","date":"2019-06-07 19:25:54","endLine":443,"groupId":"101458","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bindWhenValueIsConvertedWithPropertyEditorShouldBind","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d4/449a6e5fb91916f2e96ce10c7c3ccca2bd5803.src","preCode":"\tpublic void bindWhenValueIsConvertedWithPropertyEditorShouldBind() {\n\t\t\r\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"java.lang.RuntimeException\");\n\t\tthis.sources.add(source);\n\t\tExampleWithPropertyEditorType bean = this.binder.bind(\"foo\", Bindable.of(ExampleWithPropertyEditorType.class))\n\t\t\t\t.get();\n\t\tassertThat(bean.getValue()).isEqualTo(RuntimeException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
