[{"authorTime":"2018-02-13 01:00:50","codes":[{"authorDate":"2018-02-13 01:00:50","commitOrder":1,"curCode":"\tpublic void emptyCompositeIsCreatedWhenNoMeterRegistriesAreAutoConfigured() {\n\t\tnew ApplicationContextRunner().with(MetricsRun.limitedTo()).run((context) -> {\n\t\t\tMeterRegistry registry = context.getBean(MeterRegistry.class);\n\t\t\tassertThat(registry).isInstanceOf(CompositeMeterRegistry.class);\n\t\t\tassertThat(((CompositeMeterRegistry) registry).getRegistries()).isEmpty();\n\t\t});\n\t}\n","date":"2018-02-13 01:05:05","endLine":72,"groupId":"1397","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"emptyCompositeIsCreatedWhenNoMeterRegistriesAreAutoConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/0c/9784b5d278c23e4bf5e1a9f72e73db7b210611.src","preCode":"\tpublic void emptyCompositeIsCreatedWhenNoMeterRegistriesAreAutoConfigured() {\n\t\tnew ApplicationContextRunner().with(MetricsRun.limitedTo()).run((context) -> {\n\t\t\tMeterRegistry registry = context.getBean(MeterRegistry.class);\n\t\t\tassertThat(registry).isInstanceOf(CompositeMeterRegistry.class);\n\t\t\tassertThat(((CompositeMeterRegistry) registry).getRegistries()).isEmpty();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2018-02-13 01:00:50","commitOrder":1,"curCode":"\tpublic void compositeCreatedWithMultipleRegistries() {\n\t\tnew ApplicationContextRunner()\n\t\t\t\t.with(MetricsRun.limitedTo(GraphiteMetricsExportAutoConfiguration.class,\n\t\t\t\t\t\tJmxMetricsExportAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tMeterRegistry registry = context.getBean(MeterRegistry.class);\n\t\t\t\t\tassertThat(registry).isInstanceOf(CompositeMeterRegistry.class);\n\t\t\t\t\tassertThat(((CompositeMeterRegistry) registry).getRegistries())\n\t\t\t\t\t\t\t.hasAtLeastOneElementOfType(GraphiteMeterRegistry.class)\n\t\t\t\t\t\t\t.hasAtLeastOneElementOfType(JmxMeterRegistry.class);\n\t\t\t\t});\n\t}\n","date":"2018-02-13 01:05:05","endLine":104,"groupId":"1397","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"compositeCreatedWithMultipleRegistries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/0c/9784b5d278c23e4bf5e1a9f72e73db7b210611.src","preCode":"\tpublic void compositeCreatedWithMultipleRegistries() {\n\t\tnew ApplicationContextRunner()\n\t\t\t\t.with(MetricsRun.limitedTo(GraphiteMetricsExportAutoConfiguration.class,\n\t\t\t\t\t\tJmxMetricsExportAutoConfiguration.class))\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tMeterRegistry registry = context.getBean(MeterRegistry.class);\n\t\t\t\t\tassertThat(registry).isInstanceOf(CompositeMeterRegistry.class);\n\t\t\t\t\tassertThat(((CompositeMeterRegistry) registry).getRegistries())\n\t\t\t\t\t\t\t.hasAtLeastOneElementOfType(GraphiteMeterRegistry.class)\n\t\t\t\t\t\t\t.hasAtLeastOneElementOfType(JmxMeterRegistry.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"e49d50fe9db86c7d2f1ff8a50e5fdb5d58836e2b","commitMessage":"@@@Improve testing of metrics auto-configuration\n\nCloses gh-11970\n","date":"2018-02-13 01:05:05","modifiedFileCount":"7","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid emptyCompositeIsCreatedWhenNoMeterRegistriesAreAutoConfigured() {\n\t\tnew ApplicationContextRunner().with(MetricsRun.limitedTo()).run((context) -> {\n\t\t\tMeterRegistry registry = context.getBean(MeterRegistry.class);\n\t\t\tassertThat(registry).isInstanceOf(CompositeMeterRegistry.class);\n\t\t\tassertThat(((CompositeMeterRegistry) registry).getRegistries()).isEmpty();\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":81,"groupId":"10899","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"emptyCompositeIsCreatedWhenNoMeterRegistriesAreAutoConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/18/1378b07f44e96fffaba0745986ddc7ab4c7283.src","preCode":"\tpublic void emptyCompositeIsCreatedWhenNoMeterRegistriesAreAutoConfigured() {\n\t\tnew ApplicationContextRunner().with(MetricsRun.limitedTo()).run((context) -> {\n\t\t\tMeterRegistry registry = context.getBean(MeterRegistry.class);\n\t\t\tassertThat(registry).isInstanceOf(CompositeMeterRegistry.class);\n\t\t\tassertThat(((CompositeMeterRegistry) registry).getRegistries()).isEmpty();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid compositeCreatedWithMultipleRegistries() {\n\t\tnew ApplicationContextRunner().with(MetricsRun.limitedTo(GraphiteMetricsExportAutoConfiguration.class,\n\t\t\t\tJmxMetricsExportAutoConfiguration.class)).run((context) -> {\n\t\t\t\t\tMeterRegistry registry = context.getBean(MeterRegistry.class);\n\t\t\t\t\tassertThat(registry).isInstanceOf(CompositeMeterRegistry.class);\n\t\t\t\t\tassertThat(((CompositeMeterRegistry) registry).getRegistries())\n\t\t\t\t\t\t\t.hasAtLeastOneElementOfType(GraphiteMeterRegistry.class)\n\t\t\t\t\t\t\t.hasAtLeastOneElementOfType(JmxMeterRegistry.class);\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":110,"groupId":"10899","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"compositeCreatedWithMultipleRegistries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/18/1378b07f44e96fffaba0745986ddc7ab4c7283.src","preCode":"\tpublic void compositeCreatedWithMultipleRegistries() {\n\t\tnew ApplicationContextRunner().with(MetricsRun.limitedTo(GraphiteMetricsExportAutoConfiguration.class,\n\t\t\t\tJmxMetricsExportAutoConfiguration.class)).run((context) -> {\n\t\t\t\t\tMeterRegistry registry = context.getBean(MeterRegistry.class);\n\t\t\t\t\tassertThat(registry).isInstanceOf(CompositeMeterRegistry.class);\n\t\t\t\t\tassertThat(((CompositeMeterRegistry) registry).getRegistries())\n\t\t\t\t\t\t\t.hasAtLeastOneElementOfType(GraphiteMeterRegistry.class)\n\t\t\t\t\t\t\t.hasAtLeastOneElementOfType(JmxMeterRegistry.class);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
