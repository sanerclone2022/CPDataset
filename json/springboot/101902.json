[{"authorTime":"2018-06-20 23:51:56","codes":[{"authorDate":"2018-01-11 18:15:29","commitOrder":4,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","date":"2018-01-11 18:15:29","endLine":127,"groupId":"11024","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1c/2b433fa9fa702fbe60054845fe4475700ecdbc.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"NB"},{"authorDate":"2018-06-20 23:51:56","commitOrder":4,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient().build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2018-06-20 23:51:56","endLine":130,"groupId":"11701","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/aa/956ab6345c0c5c6d46e4c953a4866059146512.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient().build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"}],"commitId":"3ea7c2e003dbf02cae318e7cae3c3a6553a35e4a","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-06-20 23:51:56","modifiedFileCount":"4","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-12-20 23:30:51","codes":[{"authorDate":"2018-12-20 23:30:51","commitOrder":5,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2018-12-20 23:30:51","endLine":133,"groupId":"11024","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/efb072bf19178cd3bf5a868ea286c7a541560c.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2018-12-20 23:30:51","commitOrder":5,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient().build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2018-12-20 23:30:51","endLine":130,"groupId":"11701","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/dd/9aff7792640ba6447644745ae670ee2cdb9d08.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient().build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"9d2d6d5812d34b0bc04da3a124b9c5c0da511c04","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-20 23:30:51","modifiedFileCount":"22","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2018-12-20 23:30:51","commitOrder":6,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2018-12-20 23:30:51","endLine":133,"groupId":"11024","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/efb072bf19178cd3bf5a868ea286c7a541560c.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient().build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2019-06-07 19:25:54","endLine":125,"groupId":"11701","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/0a/3ec122d875cff05cfdd6c42ee7122ca488c301.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient().build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-09-25 20:57:33","codes":[{"authorDate":"2019-09-25 20:57:33","commitOrder":7,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2019-09-25 20:57:33","endLine":128,"groupId":"11024","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/9a4beef872ac33577a12f400e9ea075125c2a1.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2019-09-25 20:57:33","commitOrder":7,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient().build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2019-09-25 20:57:33","endLine":127,"groupId":"4764","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b3/b93ae078ac7d2761a825d3690b8f233751758d.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient().build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"7548da1b400fe5feac6be7c8e094bfad2f7d5fee","commitMessage":"@@@Merge pull request #18349 from dreis2211\n\n* gh-18349:\n  Fix deprecation warnings caused by BodyInserters.fromObject\n\nCloses gh-18349\n","date":"2019-09-25 20:57:33","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-03-10 20:19:44","codes":[{"authorDate":"2019-09-25 20:57:33","commitOrder":8,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2019-09-25 20:57:33","endLine":128,"groupId":"11024","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/9a4beef872ac33577a12f400e9ea075125c2a1.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"N"},{"authorDate":"2020-03-10 20:19:44","commitOrder":8,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient(this.webServer.getPort()).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2020-03-10 20:30:25","endLine":157,"groupId":"11878","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/86/ad899b16e2c914ddd11566da99d47e393a0fc2.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient().build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"b8cb61bbe09f26576a5d362b0e8e490444fedc95","commitMessage":"@@@Align embedded Jetty's graceful shutdown behaviour with standalone\n\nStandalone Jetty will.  by default.  include a Connection: close header\nin all responses once graceful shutdown has begun. Previously.  the\nway in which we were shutting Jetty down did not cause this to happen.\n\nThis commit updates JettyGracefulShutdown to shut down each connector.\nThis causes Jetty to send the Connection: close header.  aligning its\nbehaviour more closely with what it does when used standalone. The\ntests have also been updated to verify this behaviour and to ensure\nthat the correct port is used for requests even once the connector is\nno longer bound and the web server no longer knows its ephemeral port.\n\nSee gh-4657\n","date":"2020-03-10 20:30:25","modifiedFileCount":"10","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-09-30 19:21:16","codes":[{"authorDate":"2020-09-30 19:21:16","commitOrder":9,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2020-09-30 19:46:57","endLine":145,"groupId":"11024","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/7ed7191ac2d8b055dd714c69dbf65005365e00.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2020-09-30 19:21:16","commitOrder":9,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient(this.webServer.getPort()).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2020-09-30 19:46:57","endLine":151,"groupId":"7933","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d6/bb518e5d2bfdd853e23a1cbe6b5933655a05b4.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient(this.webServer.getPort()).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"366fec33d06b6ab4ee4f1bc9513c07a227d207de","commitMessage":"@@@Adapt to API change in Spring Framework 5.3.0 snapshots\n\nSee gh-23534\n","date":"2020-09-30 19:46:57","modifiedFileCount":"9","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2020-09-30 19:21:16","codes":[{"authorDate":"2020-11-05 19:40:07","commitOrder":10,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyStorePassword(\"secret\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2020-11-05 19:40:07","endLine":144,"groupId":"11024","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5d/b51932a15f6620f1c63e91b0ed2547bccf62d1.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2020-09-30 19:21:16","commitOrder":10,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient(this.webServer.getPort()).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2020-09-30 19:46:57","endLine":151,"groupId":"7933","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d6/bb518e5d2bfdd853e23a1cbe6b5933655a05b4.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient(this.webServer.getPort()).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"06f37f429543da621cfff37c094478c1fc6939f7","commitMessage":"@@@Merge branch '2.3.x'\n\nCloses gh-24053\n","date":"2020-11-05 19:40:07","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-05-17 16:15:00","codes":[{"authorDate":"2020-11-05 19:40:07","commitOrder":11,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyStorePassword(\"secret\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2020-11-05 19:40:07","endLine":144,"groupId":"101902","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5d/b51932a15f6620f1c63e91b0ed2547bccf62d1.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyStorePassword(\"secret\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"},{"authorDate":"2021-05-17 16:15:00","commitOrder":11,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile) {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient(this.webServer.getPort()).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2021-05-17 16:15:00","endLine":148,"groupId":"101902","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2b/0cba9e30d9cdef196c7f8b686f5aa516f83a03.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowReactiveWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tWebClient client = getWebClient(this.webServer.getPort()).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"21a3f03d20a24934e38a26843872778598da7ad3","commitMessage":"@@@Merge pull request #26441 from weixsun\n\n* pr/26441:\n  Polish \"Remove unnecessary throws declaration in tests\"\n  Remove unnecessary throws declaration in tests\n\nCloses gh-26441\n","date":"2021-05-17 16:15:00","modifiedFileCount":"172","status":"M","submitter":"Stephane Nicoll"}]
