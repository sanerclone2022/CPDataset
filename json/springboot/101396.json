[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToArrayWhenNonSequentialShouldThrowException() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_ARRAY);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":162,"groupId":"7573","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToArrayWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/96/0001c2df9ea9e717522ae9991b34363e75d08c.src","preCode":"\tpublic void bindToArrayWhenNonSequentialShouldThrowException() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_ARRAY);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToCollectionWhenNonSequentialShouldThrowException() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_LIST);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tex.printStackTrace();\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound).hasSize(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":138,"groupId":"1788","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToCollectionWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/87/79d5738f38b77fcf8a518875cdfd10bb408942.src","preCode":"\tpublic void bindToCollectionWhenNonSequentialShouldThrowException() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_LIST);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tex.printStackTrace();\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound).hasSize(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToArrayWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_ARRAY);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","date":"2017-12-12 18:57:30","endLine":162,"groupId":"7573","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToArrayWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d6/bd4e57e5cc8a7d66facf2609014846ac6b6f0a.src","preCode":"\tpublic void bindToArrayWhenNonSequentialShouldThrowException() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_ARRAY);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToCollectionWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_LIST);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tex.printStackTrace();\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound).hasSize(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","date":"2017-12-12 18:57:30","endLine":136,"groupId":"1788","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToCollectionWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/91/2409782fa790c57241a30e2b054fa4da84ba1b.src","preCode":"\tpublic void bindToCollectionWhenNonSequentialShouldThrowException() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_LIST);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tex.printStackTrace();\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound).hasSize(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-07-31 14:17:46","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void bindToArrayWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_ARRAY);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","date":"2017-12-12 18:57:30","endLine":162,"groupId":"7573","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToArrayWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d6/bd4e57e5cc8a7d66facf2609014846ac6b6f0a.src","preCode":"\tpublic void bindToArrayWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_ARRAY);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"},{"authorDate":"2018-07-31 14:17:46","commitOrder":3,"curCode":"\tpublic void bindToCollectionWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_LIST);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound).hasSize(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","date":"2018-07-31 14:17:46","endLine":134,"groupId":"1485","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToCollectionWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2b/d86d5ea21b8c17b66bf1a404421f13fc37dc1e.src","preCode":"\tpublic void bindToCollectionWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_LIST);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tex.printStackTrace();\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound).hasSize(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"d12a099a6dfd9f323cab0cc200990cfed3dab282","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-07-31 14:17:46","modifiedFileCount":"4","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-02-04 20:36:33","codes":[{"authorDate":"2019-02-04 20:36:33","commitOrder":4,"curCode":"\tpublic void bindToArrayWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\tassertThatExceptionOfType(BindException.class)\n\t\t\t\t.isThrownBy(() -> this.binder.bind(\"foo\", INTEGER_ARRAY))\n\t\t\t\t.satisfies((ex) -> {\n\t\t\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t\t\t});\n\t}\n","date":"2019-02-04 20:36:33","endLine":158,"groupId":"2994","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToArrayWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d2/ff61a9cd503bba86a5a6d857abaf6026d42ed5.src","preCode":"\tpublic void bindToArrayWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_ARRAY);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2019-02-04 20:36:33","commitOrder":4,"curCode":"\tpublic void bindToCollectionWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\tassertThatExceptionOfType(BindException.class)\n\t\t\t\t.isThrownBy(() -> this.binder.bind(\"foo\", INTEGER_LIST))\n\t\t\t\t.satisfies((ex) -> {\n\t\t\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\t\t\tassertThat(unbound).hasSize(1);\n\t\t\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t\t\t});\n\t}\n","date":"2019-02-04 20:36:33","endLine":134,"groupId":"2994","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToCollectionWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/85/d2e0dab37693a9c6747742b0ac8ec170b82022.src","preCode":"\tpublic void bindToCollectionWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\ttry {\n\t\t\tthis.binder.bind(\"foo\", INTEGER_LIST);\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t\tcatch (BindException ex) {\n\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex\n\t\t\t\t\t.getCause()).getUnboundProperties();\n\t\t\tassertThat(unbound).hasSize(1);\n\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"45cc649c7db6c5f205f512878956890078d2ecbf","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-02-04 20:36:33","modifiedFileCount":"26","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid bindToArrayWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind(\"foo\", INTEGER_ARRAY))\n\t\t\t\t.satisfies((ex) -> {\n\t\t\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex.getCause())\n\t\t\t\t\t\t\t.getUnboundProperties();\n\t\t\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":150,"groupId":"101396","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToArrayWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/58/82c4a94946a128a32edb27b4a80a5f12d6fe87.src","preCode":"\tpublic void bindToArrayWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind(\"foo\", INTEGER_ARRAY))\n\t\t\t\t.satisfies((ex) -> {\n\t\t\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex.getCause())\n\t\t\t\t\t\t\t.getUnboundProperties();\n\t\t\t\t\tassertThat(unbound.size()).isEqualTo(1);\n\t\t\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid bindToCollectionWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind(\"foo\", INTEGER_LIST))\n\t\t\t\t.satisfies((ex) -> {\n\t\t\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex.getCause())\n\t\t\t\t\t\t\t.getUnboundProperties();\n\t\t\t\t\tassertThat(unbound).hasSize(1);\n\t\t\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":125,"groupId":"101396","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToCollectionWhenNonSequentialShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/022252c53b76e3ffcb116feb8baa62bd6611cf.src","preCode":"\tpublic void bindToCollectionWhenNonSequentialShouldThrowException() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0]\", \"2\");\n\t\tsource.put(\"foo[1]\", \"1\");\n\t\tsource.put(\"foo[3]\", \"3\");\n\t\tthis.sources.add(source);\n\t\tassertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind(\"foo\", INTEGER_LIST))\n\t\t\t\t.satisfies((ex) -> {\n\t\t\t\t\tSet<ConfigurationProperty> unbound = ((UnboundConfigurationPropertiesException) ex.getCause())\n\t\t\t\t\t\t\t.getUnboundProperties();\n\t\t\t\t\tassertThat(unbound).hasSize(1);\n\t\t\t\t\tConfigurationProperty property = unbound.iterator().next();\n\t\t\t\t\tassertThat(property.getName().toString()).isEqualTo(\"foo[3]\");\n\t\t\t\t\tassertThat(property.getValue()).isEqualTo(\"3\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
