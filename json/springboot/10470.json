[{"authorTime":"2018-01-10 12:57:10","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":1,"curCode":"\tpublic void getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue() {\n\t\tload(TestEndpoint.class, (id) -> 500L, (discoverer) -> {\n\t\t\tMap<String, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(\"test\").getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\"update\", \"deleteSomething\");\n\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\tassertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive())\n\t\t\t\t\t.isEqualTo(500);\n\t\t});\n\t}\n","date":"2018-01-20 12:44:24","endLine":165,"groupId":"6825","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9b/92b4c28e712bdd12a3e1df1b8d48dadf34f195.src","preCode":"\tpublic void getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue() {\n\t\tload(TestEndpoint.class, (id) -> 500L, (discoverer) -> {\n\t\t\tMap<String, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(\"test\").getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\"update\", \"deleteSomething\");\n\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\tassertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive())\n\t\t\t\t\t.isEqualTo(500);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"},{"authorDate":"2018-01-10 12:57:10","commitOrder":1,"curCode":"\tpublic void getEndpointsShouldCacheReadOperations() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (id) -> 500L,\n\t\t\t\t(discoverer) -> {\n\t\t\t\t\tMap<String, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\t\t\tendpoints.get(\"test\").getOperations());\n\t\t\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\t\t\"update\", \"deleteSomething\", \"getAnother\");\n\t\t\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\t\t\tassertThat(getInvoker(getAll))\n\t\t\t\t\t\t\t.isInstanceOf(CachingOperationInvoker.class);\n\t\t\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll))\n\t\t\t\t\t\t\t.getTimeToLive()).isEqualTo(500);\n\t\t\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\t\t\tassertThat(getInvoker(getAnother))\n\t\t\t\t\t\t\t.isInstanceOf(CachingOperationInvoker.class);\n\t\t\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAnother))\n\t\t\t\t\t\t\t.getTimeToLive()).isEqualTo(500);\n\t\t\t\t});\n\t}\n","date":"2018-01-20 12:44:24","endLine":188,"groupId":"13490","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldCacheReadOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9b/92b4c28e712bdd12a3e1df1b8d48dadf34f195.src","preCode":"\tpublic void getEndpointsShouldCacheReadOperations() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (id) -> 500L,\n\t\t\t\t(discoverer) -> {\n\t\t\t\t\tMap<String, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\t\t\tendpoints.get(\"test\").getOperations());\n\t\t\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\t\t\"update\", \"deleteSomething\", \"getAnother\");\n\t\t\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\t\t\tassertThat(getInvoker(getAll))\n\t\t\t\t\t\t\t.isInstanceOf(CachingOperationInvoker.class);\n\t\t\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll))\n\t\t\t\t\t\t\t.getTimeToLive()).isEqualTo(500);\n\t\t\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\t\t\tassertThat(getInvoker(getAnother))\n\t\t\t\t\t\t\t.isInstanceOf(CachingOperationInvoker.class);\n\t\t\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAnother))\n\t\t\t\t\t\t\t.getTimeToLive()).isEqualTo(500);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"}],"commitId":"1d39feffeabf4b94e3f900b941b58e0443d5887a","commitMessage":"@@@Overhaul actuator endpoint code\n\nRefactor several areas of the actuator endpoint code in order to make\nfuture extensions easier. The primary goal is to introduce the concept\nof an `ExposableEndpoint` that has technology specific subclasses and\ncan carry additional data for filters to use. Many other changes have\nbeen made along the way including:\n\n* A new EndpointSupplier interface that allows cleaner separation of\n  supplying vs discovering endpoints. This allows cleaner class names\n  and allows for better auto-configuration since a user can choose to\n  provide their own supplier entirely.\n\n* A `DiscoveredEndpoint` interface that allows the `EndpointFilter`\n  to be greatly simplified. A filter now doesn't need to know about\n  discovery concerns unless absolutely necessary.\n\n* Improved naming and package structure. Many technology specific\n  concerns are now grouped in a better way. Related concerns are\n  co-located and concepts from one area no longer leakage into another.\n\n* Simplified `HandlerMapping` implementations. Many common concerns have\n  been pulled up helping to create simpler subclasses.\n\n* Simplified JMX adapters. Many of the intermediary `Info` classes have\n  been removed. The `DiscoveredJmxOperation` is now responsible for\n  mapping methods to operations.\n\n* A specific @`HealthEndpointCloudFoundryExtension` for Cloud Foundry.\n  The extension logic used to create a \"full\" health endpoint extension\n  has been made explicit.\n\nFixes gh-11428\nFixes gh-11581\n","date":"2018-01-20 12:44:24","modifiedFileCount":"63","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue() {\n\t\tload(TestEndpoint.class, (id) -> 500L, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\"update\", \"deleteSomething\");\n\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\tassertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive())\n\t\t\t\t\t.isEqualTo(500);\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":159,"groupId":"6825","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/19/ed42f56cd42d97cd1ad433b1243ccfa1f4a7ad.src","preCode":"\tpublic void getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue() {\n\t\tload(TestEndpoint.class, (id) -> 500L, (discoverer) -> {\n\t\t\tMap<String, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(\"test\").getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\"update\", \"deleteSomething\");\n\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\tassertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive())\n\t\t\t\t\t.isEqualTo(500);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsShouldCacheReadOperations() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (id) -> 500L,\n\t\t\t\t(discoverer) -> {\n\t\t\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(\n\t\t\t\t\t\t\tdiscoverer);\n\t\t\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\t\t\"update\", \"deleteSomething\", \"getAnother\");\n\t\t\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\t\t\tassertThat(getInvoker(getAll))\n\t\t\t\t\t\t\t.isInstanceOf(CachingOperationInvoker.class);\n\t\t\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll))\n\t\t\t\t\t\t\t.getTimeToLive()).isEqualTo(500);\n\t\t\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\t\t\tassertThat(getInvoker(getAnother))\n\t\t\t\t\t\t\t.isInstanceOf(CachingOperationInvoker.class);\n\t\t\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAnother))\n\t\t\t\t\t\t\t.getTimeToLive()).isEqualTo(500);\n\t\t\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":183,"groupId":"6825","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldCacheReadOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/19/ed42f56cd42d97cd1ad433b1243ccfa1f4a7ad.src","preCode":"\tpublic void getEndpointsShouldCacheReadOperations() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (id) -> 500L,\n\t\t\t\t(discoverer) -> {\n\t\t\t\t\tMap<String, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\t\t\tendpoints.get(\"test\").getOperations());\n\t\t\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\",\n\t\t\t\t\t\t\t\"update\", \"deleteSomething\", \"getAnother\");\n\t\t\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\t\t\tassertThat(getInvoker(getAll))\n\t\t\t\t\t\t\t.isInstanceOf(CachingOperationInvoker.class);\n\t\t\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll))\n\t\t\t\t\t\t\t.getTimeToLive()).isEqualTo(500);\n\t\t\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\t\t\tassertThat(getInvoker(getAnother))\n\t\t\t\t\t\t\t.isInstanceOf(CachingOperationInvoker.class);\n\t\t\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAnother))\n\t\t\t\t\t\t\t.getTimeToLive()).isEqualTo(500);\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue() {\n\t\tload(TestEndpoint.class, (id) -> 500L, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\", \"update\", \"deleteSomething\");\n\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\tassertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive()).isEqualTo(500);\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":149,"groupId":"10470","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c6/dc8be8889645fc8f3f245fb547255d5bc9d04c.src","preCode":"\tpublic void getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue() {\n\t\tload(TestEndpoint.class, (id) -> 500L, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\", \"update\", \"deleteSomething\");\n\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\tassertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive()).isEqualTo(500);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getEndpointsShouldCacheReadOperations() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (id) -> 500L, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\", \"update\", \"deleteSomething\",\n\t\t\t\t\t\"getAnother\");\n\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\tassertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive()).isEqualTo(500);\n\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\tassertThat(getInvoker(getAnother)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAnother)).getTimeToLive()).isEqualTo(500);\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":167,"groupId":"10470","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldCacheReadOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c6/dc8be8889645fc8f3f245fb547255d5bc9d04c.src","preCode":"\tpublic void getEndpointsShouldCacheReadOperations() {\n\t\tload(AdditionalOperationJmxEndpointConfiguration.class, (id) -> 500L, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer);\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tMap<String, JmxOperation> operationByName = mapOperations(\n\t\t\t\t\tendpoints.get(EndpointId.of(\"test\")).getOperations());\n\t\t\tassertThat(operationByName).containsOnlyKeys(\"getAll\", \"getSomething\", \"update\", \"deleteSomething\",\n\t\t\t\t\t\"getAnother\");\n\t\t\tJmxOperation getAll = operationByName.get(\"getAll\");\n\t\t\tassertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive()).isEqualTo(500);\n\t\t\tJmxOperation getAnother = operationByName.get(\"getAnother\");\n\t\t\tassertThat(getInvoker(getAnother)).isInstanceOf(CachingOperationInvoker.class);\n\t\t\tassertThat(((CachingOperationInvoker) getInvoker(getAnother)).getTimeToLive()).isEqualTo(500);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
