[{"authorTime":"2019-08-28 15:43:48","codes":[{"authorDate":"2019-08-28 15:43:48","commitOrder":1,"curCode":"\tvoid registersRequestMatcherProviderIfMvcPresent() {\n\t\tthis.contextRunner.withUserConfiguration(TestMvcConfiguration.class).run((context) -> {\n\t\t\tAntPathRequestMatcherProvider matcherProvider = context.getBean(AntPathRequestMatcherProvider.class);\n\t\t\tRequestMatcher requestMatcher = matcherProvider.getRequestMatcher(\"/example\");\n\t\t\tassertThat(ReflectionTestUtils.getField(requestMatcher, \"pattern\")).isEqualTo(\"/custom/example\");\n\t\t});\n\t}\n","date":"2019-08-28 15:43:48","endLine":69,"groupId":"12786","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"registersRequestMatcherProviderIfMvcPresent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1c/08e3239ca082b3c985322f3e29bc3b24143bfc.src","preCode":"\tvoid registersRequestMatcherProviderIfMvcPresent() {\n\t\tthis.contextRunner.withUserConfiguration(TestMvcConfiguration.class).run((context) -> {\n\t\t\tAntPathRequestMatcherProvider matcherProvider = context.getBean(AntPathRequestMatcherProvider.class);\n\t\t\tRequestMatcher requestMatcher = matcherProvider.getRequestMatcher(\"/example\");\n\t\t\tassertThat(ReflectionTestUtils.getField(requestMatcher, \"pattern\")).isEqualTo(\"/custom/example\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/SecurityRequestMatchersManagementContextConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2019-08-28 15:43:48","commitOrder":1,"curCode":"\tvoid registersRequestMatcherForJerseyProviderIfJerseyPresentAndMvcAbsent() {\n\t\tthis.contextRunner.withClassLoader(new FilteredClassLoader(\"org.springframework.web.servlet.DispatcherServlet\"))\n\t\t\t\t.withUserConfiguration(TestJerseyConfiguration.class).run((context) -> {\n\t\t\t\t\tAntPathRequestMatcherProvider matcherProvider = context\n\t\t\t\t\t\t\t.getBean(AntPathRequestMatcherProvider.class);\n\t\t\t\t\tRequestMatcher requestMatcher = matcherProvider.getRequestMatcher(\"/example\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(requestMatcher, \"pattern\")).isEqualTo(\"/admin/example\");\n\t\t\t\t});\n\t}\n","date":"2019-08-28 15:43:48","endLine":80,"groupId":"12786","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"registersRequestMatcherForJerseyProviderIfJerseyPresentAndMvcAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1c/08e3239ca082b3c985322f3e29bc3b24143bfc.src","preCode":"\tvoid registersRequestMatcherForJerseyProviderIfJerseyPresentAndMvcAbsent() {\n\t\tthis.contextRunner.withClassLoader(new FilteredClassLoader(\"org.springframework.web.servlet.DispatcherServlet\"))\n\t\t\t\t.withUserConfiguration(TestJerseyConfiguration.class).run((context) -> {\n\t\t\t\t\tAntPathRequestMatcherProvider matcherProvider = context\n\t\t\t\t\t\t\t.getBean(AntPathRequestMatcherProvider.class);\n\t\t\t\t\tRequestMatcher requestMatcher = matcherProvider.getRequestMatcher(\"/example\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(requestMatcher, \"pattern\")).isEqualTo(\"/admin/example\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/SecurityRequestMatchersManagementContextConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"2726540e761ee1891a2a4264bbe5366c0b8e5087","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-17980\n","date":"2019-08-28 15:43:48","modifiedFileCount":"6","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2020-02-19 16:35:47","codes":[{"authorDate":"2020-02-19 16:35:47","commitOrder":2,"curCode":"\tvoid registersRequestMatcherProviderIfMvcPresent() {\n\t\tthis.contextRunner.withUserConfiguration(TestMvcConfiguration.class).run((context) -> {\n\t\t\tAntPathRequestMatcherProvider matcherProvider = context.getBean(AntPathRequestMatcherProvider.class);\n\t\t\tRequestMatcher requestMatcher = matcherProvider.getRequestMatcher(\"/example\");\n\t\t\tassertThat(requestMatcher).extracting(\"pattern\").isEqualTo(\"/custom/example\");\n\t\t});\n\t}\n","date":"2020-02-19 16:35:47","endLine":68,"groupId":"10717","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"registersRequestMatcherProviderIfMvcPresent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fd/54589bc61d754c048d9c4d0f8321d3e139c196.src","preCode":"\tvoid registersRequestMatcherProviderIfMvcPresent() {\n\t\tthis.contextRunner.withUserConfiguration(TestMvcConfiguration.class).run((context) -> {\n\t\t\tAntPathRequestMatcherProvider matcherProvider = context.getBean(AntPathRequestMatcherProvider.class);\n\t\t\tRequestMatcher requestMatcher = matcherProvider.getRequestMatcher(\"/example\");\n\t\t\tassertThat(ReflectionTestUtils.getField(requestMatcher, \"pattern\")).isEqualTo(\"/custom/example\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/SecurityRequestMatchersManagementContextConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-02-19 16:35:47","commitOrder":2,"curCode":"\tvoid registersRequestMatcherForJerseyProviderIfJerseyPresentAndMvcAbsent() {\n\t\tthis.contextRunner.withClassLoader(new FilteredClassLoader(\"org.springframework.web.servlet.DispatcherServlet\"))\n\t\t\t\t.withUserConfiguration(TestJerseyConfiguration.class).run((context) -> {\n\t\t\t\t\tAntPathRequestMatcherProvider matcherProvider = context\n\t\t\t\t\t\t\t.getBean(AntPathRequestMatcherProvider.class);\n\t\t\t\t\tRequestMatcher requestMatcher = matcherProvider.getRequestMatcher(\"/example\");\n\t\t\t\t\tassertThat(requestMatcher).extracting(\"pattern\").isEqualTo(\"/admin/example\");\n\t\t\t\t});\n\t}\n","date":"2020-02-19 16:35:47","endLine":79,"groupId":"10717","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"registersRequestMatcherForJerseyProviderIfJerseyPresentAndMvcAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fd/54589bc61d754c048d9c4d0f8321d3e139c196.src","preCode":"\tvoid registersRequestMatcherForJerseyProviderIfJerseyPresentAndMvcAbsent() {\n\t\tthis.contextRunner.withClassLoader(new FilteredClassLoader(\"org.springframework.web.servlet.DispatcherServlet\"))\n\t\t\t\t.withUserConfiguration(TestJerseyConfiguration.class).run((context) -> {\n\t\t\t\t\tAntPathRequestMatcherProvider matcherProvider = context\n\t\t\t\t\t\t\t.getBean(AntPathRequestMatcherProvider.class);\n\t\t\t\t\tRequestMatcher requestMatcher = matcherProvider.getRequestMatcher(\"/example\");\n\t\t\t\t\tassertThat(ReflectionTestUtils.getField(requestMatcher, \"pattern\")).isEqualTo(\"/admin/example\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/SecurityRequestMatchersManagementContextConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"fc3fb7fb449165903ce907d1846cfc653b3a2ef3","commitMessage":"@@@Merge pull request #20226 from izeye\n\n* pr/20226:\n  Update copyright year of changed files\n  Polish\n\nCloses gh-20226\n","date":"2020-02-19 16:35:47","modifiedFileCount":"16","status":"M","submitter":"Stephane Nicoll"}]
