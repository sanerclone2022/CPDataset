[{"authorTime":"2021-03-25 04:20:59","codes":[{"authorDate":"2021-03-25 04:20:59","commitOrder":1,"curCode":"\tvoid buildWhenDerivedWithNewCredentialsReturnsNewConnectionFactory() {\n\t\tConnectionFactory connectionFactory = ConnectionFactoryBuilder\n\t\t\t\t.withUrl(EmbeddedDatabaseConnection.H2.getUrl(UUID.randomUUID().toString())).build();\n\t\tConnectionFactoryOptions initialOptions = ((OptionsCapableConnectionFactory) connectionFactory).getOptions();\n\t\tConnectionFactory derived = ConnectionFactoryBuilder.derivefrom(connectionFactory).username(\"admin\")\n\t\t\t\t.password(\"secret\").build();\n\t\tConnectionFactoryOptions derivedOptions = ((OptionsCapableConnectionFactory) derived).getOptions();\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"admin\");\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t\tassertMatchingOptions(derivedOptions, initialOptions, ConnectionFactoryOptions.CONNECT_TIMEOUT,\n\t\t\t\tConnectionFactoryOptions.DATABASE, ConnectionFactoryOptions.DRIVER, ConnectionFactoryOptions.HOST,\n\t\t\t\tConnectionFactoryOptions.PORT, ConnectionFactoryOptions.PROTOCOL, ConnectionFactoryOptions.SSL);\n\t}\n","date":"2021-03-29 16:17:05","endLine":167,"groupId":"7102","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildWhenDerivedWithNewCredentialsReturnsNewConnectionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/06/abd175a1e25f95a96a8339dfb40fa9dff6617b.src","preCode":"\tvoid buildWhenDerivedWithNewCredentialsReturnsNewConnectionFactory() {\n\t\tConnectionFactory connectionFactory = ConnectionFactoryBuilder\n\t\t\t\t.withUrl(EmbeddedDatabaseConnection.H2.getUrl(UUID.randomUUID().toString())).build();\n\t\tConnectionFactoryOptions initialOptions = ((OptionsCapableConnectionFactory) connectionFactory).getOptions();\n\t\tConnectionFactory derived = ConnectionFactoryBuilder.derivefrom(connectionFactory).username(\"admin\")\n\t\t\t\t.password(\"secret\").build();\n\t\tConnectionFactoryOptions derivedOptions = ((OptionsCapableConnectionFactory) derived).getOptions();\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"admin\");\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t\tassertMatchingOptions(derivedOptions, initialOptions, ConnectionFactoryOptions.CONNECT_TIMEOUT,\n\t\t\t\tConnectionFactoryOptions.DATABASE, ConnectionFactoryOptions.DRIVER, ConnectionFactoryOptions.HOST,\n\t\t\t\tConnectionFactoryOptions.PORT, ConnectionFactoryOptions.PROTOCOL, ConnectionFactoryOptions.SSL);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/r2dbc/ConnectionFactoryBuilderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"},{"authorDate":"2021-03-25 04:20:59","commitOrder":1,"curCode":"\tvoid buildWhenDerivedFromPoolReturnsNewNonPooledConnectionFactory() {\n\t\tConnectionFactory connectionFactory = ConnectionFactoryBuilder\n\t\t\t\t.withUrl(EmbeddedDatabaseConnection.H2.getUrl(UUID.randomUUID().toString())).build();\n\t\tConnectionFactoryOptions initialOptions = ((OptionsCapableConnectionFactory) connectionFactory).getOptions();\n\t\tConnectionPoolConfiguration poolConfiguration = ConnectionPoolConfiguration.builder(connectionFactory).build();\n\t\tConnectionPool pool = new ConnectionPool(poolConfiguration);\n\t\tConnectionFactory derived = ConnectionFactoryBuilder.derivefrom(pool).username(\"admin\").password(\"secret\")\n\t\t\t\t.build();\n\t\tassertThat(derived).isNotInstanceOf(ConnectionPool.class).isInstanceOf(OptionsCapableConnectionFactory.class);\n\t\tConnectionFactoryOptions derivedOptions = ((OptionsCapableConnectionFactory) derived).getOptions();\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"admin\");\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t\tassertMatchingOptions(derivedOptions, initialOptions, ConnectionFactoryOptions.CONNECT_TIMEOUT,\n\t\t\t\tConnectionFactoryOptions.DATABASE, ConnectionFactoryOptions.DRIVER, ConnectionFactoryOptions.HOST,\n\t\t\t\tConnectionFactoryOptions.PORT, ConnectionFactoryOptions.PROTOCOL, ConnectionFactoryOptions.SSL);\n\t}\n","date":"2021-03-29 16:17:05","endLine":185,"groupId":"7102","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildWhenDerivedFromPoolReturnsNewNonPooledConnectionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/06/abd175a1e25f95a96a8339dfb40fa9dff6617b.src","preCode":"\tvoid buildWhenDerivedFromPoolReturnsNewNonPooledConnectionFactory() {\n\t\tConnectionFactory connectionFactory = ConnectionFactoryBuilder\n\t\t\t\t.withUrl(EmbeddedDatabaseConnection.H2.getUrl(UUID.randomUUID().toString())).build();\n\t\tConnectionFactoryOptions initialOptions = ((OptionsCapableConnectionFactory) connectionFactory).getOptions();\n\t\tConnectionPoolConfiguration poolConfiguration = ConnectionPoolConfiguration.builder(connectionFactory).build();\n\t\tConnectionPool pool = new ConnectionPool(poolConfiguration);\n\t\tConnectionFactory derived = ConnectionFactoryBuilder.derivefrom(pool).username(\"admin\").password(\"secret\")\n\t\t\t\t.build();\n\t\tassertThat(derived).isNotInstanceOf(ConnectionPool.class).isInstanceOf(OptionsCapableConnectionFactory.class);\n\t\tConnectionFactoryOptions derivedOptions = ((OptionsCapableConnectionFactory) derived).getOptions();\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"admin\");\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t\tassertMatchingOptions(derivedOptions, initialOptions, ConnectionFactoryOptions.CONNECT_TIMEOUT,\n\t\t\t\tConnectionFactoryOptions.DATABASE, ConnectionFactoryOptions.DRIVER, ConnectionFactoryOptions.HOST,\n\t\t\t\tConnectionFactoryOptions.PORT, ConnectionFactoryOptions.PROTOCOL, ConnectionFactoryOptions.SSL);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/r2dbc/ConnectionFactoryBuilderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"eb1200415dee2b8e84bec3b9bedc55101d7653b7","commitMessage":"@@@Derive a ConnectionFactoryBuilder from an existing ConnectionFactory\n\nCloses gh-25788\n","date":"2021-03-29 16:17:05","modifiedFileCount":"5","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2021-06-09 06:00:29","codes":[{"authorDate":"2021-06-09 06:00:29","commitOrder":2,"curCode":"\tvoid buildWhenDerivedWithNewCredentialsReturnsNewConnectionFactory() {\n\t\tConnectionFactory connectionFactory = ConnectionFactoryBuilder\n\t\t\t\t.withUrl(EmbeddedDatabaseConnection.H2.getUrl(UUID.randomUUID().toString())).build();\n\t\tConnectionFactoryOptions initialOptions = ((OptionsCapableConnectionFactory) connectionFactory).getOptions();\n\t\tConnectionFactory derived = ConnectionFactoryBuilder.derivedFrom(connectionFactory).username(\"admin\")\n\t\t\t\t.password(\"secret\").build();\n\t\tConnectionFactoryOptions derivedOptions = ((OptionsCapableConnectionFactory) derived).getOptions();\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"admin\");\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t\tassertMatchingOptions(derivedOptions, initialOptions, ConnectionFactoryOptions.CONNECT_TIMEOUT,\n\t\t\t\tConnectionFactoryOptions.DATABASE, ConnectionFactoryOptions.DRIVER, ConnectionFactoryOptions.HOST,\n\t\t\t\tConnectionFactoryOptions.PORT, ConnectionFactoryOptions.PROTOCOL, ConnectionFactoryOptions.SSL);\n\t}\n","date":"2021-06-09 06:44:01","endLine":167,"groupId":"102106","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"buildWhenDerivedWithNewCredentialsReturnsNewConnectionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/44/3d9c80ea4b901c990efafe04165d7e0f633da4.src","preCode":"\tvoid buildWhenDerivedWithNewCredentialsReturnsNewConnectionFactory() {\n\t\tConnectionFactory connectionFactory = ConnectionFactoryBuilder\n\t\t\t\t.withUrl(EmbeddedDatabaseConnection.H2.getUrl(UUID.randomUUID().toString())).build();\n\t\tConnectionFactoryOptions initialOptions = ((OptionsCapableConnectionFactory) connectionFactory).getOptions();\n\t\tConnectionFactory derived = ConnectionFactoryBuilder.derivefrom(connectionFactory).username(\"admin\")\n\t\t\t\t.password(\"secret\").build();\n\t\tConnectionFactoryOptions derivedOptions = ((OptionsCapableConnectionFactory) derived).getOptions();\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"admin\");\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t\tassertMatchingOptions(derivedOptions, initialOptions, ConnectionFactoryOptions.CONNECT_TIMEOUT,\n\t\t\t\tConnectionFactoryOptions.DATABASE, ConnectionFactoryOptions.DRIVER, ConnectionFactoryOptions.HOST,\n\t\t\t\tConnectionFactoryOptions.PORT, ConnectionFactoryOptions.PROTOCOL, ConnectionFactoryOptions.SSL);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/r2dbc/ConnectionFactoryBuilderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2021-06-09 06:00:29","commitOrder":2,"curCode":"\tvoid buildWhenDerivedFromPoolReturnsNewNonPooledConnectionFactory() {\n\t\tConnectionFactory connectionFactory = ConnectionFactoryBuilder\n\t\t\t\t.withUrl(EmbeddedDatabaseConnection.H2.getUrl(UUID.randomUUID().toString())).build();\n\t\tConnectionFactoryOptions initialOptions = ((OptionsCapableConnectionFactory) connectionFactory).getOptions();\n\t\tConnectionPoolConfiguration poolConfiguration = ConnectionPoolConfiguration.builder(connectionFactory).build();\n\t\tConnectionPool pool = new ConnectionPool(poolConfiguration);\n\t\tConnectionFactory derived = ConnectionFactoryBuilder.derivedFrom(pool).username(\"admin\").password(\"secret\")\n\t\t\t\t.build();\n\t\tassertThat(derived).isNotInstanceOf(ConnectionPool.class).isInstanceOf(OptionsCapableConnectionFactory.class);\n\t\tConnectionFactoryOptions derivedOptions = ((OptionsCapableConnectionFactory) derived).getOptions();\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"admin\");\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t\tassertMatchingOptions(derivedOptions, initialOptions, ConnectionFactoryOptions.CONNECT_TIMEOUT,\n\t\t\t\tConnectionFactoryOptions.DATABASE, ConnectionFactoryOptions.DRIVER, ConnectionFactoryOptions.HOST,\n\t\t\t\tConnectionFactoryOptions.PORT, ConnectionFactoryOptions.PROTOCOL, ConnectionFactoryOptions.SSL);\n\t}\n","date":"2021-06-09 06:44:01","endLine":185,"groupId":"102106","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"buildWhenDerivedFromPoolReturnsNewNonPooledConnectionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/44/3d9c80ea4b901c990efafe04165d7e0f633da4.src","preCode":"\tvoid buildWhenDerivedFromPoolReturnsNewNonPooledConnectionFactory() {\n\t\tConnectionFactory connectionFactory = ConnectionFactoryBuilder\n\t\t\t\t.withUrl(EmbeddedDatabaseConnection.H2.getUrl(UUID.randomUUID().toString())).build();\n\t\tConnectionFactoryOptions initialOptions = ((OptionsCapableConnectionFactory) connectionFactory).getOptions();\n\t\tConnectionPoolConfiguration poolConfiguration = ConnectionPoolConfiguration.builder(connectionFactory).build();\n\t\tConnectionPool pool = new ConnectionPool(poolConfiguration);\n\t\tConnectionFactory derived = ConnectionFactoryBuilder.derivefrom(pool).username(\"admin\").password(\"secret\")\n\t\t\t\t.build();\n\t\tassertThat(derived).isNotInstanceOf(ConnectionPool.class).isInstanceOf(OptionsCapableConnectionFactory.class);\n\t\tConnectionFactoryOptions derivedOptions = ((OptionsCapableConnectionFactory) derived).getOptions();\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.USER)).isEqualTo(\"admin\");\n\t\tassertThat(derivedOptions.getRequiredValue(ConnectionFactoryOptions.PASSWORD)).isEqualTo(\"secret\");\n\t\tassertMatchingOptions(derivedOptions, initialOptions, ConnectionFactoryOptions.CONNECT_TIMEOUT,\n\t\t\t\tConnectionFactoryOptions.DATABASE, ConnectionFactoryOptions.DRIVER, ConnectionFactoryOptions.HOST,\n\t\t\t\tConnectionFactoryOptions.PORT, ConnectionFactoryOptions.PROTOCOL, ConnectionFactoryOptions.SSL);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/r2dbc/ConnectionFactoryBuilderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"b7ac1e6cd7bf50a5e25fa38c88dc98c4f7db7755","commitMessage":"@@@Rename derivefrom to align with DataSourceBuilder\n\nRename the `derivefrom` method in `ConnectionFactoryBuilder` to\n`derivedFrom` to align with `DataSourceBuilder`.\n\nFixes gh-26810\n","date":"2021-06-09 06:44:01","modifiedFileCount":"3","status":"M","submitter":"Phillip Webb"}]
