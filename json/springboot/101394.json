[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToArrayWhenNestedShouldReturnPopulatedArray() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_ARRAY.getType());\n\t\tBindable<Integer[][]> target = Bindable.of(type);\n\t\tInteger[][] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","date":"2017-10-05 11:18:56","endLine":114,"groupId":"5403","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToArrayWhenNestedShouldReturnPopulatedArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/96/0001c2df9ea9e717522ae9991b34363e75d08c.src","preCode":"\tpublic void bindToArrayWhenNestedShouldReturnPopulatedArray() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_ARRAY.getType());\n\t\tBindable<Integer[][]> target = Bindable.of(type);\n\t\tInteger[][] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToArrayWhenNestedListShouldReturnPopulatedArray() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_LIST.getType());\n\t\tBindable<List<Integer>[]> target = Bindable.of(type);\n\t\tList<Integer>[] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","date":"2017-10-05 11:18:56","endLine":130,"groupId":"5403","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToArrayWhenNestedListShouldReturnPopulatedArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/96/0001c2df9ea9e717522ae9991b34363e75d08c.src","preCode":"\tpublic void bindToArrayWhenNestedListShouldReturnPopulatedArray() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_LIST.getType());\n\t\tBindable<List<Integer>[]> target = Bindable.of(type);\n\t\tList<Integer>[] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToArrayWhenNestedShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_ARRAY.getType());\n\t\tBindable<Integer[][]> target = Bindable.of(type);\n\t\tInteger[][] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","date":"2017-12-12 18:57:30","endLine":114,"groupId":"5403","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToArrayWhenNestedShouldReturnPopulatedArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d6/bd4e57e5cc8a7d66facf2609014846ac6b6f0a.src","preCode":"\tpublic void bindToArrayWhenNestedShouldReturnPopulatedArray() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_ARRAY.getType());\n\t\tBindable<Integer[][]> target = Bindable.of(type);\n\t\tInteger[][] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToArrayWhenNestedListShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_LIST.getType());\n\t\tBindable<List<Integer>[]> target = Bindable.of(type);\n\t\tList<Integer>[] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","date":"2017-12-12 18:57:30","endLine":130,"groupId":"5403","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToArrayWhenNestedListShouldReturnPopulatedArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d6/bd4e57e5cc8a7d66facf2609014846ac6b6f0a.src","preCode":"\tpublic void bindToArrayWhenNestedListShouldReturnPopulatedArray() throws Exception {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_LIST.getType());\n\t\tBindable<List<Integer>[]> target = Bindable.of(type);\n\t\tList<Integer>[] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid bindToArrayWhenNestedShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_ARRAY.getType());\n\t\tBindable<Integer[][]> target = Bindable.of(type);\n\t\tInteger[][] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","date":"2019-06-07 19:25:54","endLine":105,"groupId":"5403","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToArrayWhenNestedShouldReturnPopulatedArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/58/82c4a94946a128a32edb27b4a80a5f12d6fe87.src","preCode":"\tpublic void bindToArrayWhenNestedShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_ARRAY.getType());\n\t\tBindable<Integer[][]> target = Bindable.of(type);\n\t\tInteger[][] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid bindToArrayWhenNestedListShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_LIST.getType());\n\t\tBindable<List<Integer>[]> target = Bindable.of(type);\n\t\tList<Integer>[] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","date":"2019-06-07 19:25:54","endLine":121,"groupId":"5403","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToArrayWhenNestedListShouldReturnPopulatedArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/58/82c4a94946a128a32edb27b4a80a5f12d6fe87.src","preCode":"\tpublic void bindToArrayWhenNestedListShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_LIST.getType());\n\t\tBindable<List<Integer>[]> target = Bindable.of(type);\n\t\tList<Integer>[] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2020-09-07 14:04:55","commitOrder":4,"curCode":"\tvoid bindToArrayWhenNestedShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_ARRAY.getType());\n\t\tBindable<Integer[][]> target = Bindable.of(type);\n\t\tInteger[][] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasDimensions(2, 2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","date":"2020-09-07 14:04:55","endLine":105,"groupId":"101394","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"bindToArrayWhenNestedShouldReturnPopulatedArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/45/5308b0dc6e4122bf0995d57cc90e3f36ae5a21.src","preCode":"\tvoid bindToArrayWhenNestedShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_ARRAY.getType());\n\t\tBindable<Integer[][]> target = Bindable.of(type);\n\t\tInteger[][] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid bindToArrayWhenNestedListShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_LIST.getType());\n\t\tBindable<List<Integer>[]> target = Bindable.of(type);\n\t\tList<Integer>[] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","date":"2019-06-07 19:25:54","endLine":121,"groupId":"101394","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToArrayWhenNestedListShouldReturnPopulatedArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/58/82c4a94946a128a32edb27b4a80a5f12d6fe87.src","preCode":"\tvoid bindToArrayWhenNestedListShouldReturnPopulatedArray() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo[0][0]\", \"1\");\n\t\tsource.put(\"foo[0][1]\", \"2\");\n\t\tsource.put(\"foo[1][0]\", \"3\");\n\t\tsource.put(\"foo[1][1]\", \"4\");\n\t\tthis.sources.add(source);\n\t\tResolvableType type = ResolvableType.forArrayComponent(INTEGER_LIST.getType());\n\t\tBindable<List<Integer>[]> target = Bindable.of(type);\n\t\tList<Integer>[] result = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(result).hasSize(2);\n\t\tassertThat(result[0]).containsExactly(1, 2);\n\t\tassertThat(result[1]).containsExactly(3, 4);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"}],"commitId":"e95cc584fd79875a3add4a424b6753a4f92029db","commitMessage":"@@@Merge pull request #23179 from eddumelendez\n\n* pr/23179:\n  Polish \"Upgrade to Assertj 3.17.2\"\n  Upgrade to Assertj 3.17.2\n\nCloses gh-23179\n","date":"2020-09-07 14:04:55","modifiedFileCount":"3","status":"M","submitter":"Stephane Nicoll"}]
