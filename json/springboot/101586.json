[{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2020-07-14 12:19:10","commitOrder":4,"curCode":"\tvoid runWhenCustomDefaultProfileSameAsActiveFromFileActivatesProfile() {\n\t\tConfigurableApplicationContext context = this.application.run(\"--spring.profiles.default=customdefault\",\n\t\t\t\t\"--spring.config.name=customprofile\");\n\t\tConfigurableEnvironment environment = context.getEnvironment();\n\t\tassertThat(environment.containsProperty(\"customprofile\")).isTrue();\n\t\tassertThat(environment.containsProperty(\"customprofile-customdefault\")).isTrue();\n\t\tassertThat(environment.acceptsProfiles(Profiles.of(\"customdefault\"))).isTrue();\n\t}\n","date":"2020-07-23 12:02:32","endLine":430,"groupId":"9234","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runWhenCustomDefaultProfileSameAsActiveFromFileActivatesProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/35/9135067a135a5dc7404e45ece36ded5c577dca.src","preCode":"\tvoid runWhenCustomDefaultProfileSameAsActiveFromFileActivatesProfile() {\n\t\tConfigurableApplicationContext context = this.application.run(\"--spring.profiles.default=customdefault\",\n\t\t\t\t\"--spring.config.name=customprofile\");\n\t\tConfigurableEnvironment environment = context.getEnvironment();\n\t\tassertThat(environment.containsProperty(\"customprofile\")).isTrue();\n\t\tassertThat(environment.containsProperty(\"customprofile-customdefault\")).isTrue();\n\t\tassertThat(environment.acceptsProfiles(Profiles.of(\"customdefault\"))).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"B"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid localPortIsAvailable() {\n\t\taddWebServerFactoryBean();\n\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\tthis.context.refresh();\n\t\tConfigurableEnvironment environment = this.context.getEnvironment();\n\t\tassertThat(environment.containsProperty(\"local.server.port\")).isTrue();\n\t\tassertThat(environment.getProperty(\"local.server.port\")).isEqualTo(\"8080\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":153,"groupId":"4309","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"localPortIsAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/41/3fee8ddaf0799dd411d1c235b44bbb2716025e.src","preCode":"\tvoid localPortIsAvailable() {\n\t\taddWebServerFactoryBean();\n\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\tthis.context.refresh();\n\t\tConfigurableEnvironment environment = this.context.getEnvironment();\n\t\tassertThat(environment.containsProperty(\"local.server.port\")).isTrue();\n\t\tassertThat(environment.getProperty(\"local.server.port\")).isEqualTo(\"8080\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContextTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"NB"}],"commitId":"3352024b1ca641fa0beaaa4cd87788c190242eb0","commitMessage":"@@@Provide ConfigFileApplicationListener replacement\n\nDeprecate `ConfigFileApplicationListener` and provide a replacement\nmechanism that supports arbitrary config data imports.\n\nThis commit updates the following areas:\n\n- Extract `EnvironmentPostProcessor` invocation logic from the\n  `ConfigFileApplicationListener` to new dedicated listener. Also\n  providing support for `Log` injection.\n\n- Extract `RandomPropertySource` adding logic from the\n  `ConfigFileApplicationListener` to a dedicated class.\n\n- Migrate to the recently introduced `DefaultPropertiesPropertySource`\n  class when moving the defaultProperties `PropertySource`\n\n- Replace processing logic with a phased approach to ensure that\n  profile enablement happens in a distinct phase and that profiles\n  can no longer be activated on an ad-hoc basis.\n\n- Provide a more predictable and logical import order for processing\n  `application.properties` and `application.yml` files.\n\n- Add support for a `spring.config.import` property which can be used\n  to import additional config data. Also provide a pluggable API\n  allowing third-parties to resolve and load locations themselves.\n\n- Add `spring.config.activate.on-profile` support which replaces the\n  existing `spring.profiles` property.\n\n- Add `spring.config.activate.on-cloud-platform` support which allows\n  a config data document to be active only on a given cloud platform.\n\n- Support a `spring.config.use-legacy-processing` property allowing the\n  previous processing logic to be used.\n\nCloses gh-22497\n\nCo-authored-by: Madhura Bhave <mbhave@vmware.com>\n","date":"2020-07-23 12:02:32","modifiedFileCount":"17","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2020-08-06 05:59:27","commitOrder":5,"curCode":"\tvoid runWhenCustomDefaultProfileSameAsActiveFromFileActivatesProfile() {\n\t\tConfigurableApplicationContext context = this.application.run(\n\t\t\t\t\"--spring.config.location=classpath:configdata/profiles/\", \"--spring.profiles.default=customdefault\",\n\t\t\t\t\"--spring.config.name=customprofile\");\n\t\tConfigurableEnvironment environment = context.getEnvironment();\n\t\tassertThat(environment.containsProperty(\"customprofile\")).isTrue();\n\t\tassertThat(environment.containsProperty(\"customprofile-customdefault\")).isTrue();\n\t\tassertThat(environment.acceptsProfiles(Profiles.of(\"customdefault\"))).isTrue();\n\t}\n","date":"2020-08-06 05:59:27","endLine":431,"groupId":"101586","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runWhenCustomDefaultProfileSameAsActiveFromFileActivatesProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/91/da040f17514170ba6bdc24eae9acffb3eae208.src","preCode":"\tvoid runWhenCustomDefaultProfileSameAsActiveFromFileActivatesProfile() {\n\t\tConfigurableApplicationContext context = this.application.run(\"--spring.profiles.default=customdefault\",\n\t\t\t\t\"--spring.config.name=customprofile\");\n\t\tConfigurableEnvironment environment = context.getEnvironment();\n\t\tassertThat(environment.containsProperty(\"customprofile\")).isTrue();\n\t\tassertThat(environment.containsProperty(\"customprofile-customdefault\")).isTrue();\n\t\tassertThat(environment.acceptsProfiles(Profiles.of(\"customdefault\"))).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentPostProcessorIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid localPortIsAvailable() {\n\t\taddWebServerFactoryBean();\n\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\tthis.context.refresh();\n\t\tConfigurableEnvironment environment = this.context.getEnvironment();\n\t\tassertThat(environment.containsProperty(\"local.server.port\")).isTrue();\n\t\tassertThat(environment.getProperty(\"local.server.port\")).isEqualTo(\"8080\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":153,"groupId":"101586","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"localPortIsAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/41/3fee8ddaf0799dd411d1c235b44bbb2716025e.src","preCode":"\tvoid localPortIsAvailable() {\n\t\taddWebServerFactoryBean();\n\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\tthis.context.refresh();\n\t\tConfigurableEnvironment environment = this.context.getEnvironment();\n\t\tassertThat(environment.containsProperty(\"local.server.port\")).isTrue();\n\t\tassertThat(environment.getProperty(\"local.server.port\")).isEqualTo(\"8080\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContextTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"}],"commitId":"5f386e456b6c99603d21613fdc58b50ba0fa5fb4","commitMessage":"@@@Fix test\n","date":"2020-08-06 05:59:27","modifiedFileCount":"1","status":"M","submitter":"Madhura Bhave"}]
