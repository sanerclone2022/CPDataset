[{"authorTime":"2020-04-30 06:56:47","codes":[{"authorDate":"2020-04-30 06:56:47","commitOrder":4,"curCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse, false);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2020-04-30 06:56:47","endLine":197,"groupId":"2148","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/cf/3d7e4cf675f916949cdb7cbc725f1c0a9ec65c.src","preCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse, false);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"MB"},{"authorDate":"2020-04-30 06:56:47","commitOrder":4,"curCode":"\tvoid extractBindingResultErrorsExcludeMessageAndErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse, false);\n\t\tassertThat(attributes.get(\"message\")).isEqualTo(\"\");\n\t\tassertThat(attributes.containsKey(\"errors\")).isFalse();\n\t}\n","date":"2020-04-30 06:56:47","endLine":253,"groupId":"2148","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrorsExcludeMessageAndErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/cf/3d7e4cf675f916949cdb7cbc725f1c0a9ec65c.src","preCode":"\tvoid extractBindingResultErrorsExcludeMessageAndErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse, false);\n\t\tassertThat(attributes.get(\"message\")).isEqualTo(\"\");\n\t\tassertThat(attributes.containsKey(\"errors\")).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"}],"commitId":"a30740f8d2e590c1f3adc20fbc4ea9c653c5a94b","commitMessage":"@@@Separate server properties for message and errors\n\nPrior to this commit.  there was a property server.error.include-details\nthat allowed configuration of the message and errors attributes in a\nserver error response.\n\nThis commit separates the control of the message and errors attributes\ninto two separate properties named server.error.include-message and\nserver.error.include-binding-errors. When the message attribute is\nexcluded from a servlet response.  the value is changed from a\nhard-coded text value to an empty value.\n\nFixes gh-20505\n","date":"2020-04-30 06:56:47","modifiedFileCount":"25","status":"M","submitter":"Scott Frederick"},{"authorTime":"2020-05-07 05:31:30","codes":[{"authorDate":"2020-05-07 05:31:30","commitOrder":5,"curCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2020-05-12 04:36:24","endLine":204,"groupId":"2148","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/59/66056319d32cbe8f90bff50b2568b75b11a9a8.src","preCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse, false);\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2020-05-07 05:31:30","commitOrder":5,"curCode":"\tvoid extractBindingResultErrorsExcludeMessageAndErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.get(\"message\")).isEqualTo(\"\");\n\t\tassertThat(attributes.containsKey(\"errors\")).isFalse();\n\t}\n","date":"2020-05-12 04:36:24","endLine":261,"groupId":"2148","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrorsExcludeMessageAndErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/59/66056319d32cbe8f90bff50b2568b75b11a9a8.src","preCode":"\tvoid extractBindingResultErrorsExcludeMessageAndErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex), false,\n\t\t\t\tfalse, false);\n\t\tassertThat(attributes.get(\"message\")).isEqualTo(\"\");\n\t\tassertThat(attributes.containsKey(\"errors\")).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"158933c3e57e921a0339cdb7635b12ae0ad89832","commitMessage":"@@@Improve API of ErrorAttributes and DefaultErrorAttributes\n\nThis commit improves the backward-compatibility of the ErrorAttributes\ninterfaces by providing a default implementation of a new method. It\nalso encapsulates several parameters that control the inclusion or\nexclusion of error attributes into a new ErrorAttributeOptions type to\nmake it easier and less intrusive to add additional options in the\nfuture. This encapsulation also makes the handling of the\nincludeException option more similar to other options.\n\nFixes gh-21324\n","date":"2020-05-12 04:36:24","modifiedFileCount":"17","status":"M","submitter":"Scott Frederick"},{"authorTime":"2021-01-22 21:32:47","codes":[{"authorDate":"2020-05-07 05:31:30","commitOrder":6,"curCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2020-05-12 04:36:24","endLine":204,"groupId":"2148","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/59/66056319d32cbe8f90bff50b2568b75b11a9a8.src","preCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"N"},{"authorDate":"2021-01-22 21:32:47","commitOrder":6,"curCode":"\tvoid extractBindingResultErrorsExcludeMessageAndErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes).containsEntry(\"message\", \"\");\n\t\tassertThat(attributes).doesNotContainKey(\"errors\");\n\t}\n","date":"2021-01-22 21:32:47","endLine":261,"groupId":"2148","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrorsExcludeMessageAndErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7f/bba7b3b5eb85eb274d5bc645fb26a5219b367d.src","preCode":"\tvoid extractBindingResultErrorsExcludeMessageAndErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.get(\"message\")).isEqualTo(\"\");\n\t\tassertThat(attributes.containsKey(\"errors\")).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"1370e8ca979da9f4b8fc87fdb2eb8a9a65d0033c","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-24974\n","date":"2021-01-22 21:32:47","modifiedFileCount":"5","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-01-22 22:10:02","codes":[{"authorDate":"2020-05-07 05:31:30","commitOrder":7,"curCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","date":"2020-05-12 04:36:24","endLine":204,"groupId":"101927","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"notIncludeTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/59/66056319d32cbe8f90bff50b2568b75b11a9a8.src","preCode":"\tvoid notIncludeTrace() {\n\t\tRuntimeException ex = new RuntimeException(\"Test\");\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes.get(\"trace\")).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"N"},{"authorDate":"2021-01-22 22:10:02","commitOrder":7,"curCode":"\tvoid extractBindingResultErrorsExcludeMessageAndErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes).doesNotContainKey(\"message\");\n\t\tassertThat(attributes).doesNotContainKey(\"errors\");\n\t}\n","date":"2021-01-22 22:10:02","endLine":261,"groupId":"101927","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"extractBindingResultErrorsExcludeMessageAndErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/db/5e3c9434d1fc7e0611d8ef5c9edc9b98ebc2bc.src","preCode":"\tvoid extractBindingResultErrorsExcludeMessageAndErrors() throws Exception {\n\t\tMethod method = getClass().getDeclaredMethod(\"method\", String.class);\n\t\tMethodParameter stringParam = new MethodParameter(method, 0);\n\t\tBindingResult bindingResult = new MapBindingResult(Collections.singletonMap(\"a\", \"b\"), \"objectName\");\n\t\tbindingResult.addError(new ObjectError(\"c\", \"d\"));\n\t\tException ex = new WebExchangeBindException(stringParam, bindingResult);\n\t\tMockServerHttpRequest request = MockServerHttpRequest.get(\"/test\").build();\n\t\tMap<String, Object> attributes = this.errorAttributes.getErrorAttributes(buildServerRequest(request, ex),\n\t\t\t\tErrorAttributeOptions.defaults());\n\t\tassertThat(attributes).containsEntry(\"message\", \"\");\n\t\tassertThat(attributes).doesNotContainKey(\"errors\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"5a56f8864f9400ef843b69c81bd7ea2fd61a5b51","commitMessage":"@@@Remove error message attribute instead of blanking it when not included\n\nCloses gh-24712\n","date":"2021-01-22 22:10:02","modifiedFileCount":"7","status":"M","submitter":"Andy Wilkinson"}]
