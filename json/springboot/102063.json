[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void jettyCustomizations() throws Exception {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":97,"groupId":"11722","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"jettyCustomizations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4a/c283b5612e20bd0e3ea7fac664453fd820169f.src","preCode":"\tpublic void jettyCustomizations() throws Exception {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void jettyCustomizersShouldBeInvoked() throws Exception {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":77,"groupId":"11722","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"jettyCustomizersShouldBeInvoked","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/65/88f41f1dee55339646c698eee4ae46a1437ae8.src","preCode":"\tpublic void jettyCustomizersShouldBeInvoked() throws Exception {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void jettyCustomizations() {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2017-12-12 18:57:30","endLine":97,"groupId":"11722","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"jettyCustomizations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f9/edda729f6cb5995d4dd0be294fde6fdd9e0ddd.src","preCode":"\tpublic void jettyCustomizations() throws Exception {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void jettyCustomizersShouldBeInvoked() {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2017-12-12 18:57:30","endLine":77,"groupId":"11722","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"jettyCustomizersShouldBeInvoked","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e2/eb9caf4d677a04148284626f51ae56cb46c3f8.src","preCode":"\tpublic void jettyCustomizersShouldBeInvoked() throws Exception {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-08-20 16:26:21","codes":[{"authorDate":"2018-08-20 16:26:21","commitOrder":3,"curCode":"\tpublic void jettyCustomizations() {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, i -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2018-08-20 16:26:21","endLine":100,"groupId":"11722","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"jettyCustomizations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fa/f7cd7187de2c1e81b3089dc8e087aa7984833f.src","preCode":"\tpublic void jettyCustomizations() {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2018-08-20 16:26:21","commitOrder":3,"curCode":"\tpublic void jettyCustomizersShouldBeInvoked() {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, i -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2018-08-20 16:26:21","endLine":79,"groupId":"10704","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"jettyCustomizersShouldBeInvoked","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/24/a718d6b712f943562399c9a13d8ebb19204f03.src","preCode":"\tpublic void jettyCustomizersShouldBeInvoked() {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tfor (int i = 0; i < configurations.length; i++) {\n\t\t\tconfigurations[i] = mock(JettyServerCustomizer.class);\n\t\t}\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"b26dedb5470d1b89e70560e84451a94ba4bbad87","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-08-20 16:26:21","modifiedFileCount":"9","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-08-20 17:23:39","codes":[{"authorDate":"2018-08-20 17:23:39","commitOrder":4,"curCode":"\tpublic void jettyCustomizations() {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, (i) -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2018-08-20 17:23:39","endLine":100,"groupId":"11722","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"jettyCustomizations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/21/62c0be1f1ecf35ac545c775d55af08bf4934f0.src","preCode":"\tpublic void jettyCustomizations() {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, i -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2018-08-20 17:23:39","commitOrder":4,"curCode":"\tpublic void jettyCustomizersShouldBeInvoked() {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, (i) -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2018-08-20 17:23:39","endLine":79,"groupId":"10704","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"jettyCustomizersShouldBeInvoked","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ad/f6ebecf25a83c46d1f43ab94b75490ba93ff5a.src","preCode":"\tpublic void jettyCustomizersShouldBeInvoked() {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, i -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"e95661876c6749b9f8d87329b1e88f63e11dd460","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-08-20 17:23:39","modifiedFileCount":"7","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid jettyCustomizations() {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, (i) -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2019-06-07 19:25:54","endLine":100,"groupId":"102063","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"jettyCustomizations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/83/ae74e836c504493f80c06c7e31bcc127d89f8d.src","preCode":"\tpublic void jettyCustomizations() {\n\t\tJettyServletWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, (i) -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer();\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid jettyCustomizersShouldBeInvoked() {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, (i) -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","date":"2019-06-07 19:25:54","endLine":79,"groupId":"102063","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"jettyCustomizersShouldBeInvoked","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/43/17adb28175e29b4b614bdbb0af321120834005.src","preCode":"\tpublic void jettyCustomizersShouldBeInvoked() {\n\t\tHttpHandler handler = mock(HttpHandler.class);\n\t\tJettyReactiveWebServerFactory factory = getFactory();\n\t\tJettyServerCustomizer[] configurations = new JettyServerCustomizer[4];\n\t\tArrays.setAll(configurations, (i) -> mock(JettyServerCustomizer.class));\n\t\tfactory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1]));\n\t\tfactory.addServerCustomizers(configurations[2], configurations[3]);\n\t\tthis.webServer = factory.getWebServer(handler);\n\t\tInOrder ordered = inOrder((Object[]) configurations);\n\t\tfor (JettyServerCustomizer configuration : configurations) {\n\t\t\tordered.verify(configuration).customize(any(Server.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
