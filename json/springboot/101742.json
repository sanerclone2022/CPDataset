[{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tList<String> locations = Arrays.asList(\"test1\", \"test2\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations);\n\t\tgiven(this.loaders.load(resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(resolvedLocation2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, locations).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","date":"2020-07-23 12:02:32","endLine":83,"groupId":"6141","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadImportsResolvesAndLoadsLocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5c/6e484163b5c69fe7414c8557ec6876a87e2e10.src","preCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tList<String> locations = Arrays.asList(\"test1\", \"test2\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations);\n\t\tgiven(this.loaders.load(resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(resolvedLocation2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, locations).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tList<String> locations1and2 = Arrays.asList(\"test1\", \"test2\");\n\t\tList<String> locations2and3 = Arrays.asList(\"test2\", \"test3\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tTestLocation resolvedLocation3 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations1and2 = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tList<ConfigDataLocation> resolvedLocations2and3 = Arrays.asList(resolvedLocation2, resolvedLocation3);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations1and2, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations1and2);\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations2and3, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations2and3);\n\t\tgiven(this.loaders.load(resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(resolvedLocation2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(resolvedLocation3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","date":"2020-07-23 12:02:32","endLine":111,"groupId":"9951","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadImportsWhenAlreadyImportedLocationSkipsLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5c/6e484163b5c69fe7414c8557ec6876a87e2e10.src","preCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tList<String> locations1and2 = Arrays.asList(\"test1\", \"test2\");\n\t\tList<String> locations2and3 = Arrays.asList(\"test2\", \"test3\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tTestLocation resolvedLocation3 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations1and2 = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tList<ConfigDataLocation> resolvedLocations2and3 = Arrays.asList(resolvedLocation2, resolvedLocation3);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations1and2, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations1and2);\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations2and3, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations2and3);\n\t\tgiven(this.loaders.load(resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(resolvedLocation2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(resolvedLocation3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"3352024b1ca641fa0beaaa4cd87788c190242eb0","commitMessage":"@@@Provide ConfigFileApplicationListener replacement\n\nDeprecate `ConfigFileApplicationListener` and provide a replacement\nmechanism that supports arbitrary config data imports.\n\nThis commit updates the following areas:\n\n- Extract `EnvironmentPostProcessor` invocation logic from the\n  `ConfigFileApplicationListener` to new dedicated listener. Also\n  providing support for `Log` injection.\n\n- Extract `RandomPropertySource` adding logic from the\n  `ConfigFileApplicationListener` to a dedicated class.\n\n- Migrate to the recently introduced `DefaultPropertiesPropertySource`\n  class when moving the defaultProperties `PropertySource`\n\n- Replace processing logic with a phased approach to ensure that\n  profile enablement happens in a distinct phase and that profiles\n  can no longer be activated on an ad-hoc basis.\n\n- Provide a more predictable and logical import order for processing\n  `application.properties` and `application.yml` files.\n\n- Add support for a `spring.config.import` property which can be used\n  to import additional config data. Also provide a pluggable API\n  allowing third-parties to resolve and load locations themselves.\n\n- Add `spring.config.activate.on-profile` support which replaces the\n  existing `spring.profiles` property.\n\n- Add `spring.config.activate.on-cloud-platform` support which allows\n  a config data document to be active only on a given cloud platform.\n\n- Support a `spring.config.use-legacy-processing` property allowing the\n  previous processing logic to be used.\n\nCloses gh-22497\n\nCo-authored-by: Madhura Bhave <mbhave@vmware.com>\n","date":"2020-07-23 12:02:32","modifiedFileCount":"17","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-08-21 08:26:01","codes":[{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tList<String> locations = Arrays.asList(\"test1\", \"test2\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, this.loaderContext, locations)\n\t\t\t\t.values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","date":"2020-08-21 12:49:03","endLine":88,"groupId":"6141","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadImportsResolvesAndLoadsLocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/6fe987b81fb85556338e818c7d626bbe8dff86.src","preCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tList<String> locations = Arrays.asList(\"test1\", \"test2\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations);\n\t\tgiven(this.loaders.load(resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(resolvedLocation2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, locations).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tList<String> locations1and2 = Arrays.asList(\"test1\", \"test2\");\n\t\tList<String> locations2and3 = Arrays.asList(\"test2\", \"test3\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tTestLocation resolvedLocation3 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations1and2 = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tList<ConfigDataLocation> resolvedLocations2and3 = Arrays.asList(resolvedLocation2, resolvedLocation3);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations1and2, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations1and2);\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations2and3, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations2and3);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","date":"2020-08-21 12:49:03","endLine":116,"groupId":"9951","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadImportsWhenAlreadyImportedLocationSkipsLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/6fe987b81fb85556338e818c7d626bbe8dff86.src","preCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tList<String> locations1and2 = Arrays.asList(\"test1\", \"test2\");\n\t\tList<String> locations2and3 = Arrays.asList(\"test2\", \"test3\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tTestLocation resolvedLocation3 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations1and2 = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tList<ConfigDataLocation> resolvedLocations2and3 = Arrays.asList(resolvedLocation2, resolvedLocation3);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations1and2, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations1and2);\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations2and3, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations2and3);\n\t\tgiven(this.loaders.load(resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(resolvedLocation2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(resolvedLocation3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"d123c924a0e1fbe6b4e8f27baf98b5bfd1a64a86","commitMessage":"@@@Add BootstrapRegisty support for config data\n\nExpose the `BootstrapRegisty` to both `ConfigDataLocationResolver` and\n`ConfigDataLoader` implementations. The registry is exposed via the\ncontext interfaces and may be used to reuse instances that are expensive\nto create. It may also be used to ultimately register beans with the\n`ApplicationContext`.\n\nCloses gh-22956\n","date":"2020-08-21 12:49:03","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-10-14 05:43:34","codes":[{"authorDate":"2020-10-14 05:43:34","commitOrder":3,"curCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer.resolveAndLoad(this.activationContext, this.locationResolverContext,\n\t\t\t\tthis.loaderContext, Arrays.asList(location1, location2)).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","date":"2020-10-16 02:33:57","endLine":94,"groupId":"13686","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"loadImportsResolvesAndLoadsLocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/76/df8e511f087ce5a31cf60ef4e0102d673d5345.src","preCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tList<String> locations = Arrays.asList(\"test1\", \"test2\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer\n\t\t\t\t.resolveAndLoad(this.activationContext, this.locationResolverContext, this.loaderContext, locations)\n\t\t\t\t.values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-10-14 05:43:34","commitOrder":3,"curCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tConfigDataLocation location3 = ConfigDataLocation.of(\"test3\");\n\t\tList<ConfigDataLocation> locations1and2 = Arrays.asList(location1, location2);\n\t\tList<ConfigDataLocation> locations2and3 = Arrays.asList(location2, location3);\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tTestResource resource3 = new TestResource(\"r3\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location3, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location3, resource3)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(this.loaderContext, resource3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","date":"2020-10-16 02:33:57","endLine":126,"groupId":"13687","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadImportsWhenAlreadyImportedLocationSkipsLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/76/df8e511f087ce5a31cf60ef4e0102d673d5345.src","preCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tList<String> locations1and2 = Arrays.asList(\"test1\", \"test2\");\n\t\tList<String> locations2and3 = Arrays.asList(\"test2\", \"test3\");\n\t\tTestLocation resolvedLocation1 = new TestLocation();\n\t\tTestLocation resolvedLocation2 = new TestLocation();\n\t\tTestLocation resolvedLocation3 = new TestLocation();\n\t\tList<ConfigDataLocation> resolvedLocations1and2 = Arrays.asList(resolvedLocation1, resolvedLocation2);\n\t\tList<ConfigDataLocation> resolvedLocations2and3 = Arrays.asList(resolvedLocation2, resolvedLocation3);\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations1and2, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations1and2);\n\t\tgiven(this.resolvers.resolveAll(this.locationResolverContext, locations2and3, this.profiles))\n\t\t\t\t.willReturn(resolvedLocations2and3);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(this.loaderContext, resolvedLocation3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"1cf9fc107e5ed29a44935688eaca2bf6fa85108b","commitMessage":"@@@Improve ConfigData processing code\n\nRefactor `ConfigData` processing code to make it less awkward to\nfollow.\n\nPrior to this commit the `ConfigDataLocationResolver` would take a\nString location and return a `ConfigDataLocation` instance. This was\na little confusing since sometimes we would refer to `location` as the\nString value.  and sometimes it would be the typed instance. We also\nhad nowhere sensible to put the `optional:` prefix logic and we needed\nto pass a `boolean` parameter to a number of methods. The recently\nintroduced `Orgin` support also didn't have a good home.\n\nTo solve this.  `ConfigDataLocation` has been renamed to\n`ConfigDataResource`. This frees up `ConfigDataLocation` to be used\nas a richer `location` type that holds the String value.  the `Orgin`\nand provides a home for the `optional:` logic.\n\nThis commit also cleans up a few other areas of the code.  including\nrenaming `ResourceConfigData...` to `StandardConfigData...`. It also\nintroduces a new exception hierarchy for `ConfigDataNotFoundExceptions`.\n\nCloses gh-23711\n","date":"2020-10-16 02:33:57","modifiedFileCount":"41","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-01-13 03:49:15","codes":[{"authorDate":"2021-01-13 03:49:15","commitOrder":4,"curCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer.resolveAndLoad(this.activationContext, this.locationResolverContext,\n\t\t\t\tthis.loaderContext, Arrays.asList(location1, location2)).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","date":"2021-01-13 03:49:15","endLine":94,"groupId":"13686","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"loadImportsResolvesAndLoadsLocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/73/082f3f6aea342d71d6434d88d235442796bded.src","preCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer.resolveAndLoad(this.activationContext, this.locationResolverContext,\n\t\t\t\tthis.loaderContext, Arrays.asList(location1, location2)).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-01-13 03:49:15","commitOrder":4,"curCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tConfigDataLocation location3 = ConfigDataLocation.of(\"test3\");\n\t\tList<ConfigDataLocation> locations1and2 = Arrays.asList(location1, location2);\n\t\tList<ConfigDataLocation> locations2and3 = Arrays.asList(location2, location3);\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tTestResource resource3 = new TestResource(\"r3\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location3, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location3, resource3, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(this.loaderContext, resource3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","date":"2021-01-13 03:49:15","endLine":126,"groupId":"13687","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"loadImportsWhenAlreadyImportedLocationSkipsLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/73/082f3f6aea342d71d6434d88d235442796bded.src","preCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tConfigDataLocation location3 = ConfigDataLocation.of(\"test3\");\n\t\tList<ConfigDataLocation> locations1and2 = Arrays.asList(location1, location2);\n\t\tList<ConfigDataLocation> locations2and3 = Arrays.asList(location2, location3);\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tTestResource resource3 = new TestResource(\"r3\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location3, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location3, resource3)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(this.loaderContext, resource3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"48e00fc7f4283f4a2b0277f1304386621d8bc5f0","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-24793\n","date":"2021-01-13 03:49:15","modifiedFileCount":"14","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-06-04 13:24:17","codes":[{"authorDate":"2021-06-04 13:24:17","commitOrder":5,"curCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer.resolveAndLoad(this.activationContext, this.locationResolverContext,\n\t\t\t\tthis.loaderContext, Arrays.asList(location1, location2), true).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","date":"2021-06-04 13:24:17","endLine":94,"groupId":"13686","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"loadImportsResolvesAndLoadsLocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ff/d9bfbdf44857726e17822c6a8c37b98f87c42c.src","preCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer.resolveAndLoad(this.activationContext, this.locationResolverContext,\n\t\t\t\tthis.loaderContext, Arrays.asList(location1, location2)).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-06-04 13:24:17","commitOrder":5,"curCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tConfigDataLocation location3 = ConfigDataLocation.of(\"test3\");\n\t\tList<ConfigDataLocation> locations1and2 = Arrays.asList(location1, location2);\n\t\tList<ConfigDataLocation> locations2and3 = Arrays.asList(location2, location3);\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tTestResource resource3 = new TestResource(\"r3\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location3, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location3, resource3, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(this.loaderContext, resource3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations1and2, true).values();\n\t\tCollection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations2and3, true).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","date":"2021-06-04 13:24:17","endLine":126,"groupId":"13687","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadImportsWhenAlreadyImportedLocationSkipsLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ff/d9bfbdf44857726e17822c6a8c37b98f87c42c.src","preCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tConfigDataLocation location3 = ConfigDataLocation.of(\"test3\");\n\t\tList<ConfigDataLocation> locations1and2 = Arrays.asList(location1, location2);\n\t\tList<ConfigDataLocation> locations2and3 = Arrays.asList(location2, location3);\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tTestResource resource3 = new TestResource(\"r3\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location3, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location3, resource3, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(this.loaderContext, resource3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"e73062aefa622781ee8bcb490f513c1fc8068d62","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-26755\n","date":"2021-06-04 13:24:17","modifiedFileCount":"8","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-06-22 09:37:43","codes":[{"authorDate":"2021-06-22 09:37:43","commitOrder":6,"curCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer.resolveAndLoad(this.activationContext, this.locationResolverContext,\n\t\t\t\tthis.loaderContext, Arrays.asList(location1, location2)).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","date":"2021-06-22 09:37:43","endLine":94,"groupId":"101742","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"loadImportsResolvesAndLoadsLocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/73/082f3f6aea342d71d6434d88d235442796bded.src","preCode":"\tvoid loadImportsResolvesAndLoadsLocations() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded = importer.resolveAndLoad(this.activationContext, this.locationResolverContext,\n\t\t\t\tthis.loaderContext, Arrays.asList(location1, location2), true).values();\n\t\tassertThat(loaded).containsExactly(configData2, configData1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-06-22 09:37:43","commitOrder":6,"curCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tConfigDataLocation location3 = ConfigDataLocation.of(\"test3\");\n\t\tList<ConfigDataLocation> locations1and2 = Arrays.asList(location1, location2);\n\t\tList<ConfigDataLocation> locations2and3 = Arrays.asList(location2, location3);\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tTestResource resource3 = new TestResource(\"r3\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location3, this.profiles))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location3, resource3, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(this.loaderContext, resource3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations1and2).values();\n\t\tCollection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations2and3).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","date":"2021-06-22 09:37:43","endLine":126,"groupId":"101742","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"loadImportsWhenAlreadyImportedLocationSkipsLoad","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/73/082f3f6aea342d71d6434d88d235442796bded.src","preCode":"\tvoid loadImportsWhenAlreadyImportedLocationSkipsLoad() throws Exception {\n\t\tConfigDataLocation location1 = ConfigDataLocation.of(\"test1\");\n\t\tConfigDataLocation location2 = ConfigDataLocation.of(\"test2\");\n\t\tConfigDataLocation location3 = ConfigDataLocation.of(\"test3\");\n\t\tList<ConfigDataLocation> locations1and2 = Arrays.asList(location1, location2);\n\t\tList<ConfigDataLocation> locations2and3 = Arrays.asList(location2, location3);\n\t\tTestResource resource1 = new TestResource(\"r1\");\n\t\tTestResource resource2 = new TestResource(\"r2\");\n\t\tTestResource resource3 = new TestResource(\"r3\");\n\t\tConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location1, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location1, resource1, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location2, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location2, resource2, false)));\n\t\tgiven(this.resolvers.resolve(this.locationResolverContext, location3, this.profiles, true))\n\t\t\t\t.willReturn(Collections.singletonList(new ConfigDataResolutionResult(location3, resource3, false)));\n\t\tgiven(this.loaders.load(this.loaderContext, resource1)).willReturn(configData1);\n\t\tgiven(this.loaders.load(this.loaderContext, resource2)).willReturn(configData2);\n\t\tgiven(this.loaders.load(this.loaderContext, resource3)).willReturn(configData3);\n\t\tConfigDataImporter importer = new ConfigDataImporter(this.logFactory, ConfigDataNotFoundAction.FAIL,\n\t\t\t\tthis.resolvers, this.loaders);\n\t\tCollection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations1and2, true).values();\n\t\tCollection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,\n\t\t\t\tthis.locationResolverContext, this.loaderContext, locations2and3, true).values();\n\t\tassertThat(loaded1and2).containsExactly(configData2, configData1);\n\t\tassertThat(loaded2and3).containsExactly(configData3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataImporterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"86dc156162f544053ec5c8575881a3c24dc78084","commitMessage":"@@@Merge branch '2.5.x'\n\nCloses gh-27006\n","date":"2021-06-22 09:37:43","modifiedFileCount":"7","status":"M","submitter":"Phillip Webb"}]
