[{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-07-04 04:44:06","commitOrder":5,"curCode":"\tvoid jsonThreadDump() throws Exception {\n\t\tReentrantLock lock = new ReentrantLock();\n\t\tCountDownLatch latch = new CountDownLatch(1);\n\t\tnew Thread(() -> {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tlatch.await();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}).start();\n\t\tthis.mockMvc.perform(get(\"/actuator/threaddump\").accept(MediaType.APPLICATION_JSON)).andExpect(\n\t\t\t\tstatus().isOk()).andDo(\n\t\t\t\t\t\tMockMvcRestDocumentation\n\t\t\t\t\t\t\t\t.document(\"threaddump/json\", preprocessResponse(limit(\"threads\")),\n\t\t\t\t\t\t\t\t\t\tresponseFields(fieldWithPath(\"threads\").description(\"JVM's threads.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedCount\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Total number of times that the thread has been \" + \"blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedTime\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"blocked. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].daemon\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is a daemon \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread. Only available on Java 9 or \" + \"later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.BOOLEAN),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].inNative\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is executing native code.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Description of the object on which the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Object for which the thread is blocked \" + \"waiting.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Fully qualified class name of the lock\" + \" object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Monitors locked by this thread, if any\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the lock object.\").optional()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock \" + \"object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].lockedStackDepth\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack depth where the monitor \" + \"was locked.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tsubsectionWithPath(\"threads.[].lockedMonitors.[].lockedStackFrame\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack frame that locked the \" + \"monitor.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Synchronizers locked by this thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the locked \" + \"synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Identity hash code of the locked \" + \"synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerId\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"ID of the thread that owns the object on which \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the thread is blocked. `-1` if the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is not blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread that owns the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"object on which the thread is \" + \"blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].priority\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Priority of the thread. Only \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack trace of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].classLoaderName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class loader of the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"class that contains the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry, if \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"any. Only available on Java 9 or \" + \"later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class that contains the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"execution point identified \" + \"by this entry.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].fileName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the source file that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].lineNumber\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Line number of the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Negative if unknown.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].methodName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the module that contains \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the execution point identified by \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"this entry, if any. Only available \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleVersion\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Version of the module that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].nativeMethod\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Whether the execution point is a native \" + \"method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].suspended\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is suspended.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadId\").description(\"ID of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadState\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"State of the thread (\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ describeEnumValues(Thread.State.class) + \").\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedCount\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Total number of times that the thread has waited\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" for notification.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedTime\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"waiting. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled\"))));\n\t\tlatch.countDown();\n\t}\n","date":"2019-07-04 04:51:56","endLine":185,"groupId":"11169","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"jsonThreadDump","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a5/2d4dce96ddb29f2f7fba336bc9600c7a6ec7ba.src","preCode":"\tvoid jsonThreadDump() throws Exception {\n\t\tReentrantLock lock = new ReentrantLock();\n\t\tCountDownLatch latch = new CountDownLatch(1);\n\t\tnew Thread(() -> {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tlatch.await();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}).start();\n\t\tthis.mockMvc.perform(get(\"/actuator/threaddump\").accept(MediaType.APPLICATION_JSON)).andExpect(\n\t\t\t\tstatus().isOk()).andDo(\n\t\t\t\t\t\tMockMvcRestDocumentation\n\t\t\t\t\t\t\t\t.document(\"threaddump/json\", preprocessResponse(limit(\"threads\")),\n\t\t\t\t\t\t\t\t\t\tresponseFields(fieldWithPath(\"threads\").description(\"JVM's threads.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedCount\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Total number of times that the thread has been \" + \"blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedTime\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"blocked. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].daemon\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is a daemon \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread. Only available on Java 9 or \" + \"later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.BOOLEAN),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].inNative\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is executing native code.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Description of the object on which the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Object for which the thread is blocked \" + \"waiting.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Fully qualified class name of the lock\" + \" object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Monitors locked by this thread, if any\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the lock object.\").optional()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock \" + \"object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].lockedStackDepth\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack depth where the monitor \" + \"was locked.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tsubsectionWithPath(\"threads.[].lockedMonitors.[].lockedStackFrame\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack frame that locked the \" + \"monitor.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Synchronizers locked by this thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the locked \" + \"synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Identity hash code of the locked \" + \"synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerId\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"ID of the thread that owns the object on which \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the thread is blocked. `-1` if the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is not blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread that owns the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"object on which the thread is \" + \"blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].priority\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Priority of the thread. Only \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack trace of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].classLoaderName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class loader of the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"class that contains the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry, if \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"any. Only available on Java 9 or \" + \"later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class that contains the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"execution point identified \" + \"by this entry.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].fileName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the source file that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].lineNumber\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Line number of the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Negative if unknown.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].methodName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the module that contains \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the execution point identified by \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"this entry, if any. Only available \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleVersion\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Version of the module that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].nativeMethod\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Whether the execution point is a native \" + \"method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].suspended\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is suspended.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadId\").description(\"ID of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadState\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"State of the thread (\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ describeEnumValues(Thread.State.class) + \").\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedCount\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Total number of times that the thread has waited\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" for notification.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedTime\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"waiting. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled\"))));\n\t\tlatch.countDown();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ThreadDumpEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid beans() throws Exception {\n\t\tList<FieldDescriptor> beanFields = Arrays.asList(fieldWithPath(\"aliases\").description(\"Names of any aliases.\"),\n\t\t\t\tfieldWithPath(\"scope\").description(\"Scope of the bean.\"),\n\t\t\t\tfieldWithPath(\"type\").description(\"Fully qualified type of the bean.\"),\n\t\t\t\tfieldWithPath(\"resource\").description(\"Resource in which the bean was defined, if any.\").optional(),\n\t\t\t\tfieldWithPath(\"dependencies\").description(\"Names of any dependencies.\"));\n\t\tResponseFieldsSnippet responseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"), parentIdField(),\n\t\t\t\tfieldWithPath(\"contexts.*.beans\").description(\"Beans in the application context keyed by name.\"))\n\t\t\t\t\t\t.andWithPrefix(\"contexts.*.beans.*.\", beanFields);\n\t\tthis.mockMvc.perform(get(\"/actuator/beans\")).andExpect(status().isOk())\n\t\t\t\t.andDo(document(\"beans\",\n\t\t\t\t\t\tpreprocessResponse(\n\t\t\t\t\t\t\t\tlimit(this::isIndependentBean, \"contexts\", getApplicationContext().getId(), \"beans\")),\n\t\t\t\t\t\tresponseFields));\n\t}\n","date":"2019-06-07 19:25:54","endLine":66,"groupId":"2562","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a6/96e008e414d1673946a8160d76d84e4939a91c.src","preCode":"\tvoid beans() throws Exception {\n\t\tList<FieldDescriptor> beanFields = Arrays.asList(fieldWithPath(\"aliases\").description(\"Names of any aliases.\"),\n\t\t\t\tfieldWithPath(\"scope\").description(\"Scope of the bean.\"),\n\t\t\t\tfieldWithPath(\"type\").description(\"Fully qualified type of the bean.\"),\n\t\t\t\tfieldWithPath(\"resource\").description(\"Resource in which the bean was defined, if any.\").optional(),\n\t\t\t\tfieldWithPath(\"dependencies\").description(\"Names of any dependencies.\"));\n\t\tResponseFieldsSnippet responseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"), parentIdField(),\n\t\t\t\tfieldWithPath(\"contexts.*.beans\").description(\"Beans in the application context keyed by name.\"))\n\t\t\t\t\t\t.andWithPrefix(\"contexts.*.beans.*.\", beanFields);\n\t\tthis.mockMvc.perform(get(\"/actuator/beans\")).andExpect(status().isOk())\n\t\t\t\t.andDo(document(\"beans\",\n\t\t\t\t\t\tpreprocessResponse(\n\t\t\t\t\t\t\t\tlimit(this::isIndependentBean, \"contexts\", getApplicationContext().getId(), \"beans\")),\n\t\t\t\t\t\tresponseFields));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/BeansEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"NB"}],"commitId":"c5cae282613d4229a8e4e9b0c3de5a1924d177a9","commitMessage":"@@@Add support for plain text thread dumps to the threaddump endpoint\n\nWhen a request that accepts text/plain is received.  the threaddump\nendpoint will now return a thread dump in plain text. The format of\nthis text is modelled after the output produced by JVisualVM when\nconnecting to a remote process over JMX. Note that this output does\nnot include all of the information in.  for example.  JStack's output\nas it is not available via Java 8's ThreadInfo API.\n\nRather than the custom formatting logic.  using ThreadInfo's toString()\nmethod was considered but its output is documented as being undefined\nand implementation specific. The implementation used while developing\nthis feature produced output that did not match that of JStack or\nJVisualVM and truncated stack traces quite considerably.\n\nAt the time of writing the format produced by the endpoint could be\nconsumed by both Thread Dump Analyzer [1] and https://fastthread.io.\n\nCloses gh-2339\n\n[1] https://github.com/irockel/tda\n","date":"2019-07-04 04:51:56","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-07-15 02:39:18","commitOrder":6,"curCode":"\tvoid jsonThreadDump() throws Exception {\n\t\tReentrantLock lock = new ReentrantLock();\n\t\tCountDownLatch latch = new CountDownLatch(1);\n\t\tnew Thread(() -> {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tlatch.await();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}).start();\n\t\tthis.mockMvc.perform(get(\"/actuator/threaddump\").accept(MediaType.APPLICATION_JSON)).andExpect(\n\t\t\t\tstatus().isOk()).andDo(\n\t\t\t\t\t\tMockMvcRestDocumentation\n\t\t\t\t\t\t\t\t.document(\"threaddump/json\", preprocessResponse(limit(\"threads\")),\n\t\t\t\t\t\t\t\t\t\tresponseFields(fieldWithPath(\"threads\").description(\"JVM's threads.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedCount\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Total number of times that the thread has been blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedTime\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"blocked. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].daemon\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is a daemon \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread. Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.BOOLEAN),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].inNative\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is executing native code.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Description of the object on which the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Object for which the thread is blocked waiting.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified class name of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Monitors locked by this thread, if any\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the lock object.\").optional()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].lockedStackDepth\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack depth where the monitor was locked.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tsubsectionWithPath(\"threads.[].lockedMonitors.[].lockedStackFrame\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack frame that locked the monitor.\").optional()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Synchronizers locked by this thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the locked synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the locked synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerId\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"ID of the thread that owns the object on which \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the thread is blocked. `-1` if the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is not blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread that owns the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"object on which the thread is blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].priority\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Priority of the thread. Only \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack trace of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].classLoaderName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class loader of the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"class that contains the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry, if \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"any. Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class that contains the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"execution point identified by this entry.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].fileName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the source file that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].lineNumber\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Line number of the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Negative if unknown.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].methodName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the module that contains \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the execution point identified by \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"this entry, if any. Only available \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleVersion\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Version of the module that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].nativeMethod\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the execution point is a native method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].suspended\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is suspended.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadId\").description(\"ID of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadState\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"State of the thread (\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ describeEnumValues(Thread.State.class) + \").\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedCount\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Total number of times that the thread has waited\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" for notification.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedTime\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"waiting. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled\"))));\n\t\tlatch.countDown();\n\t}\n","date":"2019-07-15 07:24:19","endLine":182,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"jsonThreadDump","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a9/5b7d1dc65a0320dc4c4174dd5483175fbf6b5a.src","preCode":"\tvoid jsonThreadDump() throws Exception {\n\t\tReentrantLock lock = new ReentrantLock();\n\t\tCountDownLatch latch = new CountDownLatch(1);\n\t\tnew Thread(() -> {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tlatch.await();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}).start();\n\t\tthis.mockMvc.perform(get(\"/actuator/threaddump\").accept(MediaType.APPLICATION_JSON)).andExpect(\n\t\t\t\tstatus().isOk()).andDo(\n\t\t\t\t\t\tMockMvcRestDocumentation\n\t\t\t\t\t\t\t\t.document(\"threaddump/json\", preprocessResponse(limit(\"threads\")),\n\t\t\t\t\t\t\t\t\t\tresponseFields(fieldWithPath(\"threads\").description(\"JVM's threads.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedCount\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Total number of times that the thread has been \" + \"blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedTime\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"blocked. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].daemon\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is a daemon \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread. Only available on Java 9 or \" + \"later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.BOOLEAN),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].inNative\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is executing native code.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Description of the object on which the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Object for which the thread is blocked \" + \"waiting.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Fully qualified class name of the lock\" + \" object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Monitors locked by this thread, if any\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the lock object.\").optional()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock \" + \"object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].lockedStackDepth\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack depth where the monitor \" + \"was locked.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tsubsectionWithPath(\"threads.[].lockedMonitors.[].lockedStackFrame\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack frame that locked the \" + \"monitor.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Synchronizers locked by this thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the locked \" + \"synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Identity hash code of the locked \" + \"synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerId\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"ID of the thread that owns the object on which \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the thread is blocked. `-1` if the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is not blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread that owns the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"object on which the thread is \" + \"blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].priority\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Priority of the thread. Only \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack trace of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].classLoaderName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class loader of the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"class that contains the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry, if \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"any. Only available on Java 9 or \" + \"later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class that contains the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"execution point identified \" + \"by this entry.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].fileName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the source file that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].lineNumber\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Line number of the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Negative if unknown.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].methodName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the module that contains \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the execution point identified by \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"this entry, if any. Only available \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleVersion\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Version of the module that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].nativeMethod\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Whether the execution point is a native \" + \"method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].suspended\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is suspended.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadId\").description(\"ID of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadState\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"State of the thread (\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ describeEnumValues(Thread.State.class) + \").\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedCount\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Total number of times that the thread has waited\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" for notification.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedTime\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"waiting. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled\"))));\n\t\tlatch.countDown();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ThreadDumpEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid beans() throws Exception {\n\t\tList<FieldDescriptor> beanFields = Arrays.asList(fieldWithPath(\"aliases\").description(\"Names of any aliases.\"),\n\t\t\t\tfieldWithPath(\"scope\").description(\"Scope of the bean.\"),\n\t\t\t\tfieldWithPath(\"type\").description(\"Fully qualified type of the bean.\"),\n\t\t\t\tfieldWithPath(\"resource\").description(\"Resource in which the bean was defined, if any.\").optional(),\n\t\t\t\tfieldWithPath(\"dependencies\").description(\"Names of any dependencies.\"));\n\t\tResponseFieldsSnippet responseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"), parentIdField(),\n\t\t\t\tfieldWithPath(\"contexts.*.beans\").description(\"Beans in the application context keyed by name.\"))\n\t\t\t\t\t\t.andWithPrefix(\"contexts.*.beans.*.\", beanFields);\n\t\tthis.mockMvc.perform(get(\"/actuator/beans\")).andExpect(status().isOk())\n\t\t\t\t.andDo(document(\"beans\",\n\t\t\t\t\t\tpreprocessResponse(\n\t\t\t\t\t\t\t\tlimit(this::isIndependentBean, \"contexts\", getApplicationContext().getId(), \"beans\")),\n\t\t\t\t\t\tresponseFields));\n\t}\n","date":"2019-06-07 19:25:54","endLine":66,"groupId":"2562","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a6/96e008e414d1673946a8160d76d84e4939a91c.src","preCode":"\tvoid beans() throws Exception {\n\t\tList<FieldDescriptor> beanFields = Arrays.asList(fieldWithPath(\"aliases\").description(\"Names of any aliases.\"),\n\t\t\t\tfieldWithPath(\"scope\").description(\"Scope of the bean.\"),\n\t\t\t\tfieldWithPath(\"type\").description(\"Fully qualified type of the bean.\"),\n\t\t\t\tfieldWithPath(\"resource\").description(\"Resource in which the bean was defined, if any.\").optional(),\n\t\t\t\tfieldWithPath(\"dependencies\").description(\"Names of any dependencies.\"));\n\t\tResponseFieldsSnippet responseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"), parentIdField(),\n\t\t\t\tfieldWithPath(\"contexts.*.beans\").description(\"Beans in the application context keyed by name.\"))\n\t\t\t\t\t\t.andWithPrefix(\"contexts.*.beans.*.\", beanFields);\n\t\tthis.mockMvc.perform(get(\"/actuator/beans\")).andExpect(status().isOk())\n\t\t\t\t.andDo(document(\"beans\",\n\t\t\t\t\t\tpreprocessResponse(\n\t\t\t\t\t\t\t\tlimit(this::isIndependentBean, \"contexts\", getApplicationContext().getId(), \"beans\")),\n\t\t\t\t\t\tresponseFields));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/BeansEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"01933f9b064860e5bbca4e3ff71789dbcf615e19","commitMessage":"@@@Merge previously split strings\n\nMerge some string lines that were previously split because of the\n90 chars wide formatting.\n","date":"2019-07-15 07:24:19","modifiedFileCount":"173","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-12-01 00:18:35","codes":[{"authorDate":"2019-07-15 02:39:18","commitOrder":7,"curCode":"\tvoid jsonThreadDump() throws Exception {\n\t\tReentrantLock lock = new ReentrantLock();\n\t\tCountDownLatch latch = new CountDownLatch(1);\n\t\tnew Thread(() -> {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tlatch.await();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}).start();\n\t\tthis.mockMvc.perform(get(\"/actuator/threaddump\").accept(MediaType.APPLICATION_JSON)).andExpect(\n\t\t\t\tstatus().isOk()).andDo(\n\t\t\t\t\t\tMockMvcRestDocumentation\n\t\t\t\t\t\t\t\t.document(\"threaddump/json\", preprocessResponse(limit(\"threads\")),\n\t\t\t\t\t\t\t\t\t\tresponseFields(fieldWithPath(\"threads\").description(\"JVM's threads.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedCount\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Total number of times that the thread has been blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedTime\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"blocked. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].daemon\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is a daemon \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread. Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.BOOLEAN),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].inNative\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is executing native code.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Description of the object on which the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Object for which the thread is blocked waiting.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified class name of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Monitors locked by this thread, if any\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the lock object.\").optional()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].lockedStackDepth\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack depth where the monitor was locked.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tsubsectionWithPath(\"threads.[].lockedMonitors.[].lockedStackFrame\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack frame that locked the monitor.\").optional()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Synchronizers locked by this thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the locked synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the locked synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerId\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"ID of the thread that owns the object on which \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the thread is blocked. `-1` if the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is not blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread that owns the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"object on which the thread is blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].priority\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Priority of the thread. Only \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack trace of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].classLoaderName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class loader of the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"class that contains the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry, if \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"any. Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class that contains the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"execution point identified by this entry.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].fileName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the source file that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].lineNumber\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Line number of the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Negative if unknown.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].methodName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the module that contains \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the execution point identified by \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"this entry, if any. Only available \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleVersion\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Version of the module that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].nativeMethod\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the execution point is a native method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].suspended\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is suspended.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadId\").description(\"ID of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadState\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"State of the thread (\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ describeEnumValues(Thread.State.class) + \").\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedCount\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Total number of times that the thread has waited\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" for notification.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedTime\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"waiting. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled\"))));\n\t\tlatch.countDown();\n\t}\n","date":"2019-07-15 07:24:19","endLine":182,"groupId":"10839","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"jsonThreadDump","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a9/5b7d1dc65a0320dc4c4174dd5483175fbf6b5a.src","preCode":"\tvoid jsonThreadDump() throws Exception {\n\t\tReentrantLock lock = new ReentrantLock();\n\t\tCountDownLatch latch = new CountDownLatch(1);\n\t\tnew Thread(() -> {\n\t\t\ttry {\n\t\t\t\tlock.lock();\n\t\t\t\ttry {\n\t\t\t\t\tlatch.await();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tlock.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}).start();\n\t\tthis.mockMvc.perform(get(\"/actuator/threaddump\").accept(MediaType.APPLICATION_JSON)).andExpect(\n\t\t\t\tstatus().isOk()).andDo(\n\t\t\t\t\t\tMockMvcRestDocumentation\n\t\t\t\t\t\t\t\t.document(\"threaddump/json\", preprocessResponse(limit(\"threads\")),\n\t\t\t\t\t\t\t\t\t\tresponseFields(fieldWithPath(\"threads\").description(\"JVM's threads.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedCount\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Total number of times that the thread has been blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].blockedTime\").description(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"blocked. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].daemon\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is a daemon \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread. Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.BOOLEAN),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].inNative\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is executing native code.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Description of the object on which the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Object for which the thread is blocked waiting.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified class name of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockInfo.identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Monitors locked by this thread, if any\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the lock object.\").optional()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the lock object.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedMonitors.[].lockedStackDepth\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack depth where the monitor was locked.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tsubsectionWithPath(\"threads.[].lockedMonitors.[].lockedStackFrame\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack frame that locked the monitor.\").optional()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Synchronizers locked by this thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the locked synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockedSynchronizers.[].identityHashCode\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Identity hash code of the locked synchronizer.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerId\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"ID of the thread that owns the object on which \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the thread is blocked. `-1` if the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"thread is not blocked.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].lockOwnerName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread that owns the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"object on which the thread is blocked, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].priority\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Priority of the thread. Only \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.NUMBER),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Stack trace of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].classLoaderName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class loader of the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"class that contains the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry, if \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"any. Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].className\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the class that contains the \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"execution point identified by this entry.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].fileName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the source file that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].lineNumber\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Line number of the execution \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"point identified by this entry. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Negative if unknown.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].methodName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the module that contains \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the execution point identified by \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"this entry, if any. Only available \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].moduleVersion\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Version of the module that \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"contains the execution point \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"identified by this entry, if any. \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"Only available on Java 9 or later.\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.STRING),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].stackTrace.[].nativeMethod\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the execution point is a native method.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].suspended\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Whether the thread is suspended.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadId\").description(\"ID of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadName\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Name of the thread.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].threadState\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"State of the thread (\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ describeEnumValues(Thread.State.class) + \").\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedCount\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Total number of times that the thread has waited\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" for notification.\"),\n\t\t\t\t\t\t\t\t\t\t\t\tfieldWithPath(\"threads.[].waitedTime\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(\"Time in milliseconds that the thread has spent \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"waiting. -1 if thread contention \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"monitoring is disabled\"))));\n\t\tlatch.countDown();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ThreadDumpEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2020-12-01 00:18:35","commitOrder":7,"curCode":"\tvoid beans() throws Exception {\n\t\tList<FieldDescriptor> beanFields = Arrays.asList(fieldWithPath(\"aliases\").description(\"Names of any aliases.\"),\n\t\t\t\tfieldWithPath(\"scope\").description(\"Scope of the bean.\"),\n\t\t\t\tfieldWithPath(\"type\").description(\"Fully qualified type of the bean.\"),\n\t\t\t\tfieldWithPath(\"resource\").description(\"Resource in which the bean was defined, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.STRING),\n\t\t\t\tfieldWithPath(\"dependencies\").description(\"Names of any dependencies.\"));\n\t\tResponseFieldsSnippet responseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"), parentIdField(),\n\t\t\t\tfieldWithPath(\"contexts.*.beans\").description(\"Beans in the application context keyed by name.\"))\n\t\t\t\t\t\t.andWithPrefix(\"contexts.*.beans.*.\", beanFields);\n\t\tthis.mockMvc.perform(get(\"/actuator/beans\")).andExpect(status().isOk())\n\t\t\t\t.andDo(document(\"beans\",\n\t\t\t\t\t\tpreprocessResponse(\n\t\t\t\t\t\t\t\tlimit(this::isIndependentBean, \"contexts\", getApplicationContext().getId(), \"beans\")),\n\t\t\t\t\t\tresponseFields));\n\t}\n","date":"2020-12-01 00:18:35","endLine":68,"groupId":"10839","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"beans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/41/a4ae8563c03ca0ad347e469cf44b55f4362b04.src","preCode":"\tvoid beans() throws Exception {\n\t\tList<FieldDescriptor> beanFields = Arrays.asList(fieldWithPath(\"aliases\").description(\"Names of any aliases.\"),\n\t\t\t\tfieldWithPath(\"scope\").description(\"Scope of the bean.\"),\n\t\t\t\tfieldWithPath(\"type\").description(\"Fully qualified type of the bean.\"),\n\t\t\t\tfieldWithPath(\"resource\").description(\"Resource in which the bean was defined, if any.\").optional(),\n\t\t\t\tfieldWithPath(\"dependencies\").description(\"Names of any dependencies.\"));\n\t\tResponseFieldsSnippet responseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"), parentIdField(),\n\t\t\t\tfieldWithPath(\"contexts.*.beans\").description(\"Beans in the application context keyed by name.\"))\n\t\t\t\t\t\t.andWithPrefix(\"contexts.*.beans.*.\", beanFields);\n\t\tthis.mockMvc.perform(get(\"/actuator/beans\")).andExpect(status().isOk())\n\t\t\t\t.andDo(document(\"beans\",\n\t\t\t\t\t\tpreprocessResponse(\n\t\t\t\t\t\t\t\tlimit(this::isIndependentBean, \"contexts\", getApplicationContext().getId(), \"beans\")),\n\t\t\t\t\t\tresponseFields));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/BeansEndpointDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"bd7e89be1afb1f684317a9976663eb58e47b782d","commitMessage":"@@@Start building against Spring Framework 5.3.2 snapshots\n\nSee gh-24278\n","date":"2020-12-01 00:18:35","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"}]
