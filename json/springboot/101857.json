[{"authorTime":"2018-01-11 19:10:32","codes":[{"authorDate":"2018-01-11 19:10:32","commitOrder":1,"curCode":"\tpublic void applicationRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, times(0))\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","date":"2018-01-11 19:26:53","endLine":661,"groupId":"2884","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"applicationRunnerFailureCausesApplicationFailedEventToBePublished","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7b/7d20a6579b931c39dccbc112ab0c0b222a643e.src","preCode":"\tpublic void applicationRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, times(0))\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":638,"status":"B"},{"authorDate":"2018-01-11 19:10:32","commitOrder":1,"curCode":"\tpublic void commandLineRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, times(0))\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","date":"2018-01-11 19:26:53","endLine":687,"groupId":"8463","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"commandLineRunnerFailureCausesApplicationFailedEventToBePublished","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7b/7d20a6579b931c39dccbc112ab0c0b222a643e.src","preCode":"\tpublic void commandLineRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, times(0))\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"B"}],"commitId":"a051e30fe0ac00263ace6d97282a4268d35b83a2","commitMessage":"@@@Publish an event after refresh but before runners are called\n\nThis commit partially reverts the changes made in ec470fbe. While\nthe started message continues to be logged before any application and\ncommand line runners are called.  the publishing of\nApplicationReadyEvent now happens after the runners have been called.\nAdditionally.  a new event.  named ApplicationStartedEvent.  has been\nintroduced. This new event is published after the context has been\nrefreshed but before any application and command line runners are\ncalled.\n\nCloses gh-11484\n\nThe reworking of the events described above also means that either\nan ApplicationReadyEvent or an ApplicationFailedEvent will be\npublished and the latter should never be published once the former\nhas been published.\n\nCloses gh-11485\n","date":"2018-01-11 19:26:53","modifiedFileCount":"5","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2018-03-15 06:12:35","codes":[{"authorDate":"2018-03-15 06:12:35","commitOrder":2,"curCode":"\tpublic void applicationRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, never())\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","date":"2018-03-15 06:12:35","endLine":660,"groupId":"2884","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"applicationRunnerFailureCausesApplicationFailedEventToBePublished","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/02/f71004d2cfb7cfb080f358c07eea80b9e7e158.src","preCode":"\tpublic void applicationRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, times(0))\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"M"},{"authorDate":"2018-03-15 06:12:35","commitOrder":2,"curCode":"\tpublic void commandLineRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, never())\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","date":"2018-03-15 06:12:35","endLine":686,"groupId":"8463","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"commandLineRunnerFailureCausesApplicationFailedEventToBePublished","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/02/f71004d2cfb7cfb080f358c07eea80b9e7e158.src","preCode":"\tpublic void commandLineRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, times(0))\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":663,"status":"M"}],"commitId":"8a53631066e55163f3f724d550e9c79db0b98c94","commitMessage":"@@@Merge pull request #12475 from dreis2211\n\n* pr/12475:\n  Replace Mockito.times(0) with Mockito.never()\n","date":"2018-03-15 06:12:35","modifiedFileCount":"14","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-10-02 02:18:16","codes":[{"authorDate":"2018-10-02 02:18:16","commitOrder":3,"curCode":"\tpublic void applicationRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}\n","date":"2018-10-03 01:55:28","endLine":701,"groupId":"8925","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"applicationRunnerFailureCausesApplicationFailedEventToBePublished","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/27/5298cd6e4df8b3b9302e545b50038b03cefb1a.src","preCode":"\tpublic void applicationRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, never())\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"M"},{"authorDate":"2018-10-02 02:18:16","commitOrder":3,"curCode":"\tpublic void commandLineRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}\n","date":"2018-10-03 01:55:28","endLine":721,"groupId":"12076","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"commandLineRunnerFailureCausesApplicationFailedEventToBePublished","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/27/5298cd6e4df8b3b9302e545b50038b03cefb1a.src","preCode":"\tpublic void commandLineRunnerFailureCausesApplicationFailedEventToBePublished()\n\t\t\tthrows Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(\n\t\t\t\tApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory()\n\t\t\t\t.registerSingleton(\"runner\", runner));\n\t\tthis.thrown.expectCause(equalTo(failure));\n\t\ttry {\n\t\t\tapplication.run();\n\t\t}\n\t\tfinally {\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\t\tverify(listener, never())\n\t\t\t\t\t.onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"M"}],"commitId":"d76bba5e6f5c702c8bf2aa86fee19ec7de8ed3cb","commitMessage":"@@@Migrate from ExpectedException rule to AssertJ\n\nReplace ExpectedException JUnit rules with AssertJ exception\nassertions.\n\nCloses gh-14336\n","date":"2018-10-03 01:55:28","modifiedFileCount":"271","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid applicationRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}\n","date":"2019-06-07 19:25:54","endLine":667,"groupId":"101857","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"applicationRunnerFailureCausesApplicationFailedEventToBePublished","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/b7ed11c647d2d175a7e722635161ed6ad25db5.src","preCode":"\tpublic void applicationRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tApplicationRunner runner = mock(ApplicationRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run(isA(ApplicationArguments.class));\n\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid commandLineRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}\n","date":"2019-06-07 19:25:54","endLine":684,"groupId":"101857","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"commandLineRunnerFailureCausesApplicationFailedEventToBePublished","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/b7ed11c647d2d175a7e722635161ed6ad25db5.src","preCode":"\tpublic void commandLineRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {\n\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class);\n\t\tapplication.addListeners(listener);\n\t\tCommandLineRunner runner = mock(CommandLineRunner.class);\n\t\tException failure = new Exception();\n\t\twillThrow(failure).given(runner).run();\n\t\tapplication.addInitializers((context) -> context.getBeanFactory().registerSingleton(\"runner\", runner));\n\t\tassertThatIllegalStateException().isThrownBy(application::run).withCause(failure);\n\t\tverify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class));\n\t\tverify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class));\n\t\tverify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class));\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
