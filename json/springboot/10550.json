[{"authorTime":"2021-07-13 21:56:36","codes":[{"authorDate":"2021-07-13 21:56:36","commitOrder":1,"curCode":"\tvoid healthWhenClusterStateIsAbsentShouldBeUp() {\n\t\tReactiveRedisConnectionFactory redisConnectionFactory = createClusterConnectionFactory(null);\n\t\tRedisReactiveHealthIndicator healthIndicator = new RedisReactiveHealthIndicator(redisConnectionFactory);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails().get(\"cluster_size\")).isEqualTo(4L);\n\t\t\tassertThat(h.getDetails().get(\"slots_up\")).isEqualTo(4L);\n\t\t\tassertThat(h.getDetails().get(\"slots_fail\")).isEqualTo(0L);\n\t\t}).verifyComplete();\n\t\tverify(redisConnectionFactory.getReactiveConnection()).closeLater();\n\t}\n","date":"2021-07-13 21:56:36","endLine":81,"groupId":"3287","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"healthWhenClusterStateIsAbsentShouldBeUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/43/1cdf165e1ccdfb6b1e03432c476b394758f8c1.src","preCode":"\tvoid healthWhenClusterStateIsAbsentShouldBeUp() {\n\t\tReactiveRedisConnectionFactory redisConnectionFactory = createClusterConnectionFactory(null);\n\t\tRedisReactiveHealthIndicator healthIndicator = new RedisReactiveHealthIndicator(redisConnectionFactory);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails().get(\"cluster_size\")).isEqualTo(4L);\n\t\t\tassertThat(h.getDetails().get(\"slots_up\")).isEqualTo(4L);\n\t\t\tassertThat(h.getDetails().get(\"slots_fail\")).isEqualTo(0L);\n\t\t}).verifyComplete();\n\t\tverify(redisConnectionFactory.getReactiveConnection()).closeLater();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2021-07-13 21:56:36","commitOrder":1,"curCode":"\tvoid healthWhenClusterStateIsFailShouldBeDown() {\n\t\tProperties clusterProperties = new Properties();\n\t\tclusterProperties.setProperty(\"cluster_state\", \"fail\");\n\t\tReactiveRedisConnectionFactory redisConnectionFactory = createClusterConnectionFactory(\"fail\");\n\t\tRedisReactiveHealthIndicator healthIndicator = new RedisReactiveHealthIndicator(redisConnectionFactory);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.DOWN);\n\t\t\tassertThat(h.getDetails().get(\"slots_up\")).isEqualTo(3L);\n\t\t\tassertThat(h.getDetails().get(\"slots_fail\")).isEqualTo(1L);\n\t\t}).verifyComplete();\n\t}\n","date":"2021-07-13 21:56:36","endLine":108,"groupId":"3289","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"healthWhenClusterStateIsFailShouldBeDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/43/1cdf165e1ccdfb6b1e03432c476b394758f8c1.src","preCode":"\tvoid healthWhenClusterStateIsFailShouldBeDown() {\n\t\tProperties clusterProperties = new Properties();\n\t\tclusterProperties.setProperty(\"cluster_state\", \"fail\");\n\t\tReactiveRedisConnectionFactory redisConnectionFactory = createClusterConnectionFactory(\"fail\");\n\t\tRedisReactiveHealthIndicator healthIndicator = new RedisReactiveHealthIndicator(redisConnectionFactory);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.DOWN);\n\t\t\tassertThat(h.getDetails().get(\"slots_up\")).isEqualTo(3L);\n\t\t\tassertThat(h.getDetails().get(\"slots_fail\")).isEqualTo(1L);\n\t\t}).verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"9b82836f0ecc39070e4f95cfdf5825fec386f581","commitMessage":"@@@Merge branch '2.5.x'\n\nCloses gh-27305\n","date":"2021-07-13 21:56:36","modifiedFileCount":"5","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2021-07-21 18:07:15","codes":[{"authorDate":"2021-07-13 21:56:36","commitOrder":2,"curCode":"\tvoid healthWhenClusterStateIsAbsentShouldBeUp() {\n\t\tReactiveRedisConnectionFactory redisConnectionFactory = createClusterConnectionFactory(null);\n\t\tRedisReactiveHealthIndicator healthIndicator = new RedisReactiveHealthIndicator(redisConnectionFactory);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails().get(\"cluster_size\")).isEqualTo(4L);\n\t\t\tassertThat(h.getDetails().get(\"slots_up\")).isEqualTo(4L);\n\t\t\tassertThat(h.getDetails().get(\"slots_fail\")).isEqualTo(0L);\n\t\t}).verifyComplete();\n\t\tverify(redisConnectionFactory.getReactiveConnection()).closeLater();\n\t}\n","date":"2021-07-13 21:56:36","endLine":81,"groupId":"10550","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"healthWhenClusterStateIsAbsentShouldBeUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/43/1cdf165e1ccdfb6b1e03432c476b394758f8c1.src","preCode":"\tvoid healthWhenClusterStateIsAbsentShouldBeUp() {\n\t\tReactiveRedisConnectionFactory redisConnectionFactory = createClusterConnectionFactory(null);\n\t\tRedisReactiveHealthIndicator healthIndicator = new RedisReactiveHealthIndicator(redisConnectionFactory);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(h.getDetails().get(\"cluster_size\")).isEqualTo(4L);\n\t\t\tassertThat(h.getDetails().get(\"slots_up\")).isEqualTo(4L);\n\t\t\tassertThat(h.getDetails().get(\"slots_fail\")).isEqualTo(0L);\n\t\t}).verifyComplete();\n\t\tverify(redisConnectionFactory.getReactiveConnection()).closeLater();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2021-07-21 18:07:15","commitOrder":2,"curCode":"\tvoid healthWhenClusterStateIsFailShouldBeDown() {\n\t\tReactiveRedisConnectionFactory redisConnectionFactory = createClusterConnectionFactory(\"fail\");\n\t\tRedisReactiveHealthIndicator healthIndicator = new RedisReactiveHealthIndicator(redisConnectionFactory);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.DOWN);\n\t\t\tassertThat(h.getDetails().get(\"slots_up\")).isEqualTo(3L);\n\t\t\tassertThat(h.getDetails().get(\"slots_fail\")).isEqualTo(1L);\n\t\t}).verifyComplete();\n\t}\n","date":"2021-07-21 18:07:15","endLine":106,"groupId":"10550","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"healthWhenClusterStateIsFailShouldBeDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/cb/45f42bfe6de9d2a3f739d0fde13052da199d2f.src","preCode":"\tvoid healthWhenClusterStateIsFailShouldBeDown() {\n\t\tProperties clusterProperties = new Properties();\n\t\tclusterProperties.setProperty(\"cluster_state\", \"fail\");\n\t\tReactiveRedisConnectionFactory redisConnectionFactory = createClusterConnectionFactory(\"fail\");\n\t\tRedisReactiveHealthIndicator healthIndicator = new RedisReactiveHealthIndicator(redisConnectionFactory);\n\t\tMono<Health> health = healthIndicator.health();\n\t\tStepVerifier.create(health).consumeNextWith((h) -> {\n\t\t\tassertThat(h.getStatus()).isEqualTo(Status.DOWN);\n\t\t\tassertThat(h.getDetails().get(\"slots_up\")).isEqualTo(3L);\n\t\t\tassertThat(h.getDetails().get(\"slots_fail\")).isEqualTo(1L);\n\t\t}).verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"c211c971f160144e8bd5125ffdfd588632d130d6","commitMessage":"@@@Polishing\n\nCloses gh-27429\n","date":"2021-07-21 18:07:15","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"}]
