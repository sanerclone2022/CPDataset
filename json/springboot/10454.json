[{"authorTime":"2018-01-19 12:52:35","codes":[{"authorDate":"2018-01-19 12:52:35","commitOrder":1,"curCode":"\tpublic void getEndpointsShouldIncludeControllerEndpoints() {\n\t\tload(TestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestControllerEndpoint.class);\n\t\t});\n\t}\n","date":"2018-01-20 13:06:32","endLine":65,"groupId":"16411","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/00/eabebac787334fd9a8219c8201634a253317a0.src","preCode":"\tpublic void getEndpointsShouldIncludeControllerEndpoints() {\n\t\tload(TestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestControllerEndpoint.class);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2018-01-19 12:52:35","commitOrder":1,"curCode":"\tpublic void getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tload(TestRestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testrestcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestRestControllerEndpoint.class);\n\t\t});\n\t}\n","date":"2018-01-20 13:06:32","endLine":77,"groupId":"16411","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeRestControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/00/eabebac787334fd9a8219c8201634a253317a0.src","preCode":"\tpublic void getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tload(TestRestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testrestcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestRestControllerEndpoint.class);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"bda9b892b399d0b6b5d385b1d90f6011c09e8ec0","commitMessage":"@@@Add direct WebFlux and WebMvc endpoint support\n\nAdd `@ControllerEndpoint` and `@RestControllerEndpoint` annotations that\ncan be used to develop a Spring-only request mapped endpoint. Both\nSpring MVC and Spring WebFlux are supported.\n\nThis feature is primarily for use when deeper Spring integration is\nrequired or when existing Spring Boot 1.5 projects want to migrate to\nSpring Boot 2.0 without re-writing existing endpoints. It comes at the\nexpense of portability.  since such endpoints will be missing from\nJersey.\n\nFixes gh-10257\n","date":"2018-01-20 13:06:32","modifiedFileCount":"14","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-01-19 12:52:35","codes":[{"authorDate":"2018-01-24 09:15:25","commitOrder":2,"curCode":"\tpublic void getEndpointsShouldIncludeControllerEndpoints() {\n\t\tload(TestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestControllerEndpoint.class);\n\t\t\tassertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);\n\t\t});\n\t}\n","date":"2018-01-25 09:06:13","endLine":67,"groupId":"16411","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b2/9ad955ad0531b9909d496f0a5c87035a674a2c.src","preCode":"\tpublic void getEndpointsShouldIncludeControllerEndpoints() {\n\t\tload(TestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestControllerEndpoint.class);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2018-01-19 12:52:35","commitOrder":2,"curCode":"\tpublic void getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tload(TestRestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testrestcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestRestControllerEndpoint.class);\n\t\t});\n\t}\n","date":"2018-01-20 13:06:32","endLine":77,"groupId":"16411","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeRestControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/00/eabebac787334fd9a8219c8201634a253317a0.src","preCode":"\tpublic void getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tload(TestRestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testrestcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestRestControllerEndpoint.class);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"}],"commitId":"017efda6ec276508ae64beb1b52ad606f5f03401","commitMessage":"@@@Add @EndpointServlet and migrate Jolokia\n\nAdd first class support for Servlet based endpoints and rework the\nJolokia endpoint to use it.\n\nFixes gh-10264\n","date":"2018-01-25 09:06:13","modifiedFileCount":"9","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-04-11 02:24:19","codes":[{"authorDate":"2018-04-11 02:24:19","commitOrder":3,"curCode":"\tpublic void getEndpointsShouldIncludeControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestControllerEndpoint.class)\n\t\t\t\t.run(assertDiscoverer((discoverer) -> {\n\t\t\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testcontroller\");\n\t\t\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t\t\t.isInstanceOf(TestControllerEndpoint.class);\n\t\t\t\t\tassertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);\n\t\t\t\t}));\n\t}\n","date":"2018-04-11 02:24:19","endLine":77,"groupId":"16411","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b1/ea4acc06f5be66e8bd944aeef02b1351f74f1d.src","preCode":"\tpublic void getEndpointsShouldIncludeControllerEndpoints() {\n\t\tload(TestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestControllerEndpoint.class);\n\t\t\tassertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2018-04-11 02:24:19","commitOrder":3,"curCode":"\tpublic void getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestRestControllerEndpoint.class)\n\t\t\t\t.run(assertDiscoverer((discoverer) -> {\n\t\t\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testrestcontroller\");\n\t\t\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t\t\t.isInstanceOf(TestRestControllerEndpoint.class);\n\t\t\t\t}));\n\t}\n","date":"2018-04-11 02:24:19","endLine":106,"groupId":"16411","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeRestControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b1/ea4acc06f5be66e8bd944aeef02b1351f74f1d.src","preCode":"\tpublic void getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tload(TestRestControllerEndpoint.class, (discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testrestcontroller\");\n\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t.isInstanceOf(TestRestControllerEndpoint.class);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"55ea9f796fff1ac03166ce1890cceb93916f34bf","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-04-11 02:24:19","modifiedFileCount":"4","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":4,"curCode":"\tpublic void getEndpointsShouldIncludeControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestControllerEndpoint.class)\n\t\t\t\t.run(assertDiscoverer((discoverer) -> {\n\t\t\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getEndpointId())\n\t\t\t\t\t\t\t.isEqualTo(EndpointId.of(\"testcontroller\"));\n\t\t\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t\t\t.isInstanceOf(TestControllerEndpoint.class);\n\t\t\t\t\tassertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);\n\t\t\t\t}));\n\t}\n","date":"2018-10-15 04:53:28","endLine":76,"groupId":"16411","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/20/b9ab00fc7e9e0e63d7dad11fb75ad0ddce7c01.src","preCode":"\tpublic void getEndpointsShouldIncludeControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestControllerEndpoint.class)\n\t\t\t\t.run(assertDiscoverer((discoverer) -> {\n\t\t\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testcontroller\");\n\t\t\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t\t\t.isInstanceOf(TestControllerEndpoint.class);\n\t\t\t\t\tassertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);\n\t\t\t\t}));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-10-15 04:53:28","commitOrder":4,"curCode":"\tpublic void getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestRestControllerEndpoint.class)\n\t\t\t\t.run(assertDiscoverer((discoverer) -> {\n\t\t\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getEndpointId())\n\t\t\t\t\t\t\t.isEqualTo(EndpointId.of(\"testrestcontroller\"));\n\t\t\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t\t\t.isInstanceOf(TestRestControllerEndpoint.class);\n\t\t\t\t}));\n\t}\n","date":"2018-10-15 04:53:28","endLine":109,"groupId":"16411","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeRestControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/20/b9ab00fc7e9e0e63d7dad11fb75ad0ddce7c01.src","preCode":"\tpublic void getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestRestControllerEndpoint.class)\n\t\t\t\t.run(assertDiscoverer((discoverer) -> {\n\t\t\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getId()).isEqualTo(\"testrestcontroller\");\n\t\t\t\t\tassertThat(endpoint.getController())\n\t\t\t\t\t\t\t.isInstanceOf(TestRestControllerEndpoint.class);\n\t\t\t\t}));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid getEndpointsShouldIncludeControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestControllerEndpoint.class).run(assertDiscoverer((discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of(\"testcontroller\"));\n\t\t\tassertThat(endpoint.getController()).isInstanceOf(TestControllerEndpoint.class);\n\t\t\tassertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);\n\t\t}));\n\t}\n","date":"2019-06-07 19:25:54","endLine":70,"groupId":"10454","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/72/6fdec1443f899669409870703ca6b93ca207ae.src","preCode":"\tpublic void getEndpointsShouldIncludeControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestControllerEndpoint.class).run(assertDiscoverer((discoverer) -> {\n\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\tassertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of(\"testcontroller\"));\n\t\t\tassertThat(endpoint.getController()).isInstanceOf(TestControllerEndpoint.class);\n\t\t\tassertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);\n\t\t}));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestRestControllerEndpoint.class)\n\t\t\t\t.run(assertDiscoverer((discoverer) -> {\n\t\t\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of(\"testrestcontroller\"));\n\t\t\t\t\tassertThat(endpoint.getController()).isInstanceOf(TestRestControllerEndpoint.class);\n\t\t\t\t}));\n\t}\n","date":"2019-06-07 19:25:54","endLine":96,"groupId":"10454","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsShouldIncludeRestControllerEndpoints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/72/6fdec1443f899669409870703ca6b93ca207ae.src","preCode":"\tpublic void getEndpointsShouldIncludeRestControllerEndpoints() {\n\t\tthis.contextRunner.withUserConfiguration(TestRestControllerEndpoint.class)\n\t\t\t\t.run(assertDiscoverer((discoverer) -> {\n\t\t\t\t\tCollection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();\n\t\t\t\t\tassertThat(endpoints).hasSize(1);\n\t\t\t\t\tExposableControllerEndpoint endpoint = endpoints.iterator().next();\n\t\t\t\t\tassertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of(\"testrestcontroller\"));\n\t\t\t\t\tassertThat(endpoint.getController()).isInstanceOf(TestRestControllerEndpoint.class);\n\t\t\t\t}));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
