[{"authorTime":"2018-10-12 07:19:29","codes":[{"authorDate":"2018-01-05 20:33:21","commitOrder":5,"curCode":"\tpublic void metricValuesAreTheSumOfAllTimeSeriesMatchingTags() {\n\t\tthis.registry.counter(\"cache\", \"result\", \"hit\", \"host\", \"1\").increment(2);\n\t\tthis.registry.counter(\"cache\", \"result\", \"miss\", \"host\", \"1\").increment(2);\n\t\tthis.registry.counter(\"cache\", \"result\", \"hit\", \"host\", \"2\").increment(2);\n\t\tMetricsEndpoint.MetricResponse response = this.endpoint.metric(\"cache\",\n\t\t\t\tCollections.emptyList());\n\t\tassertThat(response.getName()).isEqualTo(\"cache\");\n\t\tassertThat(availableTagKeys(response)).containsExactly(\"result\", \"host\");\n\t\tassertThat(getCount(response)).hasValue(6.0);\n\t\tresponse = this.endpoint.metric(\"cache\", Collections.singletonList(\"result:hit\"));\n\t\tassertThat(availableTagKeys(response)).containsExactly(\"host\");\n\t\tassertThat(getCount(response)).hasValue(4.0);\n\t}\n","date":"2018-01-05 20:42:47","endLine":88,"groupId":"16441","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"metricValuesAreTheSumOfAllTimeSeriesMatchingTags","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/83/f4326920e25a45586332f148120b2c9d2cd413.src","preCode":"\tpublic void metricValuesAreTheSumOfAllTimeSeriesMatchingTags() {\n\t\tthis.registry.counter(\"cache\", \"result\", \"hit\", \"host\", \"1\").increment(2);\n\t\tthis.registry.counter(\"cache\", \"result\", \"miss\", \"host\", \"1\").increment(2);\n\t\tthis.registry.counter(\"cache\", \"result\", \"hit\", \"host\", \"2\").increment(2);\n\t\tMetricsEndpoint.MetricResponse response = this.endpoint.metric(\"cache\",\n\t\t\t\tCollections.emptyList());\n\t\tassertThat(response.getName()).isEqualTo(\"cache\");\n\t\tassertThat(availableTagKeys(response)).containsExactly(\"result\", \"host\");\n\t\tassertThat(getCount(response)).hasValue(6.0);\n\t\tresponse = this.endpoint.metric(\"cache\", Collections.singletonList(\"result:hit\"));\n\t\tassertThat(availableTagKeys(response)).containsExactly(\"host\");\n\t\tassertThat(getCount(response)).hasValue(4.0);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"NB"},{"authorDate":"2018-10-12 07:19:29","commitOrder":5,"curCode":"\tpublic void matchingMeterNotFoundInNestedRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tCompositeMeterRegistry firstLevel = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry secondLevel = new SimpleMeterRegistry();\n\t\tcomposite.add(firstLevel);\n\t\tfirstLevel.add(secondLevel);\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tMetricsEndpoint.MetricResponse response = endpoint.metric(\"invalid.metric.name\",\n\t\t\t\tCollections.emptyList());\n\t\tassertThat(response).isNull();\n\t}\n","date":"2018-10-12 07:19:29","endLine":128,"groupId":"14496","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"matchingMeterNotFoundInNestedRegistries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f7/3d0bf649dd384552fa165c0ef5cf4a68931b65.src","preCode":"\tpublic void matchingMeterNotFoundInNestedRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tCompositeMeterRegistry firstLevel = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry secondLevel = new SimpleMeterRegistry();\n\t\tcomposite.add(firstLevel);\n\t\tfirstLevel.add(secondLevel);\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tMetricsEndpoint.MetricResponse response = endpoint.metric(\"invalid.metric.name\",\n\t\t\t\tCollections.emptyList());\n\t\tassertThat(response).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"}],"commitId":"01f7805c19268627d1c25c1853e5c5090a56d21a","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-12 07:19:29","modifiedFileCount":"2","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid metricValuesAreTheSumOfAllTimeSeriesMatchingTags() {\n\t\tthis.registry.counter(\"cache\", \"result\", \"hit\", \"host\", \"1\").increment(2);\n\t\tthis.registry.counter(\"cache\", \"result\", \"miss\", \"host\", \"1\").increment(2);\n\t\tthis.registry.counter(\"cache\", \"result\", \"hit\", \"host\", \"2\").increment(2);\n\t\tMetricsEndpoint.MetricResponse response = this.endpoint.metric(\"cache\", Collections.emptyList());\n\t\tassertThat(response.getName()).isEqualTo(\"cache\");\n\t\tassertThat(availableTagKeys(response)).containsExactly(\"result\", \"host\");\n\t\tassertThat(getCount(response)).hasValue(6.0);\n\t\tresponse = this.endpoint.metric(\"cache\", Collections.singletonList(\"result:hit\"));\n\t\tassertThat(availableTagKeys(response)).containsExactly(\"host\");\n\t\tassertThat(getCount(response)).hasValue(4.0);\n\t}\n","date":"2019-06-07 19:25:54","endLine":89,"groupId":"10520","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"metricValuesAreTheSumOfAllTimeSeriesMatchingTags","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/12/e3aae028bfd0e235882675fe3f4b2afec25eb6.src","preCode":"\tpublic void metricValuesAreTheSumOfAllTimeSeriesMatchingTags() {\n\t\tthis.registry.counter(\"cache\", \"result\", \"hit\", \"host\", \"1\").increment(2);\n\t\tthis.registry.counter(\"cache\", \"result\", \"miss\", \"host\", \"1\").increment(2);\n\t\tthis.registry.counter(\"cache\", \"result\", \"hit\", \"host\", \"2\").increment(2);\n\t\tMetricsEndpoint.MetricResponse response = this.endpoint.metric(\"cache\", Collections.emptyList());\n\t\tassertThat(response.getName()).isEqualTo(\"cache\");\n\t\tassertThat(availableTagKeys(response)).containsExactly(\"result\", \"host\");\n\t\tassertThat(getCount(response)).hasValue(6.0);\n\t\tresponse = this.endpoint.metric(\"cache\", Collections.singletonList(\"result:hit\"));\n\t\tassertThat(availableTagKeys(response)).containsExactly(\"host\");\n\t\tassertThat(getCount(response)).hasValue(4.0);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid matchingMeterNotFoundInNestedRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tCompositeMeterRegistry firstLevel = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry secondLevel = new SimpleMeterRegistry();\n\t\tcomposite.add(firstLevel);\n\t\tfirstLevel.add(secondLevel);\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tMetricsEndpoint.MetricResponse response = endpoint.metric(\"invalid.metric.name\", Collections.emptyList());\n\t\tassertThat(response).isNull();\n\t}\n","date":"2019-06-07 19:25:54","endLine":123,"groupId":"10520","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"matchingMeterNotFoundInNestedRegistries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/12/e3aae028bfd0e235882675fe3f4b2afec25eb6.src","preCode":"\tpublic void matchingMeterNotFoundInNestedRegistries() {\n\t\tCompositeMeterRegistry composite = new CompositeMeterRegistry();\n\t\tCompositeMeterRegistry firstLevel = new CompositeMeterRegistry();\n\t\tSimpleMeterRegistry secondLevel = new SimpleMeterRegistry();\n\t\tcomposite.add(firstLevel);\n\t\tfirstLevel.add(secondLevel);\n\t\tMetricsEndpoint endpoint = new MetricsEndpoint(composite);\n\t\tMetricsEndpoint.MetricResponse response = endpoint.metric(\"invalid.metric.name\", Collections.emptyList());\n\t\tassertThat(response).isNull();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
