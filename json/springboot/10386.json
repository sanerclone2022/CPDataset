[{"authorTime":"2021-07-15 00:19:59","codes":[{"authorDate":"2020-10-02 22:53:53","commitOrder":3,"curCode":"\tvoid neo4jIsUpWithOneSessionExpiredException() {\n\t\tResultSummary resultSummary = ResultSummaryMock.createResultSummary(\"4711\", \"My Home\", \"\");\n\t\tSession session = mock(Session.class);\n\t\tResult statementResult = mockStatementResult(resultSummary, \"some edition\");\n\t\tAtomicInteger count = new AtomicInteger();\n\t\tgiven(session.run(anyString())).will((invocation) -> {\n\t\t\tif (count.compareAndSet(0, 1)) {\n\t\t\t\tthrow new SessionExpiredException(\"Session expired\");\n\t\t\t}\n\t\t\treturn statementResult;\n\t\t});\n\t\tDriver driver = mock(Driver.class);\n\t\tgiven(driver.session(any(SessionConfig.class))).willReturn(session);\n\t\tNeo4jHealthIndicator healthIndicator = new Neo4jHealthIndicator(driver);\n\t\tHealth health = healthIndicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsEntry(\"server\", \"4711@My Home\");\n\t\tverify(session, times(2)).close();\n\t}\n","date":"2020-10-02 22:53:53","endLine":104,"groupId":"6408","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"neo4jIsUpWithOneSessionExpiredException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d5/c28227e646acb1caeaf6c12710cb9be415b034.src","preCode":"\tvoid neo4jIsUpWithOneSessionExpiredException() {\n\t\tResultSummary resultSummary = ResultSummaryMock.createResultSummary(\"4711\", \"My Home\", \"\");\n\t\tSession session = mock(Session.class);\n\t\tResult statementResult = mockStatementResult(resultSummary, \"some edition\");\n\t\tAtomicInteger count = new AtomicInteger();\n\t\tgiven(session.run(anyString())).will((invocation) -> {\n\t\t\tif (count.compareAndSet(0, 1)) {\n\t\t\t\tthrow new SessionExpiredException(\"Session expired\");\n\t\t\t}\n\t\t\treturn statementResult;\n\t\t});\n\t\tDriver driver = mock(Driver.class);\n\t\tgiven(driver.session(any(SessionConfig.class))).willReturn(session);\n\t\tNeo4jHealthIndicator healthIndicator = new Neo4jHealthIndicator(driver);\n\t\tHealth health = healthIndicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsEntry(\"server\", \"4711@My Home\");\n\t\tverify(session, times(2)).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"NB"},{"authorDate":"2021-07-15 00:19:59","commitOrder":3,"curCode":"\tvoid neo4jIsUpWithOneSessionExpiredException() {\n\t\tResultSummary resultSummary = ResultSummaryMock.createResultSummary(\"4711\", \"My Home\", \"\");\n\t\tRxSession session = mock(RxSession.class);\n\t\tRxResult statementResult = mockStatementResult(resultSummary, \"some edition\");\n\t\tAtomicInteger count = new AtomicInteger();\n\t\tgiven(session.run(anyString())).will((invocation) -> {\n\t\t\tif (count.compareAndSet(0, 1)) {\n\t\t\t\tthrow new SessionExpiredException(\"Session expired\");\n\t\t\t}\n\t\t\treturn statementResult;\n\t\t});\n\t\tDriver driver = mock(Driver.class);\n\t\tgiven(driver.rxSession(any(SessionConfig.class))).willReturn(session);\n\t\tNeo4jReactiveHealthIndicator healthIndicator = new Neo4jReactiveHealthIndicator(driver);\n\t\thealthIndicator.health().as(StepVerifier::create).consumeNextWith((health) -> {\n\t\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(health.getDetails()).containsEntry(\"server\", \"4711@My Home\");\n\t\t\tassertThat(health.getDetails()).containsEntry(\"edition\", \"some edition\");\n\t\t}).verifyComplete();\n\t\tverify(session, times(2)).close();\n\t}\n","date":"2021-07-15 00:19:59","endLine":85,"groupId":"11521","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"neo4jIsUpWithOneSessionExpiredException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/61/b721b2ac3ffccd720a49bee7c9a5bffc451ac5.src","preCode":"\tvoid neo4jIsUpWithOneSessionExpiredException() {\n\t\tResultSummary resultSummary = ResultSummaryMock.createResultSummary(\"4711\", \"My Home\", \"\");\n\t\tRxSession session = mock(RxSession.class);\n\t\tRxResult statementResult = mockStatementResult(resultSummary, \"some edition\");\n\t\tAtomicInteger count = new AtomicInteger();\n\t\tgiven(session.run(anyString())).will((invocation) -> {\n\t\t\tif (count.compareAndSet(0, 1)) {\n\t\t\t\tthrow new SessionExpiredException(\"Session expired\");\n\t\t\t}\n\t\t\treturn statementResult;\n\t\t});\n\t\tDriver driver = mock(Driver.class);\n\t\tgiven(driver.rxSession(any(SessionConfig.class))).willReturn(session);\n\t\tNeo4jReactiveHealthIndicator healthIndicator = new Neo4jReactiveHealthIndicator(driver);\n\t\thealthIndicator.health().as(StepVerifier::create).consumeNextWith((health) -> {\n\t\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(health.getDetails()).containsEntry(\"server\", \"4711@My Home\");\n\t\t\tassertThat(health.getDetails()).containsEntry(\"edition\", \"some edition\");\n\t\t}).verifyComplete();\n\t\tverify(session, times(2)).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/neo4j/Neo4jReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"}],"commitId":"8db63db56459e5724e3edb8b148dce18608045ee","commitMessage":"@@@Merge branch '2.5.x'\n\nCloses gh-27333\n","date":"2021-07-15 00:19:59","modifiedFileCount":"0","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-07-15 00:53:46","codes":[{"authorDate":"2021-07-15 00:53:46","commitOrder":4,"curCode":"\tvoid neo4jIsUpWithOneSessionExpiredException() {\n\t\tResultSummary resultSummary = ResultSummaryMock.createResultSummary(\"My Home\", \"\");\n\t\tSession session = mock(Session.class);\n\t\tResult statementResult = mockStatementResult(resultSummary, \"4711\", \"some edition\");\n\t\tAtomicInteger count = new AtomicInteger();\n\t\tgiven(session.run(anyString())).will((invocation) -> {\n\t\t\tif (count.compareAndSet(0, 1)) {\n\t\t\t\tthrow new SessionExpiredException(\"Session expired\");\n\t\t\t}\n\t\t\treturn statementResult;\n\t\t});\n\t\tDriver driver = mock(Driver.class);\n\t\tgiven(driver.session(any(SessionConfig.class))).willReturn(session);\n\t\tNeo4jHealthIndicator healthIndicator = new Neo4jHealthIndicator(driver);\n\t\tHealth health = healthIndicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsEntry(\"server\", \"4711@My Home\");\n\t\tverify(session, times(2)).close();\n\t}\n","date":"2021-07-15 00:53:47","endLine":104,"groupId":"10386","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"neo4jIsUpWithOneSessionExpiredException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/dd/89d5b6cfe50f12c7ae536c6eae3d57b967a0b0.src","preCode":"\tvoid neo4jIsUpWithOneSessionExpiredException() {\n\t\tResultSummary resultSummary = ResultSummaryMock.createResultSummary(\"4711\", \"My Home\", \"\");\n\t\tSession session = mock(Session.class);\n\t\tResult statementResult = mockStatementResult(resultSummary, \"some edition\");\n\t\tAtomicInteger count = new AtomicInteger();\n\t\tgiven(session.run(anyString())).will((invocation) -> {\n\t\t\tif (count.compareAndSet(0, 1)) {\n\t\t\t\tthrow new SessionExpiredException(\"Session expired\");\n\t\t\t}\n\t\t\treturn statementResult;\n\t\t});\n\t\tDriver driver = mock(Driver.class);\n\t\tgiven(driver.session(any(SessionConfig.class))).willReturn(session);\n\t\tNeo4jHealthIndicator healthIndicator = new Neo4jHealthIndicator(driver);\n\t\tHealth health = healthIndicator.health();\n\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\tassertThat(health.getDetails()).containsEntry(\"server\", \"4711@My Home\");\n\t\tverify(session, times(2)).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2021-07-15 00:53:46","commitOrder":4,"curCode":"\tvoid neo4jIsUpWithOneSessionExpiredException() {\n\t\tResultSummary resultSummary = ResultSummaryMock.createResultSummary(\"My Home\", \"\");\n\t\tRxSession session = mock(RxSession.class);\n\t\tRxResult statementResult = mockStatementResult(resultSummary, \"4711\", \"some edition\");\n\t\tAtomicInteger count = new AtomicInteger();\n\t\tgiven(session.run(anyString())).will((invocation) -> {\n\t\t\tif (count.compareAndSet(0, 1)) {\n\t\t\t\tthrow new SessionExpiredException(\"Session expired\");\n\t\t\t}\n\t\t\treturn statementResult;\n\t\t});\n\t\tDriver driver = mock(Driver.class);\n\t\tgiven(driver.rxSession(any(SessionConfig.class))).willReturn(session);\n\t\tNeo4jReactiveHealthIndicator healthIndicator = new Neo4jReactiveHealthIndicator(driver);\n\t\thealthIndicator.health().as(StepVerifier::create).consumeNextWith((health) -> {\n\t\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(health.getDetails()).containsEntry(\"server\", \"4711@My Home\");\n\t\t\tassertThat(health.getDetails()).containsEntry(\"edition\", \"some edition\");\n\t\t}).verifyComplete();\n\t\tverify(session, times(2)).close();\n\t}\n","date":"2021-07-15 00:53:47","endLine":85,"groupId":"10386","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"neo4jIsUpWithOneSessionExpiredException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/48/af288c9d28ef222218efa4da87d4147a21f5ef.src","preCode":"\tvoid neo4jIsUpWithOneSessionExpiredException() {\n\t\tResultSummary resultSummary = ResultSummaryMock.createResultSummary(\"4711\", \"My Home\", \"\");\n\t\tRxSession session = mock(RxSession.class);\n\t\tRxResult statementResult = mockStatementResult(resultSummary, \"some edition\");\n\t\tAtomicInteger count = new AtomicInteger();\n\t\tgiven(session.run(anyString())).will((invocation) -> {\n\t\t\tif (count.compareAndSet(0, 1)) {\n\t\t\t\tthrow new SessionExpiredException(\"Session expired\");\n\t\t\t}\n\t\t\treturn statementResult;\n\t\t});\n\t\tDriver driver = mock(Driver.class);\n\t\tgiven(driver.rxSession(any(SessionConfig.class))).willReturn(session);\n\t\tNeo4jReactiveHealthIndicator healthIndicator = new Neo4jReactiveHealthIndicator(driver);\n\t\thealthIndicator.health().as(StepVerifier::create).consumeNextWith((health) -> {\n\t\t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n\t\t\tassertThat(health.getDetails()).containsEntry(\"server\", \"4711@My Home\");\n\t\t\tassertThat(health.getDetails()).containsEntry(\"edition\", \"some edition\");\n\t\t}).verifyComplete();\n\t\tverify(session, times(2)).close();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/neo4j/Neo4jReactiveHealthIndicatorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"b39ed7f0867ca0ce8f6dc28a09ab794779168904","commitMessage":"@@@Merge pull request #27294 from meistermeier\n\n* gh-27294:\n  Polish \"Use server version from database in Neo4j health details\"\n  Use server version from database in Neo4j health details\n\nCloses gh-27294\n","date":"2021-07-15 00:53:47","modifiedFileCount":"6","status":"M","submitter":"Andy Wilkinson"}]
