[{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":2,"curCode":"\tpublic void linksToOtherEndpointsAreProvided() {\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"\").exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(3)\n\t\t\t\t\t\t.jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","date":"2018-01-20 12:44:24","endLine":111,"groupId":"3220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsAreProvided","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1b/ce93ac227e6a3dfdd23bb9cdbc68619c8d6bcf.src","preCode":"\tpublic void linksToOtherEndpointsAreProvided() {\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"\").exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(3)\n\t\t\t\t\t\t.jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/AbstractWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2017-11-03 09:00:55","commitOrder":2,"curCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.FULL));\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t\t\t.isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.env.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.env.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","date":"2017-11-03 09:00:55","endLine":134,"groupId":"3220","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d2/0f5f81a6cba09f7832497a343d5ee833dfeeb2.src","preCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.FULL));\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t\t\t.isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.env.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.env.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"NB"}],"commitId":"1d39feffeabf4b94e3f900b941b58e0443d5887a","commitMessage":"@@@Overhaul actuator endpoint code\n\nRefactor several areas of the actuator endpoint code in order to make\nfuture extensions easier. The primary goal is to introduce the concept\nof an `ExposableEndpoint` that has technology specific subclasses and\ncan carry additional data for filters to use. Many other changes have\nbeen made along the way including:\n\n* A new EndpointSupplier interface that allows cleaner separation of\n  supplying vs discovering endpoints. This allows cleaner class names\n  and allows for better auto-configuration since a user can choose to\n  provide their own supplier entirely.\n\n* A `DiscoveredEndpoint` interface that allows the `EndpointFilter`\n  to be greatly simplified. A filter now doesn't need to know about\n  discovery concerns unless absolutely necessary.\n\n* Improved naming and package structure. Many technology specific\n  concerns are now grouped in a better way. Related concerns are\n  co-located and concepts from one area no longer leakage into another.\n\n* Simplified `HandlerMapping` implementations. Many common concerns have\n  been pulled up helping to create simpler subclasses.\n\n* Simplified JMX adapters. Many of the intermediary `Info` classes have\n  been removed. The `DiscoveredJmxOperation` is now responsible for\n  mapping methods to operations.\n\n* A specific @`HealthEndpointCloudFoundryExtension` for Cloud Foundry.\n  The extension logic used to create a \"full\" health endpoint extension\n  has been made explicit.\n\nFixes gh-11428\nFixes gh-11581\n","date":"2018-01-20 12:44:24","modifiedFileCount":"63","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-08-20 23:00:36","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":3,"curCode":"\tpublic void linksToOtherEndpointsAreProvided() {\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"\").exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(3)\n\t\t\t\t\t\t.jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","date":"2018-01-20 12:44:24","endLine":111,"groupId":"3220","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsAreProvided","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1b/ce93ac227e6a3dfdd23bb9cdbc68619c8d6bcf.src","preCode":"\tpublic void linksToOtherEndpointsAreProvided() {\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"\").exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(3)\n\t\t\t\t\t\t.jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/AbstractWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"},{"authorDate":"2018-08-20 23:00:36","commitOrder":3,"curCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.FULL));\n\t\tthis.contextRunner.run(withWebTestClient((client) -> client.get()\n\t\t\t\t.uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t.isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.env.href\").isNotEmpty().jsonPath(\"_links.env.templated\")\n\t\t\t\t.isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true)));\n\t}\n","date":"2018-08-20 23:00:36","endLine":140,"groupId":"3220","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/6ae48cfc2cf771facda9d638e61fddcc8cfe9c.src","preCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\")))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.FULL));\n\t\tload(TestEndpointConfiguration.class, (client) -> client.get()\n\t\t\t\t.uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t.expectStatus().isOk().expectBody().jsonPath(\"_links.length()\")\n\t\t\t\t.isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.env.href\").isNotEmpty().jsonPath(\"_links.env.templated\")\n\t\t\t\t.isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false)\n\t\t\t\t.jsonPath(\"_links.test-part.href\").isNotEmpty()\n\t\t\t\t.jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"b60fbe5a1ff82ad99c60ea66d3537dd6eb1dc808","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-08-20 23:00:36","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid linksToOtherEndpointsAreProvided() {\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"\").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t\t\t.jsonPath(\"_links.length()\").isEqualTo(3).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false).jsonPath(\"_links.test-part.href\")\n\t\t\t\t\t\t.isNotEmpty().jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","date":"2019-06-07 19:25:54","endLine":113,"groupId":"10420","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsAreProvided","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3d/034bfd52f13ce3b84dc8c60e6f4ef7b682d8b2.src","preCode":"\tpublic void linksToOtherEndpointsAreProvided() {\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"\").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t\t\t.jsonPath(\"_links.length()\").isEqualTo(3).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false).jsonPath(\"_links.test-part.href\")\n\t\t\t\t\t\t.isNotEmpty().jsonPath(\"_links.test-part.templated\").isEqualTo(true));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/AbstractWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\"))).willReturn(Mono.just(AccessLevel.FULL));\n\t\tthis.contextRunner\n\t\t\t\t.run(withWebTestClient((client) -> client.get().uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false).jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false).jsonPath(\"_links.env.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.env.templated\").isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false).jsonPath(\"_links.test-part.href\")\n\t\t\t\t\t\t.isNotEmpty().jsonPath(\"_links.test-part.templated\").isEqualTo(true)));\n\t}\n","date":"2019-06-07 19:25:54","endLine":124,"groupId":"10420","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsWithFullAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ec/59a4bca7b4c6e9d4e08e9db6d0fb4b31dd951b.src","preCode":"\tpublic void linksToOtherEndpointsWithFullAccess() {\n\t\tgiven(tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tgiven(securityService.getAccessLevel(any(), eq(\"app-id\"))).willReturn(Mono.just(AccessLevel.FULL));\n\t\tthis.contextRunner\n\t\t\t\t.run(withWebTestClient((client) -> client.get().uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange().expectStatus().isOk()\n\t\t\t\t\t\t.expectBody().jsonPath(\"_links.length()\").isEqualTo(5).jsonPath(\"_links.self.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.self.templated\").isEqualTo(false).jsonPath(\"_links.info.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.info.templated\").isEqualTo(false).jsonPath(\"_links.env.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.env.templated\").isEqualTo(false).jsonPath(\"_links.test.href\").isNotEmpty()\n\t\t\t\t\t\t.jsonPath(\"_links.test.templated\").isEqualTo(false).jsonPath(\"_links.test-part.href\")\n\t\t\t\t\t\t.isNotEmpty().jsonPath(\"_links.test-part.templated\").isEqualTo(true)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
