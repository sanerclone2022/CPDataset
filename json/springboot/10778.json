[{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception {\n\t\tprepareResponse(response -> response.setResponseCode(401));\n\t\tStepVerifier.create(this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith(\n\t\t\t\t\t\tthrowable -> {\n\t\t\t\t\t\t\tassertThat(throwable).isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\t\t\tassertThat(((CloudFoundryAuthorizationException) throwable).getReason()).isEqualTo(Reason.INVALID_TOKEN);\n\t\t\t\t\t\t})\n\t\t\t\t.verify();\n\t\texpectRequest(request -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION)).isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","date":"2017-11-03 09:00:55","endLine":119,"groupId":"13654","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getAccessLevelWhenTokenIsNotValidShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/3d6e98656241f4439d3fb1e0e01c008843d00e.src","preCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception {\n\t\tprepareResponse(response -> response.setResponseCode(401));\n\t\tStepVerifier.create(this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith(\n\t\t\t\t\t\tthrowable -> {\n\t\t\t\t\t\t\tassertThat(throwable).isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\t\t\tassertThat(((CloudFoundryAuthorizationException) throwable).getReason()).isEqualTo(Reason.INVALID_TOKEN);\n\t\t\t\t\t\t})\n\t\t\t\t.verify();\n\t\texpectRequest(request -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION)).isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void getAccessLevelWhenForbiddenShouldThrowException() throws Exception {\n\t\tprepareResponse(response -> response.setResponseCode(403));\n\t\tStepVerifier.create(this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith(\n\t\t\t\t\t\tthrowable -> {\n\t\t\t\t\t\t\tassertThat(throwable).isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\t\t\tassertThat(((CloudFoundryAuthorizationException) throwable).getReason()).isEqualTo(Reason.ACCESS_DENIED);\n\t\t\t\t\t\t})\n\t\t\t\t.verify();\n\t\texpectRequest(request -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION)).isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","date":"2017-11-03 09:00:55","endLine":135,"groupId":"13654","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getAccessLevelWhenForbiddenShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/3d6e98656241f4439d3fb1e0e01c008843d00e.src","preCode":"\tpublic void getAccessLevelWhenForbiddenShouldThrowException() throws Exception {\n\t\tprepareResponse(response -> response.setResponseCode(403));\n\t\tStepVerifier.create(this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith(\n\t\t\t\t\t\tthrowable -> {\n\t\t\t\t\t\t\tassertThat(throwable).isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\t\t\tassertThat(((CloudFoundryAuthorizationException) throwable).getReason()).isEqualTo(Reason.ACCESS_DENIED);\n\t\t\t\t\t\t})\n\t\t\t\t.verify();\n\t\texpectRequest(request -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION)).isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"d50fe8874fa442cbd3ea380754e7b412a77aed9a","commitMessage":"@@@Add CF support for reactive actuators\n\nCloses gh-10780\n","date":"2017-11-03 09:00:55","modifiedFileCount":"5","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2017-11-06 19:44:53","codes":[{"authorDate":"2017-11-06 19:44:53","commitOrder":2,"curCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception {\n\t\tprepareResponse((response) -> response.setResponseCode(401));\n\t\tStepVerifier.create(\n\t\t\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith((throwable) -> {\n\t\t\t\t\tassertThat(throwable)\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\tassertThat(\n\t\t\t\t\t\t\t((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t\t\t\t.isEqualTo(Reason.INVALID_TOKEN);\n\t\t\t\t}).verify();\n\t\texpectRequest((request) -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION))\n\t\t\t\t\t.isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","date":"2017-11-06 19:44:53","endLine":124,"groupId":"14218","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getAccessLevelWhenTokenIsNotValidShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/18/fa79c277bc8c6af3f6a6eb097f2e2c1c3925f3.src","preCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception {\n\t\tprepareResponse(response -> response.setResponseCode(401));\n\t\tStepVerifier.create(\n\t\t\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith(throwable -> {\n\t\t\t\t\tassertThat(throwable)\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\tassertThat(\n\t\t\t\t\t\t\t((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t\t\t\t.isEqualTo(Reason.INVALID_TOKEN);\n\t\t\t\t}).verify();\n\t\texpectRequest(request -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION))\n\t\t\t\t\t.isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2017-11-06 19:44:53","commitOrder":2,"curCode":"\tpublic void getAccessLevelWhenForbiddenShouldThrowException() throws Exception {\n\t\tprepareResponse((response) -> response.setResponseCode(403));\n\t\tStepVerifier.create(\n\t\t\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith((throwable) -> {\n\t\t\t\t\tassertThat(throwable)\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\tassertThat(\n\t\t\t\t\t\t\t((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED);\n\t\t\t\t}).verify();\n\t\texpectRequest((request) -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION))\n\t\t\t\t\t.isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","date":"2017-11-06 19:44:53","endLine":143,"groupId":"14218","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getAccessLevelWhenForbiddenShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/18/fa79c277bc8c6af3f6a6eb097f2e2c1c3925f3.src","preCode":"\tpublic void getAccessLevelWhenForbiddenShouldThrowException() throws Exception {\n\t\tprepareResponse(response -> response.setResponseCode(403));\n\t\tStepVerifier.create(\n\t\t\t\tthis.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith(throwable -> {\n\t\t\t\t\tassertThat(throwable)\n\t\t\t\t\t\t\t.isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\tassertThat(\n\t\t\t\t\t\t\t((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED);\n\t\t\t\t}).verify();\n\t\texpectRequest(request -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION))\n\t\t\t\t\t.isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"60afbdc868401ec057ebe6b84e13fc9385800fba","commitMessage":"@@@Polish\n","date":"2017-11-06 19:44:53","modifiedFileCount":"12","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception {\n\t\tprepareResponse((response) -> response.setResponseCode(401));\n\t\tStepVerifier.create(this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith((throwable) -> {\n\t\t\t\t\tassertThat(throwable).isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\tassertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t\t.isEqualTo(Reason.INVALID_TOKEN);\n\t\t\t\t}).verify();\n\t\texpectRequest((request) -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION)).isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":107,"groupId":"10778","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getAccessLevelWhenTokenIsNotValidShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/77/5d8c4e73149fb13abf49d8d7285af69b38f7f8.src","preCode":"\tpublic void getAccessLevelWhenTokenIsNotValidShouldThrowException() throws Exception {\n\t\tprepareResponse((response) -> response.setResponseCode(401));\n\t\tStepVerifier.create(this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith((throwable) -> {\n\t\t\t\t\tassertThat(throwable).isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\tassertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t\t.isEqualTo(Reason.INVALID_TOKEN);\n\t\t\t\t}).verify();\n\t\texpectRequest((request) -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION)).isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getAccessLevelWhenForbiddenShouldThrowException() throws Exception {\n\t\tprepareResponse((response) -> response.setResponseCode(403));\n\t\tStepVerifier.create(this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith((throwable) -> {\n\t\t\t\t\tassertThat(throwable).isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\tassertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED);\n\t\t\t\t}).verify();\n\t\texpectRequest((request) -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION)).isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":122,"groupId":"10778","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getAccessLevelWhenForbiddenShouldThrowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/77/5d8c4e73149fb13abf49d8d7285af69b38f7f8.src","preCode":"\tpublic void getAccessLevelWhenForbiddenShouldThrowException() throws Exception {\n\t\tprepareResponse((response) -> response.setResponseCode(403));\n\t\tStepVerifier.create(this.securityService.getAccessLevel(\"my-access-token\", \"my-app-id\"))\n\t\t\t\t.consumeErrorWith((throwable) -> {\n\t\t\t\t\tassertThat(throwable).isInstanceOf(CloudFoundryAuthorizationException.class);\n\t\t\t\t\tassertThat(((CloudFoundryAuthorizationException) throwable).getReason())\n\t\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED);\n\t\t\t\t}).verify();\n\t\texpectRequest((request) -> {\n\t\t\tassertThat(request.getHeader(HttpHeaders.AUTHORIZATION)).isEqualTo(\"bearer my-access-token\");\n\t\t\tassertThat(request.getPath()).isEqualTo(CLOUD_CONTROLLER_PERMISSIONS);\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityServiceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
