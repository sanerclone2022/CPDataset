[{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-08-28 15:43:48","commitOrder":3,"curCode":"\tvoid toAnyEndpointWhenApplicationPathSetShouldMatchServletEndpoint() {\n\t\tgetContextRunner().withPropertyValues(\"spring.jersey.application-path=/admin\",\n\t\t\t\t\"spring.security.user.password=password\", \"management.endpoints.web.exposure.include=se1\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = getWebTestClient(context);\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1\").header(\"Authorization\", getBasicAuth()).exchange()\n\t\t\t\t\t\t\t.expectStatus().isOk();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1/list\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1/list\").header(\"Authorization\", getBasicAuth())\n\t\t\t\t\t\t\t.exchange().expectStatus().isOk();\n\t\t\t\t});\n\t}\n","date":"2019-08-28 15:43:48","endLine":96,"groupId":"7012","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toAnyEndpointWhenApplicationPathSetShouldMatchServletEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c8/eee1e27005af76e795fe2b19005032672f1272.src","preCode":"\tvoid toAnyEndpointWhenApplicationPathSetShouldMatchServletEndpoint() {\n\t\tgetContextRunner().withPropertyValues(\"spring.jersey.application-path=/admin\",\n\t\t\t\t\"spring.security.user.password=password\", \"management.endpoints.web.exposure.include=se1\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = getWebTestClient(context);\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1\").header(\"Authorization\", getBasicAuth()).exchange()\n\t\t\t\t\t\t\t.expectStatus().isOk();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1/list\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1/list\").header(\"Authorization\", getBasicAuth())\n\t\t\t\t\t\t\t.exchange().expectStatus().isOk();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/JerseyEndpointRequestIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid toAllEndpointsShouldMatch() {\n\t\tgetContextRunner().withInitializer(new ConditionEvaluationReportLoggingListener(LogLevel.INFO))\n\t\t\t\t.withPropertyValues(\"spring.security.user.password=password\").run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = getWebTestClient(context);\n\t\t\t\t\twebTestClient.get().uri(\"/actuator/e2\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/actuator/e2\").header(\"Authorization\", getBasicAuth()).exchange()\n\t\t\t\t\t\t\t.expectStatus().isOk();\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":71,"groupId":"14904","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toAllEndpointsShouldMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d3/fe2413a7db6aa86a8e43188c1ff12fb80304d7.src","preCode":"\tvoid toAllEndpointsShouldMatch() {\n\t\tgetContextRunner().withInitializer(new ConditionEvaluationReportLoggingListener(LogLevel.INFO))\n\t\t\t\t.withPropertyValues(\"spring.security.user.password=password\").run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = getWebTestClient(context);\n\t\t\t\t\twebTestClient.get().uri(\"/actuator/e2\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/actuator/e2\").header(\"Authorization\", getBasicAuth()).exchange()\n\t\t\t\t\t\t\t.expectStatus().isOk();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/AbstractEndpointRequestIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"}],"commitId":"2726540e761ee1891a2a4264bbe5366c0b8e5087","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-17980\n","date":"2019-08-28 15:43:48","modifiedFileCount":"6","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2019-11-27 20:50:50","codes":[{"authorDate":"2019-08-28 15:43:48","commitOrder":4,"curCode":"\tvoid toAnyEndpointWhenApplicationPathSetShouldMatchServletEndpoint() {\n\t\tgetContextRunner().withPropertyValues(\"spring.jersey.application-path=/admin\",\n\t\t\t\t\"spring.security.user.password=password\", \"management.endpoints.web.exposure.include=se1\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = getWebTestClient(context);\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1\").header(\"Authorization\", getBasicAuth()).exchange()\n\t\t\t\t\t\t\t.expectStatus().isOk();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1/list\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1/list\").header(\"Authorization\", getBasicAuth())\n\t\t\t\t\t\t\t.exchange().expectStatus().isOk();\n\t\t\t\t});\n\t}\n","date":"2019-08-28 15:43:48","endLine":96,"groupId":"10709","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toAnyEndpointWhenApplicationPathSetShouldMatchServletEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c8/eee1e27005af76e795fe2b19005032672f1272.src","preCode":"\tvoid toAnyEndpointWhenApplicationPathSetShouldMatchServletEndpoint() {\n\t\tgetContextRunner().withPropertyValues(\"spring.jersey.application-path=/admin\",\n\t\t\t\t\"spring.security.user.password=password\", \"management.endpoints.web.exposure.include=se1\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = getWebTestClient(context);\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1\").header(\"Authorization\", getBasicAuth()).exchange()\n\t\t\t\t\t\t\t.expectStatus().isOk();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1/list\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/admin/actuator/se1/list\").header(\"Authorization\", getBasicAuth())\n\t\t\t\t\t\t\t.exchange().expectStatus().isOk();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/JerseyEndpointRequestIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"},{"authorDate":"2019-11-27 20:50:50","commitOrder":4,"curCode":"\tvoid toAllEndpointsShouldMatch() {\n\t\tgetContextRunner().withPropertyValues(\"spring.security.user.password=password\").run((context) -> {\n\t\t\tWebTestClient webTestClient = getWebTestClient(context);\n\t\t\twebTestClient.get().uri(\"/actuator/e2\").exchange().expectStatus().isUnauthorized();\n\t\t\twebTestClient.get().uri(\"/actuator/e2\").header(\"Authorization\", getBasicAuth()).exchange().expectStatus()\n\t\t\t\t\t.isOk();\n\t\t});\n\t}\n","date":"2019-11-27 20:50:50","endLine":67,"groupId":"10709","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toAllEndpointsShouldMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2e/8d242442d64d7bec7594bd887a731bde492b49.src","preCode":"\tvoid toAllEndpointsShouldMatch() {\n\t\tgetContextRunner().withInitializer(new ConditionEvaluationReportLoggingListener(LogLevel.INFO))\n\t\t\t\t.withPropertyValues(\"spring.security.user.password=password\").run((context) -> {\n\t\t\t\t\tWebTestClient webTestClient = getWebTestClient(context);\n\t\t\t\t\twebTestClient.get().uri(\"/actuator/e2\").exchange().expectStatus().isUnauthorized();\n\t\t\t\t\twebTestClient.get().uri(\"/actuator/e2\").header(\"Authorization\", getBasicAuth()).exchange()\n\t\t\t\t\t\t\t.expectStatus().isOk();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/AbstractEndpointRequestIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"cde9c2e853894e5d9d01d073f67f5f76fd935d31","commitMessage":"@@@Merge branch '2.2.x'\n\nCloses gh-19161\n","date":"2019-11-27 20:50:50","modifiedFileCount":"5","status":"M","submitter":"Stephane Nicoll"}]
