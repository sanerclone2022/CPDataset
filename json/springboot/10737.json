[{"authorTime":"2019-09-26 13:46:37","codes":[{"authorDate":"2019-09-26 13:46:37","commitOrder":1,"curCode":"\tprivate WebOperation findOperationWithRequestPath(ExposableWebEndpoint endpoint, String requestPath) {\n\t\tfor (WebOperation operation : endpoint.getOperations()) {\n\t\t\tWebOperationRequestPredicate predicate = operation.getRequestPredicate();\n\t\t\tif (predicate.getPath().equals(requestPath)\n\t\t\t\t\t&& predicate.getProduces().contains(ActuatorMediaType.V3_JSON)) {\n\t\t\t\treturn operation;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"No operation found with request path \" + requestPath + \" from \" + endpoint.getOperations());\n\t}\n","date":"2019-09-27 07:16:23","endLine":311,"groupId":"15965","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findOperationWithRequestPath","params":"(ExposableWebEndpointendpoint@StringrequestPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/62/fe9f9f3aa46f2c9a1e813b2a22c353d12ce312.src","preCode":"\tprivate WebOperation findOperationWithRequestPath(ExposableWebEndpoint endpoint, String requestPath) {\n\t\tfor (WebOperation operation : endpoint.getOperations()) {\n\t\t\tWebOperationRequestPredicate predicate = operation.getRequestPredicate();\n\t\t\tif (predicate.getPath().equals(requestPath)\n\t\t\t\t\t&& predicate.getProduces().contains(ActuatorMediaType.V3_JSON)) {\n\t\t\t\treturn operation;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"No operation found with request path \" + requestPath + \" from \" + endpoint.getOperations());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"},{"authorDate":"2019-09-26 13:46:37","commitOrder":1,"curCode":"\tprivate WebOperation findOperationWithRequestPath(ExposableWebEndpoint endpoint, String requestPath) {\n\t\tfor (WebOperation operation : endpoint.getOperations()) {\n\t\t\tWebOperationRequestPredicate predicate = operation.getRequestPredicate();\n\t\t\tif (predicate.getPath().equals(requestPath)\n\t\t\t\t\t&& predicate.getProduces().contains(ActuatorMediaType.V3_JSON)) {\n\t\t\t\treturn operation;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"No operation found with request path \" + requestPath + \" from \" + endpoint.getOperations());\n\t}\n","date":"2019-09-27 07:16:23","endLine":255,"groupId":"15965","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findOperationWithRequestPath","params":"(ExposableWebEndpointendpoint@StringrequestPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d8/95df495c7a0ea7861588c094605f047c29308e.src","preCode":"\tprivate WebOperation findOperationWithRequestPath(ExposableWebEndpoint endpoint, String requestPath) {\n\t\tfor (WebOperation operation : endpoint.getOperations()) {\n\t\t\tWebOperationRequestPredicate predicate = operation.getRequestPredicate();\n\t\t\tif (predicate.getPath().equals(requestPath)\n\t\t\t\t\t&& predicate.getProduces().contains(ActuatorMediaType.V3_JSON)) {\n\t\t\t\treturn operation;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"No operation found with request path \" + requestPath + \" from \" + endpoint.getOperations());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"}],"commitId":"69c561a69a54a32ba31f4bc66e7954ee21e6445f","commitMessage":"@@@Rename health JSON 'details' to 'components' in v3\n\nUpdate the health endpoint so the nested components are now exposed\nunder `components` rather than `details` when v3 of the actuator\nREST API is being used.\n\nThis distinction helps to clarify the difference between composite\nhealth (health composed of other health components) and health\ndetails (technology specific information gathered by the indicator).\n\nSince this is a breaking change for the REST API.  it is only returned\nfor v3 payloads. Requests made accepting only a v2 response will have\nJSON provided in the original form.\n\nCloses gh-17929\n","date":"2019-09-27 07:16:23","modifiedFileCount":"21","status":"B","submitter":"Phillip Webb"},{"authorTime":"2021-04-08 02:54:42","codes":[{"authorDate":"2021-04-08 02:54:42","commitOrder":2,"curCode":"\tprivate WebOperation findOperationWithRequestPath(ExposableWebEndpoint endpoint, String requestPath) {\n\t\tfor (WebOperation operation : endpoint.getOperations()) {\n\t\t\tWebOperationRequestPredicate predicate = operation.getRequestPredicate();\n\t\t\tif (predicate.getPath().equals(requestPath) && predicate.getProduces().contains(V3_JSON)) {\n\t\t\t\treturn operation;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"No operation found with request path \" + requestPath + \" from \" + endpoint.getOperations());\n\t}\n","date":"2021-04-08 07:54:37","endLine":314,"groupId":"10737","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"findOperationWithRequestPath","params":"(ExposableWebEndpointendpoint@StringrequestPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fa/daeb8feeae68855c05637e7302205397dd678b.src","preCode":"\tprivate WebOperation findOperationWithRequestPath(ExposableWebEndpoint endpoint, String requestPath) {\n\t\tfor (WebOperation operation : endpoint.getOperations()) {\n\t\t\tWebOperationRequestPredicate predicate = operation.getRequestPredicate();\n\t\t\tif (predicate.getPath().equals(requestPath)\n\t\t\t\t\t&& predicate.getProduces().contains(ActuatorMediaType.V3_JSON)) {\n\t\t\t\treturn operation;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"No operation found with request path \" + requestPath + \" from \" + endpoint.getOperations());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"},{"authorDate":"2021-04-08 02:54:42","commitOrder":2,"curCode":"\tprivate WebOperation findOperationWithRequestPath(ExposableWebEndpoint endpoint, String requestPath) {\n\t\tfor (WebOperation operation : endpoint.getOperations()) {\n\t\t\tWebOperationRequestPredicate predicate = operation.getRequestPredicate();\n\t\t\tif (predicate.getPath().equals(requestPath) && predicate.getProduces().contains(V3_JSON)) {\n\t\t\t\treturn operation;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"No operation found with request path \" + requestPath + \" from \" + endpoint.getOperations());\n\t}\n","date":"2021-04-08 07:54:37","endLine":255,"groupId":"10737","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findOperationWithRequestPath","params":"(ExposableWebEndpointendpoint@StringrequestPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/4d8aec497e3184ff6773f1cda36d43f3a2456c.src","preCode":"\tprivate WebOperation findOperationWithRequestPath(ExposableWebEndpoint endpoint, String requestPath) {\n\t\tfor (WebOperation operation : endpoint.getOperations()) {\n\t\t\tWebOperationRequestPredicate predicate = operation.getRequestPredicate();\n\t\t\tif (predicate.getPath().equals(requestPath)\n\t\t\t\t\t&& predicate.getProduces().contains(ActuatorMediaType.V3_JSON)) {\n\t\t\t\treturn operation;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"No operation found with request path \" + requestPath + \" from \" + endpoint.getOperations());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"e4164d0143c0eac54b879181df98bc7fd4f21417","commitMessage":"@@@Fix package tangle in endpoint package\n\nFix package tangle in the actuator endpoint package by relocating a\nfew classes.\n\nThe `Producible` and `ProducibleOperationArgumentResolver` classes have\nbeen moved from `endpoint.annotation` to `endpoint` since they aren't\ndirectly tied to annotations.\n\nThe `ApiVersion` class has been moved from `endpoint.http` to\n`endpoint` since it needs to implement `Producible` and isn't really\ntied to HTTP.\n\nCloses gh-25914\n","date":"2021-04-08 07:54:37","modifiedFileCount":"44","status":"M","submitter":"Phillip Webb"}]
