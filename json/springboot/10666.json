[{"authorTime":"2019-08-21 05:18:27","codes":[{"authorDate":"2019-08-21 05:18:27","commitOrder":1,"curCode":"\tvoid runCreatesHealthContributorRegistryContainingHealthBeans() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tHealthContributorRegistry registry = context.getBean(HealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\");\n\t\t});\n\t}\n","date":"2019-08-22 09:43:25","endLine":177,"groupId":"4853","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runCreatesHealthContributorRegistryContainingHealthBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6c/e4abd7b5b392f3ae2ff23d0b7b9ce696d499d1.src","preCode":"\tvoid runCreatesHealthContributorRegistryContainingHealthBeans() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tHealthContributorRegistry registry = context.getBean(HealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"},{"authorDate":"2019-08-21 05:18:27","commitOrder":1,"curCode":"\tvoid runCreatesReactiveHealthContributorRegistryContainingAdaptedBeans() {\n\t\tthis.reactiveContextRunner.run((context) -> {\n\t\t\tReactiveHealthContributorRegistry registry = context.getBean(ReactiveHealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\", \"reactive\");\n\t\t});\n\t}\n","date":"2019-08-22 09:43:25","endLine":212,"groupId":"4853","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runCreatesReactiveHealthContributorRegistryContainingAdaptedBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6c/e4abd7b5b392f3ae2ff23d0b7b9ce696d499d1.src","preCode":"\tvoid runCreatesReactiveHealthContributorRegistryContainingAdaptedBeans() {\n\t\tthis.reactiveContextRunner.run((context) -> {\n\t\t\tReactiveHealthContributorRegistry registry = context.getBean(ReactiveHealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\", \"reactive\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"}],"commitId":"3c535e0de340a718d6cf0d863a6529b314a38f42","commitMessage":"@@@Add HealthContributor and refactor HealthEndpoint\n\nOverhaul `HealthEndpoint` support to make it easier to support health\ngroups. Prior to this commit the `HealthIndicator` interface was used\nfor both regular indicators and composite indicators. In addition the\n`Health` result was used to both represent individual.  system and\ncomposite health. This design unfortunately means that all health\ncontributors need to be aware of the `HealthAggregator` and could not\neasily support heath groups if per-group aggregation is required.\n\nThis commit reworks many aspects of the health support in order to\nprovide a cleaner separation between a `HealthIndicator`and a\ncomposite. The following changes have been made:\n\n- A `HealthContributor` interface has been introduced to represent\n  the general concept of something that contributes health information.\n  A contributor can either be a `HealthIndicator` or a\n  `CompositeHealthContributor`.\n\n- A `HealthComponent` class has been introduced to mirror the\n  contributor arrangement. The component can be either\n  `CompositeHealth` or `Health`.\n\n- The `HealthAggregator` interface has been replaced with a more\n  focused `StatusAggregator` interface which only deals with `Status`\n  results.\n\n- `CompositeHealthIndicator` has been replaced with\n  `CompositeHealthContributor` which only provides access to other\n  contributors. A composite can no longer directly return `Health`.\n\n- `HealthIndicatorRegistry` has been replaced with\n  `HealthContributorRegistry` and the default implementation now\n  uses a copy-on-write strategy.\n\n- `HealthEndpoint`.  `HealthEndpointWebExtension` and\n  `ReactiveHealthEndpointWebExtension` now extend a common\n  `HealthEndpointSupport` class. They are now driven by a\n  health contributor registry and `HealthEndpointSettings`.\n\n- The `HealthStatusHttpMapper` class has been replaced by a\n  `HttpCodeStatusMapper` interface.\n\n- The `HealthWebEndpointResponseMapper` class has been replaced\n  by a `HealthEndpointSettings` strategy. This allows us to move\n  role related logic and `ShowDetails` to the auto-configure module.\n\n- `SimpleHttpCodeStatusMapper` and `SimpleStatusAggregator`\n  implementations have been added which are configured via constructor\n  arguments rather than setters.\n\n- Endpoint auto-configuration has been reworked and the\n  `CompositeHealthIndicatorConfiguration` class has been replaced\n  by `CompositeHealthContributorConfiguration`.\n\n- The endpoint JSON has been changed make `details` distinct from\n  `components`.\n\nSee gh-17926\n","date":"2019-08-22 09:43:25","modifiedFileCount":"75","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-08-22 21:50:10","codes":[{"authorDate":"2019-08-22 21:50:10","commitOrder":2,"curCode":"\tvoid runCreatesHealthContributorRegistryContainingHealthBeans() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tHealthContributorRegistry registry = context.getBean(HealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\", \"ping\");\n\t\t});\n\t}\n","date":"2019-08-22 21:50:10","endLine":180,"groupId":"4853","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runCreatesHealthContributorRegistryContainingHealthBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f7/0fad83bb55d709d0473922a6e7cf51bb7bc1a0.src","preCode":"\tvoid runCreatesHealthContributorRegistryContainingHealthBeans() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tHealthContributorRegistry registry = context.getBean(HealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2019-08-22 21:50:10","commitOrder":2,"curCode":"\tvoid runCreatesReactiveHealthContributorRegistryContainingAdaptedBeans() {\n\t\tthis.reactiveContextRunner.run((context) -> {\n\t\t\tReactiveHealthContributorRegistry registry = context.getBean(ReactiveHealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\", \"reactive\", \"ping\");\n\t\t});\n\t}\n","date":"2019-08-22 21:50:10","endLine":215,"groupId":"4853","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runCreatesReactiveHealthContributorRegistryContainingAdaptedBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f7/0fad83bb55d709d0473922a6e7cf51bb7bc1a0.src","preCode":"\tvoid runCreatesReactiveHealthContributorRegistryContainingAdaptedBeans() {\n\t\tthis.reactiveContextRunner.run((context) -> {\n\t\t\tReactiveHealthContributorRegistry registry = context.getBean(ReactiveHealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\", \"reactive\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"b43827d6264a3eb4e9558c6e1dd7f89e537caa96","commitMessage":"@@@Configure ping (formerly application) health indicator by default\n\nThis commit renames ApplicationHealthIndicator to PingHealthIndicator\nand changes the auto-configuration so that it is now always configured\nby default.\n\nCloses gh-17926\n","date":"2019-08-22 21:50:10","modifiedFileCount":"47","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-08-22 21:50:10","codes":[{"authorDate":"2019-10-31 03:18:42","commitOrder":3,"curCode":"\tvoid runCreatesHealthContributorRegistryContainingHealthBeans() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tHealthContributorRegistry registry = context.getBean(HealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\", \"ping\", \"reactive\");\n\t\t});\n\t}\n","date":"2019-10-31 06:12:28","endLine":186,"groupId":"10666","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runCreatesHealthContributorRegistryContainingHealthBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/09/2d6cdee09836c2b72ce345c899770eb498d203.src","preCode":"\tvoid runCreatesHealthContributorRegistryContainingHealthBeans() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tHealthContributorRegistry registry = context.getBean(HealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\", \"ping\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2019-08-22 21:50:10","commitOrder":3,"curCode":"\tvoid runCreatesReactiveHealthContributorRegistryContainingAdaptedBeans() {\n\t\tthis.reactiveContextRunner.run((context) -> {\n\t\t\tReactiveHealthContributorRegistry registry = context.getBean(ReactiveHealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\", \"reactive\", \"ping\");\n\t\t});\n\t}\n","date":"2019-08-22 21:50:10","endLine":215,"groupId":"10666","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"runCreatesReactiveHealthContributorRegistryContainingAdaptedBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f7/0fad83bb55d709d0473922a6e7cf51bb7bc1a0.src","preCode":"\tvoid runCreatesReactiveHealthContributorRegistryContainingAdaptedBeans() {\n\t\tthis.reactiveContextRunner.run((context) -> {\n\t\t\tReactiveHealthContributorRegistry registry = context.getBean(ReactiveHealthContributorRegistry.class);\n\t\t\tObject[] names = registry.stream().map(NamedContributor::getName).toArray();\n\t\t\tassertThat(names).containsExactlyInAnyOrder(\"simple\", \"additional\", \"reactive\", \"ping\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"N"}],"commitId":"ae5ae72889926d1eabe1ca492e0d77479d9c659e","commitMessage":"@@@Add and adapt reactive health contributors\n\nUpdate `HealthEndpointConfiguration` to also include adapted reactive\nhealth contributors when project reactor is on the classpath. Prior to\nthis commit.  reactive contributors were only exposed in WebFlux\napplications. This was a regression from Spring Boot 2.1 that we didn't\ncatch because all our own reactive contributors all have non-reactive\nequivalents.\n\nCloses gh-18805\n","date":"2019-10-31 06:12:28","modifiedFileCount":"2","status":"M","submitter":"Phillip Webb"}]
