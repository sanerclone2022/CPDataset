[{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\tBDDMockito.willThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","date":"2017-11-03 09:00:55","endLine":146,"groupId":"6863","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsForbidden","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d2/0f5f81a6cba09f7832497a343d5ee833dfeeb2.src","preCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\tBDDMockito.willThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","date":"2017-11-03 09:00:55","endLine":140,"groupId":"6863","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsForbidden","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/4740038210eae929385f6cac62b5788e7e4f23.src","preCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryMvcWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"d50fe8874fa442cbd3ea380754e7b412a77aed9a","commitMessage":"@@@Add CF support for reactive actuators\n\nCloses gh-10780\n","date":"2017-11-03 09:00:55","modifiedFileCount":"5","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2017-11-03 15:03:36","commitOrder":2,"curCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","date":"2017-11-03 15:13:02","endLine":148,"groupId":"6863","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsForbidden","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f7/9f48f0e8cb3c104a9744f7745b2f3552312a5e.src","preCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\tBDDMockito.willThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2017-11-03 09:00:55","commitOrder":2,"curCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","date":"2017-11-03 09:00:55","endLine":140,"groupId":"6863","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsForbidden","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/4740038210eae929385f6cac62b5788e7e4f23.src","preCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryMvcWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"}],"commitId":"3f00ba3cad8c708eaa06ef599be104e077736132","commitMessage":"@@@Polish\n","date":"2017-11-03 15:13:02","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"},{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2018-08-20 23:00:36","commitOrder":3,"curCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tthis.contextRunner.run(withWebTestClient((client) -> client.get()\n\t\t\t\t.uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t.expectStatus().isUnauthorized()));\n\t}\n","date":"2018-08-20 23:00:36","endLine":151,"groupId":"6863","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsForbidden","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/6ae48cfc2cf771facda9d638e61fddcc8cfe9c.src","preCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2017-11-03 09:00:55","commitOrder":3,"curCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","date":"2017-11-03 09:00:55","endLine":140,"groupId":"6863","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsForbidden","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/4740038210eae929385f6cac62b5788e7e4f23.src","preCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(\n\t\t\t\tReason.INVALID_TOKEN, \"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t\t\t.accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t\t\t.expectStatus().isUnauthorized());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryMvcWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"}],"commitId":"b60fbe5a1ff82ad99c60ea66d3537dd6eb1dc808","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-08-20 23:00:36","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\n\t\t\t\t\"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tthis.contextRunner.run(withWebTestClient((client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t.accept(MediaType.APPLICATION_JSON).header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t.expectStatus().isUnauthorized()));\n\t}\n","date":"2019-06-07 19:25:54","endLine":134,"groupId":"10727","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"linksToOtherEndpointsForbidden","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ec/59a4bca7b4c6e9d4e08e9db6d0fb4b31dd951b.src","preCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\n\t\t\t\t\"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tthis.contextRunner.run(withWebTestClient((client) -> client.get().uri(\"/cfApplication\")\n\t\t\t\t.accept(MediaType.APPLICATION_JSON).header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange()\n\t\t\t\t.expectStatus().isUnauthorized()));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\n\t\t\t\t\"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange().expectStatus()\n\t\t\t\t\t\t.isUnauthorized());\n\t}\n","date":"2019-06-07 19:25:54","endLine":123,"groupId":"10727","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"linksToOtherEndpointsForbidden","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e1/0f46a35c27e2e427b03ba681e3ca001d147091.src","preCode":"\tpublic void linksToOtherEndpointsForbidden() {\n\t\tCloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\n\t\t\t\t\"invalid-token\");\n\t\twillThrow(exception).given(tokenValidator).validate(any());\n\t\tload(TestEndpointConfiguration.class,\n\t\t\t\t(client) -> client.get().uri(\"/cfApplication\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t\t.header(\"Authorization\", \"bearer \" + mockAccessToken()).exchange().expectStatus()\n\t\t\t\t\t\t.isUnauthorized());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryMvcWebEndpointIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
