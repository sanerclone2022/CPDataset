[{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid hasUnprocessedImportsWhenHasChildrenForPhaseReturnsFalse() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tConfigData childConfigData = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigDataEnvironmentContributor childContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tchildConfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor withChildren = contributor.withChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION,\n\t\t\t\tCollections.singletonList(childContributor));\n\t\tassertThat(withChildren.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isFalse();\n\t\tassertThat(withChildren.hasUnprocessedImports(ImportPhase.AFTER_PROFILE_ACTIVATION)).isTrue();\n\t}\n","date":"2020-07-23 12:02:32","endLine":158,"groupId":"6899","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"hasUnprocessedImportsWhenHasChildrenForPhaseReturnsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/80/111a87ef6595ff1177a222ef52a46b0b8d87bb.src","preCode":"\tvoid hasUnprocessedImportsWhenHasChildrenForPhaseReturnsFalse() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tConfigData childConfigData = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigDataEnvironmentContributor childContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tchildConfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor withChildren = contributor.withChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION,\n\t\t\t\tCollections.singletonList(childContributor));\n\t\tassertThat(withChildren.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isFalse();\n\t\tassertThat(withChildren.hasUnprocessedImports(ImportPhase.AFTER_PROFILE_ACTIVATION)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"},{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid getChildrenWhenHasChildrenReturnsChildren() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tConfigData childConfigData = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigDataEnvironmentContributor childContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tchildConfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor withChildren = contributor.withChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION,\n\t\t\t\tCollections.singletonList(childContributor));\n\t\tassertThat(withChildren.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).containsExactly(childContributor);\n\t\tassertThat(withChildren.getChildren(ImportPhase.AFTER_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2020-07-23 12:02:32","endLine":183,"groupId":"6899","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getChildrenWhenHasChildrenReturnsChildren","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/80/111a87ef6595ff1177a222ef52a46b0b8d87bb.src","preCode":"\tvoid getChildrenWhenHasChildrenReturnsChildren() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tConfigData childConfigData = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigDataEnvironmentContributor childContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tchildConfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor withChildren = contributor.withChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION,\n\t\t\t\tCollections.singletonList(childContributor));\n\t\tassertThat(withChildren.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).containsExactly(childContributor);\n\t\tassertThat(withChildren.getChildren(ImportPhase.AFTER_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"3352024b1ca641fa0beaaa4cd87788c190242eb0","commitMessage":"@@@Provide ConfigFileApplicationListener replacement\n\nDeprecate `ConfigFileApplicationListener` and provide a replacement\nmechanism that supports arbitrary config data imports.\n\nThis commit updates the following areas:\n\n- Extract `EnvironmentPostProcessor` invocation logic from the\n  `ConfigFileApplicationListener` to new dedicated listener. Also\n  providing support for `Log` injection.\n\n- Extract `RandomPropertySource` adding logic from the\n  `ConfigFileApplicationListener` to a dedicated class.\n\n- Migrate to the recently introduced `DefaultPropertiesPropertySource`\n  class when moving the defaultProperties `PropertySource`\n\n- Replace processing logic with a phased approach to ensure that\n  profile enablement happens in a distinct phase and that profiles\n  can no longer be activated on an ad-hoc basis.\n\n- Provide a more predictable and logical import order for processing\n  `application.properties` and `application.yml` files.\n\n- Add support for a `spring.config.import` property which can be used\n  to import additional config data. Also provide a pluggable API\n  allowing third-parties to resolve and load locations themselves.\n\n- Add `spring.config.activate.on-profile` support which replaces the\n  existing `spring.profiles` property.\n\n- Add `spring.config.activate.on-cloud-platform` support which allows\n  a config data document to be active only on a given cloud platform.\n\n- Support a `spring.config.use-legacy-processing` property allowing the\n  previous processing logic to be used.\n\nCloses gh-22497\n\nCo-authored-by: Madhura Bhave <mbhave@vmware.com>\n","date":"2020-07-23 12:02:32","modifiedFileCount":"17","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-08-23 10:59:22","codes":[{"authorDate":"2020-08-23 10:59:22","commitOrder":2,"curCode":"\tvoid hasUnprocessedImportsWhenHasChildrenForPhaseReturnsFalse() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(null, configData, 0);\n\t\tConfigData childConfigData = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigDataEnvironmentContributor childContributor = createBoundContributor(null, childConfigData, 0);\n\t\tConfigDataEnvironmentContributor withChildren = contributor.withChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION,\n\t\t\t\tCollections.singletonList(childContributor));\n\t\tassertThat(withChildren.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isFalse();\n\t\tassertThat(withChildren.hasUnprocessedImports(ImportPhase.AFTER_PROFILE_ACTIVATION)).isTrue();\n\t}\n","date":"2020-08-24 11:27:12","endLine":151,"groupId":"101625","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"hasUnprocessedImportsWhenHasChildrenForPhaseReturnsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/680de4ae66b06f7b3902e931bd1f5938e375df.src","preCode":"\tvoid hasUnprocessedImportsWhenHasChildrenForPhaseReturnsFalse() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tConfigData childConfigData = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigDataEnvironmentContributor childContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tchildConfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor withChildren = contributor.withChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION,\n\t\t\t\tCollections.singletonList(childContributor));\n\t\tassertThat(withChildren.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isFalse();\n\t\tassertThat(withChildren.hasUnprocessedImports(ImportPhase.AFTER_PROFILE_ACTIVATION)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-08-23 10:59:22","commitOrder":2,"curCode":"\tvoid getChildrenWhenHasChildrenReturnsChildren() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(null, configData, 0);\n\t\tConfigData childConfigData = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigDataEnvironmentContributor childContributor = createBoundContributor(null, childConfigData, 0);\n\t\tConfigDataEnvironmentContributor withChildren = contributor.withChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION,\n\t\t\t\tCollections.singletonList(childContributor));\n\t\tassertThat(withChildren.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).containsExactly(childContributor);\n\t\tassertThat(withChildren.getChildren(ImportPhase.AFTER_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","date":"2020-08-24 11:27:12","endLine":173,"groupId":"101625","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getChildrenWhenHasChildrenReturnsChildren","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/680de4ae66b06f7b3902e931bd1f5938e375df.src","preCode":"\tvoid getChildrenWhenHasChildrenReturnsChildren() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tConfigData childConfigData = new ConfigData(Collections.singleton(new MockPropertySource()));\n\t\tConfigDataEnvironmentContributor childContributor = ConfigDataEnvironmentContributor.ofImported(null,\n\t\t\t\tchildConfigData, 0, this.activationContext);\n\t\tConfigDataEnvironmentContributor withChildren = contributor.withChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION,\n\t\t\t\tCollections.singletonList(childContributor));\n\t\tassertThat(withChildren.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION)).containsExactly(childContributor);\n\t\tassertThat(withChildren.getChildren(ImportPhase.AFTER_PROFILE_ACTIVATION)).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"758df17c7d60e387ead9c65b81f250fd7b00a47c","commitMessage":"@@@Allow placeholders to be used in imports\n\nAllow `${..}` property placeholders to be used in `spring.config.import`\nproperties. Prior to this commit.  placeholders were not resolved when\nbinding the `ConfigDataProperty` instance. Furthermore.  binding happened\ntoo early for all placeholders to be resolved correctly. The\n`ConfigDataEnvironmentContributor` class now has two states for imported\ncontributors.  `UNBOUND_IMPORT` has the initial unbound state and is\neventually replaced with a `BOUND_IMPORT`.\n\nCloses gh-23020\n","date":"2020-08-24 11:27:12","modifiedFileCount":"7","status":"M","submitter":"Phillip Webb"}]
