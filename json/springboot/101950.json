[{"authorTime":"2019-11-07 17:33:11","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid componentsAreRegistered() {\n\t\tthis.context = new AnnotationConfigServletWebServerApplicationContext();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\tthis.context.refresh();\n\t\tString port = this.context.getEnvironment().getProperty(\"local.server.port\");\n\t\tString response = new RestTemplate().getForObject(\"http://localhost:\" + port + \"/test\", String.class);\n\t\tassertThat(response).isEqualTo(\"alpha bravo\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":61,"groupId":"11589","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"componentsAreRegistered","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ed/af2b9d7ff35c814d09a2b738eb3357803757ec.src","preCode":"\tvoid componentsAreRegistered() {\n\t\tthis.context = new AnnotationConfigServletWebServerApplicationContext();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\tthis.context.refresh();\n\t\tString port = this.context.getEnvironment().getProperty(\"local.server.port\");\n\t\tString response = new RestTemplate().getForObject(\"http://localhost:\" + port + \"/test\", String.class);\n\t\tassertThat(response).isEqualTo(\"alpha bravo\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/ServletComponentScanIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"NB"},{"authorDate":"2019-11-07 17:33:11","commitOrder":3,"curCode":"\tvoid indexedComponentsAreRegistered(@TempDir File temp) throws IOException {\n\t\twriteIndex(temp);\n\t\tthis.context = new AnnotationConfigServletWebServerApplicationContext();\n\t\ttry (URLClassLoader classLoader = new URLClassLoader(new URL[] { temp.toURI().toURL() },\n\t\t\t\tgetClass().getClassLoader())) {\n\t\t\tthis.context.setClassLoader(classLoader);\n\t\t\tthis.context.register(TestConfiguration.class);\n\t\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\t\tthis.context.refresh();\n\t\t\tString port = this.context.getEnvironment().getProperty(\"local.server.port\");\n\t\t\tString response = new RestTemplate().getForObject(\"http://localhost:\" + port + \"/test\", String.class);\n\t\t\tassertThat(response).isEqualTo(\"alpha bravo\");\n\t\t}\n\t}\n","date":"2019-11-07 17:33:11","endLine":87,"groupId":"11589","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"indexedComponentsAreRegistered","params":"(@TempDirFiletemp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bf/9ffcf7b28b2d7884f2e968f3a2a2749b3653cc.src","preCode":"\tvoid indexedComponentsAreRegistered(@TempDir File temp) throws IOException {\n\t\twriteIndex(temp);\n\t\tthis.context = new AnnotationConfigServletWebServerApplicationContext();\n\t\ttry (URLClassLoader classLoader = new URLClassLoader(new URL[] { temp.toURI().toURL() },\n\t\t\t\tgetClass().getClassLoader())) {\n\t\t\tthis.context.setClassLoader(classLoader);\n\t\t\tthis.context.register(TestConfiguration.class);\n\t\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\t\tthis.context.refresh();\n\t\t\tString port = this.context.getEnvironment().getProperty(\"local.server.port\");\n\t\t\tString response = new RestTemplate().getForObject(\"http://localhost:\" + port + \"/test\", String.class);\n\t\t\tassertThat(response).isEqualTo(\"alpha bravo\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/ServletComponentScanIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"dd4377e69c2c4b4ae277590fc43424af9524cf8d","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-18912\n","date":"2019-11-07 17:33:11","modifiedFileCount":"9","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-07-31 18:31:50","codes":[{"authorDate":"2020-07-31 18:31:50","commitOrder":4,"curCode":"\tvoid componentsAreRegistered(String serverName, Class<?> configuration) {\n\t\tthis.context = new AnnotationConfigServletWebServerApplicationContext();\n\t\tthis.context.register(configuration);\n\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\tthis.context.refresh();\n\t\tString port = this.context.getEnvironment().getProperty(\"local.server.port\");\n\t\tString response = new RestTemplate().getForObject(\"http://localhost:\" + port + \"/test\", String.class);\n\t\tassertThat(response).isEqualTo(\"alpha bravo charlie\");\n\t}\n","date":"2020-10-27 04:26:52","endLine":83,"groupId":"101950","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"componentsAreRegistered","params":"(StringserverName@Class<?>configuration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/57/92bd96e7f0cec860d12b7c7a13376a40445f22.src","preCode":"\tvoid componentsAreRegistered() {\n\t\tthis.context = new AnnotationConfigServletWebServerApplicationContext();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\tthis.context.refresh();\n\t\tString port = this.context.getEnvironment().getProperty(\"local.server.port\");\n\t\tString response = new RestTemplate().getForObject(\"http://localhost:\" + port + \"/test\", String.class);\n\t\tassertThat(response).isEqualTo(\"alpha bravo\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/ServletComponentScanIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-07-31 18:31:50","commitOrder":4,"curCode":"\tvoid indexedComponentsAreRegistered(String serverName, Class<?> configuration) throws IOException {\n\t\twriteIndex(this.temp);\n\t\tthis.context = new AnnotationConfigServletWebServerApplicationContext();\n\t\ttry (URLClassLoader classLoader = new URLClassLoader(new URL[] { this.temp.toURI().toURL() },\n\t\t\t\tgetClass().getClassLoader())) {\n\t\t\tthis.context.setClassLoader(classLoader);\n\t\t\tthis.context.register(configuration);\n\t\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\t\tthis.context.refresh();\n\t\t\tString port = this.context.getEnvironment().getProperty(\"local.server.port\");\n\t\t\tString response = new RestTemplate().getForObject(\"http://localhost:\" + port + \"/test\", String.class);\n\t\t\tassertThat(response).isEqualTo(\"alpha bravo charlie\");\n\t\t}\n\t}\n","date":"2020-10-27 04:26:52","endLine":100,"groupId":"101950","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"indexedComponentsAreRegistered","params":"(StringserverName@Class<?>configuration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/57/92bd96e7f0cec860d12b7c7a13376a40445f22.src","preCode":"\tvoid indexedComponentsAreRegistered(@TempDir File temp) throws IOException {\n\t\twriteIndex(temp);\n\t\tthis.context = new AnnotationConfigServletWebServerApplicationContext();\n\t\ttry (URLClassLoader classLoader = new URLClassLoader(new URL[] { temp.toURI().toURL() },\n\t\t\t\tgetClass().getClassLoader())) {\n\t\t\tthis.context.setClassLoader(classLoader);\n\t\t\tthis.context.register(TestConfiguration.class);\n\t\t\tnew ServerPortInfoApplicationContextInitializer().initialize(this.context);\n\t\t\tthis.context.refresh();\n\t\t\tString port = this.context.getEnvironment().getProperty(\"local.server.port\");\n\t\t\tString response = new RestTemplate().getForObject(\"http://localhost:\" + port + \"/test\", String.class);\n\t\t\tassertThat(response).isEqualTo(\"alpha bravo\");\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/ServletComponentScanIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"fafc0a91e3943fdea386a3af92deb00d3150aeba","commitMessage":"@@@Register @WebListeners in a way that allows them to register components\n\nPreviously.  @WebListeners were discovered via custom component scanning\nand then registered programmatically via the ServletContext. The servlet\nspec requires any ServletContextListener registered in this manner to be\nprohibited from programatically configuring servlets.  filters.  and\nlisteners. This left us not strictly complying with the servlet spec\nas a ServletContextListener registered via a @WebListener annotation\nshould be able to programatically configure other components.\n\nThis commit updates WebListenerHandler to register each @WebListener\ncomponent directly with Jetty.  Tomcat.  or Undertow rather than via the\nServletContext API. This ensure that any @WebListener-annoated\nServletContextListener registered via servlet component scanning is\nable to programatically register servlets.  filters.  and listeners.\n\nThere is a small chance that this will be a breaking change for some\nusers:\n\n1. The ServletListenerRegistrationBeans that were previously defined\n   for each @WebListener will now be\n   WebListenerHandler.WebListenerRegistrars\n2. Each @WebListener-annotated class will now be instantiated by\n   Jetty.  Tomcat.  or Undertow. Jetty and Tomcat both require the class\n   to be public and have a public default constructor. Previously. \n   a package-private class or default constructor could be used as the\n   instantiation was performed by Spring Framework. Undertow is not\n   affected as it can instantiate a package-private type.\n\nFixes gh-18303\n","date":"2020-10-27 04:26:52","modifiedFileCount":"12","status":"M","submitter":"Andy Wilkinson"}]
