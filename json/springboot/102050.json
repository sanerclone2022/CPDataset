[{"authorTime":"2020-03-10 20:19:44","codes":[{"authorDate":"2020-03-10 20:19:44","commitOrder":2,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tassertThat(request.get()).isInstanceOf(HttpResponse.class);\n\t\tthis.webServer.stop();\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t}\n","date":"2020-03-10 20:30:25","endLine":587,"groupId":"8911","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5a/5c11e396ff891dd2961eeabacb13bd9d6603b4.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tassertThat(request.get()).isInstanceOf(HttpResponse.class);\n\t\tthis.webServer.stop();\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":565,"status":"MB"},{"authorDate":"2020-03-10 20:19:44","commitOrder":2,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tObject response = request.get();\n\t\tassertThat(response).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","date":"2020-03-10 20:30:25","endLine":206,"groupId":"8911","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ff/d26ad513aba11a0f969e9967180143f785cbb5.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tObject response = request.get();\n\t\tassertThat(response).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"MB"}],"commitId":"b8cb61bbe09f26576a5d362b0e8e490444fedc95","commitMessage":"@@@Align embedded Jetty's graceful shutdown behaviour with standalone\n\nStandalone Jetty will.  by default.  include a Connection: close header\nin all responses once graceful shutdown has begun. Previously.  the\nway in which we were shutting Jetty down did not cause this to happen.\n\nThis commit updates JettyGracefulShutdown to shut down each connector.\nThis causes Jetty to send the Connection: close header.  aligning its\nbehaviour more closely with what it does when used standalone. The\ntests have also been updated to verify this behaviour and to ensure\nthat the correct port is used for requests even once the connector is\nno longer bound and the web server no longer knows its ephemeral port.\n\nSee gh-4657\n","date":"2020-03-10 20:30:25","modifiedFileCount":"10","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-03-10 20:19:44","codes":[{"authorDate":"2020-03-10 20:51:32","commitOrder":3,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tassertThat(request.get()).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","date":"2020-03-10 20:51:32","endLine":590,"groupId":"8911","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/47/b26d79e638a1f908c53dcfb40fd44ff0b0c4c3.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tassertThat(request.get()).isInstanceOf(HttpResponse.class);\n\t\tthis.webServer.stop();\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"M"},{"authorDate":"2020-03-10 20:19:44","commitOrder":3,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tObject response = request.get();\n\t\tassertThat(response).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","date":"2020-03-10 20:30:25","endLine":206,"groupId":"8911","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ff/d26ad513aba11a0f969e9967180143f785cbb5.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tObject response = request.get();\n\t\tassertThat(response).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"N"}],"commitId":"19cc38886148e9f0814cbcbfd79066aef5c232c9","commitMessage":"@@@Test Tomcat's handling of a request on an idle connection\n\nSee gh-4657\n","date":"2020-03-10 20:51:32","modifiedFileCount":"1","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-05-08 01:02:28","codes":[{"authorDate":"2020-05-08 01:02:28","commitOrder":4,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(HttpClients.createDefault(), port, \"/\");\n\t\tblockingServlet.admitOne();\n\t\tassertThat(request.get()).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","date":"2020-05-13 02:59:52","endLine":581,"groupId":"9628","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bd/b520520f12221f9f9a9691d26ac0bcdc08dd1f.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tassertThat(request.get()).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":561,"status":"M"},{"authorDate":"2020-05-08 01:02:28","commitOrder":4,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tblockingServlet.admitOne();\n\t\tObject response = request.get();\n\t\tassertThat(response).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","date":"2020-05-13 02:59:52","endLine":207,"groupId":"9628","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/44/a02c996ad0e22fd3ce8b57f732a36c6a715684.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tShutdown shutdown = new Shutdown();\n\t\tshutdown.setGracePeriod(Duration.ofSeconds(5));\n\t\tfactory.setShutdown(shutdown);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tFuture<Boolean> shutdownResult = initiateGracefulShutdown();\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tassertThat(shutdownResult.get()).isEqualTo(false);\n\t\tblockingServlet.admitOne();\n\t\tObject response = request.get();\n\t\tassertThat(response).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"240898121ff8a06d5e3fdc53f992b1130f81cc96","commitMessage":"@@@Use SmartLifecycle for graceful web server shutdown\n\nCloses gh-21325\n","date":"2020-05-13 02:59:52","modifiedFileCount":"32","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-05-08 01:02:28","codes":[{"authorDate":"2020-05-13 05:41:56","commitOrder":5,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tObject unconnectableRequest = Awaitility.await().until(\n\t\t\t\t() -> initiateGetRequest(HttpClients.createDefault(), port, \"/\").get(),\n\t\t\t\t(result) -> result instanceof Exception);\n\t\tassertThat(unconnectableRequest).isInstanceOf(HttpHostConnectException.class);\n\t\tblockingServlet.admitOne();\n\t\tassertThat(request.get()).isInstanceOf(HttpResponse.class);\n\t\tthis.webServer.stop();\n\t}\n","date":"2020-05-13 05:41:56","endLine":584,"groupId":"102050","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4e/7e23ef003daa5d75a5b9ee97471b8e0966bef1.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(HttpClients.createDefault(), port, \"/\");\n\t\tblockingServlet.admitOne();\n\t\tassertThat(request.get()).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"M"},{"authorDate":"2020-05-08 01:02:28","commitOrder":5,"curCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tblockingServlet.admitOne();\n\t\tObject response = request.get();\n\t\tassertThat(response).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","date":"2020-05-13 02:59:52","endLine":207,"groupId":"102050","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/44/a02c996ad0e22fd3ce8b57f732a36c6a715684.src","preCode":"\tvoid whenServerIsShuttingDownGracefullyThenNewConnectionsCannotBeMade() throws Exception {\n\t\tAbstractServletWebServerFactory factory = getFactory();\n\t\tfactory.setShutdown(Shutdown.GRACEFUL);\n\t\tBlockingServlet blockingServlet = new BlockingServlet();\n\t\tthis.webServer = factory.getWebServer((context) -> {\n\t\t\tDynamic registration = context.addServlet(\"blockingServlet\", blockingServlet);\n\t\t\tregistration.addMapping(\"/blocking\");\n\t\t\tregistration.setAsyncSupported(true);\n\t\t});\n\t\tthis.webServer.start();\n\t\tint port = this.webServer.getPort();\n\t\tFuture<Object> request = initiateGetRequest(port, \"/blocking\");\n\t\tblockingServlet.awaitQueue();\n\t\tthis.webServer.shutDownGracefully((result) -> {\n\t\t});\n\t\tFuture<Object> unconnectableRequest = initiateGetRequest(port, \"/\");\n\t\tblockingServlet.admitOne();\n\t\tObject response = request.get();\n\t\tassertThat(response).isInstanceOf(HttpResponse.class);\n\t\tassertThat(unconnectableRequest.get()).isInstanceOf(HttpHostConnectException.class);\n\t\tthis.webServer.stop();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"}],"commitId":"4c4097a29b85915da6f2510a0ff6e9ad89093e9b","commitMessage":"@@@Address flakiness in TomcatServletWebServerFactoryTests\n","date":"2020-05-13 05:41:56","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"}]
