[{"authorTime":"2017-10-14 00:14:27","codes":[{"authorDate":"2017-10-14 00:14:27","commitOrder":2,"curCode":"\tpublic void endpointPathCustomizationIsNotApplied() throws Exception {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpoint = endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst()\n\t\t\t\t.get();\n\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t}\n","date":"2017-11-16 06:41:38","endLine":222,"groupId":"8260","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"endpointPathCustomizationIsNotApplied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/97/75745cfb6dee4e941c1939fd3fa7fa8f0a4193.src","preCode":"\tpublic void endpointPathCustomizationIsNotApplied() throws Exception {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpoint = endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst()\n\t\t\t\t.get();\n\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"MB"},{"authorDate":"2017-10-14 00:14:27","commitOrder":2,"curCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb()\n\t\t\tthrows Exception {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tassertThat(endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst())\n\t\t\t\t\t\t.isNotEmpty();\n\t}\n","date":"2017-11-16 06:41:38","endLine":223,"groupId":"858","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1d/d27bb16da312ba511b1d3e5cc6c791cd257911.src","preCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb()\n\t\t\tthrows Exception {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tassertThat(endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst())\n\t\t\t\t\t\t.isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"B"}],"commitId":"fd5c43cdc97a3b17234a139b566a96eabd282639","commitMessage":"@@@Separate endpoint concerns\n\nUpdate endpoint code to provide cleaner separation of concerns.\nSpecifically.  the top level endpoint package is no longer aware of\nthe fact that JMX and HTTP are ultimately used to expose endpoints.\nCaching concerns have also been abstracted behind a general purpose\n`OperationMethodInvokerAdvisor` interface.\n\nConfiguration properties have been refined to further enforce\nseparation. The `management.endpoint.<name>` prefix provides\nconfiguration for a  single endpoint (including enable and cache\ntime-to-live). These  properties are now technology agnostic (they\ndon't include `web` or `jmx` sub properties).\n\nThe `management.endpoints.<technology>` prefix provide exposure specific\nconfiguration. For example.  `management.endpoints.web.path-mapping`\nallow endpoint URLs to be changed.\n\nEndpoint enabled/disabled logic has been simplified so that endpoints\ncan't be disabled per exposure technology. Instead a filter based\napproach is used to allow refinement of what endpoints are exposed over\na given technology.\n\nFixes gh-10176\n","date":"2017-11-16 06:41:38","modifiedFileCount":"108","status":"M","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpoint = endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst()\n\t\t\t\t.get();\n\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t}\n","date":"2017-12-12 18:57:30","endLine":225,"groupId":"8260","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"endpointPathCustomizationIsNotApplied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d3/cc6613edffba459f5bd671dc53602e315a294d.src","preCode":"\tpublic void endpointPathCustomizationIsNotApplied() throws Exception {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpoint = endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst()\n\t\t\t\t.get();\n\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tassertThat(endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst())\n\t\t\t\t\t\t.isNotEmpty();\n\t}\n","date":"2017-12-12 18:57:30","endLine":226,"groupId":"858","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/f59344cf611c5d241148eeaadc40ccfde4aec5.src","preCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb()\n\t\t\tthrows Exception {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tassertThat(endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst())\n\t\t\t\t\t\t.isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-01-10 12:57:10","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":4,"curCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();\n\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst()\n\t\t\t\t.get();\n\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t}\n","date":"2018-01-20 12:44:24","endLine":221,"groupId":"1726","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"endpointPathCustomizationIsNotApplied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/8e1b48f7adf50e4d6fd797e1c7ffda49689fbb.src","preCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tEndpointInfo<WebOperation> endpoint = endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst()\n\t\t\t\t.get();\n\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2018-01-10 12:57:10","commitOrder":4,"curCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping();\n\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\tassertThat(endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst())\n\t\t\t\t\t\t.isNotEmpty();\n\t}\n","date":"2018-01-20 12:44:24","endLine":224,"groupId":"858","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e7/288da5e65a07abed095d1293e6dbb490e739bd.src","preCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping();\n\t\tList<EndpointInfo<WebOperation>> endpoints = (List<EndpointInfo<WebOperation>>) handlerMapping\n\t\t\t\t.getEndpoints();\n\t\tassertThat(endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst())\n\t\t\t\t\t\t.isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"1d39feffeabf4b94e3f900b941b58e0443d5887a","commitMessage":"@@@Overhaul actuator endpoint code\n\nRefactor several areas of the actuator endpoint code in order to make\nfuture extensions easier. The primary goal is to introduce the concept\nof an `ExposableEndpoint` that has technology specific subclasses and\ncan carry additional data for filters to use. Many other changes have\nbeen made along the way including:\n\n* A new EndpointSupplier interface that allows cleaner separation of\n  supplying vs discovering endpoints. This allows cleaner class names\n  and allows for better auto-configuration since a user can choose to\n  provide their own supplier entirely.\n\n* A `DiscoveredEndpoint` interface that allows the `EndpointFilter`\n  to be greatly simplified. A filter now doesn't need to know about\n  discovery concerns unless absolutely necessary.\n\n* Improved naming and package structure. Many technology specific\n  concerns are now grouped in a better way. Related concerns are\n  co-located and concepts from one area no longer leakage into another.\n\n* Simplified `HandlerMapping` implementations. Many common concerns have\n  been pulled up helping to create simpler subclasses.\n\n* Simplified JMX adapters. Many of the intermediary `Info` classes have\n  been removed. The `DiscoveredJmxOperation` is now responsible for\n  mapping methods to operations.\n\n* A specific @`HealthEndpointCloudFoundryExtension` for Cloud Foundry.\n  The extension logic used to create a \"full\" health endpoint extension\n  has been made explicit.\n\nFixes gh-11428\nFixes gh-11581\n","date":"2018-01-20 12:44:24","modifiedFileCount":"63","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-01-03 03:13:23","codes":[{"authorDate":"2018-01-03 03:13:23","commitOrder":5,"curCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run(context -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst()\n\t\t\t\t\t\t\t.get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","date":"2018-03-03 10:30:55","endLine":249,"groupId":"1726","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"endpointPathCustomizationIsNotApplied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fe/f5777e431c7382be54b7cc937bd93608ceab3f.src","preCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tsetupContextWithCloudEnabled();\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();\n\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst()\n\t\t\t\t.get();\n\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2018-01-03 03:13:23","commitOrder":5,"curCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run(context -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst())\n\t\t\t\t\t\t\t.isNotEmpty();\n\t\t\t\t});\n\t}\n","date":"2018-03-03 10:30:55","endLine":221,"groupId":"4549","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c9/100d317a86cf8ef992a6e0b5a741387b1d9dea.src","preCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.context.register(TestConfiguration.class);\n\t\tthis.context.refresh();\n\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping();\n\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\tassertThat(endpoints.stream()\n\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst())\n\t\t\t\t\t\t.isNotEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"1c27a8e6e271a86c8600fcfa2b1f221e9023efe9","commitMessage":"@@@Move tests to ApplicationContextRunner\n","date":"2018-03-03 10:30:55","modifiedFileCount":"2","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2018-03-13 07:30:55","codes":[{"authorDate":"2018-03-13 07:30:55","commitOrder":6,"curCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId()))\n\t\t\t\t\t\t\t.findFirst().get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath())\n\t\t\t\t\t\t\t.isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","date":"2018-03-15 05:05:26","endLine":271,"groupId":"1726","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"endpointPathCustomizationIsNotApplied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/1366da84f09ee18009d12fa38e750b65df230c.src","preCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run(context -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst()\n\t\t\t\t\t\t\t.get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2018-03-13 07:30:55","commitOrder":6,"curCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId()))\n\t\t\t\t\t\t\t.findFirst()).isNotEmpty();\n\t\t\t\t});\n\t}\n","date":"2018-03-15 05:05:26","endLine":241,"groupId":"4549","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/94/e6afde968ca3c3032e3fdea386bf0e8c19026e.src","preCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\", \"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run(context -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId())).findFirst())\n\t\t\t\t\t\t\t.isNotEmpty();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"}],"commitId":"a4b0be089da735c481ede50d66f8abc1d3d2cccd","commitMessage":"@@@Polish\n","date":"2018-03-15 05:05:26","modifiedFileCount":"29","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":7,"curCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst().get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath())\n\t\t\t\t\t\t\t.isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":271,"groupId":"15525","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"endpointPathCustomizationIsNotApplied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/88/ff0d3548d6fe24912884cf949a053487ffdde6.src","preCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId()))\n\t\t\t\t\t\t\t.findFirst().get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath())\n\t\t\t\t\t\t\t.isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2018-10-15 04:53:28","commitOrder":7,"curCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst()).isNotEmpty();\n\t\t\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":244,"groupId":"4549","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/89/d65182bce161d9201fbee0bb3ec33f7d2d2639.src","preCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> \"test\".equals(candidate.getId()))\n\t\t\t\t\t\t\t.findFirst()).isNotEmpty();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-03-28 19:48:47","codes":[{"authorDate":"2019-03-28 19:48:47","commitOrder":8,"curCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst().get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath())\n\t\t\t\t\t\t\t.isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","date":"2019-03-28 19:48:47","endLine":281,"groupId":"15525","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"endpointPathCustomizationIsNotApplied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2f/e52b48f3711d510072999b9d7d6357be766177.src","preCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst().get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath())\n\t\t\t\t\t\t\t.isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2019-03-28 19:48:47","commitOrder":8,"curCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst()).isNotEmpty();\n\t\t\t\t});\n\t}\n","date":"2019-03-28 19:48:47","endLine":244,"groupId":"4549","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ac/60d415603be0262c4d922a1be7920a98ca5b52.src","preCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:http://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst()).isNotEmpty();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"878a635bfb6c28ee135b4f84e12fc09a42d1a3a9","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-03-28 19:48:47","modifiedFileCount":"67","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-04-09 00:26:34","codes":[{"authorDate":"2019-04-09 00:26:34","commitOrder":9,"curCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withBean(TestEndpoint.class, TestEndpoint::new)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst().get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath())\n\t\t\t\t\t\t\t.isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","date":"2019-04-09 18:15:05","endLine":281,"groupId":"15525","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"endpointPathCustomizationIsNotApplied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/27/d1738bfa3e538258823af38fd0b58b0d92daae.src","preCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst().get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath())\n\t\t\t\t\t\t\t.isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2019-04-09 00:26:34","commitOrder":9,"curCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner.withBean(TestEndpoint.class, TestEndpoint::new)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst()).isNotEmpty();\n\t\t\t\t});\n\t}\n","date":"2019-04-09 18:15:05","endLine":242,"groupId":"4549","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/50/a0fc2a35b1bdd9b2615d6303de80cb91b086e3.src","preCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n\t\t\t\t.withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\t\t\"vcap.application.application_id:my-app-id\",\n\t\t\t\t\t\t\"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(\n\t\t\t\t\t\t\tcontext);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping\n\t\t\t\t\t\t\t.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\")\n\t\t\t\t\t\t\t\t\t.equals(candidate.getEndpointId()))\n\t\t\t\t\t\t\t.findFirst()).isNotEmpty();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"}],"commitId":"a82807213209443ec6db5a3760995fbabea02a33","commitMessage":"@@@Migrate tests to use withBean\n\nSee gh-16011\n","date":"2019-04-09 18:15:05","modifiedFileCount":"14","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":10,"curCode":"\tvoid endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withBean(TestEndpoint.class, TestEndpoint::new).withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\"vcap.application.application_id:my-app-id\", \"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\").equals(candidate.getEndpointId())).findFirst()\n\t\t\t\t\t\t\t.get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":230,"groupId":"10733","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"endpointPathCustomizationIsNotApplied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/dc/ac9ee8d9051b313821e885b1ad75293e602f47.src","preCode":"\tpublic void endpointPathCustomizationIsNotApplied() {\n\t\tthis.contextRunner.withBean(TestEndpoint.class, TestEndpoint::new).withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\"vcap.application.application_id:my-app-id\", \"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\t\t\t\tExposableWebEndpoint endpoint = endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\").equals(candidate.getEndpointId())).findFirst()\n\t\t\t\t\t\t\t.get();\n\t\t\t\t\tassertThat(endpoint.getOperations()).hasSize(1);\n\t\t\t\t\tWebOperation operation = endpoint.getOperations().iterator().next();\n\t\t\t\t\tassertThat(operation.getRequestPredicate().getPath()).isEqualTo(\"test\");\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":10,"curCode":"\tvoid allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner.withBean(TestEndpoint.class, TestEndpoint::new).withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\"vcap.application.application_id:my-app-id\", \"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\").equals(candidate.getEndpointId())).findFirst())\n\t\t\t\t\t\t\t\t\t.isNotEmpty();\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":198,"groupId":"10733","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f9/4072091366163790d53977168bcb9b5a12dd29.src","preCode":"\tpublic void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {\n\t\tthis.contextRunner.withBean(TestEndpoint.class, TestEndpoint::new).withPropertyValues(\"VCAP_APPLICATION:---\",\n\t\t\t\t\"vcap.application.application_id:my-app-id\", \"vcap.application.cf_api:https://my-cloud-controller.com\")\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tCloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context);\n\t\t\t\t\tCollection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints();\n\t\t\t\t\tassertThat(endpoints.stream()\n\t\t\t\t\t\t\t.filter((candidate) -> EndpointId.of(\"test\").equals(candidate.getEndpointId())).findFirst())\n\t\t\t\t\t\t\t\t\t.isNotEmpty();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
