[{"authorTime":"2018-04-20 05:22:25","codes":[{"authorDate":"2018-04-20 05:22:25","commitOrder":1,"curCode":"\tpublic void customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setTrustStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler()\n\t\t\t\t.findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile()).isEqualTo(sslHostConfigWithDefaults.getTruststoreFile());\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile()).isEqualTo(SslStoreProviderUrlStreamHandlerFactory.KEY_STORE_URL);\n\t}\n","date":"2018-04-20 05:22:25","endLine":132,"groupId":"9600","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/59/d1449b2df49e39c9e24097e69342bf7db196cb.src","preCode":"\tpublic void customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setTrustStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler()\n\t\t\t\t.findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile()).isEqualTo(sslHostConfigWithDefaults.getTruststoreFile());\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile()).isEqualTo(SslStoreProviderUrlStreamHandlerFactory.KEY_STORE_URL);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/SslConnectorCustomizerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2018-04-20 05:22:25","commitOrder":1,"curCode":"\tpublic void customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setKeyStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler()\n\t\t\t\t.findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile()).isEqualTo(SslStoreProviderUrlStreamHandlerFactory.TRUST_STORE_URL);\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile()).contains(sslHostConfigWithDefaults.getCertificateKeystoreFile());\n\t}\n","date":"2018-04-20 05:22:25","endLine":150,"groupId":"9600","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/59/d1449b2df49e39c9e24097e69342bf7db196cb.src","preCode":"\tpublic void customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setKeyStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler()\n\t\t\t\t.findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile()).isEqualTo(SslStoreProviderUrlStreamHandlerFactory.TRUST_STORE_URL);\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile()).contains(sslHostConfigWithDefaults.getCertificateKeystoreFile());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/SslConnectorCustomizerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"ca41a3c1cc20ebc7f51576f078aa0e74cd89bd6f","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-04-20 05:22:25","modifiedFileCount":"2","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setTrustStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile()).isEqualTo(sslHostConfigWithDefaults.getTruststoreFile());\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile())\n\t\t\t\t.isEqualTo(SslStoreProviderUrlStreamHandlerFactory.KEY_STORE_URL);\n\t}\n","date":"2019-06-07 19:25:54","endLine":141,"groupId":"9600","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bf/a1f9101abedaf607a3b2bb2a3dcbb2b3df0a17.src","preCode":"\tpublic void customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setTrustStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile()).isEqualTo(sslHostConfigWithDefaults.getTruststoreFile());\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile())\n\t\t\t\t.isEqualTo(SslStoreProviderUrlStreamHandlerFactory.KEY_STORE_URL);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/SslConnectorCustomizerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setKeyStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile())\n\t\t\t\t.isEqualTo(SslStoreProviderUrlStreamHandlerFactory.TRUST_STORE_URL);\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile())\n\t\t\t\t.contains(sslHostConfigWithDefaults.getCertificateKeystoreFile());\n\t}\n","date":"2019-06-07 19:25:54","endLine":160,"groupId":"9600","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bf/a1f9101abedaf607a3b2bb2a3dcbb2b3df0a17.src","preCode":"\tpublic void customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setKeyStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile())\n\t\t\t\t.isEqualTo(SslStoreProviderUrlStreamHandlerFactory.TRUST_STORE_URL);\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile())\n\t\t\t\t.contains(sslHostConfigWithDefaults.getCertificateKeystoreFile());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/SslConnectorCustomizerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-02-14 04:17:18","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setTrustStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile()).isEqualTo(sslHostConfigWithDefaults.getTruststoreFile());\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile())\n\t\t\t\t.isEqualTo(SslStoreProviderUrlStreamHandlerFactory.KEY_STORE_URL);\n\t}\n","date":"2019-06-07 19:25:54","endLine":141,"groupId":"102052","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bf/a1f9101abedaf607a3b2bb2a3dcbb2b3df0a17.src","preCode":"\tvoid customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setTrustStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getKeyStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile()).isEqualTo(sslHostConfigWithDefaults.getTruststoreFile());\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile())\n\t\t\t\t.isEqualTo(SslStoreProviderUrlStreamHandlerFactory.KEY_STORE_URL);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/SslConnectorCustomizerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"},{"authorDate":"2020-02-14 04:17:18","commitOrder":3,"curCode":"\tvoid customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setKeyStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0];\n\t\tsslHostConfig.getCertificates(true);\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tsslHostConfigWithDefaults.getCertificates(true);\n\t\tassertThat(sslHostConfig.getTruststoreFile())\n\t\t\t\t.isEqualTo(SslStoreProviderUrlStreamHandlerFactory.TRUST_STORE_URL);\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile())\n\t\t\t\t.contains(sslHostConfigWithDefaults.getCertificateKeystoreFile());\n\t}\n","date":"2020-02-14 04:17:18","endLine":162,"groupId":"102052","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/90/eef99ab426c2c7a6a85d20d8dc1f815fb6dae1.src","preCode":"\tvoid customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore() throws Exception {\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyPassword(\"password\");\n\t\tssl.setKeyStore(\"src/test/resources/test.jks\");\n\t\tSslStoreProvider sslStoreProvider = mock(SslStoreProvider.class);\n\t\tgiven(sslStoreProvider.getTrustStore()).willReturn(loadStore());\n\t\tSslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider);\n\t\tConnector connector = this.tomcat.getConnector();\n\t\tcustomizer.customize(connector);\n\t\tthis.tomcat.start();\n\t\tSSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0];\n\t\tSSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig();\n\t\tassertThat(sslHostConfig.getTruststoreFile())\n\t\t\t\t.isEqualTo(SslStoreProviderUrlStreamHandlerFactory.TRUST_STORE_URL);\n\t\tassertThat(sslHostConfig.getCertificateKeystoreFile())\n\t\t\t\t.contains(sslHostConfigWithDefaults.getCertificateKeystoreFile());\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/SslConnectorCustomizerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"09fa8255cdfbabb5189f8c2d819c3b213ff8d867","commitMessage":"@@@Upgrade to Tomcat 9.0.31\n\nCloses gh-20167\n","date":"2020-02-14 04:17:18","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"}]
