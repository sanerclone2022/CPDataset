[{"authorTime":"2018-01-30 01:55:25","codes":[{"authorDate":"2018-01-30 01:55:25","commitOrder":1,"curCode":"\tpublic void callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult() {\n\t\tGenericFactory<?> callbackInstance = mock(StringBuilderFactory.class);\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe\n\t\t\t\t.callback(GenericFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(argument));\n\t\tassertThat(result.hasResult()).isFalse();\n\t\tverifyZeroInteractions(callbackInstance);\n\t}\n","date":"2018-01-30 06:31:11","endLine":188,"groupId":"14752","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3b/bcd2ba21c5bee1940bf44e469067b22cc8bc0c.src","preCode":"\tpublic void callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult() {\n\t\tGenericFactory<?> callbackInstance = mock(StringBuilderFactory.class);\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe\n\t\t\t\t.callback(GenericFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(argument));\n\t\tassertThat(result.hasResult()).isFalse();\n\t\tverifyZeroInteractions(callbackInstance);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2018-01-30 01:55:25","commitOrder":1,"curCode":"\tpublic void callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException() {\n\t\tGenericMultiArgFactory<StringBuilder> callbackInstance = (n, s, b) -> {\n\t\t\tfail(\"Should not get here\");\n\t\t\treturn 123;\n\t\t};\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe\n\t\t\t\t.callback(GenericMultiArgFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(1, argument, false));\n\t\tassertThat(result.hasResult()).isFalse();\n\t}\n","date":"2018-01-30 06:31:11","endLine":216,"groupId":"14752","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3b/bcd2ba21c5bee1940bf44e469067b22cc8bc0c.src","preCode":"\tpublic void callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException() {\n\t\tGenericMultiArgFactory<StringBuilder> callbackInstance = (n, s, b) -> {\n\t\t\tfail(\"Should not get here\");\n\t\t\treturn 123;\n\t\t};\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe\n\t\t\t\t.callback(GenericMultiArgFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(1, argument, false));\n\t\tassertThat(result.hasResult()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"}],"commitId":"798882bd3f5b787dafefa15c5fbd670f175b23e7","commitMessage":"@@@Merge branch 'gh-11584'\n","date":"2018-01-30 06:31:11","modifiedFileCount":"5","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult() {\n\t\tGenericFactory<?> callbackInstance = mock(StringBuilderFactory.class);\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe.callback(GenericFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(argument));\n\t\tassertThat(result.hasResult()).isFalse();\n\t\tverifyZeroInteractions(callbackInstance);\n\t}\n","date":"2019-06-07 19:25:54","endLine":168,"groupId":"14752","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d1/350e29739eaa3ba60ce6db03e7b4a87df084e4.src","preCode":"\tpublic void callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult() {\n\t\tGenericFactory<?> callbackInstance = mock(StringBuilderFactory.class);\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe.callback(GenericFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(argument));\n\t\tassertThat(result.hasResult()).isFalse();\n\t\tverifyZeroInteractions(callbackInstance);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException() {\n\t\tGenericMultiArgFactory<StringBuilder> callbackInstance = (n, s, b) -> {\n\t\t\tfail(\"Should not get here\");\n\t\t\treturn 123;\n\t\t};\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe.callback(GenericMultiArgFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(1, argument, false));\n\t\tassertThat(result.hasResult()).isFalse();\n\t}\n","date":"2019-06-07 19:25:54","endLine":194,"groupId":"14752","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d1/350e29739eaa3ba60ce6db03e7b4a87df084e4.src","preCode":"\tpublic void callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException() {\n\t\tGenericMultiArgFactory<StringBuilder> callbackInstance = (n, s, b) -> {\n\t\t\tfail(\"Should not get here\");\n\t\t\treturn 123;\n\t\t};\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe.callback(GenericMultiArgFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(1, argument, false));\n\t\tassertThat(result.hasResult()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-10-23 15:49:46","commitOrder":3,"curCode":"\tvoid callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult() {\n\t\tGenericFactory<?> callbackInstance = mock(StringBuilderFactory.class);\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe.callback(GenericFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(argument));\n\t\tassertThat(result.hasResult()).isFalse();\n\t\tverifyNoInteractions(callbackInstance);\n\t}\n","date":"2019-10-23 15:49:46","endLine":168,"groupId":"102090","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/96/c1c0404222e40cb3e1749bec177d10b222ba53.src","preCode":"\tvoid callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult() {\n\t\tGenericFactory<?> callbackInstance = mock(StringBuilderFactory.class);\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe.callback(GenericFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(argument));\n\t\tassertThat(result.hasResult()).isFalse();\n\t\tverifyZeroInteractions(callbackInstance);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException() {\n\t\tGenericMultiArgFactory<StringBuilder> callbackInstance = (n, s, b) -> {\n\t\t\tfail(\"Should not get here\");\n\t\t\treturn 123;\n\t\t};\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe.callback(GenericMultiArgFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(1, argument, false));\n\t\tassertThat(result.hasResult()).isFalse();\n\t}\n","date":"2019-06-07 19:25:54","endLine":194,"groupId":"102090","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d1/350e29739eaa3ba60ce6db03e7b4a87df084e4.src","preCode":"\tvoid callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException() {\n\t\tGenericMultiArgFactory<StringBuilder> callbackInstance = (n, s, b) -> {\n\t\t\tfail(\"Should not get here\");\n\t\t\treturn 123;\n\t\t};\n\t\tString argument = \"foo\";\n\t\tInvocationResult<Integer> result = LambdaSafe.callback(GenericMultiArgFactory.class, callbackInstance, argument)\n\t\t\t\t.invokeAnd((c) -> c.handle(1, argument, false));\n\t\tassertThat(result.hasResult()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"N"}],"commitId":"ce8360dc95cd028e788cb00b6ddcfbd432e72e04","commitMessage":"@@@Merge pull request #18689 from dreis2211\n\n* pr/18689:\n  Fix Mockito deprecations\n\nCloses gh-18689\n","date":"2019-10-23 15:49:46","modifiedFileCount":"19","status":"M","submitter":"Stephane Nicoll"}]
