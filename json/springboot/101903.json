[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-11-03 05:42:26","commitOrder":2,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore) throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\n\t\tMono<String> result = client.post()\n\t\t\t\t.uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","date":"2017-11-03 20:56:06","endLine":120,"groupId":"11024","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bd/6b0e30ba9beed311a8186d05052082529535b4.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore) throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\n\t\tMono<String> result = client.post()\n\t\t\t\t.uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":2,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(\n\t\t\t\tnew ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2017-10-05 11:18:56","endLine":204,"groupId":"2782","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c3/e90a0078ca6699115b337e6d02a47838e2e57c.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(\n\t\t\t\tnew ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"NB"}],"commitId":"7f58db7d0e9084881f4171a9cc5ac4ae19647598","commitMessage":"@@@Apply TLS configuration to reactive web servers\n\nThis commit applies the SSL configuration to the following reactive web\nservers: Jetty.  Tomcat.  Undertow.  Reactor Netty.\n\nCloses gh-9431\n","date":"2017-11-03 20:56:06","modifiedFileCount":"10","status":"M","submitter":"Brian Clozel"},{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","date":"2017-12-12 18:57:30","endLine":116,"groupId":"11024","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b9/d4cb5766de3f721eae4b697ebad597e2ff433c.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore) throws Exception {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2017-10-05 07:38:18","commitOrder":3,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(\n\t\t\t\tnew ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2017-10-05 11:18:56","endLine":204,"groupId":"2782","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c3/e90a0078ca6699115b337e6d02a47838e2e57c.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(\n\t\t\t\tnew ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"N"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2018-01-11 18:15:29","commitOrder":4,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","date":"2018-01-11 18:15:29","endLine":127,"groupId":"11024","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1c/2b433fa9fa702fbe60054845fe4475700ecdbc.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(\"password\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2017-10-05 07:38:18","commitOrder":4,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(\n\t\t\t\tnew ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2017-10-05 11:18:56","endLine":204,"groupId":"2782","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c3/e90a0078ca6699115b337e6d02a47838e2e57c.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(\n\t\t\t\tnew ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"N"}],"commitId":"6ecdd6e9c131740bd34db1f92f8c0875f0bc84f5","commitMessage":"@@@Add SSL client Auth support with Reactor Netty\n\nThis commit adds SSL client Authentication support\nto Reactor Netty and adds the relevant tests to\n`AbstractReactiveWebServerFactoryTests` for all servers.\n\nFixes gh-11488\n","date":"2018-01-11 18:15:29","modifiedFileCount":"2","status":"M","submitter":"Brian Clozel"},{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2018-12-20 23:30:51","commitOrder":5,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2018-12-20 23:30:51","endLine":133,"groupId":"11024","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/efb072bf19178cd3bf5a868ea286c7a541560c.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block()).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2017-10-05 07:38:18","commitOrder":5,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(\n\t\t\t\tnew ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2017-10-05 11:18:56","endLine":204,"groupId":"2782","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c3/e90a0078ca6699115b337e6d02a47838e2e57c.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(\n\t\t\t\tnew ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"N"}],"commitId":"9d2d6d5812d34b0bc04da3a124b9c5c0da511c04","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-20 23:30:51","modifiedFileCount":"22","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2018-12-20 23:30:51","commitOrder":6,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2018-12-20 23:30:51","endLine":133,"groupId":"11024","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/efb072bf19178cd3bf5a868ea286c7a541560c.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder()\n\t\t\t\t.baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2019-06-07 19:25:54","endLine":192,"groupId":"2782","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/e9ec9621f32c4abf7177ddde06d00d885ab691.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.temporaryFolder.getRoot();\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-09-25 20:57:33","commitOrder":7,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2019-09-25 20:57:33","endLine":128,"groupId":"11024","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/33/9a4beef872ac33577a12f400e9ea075125c2a1.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromObject(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":7,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2019-06-07 19:25:54","endLine":192,"groupId":"2782","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/e9ec9621f32c4abf7177ddde06d00d885ab691.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"N"}],"commitId":"7548da1b400fe5feac6be7c8e094bfad2f7d5fee","commitMessage":"@@@Merge pull request #18349 from dreis2211\n\n* gh-18349:\n  Fix deprecation warnings caused by BodyInserters.fromObject\n\nCloses gh-18349\n","date":"2019-09-25 20:57:33","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2020-09-30 19:21:16","commitOrder":8,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2020-09-30 19:46:57","endLine":145,"groupId":"11024","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/7ed7191ac2d8b055dd714c69dbf65005365e00.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).exchange()\n\t\t\t\t.flatMap((response) -> response.bodyToMono(String.class));\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":8,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2019-06-07 19:25:54","endLine":192,"groupId":"2782","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/e9ec9621f32c4abf7177ddde06d00d885ab691.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"N"}],"commitId":"366fec33d06b6ab4ee4f1bc9513c07a227d207de","commitMessage":"@@@Adapt to API change in Spring Framework 5.3.0 snapshots\n\nSee gh-23534\n","date":"2020-09-30 19:46:57","modifiedFileCount":"9","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2020-11-05 19:40:07","commitOrder":9,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyStorePassword(\"secret\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2020-11-05 19:40:07","endLine":144,"groupId":"11024","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5d/b51932a15f6620f1c63e91b0ed2547bccf62d1.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":9,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2019-06-07 19:25:54","endLine":192,"groupId":"2782","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/e9ec9621f32c4abf7177ddde06d00d885ab691.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"N"}],"commitId":"06f37f429543da621cfff37c094478c1fc6939f7","commitMessage":"@@@Merge branch '2.3.x'\n\nCloses gh-24053\n","date":"2020-11-05 19:40:07","modifiedFileCount":"3","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-05-17 16:15:00","codes":[{"authorDate":"2020-11-05 19:40:07","commitOrder":10,"curCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyStorePassword(\"secret\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","date":"2020-11-05 19:40:07","endLine":144,"groupId":"101903","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSslWithKeyStore","params":"(StringkeyStore@StringkeyPassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/5d/b51932a15f6620f1c63e91b0ed2547bccf62d1.src","preCode":"\tprotected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {\n\t\tAbstractReactiveWebServerFactory factory = getFactory();\n\t\tSsl ssl = new Ssl();\n\t\tssl.setKeyStore(keyStore);\n\t\tssl.setKeyPassword(keyPassword);\n\t\tssl.setKeyStorePassword(\"secret\");\n\t\tfactory.setSsl(ssl);\n\t\tthis.webServer = factory.getWebServer(new EchoHandler());\n\t\tthis.webServer.start();\n\t\tReactorClientHttpConnector connector = buildTrustAllSslConnector();\n\t\tWebClient client = WebClient.builder().baseUrl(\"https://localhost:\" + this.webServer.getPort())\n\t\t\t\t.clientConnector(connector).build();\n\t\tMono<String> result = client.post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN)\n\t\t\t\t.body(BodyInserters.fromValue(\"Hello World\")).retrieve().bodyToMono(String.class);\n\t\tassertThat(result.block(Duration.ofSeconds(30))).isEqualTo(\"Hello World\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"},{"authorDate":"2021-05-17 16:15:00","commitOrder":10,"curCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","date":"2021-05-17 16:15:00","endLine":230,"groupId":"101903","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"testAccessLog","params":"(Stringprefix@Stringsuffix@StringexpectedFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e8/33dd92b22d962bd75ef54d1f9ef5fb4e8ca121.src","preCode":"\tprivate void testAccessLog(String prefix, String suffix, String expectedFile)\n\t\t\tthrows IOException, URISyntaxException, InterruptedException {\n\t\tUndertowServletWebServerFactory factory = getFactory();\n\t\tfactory.setAccessLogEnabled(true);\n\t\tfactory.setAccessLogPrefix(prefix);\n\t\tfactory.setAccessLogSuffix(suffix);\n\t\tFile accessLogDirectory = this.tempDir;\n\t\tfactory.setAccessLogDirectory(accessLogDirectory);\n\t\tassertThat(accessLogDirectory.listFiles()).isEmpty();\n\t\tthis.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), \"/hello\"));\n\t\tthis.webServer.start();\n\t\tassertThat(getResponse(getLocalUrl(\"/hello\"))).isEqualTo(\"Hello World\");\n\t\tFile accessLog = new File(accessLogDirectory, expectedFile);\n\t\tawaitFile(accessLog);\n\t\tassertThat(accessLogDirectory.listFiles()).contains(accessLog);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"21a3f03d20a24934e38a26843872778598da7ad3","commitMessage":"@@@Merge pull request #26441 from weixsun\n\n* pr/26441:\n  Polish \"Remove unnecessary throws declaration in tests\"\n  Remove unnecessary throws declaration in tests\n\nCloses gh-26441\n","date":"2021-05-17 16:15:00","modifiedFileCount":"172","status":"M","submitter":"Stephane Nicoll"}]
