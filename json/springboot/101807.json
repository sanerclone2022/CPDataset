[{"authorTime":"2018-02-18 00:21:49","codes":[{"authorDate":"2018-02-18 00:21:49","commitOrder":1,"curCode":"\tpublic void matchesWhenHasAnnotationAndNonConvertibleElementTypeShouldReturnFalse() {\n\t\tTypeDescriptor sourceType = TypeDescriptor.valueOf(String.class);\n\t\tTypeDescriptor targetType = TypeDescriptor.nested(\n\t\t\t\tReflectionUtils.findField(Values.class, \"nonConvertibleElementType\"), 0);\n\t\tassertThat(new DelimitedStringToCollectionConverter(this.conversionService)\n\t\t\t\t.matches(sourceType, targetType)).isFalse();\n\t}\n","date":"2018-02-20 12:25:47","endLine":97,"groupId":"4305","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"matchesWhenHasAnnotationAndNonConvertibleElementTypeShouldReturnFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4e/a3bbd16822f5724dc2a9a7b25f2a99a7d58382.src","preCode":"\tpublic void matchesWhenHasAnnotationAndNonConvertibleElementTypeShouldReturnFalse() {\n\t\tTypeDescriptor sourceType = TypeDescriptor.valueOf(String.class);\n\t\tTypeDescriptor targetType = TypeDescriptor.nested(\n\t\t\t\tReflectionUtils.findField(Values.class, \"nonConvertibleElementType\"), 0);\n\t\tassertThat(new DelimitedStringToCollectionConverter(this.conversionService)\n\t\t\t\t.matches(sourceType, targetType)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/convert/DelimitedStringToCollectionConverterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2018-02-18 00:21:49","commitOrder":1,"curCode":"\tpublic void matchesWhenHasAnnotationAndConvertibleElementTypeShouldReturnTrue() {\n\t\tif (this.conversionService instanceof ApplicationConversionService) {\n\t\t\tTypeDescriptor sourceType = TypeDescriptor.valueOf(String.class);\n\t\t\tTypeDescriptor targetType = TypeDescriptor.nested(\n\t\t\t\t\tReflectionUtils.findField(Values.class, \"convertibleElementType\"), 0);\n\t\t\tassertThat(new DelimitedStringToCollectionConverter(this.conversionService)\n\t\t\t\t\t.matches(sourceType, targetType)).isTrue();\n\t\t}\n\t}\n","date":"2018-02-20 12:25:47","endLine":88,"groupId":"4305","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"matchesWhenHasAnnotationAndConvertibleElementTypeShouldReturnTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4e/a3bbd16822f5724dc2a9a7b25f2a99a7d58382.src","preCode":"\tpublic void matchesWhenHasAnnotationAndConvertibleElementTypeShouldReturnTrue() {\n\t\tif (this.conversionService instanceof ApplicationConversionService) {\n\t\t\tTypeDescriptor sourceType = TypeDescriptor.valueOf(String.class);\n\t\t\tTypeDescriptor targetType = TypeDescriptor.nested(\n\t\t\t\t\tReflectionUtils.findField(Values.class, \"convertibleElementType\"), 0);\n\t\t\tassertThat(new DelimitedStringToCollectionConverter(this.conversionService)\n\t\t\t\t\t.matches(sourceType, targetType)).isTrue();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/convert/DelimitedStringToCollectionConverterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"20109e27be24da74e884c14a03afc8f9561e4196","commitMessage":"@@@Add ApplicationConversionService and fix binder\n\nCreate a new `ApplicationConversionService` similar in design to the\nDefaultFormattingConversionService from Spring Framework. The new\nconversion service provides a central place for custom conversion logic\nsupported by Spring Boot.\n\nAlso replace the `BindingConversionService` with an internal\n`BindConverter` class that now invokes the `SimpleTypeConverter`\ndirectly. Binding for `@ConfigurationProperties` has been updated so\nthat any custom property editors registered with the BeanFactory can\nbe used.\n\nFixes gh-12095\n","date":"2018-02-20 12:25:47","modifiedFileCount":"29","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid matchesWhenHasAnnotationAndNonConvertibleElementTypeShouldReturnFalse(ConversionService conversionService) {\n\t\tTypeDescriptor sourceType = TypeDescriptor.valueOf(String.class);\n\t\tTypeDescriptor targetType = TypeDescriptor\n\t\t\t\t.nested(ReflectionUtils.findField(Values.class, \"nonConvertibleElementType\"), 0);\n\t\tassertThat(new DelimitedStringToCollectionConverter(conversionService).matches(sourceType, targetType))\n\t\t\t\t.isFalse();\n\t}\n","date":"2019-06-07 19:25:54","endLine":68,"groupId":"101807","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"matchesWhenHasAnnotationAndNonConvertibleElementTypeShouldReturnFalse","params":"(ConversionServiceconversionService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f4/45f2db63ca26b1fa4c9c3e958fb7bcaabc3e5b.src","preCode":"\tpublic void matchesWhenHasAnnotationAndNonConvertibleElementTypeShouldReturnFalse() {\n\t\tTypeDescriptor sourceType = TypeDescriptor.valueOf(String.class);\n\t\tTypeDescriptor targetType = TypeDescriptor\n\t\t\t\t.nested(ReflectionUtils.findField(Values.class, \"nonConvertibleElementType\"), 0);\n\t\tassertThat(new DelimitedStringToCollectionConverter(this.conversionService).matches(sourceType, targetType))\n\t\t\t\t.isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/convert/DelimitedStringToCollectionConverterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":2,"curCode":"\tvoid matchesWhenHasAnnotationAndConvertibleElementTypeShouldReturnTrue() {\n\t\tTypeDescriptor sourceType = TypeDescriptor.valueOf(String.class);\n\t\tTypeDescriptor targetType = TypeDescriptor\n\t\t\t\t.nested(ReflectionUtils.findField(Values.class, \"convertibleElementType\"), 0);\n\t\tassertThat(new DelimitedStringToCollectionConverter(new ApplicationConversionService()).matches(sourceType,\n\t\t\t\ttargetType)).isTrue();\n\t}\n","date":"2019-06-07 19:25:54","endLine":106,"groupId":"101807","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"matchesWhenHasAnnotationAndConvertibleElementTypeShouldReturnTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f4/45f2db63ca26b1fa4c9c3e958fb7bcaabc3e5b.src","preCode":"\tpublic void matchesWhenHasAnnotationAndConvertibleElementTypeShouldReturnTrue() {\n\t\tif (this.conversionService instanceof ApplicationConversionService) {\n\t\t\tTypeDescriptor sourceType = TypeDescriptor.valueOf(String.class);\n\t\t\tTypeDescriptor targetType = TypeDescriptor\n\t\t\t\t\t.nested(ReflectionUtils.findField(Values.class, \"convertibleElementType\"), 0);\n\t\t\tassertThat(new DelimitedStringToCollectionConverter(this.conversionService).matches(sourceType, targetType))\n\t\t\t\t\t.isTrue();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/convert/DelimitedStringToCollectionConverterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
