[{"authorTime":"2020-07-22 11:11:17","codes":[{"authorDate":"2020-07-22 11:11:17","commitOrder":1,"curCode":"\tvoid loadMultiDocumentPropertiesWithSeparatorAtTheBeginningofFile() throws Exception {\n\t\tList<PropertySource<?>> loaded = this.loader.load(\"test.properties\",\n\t\t\t\tnew ClassPathResource(\"multi-document-properties-2.properties\", getClass()));\n\t\tassertThat(loaded.size()).isEqualTo(2);\n\t\tPropertySource<?> source1 = loaded.get(0);\n\t\tPropertySource<?> source2 = loaded.get(1);\n\t\tassertThat(source1.getProperty(\"blah\")).isEqualTo(\"hello world\");\n\t\tassertThat(source2.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}\n","date":"2020-07-23 11:58:24","endLine":60,"groupId":"11284","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadMultiDocumentPropertiesWithSeparatorAtTheBeginningofFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3d/3fc46437b2054d25a2b916e8b8a9ac1e1104dd.src","preCode":"\tvoid loadMultiDocumentPropertiesWithSeparatorAtTheBeginningofFile() throws Exception {\n\t\tList<PropertySource<?>> loaded = this.loader.load(\"test.properties\",\n\t\t\t\tnew ClassPathResource(\"multi-document-properties-2.properties\", getClass()));\n\t\tassertThat(loaded.size()).isEqualTo(2);\n\t\tPropertySource<?> source1 = loaded.get(0);\n\t\tPropertySource<?> source2 = loaded.get(1);\n\t\tassertThat(source1.getProperty(\"blah\")).isEqualTo(\"hello world\");\n\t\tassertThat(source2.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/PropertiesPropertySourceLoaderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"},{"authorDate":"2020-07-22 11:11:17","commitOrder":1,"curCode":"\tvoid loadMultiDocumentPropertiesWithEmptyDocument() throws Exception {\n\t\tList<PropertySource<?>> loaded = this.loader.load(\"test.properties\",\n\t\t\t\tnew ClassPathResource(\"multi-document-properties-empty.properties\", getClass()));\n\t\tassertThat(loaded.size()).isEqualTo(2);\n\t\tPropertySource<?> source1 = loaded.get(0);\n\t\tPropertySource<?> source2 = loaded.get(1);\n\t\tassertThat(source1.getProperty(\"blah\")).isEqualTo(\"hello world\");\n\t\tassertThat(source2.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}\n","date":"2020-07-23 11:58:24","endLine":82,"groupId":"11284","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadMultiDocumentPropertiesWithEmptyDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3d/3fc46437b2054d25a2b916e8b8a9ac1e1104dd.src","preCode":"\tvoid loadMultiDocumentPropertiesWithEmptyDocument() throws Exception {\n\t\tList<PropertySource<?>> loaded = this.loader.load(\"test.properties\",\n\t\t\t\tnew ClassPathResource(\"multi-document-properties-empty.properties\", getClass()));\n\t\tassertThat(loaded.size()).isEqualTo(2);\n\t\tPropertySource<?> source1 = loaded.get(0);\n\t\tPropertySource<?> source2 = loaded.get(1);\n\t\tassertThat(source1.getProperty(\"blah\")).isEqualTo(\"hello world\");\n\t\tassertThat(source2.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/PropertiesPropertySourceLoaderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"9e9eb90d09395ece06a9c699e8208f55bb7bf021","commitMessage":"@@@Add multi-document properties file support\n\nUpdate `OriginTrackedPropertiesLoader` so that it can support\nmulti-document properties files. These are similar to multi-document\nYAML files but use `#---` as the separator.\n\nCloses gh-22495\n\nCo-authored-by: Phillip Webb <pwebb@vmware.com>\n","date":"2020-07-23 11:58:24","modifiedFileCount":"4","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2020-07-22 11:11:17","codes":[{"authorDate":"2020-08-23 02:45:05","commitOrder":2,"curCode":"\tvoid loadMultiDocumentPropertiesWithSeparatorAtTheBeginningOfFile() throws Exception {\n\t\tList<PropertySource<?>> loaded = this.loader.load(\"test.properties\",\n\t\t\t\tnew ClassPathResource(\"multi-document-properties-2.properties\", getClass()));\n\t\tassertThat(loaded.size()).isEqualTo(2);\n\t\tPropertySource<?> source1 = loaded.get(0);\n\t\tPropertySource<?> source2 = loaded.get(1);\n\t\tassertThat(source1.getProperty(\"blah\")).isEqualTo(\"hello world\");\n\t\tassertThat(source2.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}\n","date":"2020-08-23 02:45:06","endLine":60,"groupId":"101771","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"loadMultiDocumentPropertiesWithSeparatorAtTheBeginningOfFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a5/1ce2f1a3a56fcf93dedf8825ed93f5cf250bf5.src","preCode":"\tvoid loadMultiDocumentPropertiesWithSeparatorAtTheBeginningofFile() throws Exception {\n\t\tList<PropertySource<?>> loaded = this.loader.load(\"test.properties\",\n\t\t\t\tnew ClassPathResource(\"multi-document-properties-2.properties\", getClass()));\n\t\tassertThat(loaded.size()).isEqualTo(2);\n\t\tPropertySource<?> source1 = loaded.get(0);\n\t\tPropertySource<?> source2 = loaded.get(1);\n\t\tassertThat(source1.getProperty(\"blah\")).isEqualTo(\"hello world\");\n\t\tassertThat(source2.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/PropertiesPropertySourceLoaderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-07-22 11:11:17","commitOrder":2,"curCode":"\tvoid loadMultiDocumentPropertiesWithEmptyDocument() throws Exception {\n\t\tList<PropertySource<?>> loaded = this.loader.load(\"test.properties\",\n\t\t\t\tnew ClassPathResource(\"multi-document-properties-empty.properties\", getClass()));\n\t\tassertThat(loaded.size()).isEqualTo(2);\n\t\tPropertySource<?> source1 = loaded.get(0);\n\t\tPropertySource<?> source2 = loaded.get(1);\n\t\tassertThat(source1.getProperty(\"blah\")).isEqualTo(\"hello world\");\n\t\tassertThat(source2.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}\n","date":"2020-07-23 11:58:24","endLine":82,"groupId":"101771","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadMultiDocumentPropertiesWithEmptyDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3d/3fc46437b2054d25a2b916e8b8a9ac1e1104dd.src","preCode":"\tvoid loadMultiDocumentPropertiesWithEmptyDocument() throws Exception {\n\t\tList<PropertySource<?>> loaded = this.loader.load(\"test.properties\",\n\t\t\t\tnew ClassPathResource(\"multi-document-properties-empty.properties\", getClass()));\n\t\tassertThat(loaded.size()).isEqualTo(2);\n\t\tPropertySource<?> source1 = loaded.get(0);\n\t\tPropertySource<?> source2 = loaded.get(1);\n\t\tassertThat(source1.getProperty(\"blah\")).isEqualTo(\"hello world\");\n\t\tassertThat(source2.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/PropertiesPropertySourceLoaderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"00cb5bbd86fd44c2ab7e2085ddc08fe385d86192","commitMessage":"@@@Merge pull request #23050 from dreis2211\n\n* pr/23050:\n  Fix typos in tests\n\nCloses gh-23050\n","date":"2020-08-23 02:45:06","modifiedFileCount":"8","status":"M","submitter":"Phillip Webb"}]
