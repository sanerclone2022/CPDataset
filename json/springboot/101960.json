[{"authorTime":"2020-07-07 18:43:17","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":388,"groupId":"16287","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"nestedServletExceptionIsUnwrapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/ee16ca420e81db0ceb1fb260d60f8d03876cc7.src","preCode":"\tvoid nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"NB"},{"authorDate":"2020-07-07 18:43:17","commitOrder":4,"curCode":"\tvoid nestedServletExceptionWithNoCause() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(MissingServletRequestParameterException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new MissingServletRequestParameterException(\"test\", \"string\");\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"Required string parameter 'test' is not present\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(MissingServletRequestParameterException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(MissingServletRequestParameterException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2020-07-07 18:43:17","endLine":413,"groupId":"15632","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"nestedServletExceptionWithNoCause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b0/f183dc43305800bbe3bd100b3098bd29ed69ef.src","preCode":"\tvoid nestedServletExceptionWithNoCause() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(MissingServletRequestParameterException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new MissingServletRequestParameterException(\"test\", \"string\");\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"Required string parameter 'test' is not present\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(MissingServletRequestParameterException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(MissingServletRequestParameterException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"B"}],"commitId":"29b69bfbdfa6ce1a031f463f96a340ed056caf75","commitMessage":"@@@Merge branch '2.3.x'\n\nCloses gh-22250\n","date":"2020-07-07 18:43:17","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-04-09 14:56:37","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":388,"groupId":"101960","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"nestedServletExceptionIsUnwrapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/ee16ca420e81db0ceb1fb260d60f8d03876cc7.src","preCode":"\tvoid nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"N"},{"authorDate":"2021-04-09 14:56:37","commitOrder":5,"curCode":"\tvoid nestedServletExceptionWithNoCause() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(MissingServletRequestParameterException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new MissingServletRequestParameterException(\"test\", \"string\");\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"Required request parameter 'test' for method parameter type string is not present\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(MissingServletRequestParameterException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(MissingServletRequestParameterException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2021-04-09 14:56:37","endLine":413,"groupId":"101960","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"nestedServletExceptionWithNoCause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b8/39e3207a2f0698d92386db2bf2e382876d7db9.src","preCode":"\tvoid nestedServletExceptionWithNoCause() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(MissingServletRequestParameterException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new MissingServletRequestParameterException(\"test\", \"string\");\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"Required string parameter 'test' is not present\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(MissingServletRequestParameterException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(MissingServletRequestParameterException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"}],"commitId":"4290e0792bfbf2ad466be0d8296d72e5e04afb59","commitMessage":"@@@Start building against Spring Framework 5.3.6 snapshots\n\nSee gh-25926\n","date":"2021-04-09 14:56:37","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"}]
