[{"authorTime":"2019-07-03 06:55:58","codes":[{"authorDate":"2019-07-03 06:55:58","commitOrder":1,"curCode":"\tvoid withValidBearerTokenShouldAllowAccess() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setBearerAuth(VALID_TOKEN);\n\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\n\t\tResponseEntity<String> entity = this.restTemplate.exchange(\"/\", HttpMethod.GET, request, String.class);\n\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n\t}\n","date":"2019-07-03 06:55:58","endLine":73,"groupId":"15154","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"withValidBearerTokenShouldAllowAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ab/3e5dc0ae88b1619150cd05f1868c755130ee6d.src","preCode":"\tvoid withValidBearerTokenShouldAllowAccess() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setBearerAuth(VALID_TOKEN);\n\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\n\t\tResponseEntity<String> entity = this.restTemplate.exchange(\"/\", HttpMethod.GET, request, String.class);\n\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-oauth2-resource-server/src/test/java/smoketest/oauth2/resource/SampleOauth2ResourceServerApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"},{"authorDate":"2019-07-03 06:55:58","commitOrder":1,"curCode":"\tvoid testHtmlErrorPage() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));\n\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\n\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", getPassword()).exchange(\"/foo\",\n\t\t\t\tHttpMethod.GET, request, String.class);\n\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\n\t\tString body = entity.getBody();\n\t\tassertThat(body).as(\"Body was null\").isNotNull();\n\t\tassertThat(body).contains(\"This application has no explicit mapping for /error\");\n\t}\n","date":"2019-07-03 06:55:58","endLine":153,"groupId":"15154","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHtmlErrorPage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/80/58b40199c1db50f8ee099c002e9b70db7cacfb.src","preCode":"\tvoid testHtmlErrorPage() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));\n\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\n\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", getPassword()).exchange(\"/foo\",\n\t\t\t\tHttpMethod.GET, request, String.class);\n\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\n\t\tString body = entity.getBody();\n\t\tassertThat(body).as(\"Body was null\").isNotNull();\n\t\tassertThat(body).contains(\"This application has no explicit mapping for /error\");\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"}],"commitId":"d9466f5659435eb8ff73cdb347a86f0ede403cce","commitMessage":"@@@Move smoke tests under spring-boot-test\n\nSee gh-17393\n","date":"2019-07-03 06:55:58","modifiedFileCount":"0","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2019-09-25 09:21:23","codes":[{"authorDate":"2019-07-03 06:55:58","commitOrder":2,"curCode":"\tvoid withValidBearerTokenShouldAllowAccess() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setBearerAuth(VALID_TOKEN);\n\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\n\t\tResponseEntity<String> entity = this.restTemplate.exchange(\"/\", HttpMethod.GET, request, String.class);\n\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n\t}\n","date":"2019-07-03 06:55:58","endLine":73,"groupId":"10155","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"withValidBearerTokenShouldAllowAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ab/3e5dc0ae88b1619150cd05f1868c755130ee6d.src","preCode":"\tvoid withValidBearerTokenShouldAllowAccess() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setBearerAuth(VALID_TOKEN);\n\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\n\t\tResponseEntity<String> entity = this.restTemplate.exchange(\"/\", HttpMethod.GET, request, String.class);\n\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-oauth2-resource-server/src/test/java/smoketest/oauth2/resource/SampleOauth2ResourceServerApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2019-09-25 09:21:23","commitOrder":2,"curCode":"\tvoid testHtmlErrorPage() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));\n\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\n\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", \"password\").exchange(\"/foo\",\n\t\t\t\tHttpMethod.GET, request, String.class);\n\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\n\t\tString body = entity.getBody();\n\t\tassertThat(body).as(\"Body was null\").isNotNull();\n\t\tassertThat(body).contains(\"This application has no explicit mapping for /error\");\n\t}\n","date":"2019-09-25 10:53:50","endLine":143,"groupId":"10155","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHtmlErrorPage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/79/6d873bb3a27b13f5f064da14229387e2c86966.src","preCode":"\tvoid testHtmlErrorPage() {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));\n\t\tHttpEntity<?> request = new HttpEntity<Void>(headers);\n\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", getPassword()).exchange(\"/foo\",\n\t\t\t\tHttpMethod.GET, request, String.class);\n\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\n\t\tString body = entity.getBody();\n\t\tassertThat(body).as(\"Body was null\").isNotNull();\n\t\tassertThat(body).contains(\"This application has no explicit mapping for /error\");\n\t}\n","realPath":"spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/SampleActuatorApplicationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"f1ec810caf8c6f795f1119a818689d365c07ca93","commitMessage":"@@@Polish\n","date":"2019-09-25 10:53:50","modifiedFileCount":"10","status":"M","submitter":"Phillip Webb"}]
