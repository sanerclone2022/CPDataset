[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse()\n\t\t\tthrows Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.ABSENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.ABSENT);\n\t}\n","date":"2017-10-05 11:18:56","endLine":94,"groupId":"6957","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7d/3b4e2eabccef101270db806ba1156c8b9152b2.src","preCode":"\tpublic void containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse()\n\t\t\tthrows Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.ABSENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.ABSENT);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/FilteredConfigurationPropertiesSourceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty()\n\t\t\tthrows Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.PRESENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.UNKNOWN);\n\t}\n","date":"2017-10-05 11:18:56","endLine":107,"groupId":"6957","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7d/3b4e2eabccef101270db806ba1156c8b9152b2.src","preCode":"\tpublic void containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty()\n\t\t\tthrows Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.PRESENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.UNKNOWN);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/FilteredConfigurationPropertiesSourceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.ABSENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.ABSENT);\n\t}\n","date":"2017-12-12 18:57:30","endLine":92,"groupId":"6957","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/62/bff37b4b8123904c305c2e0c90093023b58a88.src","preCode":"\tpublic void containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse()\n\t\t\tthrows Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.ABSENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.ABSENT);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/FilteredConfigurationPropertiesSourceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.PRESENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.UNKNOWN);\n\t}\n","date":"2017-12-12 18:57:30","endLine":104,"groupId":"6957","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/62/bff37b4b8123904c305c2e0c90093023b58a88.src","preCode":"\tpublic void containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty()\n\t\t\tthrows Exception {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.PRESENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.UNKNOWN);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/FilteredConfigurationPropertiesSourceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-10-27 07:42:38","codes":[{"authorDate":"2018-10-27 07:42:38","commitOrder":3,"curCode":"\tpublic void containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\tAnswers.CALLS_REAL_METHODS);\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.ABSENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.ABSENT);\n\t}\n","date":"2018-10-27 07:42:38","endLine":87,"groupId":"14956","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8f/3d2d4d4b7ce4820e1ea02e0c07b439d2bc9437.src","preCode":"\tpublic void containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.ABSENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.ABSENT);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/FilteredConfigurationPropertiesSourceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2018-10-27 07:42:38","commitOrder":3,"curCode":"\tpublic void containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\tAnswers.CALLS_REAL_METHODS);\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.PRESENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.UNKNOWN);\n\t}\n","date":"2018-10-27 07:42:38","endLine":99,"groupId":"14956","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8f/3d2d4d4b7ce4820e1ea02e0c07b439d2bc9437.src","preCode":"\tpublic void containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class,\n\t\t\t\twithSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));\n\t\tgiven(source.containsDescendantOf(name))\n\t\t\t\t.willReturn(ConfigurationPropertyState.PRESENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name))\n\t\t\t\t.isEqualTo(ConfigurationPropertyState.UNKNOWN);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/FilteredConfigurationPropertiesSourceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"621eb85ad78ae860591ee2e15890f8696bc3d3fb","commitMessage":"@@@Merge pull request #14971 from dreis2211\n\n* pr/14971:\n  Polish mocks with default answer\n","date":"2018-10-27 07:42:38","modifiedFileCount":"5","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class, Answers.CALLS_REAL_METHODS);\n\t\tgiven(source.containsDescendantOf(name)).willReturn(ConfigurationPropertyState.ABSENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.ABSENT);\n\t}\n","date":"2019-06-07 19:25:54","endLine":80,"groupId":"101298","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/26/2dbf4d7d226ab43e59638dbd057a6fc625fd0e.src","preCode":"\tpublic void containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class, Answers.CALLS_REAL_METHODS);\n\t\tgiven(source.containsDescendantOf(name)).willReturn(ConfigurationPropertyState.ABSENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.ABSENT);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/FilteredConfigurationPropertiesSourceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class, Answers.CALLS_REAL_METHODS);\n\t\tgiven(source.containsDescendantOf(name)).willReturn(ConfigurationPropertyState.PRESENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.UNKNOWN);\n\t}\n","date":"2019-06-07 19:25:54","endLine":89,"groupId":"101298","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/26/2dbf4d7d226ab43e59638dbd057a6fc625fd0e.src","preCode":"\tpublic void containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty() {\n\t\tConfigurationPropertyName name = ConfigurationPropertyName.of(\"foo\");\n\t\tConfigurationPropertySource source = mock(ConfigurationPropertySource.class, Answers.CALLS_REAL_METHODS);\n\t\tgiven(source.containsDescendantOf(name)).willReturn(ConfigurationPropertyState.PRESENT);\n\t\tConfigurationPropertySource filtered = source.filter((n) -> true);\n\t\tassertThat(filtered.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.UNKNOWN);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/FilteredConfigurationPropertiesSourceTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
