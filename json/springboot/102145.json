[{"authorTime":"2018-08-22 21:41:02","codes":[{"authorDate":"2018-08-22 21:41:02","commitOrder":3,"curCode":"\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\n\t\tif (!CollectionUtils.isEmpty(this.taskSchedulerCustomizers)) {\n\t\t\tfor (TaskSchedulerCustomizer customizer : this.taskSchedulerCustomizers) {\n\t\t\t\tcustomizer.customize(taskScheduler);\n\t\t\t}\n\t\t}\n\t\treturn taskScheduler;\n\t}\n","date":"2018-08-22 21:41:02","endLine":179,"groupId":"15547","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(TtaskScheduler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ed/4f71916c7a380466966fd5a78258395d66a943.src","preCode":"\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\n\t\tif (!CollectionUtils.isEmpty(this.taskSchedulerCustomizers)) {\n\t\t\tfor (TaskSchedulerCustomizer customizer : this.taskSchedulerCustomizers) {\n\t\t\t\tcustomizer.customize(taskScheduler);\n\t\t\t}\n\t\t}\n\t\treturn taskScheduler;\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"MB"},{"authorDate":"2018-08-22 21:41:02","commitOrder":3,"curCode":"\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.threadNamePrefix).whenHasText()\n\t\t\t\t.to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\n\t\tif (!CollectionUtils.isEmpty(this.taskExecutorCustomizers)) {\n\t\t\tfor (TaskExecutorCustomizer customizer : this.taskExecutorCustomizers) {\n\t\t\t\tcustomizer.customize(taskExecutor);\n\t\t\t}\n\t\t}\n\t\treturn taskExecutor;\n\t}\n","date":"2018-08-22 21:41:02","endLine":298,"groupId":"14967","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(TtaskExecutor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2e/959f2864602fb25397295b18204a3f0a84ba9a.src","preCode":"\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.threadNamePrefix).whenHasText()\n\t\t\t\t.to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\n\t\tif (!CollectionUtils.isEmpty(this.taskExecutorCustomizers)) {\n\t\t\tfor (TaskExecutorCustomizer customizer : this.taskExecutorCustomizers) {\n\t\t\t\tcustomizer.customize(taskExecutor);\n\t\t\t}\n\t\t}\n\t\treturn taskExecutor;\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"MB"}],"commitId":"f9207dd9463ca4de51c7f9cddae4e2decfdb1d62","commitMessage":"@@@Merge pull request #13837 from nosan:polish-property-mapper\n\n* pr/13837:\n  Polish \"Add PropertyMapper.from(value)\"\n  Add PropertyMapper.from(value)\n","date":"2018-08-22 21:41:02","modifiedFileCount":"10","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-09-06 03:54:12","codes":[{"authorDate":"2018-09-06 03:54:12","commitOrder":4,"curCode":"\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskScheduler));\n\t\t}\n\t\treturn taskScheduler;\n\t}\n","date":"2018-09-06 03:54:20","endLine":166,"groupId":"15547","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(TtaskScheduler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ca/8b74613ce09165acbc7a8aac6cfdb6a65472e7.src","preCode":"\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\n\t\tif (!CollectionUtils.isEmpty(this.taskSchedulerCustomizers)) {\n\t\t\tfor (TaskSchedulerCustomizer customizer : this.taskSchedulerCustomizers) {\n\t\t\t\tcustomizer.customize(taskScheduler);\n\t\t\t}\n\t\t}\n\t\treturn taskScheduler;\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2018-09-06 03:54:12","commitOrder":4,"curCode":"\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.threadNamePrefix).whenHasText()\n\t\t\t\t.to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskExecutor));\n\t\t}\n\t\treturn taskExecutor;\n\t}\n","date":"2018-09-06 03:54:20","endLine":283,"groupId":"14967","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(TtaskExecutor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ec/ed7b6f95c3f08a349f399cb254f186fd8db2dc.src","preCode":"\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.threadNamePrefix).whenHasText()\n\t\t\t\t.to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\n\t\tif (!CollectionUtils.isEmpty(this.taskExecutorCustomizers)) {\n\t\t\tfor (TaskExecutorCustomizer customizer : this.taskExecutorCustomizers) {\n\t\t\t\tcustomizer.customize(taskExecutor);\n\t\t\t}\n\t\t}\n\t\treturn taskExecutor;\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"c3de4c84f24b4eb8c16eb6434dfeebc6b007b178","commitMessage":"@@@Polish\n","date":"2018-09-06 03:54:20","modifiedFileCount":"9","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-02-19 04:14:05","codes":[{"authorDate":"2019-02-19 04:14:05","commitOrder":5,"curCode":"\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.awaitTermination)\n\t\t\t\t.to(taskScheduler::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskScheduler::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskScheduler));\n\t\t}\n\t\treturn taskScheduler;\n\t}\n","date":"2019-02-19 04:14:05","endLine":209,"groupId":"8422","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(TtaskScheduler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/36/0b7852d0e0344b89fd746a07f76235d8bc2e73.src","preCode":"\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskScheduler));\n\t\t}\n\t\treturn taskScheduler;\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2019-02-19 04:14:05","commitOrder":5,"curCode":"\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.awaitTermination)\n\t\t\t\t.to(taskExecutor::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).whenHasText()\n\t\t\t\t.to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskExecutor));\n\t\t}\n\t\treturn taskExecutor;\n\t}\n","date":"2019-02-19 04:14:05","endLine":336,"groupId":"13947","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(TtaskExecutor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/13/b5919833bf75ac55dda87d57525ca23b778994.src","preCode":"\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.threadNamePrefix).whenHasText()\n\t\t\t\t.to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskExecutor));\n\t\t}\n\t\treturn taskExecutor;\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"}],"commitId":"35fc9297cdc3209884b52bd5983daf296dce48c7","commitMessage":"@@@Merge pull request #15951 from filiphr\n\n* pr/15951:\n  Add support for task scheduling shutdown related properties\n  Polish \"Add support for task executor shutdown related properties\"\n  Add support for task executor shutdown related properties\n","date":"2019-02-19 04:14:05","modifiedFileCount":"10","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2020-07-28 16:15:26","codes":[{"authorDate":"2019-02-19 04:14:05","commitOrder":6,"curCode":"\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.awaitTermination)\n\t\t\t\t.to(taskScheduler::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskScheduler::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskScheduler));\n\t\t}\n\t\treturn taskScheduler;\n\t}\n","date":"2019-02-19 04:14:05","endLine":209,"groupId":"102145","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(TtaskScheduler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/36/0b7852d0e0344b89fd746a07f76235d8bc2e73.src","preCode":"\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.awaitTermination)\n\t\t\t\t.to(taskScheduler::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskScheduler::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskScheduler));\n\t\t}\n\t\treturn taskScheduler;\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"N"},{"authorDate":"2020-07-28 16:15:26","commitOrder":6,"curCode":"\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds).to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.awaitTermination).to(taskExecutor::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).as(Duration::toMillis).to(taskExecutor::setAwaitTerminationMillis);\n\t\tmap.from(this.threadNamePrefix).whenHasText().to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskExecutor));\n\t\t}\n\t\treturn taskExecutor;\n\t}\n","date":"2020-07-28 16:15:26","endLine":318,"groupId":"102145","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(TtaskExecutor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/94/996b1a1244cb7c20f7bf84dc03d445b8a089a3.src","preCode":"\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds).to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.awaitTermination).to(taskExecutor::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds).to(taskExecutor::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).whenHasText().to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskExecutor));\n\t\t}\n\t\treturn taskExecutor;\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"273718c7dfb3980a34131f22059e3f6dbd5e8cb5","commitMessage":"@@@Merge branch '2.3.x'\n\nCloses gh-22612\n","date":"2020-07-28 16:15:26","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"}]
