[{"authorTime":"2019-03-13 19:53:23","codes":[{"authorDate":"2018-11-26 19:30:29","commitOrder":2,"curCode":"\tpublic void asyncRequestThatThrowsUncheckedException() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/completableFutureException\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer()\n\t\t\t\t.activeTasks()).isEqualTo(1);\n\t\tassertThatExceptionOfType(NestedServletException.class)\n\t\t\t\t.isThrownBy(() -> this.mvc.perform(asyncDispatch(result)))\n\t\t\t\t.withRootCauseInstanceOf(RuntimeException.class);\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer()\n\t\t\t\t.activeTasks()).isEqualTo(0);\n\t}\n","date":"2018-11-26 19:41:55","endLine":97,"groupId":"8879","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncRequestThatThrowsUncheckedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/03/6e6f82e49f70bfce72d2accdf6b9f3826d9b0f.src","preCode":"\tpublic void asyncRequestThatThrowsUncheckedException() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/completableFutureException\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer()\n\t\t\t\t.activeTasks()).isEqualTo(1);\n\t\tassertThatExceptionOfType(NestedServletException.class)\n\t\t\t\t.isThrownBy(() -> this.mvc.perform(asyncDispatch(result)))\n\t\t\t\t.withRootCauseInstanceOf(RuntimeException.class);\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer()\n\t\t\t\t.activeTasks()).isEqualTo(0);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/servlet/LongTaskTimingHandlerInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"NB"},{"authorDate":"2019-03-13 19:53:23","commitOrder":2,"curCode":"\tpublic void streamingError() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/streamingError\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThatCode(\n\t\t\t\t() -> this.mvc.perform(asyncDispatch(result)).andExpect(status().isOk()));\n\t\tassertThat(this.registry.get(\"http.server.requests\")\n\t\t\t\t.tags(\"exception\", \"IOException\").timer().count()).isEqualTo(1L);\n\t}\n","date":"2019-03-13 19:53:23","endLine":200,"groupId":"9992","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"streamingError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/80/fef89e8bdd21d7e4e55b6b968f898207b166c5.src","preCode":"\tpublic void streamingError() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/streamingError\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThatCode(\n\t\t\t\t() -> this.mvc.perform(asyncDispatch(result)).andExpect(status().isOk()));\n\t\tassertThat(this.registry.get(\"http.server.requests\")\n\t\t\t\t.tags(\"exception\", \"IOException\").timer().count()).isEqualTo(1L);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"B"}],"commitId":"5a66dc8c6e439d17a5ac859ad572e5732dbb2d78","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-03-13 19:53:23","modifiedFileCount":"2","status":"M","submitter":"Brian Clozel"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid asyncRequestThatThrowsUncheckedException() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/completableFutureException\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(1);\n\t\tassertThatExceptionOfType(NestedServletException.class)\n\t\t\t\t.isThrownBy(() -> this.mvc.perform(asyncDispatch(result)))\n\t\t\t\t.withRootCauseInstanceOf(RuntimeException.class);\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(0);\n\t}\n","date":"2019-06-07 19:25:54","endLine":95,"groupId":"8879","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncRequestThatThrowsUncheckedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8e/59bbbb0261def1673b4997345e881d812db6ed.src","preCode":"\tpublic void asyncRequestThatThrowsUncheckedException() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/completableFutureException\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(1);\n\t\tassertThatExceptionOfType(NestedServletException.class)\n\t\t\t\t.isThrownBy(() -> this.mvc.perform(asyncDispatch(result)))\n\t\t\t\t.withRootCauseInstanceOf(RuntimeException.class);\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(0);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/servlet/LongTaskTimingHandlerInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid streamingError() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/streamingError\")).andExpect(request().asyncStarted())\n\t\t\t\t.andReturn();\n\t\tassertThatCode(() -> this.mvc.perform(asyncDispatch(result)).andExpect(status().isOk()));\n\t\tassertThat(this.registry.get(\"http.server.requests\").tags(\"exception\", \"IOException\").timer().count())\n\t\t\t\t.isEqualTo(1L);\n\t}\n","date":"2019-06-07 19:25:54","endLine":192,"groupId":"9992","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"streamingError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/cf/7776aeaab90b826bdfe79e557e4d49db8efd35.src","preCode":"\tpublic void streamingError() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/streamingError\")).andExpect(request().asyncStarted())\n\t\t\t\t.andReturn();\n\t\tassertThatCode(() -> this.mvc.perform(asyncDispatch(result)).andExpect(status().isOk()));\n\t\tassertThat(this.registry.get(\"http.server.requests\").tags(\"exception\", \"IOException\").timer().count())\n\t\t\t\t.isEqualTo(1L);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-08-03 21:28:47","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid asyncRequestThatThrowsUncheckedException() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/completableFutureException\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(1);\n\t\tassertThatExceptionOfType(NestedServletException.class)\n\t\t\t\t.isThrownBy(() -> this.mvc.perform(asyncDispatch(result)))\n\t\t\t\t.withRootCauseInstanceOf(RuntimeException.class);\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(0);\n\t}\n","date":"2019-06-07 19:25:54","endLine":95,"groupId":"8879","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncRequestThatThrowsUncheckedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8e/59bbbb0261def1673b4997345e881d812db6ed.src","preCode":"\tvoid asyncRequestThatThrowsUncheckedException() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/completableFutureException\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(1);\n\t\tassertThatExceptionOfType(NestedServletException.class)\n\t\t\t\t.isThrownBy(() -> this.mvc.perform(asyncDispatch(result)))\n\t\t\t\t.withRootCauseInstanceOf(RuntimeException.class);\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(0);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/servlet/LongTaskTimingHandlerInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2019-08-03 21:28:47","commitOrder":4,"curCode":"\tvoid streamingError() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/streamingError\")).andExpect(request().asyncStarted())\n\t\t\t\t.andReturn();\n\t\tthis.mvc.perform(asyncDispatch(result)).andExpect(status().isOk());\n\t\tassertThat(this.registry.get(\"http.server.requests\").tags(\"exception\", \"IOException\").timer().count())\n\t\t\t\t.isEqualTo(1L);\n\t}\n","date":"2019-08-03 21:29:20","endLine":192,"groupId":"1881","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"streamingError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4d/967751378004b3be0792825348d33c18460d95.src","preCode":"\tvoid streamingError() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/streamingError\")).andExpect(request().asyncStarted())\n\t\t\t\t.andReturn();\n\t\tassertThatCode(() -> this.mvc.perform(asyncDispatch(result)).andExpect(status().isOk()));\n\t\tassertThat(this.registry.get(\"http.server.requests\").tags(\"exception\", \"IOException\").timer().count())\n\t\t\t\t.isEqualTo(1L);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"2cdceb92bf1d92dae38972de30dd4c485832d6b5","commitMessage":"@@@Polish\n","date":"2019-08-03 21:29:20","modifiedFileCount":"4","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-08-03 22:42:22","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid asyncRequestThatThrowsUncheckedException() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/completableFutureException\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(1);\n\t\tassertThatExceptionOfType(NestedServletException.class)\n\t\t\t\t.isThrownBy(() -> this.mvc.perform(asyncDispatch(result)))\n\t\t\t\t.withRootCauseInstanceOf(RuntimeException.class);\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(0);\n\t}\n","date":"2019-06-07 19:25:54","endLine":95,"groupId":"10514","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncRequestThatThrowsUncheckedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8e/59bbbb0261def1673b4997345e881d812db6ed.src","preCode":"\tvoid asyncRequestThatThrowsUncheckedException() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/completableFutureException\"))\n\t\t\t\t.andExpect(request().asyncStarted()).andReturn();\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(1);\n\t\tassertThatExceptionOfType(NestedServletException.class)\n\t\t\t\t.isThrownBy(() -> this.mvc.perform(asyncDispatch(result)))\n\t\t\t\t.withRootCauseInstanceOf(RuntimeException.class);\n\t\tassertThat(this.registry.get(\"my.long.request.exception\").longTaskTimer().activeTasks()).isEqualTo(0);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/servlet/LongTaskTimingHandlerInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2019-08-03 22:42:22","commitOrder":5,"curCode":"\tvoid streamingError() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/streamingError\")).andExpect(request().asyncStarted())\n\t\t\t\t.andReturn();\n\t\tassertThatIOException().isThrownBy(() -> this.mvc.perform(asyncDispatch(result)).andReturn());\n\t\tassertThat(this.registry.get(\"http.server.requests\").tags(\"exception\", \"IOException\").timer().count())\n\t\t\t\t.isEqualTo(1L);\n\t}\n","date":"2019-08-03 22:42:22","endLine":193,"groupId":"10514","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"streamingError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/43/8ab654521b9fcfa44312e6208e14f1369014c8.src","preCode":"\tvoid streamingError() throws Exception {\n\t\tMvcResult result = this.mvc.perform(get(\"/api/c1/streamingError\")).andExpect(request().asyncStarted())\n\t\t\t\t.andReturn();\n\t\tthis.mvc.perform(asyncDispatch(result)).andExpect(status().isOk());\n\t\tassertThat(this.registry.get(\"http.server.requests\").tags(\"exception\", \"IOException\").timer().count())\n\t\t\t\t.isEqualTo(1L);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"105df823ee2445e04c4e1e0968f72f8a936ef00b","commitMessage":"@@@Polish\n","date":"2019-08-03 22:42:22","modifiedFileCount":"2","status":"M","submitter":"Phillip Webb"}]
