[{"authorTime":"2018-05-11 23:52:29","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":4,"curCode":"\tpublic void bindToBeanWithNestedCollectionShouldPopulateCollection() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"one\");\n\t\tsource.put(\"foo.foos[0].value\", \"two\");\n\t\tsource.put(\"foo.foos[1].value\", \"three\");\n\t\tthis.sources.add(source);\n\t\tBindable<BeanWithNestedCollection> target = Bindable\n\t\t\t\t.of(BeanWithNestedCollection.class);\n\t\tBeanWithNestedCollection foo = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(foo.getValue()).isEqualTo(\"one\");\n\t\tassertThat(foo.getFoos().get(0).getValue()).isEqualTo(\"two\");\n\t\tassertThat(foo.getFoos().get(1).getValue()).isEqualTo(\"three\");\n\t}\n","date":"2017-12-12 18:57:30","endLine":354,"groupId":"15629","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToBeanWithNestedCollectionShouldPopulateCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/91/2409782fa790c57241a30e2b054fa4da84ba1b.src","preCode":"\tpublic void bindToBeanWithNestedCollectionShouldPopulateCollection() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"one\");\n\t\tsource.put(\"foo.foos[0].value\", \"two\");\n\t\tsource.put(\"foo.foos[1].value\", \"three\");\n\t\tthis.sources.add(source);\n\t\tBindable<BeanWithNestedCollection> target = Bindable\n\t\t\t\t.of(BeanWithNestedCollection.class);\n\t\tBeanWithNestedCollection foo = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(foo.getValue()).isEqualTo(\"one\");\n\t\tassertThat(foo.getFoos().get(0).getValue()).isEqualTo(\"two\");\n\t\tassertThat(foo.getFoos().get(1).getValue()).isEqualTo(\"three\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"NB"},{"authorDate":"2018-05-11 23:52:29","commitOrder":4,"curCode":"\tpublic void bindToNestedCollectionWhenEmptyStringShouldReturnEmptyCollection() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"one\");\n\t\tsource.put(\"foo.foos\", \"\");\n\t\tthis.sources.add(source);\n\t\tBindable<BeanWithNestedCollection> target = Bindable\n\t\t\t\t.of(BeanWithNestedCollection.class);\n\t\tBeanWithNestedCollection foo = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(foo.getValue()).isEqualTo(\"one\");\n\t\tassertThat(foo.getFoos()).isEmpty();\n\t}\n","date":"2018-05-11 23:52:29","endLine":377,"groupId":"10224","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToNestedCollectionWhenEmptyStringShouldReturnEmptyCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/da/407edb73f11abacdcf107b9b3f898d61029e0a.src","preCode":"\tpublic void bindToNestedCollectionWhenEmptyStringShouldReturnEmptyCollection() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"one\");\n\t\tsource.put(\"foo.foos\", \"\");\n\t\tthis.sources.add(source);\n\t\tBindable<BeanWithNestedCollection> target = Bindable\n\t\t\t\t.of(BeanWithNestedCollection.class);\n\t\tBeanWithNestedCollection foo = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(foo.getValue()).isEqualTo(\"one\");\n\t\tassertThat(foo.getFoos()).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"B"}],"commitId":"efda5ef3acdbdf3d7d33e5dd5215dd92fedfd733","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-05-11 23:52:29","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid bindToBeanWithNestedCollectionShouldPopulateCollection() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"one\");\n\t\tsource.put(\"foo.foos[0].value\", \"two\");\n\t\tsource.put(\"foo.foos[1].value\", \"three\");\n\t\tthis.sources.add(source);\n\t\tBindable<BeanWithNestedCollection> target = Bindable.of(BeanWithNestedCollection.class);\n\t\tBeanWithNestedCollection foo = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(foo.getValue()).isEqualTo(\"one\");\n\t\tassertThat(foo.getFoos().get(0).getValue()).isEqualTo(\"two\");\n\t\tassertThat(foo.getFoos().get(1).getValue()).isEqualTo(\"three\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":360,"groupId":"101415","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToBeanWithNestedCollectionShouldPopulateCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/022252c53b76e3ffcb116feb8baa62bd6611cf.src","preCode":"\tpublic void bindToBeanWithNestedCollectionShouldPopulateCollection() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"one\");\n\t\tsource.put(\"foo.foos[0].value\", \"two\");\n\t\tsource.put(\"foo.foos[1].value\", \"three\");\n\t\tthis.sources.add(source);\n\t\tBindable<BeanWithNestedCollection> target = Bindable.of(BeanWithNestedCollection.class);\n\t\tBeanWithNestedCollection foo = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(foo.getValue()).isEqualTo(\"one\");\n\t\tassertThat(foo.getFoos().get(0).getValue()).isEqualTo(\"two\");\n\t\tassertThat(foo.getFoos().get(1).getValue()).isEqualTo(\"three\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid bindToNestedCollectionWhenEmptyStringShouldReturnEmptyCollection() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"one\");\n\t\tsource.put(\"foo.foos\", \"\");\n\t\tthis.sources.add(source);\n\t\tBindable<BeanWithNestedCollection> target = Bindable.of(BeanWithNestedCollection.class);\n\t\tBeanWithNestedCollection foo = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(foo.getValue()).isEqualTo(\"one\");\n\t\tassertThat(foo.getFoos()).isEmpty();\n\t}\n","date":"2019-06-07 19:25:54","endLine":372,"groupId":"101415","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToNestedCollectionWhenEmptyStringShouldReturnEmptyCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/022252c53b76e3ffcb116feb8baa62bd6611cf.src","preCode":"\tpublic void bindToNestedCollectionWhenEmptyStringShouldReturnEmptyCollection() {\n\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n\t\tsource.put(\"foo.value\", \"one\");\n\t\tsource.put(\"foo.foos\", \"\");\n\t\tthis.sources.add(source);\n\t\tBindable<BeanWithNestedCollection> target = Bindable.of(BeanWithNestedCollection.class);\n\t\tBeanWithNestedCollection foo = this.binder.bind(\"foo\", target).get();\n\t\tassertThat(foo.getValue()).isEqualTo(\"one\");\n\t\tassertThat(foo.getFoos()).isEmpty();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
