[{"authorTime":"2019-09-20 03:34:11","codes":[{"authorDate":"2019-09-20 03:34:11","commitOrder":1,"curCode":"\tvoid getAllReturnsAll() {\n\t\ttry (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n\t\t\t\tNonAnnotatedComponent.class, AnnotatedComponent.class, AnnotatedBeanConfiguration.class)) {\n\t\t\tMap<String, ConfigurationPropertiesBean> all = ConfigurationPropertiesBean.getAll(context);\n\t\t\tassertThat(all).containsOnlyKeys(\"annotatedComponent\", \"annotatedBean\");\n\t\t\tConfigurationPropertiesBean component = all.get(\"annotatedComponent\");\n\t\t\tassertThat(component.getName()).isEqualTo(\"annotatedComponent\");\n\t\t\tassertThat(component.getInstance()).isInstanceOf(AnnotatedComponent.class);\n\t\t\tassertThat(component.getAnnotation()).isNotNull();\n\t\t\tConfigurationPropertiesBean bean = all.get(\"annotatedBean\");\n\t\t\tassertThat(bean.getName()).isEqualTo(\"annotatedBean\");\n\t\t\tassertThat(bean.getInstance()).isInstanceOf(AnnotatedBean.class);\n\t\t\tassertThat(bean.getAnnotation()).isNotNull();\n\t\t}\n\t}\n","date":"2019-09-21 04:42:33","endLine":55,"groupId":"11796","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllReturnsAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/df/ea006eac45d2950ae41b84830d9f3dea619b4d.src","preCode":"\tvoid getAllReturnsAll() {\n\t\ttry (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n\t\t\t\tNonAnnotatedComponent.class, AnnotatedComponent.class, AnnotatedBeanConfiguration.class)) {\n\t\t\tMap<String, ConfigurationPropertiesBean> all = ConfigurationPropertiesBean.getAll(context);\n\t\t\tassertThat(all).containsOnlyKeys(\"annotatedComponent\", \"annotatedBean\");\n\t\t\tConfigurationPropertiesBean component = all.get(\"annotatedComponent\");\n\t\t\tassertThat(component.getName()).isEqualTo(\"annotatedComponent\");\n\t\t\tassertThat(component.getInstance()).isInstanceOf(AnnotatedComponent.class);\n\t\t\tassertThat(component.getAnnotation()).isNotNull();\n\t\t\tConfigurationPropertiesBean bean = all.get(\"annotatedBean\");\n\t\t\tassertThat(bean.getName()).isEqualTo(\"annotatedBean\");\n\t\t\tassertThat(bean.getInstance()).isInstanceOf(AnnotatedBean.class);\n\t\t\tassertThat(bean.getAnnotation()).isNotNull();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"},{"authorDate":"2019-09-20 03:34:11","commitOrder":1,"curCode":"\tvoid getWhenFactoryMethodIsAnnotatedReturnsBean() throws Throwable {\n\t\tget(NonAnnotatedBeanConfiguration.class, \"nonAnnotatedBean\", (propertiesBean) -> {\n\t\t\tassertThat(propertiesBean).isNotNull();\n\t\t\tassertThat(propertiesBean.getName()).isEqualTo(\"nonAnnotatedBean\");\n\t\t\tassertThat(propertiesBean.getInstance()).isInstanceOf(NonAnnotatedBean.class);\n\t\t\tassertThat(propertiesBean.getAnnotation().prefix()).isEqualTo(\"prefix\");\n\t\t});\n\t}\n","date":"2019-09-21 04:42:33","endLine":81,"groupId":"11306","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getWhenFactoryMethodIsAnnotatedReturnsBean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/df/ea006eac45d2950ae41b84830d9f3dea619b4d.src","preCode":"\tvoid getWhenFactoryMethodIsAnnotatedReturnsBean() throws Throwable {\n\t\tget(NonAnnotatedBeanConfiguration.class, \"nonAnnotatedBean\", (propertiesBean) -> {\n\t\t\tassertThat(propertiesBean).isNotNull();\n\t\t\tassertThat(propertiesBean.getName()).isEqualTo(\"nonAnnotatedBean\");\n\t\t\tassertThat(propertiesBean.getInstance()).isInstanceOf(NonAnnotatedBean.class);\n\t\t\tassertThat(propertiesBean.getAnnotation().prefix()).isEqualTo(\"prefix\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"221ff0ff6de8bd9557f3fb6d7b336a188b2dd224","commitMessage":"@@@Polish configuration property bean classes\n\nRefactor the `org.springframework.boot.actuate.context` package\nwith the following changes:\n\n- Deprecate several classes which would ideally be internal\n\n- Replace `ConfigurationBeanFactoryMetadata` with a new\n  `ConfigurationPropertiesBean` class to better reflect that we no\n  longer maintain meta-data directly.\n\n- Use constructor injection and final fields whenever possible\n\n- Rename `ConfiguraionPropertiesBeanDefinition` to\n  `ConfigurationPropertiesValueObjectBeanDefinition` to align\n  with the binder changes made in commit 0b3015e4ff\n\n- Add additional tests\n\nCloses gh-16903\n","date":"2019-09-21 04:42:33","modifiedFileCount":"14","status":"B","submitter":"Phillip Webb"},{"authorTime":"2019-10-02 08:09:02","codes":[{"authorDate":"2019-10-02 08:09:02","commitOrder":2,"curCode":"\tvoid getAllReturnsAll() {\n\t\ttry (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n\t\t\t\tNonAnnotatedComponent.class, AnnotatedComponent.class, AnnotatedBeanConfiguration.class,\n\t\t\t\tValueObjectConfiguration.class)) {\n\t\t\tMap<String, ConfigurationPropertiesBean> all = ConfigurationPropertiesBean.getAll(context);\n\t\t\tassertThat(all).containsOnlyKeys(\"annotatedComponent\", \"annotatedBean\", ValueObject.class.getName());\n\t\t\tConfigurationPropertiesBean component = all.get(\"annotatedComponent\");\n\t\t\tassertThat(component.getName()).isEqualTo(\"annotatedComponent\");\n\t\t\tassertThat(component.getInstance()).isInstanceOf(AnnotatedComponent.class);\n\t\t\tassertThat(component.getAnnotation()).isNotNull();\n\t\t\tassertThat(component.getType()).isEqualTo(AnnotatedComponent.class);\n\t\t\tassertThat(component.getBindMethod()).isEqualTo(BindMethod.JAVA_BEAN);\n\t\t\tConfigurationPropertiesBean bean = all.get(\"annotatedBean\");\n\t\t\tassertThat(bean.getName()).isEqualTo(\"annotatedBean\");\n\t\t\tassertThat(bean.getInstance()).isInstanceOf(AnnotatedBean.class);\n\t\t\tassertThat(bean.getType()).isEqualTo(AnnotatedBean.class);\n\t\t\tassertThat(bean.getAnnotation()).isNotNull();\n\t\t\tassertThat(bean.getBindMethod()).isEqualTo(BindMethod.JAVA_BEAN);\n\t\t\tConfigurationPropertiesBean valueObject = all.get(ValueObject.class.getName());\n\t\t\tassertThat(valueObject.getName()).isEqualTo(ValueObject.class.getName());\n\t\t\tassertThat(valueObject.getInstance()).isInstanceOf(ValueObject.class);\n\t\t\tassertThat(valueObject.getType()).isEqualTo(ValueObject.class);\n\t\t\tassertThat(valueObject.getAnnotation()).isNotNull();\n\t\t\tassertThat(valueObject.getBindMethod()).isEqualTo(BindMethod.VALUE_OBJECT);\n\t\t}\n\t}\n","date":"2019-10-02 12:56:09","endLine":70,"groupId":"101261","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllReturnsAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b1/dd46968dd4c454de39d9feb0970fcf0ffad13a.src","preCode":"\tvoid getAllReturnsAll() {\n\t\ttry (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n\t\t\t\tNonAnnotatedComponent.class, AnnotatedComponent.class, AnnotatedBeanConfiguration.class)) {\n\t\t\tMap<String, ConfigurationPropertiesBean> all = ConfigurationPropertiesBean.getAll(context);\n\t\t\tassertThat(all).containsOnlyKeys(\"annotatedComponent\", \"annotatedBean\");\n\t\t\tConfigurationPropertiesBean component = all.get(\"annotatedComponent\");\n\t\t\tassertThat(component.getName()).isEqualTo(\"annotatedComponent\");\n\t\t\tassertThat(component.getInstance()).isInstanceOf(AnnotatedComponent.class);\n\t\t\tassertThat(component.getAnnotation()).isNotNull();\n\t\t\tConfigurationPropertiesBean bean = all.get(\"annotatedBean\");\n\t\t\tassertThat(bean.getName()).isEqualTo(\"annotatedBean\");\n\t\t\tassertThat(bean.getInstance()).isInstanceOf(AnnotatedBean.class);\n\t\t\tassertThat(bean.getAnnotation()).isNotNull();\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-10-02 08:09:02","commitOrder":2,"curCode":"\tvoid getWhenFactoryMethodIsAnnotatedReturnsBean() throws Throwable {\n\t\tget(NonAnnotatedBeanConfiguration.class, \"nonAnnotatedBean\", (propertiesBean) -> {\n\t\t\tassertThat(propertiesBean).isNotNull();\n\t\t\tassertThat(propertiesBean.getName()).isEqualTo(\"nonAnnotatedBean\");\n\t\t\tassertThat(propertiesBean.getInstance()).isInstanceOf(NonAnnotatedBean.class);\n\t\t\tassertThat(propertiesBean.getType()).isEqualTo(NonAnnotatedBean.class);\n\t\t\tassertThat(propertiesBean.getAnnotation().prefix()).isEqualTo(\"prefix\");\n\t\t\tassertThat(propertiesBean.getBindMethod()).isEqualTo(BindMethod.JAVA_BEAN);\n\t\t});\n\t}\n","date":"2019-10-02 12:56:09","endLine":100,"groupId":"101261","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getWhenFactoryMethodIsAnnotatedReturnsBean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b1/dd46968dd4c454de39d9feb0970fcf0ffad13a.src","preCode":"\tvoid getWhenFactoryMethodIsAnnotatedReturnsBean() throws Throwable {\n\t\tget(NonAnnotatedBeanConfiguration.class, \"nonAnnotatedBean\", (propertiesBean) -> {\n\t\t\tassertThat(propertiesBean).isNotNull();\n\t\t\tassertThat(propertiesBean.getName()).isEqualTo(\"nonAnnotatedBean\");\n\t\t\tassertThat(propertiesBean.getInstance()).isInstanceOf(NonAnnotatedBean.class);\n\t\t\tassertThat(propertiesBean.getAnnotation().prefix()).isEqualTo(\"prefix\");\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"e41c5a43273cab9dc2ce0c1c1e86ca7c633634c8","commitMessage":"@@@Require annotation signal for constructor binding\n\nUpdate `@ConfigurationProperties` constructor binding support to only\napply when a `@ConstructorBinding` annotation is present on either the\ntype or the specific constructor to use.\n\nPrior to this commit we didn't have a good way to tell when constructor\nbinding should be used vs regular autowiring.\n\nFor convenience.  an `@ImmutableConfigurationProperties` meta-annotation\nhas also been added which is composed of `@ConfigurationProperties` and\n`@ConstructorBinding`.\n\nCloses gh-18469\n","date":"2019-10-02 12:56:09","modifiedFileCount":"20","status":"M","submitter":"Phillip Webb"}]
