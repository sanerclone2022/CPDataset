[{"authorTime":"2020-02-19 22:42:13","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":7,"curCode":"\tvoid autoConfiguresTomcatMetricsWithEmbeddedReactiveTomcat() {\n\t\tresetTomcatState();\n\t\tnew ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class,\n\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class, MeterRegistryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"server.tomcat.mbeanregistry.enabled=true\").run((context) -> {\n\t\t\t\t\tcontext.publishEvent(new ApplicationStartedEvent(new SpringApplication(), null,\n\t\t\t\t\t\t\tcontext.getSourceApplicationContext()));\n\t\t\t\t\tSimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\tassertThat(registry.find(\"tomcat.sessions.active.max\").meter()).isNotNull();\n\t\t\t\t\tassertThat(registry.find(\"tomcat.threads.current\").meter()).isNotNull();\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":87,"groupId":"5515","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"autoConfiguresTomcatMetricsWithEmbeddedReactiveTomcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/90/909ea787ba051710a3503ac83821bdf20f4763.src","preCode":"\tvoid autoConfiguresTomcatMetricsWithEmbeddedReactiveTomcat() {\n\t\tresetTomcatState();\n\t\tnew ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class,\n\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class, MeterRegistryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"server.tomcat.mbeanregistry.enabled=true\").run((context) -> {\n\t\t\t\t\tcontext.publishEvent(new ApplicationStartedEvent(new SpringApplication(), null,\n\t\t\t\t\t\t\tcontext.getSourceApplicationContext()));\n\t\t\t\t\tSimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\tassertThat(registry.find(\"tomcat.sessions.active.max\").meter()).isNotNull();\n\t\t\t\t\tassertThat(registry.find(\"tomcat.threads.current\").meter()).isNotNull();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"NB"},{"authorDate":"2020-02-19 22:42:13","commitOrder":7,"curCode":"\tvoid honorsUsersEnableR2dbcRepositoriesConfiguration() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(R2dbcAutoConfiguration.class, R2dbcDataAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(DatabaseInitializationConfiguration.class, EnableRepositoriesConfiguration.class)\n\t\t\t\t.withPropertyValues(\"spring.r2dbc.generate-unique-name:true\").run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(CityRepository.class);\n\t\t\t\t\tcontext.getBean(CityRepository.class).findById(2000L).as(StepVerifier::create).expectNextCount(1)\n\t\t\t\t\t\t\t.verifyComplete();\n\t\t\t\t});\n\t}\n","date":"2020-02-25 22:14:08","endLine":98,"groupId":"11446","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"honorsUsersEnableR2dbcRepositoriesConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1e/b702dd5f09ebb23067bf992ebe5a3d2d01f723.src","preCode":"\tvoid honorsUsersEnableR2dbcRepositoriesConfiguration() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(R2dbcAutoConfiguration.class, R2dbcDataAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(DatabaseInitializationConfiguration.class, EnableRepositoriesConfiguration.class)\n\t\t\t\t.withPropertyValues(\"spring.r2dbc.generate-unique-name:true\").run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(CityRepository.class);\n\t\t\t\t\tcontext.getBean(CityRepository.class).findById(2000L).as(StepVerifier::create).expectNextCount(1)\n\t\t\t\t\t\t\t.verifyComplete();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/r2dbc/R2dbcRepositoriesAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"19fbac7d591de5f7616b26e6127926e77143cf8b","commitMessage":"@@@Add auto-configuration for Spring Data R2DBC\n\nThis commit adds auto-configuration support for Spring Data R2DBC. If a\n`ConnectionFactory` and Spring Data are available.  scanning of reactive\nrepositories is enabled.\n\nThis commit also adds a starter to bring R2DBC and the necessary Spring\nData libraries.\n\nSee gh-19988\n\nCo-authored-by: Mark Paluch <mpaluch@pivotal.io>\nCo-authored-by: Oliver Drotbohm <odrotbohm@pivotal.io>\n","date":"2020-02-25 22:14:08","modifiedFileCount":"1","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2020-02-19 22:42:13","codes":[{"authorDate":"2021-09-16 20:08:56","commitOrder":8,"curCode":"\tvoid autoConfiguresTomcatMetricsWithEmbeddedReactiveTomcat() {\n\t\tresetTomcatState();\n\t\tnew ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class,\n\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class, MeterRegistryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"server.tomcat.mbeanregistry.enabled=true\").run((context) -> {\n\t\t\t\t\tcontext.publishEvent(createApplicationStartedEvent(context.getSourceApplicationContext()));\n\t\t\t\t\tSimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\tassertThat(registry.find(\"tomcat.sessions.active.max\").meter()).isNotNull();\n\t\t\t\t\tassertThat(registry.find(\"tomcat.threads.current\").meter()).isNotNull();\n\t\t\t\t});\n\t}\n","date":"2021-09-16 20:08:57","endLine":86,"groupId":"10921","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"autoConfiguresTomcatMetricsWithEmbeddedReactiveTomcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e9/5cda900ab4d1b34c6f89a8f240b23097d0e463.src","preCode":"\tvoid autoConfiguresTomcatMetricsWithEmbeddedReactiveTomcat() {\n\t\tresetTomcatState();\n\t\tnew ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class,\n\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class, MeterRegistryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"server.tomcat.mbeanregistry.enabled=true\").run((context) -> {\n\t\t\t\t\tcontext.publishEvent(new ApplicationStartedEvent(new SpringApplication(), null,\n\t\t\t\t\t\t\tcontext.getSourceApplicationContext()));\n\t\t\t\t\tSimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\tassertThat(registry.find(\"tomcat.sessions.active.max\").meter()).isNotNull();\n\t\t\t\t\tassertThat(registry.find(\"tomcat.threads.current\").meter()).isNotNull();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2020-02-19 22:42:13","commitOrder":8,"curCode":"\tvoid honorsUsersEnableR2dbcRepositoriesConfiguration() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(R2dbcAutoConfiguration.class, R2dbcDataAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(DatabaseInitializationConfiguration.class, EnableRepositoriesConfiguration.class)\n\t\t\t\t.withPropertyValues(\"spring.r2dbc.generate-unique-name:true\").run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(CityRepository.class);\n\t\t\t\t\tcontext.getBean(CityRepository.class).findById(2000L).as(StepVerifier::create).expectNextCount(1)\n\t\t\t\t\t\t\t.verifyComplete();\n\t\t\t\t});\n\t}\n","date":"2020-02-25 22:14:08","endLine":98,"groupId":"10921","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"honorsUsersEnableR2dbcRepositoriesConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1e/b702dd5f09ebb23067bf992ebe5a3d2d01f723.src","preCode":"\tvoid honorsUsersEnableR2dbcRepositoriesConfiguration() {\n\t\tthis.contextRunner\n\t\t\t\t.withConfiguration(\n\t\t\t\t\t\tAutoConfigurations.of(R2dbcAutoConfiguration.class, R2dbcDataAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(DatabaseInitializationConfiguration.class, EnableRepositoriesConfiguration.class)\n\t\t\t\t.withPropertyValues(\"spring.r2dbc.generate-unique-name:true\").run((context) -> {\n\t\t\t\t\tassertThat(context).hasSingleBean(CityRepository.class);\n\t\t\t\t\tcontext.getBean(CityRepository.class).findById(2000L).as(StepVerifier::create).expectNextCount(1)\n\t\t\t\t\t\t\t.verifyComplete();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/r2dbc/R2dbcRepositoriesAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"ce95e093087d591626762089095705826b5adab8","commitMessage":"@@@Merge pull request #27878 from bono007\n\n* pr/27878:\n  Polish \"Add startup time metrics\"\n  Add startup time metrics\n\nCloses gh-27878\n","date":"2021-09-16 20:08:57","modifiedFileCount":"15","status":"M","submitter":"Stephane Nicoll"}]
