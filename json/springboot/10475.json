[{"authorTime":"2018-05-14 23:42:15","codes":[{"authorDate":"2018-05-14 23:42:15","commitOrder":2,"curCode":"\tpublic void invokeShouldInvokeJmxOperationWithBeanClassLoader()\n\t\t\tthrows ReflectionException, MBeanException {\n\t\tClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();\n\t\tTestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(\n\t\t\t\tnew TestJmxOperation((arguments) -> ClassUtils.getDefaultClassLoader()));\n\t\tURLClassLoader beanClassLoader = new URLClassLoader(new URL[0],\n\t\t\t\tgetClass().getClassLoader());\n\t\tEndpointMBean bean = new EndpointMBean(this.responseMapper, beanClassLoader,\n\t\t\t\tendpoint);\n\t\tObject result = bean.invoke(\"testOperation\", NO_PARAMS, NO_SIGNATURE);\n\t\tassertThat(result).isEqualTo(beanClassLoader);\n\t\tassertThat(Thread.currentThread().getContextClassLoader())\n\t\t\t\t.isEqualTo(originalClassLoader);\n\t}\n","date":"2018-05-14 23:42:15","endLine":147,"groupId":"11552","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeShouldInvokeJmxOperationWithBeanClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/68/13552892a678749857b4910e330810531eca74.src","preCode":"\tpublic void invokeShouldInvokeJmxOperationWithBeanClassLoader()\n\t\t\tthrows ReflectionException, MBeanException {\n\t\tClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();\n\t\tTestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(\n\t\t\t\tnew TestJmxOperation((arguments) -> ClassUtils.getDefaultClassLoader()));\n\t\tURLClassLoader beanClassLoader = new URLClassLoader(new URL[0],\n\t\t\t\tgetClass().getClassLoader());\n\t\tEndpointMBean bean = new EndpointMBean(this.responseMapper, beanClassLoader,\n\t\t\t\tendpoint);\n\t\tObject result = bean.invoke(\"testOperation\", NO_PARAMS, NO_SIGNATURE);\n\t\tassertThat(result).isEqualTo(beanClassLoader);\n\t\tassertThat(Thread.currentThread().getContextClassLoader())\n\t\t\t\t.isEqualTo(originalClassLoader);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2018-05-14 23:42:15","commitOrder":2,"curCode":"\tpublic void invokeWhenMonoResultShouldBlockOnMono()\n\t\t\tthrows MBeanException, ReflectionException {\n\t\tTestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(\n\t\t\t\tnew TestJmxOperation((arguments) -> Mono.just(\"monoResult\")));\n\t\tEndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint);\n\t\tObject result = bean.invoke(\"testOperation\", NO_PARAMS, NO_SIGNATURE);\n\t\tassertThat(result).isEqualTo(\"monoResult\");\n\t}\n","date":"2018-05-14 23:42:15","endLine":176,"groupId":"11554","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeWhenMonoResultShouldBlockOnMono","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/68/13552892a678749857b4910e330810531eca74.src","preCode":"\tpublic void invokeWhenMonoResultShouldBlockOnMono()\n\t\t\tthrows MBeanException, ReflectionException {\n\t\tTestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(\n\t\t\t\tnew TestJmxOperation((arguments) -> Mono.just(\"monoResult\")));\n\t\tEndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint);\n\t\tObject result = bean.invoke(\"testOperation\", NO_PARAMS, NO_SIGNATURE);\n\t\tassertThat(result).isEqualTo(\"monoResult\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"MB"}],"commitId":"24024b00da2611458d12f7cee220aa10c01dd2fc","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-05-14 23:42:15","modifiedFileCount":"3","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid invokeShouldInvokeJmxOperationWithBeanClassLoader() throws ReflectionException, MBeanException {\n\t\tClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();\n\t\tTestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(\n\t\t\t\tnew TestJmxOperation((arguments) -> ClassUtils.getDefaultClassLoader()));\n\t\tURLClassLoader beanClassLoader = new URLClassLoader(new URL[0], getClass().getClassLoader());\n\t\tEndpointMBean bean = new EndpointMBean(this.responseMapper, beanClassLoader, endpoint);\n\t\tObject result = bean.invoke(\"testOperation\", NO_PARAMS, NO_SIGNATURE);\n\t\tassertThat(result).isEqualTo(beanClassLoader);\n\t\tassertThat(Thread.currentThread().getContextClassLoader()).isEqualTo(originalClassLoader);\n\t}\n","date":"2019-06-07 19:25:54","endLine":131,"groupId":"10475","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeShouldInvokeJmxOperationWithBeanClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fa/32a928a7fd5a614dcf0b7aefa46716b714d04d.src","preCode":"\tpublic void invokeShouldInvokeJmxOperationWithBeanClassLoader() throws ReflectionException, MBeanException {\n\t\tClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();\n\t\tTestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(\n\t\t\t\tnew TestJmxOperation((arguments) -> ClassUtils.getDefaultClassLoader()));\n\t\tURLClassLoader beanClassLoader = new URLClassLoader(new URL[0], getClass().getClassLoader());\n\t\tEndpointMBean bean = new EndpointMBean(this.responseMapper, beanClassLoader, endpoint);\n\t\tObject result = bean.invoke(\"testOperation\", NO_PARAMS, NO_SIGNATURE);\n\t\tassertThat(result).isEqualTo(beanClassLoader);\n\t\tassertThat(Thread.currentThread().getContextClassLoader()).isEqualTo(originalClassLoader);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid invokeWhenMonoResultShouldBlockOnMono() throws MBeanException, ReflectionException {\n\t\tTestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(\n\t\t\t\tnew TestJmxOperation((arguments) -> Mono.just(\"monoResult\")));\n\t\tEndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint);\n\t\tObject result = bean.invoke(\"testOperation\", NO_PARAMS, NO_SIGNATURE);\n\t\tassertThat(result).isEqualTo(\"monoResult\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":157,"groupId":"10475","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeWhenMonoResultShouldBlockOnMono","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fa/32a928a7fd5a614dcf0b7aefa46716b714d04d.src","preCode":"\tpublic void invokeWhenMonoResultShouldBlockOnMono() throws MBeanException, ReflectionException {\n\t\tTestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(\n\t\t\t\tnew TestJmxOperation((arguments) -> Mono.just(\"monoResult\")));\n\t\tEndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint);\n\t\tObject result = bean.invoke(\"testOperation\", NO_PARAMS, NO_SIGNATURE);\n\t\tassertThat(result).isEqualTo(\"monoResult\");\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
