[{"authorTime":"2020-05-06 15:30:25","codes":[{"authorDate":"2018-02-18 00:21:49","commitOrder":2,"curCode":"\tSIMPLE(\"^([\\\\+\\\\-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n\n\t\t@Override\n\t\tpublic Duration parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple duration pattern\");\n\t\t\t\tString suffix = matcher.group(2);\n\t\t\t\treturn (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix)\n\t\t\t\t\t\t: Unit.fromChronoUnit(unit)).parse(matcher.group(1));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\"'\" + value + \"' is not a valid simple duration\", ex);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Duration value, ChronoUnit unit) {\n\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t}\n\n\t},\n","date":"2018-02-20 12:25:47","endLine":61,"groupId":"11273","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"SIMPLE","params":"(\"^([\\\\+\\\\-]?\\\\d+)([a-zA-Z]{0@2})$\")","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/0e/81efbde016353cda4be8f2d028acc0cd65c4ee.src","preCode":"\tSIMPLE(\"^([\\\\+\\\\-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n\n\t\t@Override\n\t\tpublic Duration parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple duration pattern\");\n\t\t\t\tString suffix = matcher.group(2);\n\t\t\t\treturn (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix)\n\t\t\t\t\t\t: Unit.fromChronoUnit(unit)).parse(matcher.group(1));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\"'\" + value + \"' is not a valid simple duration\", ex);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Duration value, ChronoUnit unit) {\n\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t}\n\n\t},\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"NB"},{"authorDate":"2020-05-06 15:30:25","commitOrder":2,"curCode":"\tSIMPLE(\"^\" + \"(?:([-+]?[0-9]+)Y)?\" + \"(?:([-+]?[0-9]+)M)?\" + \"(?:([-+]?[0-9]+)W)?\" + \"(?:([-+]?[0-9]+)D)?\" + \"$\",\n\t\t\tPattern.CASE_INSENSITIVE) {\n\n\t\t@Override\n\t\tpublic Period parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tif (NUMERIC.matcher(value).matches()) {\n\t\t\t\t\treturn Unit.fromChronoUnit(unit).parse(value);\n\t\t\t\t}\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple period pattern\");\n\t\t\t\tAssert.isTrue(hasAtLeastOneGroupValue(matcher), \"'\" + value + \"' is not a valid simple period\");\n\t\t\t\tint years = parseInt(matcher, 1);\n\t\t\t\tint months = parseInt(matcher, 2);\n\t\t\t\tint weeks = parseInt(matcher, 3);\n\t\t\t\tint days = parseInt(matcher, 4);\n\t\t\t\treturn Period.of(years, months, Math.addExact(Math.multiplyExact(weeks, 7), days));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple period\", ex);\n\t\t\t}\n\t\t}\n\n\t\tboolean hasAtLeastOneGroupValue(Matcher matcher) {\n\t\t\tfor (int i = 0; i < matcher.groupCount(); i++) {\n\t\t\t\tif (matcher.group(i + 1) != null) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate int parseInt(Matcher matcher, int group) {\n\t\t\tString value = matcher.group(group);\n\t\t\treturn (value != null) ? Integer.parseInt(value) : 0;\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean matches(String value) {\n\t\t\treturn NUMERIC.matcher(value).matches() || matcher(value).matches();\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Period value, ChronoUnit unit) {\n\t\t\tif (value.isZero()) {\n\t\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t\t}\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tappend(result, value, Unit.YEARS);\n\t\t\tappend(result, value, Unit.MONTHS);\n\t\t\tappend(result, value, Unit.DAYS);\n\t\t\treturn result.toString();\n\t\t}\n\n\t\tprivate void append(StringBuilder result, Period value, Unit unit) {\n\t\t\tif (!unit.isZero(value)) {\n\t\t\t\tresult.append(unit.print(value));\n\t\t\t}\n\t\t}\n\n\t},\n","date":"2020-05-06 15:30:26","endLine":100,"groupId":"445","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"SIMPLE","params":"(\"^\"+\"(?:([-+]?[0-9]+)Y)?\"+\"(?:([-+]?[0-9]+)M)?\"+\"(?:([-+]?[0-9]+)W)?\"+\"(?:([-+]?[0-9]+)D)?\"+\"$\"@Pattern.CASE_INSENSITIVE)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/78/e61cb729907c981be4b8f892ccba218c8127ff.src","preCode":"\tSIMPLE(\"^\" + \"(?:([-+]?[0-9]+)Y)?\" + \"(?:([-+]?[0-9]+)M)?\" + \"(?:([-+]?[0-9]+)W)?\" + \"(?:([-+]?[0-9]+)D)?\" + \"$\",\n\t\t\tPattern.CASE_INSENSITIVE) {\n\n\t\t@Override\n\t\tpublic Period parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tif (NUMERIC.matcher(value).matches()) {\n\t\t\t\t\treturn Unit.fromChronoUnit(unit).parse(value);\n\t\t\t\t}\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple period pattern\");\n\t\t\t\tAssert.isTrue(hasAtLeastOneGroupValue(matcher), \"'\" + value + \"' is not a valid simple period\");\n\t\t\t\tint years = parseInt(matcher, 1);\n\t\t\t\tint months = parseInt(matcher, 2);\n\t\t\t\tint weeks = parseInt(matcher, 3);\n\t\t\t\tint days = parseInt(matcher, 4);\n\t\t\t\treturn Period.of(years, months, Math.addExact(Math.multiplyExact(weeks, 7), days));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple period\", ex);\n\t\t\t}\n\t\t}\n\n\t\tboolean hasAtLeastOneGroupValue(Matcher matcher) {\n\t\t\tfor (int i = 0; i < matcher.groupCount(); i++) {\n\t\t\t\tif (matcher.group(i + 1) != null) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate int parseInt(Matcher matcher, int group) {\n\t\t\tString value = matcher.group(group);\n\t\t\treturn (value != null) ? Integer.parseInt(value) : 0;\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean matches(String value) {\n\t\t\treturn NUMERIC.matcher(value).matches() || matcher(value).matches();\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Period value, ChronoUnit unit) {\n\t\t\tif (value.isZero()) {\n\t\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t\t}\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tappend(result, value, Unit.YEARS);\n\t\t\tappend(result, value, Unit.MONTHS);\n\t\t\tappend(result, value, Unit.DAYS);\n\t\t\treturn result.toString();\n\t\t}\n\n\t\tprivate void append(StringBuilder result, Period value, Unit unit) {\n\t\t\tif (!unit.isZero(value)) {\n\t\t\t\tresult.append(unit.print(value));\n\t\t\t}\n\t\t}\n\n\t},\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/PeriodStyle.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"}],"commitId":"66e8968b98fed745387b3b8bd716799198d9ff7d","commitMessage":"@@@Merge pull request #21136 from Grubhart\n\n* pr/21136:\n  Polish 'Add Period converter support'\n  Add Period converter support\n\nCloses gh-21136\n","date":"2020-05-06 15:30:26","modifiedFileCount":"4","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-05-06 15:30:25","codes":[{"authorDate":"2020-05-07 22:43:51","commitOrder":3,"curCode":"\tSIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n\n\t\t@Override\n\t\tpublic Duration parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple duration pattern\");\n\t\t\t\tString suffix = matcher.group(2);\n\t\t\t\treturn (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n\t\t\t\t\t\t.parse(matcher.group(1));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Duration value, ChronoUnit unit) {\n\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t}\n\n\t},\n","date":"2020-05-07 22:44:31","endLine":60,"groupId":"11273","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"SIMPLE","params":"(\"^([+-]?\\\\d+)([a-zA-Z]{0@2})$\")","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/5fded64cfeb74a1dd5552287d53a0ef07b08c5.src","preCode":"\tSIMPLE(\"^([\\\\+\\\\-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n\n\t\t@Override\n\t\tpublic Duration parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple duration pattern\");\n\t\t\t\tString suffix = matcher.group(2);\n\t\t\t\treturn (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n\t\t\t\t\t\t.parse(matcher.group(1));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Duration value, ChronoUnit unit) {\n\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t}\n\n\t},\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2020-05-06 15:30:25","commitOrder":3,"curCode":"\tSIMPLE(\"^\" + \"(?:([-+]?[0-9]+)Y)?\" + \"(?:([-+]?[0-9]+)M)?\" + \"(?:([-+]?[0-9]+)W)?\" + \"(?:([-+]?[0-9]+)D)?\" + \"$\",\n\t\t\tPattern.CASE_INSENSITIVE) {\n\n\t\t@Override\n\t\tpublic Period parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tif (NUMERIC.matcher(value).matches()) {\n\t\t\t\t\treturn Unit.fromChronoUnit(unit).parse(value);\n\t\t\t\t}\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple period pattern\");\n\t\t\t\tAssert.isTrue(hasAtLeastOneGroupValue(matcher), \"'\" + value + \"' is not a valid simple period\");\n\t\t\t\tint years = parseInt(matcher, 1);\n\t\t\t\tint months = parseInt(matcher, 2);\n\t\t\t\tint weeks = parseInt(matcher, 3);\n\t\t\t\tint days = parseInt(matcher, 4);\n\t\t\t\treturn Period.of(years, months, Math.addExact(Math.multiplyExact(weeks, 7), days));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple period\", ex);\n\t\t\t}\n\t\t}\n\n\t\tboolean hasAtLeastOneGroupValue(Matcher matcher) {\n\t\t\tfor (int i = 0; i < matcher.groupCount(); i++) {\n\t\t\t\tif (matcher.group(i + 1) != null) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate int parseInt(Matcher matcher, int group) {\n\t\t\tString value = matcher.group(group);\n\t\t\treturn (value != null) ? Integer.parseInt(value) : 0;\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean matches(String value) {\n\t\t\treturn NUMERIC.matcher(value).matches() || matcher(value).matches();\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Period value, ChronoUnit unit) {\n\t\t\tif (value.isZero()) {\n\t\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t\t}\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tappend(result, value, Unit.YEARS);\n\t\t\tappend(result, value, Unit.MONTHS);\n\t\t\tappend(result, value, Unit.DAYS);\n\t\t\treturn result.toString();\n\t\t}\n\n\t\tprivate void append(StringBuilder result, Period value, Unit unit) {\n\t\t\tif (!unit.isZero(value)) {\n\t\t\t\tresult.append(unit.print(value));\n\t\t\t}\n\t\t}\n\n\t},\n","date":"2020-05-06 15:30:26","endLine":100,"groupId":"445","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"SIMPLE","params":"(\"^\"+\"(?:([-+]?[0-9]+)Y)?\"+\"(?:([-+]?[0-9]+)M)?\"+\"(?:([-+]?[0-9]+)W)?\"+\"(?:([-+]?[0-9]+)D)?\"+\"$\"@Pattern.CASE_INSENSITIVE)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/78/e61cb729907c981be4b8f892ccba218c8127ff.src","preCode":"\tSIMPLE(\"^\" + \"(?:([-+]?[0-9]+)Y)?\" + \"(?:([-+]?[0-9]+)M)?\" + \"(?:([-+]?[0-9]+)W)?\" + \"(?:([-+]?[0-9]+)D)?\" + \"$\",\n\t\t\tPattern.CASE_INSENSITIVE) {\n\n\t\t@Override\n\t\tpublic Period parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tif (NUMERIC.matcher(value).matches()) {\n\t\t\t\t\treturn Unit.fromChronoUnit(unit).parse(value);\n\t\t\t\t}\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple period pattern\");\n\t\t\t\tAssert.isTrue(hasAtLeastOneGroupValue(matcher), \"'\" + value + \"' is not a valid simple period\");\n\t\t\t\tint years = parseInt(matcher, 1);\n\t\t\t\tint months = parseInt(matcher, 2);\n\t\t\t\tint weeks = parseInt(matcher, 3);\n\t\t\t\tint days = parseInt(matcher, 4);\n\t\t\t\treturn Period.of(years, months, Math.addExact(Math.multiplyExact(weeks, 7), days));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple period\", ex);\n\t\t\t}\n\t\t}\n\n\t\tboolean hasAtLeastOneGroupValue(Matcher matcher) {\n\t\t\tfor (int i = 0; i < matcher.groupCount(); i++) {\n\t\t\t\tif (matcher.group(i + 1) != null) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate int parseInt(Matcher matcher, int group) {\n\t\t\tString value = matcher.group(group);\n\t\t\treturn (value != null) ? Integer.parseInt(value) : 0;\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean matches(String value) {\n\t\t\treturn NUMERIC.matcher(value).matches() || matcher(value).matches();\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Period value, ChronoUnit unit) {\n\t\t\tif (value.isZero()) {\n\t\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t\t}\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tappend(result, value, Unit.YEARS);\n\t\t\tappend(result, value, Unit.MONTHS);\n\t\t\tappend(result, value, Unit.DAYS);\n\t\t\treturn result.toString();\n\t\t}\n\n\t\tprivate void append(StringBuilder result, Period value, Unit unit) {\n\t\t\tif (!unit.isZero(value)) {\n\t\t\t\tresult.append(unit.print(value));\n\t\t\t}\n\t\t}\n\n\t},\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/PeriodStyle.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"}],"commitId":"559c178637924c7e5938c469fd85d30bc3c535aa","commitMessage":"@@@Simplify regex expressions\n","date":"2020-05-07 22:44:31","modifiedFileCount":"2","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-08-03 21:06:48","codes":[{"authorDate":"2020-05-07 22:43:51","commitOrder":4,"curCode":"\tSIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n\n\t\t@Override\n\t\tpublic Duration parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple duration pattern\");\n\t\t\t\tString suffix = matcher.group(2);\n\t\t\t\treturn (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n\t\t\t\t\t\t.parse(matcher.group(1));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Duration value, ChronoUnit unit) {\n\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t}\n\n\t},\n","date":"2020-05-07 22:44:31","endLine":60,"groupId":"102147","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"SIMPLE","params":"(\"^([+-]?\\\\d+)([a-zA-Z]{0@2})$\")","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/11/5fded64cfeb74a1dd5552287d53a0ef07b08c5.src","preCode":"\tSIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n\n\t\t@Override\n\t\tpublic Duration parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple duration pattern\");\n\t\t\t\tString suffix = matcher.group(2);\n\t\t\t\treturn (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n\t\t\t\t\t\t.parse(matcher.group(1));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Duration value, ChronoUnit unit) {\n\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t}\n\n\t},\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"},{"authorDate":"2020-08-03 21:06:48","commitOrder":4,"curCode":"\tSIMPLE(\"^\" + \"(?:([-+]?[0-9]+)Y)?\" + \"(?:([-+]?[0-9]+)M)?\" + \"(?:([-+]?[0-9]+)W)?\" + \"(?:([-+]?[0-9]+)D)?\" + \"$\",\n\t\t\tPattern.CASE_INSENSITIVE) {\n\n\t\t@Override\n\t\tpublic Period parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tif (NUMERIC.matcher(value).matches()) {\n\t\t\t\t\treturn Unit.fromChronoUnit(unit).parse(value);\n\t\t\t\t}\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple period pattern\");\n\t\t\t\tAssert.isTrue(hasAtLeastOneGroupValue(matcher), () -> \"'\" + value + \"' is not a valid simple period\");\n\t\t\t\tint years = parseInt(matcher, 1);\n\t\t\t\tint months = parseInt(matcher, 2);\n\t\t\t\tint weeks = parseInt(matcher, 3);\n\t\t\t\tint days = parseInt(matcher, 4);\n\t\t\t\treturn Period.of(years, months, Math.addExact(Math.multiplyExact(weeks, 7), days));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple period\", ex);\n\t\t\t}\n\t\t}\n\n\t\tboolean hasAtLeastOneGroupValue(Matcher matcher) {\n\t\t\tfor (int i = 0; i < matcher.groupCount(); i++) {\n\t\t\t\tif (matcher.group(i + 1) != null) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate int parseInt(Matcher matcher, int group) {\n\t\t\tString value = matcher.group(group);\n\t\t\treturn (value != null) ? Integer.parseInt(value) : 0;\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean matches(String value) {\n\t\t\treturn NUMERIC.matcher(value).matches() || matcher(value).matches();\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Period value, ChronoUnit unit) {\n\t\t\tif (value.isZero()) {\n\t\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t\t}\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tappend(result, value, Unit.YEARS);\n\t\t\tappend(result, value, Unit.MONTHS);\n\t\t\tappend(result, value, Unit.DAYS);\n\t\t\treturn result.toString();\n\t\t}\n\n\t\tprivate void append(StringBuilder result, Period value, Unit unit) {\n\t\t\tif (!unit.isZero(value)) {\n\t\t\t\tresult.append(unit.print(value));\n\t\t\t}\n\t\t}\n\n\t},\n","date":"2020-08-03 21:06:49","endLine":100,"groupId":"102147","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"SIMPLE","params":"(\"^\"+\"(?:([-+]?[0-9]+)Y)?\"+\"(?:([-+]?[0-9]+)M)?\"+\"(?:([-+]?[0-9]+)W)?\"+\"(?:([-+]?[0-9]+)D)?\"+\"$\"@Pattern.CASE_INSENSITIVE)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2c/968d0ca1a0362851b6a01555253476e72e3270.src","preCode":"\tSIMPLE(\"^\" + \"(?:([-+]?[0-9]+)Y)?\" + \"(?:([-+]?[0-9]+)M)?\" + \"(?:([-+]?[0-9]+)W)?\" + \"(?:([-+]?[0-9]+)D)?\" + \"$\",\n\t\t\tPattern.CASE_INSENSITIVE) {\n\n\t\t@Override\n\t\tpublic Period parse(String value, ChronoUnit unit) {\n\t\t\ttry {\n\t\t\t\tif (NUMERIC.matcher(value).matches()) {\n\t\t\t\t\treturn Unit.fromChronoUnit(unit).parse(value);\n\t\t\t\t}\n\t\t\t\tMatcher matcher = matcher(value);\n\t\t\t\tAssert.state(matcher.matches(), \"Does not match simple period pattern\");\n\t\t\t\tAssert.isTrue(hasAtLeastOneGroupValue(matcher), \"'\" + value + \"' is not a valid simple period\");\n\t\t\t\tint years = parseInt(matcher, 1);\n\t\t\t\tint months = parseInt(matcher, 2);\n\t\t\t\tint weeks = parseInt(matcher, 3);\n\t\t\t\tint days = parseInt(matcher, 4);\n\t\t\t\treturn Period.of(years, months, Math.addExact(Math.multiplyExact(weeks, 7), days));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"'\" + value + \"' is not a valid simple period\", ex);\n\t\t\t}\n\t\t}\n\n\t\tboolean hasAtLeastOneGroupValue(Matcher matcher) {\n\t\t\tfor (int i = 0; i < matcher.groupCount(); i++) {\n\t\t\t\tif (matcher.group(i + 1) != null) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate int parseInt(Matcher matcher, int group) {\n\t\t\tString value = matcher.group(group);\n\t\t\treturn (value != null) ? Integer.parseInt(value) : 0;\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean matches(String value) {\n\t\t\treturn NUMERIC.matcher(value).matches() || matcher(value).matches();\n\t\t}\n\n\t\t@Override\n\t\tpublic String print(Period value, ChronoUnit unit) {\n\t\t\tif (value.isZero()) {\n\t\t\t\treturn Unit.fromChronoUnit(unit).print(value);\n\t\t\t}\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tappend(result, value, Unit.YEARS);\n\t\t\tappend(result, value, Unit.MONTHS);\n\t\t\tappend(result, value, Unit.DAYS);\n\t\t\treturn result.toString();\n\t\t}\n\n\t\tprivate void append(StringBuilder result, Period value, Unit unit) {\n\t\t\tif (!unit.isZero(value)) {\n\t\t\t\tresult.append(unit.print(value));\n\t\t\t}\n\t\t}\n\n\t},\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/PeriodStyle.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"e18198237b508dd8c0bb466ed4eb7f756393e478","commitMessage":"@@@Merge pull request #22699 from dreis2211\n\n* pr/22699:\n  Use Supplier variants of Assert methods\n\nCloses gh-22699\n","date":"2020-08-03 21:06:49","modifiedFileCount":"17","status":"M","submitter":"Stephane Nicoll"}]
