[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void exceptionError() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new MockFilterChain() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response)\n\t\t\t\t\tthrows IOException, ServletException {\n\t\t\t\tsuper.doFilter(request, response);\n\t\t\t\tthrow new RuntimeException(\"BAD\");\n\t\t\t}\n\t\t};\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus())\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE))\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI))\n\t\t\t\t.isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2017-10-05 11:18:56","endLine":279,"groupId":"16287","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"exceptionError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e0/e48fdbc64db36aac18e1f7bab30798111ada15.src","preCode":"\tpublic void exceptionError() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new MockFilterChain() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response)\n\t\t\t\t\tthrows IOException, ServletException {\n\t\t\t\tsuper.doFilter(request, response);\n\t\t\t\tthrow new RuntimeException(\"BAD\");\n\t\t\t}\n\t\t};\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus())\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE))\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI))\n\t\t\t\t.isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new MockFilterChain() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response)\n\t\t\t\t\tthrows IOException, ServletException {\n\t\t\t\tsuper.doFilter(request, response);\n\t\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t\t}\n\t\t};\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus())\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE))\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI))\n\t\t\t\t.isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2017-10-05 11:18:56","endLine":522,"groupId":"16287","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"nestedServletExceptionIsUnwrapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e0/e48fdbc64db36aac18e1f7bab30798111ada15.src","preCode":"\tpublic void nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new MockFilterChain() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response)\n\t\t\t\t\tthrows IOException, ServletException {\n\t\t\t\tsuper.doFilter(request, response);\n\t\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t\t}\n\t\t};\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus())\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE))\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI))\n\t\t\t\t.isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-04-05 08:57:21","codes":[{"authorDate":"2018-04-05 08:57:21","commitOrder":2,"curCode":"\tpublic void exceptionError() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new RuntimeException(\"BAD\");\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus())\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE))\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI))\n\t\t\t\t.isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2018-04-05 09:01:25","endLine":234,"groupId":"16287","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"exceptionError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8d/84227cb450697b7e5d23526fb818def2435382.src","preCode":"\tpublic void exceptionError() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new MockFilterChain() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response)\n\t\t\t\t\tthrows IOException, ServletException {\n\t\t\t\tsuper.doFilter(request, response);\n\t\t\t\tthrow new RuntimeException(\"BAD\");\n\t\t\t}\n\t\t};\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus())\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE))\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI))\n\t\t\t\t.isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2018-04-05 08:57:21","commitOrder":2,"curCode":"\tpublic void nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus())\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE))\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI))\n\t\t\t\t.isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2018-04-05 09:01:25","endLine":432,"groupId":"16287","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"nestedServletExceptionIsUnwrapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8d/84227cb450697b7e5d23526fb818def2435382.src","preCode":"\tpublic void nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new MockFilterChain() {\n\t\t\t@Override\n\t\t\tpublic void doFilter(ServletRequest request, ServletResponse response)\n\t\t\t\t\tthrows IOException, ServletException {\n\t\t\t\tsuper.doFilter(request, response);\n\t\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t\t}\n\t\t};\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus())\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE))\n\t\t\t\t.isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE))\n\t\t\t\t.isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION))\n\t\t\t\t.isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE))\n\t\t\t\t.isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI))\n\t\t\t\t.isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"}],"commitId":"598e9bb842d02aba092e290045bd53d280bddbe0","commitMessage":"@@@Polish\n","date":"2018-04-05 09:01:25","modifiedFileCount":"18","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid exceptionError() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new RuntimeException(\"BAD\");\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":219,"groupId":"101956","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"exceptionError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/ee16ca420e81db0ceb1fb260d60f8d03876cc7.src","preCode":"\tpublic void exceptionError() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new RuntimeException(\"BAD\");\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","date":"2019-06-07 19:25:54","endLine":388,"groupId":"101956","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"nestedServletExceptionIsUnwrapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/ee16ca420e81db0ceb1fb260d60f8d03876cc7.src","preCode":"\tpublic void nestedServletExceptionIsUnwrapped() throws Exception {\n\t\tthis.filter.addErrorPages(new ErrorPage(RuntimeException.class, \"/500\"));\n\t\tthis.chain = new TestFilterChain((request, response, chain) -> {\n\t\t\tchain.call();\n\t\t\tthrow new NestedServletException(\"Wrapper\", new RuntimeException(\"BAD\"));\n\t\t});\n\t\tthis.filter.doFilter(this.request, this.response, this.chain);\n\t\tassertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus()).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).isEqualTo(500);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).isEqualTo(\"BAD\");\n\t\tMap<String, Object> requestAttributes = getAttributesForDispatch(\"/500\");\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isEqualTo(RuntimeException.class);\n\t\tassertThat(requestAttributes.get(RequestDispatcher.ERROR_EXCEPTION)).isInstanceOf(RuntimeException.class);\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).isNull();\n\t\tassertThat(this.request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).isEqualTo(\"/test/path\");\n\t\tassertThat(this.response.isCommitted()).isTrue();\n\t\tassertThat(this.response.getForwardedUrl()).isEqualTo(\"/500\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/support/ErrorPageFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
