[{"authorTime":"2018-01-17 02:24:33","codes":[{"authorDate":"2018-01-17 02:24:33","commitOrder":1,"curCode":"\tpublic void mappings() throws Exception {\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\"))));\n\t}\n","date":"2018-01-17 02:26:59","endLine":88,"groupId":"1729","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8e/98a0f1e841cad2f141f399b11428a7f12fafe8.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"},{"authorDate":"2018-01-17 02:24:33","commitOrder":1,"curCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","date":"2018-01-17 02:26:59","endLine":126,"groupId":"3342","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8d/64ec9557ff7e8975d2a2de56eb9b349335134c.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"67a299020b5657edb9b78f13bf16e027f1351e1f","commitMessage":"@@@Rework mappings endpoint\n\nImprove the structure of the response and include mappings from\nWebFlux and Servlet and Filter registrations in addition to the\nmappings from Spring MVC.\n\nCloses gh-9979\n","date":"2018-01-17 02:26:59","modifiedFileCount":"21","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2018-02-08 00:31:40","codes":[{"authorDate":"2018-02-08 00:31:40","commitOrder":2,"curCode":"\tpublic void mappings() throws Exception {\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\t\t\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details\").optional()\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"that will handle requests to \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"this mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the class\"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \" of the method.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Descriptor of the method as \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"specified in the Java Language \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"Specification.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\")\n\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Details of the function, if any, \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"that will handle requests to this \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\n\t\t\t\t\t\t\t\t\t\t\t\t\"Fully qualified name of the class of \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the function.\"))));\n\t}\n","date":"2018-02-17 01:08:47","endLine":123,"groupId":"1729","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/18/f20c1200c41ebcc7abed49cdb16f5a4b173b43.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\t\t\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-02-08 00:31:40","commitOrder":2,"curCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\t\t\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details\").optional()\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"that will handle requests to \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"this mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the class\"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \" of the method.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Descriptor of the method as \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"specified in the Java Language \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"Specification.\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","date":"2018-02-17 01:08:47","endLine":147,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a3/82a70a76e1456064e59d00e47d0d25669c5fab.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\t\t\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"2c19257d6d9fc5b339c079b8b250f4433dbba4fd","commitMessage":"@@@Add HandlerMethod and HandlerFunction details to mappings endpoint\n\nCloses gh-11864\n","date":"2018-02-17 01:08:47","modifiedFileCount":"6","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-02-17 00:53:11","codes":[{"authorDate":"2018-02-17 00:53:11","commitOrder":3,"curCode":"\tpublic void mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the function, if any, that will handle \"\n\t\t\t\t\t\t\t\t+ \"requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\n\t\t\t\t\t\t\t\t\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","date":"2018-02-17 01:36:06","endLine":165,"groupId":"1269","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/26/b32e4e95757998fe84ef946229bd7acd12743a.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\t\t\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details\").optional()\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"that will handle requests to \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"this mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the class\"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \" of the method.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Descriptor of the method as \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"specified in the Java Language \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"Specification.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\")\n\t\t\t\t\t\t\t\t\t\t.optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Details of the function, if any, \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"that will handle requests to this \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\n\t\t\t\t\t\t\t\t\t\t\t\t\"Fully qualified name of the class of \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"the function.\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2018-02-17 00:53:11","commitOrder":3,"curCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\n\t\t\t\t\t\t\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\n\t\t\t\t\t\t\t\t\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\t\t\tdispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","date":"2018-02-17 01:36:06","endLine":190,"groupId":"2553","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/07/7e5d0f8343780c74367405dbb907c609e48d28.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\t\t\t\t\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].handler\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Handler for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Predicate for the mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details\").optional()\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"that will handle requests to \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"this mapping.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Fully qualified name of the class\"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \" of the method.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t\t\t\t\t.description(\"Descriptor of the method as \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"specified in the Java Language \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"Specification.\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"17c7f027e02d50ea3f0fa8d71c7b84ed34f4046a","commitMessage":"@@@Add details of the request mapping conditions to mappings endpoint\n\nCloses gh-12080\n","date":"2018-02-17 01:36:06","modifiedFileCount":"5","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-12-11 01:58:00","codes":[{"authorDate":"2018-02-17 00:53:11","commitOrder":4,"curCode":"\tpublic void mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the function, if any, that will handle \"\n\t\t\t\t\t\t\t\t+ \"requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\n\t\t\t\t\t\t\t\t\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","date":"2018-02-17 01:36:06","endLine":165,"groupId":"1269","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/26/b32e4e95757998fe84ef946229bd7acd12743a.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the function, if any, that will handle \"\n\t\t\t\t\t\t\t\t+ \"requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\n\t\t\t\t\t\t\t\t\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2018-12-11 01:58:00","commitOrder":4,"curCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\n\t\t\t\t\t\t\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\n\t\t\t\t\t\t\t\t\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\t\t\tdispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","date":"2018-12-11 01:58:00","endLine":186,"groupId":"1752","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/0b5383f092d893fd42f5cec28d22c60b1ac89e.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\n\t\t\t\t\t\t\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\n\t\t\t\t\t\t\t\t\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\t\t\tdispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"393decff350a6fb2d6dd4d84dd453f01bd4bbd24","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-11 01:58:00","modifiedFileCount":"1","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-12-11 01:59:50","codes":[{"authorDate":"2018-02-17 00:53:11","commitOrder":5,"curCode":"\tpublic void mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the function, if any, that will handle \"\n\t\t\t\t\t\t\t\t+ \"requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\n\t\t\t\t\t\t\t\t\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","date":"2018-02-17 01:36:06","endLine":165,"groupId":"1269","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/26/b32e4e95757998fe84ef946229bd7acd12743a.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the function, if any, that will handle \"\n\t\t\t\t\t\t\t\t+ \"requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\")\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\n\t\t\t\t\t\t\t\t\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk()\n\t\t\t\t.expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\",\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2018-12-11 01:59:50","commitOrder":5,"curCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\n\t\t\t\t\t\t\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\n\t\t\t\t\t\t\t\t\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\t\t\tdispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","date":"2018-12-11 01:59:50","endLine":184,"groupId":"1752","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bd/f6fe86dcbe2da672b31fd9ccfc25aa6eeb88a0.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\")\n\t\t\t\t\t\t.description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\")\n\t\t\t\t\t\t.description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t.description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any, keyed by \"\n\t\t\t\t\t\t\t\t+ \"dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \"\n\t\t\t\t\t\t\t\t+ \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\")\n\t\t\t\t\t\t.description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\")\n\t\t\t\t\t\t.description(\"Details of the request mapping conditions.\")\n\t\t\t\t\t\t.optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\")\n\t\t\t\t\t\t.description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\")\n\t\t\t\t\t\t.description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\")\n\t\t\t\t\t\t.description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\")\n\t\t\t\t\t\t.description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\")\n\t\t\t\t\t\t.description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\")\n\t\t\t\t\t\t.description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\")\n\t\t\t\t\t\t.description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\").description(\n\t\t\t\t\t\t\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\")\n\t\t\t\t\t\t.description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\")\n\t\t\t\t\t\t.description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\")\n\t\t\t\t\t\t.description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \"\n\t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\").optional()\n\t\t\t\t\t\t.type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n\t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\n\t\t\t\t\t\t\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\n\t\t\t\t\t\t\t\t\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"),\n\t\t\t\t\t\t\t\tdispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\").description(\n\t\t\t\t\t\t\t\t\t\t\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servlets\")\n\t\t\t\t\t\t\t\t\t\t.withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Class name of the servlet\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"55d7c19c06777b2b7b8d129ad91a154576228e4b","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-11 01:59:50","modifiedFileCount":"1","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \" + \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \" + \"Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional().type(JsonFieldType.OBJECT).description(\n\t\t\t\t\t\t\"Details of the function, if any, that will handle \" + \"requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\"Dispatcher handler mappings, if any, keyed by \" + \"dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \" + \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", responseFields(\n\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\").withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","date":"2019-06-07 19:25:54","endLine":129,"groupId":"1269","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/49/654c99f8244b2d9d17d095ce2cbebc0c2a0dfb.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \" + \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \" + \"Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional().type(JsonFieldType.OBJECT).description(\n\t\t\t\t\t\t\"Details of the function, if any, that will handle \" + \"requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\"Dispatcher handler mappings, if any, keyed by \" + \"dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \" + \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", responseFields(\n\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\").withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\").description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\").description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional().type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\"Dispatcher servlet mappings, if any, keyed by \" + \"dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \" + \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \" + \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \" + \"Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"), dispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\").withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.servlets\").withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\").description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the servlet\"))));\n\t}\n","date":"2019-06-07 19:25:54","endLine":144,"groupId":"1752","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9c/c3dc2b1ff0355fc55642522e7784129c103fdf.src","preCode":"\tpublic void mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\").description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\").description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional().type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\"Dispatcher servlet mappings, if any, keyed by \" + \"dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \" + \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \" + \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \" + \"Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"), dispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\").withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.servlets\").withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\").description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the servlet\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-07-15 02:39:18","codes":[{"authorDate":"2019-07-15 02:39:18","commitOrder":7,"curCode":"\tvoid mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the function, if any, that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any, keyed by dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", responseFields(\n\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\").withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","date":"2019-07-15 07:24:19","endLine":129,"groupId":"1269","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9b/e633f7dba161e19a701081162cfb3bb8f4c5d4.src","preCode":"\tvoid mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \" + \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \" + \"Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional().type(JsonFieldType.OBJECT).description(\n\t\t\t\t\t\t\"Details of the function, if any, that will handle \" + \"requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\"Dispatcher handler mappings, if any, keyed by \" + \"dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \" + \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", responseFields(\n\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\").withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2019-07-15 02:39:18","commitOrder":7,"curCode":"\tvoid mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\").description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\").description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional().type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any, keyed by dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"), dispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\").withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.servlets\").withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\").description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the servlet\"))));\n\t}\n","date":"2019-07-15 07:24:19","endLine":144,"groupId":"3507","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b4/c5c6b4e2d04120f94e08872a4f180d55467b24.src","preCode":"\tvoid mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\").description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\").description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional().type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\").description(\n\t\t\t\t\t\t\"Dispatcher servlet mappings, if any, keyed by \" + \"dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific \" + \"details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, \" + \"that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \" + \"Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"), dispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\").withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.servlets\").withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\").description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the servlet\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"01933f9b064860e5bbca4e3ff71789dbcf615e19","commitMessage":"@@@Merge previously split strings\n\nMerge some string lines that were previously split because of the\n90 chars wide formatting.\n","date":"2019-07-15 07:24:19","modifiedFileCount":"173","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-05-17 16:15:00","codes":[{"authorDate":"2021-05-17 16:15:00","commitOrder":8,"curCode":"\tvoid mappings() {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the function, if any, that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any, keyed by dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", responseFields(\n\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\").withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","date":"2021-05-17 16:15:00","endLine":129,"groupId":"10838","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f0/733a31c51d8f98708482a2553ad42615b8920f.src","preCode":"\tvoid mappings() throws Exception {\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java Language Specification.\"));\n\t\tList<FieldDescriptor> handlerFunction = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the function, if any, that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerFunction.className\").type(JsonFieldType.STRING)\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the function.\"));\n\t\tList<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any, keyed by dispatcher handler bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tdispatcherHandlerFields.addAll(requestMappingConditions);\n\t\tdispatcherHandlerFields.addAll(handlerMethod);\n\t\tdispatcherHandlerFields.addAll(handlerFunction);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectStatus().isOk().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", responseFields(\n\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.dispatcherHandlers\").withSubsectionId(\"dispatcher-handlers\"),\n\t\t\t\t\t\tdispatcherHandlerFields)));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2021-05-17 16:15:00","commitOrder":8,"curCode":"\tvoid mappings() {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\").description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\").description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional().type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any, keyed by dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"), dispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\").withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.servlets\").withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\").description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the servlet\"))));\n\t}\n","date":"2021-05-17 16:15:00","endLine":144,"groupId":"10838","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"mappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/21/7a50d0e9479a072bd2df430f57d2d3930a4ba1.src","preCode":"\tvoid mappings() throws Exception {\n\t\tResponseFieldsSnippet commonResponseFields = responseFields(\n\t\t\t\tfieldWithPath(\"contexts\").description(\"Application contexts keyed by id.\"),\n\t\t\t\tfieldWithPath(\"contexts.*.mappings\").description(\"Mappings in the context, keyed by mapping type.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servletFilters\")\n\t\t\t\t\t\t.description(\"Servlet filter mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.servlets\").description(\"Servlet mappings, if any.\"),\n\t\t\t\tsubsectionWithPath(\"contexts.*.mappings.dispatcherHandlers\")\n\t\t\t\t\t\t.description(\"Dispatcher handler mappings, if any.\").optional().type(JsonFieldType.OBJECT),\n\t\t\t\tparentIdField());\n\t\tList<FieldDescriptor> dispatcherServletFields = new ArrayList<>(Arrays.asList(\n\t\t\t\tfieldWithPath(\"*\")\n\t\t\t\t\t\t.description(\"Dispatcher servlet mappings, if any, keyed by dispatcher servlet bean name.\"),\n\t\t\t\tfieldWithPath(\"*.[].details\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Additional implementation-specific details about the mapping. Optional.\"),\n\t\t\t\tfieldWithPath(\"*.[].handler\").description(\"Handler for the mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].predicate\").description(\"Predicate for the mapping.\")));\n\t\tList<FieldDescriptor> requestMappingConditions = Arrays.asList(\n\t\t\t\trequestMappingConditionField(\"\").description(\"Details of the request mapping conditions.\").optional(),\n\t\t\t\trequestMappingConditionField(\".consumes\").description(\"Details of the consumes condition\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].mediaType\").description(\"Consumed media type.\"),\n\t\t\t\trequestMappingConditionField(\".consumes.[].negated\").description(\"Whether the media type is negated.\"),\n\t\t\t\trequestMappingConditionField(\".headers\").description(\"Details of the headers condition.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].name\").description(\"Name of the header.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].value\").description(\"Required value of the header, if any.\"),\n\t\t\t\trequestMappingConditionField(\".headers.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".methods\").description(\"HTTP methods that are handled.\"),\n\t\t\t\trequestMappingConditionField(\".params\").description(\"Details of the params condition.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].name\").description(\"Name of the parameter.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].value\")\n\t\t\t\t\t\t.description(\"Required value of the parameter, if any.\"),\n\t\t\t\trequestMappingConditionField(\".params.[].negated\").description(\"Whether the value is negated.\"),\n\t\t\t\trequestMappingConditionField(\".patterns\")\n\t\t\t\t\t\t.description(\"Patterns identifying the paths handled by the mapping.\"),\n\t\t\t\trequestMappingConditionField(\".produces\").description(\"Details of the produces condition.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].mediaType\").description(\"Produced media type.\"),\n\t\t\t\trequestMappingConditionField(\".produces.[].negated\").description(\"Whether the media type is negated.\"));\n\t\tList<FieldDescriptor> handlerMethod = Arrays.asList(\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod\").optional().type(JsonFieldType.OBJECT)\n\t\t\t\t\t\t.description(\"Details of the method, if any, that will handle requests to this mapping.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n\t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").description(\"Name of the method.\"),\n\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n\t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java Language Specification.\"));\n\t\tdispatcherServletFields.addAll(handlerMethod);\n\t\tdispatcherServletFields.addAll(requestMappingConditions);\n\t\tthis.client.get().uri(\"/actuator/mappings\").exchange().expectBody()\n\t\t\t\t.consumeWith(document(\"mappings\", commonResponseFields,\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.dispatcherServlets\")\n\t\t\t\t\t\t\t\t.withSubsectionId(\"dispatcher-servlets\"), dispatcherServletFields),\n\t\t\t\t\t\tresponseFields(\n\t\t\t\t\t\t\t\tbeneathPath(\"contexts.*.mappings.servletFilters\").withSubsectionId(\"servlet-filters\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].servletNameMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"Names of the servlets to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].urlPatternMappings\")\n\t\t\t\t\t\t\t\t\t\t.description(\"URL pattern to which the filter is mapped.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the filter.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the filter\")),\n\t\t\t\t\t\tresponseFields(beneathPath(\"contexts.*.mappings.servlets\").withSubsectionId(\"servlets\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].mappings\").description(\"Mappings of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].name\").description(\"Name of the servlet.\"),\n\t\t\t\t\t\t\t\tfieldWithPath(\"[].className\").description(\"Class name of the servlet\"))));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"21a3f03d20a24934e38a26843872778598da7ad3","commitMessage":"@@@Merge pull request #26441 from weixsun\n\n* pr/26441:\n  Polish \"Remove unnecessary throws declaration in tests\"\n  Remove unnecessary throws declaration in tests\n\nCloses gh-26441\n","date":"2021-05-17 16:15:00","modifiedFileCount":"172","status":"M","submitter":"Stephane Nicoll"}]
