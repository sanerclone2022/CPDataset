[{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid getImportsReturnsImports() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"spring,boot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tassertThat(contributor.getImports()).containsExactly(\"spring\", \"boot\");\n\t}\n","date":"2020-07-23 12:02:32","endLine":124,"groupId":"6899","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getImportsReturnsImports","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/80/111a87ef6595ff1177a222ef52a46b0b8d87bb.src","preCode":"\tvoid getImportsReturnsImports() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"spring,boot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tassertThat(contributor.getImports()).containsExactly(\"spring\", \"boot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid hasUnprocessedImportsWhenHasNoChildrenForPhaseReturnsTrue() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tassertThat(contributor.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isTrue();\n\t}\n","date":"2020-07-23 12:02:32","endLine":142,"groupId":"6899","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"hasUnprocessedImportsWhenHasNoChildrenForPhaseReturnsTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/80/111a87ef6595ff1177a222ef52a46b0b8d87bb.src","preCode":"\tvoid hasUnprocessedImportsWhenHasNoChildrenForPhaseReturnsTrue() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tassertThat(contributor.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"3352024b1ca641fa0beaaa4cd87788c190242eb0","commitMessage":"@@@Provide ConfigFileApplicationListener replacement\n\nDeprecate `ConfigFileApplicationListener` and provide a replacement\nmechanism that supports arbitrary config data imports.\n\nThis commit updates the following areas:\n\n- Extract `EnvironmentPostProcessor` invocation logic from the\n  `ConfigFileApplicationListener` to new dedicated listener. Also\n  providing support for `Log` injection.\n\n- Extract `RandomPropertySource` adding logic from the\n  `ConfigFileApplicationListener` to a dedicated class.\n\n- Migrate to the recently introduced `DefaultPropertiesPropertySource`\n  class when moving the defaultProperties `PropertySource`\n\n- Replace processing logic with a phased approach to ensure that\n  profile enablement happens in a distinct phase and that profiles\n  can no longer be activated on an ad-hoc basis.\n\n- Provide a more predictable and logical import order for processing\n  `application.properties` and `application.yml` files.\n\n- Add support for a `spring.config.import` property which can be used\n  to import additional config data. Also provide a pluggable API\n  allowing third-parties to resolve and load locations themselves.\n\n- Add `spring.config.activate.on-profile` support which replaces the\n  existing `spring.profiles` property.\n\n- Add `spring.config.activate.on-cloud-platform` support which allows\n  a config data document to be active only on a given cloud platform.\n\n- Support a `spring.config.use-legacy-processing` property allowing the\n  previous processing logic to be used.\n\nCloses gh-22497\n\nCo-authored-by: Madhura Bhave <mbhave@vmware.com>\n","date":"2020-07-23 12:02:32","modifiedFileCount":"17","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-08-23 10:59:22","codes":[{"authorDate":"2020-08-23 10:59:22","commitOrder":2,"curCode":"\tvoid getImportsReturnsImports() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"spring,boot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(null, configData, 0);\n\t\tassertThat(contributor.getImports()).containsExactly(\"spring\", \"boot\");\n\t}\n","date":"2020-08-24 11:27:12","endLine":121,"groupId":"1791","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getImportsReturnsImports","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/680de4ae66b06f7b3902e931bd1f5938e375df.src","preCode":"\tvoid getImportsReturnsImports() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"spring,boot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tassertThat(contributor.getImports()).containsExactly(\"spring\", \"boot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-08-23 10:59:22","commitOrder":2,"curCode":"\tvoid hasUnprocessedImportsWhenHasNoChildrenForPhaseReturnsTrue() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(null, configData, 0);\n\t\tassertThat(contributor.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isTrue();\n\t}\n","date":"2020-08-24 11:27:12","endLine":137,"groupId":"1791","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"hasUnprocessedImportsWhenHasNoChildrenForPhaseReturnsTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/680de4ae66b06f7b3902e931bd1f5938e375df.src","preCode":"\tvoid hasUnprocessedImportsWhenHasNoChildrenForPhaseReturnsTrue() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofImported(null, configData, 0,\n\t\t\t\tthis.activationContext);\n\t\tassertThat(contributor.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"758df17c7d60e387ead9c65b81f250fd7b00a47c","commitMessage":"@@@Allow placeholders to be used in imports\n\nAllow `${..}` property placeholders to be used in `spring.config.import`\nproperties. Prior to this commit.  placeholders were not resolved when\nbinding the `ConfigDataProperty` instance. Furthermore.  binding happened\ntoo early for all placeholders to be resolved correctly. The\n`ConfigDataEnvironmentContributor` class now has two states for imported\ncontributors.  `UNBOUND_IMPORT` has the initial unbound state and is\neventually replaced with a `BOUND_IMPORT`.\n\nCloses gh-23020\n","date":"2020-08-24 11:27:12","modifiedFileCount":"7","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-08-23 10:59:22","codes":[{"authorDate":"2020-10-14 05:43:34","commitOrder":3,"curCode":"\tvoid getImportsReturnsImports() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"spring,boot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(null, configData, 0);\n\t\tassertThat(contributor.getImports()).containsExactly(ConfigDataLocation.of(\"spring\"),\n\t\t\t\tConfigDataLocation.of(\"boot\"));\n\t}\n","date":"2020-10-16 02:33:57","endLine":124,"groupId":"101623","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getImportsReturnsImports","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4c/6cdb0df7ad560f250e5d5254e5063855c8cf91.src","preCode":"\tvoid getImportsReturnsImports() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"spring,boot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(null, configData, 0);\n\t\tassertThat(contributor.getImports()).containsExactly(\"spring\", \"boot\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2020-08-23 10:59:22","commitOrder":3,"curCode":"\tvoid hasUnprocessedImportsWhenHasNoChildrenForPhaseReturnsTrue() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(null, configData, 0);\n\t\tassertThat(contributor.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isTrue();\n\t}\n","date":"2020-08-24 11:27:12","endLine":137,"groupId":"101623","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"hasUnprocessedImportsWhenHasNoChildrenForPhaseReturnsTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/680de4ae66b06f7b3902e931bd1f5938e375df.src","preCode":"\tvoid hasUnprocessedImportsWhenHasNoChildrenForPhaseReturnsTrue() {\n\t\tMockPropertySource propertySource = new MockPropertySource();\n\t\tpropertySource.setProperty(\"spring.config.import\", \"springboot\");\n\t\tConfigData configData = new ConfigData(Collections.singleton(propertySource));\n\t\tConfigDataEnvironmentContributor contributor = createBoundContributor(null, configData, 0);\n\t\tassertThat(contributor.hasUnprocessedImports(ImportPhase.BEFORE_PROFILE_ACTIVATION)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentContributorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"}],"commitId":"1cf9fc107e5ed29a44935688eaca2bf6fa85108b","commitMessage":"@@@Improve ConfigData processing code\n\nRefactor `ConfigData` processing code to make it less awkward to\nfollow.\n\nPrior to this commit the `ConfigDataLocationResolver` would take a\nString location and return a `ConfigDataLocation` instance. This was\na little confusing since sometimes we would refer to `location` as the\nString value.  and sometimes it would be the typed instance. We also\nhad nowhere sensible to put the `optional:` prefix logic and we needed\nto pass a `boolean` parameter to a number of methods. The recently\nintroduced `Orgin` support also didn't have a good home.\n\nTo solve this.  `ConfigDataLocation` has been renamed to\n`ConfigDataResource`. This frees up `ConfigDataLocation` to be used\nas a richer `location` type that holds the String value.  the `Orgin`\nand provides a home for the `optional:` logic.\n\nThis commit also cleans up a few other areas of the code.  including\nrenaming `ResourceConfigData...` to `StandardConfigData...`. It also\nintroduces a new exception hierarchy for `ConfigDataNotFoundExceptions`.\n\nCloses gh-23711\n","date":"2020-10-16 02:33:57","modifiedFileCount":"41","status":"M","submitter":"Phillip Webb"}]
