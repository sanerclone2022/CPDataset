[{"authorTime":"2018-10-15 20:10:38","codes":[{"authorDate":"2018-07-24 15:33:22","commitOrder":3,"curCode":"\tpublic void defaultValuesAreConsistent() {\n\t\tInfluxProperties properties = new InfluxProperties();\n\t\tInfluxConfig config = InfluxConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getDb()).isEqualTo(config.db());\n\t\tassertThat(properties.getConsistency()).isEqualTo(config.consistency());\n\t\tassertThat(properties.getUserName()).isEqualTo(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualTo(config.password());\n\t\tassertThat(properties.getRetentionPolicy()).isEqualTo(config.retentionPolicy());\n\t\tassertThat(properties.getRetentionDuration())\n\t\t\t\t.isEqualTo(config.retentionDuration());\n\t\tassertThat(properties.getRetentionReplicationFactor())\n\t\t\t\t.isEqualTo(config.retentionReplicationFactor());\n\t\tassertThat(properties.getRetentionShardDuration())\n\t\t\t\t.isEqualTo(config.retentionShardDuration());\n\t\tassertThat(properties.getUri()).isEqualTo(config.uri());\n\t\tassertThat(properties.isCompressed()).isEqualTo(config.compressed());\n\t\tassertThat(properties.isAutoCreateDb()).isEqualTo(config.autoCreateDb());\n\t}\n","date":"2018-07-24 15:33:22","endLine":51,"groupId":"7185","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultValuesAreConsistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/83/2a5c3abf873e4d328809d6632c06b20fd47838.src","preCode":"\tpublic void defaultValuesAreConsistent() {\n\t\tInfluxProperties properties = new InfluxProperties();\n\t\tInfluxConfig config = InfluxConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getDb()).isEqualTo(config.db());\n\t\tassertThat(properties.getConsistency()).isEqualTo(config.consistency());\n\t\tassertThat(properties.getUserName()).isEqualTo(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualTo(config.password());\n\t\tassertThat(properties.getRetentionPolicy()).isEqualTo(config.retentionPolicy());\n\t\tassertThat(properties.getRetentionDuration())\n\t\t\t\t.isEqualTo(config.retentionDuration());\n\t\tassertThat(properties.getRetentionReplicationFactor())\n\t\t\t\t.isEqualTo(config.retentionReplicationFactor());\n\t\tassertThat(properties.getRetentionShardDuration())\n\t\t\t\t.isEqualTo(config.retentionShardDuration());\n\t\tassertThat(properties.getUri()).isEqualTo(config.uri());\n\t\tassertThat(properties.isCompressed()).isEqualTo(config.compressed());\n\t\tassertThat(properties.isAutoCreateDb()).isEqualTo(config.autoCreateDb());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/influx/InfluxPropertiesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"NB"},{"authorDate":"2018-10-15 20:10:38","commitOrder":3,"curCode":"\tpublic void defaultValuesAreConsistent() {\n\t\tKairosProperties properties = new KairosProperties();\n\t\tKairosConfig config = KairosConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getUri()).isEqualToIgnoringWhitespace(config.uri());\n\t\tassertThat(properties.getUserName())\n\t\t\t\t.isEqualToIgnoringWhitespace(config.userName());\n\t\tassertThat(properties.getPassword())\n\t\t\t\t.isEqualToIgnoringWhitespace(config.password());\n\t}\n","date":"2018-10-15 20:13:10","endLine":42,"groupId":"10790","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"defaultValuesAreConsistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/36/1b6a7505a2530db675d97d5fd169d8c2b6440f.src","preCode":"\tpublic void defaultValuesAreConsistent() {\n\t\tKairosProperties properties = new KairosProperties();\n\t\tKairosConfig config = KairosConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getUri()).isEqualToIgnoringWhitespace(config.uri());\n\t\tassertThat(properties.getUserName())\n\t\t\t\t.isEqualToIgnoringWhitespace(config.userName());\n\t\tassertThat(properties.getPassword())\n\t\t\t\t.isEqualToIgnoringWhitespace(config.password());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/kairos/KairosPropertiesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"}],"commitId":"89349c6eb974478e186e31efe2418e497624ca6f","commitMessage":"@@@Auto-configure KairosDB metrics\n\nCloses gh-14821\n","date":"2018-10-15 20:13:10","modifiedFileCount":"0","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid defaultValuesAreConsistent() {\n\t\tInfluxProperties properties = new InfluxProperties();\n\t\tInfluxConfig config = InfluxConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getDb()).isEqualTo(config.db());\n\t\tassertThat(properties.getConsistency()).isEqualTo(config.consistency());\n\t\tassertThat(properties.getUserName()).isEqualTo(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualTo(config.password());\n\t\tassertThat(properties.getRetentionPolicy()).isEqualTo(config.retentionPolicy());\n\t\tassertThat(properties.getRetentionDuration()).isEqualTo(config.retentionDuration());\n\t\tassertThat(properties.getRetentionReplicationFactor()).isEqualTo(config.retentionReplicationFactor());\n\t\tassertThat(properties.getRetentionShardDuration()).isEqualTo(config.retentionShardDuration());\n\t\tassertThat(properties.getUri()).isEqualTo(config.uri());\n\t\tassertThat(properties.isCompressed()).isEqualTo(config.compressed());\n\t\tassertThat(properties.isAutoCreateDb()).isEqualTo(config.autoCreateDb());\n\t}\n","date":"2019-06-07 19:25:54","endLine":49,"groupId":"7185","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultValuesAreConsistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c4/5eb100277a2811f9ad758c7e82c4dc260aaa85.src","preCode":"\tpublic void defaultValuesAreConsistent() {\n\t\tInfluxProperties properties = new InfluxProperties();\n\t\tInfluxConfig config = InfluxConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getDb()).isEqualTo(config.db());\n\t\tassertThat(properties.getConsistency()).isEqualTo(config.consistency());\n\t\tassertThat(properties.getUserName()).isEqualTo(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualTo(config.password());\n\t\tassertThat(properties.getRetentionPolicy()).isEqualTo(config.retentionPolicy());\n\t\tassertThat(properties.getRetentionDuration()).isEqualTo(config.retentionDuration());\n\t\tassertThat(properties.getRetentionReplicationFactor()).isEqualTo(config.retentionReplicationFactor());\n\t\tassertThat(properties.getRetentionShardDuration()).isEqualTo(config.retentionShardDuration());\n\t\tassertThat(properties.getUri()).isEqualTo(config.uri());\n\t\tassertThat(properties.isCompressed()).isEqualTo(config.compressed());\n\t\tassertThat(properties.isAutoCreateDb()).isEqualTo(config.autoCreateDb());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/influx/InfluxPropertiesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid defaultValuesAreConsistent() {\n\t\tKairosProperties properties = new KairosProperties();\n\t\tKairosConfig config = KairosConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getUri()).isEqualToIgnoringWhitespace(config.uri());\n\t\tassertThat(properties.getUserName()).isEqualToIgnoringWhitespace(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualToIgnoringWhitespace(config.password());\n\t}\n","date":"2019-06-07 19:25:54","endLine":41,"groupId":"10790","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"defaultValuesAreConsistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7d/63395859ea78385fad916ac3795aa857401e2e.src","preCode":"\tpublic void defaultValuesAreConsistent() {\n\t\tKairosProperties properties = new KairosProperties();\n\t\tKairosConfig config = KairosConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getUri()).isEqualToIgnoringWhitespace(config.uri());\n\t\tassertThat(properties.getUserName()).isEqualToIgnoringWhitespace(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualToIgnoringWhitespace(config.password());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/kairos/KairosPropertiesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2021-03-17 22:57:06","commitOrder":5,"curCode":"\tvoid defaultValuesAreConsistent() {\n\t\tInfluxProperties properties = new InfluxProperties();\n\t\tInfluxConfig config = InfluxConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getDb()).isEqualTo(config.db());\n\t\tassertThat(properties.getConsistency()).isEqualTo(config.consistency());\n\t\tassertThat(properties.getUserName()).isEqualTo(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualTo(config.password());\n\t\tassertThat(properties.getRetentionPolicy()).isEqualTo(config.retentionPolicy());\n\t\tassertThat(properties.getRetentionDuration()).isEqualTo(config.retentionDuration());\n\t\tassertThat(properties.getRetentionReplicationFactor()).isEqualTo(config.retentionReplicationFactor());\n\t\tassertThat(properties.getRetentionShardDuration()).isEqualTo(config.retentionShardDuration());\n\t\tassertThat(properties.getUri()).isEqualTo(config.uri());\n\t\tassertThat(properties.isCompressed()).isEqualTo(config.compressed());\n\t\tassertThat(properties.isAutoCreateDb()).isEqualTo(config.autoCreateDb());\n\t\tassertThat(properties.getOrg()).isEqualTo(config.org());\n\t\tassertThat(properties.getToken()).isEqualTo(config.token());\n\t}\n","date":"2021-03-17 22:57:07","endLine":51,"groupId":"10963","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultValuesAreConsistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/40/0818dbc800d40cbd91cfc3f153b507316fcdac.src","preCode":"\tvoid defaultValuesAreConsistent() {\n\t\tInfluxProperties properties = new InfluxProperties();\n\t\tInfluxConfig config = InfluxConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getDb()).isEqualTo(config.db());\n\t\tassertThat(properties.getConsistency()).isEqualTo(config.consistency());\n\t\tassertThat(properties.getUserName()).isEqualTo(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualTo(config.password());\n\t\tassertThat(properties.getRetentionPolicy()).isEqualTo(config.retentionPolicy());\n\t\tassertThat(properties.getRetentionDuration()).isEqualTo(config.retentionDuration());\n\t\tassertThat(properties.getRetentionReplicationFactor()).isEqualTo(config.retentionReplicationFactor());\n\t\tassertThat(properties.getRetentionShardDuration()).isEqualTo(config.retentionShardDuration());\n\t\tassertThat(properties.getUri()).isEqualTo(config.uri());\n\t\tassertThat(properties.isCompressed()).isEqualTo(config.compressed());\n\t\tassertThat(properties.isAutoCreateDb()).isEqualTo(config.autoCreateDb());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/influx/InfluxPropertiesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid defaultValuesAreConsistent() {\n\t\tKairosProperties properties = new KairosProperties();\n\t\tKairosConfig config = KairosConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getUri()).isEqualToIgnoringWhitespace(config.uri());\n\t\tassertThat(properties.getUserName()).isEqualToIgnoringWhitespace(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualToIgnoringWhitespace(config.password());\n\t}\n","date":"2019-06-07 19:25:54","endLine":41,"groupId":"10963","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"defaultValuesAreConsistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7d/63395859ea78385fad916ac3795aa857401e2e.src","preCode":"\tvoid defaultValuesAreConsistent() {\n\t\tKairosProperties properties = new KairosProperties();\n\t\tKairosConfig config = KairosConfig.DEFAULT;\n\t\tassertStepRegistryDefaultValues(properties, config);\n\t\tassertThat(properties.getUri()).isEqualToIgnoringWhitespace(config.uri());\n\t\tassertThat(properties.getUserName()).isEqualToIgnoringWhitespace(config.userName());\n\t\tassertThat(properties.getPassword()).isEqualToIgnoringWhitespace(config.password());\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/kairos/KairosPropertiesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"b61e4bbe083013559700f0566d61657407129894","commitMessage":"@@@Merge pull request #25721 from shakuzen\n\n* pr/25721:\n  Polish \"Support sending metrics to InfluxDB v2\"\n  Support sending metrics to InfluxDB v2\n\nCloses gh-25721\n","date":"2021-03-17 22:57:07","modifiedFileCount":"3","status":"M","submitter":"Stephane Nicoll"}]
