[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents()\n\t\t\tthrows Exception {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\texisting.add(1001);\n\t\tList<Integer> result = this.binder\n\t\t\t\t.bind(\"foo\", INTEGER_LIST.withExistingValue(existing)).get();\n\t\tassertThat(result).isExactlyInstanceOf(LinkedList.class);\n\t\tassertThat(result).isSameAs(existing);\n\t\tassertThat(result).containsExactly(1);\n\t}\n","date":"2017-10-05 11:18:56","endLine":182,"groupId":"10218","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/87/79d5738f38b77fcf8a518875cdfd10bb408942.src","preCode":"\tpublic void bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents()\n\t\t\tthrows Exception {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\texisting.add(1001);\n\t\tList<Integer> result = this.binder\n\t\t\t\t.bind(\"foo\", INTEGER_LIST.withExistingValue(existing)).get();\n\t\tassertThat(result).isExactlyInstanceOf(LinkedList.class);\n\t\tassertThat(result).isSameAs(existing);\n\t\tassertThat(result).containsExactly(1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound()\n\t\t\tthrows Exception {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"faf[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\tBindResult<List<Integer>> result = this.binder.bind(\"foo\",\n\t\t\t\tINTEGER_LIST.withExistingValue(existing));\n\t\tassertThat(result.isBound()).isFalse();\n\t}\n","date":"2017-10-05 11:18:56","endLine":193,"groupId":"10218","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/87/79d5738f38b77fcf8a518875cdfd10bb408942.src","preCode":"\tpublic void bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound()\n\t\t\tthrows Exception {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"faf[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\tBindResult<List<Integer>> result = this.binder.bind(\"foo\",\n\t\t\t\tINTEGER_LIST.withExistingValue(existing));\n\t\tassertThat(result.isBound()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\texisting.add(1001);\n\t\tList<Integer> result = this.binder\n\t\t\t\t.bind(\"foo\", INTEGER_LIST.withExistingValue(existing)).get();\n\t\tassertThat(result).isExactlyInstanceOf(LinkedList.class);\n\t\tassertThat(result).isSameAs(existing);\n\t\tassertThat(result).containsExactly(1);\n\t}\n","date":"2017-12-12 18:57:30","endLine":178,"groupId":"10218","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/91/2409782fa790c57241a30e2b054fa4da84ba1b.src","preCode":"\tpublic void bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents()\n\t\t\tthrows Exception {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\texisting.add(1001);\n\t\tList<Integer> result = this.binder\n\t\t\t\t.bind(\"foo\", INTEGER_LIST.withExistingValue(existing)).get();\n\t\tassertThat(result).isExactlyInstanceOf(LinkedList.class);\n\t\tassertThat(result).isSameAs(existing);\n\t\tassertThat(result).containsExactly(1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":2,"curCode":"\tpublic void bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"faf[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\tBindResult<List<Integer>> result = this.binder.bind(\"foo\",\n\t\t\t\tINTEGER_LIST.withExistingValue(existing));\n\t\tassertThat(result.isBound()).isFalse();\n\t}\n","date":"2017-12-12 18:57:30","endLine":188,"groupId":"10218","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/91/2409782fa790c57241a30e2b054fa4da84ba1b.src","preCode":"\tpublic void bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound()\n\t\t\tthrows Exception {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"faf[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\tBindResult<List<Integer>> result = this.binder.bind(\"foo\",\n\t\t\t\tINTEGER_LIST.withExistingValue(existing));\n\t\tassertThat(result.isBound()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2018-03-19 03:46:13","commitOrder":3,"curCode":"\tpublic void bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\texisting.add(1001);\n\t\tList<Integer> result = this.binder\n\t\t\t\t.bind(\"foo\", INTEGER_LIST.withExistingValue(existing)).get();\n\t\tassertThat(result).isExactlyInstanceOf(LinkedList.class);\n\t\tassertThat(result).containsExactly(1);\n\t}\n","date":"2018-03-19 03:46:13","endLine":176,"groupId":"10218","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3c/eeff8dd792cd72898ad8888a79d2690c097f48.src","preCode":"\tpublic void bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\texisting.add(1001);\n\t\tList<Integer> result = this.binder\n\t\t\t\t.bind(\"foo\", INTEGER_LIST.withExistingValue(existing)).get();\n\t\tassertThat(result).isExactlyInstanceOf(LinkedList.class);\n\t\tassertThat(result).isSameAs(existing);\n\t\tassertThat(result).containsExactly(1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":3,"curCode":"\tpublic void bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"faf[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\tBindResult<List<Integer>> result = this.binder.bind(\"foo\",\n\t\t\t\tINTEGER_LIST.withExistingValue(existing));\n\t\tassertThat(result.isBound()).isFalse();\n\t}\n","date":"2017-12-12 18:57:30","endLine":188,"groupId":"10218","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/91/2409782fa790c57241a30e2b054fa4da84ba1b.src","preCode":"\tpublic void bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"faf[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\tBindResult<List<Integer>> result = this.binder.bind(\"foo\",\n\t\t\t\tINTEGER_LIST.withExistingValue(existing));\n\t\tassertThat(result.isBound()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"N"}],"commitId":"c66781a3d31f3654008d355108cdab4af65f5130","commitMessage":"@@@Set using collection copies when possible\n\nUpdate `Map` and `Collection` binders to create a copy of the existing\ncollection whenever possible. Prior to this commit the binder would\nalways mutate the existing value and then call the setter with the\nsame instance. This could cause issues if the setter expected a\ndifferent instance.\n\nFixes gh-12322\n","date":"2018-03-19 03:46:13","modifiedFileCount":"4","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\texisting.add(1001);\n\t\tList<Integer> result = this.binder.bind(\"foo\", INTEGER_LIST.withExistingValue(existing)).get();\n\t\tassertThat(result).isExactlyInstanceOf(LinkedList.class);\n\t\tassertThat(result).containsExactly(1);\n\t}\n","date":"2019-06-07 19:25:54","endLine":184,"groupId":"101408","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/022252c53b76e3ffcb116feb8baa62bd6611cf.src","preCode":"\tpublic void bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\texisting.add(1001);\n\t\tList<Integer> result = this.binder.bind(\"foo\", INTEGER_LIST.withExistingValue(existing)).get();\n\t\tassertThat(result).isExactlyInstanceOf(LinkedList.class);\n\t\tassertThat(result).containsExactly(1);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"faf[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\tBindResult<List<Integer>> result = this.binder.bind(\"foo\", INTEGER_LIST.withExistingValue(existing));\n\t\tassertThat(result.isBound()).isFalse();\n\t}\n","date":"2019-06-07 19:25:54","endLine":193,"groupId":"101408","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c2/022252c53b76e3ffcb116feb8baa62bd6611cf.src","preCode":"\tpublic void bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound() {\n\t\tthis.sources.add(new MockConfigurationPropertySource(\"faf[0]\", \"1\"));\n\t\tList<Integer> existing = new LinkedList<>();\n\t\texisting.add(1000);\n\t\tBindResult<List<Integer>> result = this.binder.bind(\"foo\", INTEGER_LIST.withExistingValue(existing));\n\t\tassertThat(result.isBound()).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
