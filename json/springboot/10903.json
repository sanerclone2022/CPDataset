[{"authorTime":"2018-10-13 18:30:57","codes":[{"authorDate":"2019-05-04 04:42:04","commitOrder":2,"curCode":"\tpublic void backsOffWhenDisabled() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(CustomAuditEventRepositoryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"management.auditevents.enabled=false\")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean(AuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthenticationAuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthorizationAuditListener.class));\n\t}\n","date":"2019-05-04 04:48:29","endLine":110,"groupId":"7708","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"backsOffWhenDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ad/695960792af2681d1042f82e77d3095399b90d.src","preCode":"\tpublic void backsOffWhenDisabled() {\n\t\tthis.contextRunner\n\t\t\t\t.withUserConfiguration(CustomAuditEventRepositoryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"management.auditevents.enabled=false\")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean(AuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthenticationAuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthorizationAuditListener.class));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"},{"authorDate":"2018-10-13 18:30:57","commitOrder":2,"curCode":"\tpublic void autoConfiguresThreadPoolMetricsWithEmbeddedReactiveJetty() {\n\t\tnew ReactiveWebApplicationContextRunner(\n\t\t\t\tAnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t\t\t.withConfiguration(\n\t\t\t\t\t\t\t\tAutoConfigurations.of(JettyMetricsAutoConfiguration.class,\n\t\t\t\t\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class,\n\t\t\t\t\t\t\t\tMeterRegistryConfiguration.class)\n\t\t\t\t\t\t.run((context) -> {\n\t\t\t\t\t\t\tcontext.publishEvent(\n\t\t\t\t\t\t\t\t\tnew ApplicationStartedEvent(new SpringApplication(),\n\t\t\t\t\t\t\t\t\t\t\tnull, context.getSourceApplicationContext()));\n\t\t\t\t\t\t\tSimpleMeterRegistry registry = context\n\t\t\t\t\t\t\t\t\t.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\t\t\tassertThat(registry.find(\"jetty.threads.config.min\").meter())\n\t\t\t\t\t\t\t\t\t.isNotNull();\n\t\t\t\t\t\t});\n\t}\n","date":"2018-10-13 18:52:51","endLine":89,"groupId":"3119","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"autoConfiguresThreadPoolMetricsWithEmbeddedReactiveJetty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/75/189b843793a0b7a4f3ca92096dc11ffddd2b03.src","preCode":"\tpublic void autoConfiguresThreadPoolMetricsWithEmbeddedReactiveJetty() {\n\t\tnew ReactiveWebApplicationContextRunner(\n\t\t\t\tAnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t\t\t.withConfiguration(\n\t\t\t\t\t\t\t\tAutoConfigurations.of(JettyMetricsAutoConfiguration.class,\n\t\t\t\t\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class,\n\t\t\t\t\t\t\t\tMeterRegistryConfiguration.class)\n\t\t\t\t\t\t.run((context) -> {\n\t\t\t\t\t\t\tcontext.publishEvent(\n\t\t\t\t\t\t\t\t\tnew ApplicationStartedEvent(new SpringApplication(),\n\t\t\t\t\t\t\t\t\t\t\tnull, context.getSourceApplicationContext()));\n\t\t\t\t\t\t\tSimpleMeterRegistry registry = context\n\t\t\t\t\t\t\t\t\t.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\t\t\tassertThat(registry.find(\"jetty.threads.config.min\").meter())\n\t\t\t\t\t\t\t\t\t.isNotNull();\n\t\t\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/jetty/JettyMetricsAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"NB"}],"commitId":"07d6eb6397d5362db6917c134f0190d76a0c5fb6","commitMessage":"@@@Disable auditing infrastructure by default\n\nPrior to this commit.  the audit auto-configuration provided\nan `InMemoryAuditEventRepository` bean. This commit changes the auto-config\nso that an `AuditEventRepository` is not provided and instead the auto-config\nis conditional on the presence of a `AuditEventRepository` bean. This is done\nto encourage the use of a custom implementation of `AuditEventRepository`\nsince the in-memory one is quite limited and not suitable for production.\nA flag is available if the auto-configuration needs to be turned off even\nin the presence of a bean.\n\nCloses gh-16110\n","date":"2019-05-04 04:48:29","modifiedFileCount":"5","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid backsOffWhenDisabled() {\n\t\tthis.contextRunner.withUserConfiguration(CustomAuditEventRepositoryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"management.auditevents.enabled=false\")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean(AuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthenticationAuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthorizationAuditListener.class));\n\t}\n","date":"2019-06-07 19:25:54","endLine":97,"groupId":"7708","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"backsOffWhenDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/24/6a1041ef44cbfc365513bd31ba7fad80db706f.src","preCode":"\tpublic void backsOffWhenDisabled() {\n\t\tthis.contextRunner.withUserConfiguration(CustomAuditEventRepositoryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"management.auditevents.enabled=false\")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean(AuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthenticationAuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthorizationAuditListener.class));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid autoConfiguresThreadPoolMetricsWithEmbeddedReactiveJetty() {\n\t\tnew ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(JettyMetricsAutoConfiguration.class,\n\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class, MeterRegistryConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tcontext.publishEvent(new ApplicationStartedEvent(new SpringApplication(), null,\n\t\t\t\t\t\t\tcontext.getSourceApplicationContext()));\n\t\t\t\t\tSimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\tassertThat(registry.find(\"jetty.threads.config.min\").meter()).isNotNull();\n\t\t\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":76,"groupId":"3119","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"autoConfiguresThreadPoolMetricsWithEmbeddedReactiveJetty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/e1fe3411057d8ca8a7b6053356ec7b4ba0b24b.src","preCode":"\tpublic void autoConfiguresThreadPoolMetricsWithEmbeddedReactiveJetty() {\n\t\tnew ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(JettyMetricsAutoConfiguration.class,\n\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class, MeterRegistryConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tcontext.publishEvent(new ApplicationStartedEvent(new SpringApplication(), null,\n\t\t\t\t\t\t\tcontext.getSourceApplicationContext()));\n\t\t\t\t\tSimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\tassertThat(registry.find(\"jetty.threads.config.min\").meter()).isNotNull();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/jetty/JettyMetricsAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-09-16 20:08:56","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid backsOffWhenDisabled() {\n\t\tthis.contextRunner.withUserConfiguration(CustomAuditEventRepositoryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"management.auditevents.enabled=false\")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean(AuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthenticationAuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthorizationAuditListener.class));\n\t}\n","date":"2019-06-07 19:25:54","endLine":97,"groupId":"10903","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"backsOffWhenDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/24/6a1041ef44cbfc365513bd31ba7fad80db706f.src","preCode":"\tvoid backsOffWhenDisabled() {\n\t\tthis.contextRunner.withUserConfiguration(CustomAuditEventRepositoryConfiguration.class)\n\t\t\t\t.withPropertyValues(\"management.auditevents.enabled=false\")\n\t\t\t\t.run((context) -> assertThat(context).doesNotHaveBean(AuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthenticationAuditListener.class)\n\t\t\t\t\t\t.doesNotHaveBean(AuthorizationAuditListener.class));\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"N"},{"authorDate":"2021-09-16 20:08:56","commitOrder":4,"curCode":"\tvoid autoConfiguresThreadPoolMetricsWithEmbeddedReactiveJetty() {\n\t\tnew ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(JettyMetricsAutoConfiguration.class,\n\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class, MeterRegistryConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tcontext.publishEvent(createApplicationStartedEvent(context.getSourceApplicationContext()));\n\t\t\t\t\tSimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\tassertThat(registry.find(\"jetty.threads.config.min\").meter()).isNotNull();\n\t\t\t\t});\n\t}\n","date":"2021-09-16 20:08:57","endLine":79,"groupId":"10903","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"autoConfiguresThreadPoolMetricsWithEmbeddedReactiveJetty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8d/377317b2c317aa0294487ef1be5376aeeea819.src","preCode":"\tvoid autoConfiguresThreadPoolMetricsWithEmbeddedReactiveJetty() {\n\t\tnew ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(JettyMetricsAutoConfiguration.class,\n\t\t\t\t\t\tReactiveWebServerFactoryAutoConfiguration.class))\n\t\t\t\t.withUserConfiguration(ReactiveWebServerConfiguration.class, MeterRegistryConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tcontext.publishEvent(new ApplicationStartedEvent(new SpringApplication(), null,\n\t\t\t\t\t\t\tcontext.getSourceApplicationContext()));\n\t\t\t\t\tSimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class);\n\t\t\t\t\tassertThat(registry.find(\"jetty.threads.config.min\").meter()).isNotNull();\n\t\t\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/jetty/JettyMetricsAutoConfigurationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"ce95e093087d591626762089095705826b5adab8","commitMessage":"@@@Merge pull request #27878 from bono007\n\n* pr/27878:\n  Polish \"Add startup time metrics\"\n  Add startup time metrics\n\nCloses gh-27878\n","date":"2021-09-16 20:08:57","modifiedFileCount":"15","status":"M","submitter":"Stephane Nicoll"}]
