[{"authorTime":"2018-01-16 22:53:46","codes":[{"authorDate":"2018-01-16 22:53:46","commitOrder":1,"curCode":"\tpublic void noCompressionForSmallResponse() throws Exception {\n\t\tAssumptions.assumeThat(getFactory()).isInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(3001);\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get()\n\t\t\t\t.exchange().flatMap(res -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-01-16 23:01:34","endLine":285,"groupId":"10592","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"noCompressionForSmallResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bb/081cced17a53ffe64a62d9b413964bf06483b0.src","preCode":"\tpublic void noCompressionForSmallResponse() throws Exception {\n\t\tAssumptions.assumeThat(getFactory()).isInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(3001);\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get()\n\t\t\t\t.exchange().flatMap(res -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"B"},{"authorDate":"2018-01-16 22:53:46","commitOrder":1,"curCode":"\tpublic void noCompressionForUserAgent() throws Exception {\n\t\tAssumptions.assumeThat(getFactory()).isNotInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap(res -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-01-16 23:01:34","endLine":308,"groupId":"6282","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"noCompressionForUserAgent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bb/081cced17a53ffe64a62d9b413964bf06483b0.src","preCode":"\tpublic void noCompressionForUserAgent() throws Exception {\n\t\tAssumptions.assumeThat(getFactory()).isNotInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap(res -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"B"}],"commitId":"381d759ef1cde66ea329ccae7ff558d4c0bd307b","commitMessage":"@@@Support server.compression with reactive servers\n\nThis commit adds support for HTTP compression with reactive servers. \nwith the following exceptions:\n\n* `server.compression.mime-types` and\n`server.compression.exclude-user-agents` are not supported by Reactor\nNetty at the moment\n\n* `server.compression.min-response-size` is only supported by Reactor\nNetty right now.  since other implementations rely on the\n`\"Content-Length\"` HTTP response header to measure the response size\nand most reactive responses are using `\"Transfer-Encoding: chunked\"`.\n\nCloses gh-10782\n","date":"2018-01-16 23:01:34","modifiedFileCount":"4","status":"B","submitter":"Brian Clozel"},{"authorTime":"2018-01-18 03:01:19","codes":[{"authorDate":"2018-01-18 03:01:19","commitOrder":2,"curCode":"\tpublic void noCompressionForSmallResponse() throws Exception {\n\t\tAssumptions.assumeThat(getFactory())\n\t\t\t\t.isInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(3001);\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-01-18 03:03:23","endLine":293,"groupId":"10592","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"noCompressionForSmallResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/1c253f6bc5cc68ecc04864b69aba1248aaea7b.src","preCode":"\tpublic void noCompressionForSmallResponse() throws Exception {\n\t\tAssumptions.assumeThat(getFactory()).isInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(3001);\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get()\n\t\t\t\t.exchange().flatMap(res -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"},{"authorDate":"2018-01-18 03:01:19","commitOrder":2,"curCode":"\tpublic void noCompressionForUserAgent() throws Exception {\n\t\tAssumptions.assumeThat(getFactory())\n\t\t\t\t.isNotInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-01-18 03:03:23","endLine":318,"groupId":"6282","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"noCompressionForUserAgent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/1c253f6bc5cc68ecc04864b69aba1248aaea7b.src","preCode":"\tpublic void noCompressionForUserAgent() throws Exception {\n\t\tAssumptions.assumeThat(getFactory()).isNotInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap(res -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"54c0cf513bbb1871a058f281cee7d993bb77258d","commitMessage":"@@@Polish\n","date":"2018-01-18 03:03:23","modifiedFileCount":"93","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-02-28 16:37:13","codes":[{"authorDate":"2018-02-28 16:37:13","commitOrder":3,"curCode":"\tpublic void noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(3001);\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-02-28 16:37:13","endLine":284,"groupId":"10592","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"noCompressionForSmallResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/38/5fd055827db32399af22e658a928faec5059f8.src","preCode":"\tpublic void noCompressionForSmallResponse() throws Exception {\n\t\tAssumptions.assumeThat(getFactory())\n\t\t\t\t.isInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(3001);\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2018-02-28 16:37:13","commitOrder":3,"curCode":"\tpublic void noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] {\"testUserAgent\"});\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-02-28 16:37:13","endLine":305,"groupId":"6282","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"noCompressionForUserAgent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/38/5fd055827db32399af22e658a928faec5059f8.src","preCode":"\tpublic void noCompressionForUserAgent() throws Exception {\n\t\tAssumptions.assumeThat(getFactory())\n\t\t\t\t.isNotInstanceOf(NettyReactiveWebServerFactory.class);\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"52b40ee4ad9639757c0f5a48047762523c97c263","commitMessage":"@@@Merge pull request #12269 from smaldini:addNettyCompressionOptions\n\n* pr/12269:\n  Polish\n  Add Netty Compression support\n","date":"2018-02-28 16:37:13","modifiedFileCount":"3","status":"M","submitter":"Brian Clozel"},{"authorTime":"2018-02-28 16:37:13","codes":[{"authorDate":"2018-09-21 22:31:24","commitOrder":4,"curCode":"\tpublic void noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-09-21 22:31:24","endLine":274,"groupId":"10592","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"noCompressionForSmallResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fb/ce32c475a6ac0f35484dcb44d6f8282b507226.src","preCode":"\tpublic void noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(3001);\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2018-02-28 16:37:13","commitOrder":4,"curCode":"\tpublic void noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] {\"testUserAgent\"});\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-02-28 16:37:13","endLine":305,"groupId":"6282","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"noCompressionForUserAgent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/38/5fd055827db32399af22e658a928faec5059f8.src","preCode":"\tpublic void noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] {\"testUserAgent\"});\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"N"}],"commitId":"dda875033bda05d87cbf3e6fb49b741a570b58e0","commitMessage":"@@@Merge pull request #14549 from qct:change-to-datasize\n\n* pr/14549:\n  Polish \"Migrate size properties to DataSize\"\n  Migrate size properties to DataSize\n","date":"2018-09-21 22:31:24","modifiedFileCount":"23","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2018-12-20 23:30:51","codes":[{"authorDate":"2018-12-20 23:30:51","commitOrder":5,"curCode":"\tpublic void noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-12-20 23:30:51","endLine":270,"groupId":"10592","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"noCompressionForSmallResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/efb072bf19178cd3bf5a868ea286c7a541560c.src","preCode":"\tpublic void noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2018-12-20 23:30:51","commitOrder":5,"curCode":"\tpublic void noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap((res) -> res.toEntity(Void.class))\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2018-12-20 23:30:51","endLine":292,"groupId":"6282","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"noCompressionForUserAgent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/9e/efb072bf19178cd3bf5a868ea286c7a541560c.src","preCode":"\tpublic void noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchange().flatMap((res) -> res.toEntity(Void.class)).block();\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"9d2d6d5812d34b0bc04da3a124b9c5c0da511c04","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-20 23:30:51","modifiedFileCount":"22","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange().flatMap((res) -> res.toEntity(Void.class))\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2019-06-07 19:25:54","endLine":266,"groupId":"10592","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"noCompressionForSmallResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a9/a739d292ccd3041f23b75eb257d34a1f1c2441.src","preCode":"\tpublic void noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange().flatMap((res) -> res.toEntity(Void.class))\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":6,"curCode":"\tvoid noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\").exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2019-06-07 19:25:54","endLine":287,"groupId":"6282","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"noCompressionForUserAgent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a9/a739d292ccd3041f23b75eb257d34a1f1c2441.src","preCode":"\tpublic void noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\").exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-09-30 19:21:16","codes":[{"authorDate":"2020-09-30 19:21:16","commitOrder":7,"curCode":"\tvoid noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchangeToMono(ClientResponse::toBodilessEntity)\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2020-09-30 19:46:57","endLine":307,"groupId":"4041","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"noCompressionForSmallResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/7ed7191ac2d8b055dd714c69dbf65005365e00.src","preCode":"\tvoid noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchange().flatMap((res) -> res.toEntity(Void.class))\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"},{"authorDate":"2020-09-30 19:21:16","commitOrder":7,"curCode":"\tvoid noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchangeToMono(ClientResponse::toBodilessEntity).block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2020-09-30 19:46:57","endLine":329,"groupId":"6282","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"noCompressionForUserAgent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/1a/7ed7191ac2d8b055dd714c69dbf65005365e00.src","preCode":"\tvoid noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\").exchange()\n\t\t\t\t.flatMap((res) -> res.toEntity(Void.class)).block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"366fec33d06b6ab4ee4f1bc9513c07a227d207de","commitMessage":"@@@Adapt to API change in Spring Framework 5.3.0 snapshots\n\nSee gh-23534\n","date":"2020-09-30 19:46:57","modifiedFileCount":"9","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2020-09-30 22:03:33","codes":[{"authorDate":"2020-09-30 22:03:33","commitOrder":8,"curCode":"\tvoid noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().retrieve().toBodilessEntity().block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2020-09-30 22:09:41","endLine":303,"groupId":"4041","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"noCompressionForSmallResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/45/7b7403fcef4e0dd362c4fa612c8155231b8781.src","preCode":"\tvoid noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().exchangeToMono(ClientResponse::toBodilessEntity)\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"},{"authorDate":"2020-09-30 22:03:33","commitOrder":8,"curCode":"\tvoid noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\").retrieve().toBodilessEntity()\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2020-09-30 22:09:41","endLine":324,"groupId":"6282","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"noCompressionForUserAgent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/45/7b7403fcef4e0dd362c4fa612c8155231b8781.src","preCode":"\tvoid noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\")\n\t\t\t\t.exchangeToMono(ClientResponse::toBodilessEntity).block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"}],"commitId":"de32fab3249260616ce2b895e005bc7e98e4ef12","commitMessage":"@@@Adapt to API change in Spring Framework 5.3.0 snapshots\n\nSee gh-23534\n","date":"2020-09-30 22:09:41","modifiedFileCount":"4","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2021-04-13 18:31:59","codes":[{"authorDate":"2020-09-30 22:03:33","commitOrder":9,"curCode":"\tvoid noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().retrieve().toBodilessEntity().block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2020-09-30 22:09:41","endLine":303,"groupId":"101915","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"noCompressionForSmallResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/45/7b7403fcef4e0dd362c4fa612c8155231b8781.src","preCode":"\tvoid noCompressionForSmallResponse() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setMinResponseSize(DataSize.ofBytes(3001));\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().retrieve().toBodilessEntity().block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"N"},{"authorDate":"2021-04-13 18:31:59","commitOrder":9,"curCode":"\tprotected void noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\").retrieve().toBodilessEntity()\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","date":"2021-04-13 19:18:29","endLine":351,"groupId":"101915","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"noCompressionForUserAgent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3f/0b2f15594981c21c323beb09c60732a11ffdda.src","preCode":"\tvoid noCompressionForUserAgent() {\n\t\tCompression compression = new Compression();\n\t\tcompression.setEnabled(true);\n\t\tcompression.setExcludedUserAgents(new String[] { \"testUserAgent\" });\n\t\tWebClient client = prepareCompressionTest(compression);\n\t\tResponseEntity<Void> response = client.get().header(\"User-Agent\", \"testUserAgent\").retrieve().toBodilessEntity()\n\t\t\t\t.block(Duration.ofSeconds(30));\n\t\tassertResponseIsNotCompressed(response);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"}],"commitId":"059c4fbd43660eab3af3470b9ff7828c47309651","commitMessage":"@@@Test JettyReactiveWebServerFactory against Jetty 10\n\nCloses gh-26039\n","date":"2021-04-13 19:18:29","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"}]
