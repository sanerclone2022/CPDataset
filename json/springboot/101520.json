[{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid createCreatesContributorsBasedOnExistingSources() {\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p1\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource3 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tthis.environment.getPropertySources().addLast(propertySource3);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.environment,\n\t\t\t\tthis.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(propertySource3);\n\t}\n","date":"2020-07-23 12:02:32","endLine":93,"groupId":"10654","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createCreatesContributorsBasedOnExistingSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f5/64ce1d2a681bac25316a0403ad911dfa57af4e.src","preCode":"\tvoid createCreatesContributorsBasedOnExistingSources() {\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p1\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource3 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tthis.environment.getPropertySources().addLast(propertySource3);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.environment,\n\t\t\t\tthis.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(propertySource3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid createWhenHasDefaultPropertySourceMovesItToLastContributor() {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(defaultPropertySource);\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.environment,\n\t\t\t\tthis.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(defaultPropertySource);\n\t}\n","date":"2020-07-23 12:02:32","endLine":112,"groupId":"10654","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createWhenHasDefaultPropertySourceMovesItToLastContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f5/64ce1d2a681bac25316a0403ad911dfa57af4e.src","preCode":"\tvoid createWhenHasDefaultPropertySourceMovesItToLastContributor() {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(defaultPropertySource);\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.environment,\n\t\t\t\tthis.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(defaultPropertySource);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"}],"commitId":"3352024b1ca641fa0beaaa4cd87788c190242eb0","commitMessage":"@@@Provide ConfigFileApplicationListener replacement\n\nDeprecate `ConfigFileApplicationListener` and provide a replacement\nmechanism that supports arbitrary config data imports.\n\nThis commit updates the following areas:\n\n- Extract `EnvironmentPostProcessor` invocation logic from the\n  `ConfigFileApplicationListener` to new dedicated listener. Also\n  providing support for `Log` injection.\n\n- Extract `RandomPropertySource` adding logic from the\n  `ConfigFileApplicationListener` to a dedicated class.\n\n- Migrate to the recently introduced `DefaultPropertiesPropertySource`\n  class when moving the defaultProperties `PropertySource`\n\n- Replace processing logic with a phased approach to ensure that\n  profile enablement happens in a distinct phase and that profiles\n  can no longer be activated on an ad-hoc basis.\n\n- Provide a more predictable and logical import order for processing\n  `application.properties` and `application.yml` files.\n\n- Add support for a `spring.config.import` property which can be used\n  to import additional config data. Also provide a pluggable API\n  allowing third-parties to resolve and load locations themselves.\n\n- Add `spring.config.activate.on-profile` support which replaces the\n  existing `spring.profiles` property.\n\n- Add `spring.config.activate.on-cloud-platform` support which allows\n  a config data document to be active only on a given cloud platform.\n\n- Support a `spring.config.use-legacy-processing` property allowing the\n  previous processing logic to be used.\n\nCloses gh-22497\n\nCo-authored-by: Madhura Bhave <mbhave@vmware.com>\n","date":"2020-07-23 12:02:32","modifiedFileCount":"17","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-08-21 08:26:01","codes":[{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid createCreatesContributorsBasedOnExistingSources() {\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p1\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource3 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tthis.environment.getPropertySources().addLast(propertySource3);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapRegistry,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(propertySource3);\n\t}\n","date":"2020-08-21 12:49:03","endLine":97,"groupId":"10654","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createCreatesContributorsBasedOnExistingSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c7/0ab5431cf9009d51444e8c1c38746ee84013e5.src","preCode":"\tvoid createCreatesContributorsBasedOnExistingSources() {\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p1\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource3 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tthis.environment.getPropertySources().addLast(propertySource3);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.environment,\n\t\t\t\tthis.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(propertySource3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-08-21 08:26:01","commitOrder":2,"curCode":"\tvoid createWhenHasDefaultPropertySourceMovesItToLastContributor() {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(defaultPropertySource);\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapRegistry,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(defaultPropertySource);\n\t}\n","date":"2020-08-21 12:49:03","endLine":116,"groupId":"10654","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createWhenHasDefaultPropertySourceMovesItToLastContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/c7/0ab5431cf9009d51444e8c1c38746ee84013e5.src","preCode":"\tvoid createWhenHasDefaultPropertySourceMovesItToLastContributor() {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(defaultPropertySource);\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.environment,\n\t\t\t\tthis.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(defaultPropertySource);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"d123c924a0e1fbe6b4e8f27baf98b5bfd1a64a86","commitMessage":"@@@Add BootstrapRegisty support for config data\n\nExpose the `BootstrapRegisty` to both `ConfigDataLocationResolver` and\n`ConfigDataLoader` implementations. The registry is exposed via the\ncontext interfaces and may be used to reuse instances that are expensive\nto create. It may also be used to ultimately register beans with the\n`ApplicationContext`.\n\nCloses gh-22956\n","date":"2020-08-21 12:49:03","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-09-17 15:09:41","codes":[{"authorDate":"2020-09-17 15:09:41","commitOrder":3,"curCode":"\tvoid createCreatesContributorsBasedOnExistingSources() {\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p1\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource3 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tthis.environment.getPropertySources().addLast(propertySource3);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(propertySource3);\n\t}\n","date":"2020-09-17 15:31:00","endLine":97,"groupId":"10654","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createCreatesContributorsBasedOnExistingSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/be/14fb81b38045448782ff605b291fa231e48260.src","preCode":"\tvoid createCreatesContributorsBasedOnExistingSources() {\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p1\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource3 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tthis.environment.getPropertySources().addLast(propertySource3);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapRegistry,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(propertySource3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-09-17 15:09:41","commitOrder":3,"curCode":"\tvoid createWhenHasDefaultPropertySourceMovesItToLastContributor() {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(defaultPropertySource);\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(defaultPropertySource);\n\t}\n","date":"2020-09-17 15:31:00","endLine":116,"groupId":"10654","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createWhenHasDefaultPropertySourceMovesItToLastContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/be/14fb81b38045448782ff605b291fa231e48260.src","preCode":"\tvoid createWhenHasDefaultPropertySourceMovesItToLastContributor() {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(defaultPropertySource);\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapRegistry,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(defaultPropertySource);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"1ae14362110360cc558bcd498fa67f70a35b8373","commitMessage":"@@@Refactor BootstrapRegistry support\n\nRefactor `BootstrapRegistry` support following initial prototype work\nwith the Spring Cloud team.\n\nThis update splits the `BootstrapRegistry` API into `BootstrapRegistry`. \n`BootstrapContext` and  `ConfigurableBootstrapContext` interfaces and\nmoves it to the same package as `SpringApplication`.\n\nA new `Bootstrapper` interface has been introduced that can be added\nto the `SpringApplication` to customize the `BootstrapRegistry` before\nit's used.\n\nCloses gh-23326\n","date":"2020-09-17 15:31:00","modifiedFileCount":"40","status":"M","submitter":"Phillip Webb"},{"authorTime":"2020-12-16 11:53:54","codes":[{"authorDate":"2020-12-16 11:53:54","commitOrder":4,"curCode":"\tvoid createCreatesContributorsBasedOnExistingSources() {\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p1\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource3 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tthis.environment.getPropertySources().addLast(propertySource3);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(propertySource3);\n\t}\n","date":"2020-12-16 11:53:54","endLine":98,"groupId":"101520","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createCreatesContributorsBasedOnExistingSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3d/0d07e5cb96552e3c4f3d1faf80112abfe83d8e.src","preCode":"\tvoid createCreatesContributorsBasedOnExistingSources() {\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p1\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource3 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tthis.environment.getPropertySources().addLast(propertySource3);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(propertySource3);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-12-16 11:53:54","commitOrder":4,"curCode":"\tvoid createWhenHasDefaultPropertySourceMovesItToLastContributor() {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(defaultPropertySource);\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles, null);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(defaultPropertySource);\n\t}\n","date":"2020-12-16 11:53:54","endLine":117,"groupId":"101520","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createWhenHasDefaultPropertySourceMovesItToLastContributor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/3d/0d07e5cb96552e3c4f3d1faf80112abfe83d8e.src","preCode":"\tvoid createWhenHasDefaultPropertySourceMovesItToLastContributor() {\n\t\tMockPropertySource defaultPropertySource = new MockPropertySource(\"defaultProperties\");\n\t\tMockPropertySource propertySource1 = new MockPropertySource(\"p2\");\n\t\tMockPropertySource propertySource2 = new MockPropertySource(\"p3\");\n\t\tthis.environment.getPropertySources().addLast(defaultPropertySource);\n\t\tthis.environment.getPropertySources().addLast(propertySource1);\n\t\tthis.environment.getPropertySources().addLast(propertySource2);\n\t\tConfigDataEnvironment configDataEnvironment = new ConfigDataEnvironment(this.logFactory, this.bootstrapContext,\n\t\t\t\tthis.environment, this.resourceLoader, this.additionalProfiles);\n\t\tList<ConfigDataEnvironmentContributor> children = configDataEnvironment.getContributors().getRoot()\n\t\t\t\t.getChildren(ImportPhase.BEFORE_PROFILE_ACTIVATION);\n\t\tObject[] wrapped = children.stream().filter((child) -> child.getKind() == Kind.EXISTING)\n\t\t\t\t.map(ConfigDataEnvironmentContributor::getPropertySource).toArray();\n\t\tassertThat(wrapped[1]).isEqualTo(propertySource1);\n\t\tassertThat(wrapped[2]).isEqualTo(propertySource2);\n\t\tassertThat(wrapped[3]).isEqualTo(defaultPropertySource);\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigDataEnvironmentTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"5bd5ca5107b8938750883479edf8421214398fbe","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-24524\n","date":"2020-12-16 11:53:54","modifiedFileCount":"4","status":"M","submitter":"Phillip Webb"}]
