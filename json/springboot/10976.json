[{"authorTime":"2018-02-02 23:28:02","codes":[{"authorDate":"2018-02-02 23:28:02","commitOrder":1,"curCode":"\tpublic void configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(this.binders,\n\t\t\t\tthis.filters, this.customizers, true);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t\t.contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","date":"2018-02-07 19:13:11","endLine":138,"groupId":"7342","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/76/951880a2e3a13a8bd284fcdb1e4e4ca3b08812.src","preCode":"\tpublic void configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(this.binders,\n\t\t\t\tthis.filters, this.customizers, true);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t\t.contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"},{"authorDate":"2018-02-02 23:28:02","commitOrder":1,"curCode":"\tpublic void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(this.binders,\n\t\t\t\tthis.filters, this.customizers, false);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t.doesNotContain(this.mockRegistry);\n\t}\n","date":"2018-02-07 19:13:11","endLine":147,"groupId":"7344","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/76/951880a2e3a13a8bd284fcdb1e4e4ca3b08812.src","preCode":"\tpublic void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(this.binders,\n\t\t\t\tthis.filters, this.customizers, false);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t.doesNotContain(this.mockRegistry);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"8229733f0d33658a9f3d8e66a5f7ece4e468f3f4","commitMessage":"@@@Avoid triggering early init when creating MeterRegistryPostProceesor\n\nCloses gh-11890\n","date":"2018-02-07 19:13:11","modifiedFileCount":"2","status":"B","submitter":"Andy Wilkinson"},{"authorTime":"2018-12-20 00:57:19","codes":[{"authorDate":"2018-12-20 00:57:19","commitOrder":2,"curCode":"\tpublic void configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(\n\t\t\t\tcreateObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders),\n\t\t\t\ttrue);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t\t.contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","date":"2018-12-20 00:57:19","endLine":152,"groupId":"7342","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7f/0c8f4c523211a1deeeb66099a96bb2f4a10e4a.src","preCode":"\tpublic void configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(this.binders,\n\t\t\t\tthis.filters, this.customizers, true);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t\t.contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2018-12-20 00:57:19","commitOrder":2,"curCode":"\tpublic void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(\n\t\t\t\tcreateObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders),\n\t\t\t\tfalse);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t.doesNotContain(this.mockRegistry);\n\t}\n","date":"2018-12-20 00:57:19","endLine":163,"groupId":"7813","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7f/0c8f4c523211a1deeeb66099a96bb2f4a10e4a.src","preCode":"\tpublic void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(this.binders,\n\t\t\t\tthis.filters, this.customizers, false);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t.doesNotContain(this.mockRegistry);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"de599819ae16bb18406d60f273c059d5a3b7e714","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2018-12-20 00:57:19","modifiedFileCount":"4","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-04-24 22:09:41","codes":[{"authorDate":"2019-04-24 22:09:41","commitOrder":3,"curCode":"\tpublic void configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(\n\t\t\t\tcreateObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders),\n\t\t\t\ttrue, false);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t\t.contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","date":"2019-04-24 22:09:41","endLine":176,"groupId":"747","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/74/6b71bd028ba977a10bf8511a42d8af76173f93.src","preCode":"\tpublic void configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(\n\t\t\t\tcreateObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders),\n\t\t\t\ttrue);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t\t.contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2019-04-24 22:09:41","commitOrder":3,"curCode":"\tpublic void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(\n\t\t\t\tcreateObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders),\n\t\t\t\tfalse, false);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t.doesNotContain(this.mockRegistry);\n\t}\n","date":"2019-04-24 22:09:41","endLine":187,"groupId":"745","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/74/6b71bd028ba977a10bf8511a42d8af76173f93.src","preCode":"\tpublic void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(\n\t\t\t\tcreateObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders),\n\t\t\t\tfalse);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t.doesNotContain(this.mockRegistry);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"4754386361ce7ea774fe9d985ca585ec098dcc0b","commitMessage":"@@@Merge branch '2.1.x'\n\nCloses gh-16644\n","date":"2019-04-24 22:09:41","modifiedFileCount":"5","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-04-24 22:09:41","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders), true, false);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries()).contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","date":"2019-06-07 19:25:54","endLine":159,"groupId":"747","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4b/909d198ba21955f52216d777aa3852533d366f.src","preCode":"\tpublic void configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders), true, false);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries()).contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2019-04-24 22:09:41","commitOrder":4,"curCode":"\tpublic void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(\n\t\t\t\tcreateObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders),\n\t\t\t\tfalse, false);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t.doesNotContain(this.mockRegistry);\n\t}\n","date":"2019-04-24 22:09:41","endLine":187,"groupId":"745","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/74/6b71bd028ba977a10bf8511a42d8af76173f93.src","preCode":"\tpublic void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(\n\t\t\t\tcreateObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders),\n\t\t\t\tfalse, false);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t.doesNotContain(this.mockRegistry);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"N"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2020-08-08 22:53:42","codes":[{"authorDate":"2020-08-08 22:53:42","commitOrder":5,"curCode":"\tvoid configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tgiven(this.mockRegistry.config()).willReturn(this.mockConfig);\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders), true, false);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries()).contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","date":"2020-08-10 22:22:03","endLine":159,"groupId":"10976","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bb/9dbe5d08d872b2a062f866dc761713695cce17.src","preCode":"\tvoid configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders), true, false);\n\t\ttry {\n\t\t\tconfigurer.configure(this.mockRegistry);\n\t\t\tassertThat(Metrics.globalRegistry.getRegistries()).contains(this.mockRegistry);\n\t\t}\n\t\tfinally {\n\t\t\tMetrics.removeRegistry(this.mockRegistry);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2020-08-08 22:53:42","commitOrder":5,"curCode":"\tvoid configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tgiven(this.mockRegistry.config()).willReturn(this.mockConfig);\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders), false, false);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries()).doesNotContain(this.mockRegistry);\n\t}\n","date":"2020-08-10 22:22:03","endLine":168,"groupId":"10976","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bb/9dbe5d08d872b2a062f866dc761713695cce17.src","preCode":"\tpublic void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {\n\t\tMeterRegistryConfigurer configurer = new MeterRegistryConfigurer(\n\t\t\t\tcreateObjectProvider(this.customizers),\n\t\t\t\tcreateObjectProvider(this.filters), createObjectProvider(this.binders),\n\t\t\t\tfalse, false);\n\t\tconfigurer.configure(this.mockRegistry);\n\t\tassertThat(Metrics.globalRegistry.getRegistries())\n\t\t\t\t.doesNotContain(this.mockRegistry);\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"969dd35e456e6683dd5b767be2079085ccff3941","commitMessage":"@@@Upgrade to Mockito 3.4.6\n\nCloses gh-22838\n","date":"2020-08-10 22:22:03","modifiedFileCount":"68","status":"M","submitter":"Andy Wilkinson"}]
