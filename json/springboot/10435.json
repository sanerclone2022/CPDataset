[{"authorTime":"2018-01-10 12:57:10","codes":[{"authorDate":"2018-01-10 12:57:10","commitOrder":1,"curCode":"\tpublic void getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationWebEndpointExtensionConfiguration.class, (discoverer) -> {\n\t\t\tMap<String, ExposableWebEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(\"test\");\n\t\t\tassertThat(requestPredicates(endpoint)).has(\n\t\t\t\t\trequestPredicates(path(\"test\").httpMethod(WebEndpointHttpMethod.GET)\n\t\t\t\t\t\t\t.consumes().produces(\"application/json\")));\n\t\t});\n\t}\n","date":"2018-01-20 12:44:24","endLine":111,"groupId":"3631","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/85530ca22a6e0ff917f25d06135c15e5880fc5.src","preCode":"\tpublic void getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationWebEndpointExtensionConfiguration.class, (discoverer) -> {\n\t\t\tMap<String, ExposableWebEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(\"test\");\n\t\t\tassertThat(requestPredicates(endpoint)).has(\n\t\t\t\t\trequestPredicates(path(\"test\").httpMethod(WebEndpointHttpMethod.GET)\n\t\t\t\t\t\t\t.consumes().produces(\"application/json\")));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/WebEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2018-01-10 12:57:10","commitOrder":1,"curCode":"\tpublic void getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream() {\n\t\tload(ResourceEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<String, ExposableWebEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"resource\");\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(\"resource\");\n\t\t\tassertThat(requestPredicates(endpoint)).has(requestPredicates(\n\t\t\t\t\tpath(\"resource\").httpMethod(WebEndpointHttpMethod.GET).consumes()\n\t\t\t\t\t\t\t.produces(\"application/octet-stream\")));\n\t\t});\n\t}\n","date":"2018-01-20 12:44:24","endLine":218,"groupId":"3635","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/85530ca22a6e0ff917f25d06135c15e5880fc5.src","preCode":"\tpublic void getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream() {\n\t\tload(ResourceEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<String, ExposableWebEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"resource\");\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(\"resource\");\n\t\t\tassertThat(requestPredicates(endpoint)).has(requestPredicates(\n\t\t\t\t\tpath(\"resource\").httpMethod(WebEndpointHttpMethod.GET).consumes()\n\t\t\t\t\t\t\t.produces(\"application/octet-stream\")));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/WebEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"B"}],"commitId":"1d39feffeabf4b94e3f900b941b58e0443d5887a","commitMessage":"@@@Overhaul actuator endpoint code\n\nRefactor several areas of the actuator endpoint code in order to make\nfuture extensions easier. The primary goal is to introduce the concept\nof an `ExposableEndpoint` that has technology specific subclasses and\ncan carry additional data for filters to use. Many other changes have\nbeen made along the way including:\n\n* A new EndpointSupplier interface that allows cleaner separation of\n  supplying vs discovering endpoints. This allows cleaner class names\n  and allows for better auto-configuration since a user can choose to\n  provide their own supplier entirely.\n\n* A `DiscoveredEndpoint` interface that allows the `EndpointFilter`\n  to be greatly simplified. A filter now doesn't need to know about\n  discovery concerns unless absolutely necessary.\n\n* Improved naming and package structure. Many technology specific\n  concerns are now grouped in a better way. Related concerns are\n  co-located and concepts from one area no longer leakage into another.\n\n* Simplified `HandlerMapping` implementations. Many common concerns have\n  been pulled up helping to create simpler subclasses.\n\n* Simplified JMX adapters. Many of the intermediary `Info` classes have\n  been removed. The `DiscoveredJmxOperation` is now responsible for\n  mapping methods to operations.\n\n* A specific @`HealthEndpointCloudFoundryExtension` for Cloud Foundry.\n  The extension logic used to create a \"full\" health endpoint extension\n  has been made explicit.\n\nFixes gh-11428\nFixes gh-11581\n","date":"2018-01-20 12:44:24","modifiedFileCount":"63","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-10-15 04:53:28","codes":[{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationWebEndpointExtensionConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(EndpointId.of(\"test\"));\n\t\t\tassertThat(requestPredicates(endpoint)).has(\n\t\t\t\t\trequestPredicates(path(\"test\").httpMethod(WebEndpointHttpMethod.GET)\n\t\t\t\t\t\t\t.consumes().produces(\"application/json\")));\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":106,"groupId":"273","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bf/0a91ca1423ca6c6602eb804829e29f9eb217b9.src","preCode":"\tpublic void getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationWebEndpointExtensionConfiguration.class, (discoverer) -> {\n\t\t\tMap<String, ExposableWebEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"test\");\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(\"test\");\n\t\t\tassertThat(requestPredicates(endpoint)).has(\n\t\t\t\t\trequestPredicates(path(\"test\").httpMethod(WebEndpointHttpMethod.GET)\n\t\t\t\t\t\t\t.consumes().produces(\"application/json\")));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/WebEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2018-10-15 04:53:28","commitOrder":2,"curCode":"\tpublic void getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream() {\n\t\tload(ResourceEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"resource\"));\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(EndpointId.of(\"resource\"));\n\t\t\tassertThat(requestPredicates(endpoint)).has(requestPredicates(\n\t\t\t\t\tpath(\"resource\").httpMethod(WebEndpointHttpMethod.GET).consumes()\n\t\t\t\t\t\t\t.produces(\"application/octet-stream\")));\n\t\t});\n\t}\n","date":"2018-10-15 04:53:28","endLine":210,"groupId":"273","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bf/0a91ca1423ca6c6602eb804829e29f9eb217b9.src","preCode":"\tpublic void getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream() {\n\t\tload(ResourceEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<String, ExposableWebEndpoint> endpoints = mapEndpoints(\n\t\t\t\t\tdiscoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(\"resource\");\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(\"resource\");\n\t\t\tassertThat(requestPredicates(endpoint)).has(requestPredicates(\n\t\t\t\t\tpath(\"resource\").httpMethod(WebEndpointHttpMethod.GET).consumes()\n\t\t\t\t\t\t\t.produces(\"application/octet-stream\")));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/WebEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"1bf97e9b5e2187a04d8471ead73b629444ecc838","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-10-15 04:53:28","modifiedFileCount":"66","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationWebEndpointExtensionConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(EndpointId.of(\"test\"));\n\t\t\tassertThat(requestPredicates(endpoint)).has(requestPredicates(\n\t\t\t\t\tpath(\"test\").httpMethod(WebEndpointHttpMethod.GET).consumes().produces(\"application/json\")));\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":101,"groupId":"10435","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/da/985443bea0ad3da7015db0f4e97f8c8438e5bb.src","preCode":"\tpublic void getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint() {\n\t\tload(OverriddenOperationWebEndpointExtensionConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"test\"));\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(EndpointId.of(\"test\"));\n\t\t\tassertThat(requestPredicates(endpoint)).has(requestPredicates(\n\t\t\t\t\tpath(\"test\").httpMethod(WebEndpointHttpMethod.GET).consumes().produces(\"application/json\")));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/WebEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":3,"curCode":"\tvoid getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream() {\n\t\tload(ResourceEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"resource\"));\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(EndpointId.of(\"resource\"));\n\t\t\tassertThat(requestPredicates(endpoint)).has(requestPredicates(path(\"resource\")\n\t\t\t\t\t.httpMethod(WebEndpointHttpMethod.GET).consumes().produces(\"application/octet-stream\")));\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":189,"groupId":"10435","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/da/985443bea0ad3da7015db0f4e97f8c8438e5bb.src","preCode":"\tpublic void getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream() {\n\t\tload(ResourceEndpointConfiguration.class, (discoverer) -> {\n\t\t\tMap<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints());\n\t\t\tassertThat(endpoints).containsOnlyKeys(EndpointId.of(\"resource\"));\n\t\t\tExposableWebEndpoint endpoint = endpoints.get(EndpointId.of(\"resource\"));\n\t\t\tassertThat(requestPredicates(endpoint)).has(requestPredicates(path(\"resource\")\n\t\t\t\t\t.httpMethod(WebEndpointHttpMethod.GET).consumes().produces(\"application/octet-stream\")));\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/WebEndpointDiscovererTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
