[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2017-10-05 11:18:56","endLine":68,"groupId":"9580","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f3/ab2b13adbb45be2725d3262ff9fbfd2af1d6d5.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tpublic void matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t}\n","date":"2017-10-05 11:18:56","endLine":92,"groupId":"9580","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWithIncludeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f3/ab2b13adbb45be2725d3262ff9fbfd2af1d6d5.src","preCode":"\tpublic void matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2018-09-01 08:17:28","codes":[{"authorDate":"2018-09-01 08:17:28","commitOrder":2,"curCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse();\n\t}\n","date":"2018-09-12 04:28:13","endLine":71,"groupId":"9580","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/b5f1122730e7f0a94ee3970f81a029c88fe874.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2018-09-01 08:17:28","commitOrder":2,"curCode":"\tpublic void matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse();\n\t}\n","date":"2018-09-12 04:28:13","endLine":97,"groupId":"9580","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWithIncludeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/98/b5f1122730e7f0a94ee3970f81a029c88fe874.src","preCode":"\tpublic void matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"ab6bdc7ae20a4990d20cf39f0ce20d3846e1b739","commitMessage":"@@@Apply springSecurity configurer to WebTestClient\n\nAlso.  @WebFluxTest now adds any ServerHttpSecurity beans\nto the context.\n\nCloses gh-13632\n","date":"2018-09-12 04:28:13","modifiedFileCount":"9","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2019-03-21 09:00:48","codes":[{"authorDate":"2019-03-21 09:00:48","commitOrder":3,"curCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2019-03-21 09:00:48","endLine":68,"groupId":"9580","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/28/b9bc9e2b9a75c08deae95576260d2b07bfd278.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-03-21 09:00:48","commitOrder":3,"curCode":"\tpublic void matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t}\n","date":"2019-03-21 09:00:48","endLine":92,"groupId":"9580","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWithIncludeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/28/b9bc9e2b9a75c08deae95576260d2b07bfd278.src","preCode":"\tpublic void matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(\n\t\t\t\tWithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"0d136f057347dbb71cf70f22e15dfdce025900cc","commitMessage":"@@@Merge branch '2.1.x'\n","date":"2019-03-21 09:00:48","modifiedFileCount":"2","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","date":"2019-06-07 19:25:54","endLine":66,"groupId":"9580","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ef/8a06374e2b7609ef5187574b4d9ad56a54a097.src","preCode":"\tpublic void matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":4,"curCode":"\tvoid matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t}\n","date":"2019-06-07 19:25:54","endLine":88,"groupId":"9580","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWithIncludeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ef/8a06374e2b7609ef5187574b4d9ad56a54a097.src","preCode":"\tpublic void matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-07-23 03:39:26","codes":[{"authorDate":"2019-07-23 03:39:26","commitOrder":5,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t}\n","date":"2019-07-23 03:39:26","endLine":72,"groupId":"9580","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/66/563d166661bb2fb1d4ca305f12c397e3c87c4b.src","preCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-07-23 03:39:26","commitOrder":5,"curCode":"\tvoid matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t}\n","date":"2019-07-23 03:39:26","endLine":96,"groupId":"9580","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWithIncludeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/66/563d166661bb2fb1d4ca305f12c397e3c87c4b.src","preCode":"\tvoid matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"6580d394653b3fb0752a3a358abb3b525d92f2c1","commitMessage":"@@@Merge pull request #17601 from nosan\n\n* pr/17601:\n  Include WebFilter beans in WebFluxTest slice\n\nCloses gh-17601\n","date":"2019-07-23 03:39:26","modifiedFileCount":"2","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2020-07-27 17:12:09","codes":[{"authorDate":"2020-07-27 17:12:09","commitOrder":6,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","date":"2020-07-27 17:12:09","endLine":75,"groupId":"9580","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/ce35b10194fb750e568492599ade27ba4cbdb0.src","preCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-07-27 17:12:09","commitOrder":6,"curCode":"\tvoid matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","date":"2020-07-27 17:12:09","endLine":101,"groupId":"9580","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"matchWithIncludeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a8/ce35b10194fb750e568492599ade27ba4cbdb0.src","preCode":"\tvoid matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"8a9cc6422111c3c1c6da42ed3eb67d26921ebb04","commitMessage":"@@@Merge branch '2.3.x'\n\nCloses gh-22577\n","date":"2020-07-27 17:12:09","modifiedFileCount":"4","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2021-02-01 23:39:52","codes":[{"authorDate":"2021-02-01 23:39:52","commitOrder":7,"curCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleDialect.class)).isFalse();\n\t}\n","date":"2021-02-01 23:39:52","endLine":78,"groupId":"101041","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"matchWhenHasController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/ff59b9fb2deabf78477caa065297583fef0c86.src","preCode":"\tvoid matchWhenHasController() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-02-01 23:39:52","commitOrder":7,"curCode":"\tvoid matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleDialect.class)).isFalse();\n\t}\n","date":"2021-02-01 23:39:52","endLine":106,"groupId":"101041","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"matchWithIncludeFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6e/ff59b9fb2deabf78477caa065297583fef0c86.src","preCode":"\tvoid matchWithIncludeFilter() throws Exception {\n\t\tWebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithIncludeFilter.class);\n\t\tassertThat(excludes(filter, Controller1.class)).isFalse();\n\t\tassertThat(excludes(filter, Controller2.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWeb.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleService.class)).isTrue();\n\t\tassertThat(excludes(filter, ExampleRepository.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleWebFilter.class)).isFalse();\n\t\tassertThat(excludes(filter, ExampleModule.class)).isFalse();\n\t}\n","realPath":"spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilterTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"7f8ea33359603a0501e9fdbea1a8602b0bc36429","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-25073\n","date":"2021-02-01 23:39:52","modifiedFileCount":"4","status":"M","submitter":"Andy Wilkinson"}]
