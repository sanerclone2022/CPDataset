[{"authorTime":"2017-11-03 09:00:55","codes":[{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization() throws Exception {\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith(response -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","date":"2017-11-03 09:00:55","endLine":94,"groupId":"9156","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a9/3a33f215f6e8bbfbaab304db45b5582682d800.src","preCode":"\tpublic void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization() throws Exception {\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith(response -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2017-11-03 09:00:55","commitOrder":1,"curCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied() throws Exception {\n\t\tBDDMockito.given(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tBDDMockito.given(this.tokenValidator.validate(any()))\n\t\t\t\t.willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith(response -> {\n\t\t\t\t\tassertThat(response.getStatus())\n\t\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t\t\t\t})\n\t\t\t\t.verifyComplete();\n\t}\n","date":"2017-11-03 09:00:55","endLine":141,"groupId":"12778","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/a9/3a33f215f6e8bbfbaab304db45b5582682d800.src","preCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied() throws Exception {\n\t\tBDDMockito.given(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tBDDMockito.given(this.tokenValidator.validate(any()))\n\t\t\t\t.willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith(response -> {\n\t\t\t\t\tassertThat(response.getStatus())\n\t\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t\t\t\t})\n\t\t\t\t.verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"}],"commitId":"d50fe8874fa442cbd3ea380754e7b412a77aed9a","commitMessage":"@@@Add CF support for reactive actuators\n\nCloses gh-10780\n","date":"2017-11-03 09:00:55","modifiedFileCount":"5","status":"B","submitter":"Madhura Bhave"},{"authorTime":"2017-11-03 15:03:36","codes":[{"authorDate":"2017-11-03 15:03:36","commitOrder":2,"curCode":"\tpublic void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization()\n\t\t\tthrows Exception {\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","date":"2017-11-03 15:13:02","endLine":91,"groupId":"9156","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e5/c847b7055485c1de2dcb1e0d00d41eaae48369.src","preCode":"\tpublic void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization() throws Exception {\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith(response -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2017-11-03 15:03:36","commitOrder":2,"curCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied()\n\t\t\tthrows Exception {\n\t\tgiven(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tgiven(this.tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> {\n\t\t\t\t\tassertThat(response.getStatus())\n\t\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t\t\t\t}).verifyComplete();\n\t}\n","date":"2017-11-03 15:13:02","endLine":137,"groupId":"12778","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e5/c847b7055485c1de2dcb1e0d00d41eaae48369.src","preCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied() throws Exception {\n\t\tBDDMockito.given(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tBDDMockito.given(this.tokenValidator.validate(any()))\n\t\t\t\t.willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith(response -> {\n\t\t\t\t\tassertThat(response.getStatus())\n\t\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t\t\t\t})\n\t\t\t\t.verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"3f00ba3cad8c708eaa06ef599be104e077736132","commitMessage":"@@@Polish\n","date":"2017-11-03 15:13:02","modifiedFileCount":"21","status":"M","submitter":"Phillip Webb"},{"authorTime":"2017-11-06 19:44:53","codes":[{"authorDate":"2017-11-03 15:03:36","commitOrder":3,"curCode":"\tpublic void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization()\n\t\t\tthrows Exception {\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","date":"2017-11-03 15:13:02","endLine":91,"groupId":"9156","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e5/c847b7055485c1de2dcb1e0d00d41eaae48369.src","preCode":"\tpublic void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization()\n\t\t\tthrows Exception {\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2017-11-06 19:44:53","commitOrder":3,"curCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied()\n\t\t\tthrows Exception {\n\t\tgiven(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tgiven(this.tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","date":"2017-11-06 19:44:53","endLine":136,"groupId":"12778","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/bc/5b533b82b2ab05d2c090d58966dd849dfa3330.src","preCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied()\n\t\t\tthrows Exception {\n\t\tgiven(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tgiven(this.tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> {\n\t\t\t\t\tassertThat(response.getStatus())\n\t\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED.getStatus());\n\t\t\t\t}).verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"60afbdc868401ec057ebe6b84e13fc9385800fba","commitMessage":"@@@Polish\n","date":"2017-11-06 19:44:53","modifiedFileCount":"12","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2017-12-12 18:57:24","codes":[{"authorDate":"2017-12-12 18:57:24","commitOrder":4,"curCode":"\tpublic void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization() {\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","date":"2017-12-12 18:57:30","endLine":89,"groupId":"9156","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/85/1ec6b5f3d924fb4f77b72c8712c53830a7796b.src","preCode":"\tpublic void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization()\n\t\t\tthrows Exception {\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest\n\t\t\t\t.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2017-12-12 18:57:24","commitOrder":4,"curCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied() {\n\t\tgiven(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tgiven(this.tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","date":"2017-12-12 18:57:30","endLine":132,"groupId":"12778","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/85/1ec6b5f3d924fb4f77b72c8712c53830a7796b.src","preCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied()\n\t\t\tthrows Exception {\n\t\tgiven(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tgiven(this.tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken())\n\t\t\t\t\t\t.build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith((response) -> assertThat(response.getStatus())\n\t\t\t\t\t\t.isEqualTo(Reason.ACCESS_DENIED.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"23218add9042af53b5ab465528bf588601ce2f7f","commitMessage":"@@@Polish\n","date":"2017-12-12 18:57:30","modifiedFileCount":"615","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization() {\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\")).consumeNextWith(\n\t\t\t\t(response) -> assertThat(response.getStatus()).isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","date":"2019-06-07 19:25:54","endLine":85,"groupId":"10718","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/16/28e08958339a97f14ad6ec8e53235d39c530f9.src","preCode":"\tpublic void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization() {\n\t\tMockServerWebExchange request = MockServerWebExchange\n\t\t\t\t.from(MockServerHttpRequest.get(\"/a\").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\")).consumeNextWith(\n\t\t\t\t(response) -> assertThat(response.getStatus()).isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":5,"curCode":"\tvoid preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied() {\n\t\tgiven(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tgiven(this.tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith(\n\t\t\t\t\t\t(response) -> assertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","date":"2019-06-07 19:25:54","endLine":120,"groupId":"10718","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/16/28e08958339a97f14ad6ec8e53235d39c530f9.src","preCode":"\tpublic void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied() {\n\t\tgiven(this.securityService.getAccessLevel(mockAccessToken(), \"my-app-id\"))\n\t\t\t\t.willReturn(Mono.just(AccessLevel.RESTRICTED));\n\t\tgiven(this.tokenValidator.validate(any())).willReturn(Mono.empty());\n\t\tMockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get(\"/a\")\n\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"bearer \" + mockAccessToken()).build());\n\t\tStepVerifier.create(this.interceptor.preHandle(request, \"/a\"))\n\t\t\t\t.consumeNextWith(\n\t\t\t\t\t\t(response) -> assertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus()))\n\t\t\t\t.verifyComplete();\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"}]
