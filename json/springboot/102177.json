[{"authorTime":"2017-10-05 07:38:18","codes":[{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":140,"groupId":"2805","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/47/f47aeca311308be690b31287bd7527f5c1325c.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"},{"authorDate":"2017-10-05 07:38:18","commitOrder":1,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tif (getCompression() != null && getCompression().getEnabled()) {\n\t\t\tcustomizeCompression(connector);\n\t\t}\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2017-10-05 11:18:56","endLine":321,"groupId":"5902","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f8/40905b425dd60da61e7c43bda32a35f2a80b16.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tif (getCompression() != null && getCompression().getEnabled()) {\n\t\t\tcustomizeCompression(connector);\n\t\t}\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"B"}],"commitId":"33edfdab46085422e04b171cd2834e996bfe2cb9","commitMessage":"@@@Merge branch 'gh-9316'\n","date":"2017-10-05 11:18:56","modifiedFileCount":"0","status":"B","submitter":"Phillip Webb"},{"authorTime":"2017-11-03 05:42:26","codes":[{"authorDate":"2017-11-03 05:42:26","commitOrder":2,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tTomcatConnectorCustomizer ssl = new SslConnectorCustomizer(getSsl(), getSslStoreProvider());\n\t\tssl.customize(connector);\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2017-11-03 20:56:06","endLine":151,"groupId":"2805","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/72/704b39f2aa2a2f9e14a3c71ca5fa2e520529b1.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2017-11-03 05:42:26","commitOrder":2,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\n\t\tTomcatConnectorCustomizer ssl = new SslConnectorCustomizer(getSsl(), getSslStoreProvider());\n\t\tssl.customize(connector);\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2017-11-03 20:56:06","endLine":307,"groupId":"2805","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d6/3758e7ae4985a1630715e0fd458181165dfa02.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tif (getCompression() != null && getCompression().getEnabled()) {\n\t\t\tcustomizeCompression(connector);\n\t\t}\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"7f58db7d0e9084881f4171a9cc5ac4ae19647598","commitMessage":"@@@Apply TLS configuration to reactive web servers\n\nThis commit applies the SSL configuration to the following reactive web\nservers: Jetty.  Tomcat.  Undertow.  Reactor Netty.\n\nCloses gh-9431\n","date":"2017-11-03 20:56:06","modifiedFileCount":"10","status":"M","submitter":"Brian Clozel"},{"authorTime":"2017-11-03 18:34:30","codes":[{"authorDate":"2017-11-03 18:34:30","commitOrder":3,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tTomcatConnectorCustomizer ssl = new SslConnectorCustomizer(getSsl(), getSslStoreProvider());\n\t\t\tssl.customize(connector);\n\t\t\tif (getHttp2() != null && getHttp2().getEnabled()) {\n\t\t\t\tconnector.addUpgradeProtocol(new Http2Protocol());\n\t\t\t}\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2017-11-03 21:10:40","endLine":157,"groupId":"2805","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/e2/dfdf45615e22206d36d554943656c0a384efed.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tTomcatConnectorCustomizer ssl = new SslConnectorCustomizer(getSsl(), getSslStoreProvider());\n\t\tssl.customize(connector);\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2017-11-03 18:34:30","commitOrder":3,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tTomcatConnectorCustomizer ssl = new SslConnectorCustomizer(getSsl(), getSslStoreProvider());\n\t\t\tssl.customize(connector);\n\t\t\tif (getHttp2() != null && getHttp2().getEnabled()) {\n\t\t\t\tconnector.addUpgradeProtocol(new Http2Protocol());\n\t\t\t}\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2017-11-03 21:10:40","endLine":313,"groupId":"5902","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/eb/2ee922f797b132924ed2acb4dfa09129a886cd.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\n\t\tTomcatConnectorCustomizer ssl = new SslConnectorCustomizer(getSsl(), getSslStoreProvider());\n\t\tssl.customize(connector);\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"}],"commitId":"bb9396e3a40abb49a542e829ec1a157fca9fb55a","commitMessage":"@@@Enable HTTP/2 support for Tomcat and Undertow\n\nThis commit enables HTTP/2 support for Tomcat and Undertow.  for both\nServlet-based and Reactive applications.\n\nEnabling the `server.http2.enabled` configuration flag is enough with\nUndertow.\n\nTomcat has a few prerequisites:\n\n* Tomcat 8.5 requires JDK8+ and the proper libtcnative version installed\non the host\n* Tomcat 9.0.x requires JDK9+\n\nCloses gh-10043\n","date":"2017-11-03 21:10:40","modifiedFileCount":"5","status":"M","submitter":"Brian Clozel"},{"authorTime":"2017-11-04 04:35:07","codes":[{"authorDate":"2017-11-04 04:35:07","commitOrder":4,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2017-11-04 10:07:23","endLine":150,"groupId":"2805","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/06/7a875b76fb595e6aca11a36abf665a187c77e3.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tTomcatConnectorCustomizer ssl = new SslConnectorCustomizer(getSsl(), getSslStoreProvider());\n\t\t\tssl.customize(connector);\n\t\t\tif (getHttp2() != null && getHttp2().getEnabled()) {\n\t\t\t\tconnector.addUpgradeProtocol(new Http2Protocol());\n\t\t\t}\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2017-11-04 04:35:07","commitOrder":4,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2017-11-04 10:07:23","endLine":308,"groupId":"5902","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2b/34126bcd4dbf898eeb711b15e6a1c0e2543cfa.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\n\t\t\r\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tTomcatConnectorCustomizer ssl = new SslConnectorCustomizer(getSsl(), getSslStoreProvider());\n\t\t\tssl.customize(connector);\n\t\t\tif (getHttp2() != null && getHttp2().getEnabled()) {\n\t\t\t\tconnector.addUpgradeProtocol(new Http2Protocol());\n\t\t\t}\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"427d262297f95911a80043b9bfdc0416585c9d8b","commitMessage":"@@@Polish\n","date":"2017-11-04 10:07:23","modifiedFileCount":"17","status":"M","submitter":"Phillip Webb"},{"authorTime":"2017-11-04 04:35:07","codes":[{"authorDate":"2018-01-11 18:15:02","commitOrder":5,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2018-01-11 18:15:02","endLine":180,"groupId":"5902","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7b/9b86162f6556b734d93b9fe19455d9f9d0629b.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2017-11-04 04:35:07","commitOrder":5,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2017-11-04 10:07:23","endLine":308,"groupId":"5902","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/2b/34126bcd4dbf898eeb711b15e6a1c0e2543cfa.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"N"}],"commitId":"d264af8142440fb071a87229184045d0cf405c4a","commitMessage":"@@@Apply server.tomcat.* config to reactive servers\n\nThis commit applies most `server.tomcat.*` configuration\nproperties to Tomcat when set up as a reactive web server.\n\nSome Servlet-specific properties are not applied:\n\n* server.tomcat.additional-tld-skip-patterns\n* server.tomcat.redirect-context-root\n* server.tomcat.use-relative-redirects\n\nFixes gh-11334\n","date":"2018-01-11 18:15:02","modifiedFileCount":"8","status":"M","submitter":"Brian Clozel"},{"authorTime":"2018-07-28 08:35:43","codes":[{"authorDate":"2018-07-28 08:35:43","commitOrder":6,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2018-07-28 08:35:43","endLine":179,"groupId":"5902","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/b7/6f1f37bd6450da824383d6c9e7e7bbcceb8cbc.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2018-07-28 08:35:43","commitOrder":6,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2018-07-28 08:35:43","endLine":308,"groupId":"5902","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/64/6b756f8ace017d8af2df44d8fb95d8b9b9098b.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0 ? getPort() : 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"a6c9c92f2e17251137e3f59899266ead2274d6f7","commitMessage":"@@@Merge branch '2.0.x'\n","date":"2018-07-28 08:35:43","modifiedFileCount":"358","status":"M","submitter":"Phillip Webb"},{"authorTime":"2019-04-05 03:41:15","codes":[{"authorDate":"2019-04-05 03:41:15","commitOrder":7,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector);\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2019-04-05 03:41:15","endLine":190,"groupId":"12336","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/cb/97180cf9de714ca54d494d3f9012cce59b37ef.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2019-04-05 03:41:15","commitOrder":7,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector);\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2019-04-05 03:41:15","endLine":325,"groupId":"12336","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7b/0e9eb653e6143e871d400a06dd3207a978d1cf.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"7587af343d29fdaabf71bffee60ee4e93ad2d6f9","commitMessage":"@@@Merge pull request #16342 Pascal Zwick\n\n* pr/16342:\n  Polish \"Simplify the configuration of the ProtocolHandler\"\n  Simplify the configuration of the ProtocolHandler\n","date":"2019-04-05 03:41:15","modifiedFileCount":"9","status":"M","submitter":"Madhura Bhave"},{"authorTime":"2019-04-19 16:02:56","codes":[{"authorDate":"2019-04-19 16:02:56","commitOrder":8,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2019-04-19 16:02:56","endLine":190,"groupId":"11718","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/10/2407114c6e502aff96d9fe5ca6c6f9de81b3e6.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector);\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2019-04-19 16:02:56","commitOrder":8,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2019-04-19 16:02:56","endLine":325,"groupId":"11718","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7d/7a1262185aba8e5e11db3b11009cf5bbc2a102.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector);\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(\n\t\t\t\tgetCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"cd3f4213c6fddef3de1645b0b26d1a4ab62828d5","commitMessage":"@@@Merge pull request #16597 from izeye\n\n* pr/16597:\n  Polish\n","date":"2019-04-19 16:02:56","modifiedFileCount":"4","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-09-09 15:57:28","codes":[{"authorDate":"2019-09-09 15:57:28","commitOrder":9,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2019-09-09 15:57:28","endLine":201,"groupId":"11718","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/01/a63a70deb94f095dbaa0db017a7f88cbef035a.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2019-09-09 15:57:28","commitOrder":9,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2019-09-09 15:57:28","endLine":324,"groupId":"11718","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/4c/63e69538e2fb20fbb1f70d1cedc0281a772637.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"cd8fab8442c0b14cb8436dadab7e4787106b9d5e","commitMessage":"@@@Merge pull request #18175 from gaohanghang\n\n* pr/18175:\n  Simplify code\n\nCloses gh-18175\n","date":"2019-09-09 15:57:28","modifiedFileCount":"6","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2020-04-25 14:54:32","codes":[{"authorDate":"2020-04-25 14:54:32","commitOrder":10,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2020-04-25 14:54:32","endLine":201,"groupId":"11718","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/6f/a8583313359058ba425e25fd9f1ff6465a928a.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2020-04-25 14:54:32","commitOrder":10,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2020-04-25 14:54:32","endLine":324,"groupId":"11718","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/ac/b52c875415d6a9c0652fb764618eef08d7964a.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(this.getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", this.getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"5b1b7bcb9b3901f7821e6a9edbef5cadd453cf7e","commitMessage":"@@@Merge pull request #21007 from izeye\n\n* pr/21007:\n  Update copyright year of changed files\n  Remove this keyword on member method invocations\n\nCloses gh-21007\n","date":"2020-04-25 14:54:32","modifiedFileCount":"45","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2020-05-14 04:24:36","codes":[{"authorDate":"2020-05-14 04:24:36","commitOrder":11,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setProperty(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2020-05-14 07:48:51","endLine":201,"groupId":"11718","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/7c/e213cba849eabbc7766d1d6204e1ce2e7893d7.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2020-05-14 04:24:36","commitOrder":11,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setProperty(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2020-05-14 07:48:51","endLine":323,"groupId":"11718","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/78/fc1974b5fc4ad7be3c9b917f33d0d322ca892c.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setAttribute(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"12381467da22899baac84837436274230c278751","commitMessage":"@@@Polish\n","date":"2020-05-14 07:48:51","modifiedFileCount":"15","status":"M","submitter":"Phillip Webb"},{"authorTime":"2021-04-12 14:44:11","codes":[{"authorDate":"2021-04-12 14:44:11","commitOrder":12,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setProperty(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getHttp2() != null && getHttp2().isEnabled()) {\n\t\t\tconnector.addUpgradeProtocol(new Http2Protocol());\n\t\t}\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2021-04-13 00:16:14","endLine":204,"groupId":"102177","id":23,"instanceNumber":1,"isCurCommit":1,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/86/96ac6f82fb1d738fcddfec73a61b3a5d620709.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setProperty(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2021-04-12 14:44:11","commitOrder":12,"curCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setProperty(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getHttp2() != null && getHttp2().isEnabled()) {\n\t\t\tconnector.addUpgradeProtocol(new Http2Protocol());\n\t\t}\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","date":"2021-04-13 00:16:14","endLine":336,"groupId":"102177","id":24,"instanceNumber":2,"isCurCommit":1,"methodName":"customizeConnector","params":"(Connectorconnector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/35/b3b7383a4342f1638e9cf45d6138ca0f6ddbb8.src","preCode":"\tprotected void customizeConnector(Connector connector) {\n\t\tint port = Math.max(getPort(), 0);\n\t\tconnector.setPort(port);\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\tconnector.setProperty(\"server\", getServerHeader());\n\t\t}\n\t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n\t\t\tcustomizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler());\n\t\t}\n\t\tinvokeProtocolHandlerCustomizers(connector.getProtocolHandler());\n\t\tif (getUriEncoding() != null) {\n\t\t\tconnector.setURIEncoding(getUriEncoding().name());\n\t\t}\n\t\t\r\n\t\tconnector.setProperty(\"bindOnInit\", \"false\");\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(connector);\n\t\t}\n\t\tTomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression());\n\t\tcompression.customize(connector);\n\t\tfor (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {\n\t\t\tcustomizer.customize(connector);\n\t\t}\n\t}\n","realPath":"spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"}],"commitId":"713c0fce7c7c836505714052221d36014a69411b","commitMessage":"@@@Auto-configure H2C when HTTP/2 is enabled and SSL is disabled\n","date":"2021-04-13 00:16:14","modifiedFileCount":"8","status":"M","submitter":"Andy Wilkinson"}]
