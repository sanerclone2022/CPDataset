[{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid getActiveWhenEnvironmentProfilesAndBinderProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setActiveProfiles(\"a\", \"b\", \"c\");\n\t\tBinder binder = new Binder(\n\t\t\t\tnew MapConfigurationPropertySource(Collections.singletonMap(\"spring.profiles.active\", \"d,e,f\")));\n\t\tProfiles profiles = new Profiles(environment, binder, null);\n\t\tassertThat(profiles.getActive()).containsExactly(\"a\", \"b\", \"c\");\n\t}\n","date":"2020-07-23 12:02:32","endLine":73,"groupId":"13973","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getActiveWhenEnvironmentProfilesAndBinderProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/24/f69c53e8d23ed3422e346ae6e0abe25f30fc14.src","preCode":"\tvoid getActiveWhenEnvironmentProfilesAndBinderProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setActiveProfiles(\"a\", \"b\", \"c\");\n\t\tBinder binder = new Binder(\n\t\t\t\tnew MapConfigurationPropertySource(Collections.singletonMap(\"spring.profiles.active\", \"d,e,f\")));\n\t\tProfiles profiles = new Profiles(environment, binder, null);\n\t\tassertThat(profiles.getActive()).containsExactly(\"a\", \"b\", \"c\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ProfilesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2020-07-14 12:19:10","commitOrder":1,"curCode":"\tvoid getDefaultWhenEnvironmentProfilesAndBinderProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setDefaultProfiles(\"a\", \"b\", \"c\");\n\t\tBinder binder = new Binder(\n\t\t\t\tnew MapConfigurationPropertySource(Collections.singletonMap(\"spring.profiles.default\", \"d,e,f\")));\n\t\tProfiles profiles = new Profiles(environment, binder, null);\n\t\tassertThat(profiles.getDefault()).containsExactly(\"a\", \"b\", \"c\");\n\t}\n","date":"2020-07-23 12:02:32","endLine":160,"groupId":"7206","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDefaultWhenEnvironmentProfilesAndBinderProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/24/f69c53e8d23ed3422e346ae6e0abe25f30fc14.src","preCode":"\tvoid getDefaultWhenEnvironmentProfilesAndBinderProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setDefaultProfiles(\"a\", \"b\", \"c\");\n\t\tBinder binder = new Binder(\n\t\t\t\tnew MapConfigurationPropertySource(Collections.singletonMap(\"spring.profiles.default\", \"d,e,f\")));\n\t\tProfiles profiles = new Profiles(environment, binder, null);\n\t\tassertThat(profiles.getDefault()).containsExactly(\"a\", \"b\", \"c\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ProfilesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"}],"commitId":"3352024b1ca641fa0beaaa4cd87788c190242eb0","commitMessage":"@@@Provide ConfigFileApplicationListener replacement\n\nDeprecate `ConfigFileApplicationListener` and provide a replacement\nmechanism that supports arbitrary config data imports.\n\nThis commit updates the following areas:\n\n- Extract `EnvironmentPostProcessor` invocation logic from the\n  `ConfigFileApplicationListener` to new dedicated listener. Also\n  providing support for `Log` injection.\n\n- Extract `RandomPropertySource` adding logic from the\n  `ConfigFileApplicationListener` to a dedicated class.\n\n- Migrate to the recently introduced `DefaultPropertiesPropertySource`\n  class when moving the defaultProperties `PropertySource`\n\n- Replace processing logic with a phased approach to ensure that\n  profile enablement happens in a distinct phase and that profiles\n  can no longer be activated on an ad-hoc basis.\n\n- Provide a more predictable and logical import order for processing\n  `application.properties` and `application.yml` files.\n\n- Add support for a `spring.config.import` property which can be used\n  to import additional config data. Also provide a pluggable API\n  allowing third-parties to resolve and load locations themselves.\n\n- Add `spring.config.activate.on-profile` support which replaces the\n  existing `spring.profiles` property.\n\n- Add `spring.config.activate.on-cloud-platform` support which allows\n  a config data document to be active only on a given cloud platform.\n\n- Support a `spring.config.use-legacy-processing` property allowing the\n  previous processing logic to be used.\n\nCloses gh-22497\n\nCo-authored-by: Madhura Bhave <mbhave@vmware.com>\n","date":"2020-07-23 12:02:32","modifiedFileCount":"17","status":"B","submitter":"Phillip Webb"},{"authorTime":"2020-07-14 12:19:10","codes":[{"authorDate":"2021-05-18 04:30:33","commitOrder":2,"curCode":"\tvoid getActiveWhenEnvironmentProfilesAndBinderProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setActiveProfiles(\"a\", \"b\", \"c\");\n\t\tBinder binder = new Binder(\n\t\t\t\tnew MapConfigurationPropertySource(Collections.singletonMap(\"spring.profiles.active\", \"d,e,f\")));\n\t\tProfiles profiles = new Profiles(environment, binder, null);\n\t\tassertThat(profiles.getActive()).containsExactly(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n\t}\n","date":"2021-05-18 04:30:33","endLine":77,"groupId":"101658","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getActiveWhenEnvironmentProfilesAndBinderProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/01/5aedd4c0329968eb11b91814aa8d5f1e2d3a23.src","preCode":"\tvoid getActiveWhenEnvironmentProfilesAndBinderProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setActiveProfiles(\"a\", \"b\", \"c\");\n\t\tBinder binder = new Binder(\n\t\t\t\tnew MapConfigurationPropertySource(Collections.singletonMap(\"spring.profiles.active\", \"d,e,f\")));\n\t\tProfiles profiles = new Profiles(environment, binder, null);\n\t\tassertThat(profiles.getActive()).containsExactly(\"a\", \"b\", \"c\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ProfilesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-07-14 12:19:10","commitOrder":2,"curCode":"\tvoid getDefaultWhenEnvironmentProfilesAndBinderProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setDefaultProfiles(\"a\", \"b\", \"c\");\n\t\tBinder binder = new Binder(\n\t\t\t\tnew MapConfigurationPropertySource(Collections.singletonMap(\"spring.profiles.default\", \"d,e,f\")));\n\t\tProfiles profiles = new Profiles(environment, binder, null);\n\t\tassertThat(profiles.getDefault()).containsExactly(\"a\", \"b\", \"c\");\n\t}\n","date":"2020-07-23 12:02:32","endLine":160,"groupId":"101658","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDefaultWhenEnvironmentProfilesAndBinderProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/24/f69c53e8d23ed3422e346ae6e0abe25f30fc14.src","preCode":"\tvoid getDefaultWhenEnvironmentProfilesAndBinderProperty() {\n\t\tMockEnvironment environment = new MockEnvironment();\n\t\tenvironment.setDefaultProfiles(\"a\", \"b\", \"c\");\n\t\tBinder binder = new Binder(\n\t\t\t\tnew MapConfigurationPropertySource(Collections.singletonMap(\"spring.profiles.default\", \"d,e,f\")));\n\t\tProfiles profiles = new Profiles(environment, binder, null);\n\t\tassertThat(profiles.getDefault()).containsExactly(\"a\", \"b\", \"c\");\n\t}\n","realPath":"spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ProfilesTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"634d27679a9aa9d3cc3589f098892f818cfe0a88","commitMessage":"@@@Merge branch '2.4.x'\n\nCloses gh-26580\n","date":"2021-05-18 04:30:33","modifiedFileCount":"2","status":"M","submitter":"Phillip Webb"}]
