[{"authorTime":"2017-10-14 00:14:27","codes":[{"authorDate":"2017-11-14 21:40:39","commitOrder":3,"curCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"status\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","date":"2017-11-14 22:25:07","endLine":79,"groupId":"3746","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"webEndpointsAreDisabledByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/07/7723972f79b3eb8752e5effcb9372e19c0f314.src","preCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"status\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"},{"authorDate":"2017-10-14 00:14:27","commitOrder":3,"curCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"status\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","date":"2017-11-16 06:41:38","endLine":120,"groupId":"5692","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"singleWebEndpointCanBeExposed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/8d/85b05f4c609824de6df1c77ccc0e0225053dbb.src","preCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"status\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"}],"commitId":"fd5c43cdc97a3b17234a139b566a96eabd282639","commitMessage":"@@@Separate endpoint concerns\n\nUpdate endpoint code to provide cleaner separation of concerns.\nSpecifically.  the top level endpoint package is no longer aware of\nthe fact that JMX and HTTP are ultimately used to expose endpoints.\nCaching concerns have also been abstracted behind a general purpose\n`OperationMethodInvokerAdvisor` interface.\n\nConfiguration properties have been refined to further enforce\nseparation. The `management.endpoint.<name>` prefix provides\nconfiguration for a  single endpoint (including enable and cache\ntime-to-live). These  properties are now technology agnostic (they\ndon't include `web` or `jmx` sub properties).\n\nThe `management.endpoints.<technology>` prefix provide exposure specific\nconfiguration. For example.  `management.endpoints.web.path-mapping`\nallow endpoint URLs to be changed.\n\nEndpoint enabled/disabled logic has been simplified so that endpoints\ncan't be disabled per exposure technology. Instead a filter based\napproach is used to allow refinement of what endpoints are exposed over\na given technology.\n\nFixes gh-10176\n","date":"2017-11-16 06:41:38","modifiedFileCount":"108","status":"M","submitter":"Phillip Webb"},{"authorTime":"2017-11-23 05:54:11","codes":[{"authorDate":"2017-11-23 05:54:11","commitOrder":4,"curCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","date":"2017-11-23 14:01:58","endLine":79,"groupId":"13839","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"webEndpointsAreDisabledByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/d2cc403b9dc0616e1b4629654a98441fbc54cc.src","preCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"status\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2017-11-23 05:54:11","commitOrder":4,"curCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","date":"2017-11-23 14:01:58","endLine":117,"groupId":"5692","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"singleWebEndpointCanBeExposed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/d9/d2cc403b9dc0616e1b4629654a98441fbc54cc.src","preCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"status\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"31025d9f6c9248db88061855c3231a203ed3c80f","commitMessage":"@@@Drop status endpoint\n\nDrop the status endpoint and merge functionality back into the health\nendpoint. The `management.endpoint.health.show-details` property can\nbe used to change if full details.  or just the status is displayed.\n\nFixes gh-11113\n","date":"2017-11-23 14:01:58","modifiedFileCount":"20","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-01-19 12:52:35","codes":[{"authorDate":"2018-01-19 12:52:35","commitOrder":5,"curCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","date":"2018-01-20 13:06:32","endLine":83,"groupId":"4401","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"webEndpointsAreDisabledByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f5/176f4d7ab0d91949cd87287705b53586fbff09.src","preCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2018-01-19 12:52:35","commitOrder":5,"curCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","date":"2018-01-20 13:06:32","endLine":123,"groupId":"5692","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"singleWebEndpointCanBeExposed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/f5/176f4d7ab0d91949cd87287705b53586fbff09.src","preCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"bda9b892b399d0b6b5d385b1d90f6011c09e8ec0","commitMessage":"@@@Add direct WebFlux and WebMvc endpoint support\n\nAdd `@ControllerEndpoint` and `@RestControllerEndpoint` annotations that\ncan be used to develop a Spring-only request mapped endpoint. Both\nSpring MVC and Spring WebFlux are supported.\n\nThis feature is primarily for use when deeper Spring integration is\nrequired or when existing Spring Boot 1.5 projects want to migrate to\nSpring Boot 2.0 without re-writing existing endpoints. It comes at the\nexpense of portability.  since such endpoints will be missing from\nJersey.\n\nFixes gh-10257\n","date":"2018-01-20 13:06:32","modifiedFileCount":"14","status":"M","submitter":"Phillip Webb"},{"authorTime":"2018-01-30 20:54:52","codes":[{"authorDate":"2018-01-30 20:54:52","commitOrder":6,"curCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2018-01-30 20:55:27","endLine":85,"groupId":"4401","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"webEndpointsAreDisabledByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fd/df8ad8beae3b4d03af09db52247c9796947bf6.src","preCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2018-01-30 20:54:52","commitOrder":6,"curCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2018-01-30 20:55:27","endLine":125,"groupId":"5692","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"singleWebEndpointCanBeExposed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/fd/df8ad8beae3b4d03af09db52247c9796947bf6.src","preCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"trace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"356efaa7c87acda5d3b54f8fce44078944283db2","commitMessage":"@@@Rename trace to httptrace\n\nCloses gh-11806\n","date":"2018-01-30 20:55:27","modifiedFileCount":"6","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-02-09 19:23:47","codes":[{"authorDate":"2018-02-09 19:23:47","commitOrder":7,"curCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2018-02-09 19:24:18","endLine":100,"groupId":"12482","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"webEndpointsAreDisabledByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/97/eae145eda5e7d8cce616bb39f67d0683d6a1c8.src","preCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2018-02-09 19:23:47","commitOrder":7,"curCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2018-02-09 19:24:18","endLine":142,"groupId":"12482","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"singleWebEndpointCanBeExposed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/97/eae145eda5e7d8cce616bb39f67d0683d6a1c8.src","preCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tMockMvc mvc = MockMvcBuilders.webAppContextSetup(context).build();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(mvc, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"a6ecd55f1ffcea6467facfbea646012db7a2ed93","commitMessage":"@@@Make expose and exclude properties affect servlet endpoints\n\nCloses gh-11968\n","date":"2018-02-09 19:24:18","modifiedFileCount":"2","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2018-02-12 21:00:40","codes":[{"authorDate":"2018-02-09 19:23:47","commitOrder":8,"curCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2018-02-09 19:24:18","endLine":100,"groupId":"12482","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"webEndpointsAreDisabledByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/97/eae145eda5e7d8cce616bb39f67d0683d6a1c8.src","preCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"},{"authorDate":"2018-02-12 21:00:40","commitOrder":8,"curCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.exposure.include=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2018-02-12 21:00:40","endLine":142,"groupId":"12482","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"singleWebEndpointCanBeExposed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/27/788c8ad1471fbef45db3c0319bd86e72bc34ad.src","preCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.expose=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"7473642f5852900166d4dfa754b9362612e2db32","commitMessage":"@@@Harmonize endpoints exclude property\n\nCloses gh-11914\n","date":"2018-02-12 21:00:40","modifiedFileCount":"19","status":"M","submitter":"Stephane Nicoll"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2019-05-24 18:24:29","commitOrder":9,"curCode":"\tvoid webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":99,"groupId":"12482","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"webEndpointsAreDisabledByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/aa/896726f74256ecd3966a0850802d2b783a05b6.src","preCode":"\tpublic void webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":9,"curCode":"\tvoid singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.exposure.include=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":141,"groupId":"12482","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"singleWebEndpointCanBeExposed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/aa/896726f74256ecd3966a0850802d2b783a05b6.src","preCode":"\tpublic void singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.exposure.include=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"b18fffaf14f9ce3e5651f44745019890e8a899c2","commitMessage":"@@@Move tests to JUnit 5 wherever possible\n","date":"2019-06-07 19:25:54","modifiedFileCount":"1282","status":"M","submitter":"Andy Wilkinson"},{"authorTime":"2019-05-24 18:24:29","codes":[{"authorDate":"2021-01-22 07:15:02","commitOrder":10,"curCode":"\tvoid webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2021-01-22 07:15:03","endLine":100,"groupId":"10830","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"webEndpointsAreDisabledByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/de/4711434f4f096026a29f800583f8a5d3970b4b.src","preCode":"\tvoid webEndpointsAreDisabledByDefault() {\n\t\tthis.contextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2019-05-24 18:24:29","commitOrder":10,"curCode":"\tvoid singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.exposure.include=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","date":"2019-06-07 19:25:54","endLine":141,"groupId":"10830","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"singleWebEndpointCanBeExposed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-springboot-10-0.7/blobInfo/CC_OUT/blobs/aa/896726f74256ecd3966a0850802d2b783a05b6.src","preCode":"\tvoid singleWebEndpointCanBeExposed() {\n\t\tWebApplicationContextRunner contextRunner = this.contextRunner\n\t\t\t\t.withPropertyValues(\"management.endpoints.web.exposure.include=beans\");\n\t\tcontextRunner.run((context) -> {\n\t\t\tWebTestClient client = createClient(context);\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"beans\")).isTrue();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"conditions\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"configprops\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"custommvc\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"customservlet\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"env\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"health\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"info\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"mappings\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.POST, \"shutdown\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"threaddump\")).isFalse();\n\t\t\tassertThat(isExposed(client, HttpMethod.GET, \"httptrace\")).isFalse();\n\t\t});\n\t}\n","realPath":"spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java","repoName":"springboot","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"N"}],"commitId":"587f96d4e099f8ae9d27e61a53e5512e6263db71","commitMessage":"@@@Merge pull request #24715 from hatefpalizgar\n\n* pr/24715:\n  Polish \" Change info endpoint to be secure and unexposed by default\"\n  Change info endpoint to be secure and unexposed by default\n\nCloses gh-24715\n","date":"2021-01-22 07:15:03","modifiedFileCount":"14","status":"M","submitter":"Madhura Bhave"}]
