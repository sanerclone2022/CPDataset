[{"authorTime":"2020-10-06 01:02:02","codes":[{"authorDate":"2020-10-06 01:02:02","commitOrder":1,"curCode":"  public void testEqualityDeletesWithRequiredEqColumn() throws IOException {\n    Schema deleteRowSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(deleteRowSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .commit();\n\n    StructLikeSet expected = selectColumns(rowSetWithoutIds(29, 89, 122), \"id\");\n    StructLikeSet actual = rowSet(tableName, table, \"id\");\n\n    if (expectPruned()) {\n      Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n    } else {\n      \r\n      Assert.assertEquals(\"Table should contain expected rows\", expected, selectColumns(actual, \"id\"));\n    }\n  }\n","date":"2020-10-06 01:02:02","endLine":153,"groupId":"766","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqualityDeletesWithRequiredEqColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/552506949c22355eb2a14a9c20aeb5067528b6.src","preCode":"  public void testEqualityDeletesWithRequiredEqColumn() throws IOException {\n    Schema deleteRowSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(deleteRowSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .commit();\n\n    StructLikeSet expected = selectColumns(rowSetWithoutIds(29, 89, 122), \"id\");\n    StructLikeSet actual = rowSet(tableName, table, \"id\");\n\n    if (expectPruned()) {\n      Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n    } else {\n      \r\n      Assert.assertEquals(\"Table should contain expected rows\", expected, selectColumns(actual, \"id\"));\n    }\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DeleteReadTests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"},{"authorDate":"2020-10-06 01:02:02","commitOrder":1,"curCode":"  public void testMixedPositionAndEqualityDeletes() throws IOException {\n    Schema dataSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(dataSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n\n    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n        Pair.of(dataFile.path(), 3L), \r\n        Pair.of(dataFile.path(), 5L) \r\n    );\n\n    DeleteFile posDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), deletes);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .addDeletes(posDeletes)\n        .commit();\n\n    StructLikeSet expected = rowSetWithoutIds(29, 89, 121, 122);\n    StructLikeSet actual = rowSet(tableName, table, \"*\");\n\n    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n  }\n","date":"2020-10-06 01:02:02","endLine":206,"groupId":"766","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMixedPositionAndEqualityDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/552506949c22355eb2a14a9c20aeb5067528b6.src","preCode":"  public void testMixedPositionAndEqualityDeletes() throws IOException {\n    Schema dataSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(dataSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n\n    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n        Pair.of(dataFile.path(), 3L), \r\n        Pair.of(dataFile.path(), 5L) \r\n    );\n\n    DeleteFile posDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), deletes);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .addDeletes(posDeletes)\n        .commit();\n\n    StructLikeSet expected = rowSetWithoutIds(29, 89, 121, 122);\n    StructLikeSet actual = rowSet(tableName, table, \"*\");\n\n    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DeleteReadTests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"118cc80c16950d6c6b87eaadd843b2b156c9435a","commitMessage":"@@@MR: Apply row-level delete files when reading (#1497)\n\n","date":"2020-10-06 01:02:02","modifiedFileCount":"4","status":"B","submitter":"Chen Junjie"},{"authorTime":"2020-10-08 00:35:43","codes":[{"authorDate":"2020-10-06 01:02:02","commitOrder":2,"curCode":"  public void testEqualityDeletesWithRequiredEqColumn() throws IOException {\n    Schema deleteRowSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(deleteRowSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .commit();\n\n    StructLikeSet expected = selectColumns(rowSetWithoutIds(29, 89, 122), \"id\");\n    StructLikeSet actual = rowSet(tableName, table, \"id\");\n\n    if (expectPruned()) {\n      Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n    } else {\n      \r\n      Assert.assertEquals(\"Table should contain expected rows\", expected, selectColumns(actual, \"id\"));\n    }\n  }\n","date":"2020-10-06 01:02:02","endLine":153,"groupId":"766","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqualityDeletesWithRequiredEqColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/552506949c22355eb2a14a9c20aeb5067528b6.src","preCode":"  public void testEqualityDeletesWithRequiredEqColumn() throws IOException {\n    Schema deleteRowSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(deleteRowSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .commit();\n\n    StructLikeSet expected = selectColumns(rowSetWithoutIds(29, 89, 122), \"id\");\n    StructLikeSet actual = rowSet(tableName, table, \"id\");\n\n    if (expectPruned()) {\n      Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n    } else {\n      \r\n      Assert.assertEquals(\"Table should contain expected rows\", expected, selectColumns(actual, \"id\"));\n    }\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DeleteReadTests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"},{"authorDate":"2020-10-08 00:35:43","commitOrder":2,"curCode":"  public void testMixedPositionAndEqualityDeletes() throws IOException {\n    Schema dataSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(dataSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n\n    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n        Pair.of(dataFile.path(), 3L), \r\n        Pair.of(dataFile.path(), 5L) \r\n    );\n\n    Pair<DeleteFile, Set<CharSequence>> posDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), deletes);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .addDeletes(posDeletes.first())\n        .validateDataFilesExist(posDeletes.second())\n        .commit();\n\n    StructLikeSet expected = rowSetWithoutIds(29, 89, 121, 122);\n    StructLikeSet actual = rowSet(tableName, table, \"*\");\n\n    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n  }\n","date":"2020-10-08 00:35:43","endLine":241,"groupId":"768","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMixedPositionAndEqualityDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ae/42382f9723fdc925369075a747b7fd1a867066.src","preCode":"  public void testMixedPositionAndEqualityDeletes() throws IOException {\n    Schema dataSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(dataSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n\n    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n        Pair.of(dataFile.path(), 3L), \r\n        Pair.of(dataFile.path(), 5L) \r\n    );\n\n    DeleteFile posDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), deletes);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .addDeletes(posDeletes)\n        .commit();\n\n    StructLikeSet expected = rowSetWithoutIds(29, 89, 121, 122);\n    StructLikeSet actual = rowSet(tableName, table, \"*\");\n\n    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DeleteReadTests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"d4dcadb3a74d4552f85fa6c99637f86a0b763426","commitMessage":"@@@Core: Add row-level delete validations (#1469)\n\n","date":"2020-10-08 00:35:43","modifiedFileCount":"13","status":"M","submitter":"Ryan Blue"},{"authorTime":"2021-06-23 00:42:23","codes":[{"authorDate":"2020-10-06 01:02:02","commitOrder":3,"curCode":"  public void testEqualityDeletesWithRequiredEqColumn() throws IOException {\n    Schema deleteRowSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(deleteRowSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .commit();\n\n    StructLikeSet expected = selectColumns(rowSetWithoutIds(29, 89, 122), \"id\");\n    StructLikeSet actual = rowSet(tableName, table, \"id\");\n\n    if (expectPruned()) {\n      Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n    } else {\n      \r\n      Assert.assertEquals(\"Table should contain expected rows\", expected, selectColumns(actual, \"id\"));\n    }\n  }\n","date":"2020-10-06 01:02:02","endLine":153,"groupId":"10627","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqualityDeletesWithRequiredEqColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/552506949c22355eb2a14a9c20aeb5067528b6.src","preCode":"  public void testEqualityDeletesWithRequiredEqColumn() throws IOException {\n    Schema deleteRowSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(deleteRowSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .commit();\n\n    StructLikeSet expected = selectColumns(rowSetWithoutIds(29, 89, 122), \"id\");\n    StructLikeSet actual = rowSet(tableName, table, \"id\");\n\n    if (expectPruned()) {\n      Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n    } else {\n      \r\n      Assert.assertEquals(\"Table should contain expected rows\", expected, selectColumns(actual, \"id\"));\n    }\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DeleteReadTests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"},{"authorDate":"2021-06-23 00:42:23","commitOrder":3,"curCode":"  public void testMixedPositionAndEqualityDeletes() throws IOException {\n    Schema dataSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(dataSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n\n    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n        Pair.of(dataFile.path(), 3L), \r\n        Pair.of(dataFile.path(), 5L) \r\n    );\n\n    Pair<DeleteFile, CharSequenceSet> posDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), deletes);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .addDeletes(posDeletes.first())\n        .validateDataFilesExist(posDeletes.second())\n        .commit();\n\n    StructLikeSet expected = rowSetWithoutIds(29, 89, 121, 122);\n    StructLikeSet actual = rowSet(tableName, table, \"*\");\n\n    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n  }\n","date":"2021-06-23 00:42:23","endLine":242,"groupId":"10627","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testMixedPositionAndEqualityDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/70/ac77473c5d6f9e96907c9694ed58a352063064.src","preCode":"  public void testMixedPositionAndEqualityDeletes() throws IOException {\n    Schema dataSchema = table.schema().select(\"data\");\n    Record dataDelete = GenericRecord.create(dataSchema);\n    List<Record> dataDeletes = Lists.newArrayList(\n        dataDelete.copy(\"data\", \"a\"), \r\n        dataDelete.copy(\"data\", \"d\"), \r\n        dataDelete.copy(\"data\", \"g\") \r\n    );\n\n    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n\n    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n        Pair.of(dataFile.path(), 3L), \r\n        Pair.of(dataFile.path(), 5L) \r\n    );\n\n    Pair<DeleteFile, Set<CharSequence>> posDeletes = FileHelpers.writeDeleteFile(\n        table, Files.localOutput(temp.newFile()), Row.of(0), deletes);\n\n    table.newRowDelta()\n        .addDeletes(eqDeletes)\n        .addDeletes(posDeletes.first())\n        .validateDataFilesExist(posDeletes.second())\n        .commit();\n\n    StructLikeSet expected = rowSetWithoutIds(29, 89, 121, 122);\n    StructLikeSet actual = rowSet(tableName, table, \"*\");\n\n    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DeleteReadTests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"}],"commitId":"63392d95848b21b32e6619f500e87c5342824f08","commitMessage":"@@@Core: Use CharSequenceSet instead of Set<CharSequence> (#2712)\n\nThis also adds a test that makes sure a CharSequenceSet doesn't suffer\nfrom undefined equality behavior as reported by https://errorprone.info/bugpattern/CollectionUndefinedEquality","date":"2021-06-23 00:42:23","modifiedFileCount":"11","status":"M","submitter":"Eduard Tudenh?fner"}]
