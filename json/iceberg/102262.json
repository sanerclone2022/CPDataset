[{"authorTime":"2021-01-19 04:49:47","codes":[{"authorDate":"2021-01-19 04:49:47","commitOrder":1,"curCode":"  public void testFilterPushDownIn() {\n    String sqlIN = String.format(\"SELECT * FROM %s WHERE id IN (1,2) \", TABLE_NAME);\n    String explainIN = getTableEnv().explainSql(sqlIN);\n    String expectedFilter = \"(ref(name=\\\"id\\\") == 1 or ref(name=\\\"id\\\") == 2)\";\n    Assert.assertTrue(\"Explain should contain the push down filter\", explainIN.contains(expectedFilter));\n    List<Object[]> resultIN = sql(sqlIN);\n    Assert.assertEquals(\"Should have 2 records\", 2, resultIN.size());\n\n    List<Object[]> expectedIN = Lists.newArrayList();\n    expectedIN.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedIN.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedIN.toArray(), resultIN.toArray());\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","date":"2021-01-19 04:49:47","endLine":437,"groupId":"4532","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterPushDownIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/22/9812a516e0ceb1c6ed9c9f5fe0c6ccb017ec60.src","preCode":"  public void testFilterPushDownIn() {\n    String sqlIN = String.format(\"SELECT * FROM %s WHERE id IN (1,2) \", TABLE_NAME);\n    String explainIN = getTableEnv().explainSql(sqlIN);\n    String expectedFilter = \"(ref(name=\\\"id\\\") == 1 or ref(name=\\\"id\\\") == 2)\";\n    Assert.assertTrue(\"Explain should contain the push down filter\", explainIN.contains(expectedFilter));\n    List<Object[]> resultIN = sql(sqlIN);\n    Assert.assertEquals(\"Should have 2 records\", 2, resultIN.size());\n\n    List<Object[]> expectedIN = Lists.newArrayList();\n    expectedIN.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedIN.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedIN.toArray(), resultIN.toArray());\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"B"},{"authorDate":"2021-01-19 04:49:47","commitOrder":1,"curCode":"  public void testFilterPushDownIsNotNull() {\n    String sqlNotNull = String.format(\"SELECT * FROM %s WHERE data IS NOT NULL\", TABLE_NAME);\n    String explainNotNull = getTableEnv().explainSql(sqlNotNull);\n    String expectedFilter = \"not_null(ref(name=\\\"data\\\"))\";\n    Assert.assertTrue(\"Explain should contain the push down filter\", explainNotNull.contains(expectedFilter));\n\n    List<Object[]> resultNotNull = sql(sqlNotNull);\n    Assert.assertEquals(\"Should have 2 record\", 2, resultNotNull.size());\n\n    List<Object[]> expected = Lists.newArrayList();\n    expected.add(new Object[] {1, \"iceberg\", 10.0});\n    expected.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expected.toArray(), resultNotNull.toArray());\n\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","date":"2021-01-19 04:49:47","endLine":497,"groupId":"931","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterPushDownIsNotNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/22/9812a516e0ceb1c6ed9c9f5fe0c6ccb017ec60.src","preCode":"  public void testFilterPushDownIsNotNull() {\n    String sqlNotNull = String.format(\"SELECT * FROM %s WHERE data IS NOT NULL\", TABLE_NAME);\n    String explainNotNull = getTableEnv().explainSql(sqlNotNull);\n    String expectedFilter = \"not_null(ref(name=\\\"data\\\"))\";\n    Assert.assertTrue(\"Explain should contain the push down filter\", explainNotNull.contains(expectedFilter));\n\n    List<Object[]> resultNotNull = sql(sqlNotNull);\n    Assert.assertEquals(\"Should have 2 record\", 2, resultNotNull.size());\n\n    List<Object[]> expected = Lists.newArrayList();\n    expected.add(new Object[] {1, \"iceberg\", 10.0});\n    expected.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expected.toArray(), resultNotNull.toArray());\n\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"B"}],"commitId":"70d309e6e1f8e2538bae274febf39a92fcbe3bb2","commitMessage":"@@@Flink: Support filter pushdown (#1893)\n\n","date":"2021-01-19 04:49:47","modifiedFileCount":"3","status":"B","submitter":"JunZhang"},{"authorTime":"2021-03-11 14:43:08","codes":[{"authorDate":"2021-03-11 14:43:08","commitOrder":2,"curCode":"  public void testFilterPushDownIn() {\n    String sqlIN = String.format(\"SELECT * FROM %s WHERE id IN (1,2) \", TABLE_NAME);\n    String expectedFilter = \"(ref(name=\\\"id\\\") == 1 or ref(name=\\\"id\\\") == 2)\";\n    List<Object[]> resultIN = sql(sqlIN);\n    Assert.assertEquals(\"Should have 2 records\", 2, resultIN.size());\n\n    List<Object[]> expectedIN = Lists.newArrayList();\n    expectedIN.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedIN.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedIN.toArray(), resultIN.toArray());\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","date":"2021-03-11 14:43:08","endLine":407,"groupId":"4532","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterPushDownIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/62/e51b2f916d32e9533559bda3f68ebbde719265.src","preCode":"  public void testFilterPushDownIn() {\n    String sqlIN = String.format(\"SELECT * FROM %s WHERE id IN (1,2) \", TABLE_NAME);\n    String explainIN = getTableEnv().explainSql(sqlIN);\n    String expectedFilter = \"(ref(name=\\\"id\\\") == 1 or ref(name=\\\"id\\\") == 2)\";\n    Assert.assertTrue(\"Explain should contain the push down filter\", explainIN.contains(expectedFilter));\n    List<Object[]> resultIN = sql(sqlIN);\n    Assert.assertEquals(\"Should have 2 records\", 2, resultIN.size());\n\n    List<Object[]> expectedIN = Lists.newArrayList();\n    expectedIN.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedIN.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedIN.toArray(), resultIN.toArray());\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2021-03-11 14:43:08","commitOrder":2,"curCode":"  public void testFilterPushDownIsNotNull() {\n    String sqlNotNull = String.format(\"SELECT * FROM %s WHERE data IS NOT NULL\", TABLE_NAME);\n    String expectedFilter = \"not_null(ref(name=\\\"data\\\"))\";\n\n    List<Object[]> resultNotNull = sql(sqlNotNull);\n    Assert.assertEquals(\"Should have 2 record\", 2, resultNotNull.size());\n\n    List<Object[]> expected = Lists.newArrayList();\n    expected.add(new Object[] {1, \"iceberg\", 10.0});\n    expected.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expected.toArray(), resultNotNull.toArray());\n\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","date":"2021-03-11 14:43:08","endLine":456,"groupId":"931","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterPushDownIsNotNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/62/e51b2f916d32e9533559bda3f68ebbde719265.src","preCode":"  public void testFilterPushDownIsNotNull() {\n    String sqlNotNull = String.format(\"SELECT * FROM %s WHERE data IS NOT NULL\", TABLE_NAME);\n    String explainNotNull = getTableEnv().explainSql(sqlNotNull);\n    String expectedFilter = \"not_null(ref(name=\\\"data\\\"))\";\n    Assert.assertTrue(\"Explain should contain the push down filter\", explainNotNull.contains(expectedFilter));\n\n    List<Object[]> resultNotNull = sql(sqlNotNull);\n    Assert.assertEquals(\"Should have 2 record\", 2, resultNotNull.size());\n\n    List<Object[]> expected = Lists.newArrayList();\n    expected.add(new Object[] {1, \"iceberg\", 10.0});\n    expected.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expected.toArray(), resultNotNull.toArray());\n\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"M"}],"commitId":"312c622350a93b099190955edc6b4416dbe502da","commitMessage":"@@@Flink :  Refactor FlinkTableFactory to implement DynamicTableSinkFactory and DynamicTableSourceFactory (#2229)\n\n","date":"2021-03-11 14:43:08","modifiedFileCount":"5","status":"M","submitter":"JunZhang"},{"authorTime":"2021-04-01 14:26:14","codes":[{"authorDate":"2021-04-01 14:26:14","commitOrder":3,"curCode":"  public void testFilterPushDownIn() {\n    String sqlIN = String.format(\"SELECT * FROM %s WHERE id IN (1,2) \", TABLE_NAME);\n    String expectedFilter = \"(ref(name=\\\"id\\\") == 1 or ref(name=\\\"id\\\") == 2)\";\n    List<Row> resultIN = sql(sqlIN);\n    Assert.assertEquals(\"Should have 2 records\", 2, resultIN.size());\n\n    List<Row> expectedIN = Lists.newArrayList(\n        Row.of(1, \"iceberg\", 10.0),\n        Row.of(2, \"b\", 20.0)\n    );\n    Assert.assertEquals(\"Should produce the expected record\", expectedIN, resultIN);\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","date":"2021-04-01 14:26:14","endLine":409,"groupId":"102262","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testFilterPushDownIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/11/a6b6781e78ab28c604de2aedb2b86f9e36bf7e.src","preCode":"  public void testFilterPushDownIn() {\n    String sqlIN = String.format(\"SELECT * FROM %s WHERE id IN (1,2) \", TABLE_NAME);\n    String expectedFilter = \"(ref(name=\\\"id\\\") == 1 or ref(name=\\\"id\\\") == 2)\";\n    List<Object[]> resultIN = sql(sqlIN);\n    Assert.assertEquals(\"Should have 2 records\", 2, resultIN.size());\n\n    List<Object[]> expectedIN = Lists.newArrayList();\n    expectedIN.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedIN.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedIN.toArray(), resultIN.toArray());\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2021-04-01 14:26:14","commitOrder":3,"curCode":"  public void testFilterPushDownIsNotNull() {\n    String sqlNotNull = String.format(\"SELECT * FROM %s WHERE data IS NOT NULL\", TABLE_NAME);\n    String expectedFilter = \"not_null(ref(name=\\\"data\\\"))\";\n\n    List<Row> resultNotNull = sql(sqlNotNull);\n    Assert.assertEquals(\"Should have 2 record\", 2, resultNotNull.size());\n\n    List<Row> expected = Lists.newArrayList(\n        Row.of(1, \"iceberg\", 10.0),\n        Row.of(2, \"b\", 20.0)\n    );\n    Assert.assertEquals(\"Should produce the expected record\", expected, resultNotNull);\n\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","date":"2021-04-01 14:26:14","endLine":457,"groupId":"102262","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testFilterPushDownIsNotNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/11/a6b6781e78ab28c604de2aedb2b86f9e36bf7e.src","preCode":"  public void testFilterPushDownIsNotNull() {\n    String sqlNotNull = String.format(\"SELECT * FROM %s WHERE data IS NOT NULL\", TABLE_NAME);\n    String expectedFilter = \"not_null(ref(name=\\\"data\\\"))\";\n\n    List<Object[]> resultNotNull = sql(sqlNotNull);\n    Assert.assertEquals(\"Should have 2 record\", 2, resultNotNull.size());\n\n    List<Object[]> expected = Lists.newArrayList();\n    expected.add(new Object[] {1, \"iceberg\", 10.0});\n    expected.add(new Object[] {2, \"b\", 20.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expected.toArray(), resultNotNull.toArray());\n\n    Assert.assertEquals(\"Should create only one scan\", 1, scanEventCount);\n    Assert.assertEquals(\"Should contain the push down filter\", expectedFilter, lastScanEvent.filter().toString());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"M"}],"commitId":"988a33cb58981c3fabb221f6b49ed9dd176c9abd","commitMessage":"@@@Tests: Get row collection from flink sql query. (#2386)\n\n","date":"2021-04-01 14:26:14","modifiedFileCount":"3","status":"M","submitter":"openinx"}]
