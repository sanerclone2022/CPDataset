[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(fromOption(\n        fromOption(record.getSchema().getField(\"locations\").schema()).getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.get(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":426,"groupId":"432","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0c/e4f180ad131a18e53b87a76fc14671429d4970.src","preCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(fromOption(\n        fromOption(record.getSchema().getField(\"locations\").schema()).getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.get(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = GenericRecord.create(writeSchema.asStruct());\n    record.setField(\"id\", 34L);\n    Record l1 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType());\n    l1.setField(\"lat\", 53.992811f);\n    l1.setField(\"long\", -1.542616f);\n    Record l2 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType());\n    l2.setField(\"lat\", 52.995143f);\n    l2.setField(\"long\", -1.539054f);\n    record.setField(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.getField(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.getField(\"locations\"), toStringMap((Map) projected.getField(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.getField(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.getField(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":406,"groupId":"3833","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/54/b76d8c8647b7c4b03aeeaf6105db31e797b41e.src","preCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = GenericRecord.create(writeSchema.asStruct());\n    record.setField(\"id\", 34L);\n    Record l1 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType());\n    l1.setField(\"lat\", 53.992811f);\n    l1.setField(\"long\", -1.542616f);\n    Record l2 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType());\n    l2.setField(\"lat\", 52.995143f);\n    l2.setField(\"long\", -1.539054f);\n    record.setField(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.getField(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.getField(\"locations\"), toStringMap((Map) projected.getField(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.getField(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.getField(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2020-04-10 00:11:46","commitOrder":2,"curCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = GenericRecord.create(writeSchema);\n    record.setField(\"id\", 34L);\n    Record l1 = GenericRecord.create(writeSchema.findType(\"locations.value\").asStructType());\n    l1.setField(\"lat\", 53.992811f);\n    l1.setField(\"long\", -1.542616f);\n    Record l2 = GenericRecord.create(l1.struct());\n    l2.setField(\"lat\", 52.995143f);\n    l2.setField(\"long\", -1.539054f);\n    record.setField(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.getField(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.getField(\"locations\"), toStringMap((Map) projected.getField(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.getField(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.getField(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n  }\n","date":"2020-04-10 00:11:46","endLine":425,"groupId":"10312","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/4f/955a7d1ee5947423ec86a729d29e93fba8bd8d.src","preCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(fromOption(\n        fromOption(record.getSchema().getField(\"locations\").schema()).getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.get(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = GenericRecord.create(writeSchema.asStruct());\n    record.setField(\"id\", 34L);\n    Record l1 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType());\n    l1.setField(\"lat\", 53.992811f);\n    l1.setField(\"long\", -1.542616f);\n    Record l2 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType());\n    l2.setField(\"lat\", 52.995143f);\n    l2.setField(\"long\", -1.539054f);\n    record.setField(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.getField(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.getField(\"locations\"), toStringMap((Map) projected.getField(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.getField(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.getField(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":406,"groupId":"10312","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/54/b76d8c8647b7c4b03aeeaf6105db31e797b41e.src","preCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = GenericRecord.create(writeSchema.asStruct());\n    record.setField(\"id\", 34L);\n    Record l1 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType());\n    l1.setField(\"lat\", 53.992811f);\n    l1.setField(\"long\", -1.542616f);\n    Record l2 = GenericRecord.create(writeSchema.findType(\"locations\").asMapType().valueType().asStructType());\n    l2.setField(\"lat\", 52.995143f);\n    l2.setField(\"long\", -1.539054f);\n    record.setField(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.getField(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.getField(\"locations\"), toStringMap((Map) projected.getField(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.getField(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.getField(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.getField(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    locations = toStringMap((Map) projected.getField(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.getField(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.getField(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.getField(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.getField(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.getField(\"long\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"N"}],"commitId":"898c122118ba99847216c80ca7e0d12821133a8a","commitMessage":"@@@Spark: Add ORC to parameterized tests (#892)\n\n* Spark: Add ORC to parameterized tests.\n\n* Fix GenericsHelpers.\n\n* Build: Increase JVM heap size.\n\n* Fix review comments.\n\n* Revert \"Build: Increase JVM heap size.\"\n\nThis reverts commit 1f0996113923c5d279a5877a03af2db7b7e4e076.\n\n* Avoid keeping records in memory for TestDataFrameWrites.","date":"2020-04-10 00:11:46","modifiedFileCount":"6","status":"M","submitter":"Ryan Blue"}]
