[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  static <T> ColumnIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (ColumnIterator<T>) new ColumnIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (ColumnIterator<T>) new ColumnIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (ColumnIterator<T>) new ColumnIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case FLOAT:\n        return (ColumnIterator<T>) new ColumnIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (ColumnIterator<T>) new ColumnIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (ColumnIterator<T>) new ColumnIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \"\n                + desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":82,"groupId":"54","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newIterator","params":"(ColumnDescriptordesc@StringwriterVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/3c/9848f4688d30f88c85983a6a329c3e378045fd.src","preCode":"  static <T> ColumnIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (ColumnIterator<T>) new ColumnIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (ColumnIterator<T>) new ColumnIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (ColumnIterator<T>) new ColumnIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case FLOAT:\n        return (ColumnIterator<T>) new ColumnIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (ColumnIterator<T>) new ColumnIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (ColumnIterator<T>) new ColumnIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \"\n                + desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ColumnIterator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  static <T> PageIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (PageIterator<T>) new PageIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (PageIterator<T>) new PageIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (PageIterator<T>) new PageIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case FLOAT:\n        return (PageIterator<T>) new PageIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (PageIterator<T>) new PageIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (PageIterator<T>) new PageIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \"\n                + desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":100,"groupId":"54","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newIterator","params":"(ColumnDescriptordesc@StringwriterVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/8c/ba1c9560f59994ec0ea6433e1d90318aaa83c9.src","preCode":"  static <T> PageIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (PageIterator<T>) new PageIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (PageIterator<T>) new PageIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (PageIterator<T>) new PageIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case FLOAT:\n        return (PageIterator<T>) new PageIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (PageIterator<T>) new PageIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (PageIterator<T>) new PageIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \"\n                + desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/PageIterator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2020-07-25 04:52:25","codes":[{"authorDate":"2020-07-25 04:52:25","commitOrder":2,"curCode":"  static <T> ColumnIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (ColumnIterator<T>) new ColumnIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (ColumnIterator<T>) new ColumnIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (ColumnIterator<T>) new ColumnIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case INT96:\n        return (ColumnIterator<T>) new ColumnIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      case FLOAT:\n        return (ColumnIterator<T>) new ColumnIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (ColumnIterator<T>) new ColumnIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (ColumnIterator<T>) new ColumnIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \" +\n            desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","date":"2020-07-25 04:52:25","endLine":83,"groupId":"3079","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"newIterator","params":"(ColumnDescriptordesc@StringwriterVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/99/a7453cf0b2f2b024fe9cc9a0cedabc2a1b5973.src","preCode":"  static <T> ColumnIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (ColumnIterator<T>) new ColumnIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (ColumnIterator<T>) new ColumnIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (ColumnIterator<T>) new ColumnIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case FLOAT:\n        return (ColumnIterator<T>) new ColumnIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (ColumnIterator<T>) new ColumnIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (ColumnIterator<T>) new ColumnIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \" +\n            desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ColumnIterator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"M"},{"authorDate":"2020-07-25 04:52:25","commitOrder":2,"curCode":"  static <T> PageIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (PageIterator<T>) new PageIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (PageIterator<T>) new PageIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (PageIterator<T>) new PageIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case INT96:\n        return (PageIterator<T>) new PageIterator<Binary>(desc, writerVersion) {\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      case FLOAT:\n        return (PageIterator<T>) new PageIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (PageIterator<T>) new PageIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (PageIterator<T>) new PageIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \" +\n            desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","date":"2020-07-25 04:52:25","endLine":94,"groupId":"3079","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newIterator","params":"(ColumnDescriptordesc@StringwriterVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f4/82ae045f358029671902d22e3f44a04ced7ea5.src","preCode":"  static <T> PageIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (PageIterator<T>) new PageIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (PageIterator<T>) new PageIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (PageIterator<T>) new PageIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case FLOAT:\n        return (PageIterator<T>) new PageIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (PageIterator<T>) new PageIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (PageIterator<T>) new PageIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \" +\n            desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/PageIterator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"62ab6a722e2989ad546b5588111002b469d9f660","commitMessage":"@@@Parquet: Support reading int96 timestamps in imported data (#1184)\n\n","date":"2020-07-25 04:52:25","modifiedFileCount":"6","status":"M","submitter":"Gustavo Torres"},{"authorTime":"2020-07-28 00:32:28","codes":[{"authorDate":"2020-07-25 04:52:25","commitOrder":3,"curCode":"  static <T> ColumnIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (ColumnIterator<T>) new ColumnIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (ColumnIterator<T>) new ColumnIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (ColumnIterator<T>) new ColumnIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case INT96:\n        return (ColumnIterator<T>) new ColumnIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      case FLOAT:\n        return (ColumnIterator<T>) new ColumnIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (ColumnIterator<T>) new ColumnIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (ColumnIterator<T>) new ColumnIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \" +\n            desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","date":"2020-07-25 04:52:25","endLine":83,"groupId":"1093","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"newIterator","params":"(ColumnDescriptordesc@StringwriterVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/99/a7453cf0b2f2b024fe9cc9a0cedabc2a1b5973.src","preCode":"  static <T> ColumnIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (ColumnIterator<T>) new ColumnIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (ColumnIterator<T>) new ColumnIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (ColumnIterator<T>) new ColumnIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case INT96:\n        return (ColumnIterator<T>) new ColumnIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      case FLOAT:\n        return (ColumnIterator<T>) new ColumnIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (ColumnIterator<T>) new ColumnIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (ColumnIterator<T>) new ColumnIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \" +\n            desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ColumnIterator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"N"},{"authorDate":"2020-07-28 00:32:28","commitOrder":3,"curCode":"  static <T> PageIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (PageIterator<T>) new PageIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (PageIterator<T>) new PageIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (PageIterator<T>) new PageIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case INT96:\n        return (PageIterator<T>) new PageIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      case FLOAT:\n        return (PageIterator<T>) new PageIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (PageIterator<T>) new PageIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (PageIterator<T>) new PageIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \" +\n            desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","date":"2020-07-28 00:32:28","endLine":95,"groupId":"1093","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"newIterator","params":"(ColumnDescriptordesc@StringwriterVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ce/e5e9ad72e744465baa088ab4bb72e08991a66a.src","preCode":"  static <T> PageIterator<T> newIterator(ColumnDescriptor desc, String writerVersion) {\n    switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n      case BOOLEAN:\n        return (PageIterator<T>) new PageIterator<Boolean>(desc, writerVersion) {\n          @Override\n          public Boolean next() {\n            return nextBoolean();\n          }\n        };\n      case INT32:\n        return (PageIterator<T>) new PageIterator<Integer>(desc, writerVersion) {\n          @Override\n          public Integer next() {\n            return nextInteger();\n          }\n        };\n      case INT64:\n        return (PageIterator<T>) new PageIterator<Long>(desc, writerVersion) {\n          @Override\n          public Long next() {\n            return nextLong();\n          }\n        };\n      case INT96:\n        return (PageIterator<T>) new PageIterator<Binary>(desc, writerVersion) {\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      case FLOAT:\n        return (PageIterator<T>) new PageIterator<Float>(desc, writerVersion) {\n          @Override\n          public Float next() {\n            return nextFloat();\n          }\n        };\n      case DOUBLE:\n        return (PageIterator<T>) new PageIterator<Double>(desc, writerVersion) {\n          @Override\n          public Double next() {\n            return nextDouble();\n          }\n        };\n      case FIXED_LEN_BYTE_ARRAY:\n      case BINARY:\n        return (PageIterator<T>) new PageIterator<Binary>(desc, writerVersion) {\n          @Override\n          public Binary next() {\n            return nextBinary();\n          }\n        };\n      default:\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \" +\n            desc.getPrimitiveType().getPrimitiveTypeName());\n    }\n  }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/PageIterator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"beb3be6f5614c1dde8db3dcd3e13d3477a660966","commitMessage":"@@@Add in missing Override annotations (#1252)\n\n","date":"2020-07-28 00:32:28","modifiedFileCount":"5","status":"M","submitter":"Kyle Bendickson"}]
