[{"authorTime":"2019-05-08 07:47:30","codes":[{"authorDate":"2021-05-11 08:28:30","commitOrder":3,"curCode":"  public void testCreateTransactionAndUpdateSchema() throws IOException {\n    File tableDir = temp.newFolder();\n    Assert.assertTrue(tableDir.delete());\n\n    Transaction txn = TestTables.beginCreate(tableDir, \"test_create\", SCHEMA, unpartitioned());\n\n    Assert.assertNull(\"Starting a create transaction should not commit metadata\",\n        TestTables.readMetadata(\"test_create\"));\n    Assert.assertNull(\"Should have no metadata version\",\n        TestTables.metadataVersion(\"test_create\"));\n\n    txn.updateSchema()\n        .addColumn(\"col\", Types.StringType.get())\n        .setIdentifierFields(\"id\", \"col\")\n        .commit();\n\n    txn.commitTransaction();\n\n    TableMetadata meta = TestTables.readMetadata(\"test_create\");\n    Assert.assertNotNull(\"Table metadata should be created after transaction commits\", meta);\n    Assert.assertEquals(\"Should have metadata version 0\",\n        0, (int) TestTables.metadataVersion(\"test_create\"));\n    Assert.assertEquals(\"Should have 0 manifest files\",\n        0, listManifestFiles(tableDir).size());\n\n    Schema resultSchema = new Schema(\n        Lists.newArrayList(\n            required(1, \"id\", Types.IntegerType.get()),\n            required(2, \"data\", Types.StringType.get()),\n            optional(3, \"col\", Types.StringType.get())),\n        Sets.newHashSet(1, 3)\n    );\n\n    Assert.assertEquals(\"Table schema should match with reassigned IDs\",\n        resultSchema.asStruct(), meta.schema().asStruct());\n    Assert.assertEquals(\"Table schema identifier should match\",\n        resultSchema.identifierFieldIds(), meta.schema().identifierFieldIds());\n    Assert.assertEquals(\"Table spec should match\", unpartitioned(), meta.spec());\n    Assert.assertEquals(\"Table should not have any snapshots\", 0, meta.snapshots().size());\n  }\n","date":"2021-05-11 08:28:30","endLine":116,"groupId":"2486","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTransactionAndUpdateSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a6/93acfce79c6761b1a8507bc75e1cebbd6398ea.src","preCode":"  public void testCreateTransactionAndUpdateSchema() throws IOException {\n    File tableDir = temp.newFolder();\n    Assert.assertTrue(tableDir.delete());\n\n    Transaction txn = TestTables.beginCreate(tableDir, \"test_create\", SCHEMA, unpartitioned());\n\n    Assert.assertNull(\"Starting a create transaction should not commit metadata\",\n        TestTables.readMetadata(\"test_create\"));\n    Assert.assertNull(\"Should have no metadata version\",\n        TestTables.metadataVersion(\"test_create\"));\n\n    txn.updateSchema()\n        .addColumn(\"col\", Types.StringType.get())\n        .setIdentifierFields(\"id\", \"col\")\n        .commit();\n\n    txn.commitTransaction();\n\n    TableMetadata meta = TestTables.readMetadata(\"test_create\");\n    Assert.assertNotNull(\"Table metadata should be created after transaction commits\", meta);\n    Assert.assertEquals(\"Should have metadata version 0\",\n        0, (int) TestTables.metadataVersion(\"test_create\"));\n    Assert.assertEquals(\"Should have 0 manifest files\",\n        0, listManifestFiles(tableDir).size());\n\n    Schema resultSchema = new Schema(\n        Lists.newArrayList(\n            required(1, \"id\", Types.IntegerType.get()),\n            required(2, \"data\", Types.StringType.get()),\n            optional(3, \"col\", Types.StringType.get())),\n        Sets.newHashSet(1, 3)\n    );\n\n    Assert.assertEquals(\"Table schema should match with reassigned IDs\",\n        resultSchema.asStruct(), meta.schema().asStruct());\n    Assert.assertEquals(\"Table schema identifier should match\",\n        resultSchema.identifierFieldIds(), meta.schema().identifierFieldIds());\n    Assert.assertEquals(\"Table spec should match\", unpartitioned(), meta.spec());\n    Assert.assertEquals(\"Table should not have any snapshots\", 0, meta.snapshots().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestCreateTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2019-05-08 07:47:30","commitOrder":3,"curCode":"  public void testCreateDetectsUncommittedChangeOnCommit() throws IOException {\n    File tableDir = temp.newFolder();\n    Assert.assertTrue(tableDir.delete());\n\n    Transaction txn = TestTables.beginCreate(tableDir, \"uncommitted_change\", SCHEMA, unpartitioned());\n\n    Assert.assertNull(\"Starting a create transaction should not commit metadata\",\n        TestTables.readMetadata(\"uncommitted_change\"));\n    Assert.assertNull(\"Should have no metadata version\",\n        TestTables.metadataVersion(\"uncommitted_change\"));\n\n    txn.updateProperties().set(\"test-property\", \"test-value\"); \r\n\n    AssertHelpers.assertThrows(\"Should reject commit when last operation has not committed\",\n        IllegalStateException.class, \"Cannot commit transaction: last operation has not committed\",\n        txn::commitTransaction);\n  }\n","date":"2019-05-08 07:47:30","endLine":259,"groupId":"2486","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateDetectsUncommittedChangeOnCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/bc/8bf4b3ea94a02f3e2e17f7befa7134aa0c03d5.src","preCode":"  public void testCreateDetectsUncommittedChangeOnCommit() throws IOException {\n    File tableDir = temp.newFolder();\n    Assert.assertTrue(tableDir.delete());\n\n    Transaction txn = TestTables.beginCreate(tableDir, \"uncommitted_change\", SCHEMA, unpartitioned());\n\n    Assert.assertNull(\"Starting a create transaction should not commit metadata\",\n        TestTables.readMetadata(\"uncommitted_change\"));\n    Assert.assertNull(\"Should have no metadata version\",\n        TestTables.metadataVersion(\"uncommitted_change\"));\n\n    txn.updateProperties().set(\"test-property\", \"test-value\"); \r\n\n    AssertHelpers.assertThrows(\"Should reject commit when last operation has not committed\",\n        IllegalStateException.class, \"Cannot commit transaction: last operation has not committed\",\n        txn::commitTransaction);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestCreateTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"NB"}],"commitId":"20feb92f87add412c6c0a59b33d63f2a82c19930","commitMessage":"@@@Core: Update schema constructor callers to include fresh identifier (#2556)\n\n","date":"2021-05-11 08:28:30","modifiedFileCount":"6","status":"M","submitter":"Jack Ye"},{"authorTime":"2019-05-08 07:47:30","codes":[{"authorDate":"2021-06-18 03:59:57","commitOrder":4,"curCode":"  public void testCreateTransactionAndUpdateSchema() throws IOException {\n    File tableDir = temp.newFolder();\n    Assert.assertTrue(tableDir.delete());\n\n    Transaction txn = TestTables.beginCreate(tableDir, \"test_create\", SCHEMA, unpartitioned());\n\n    Assert.assertNull(\"Starting a create transaction should not commit metadata\",\n        TestTables.readMetadata(\"test_create\"));\n    Assert.assertNull(\"Should have no metadata version\",\n        TestTables.metadataVersion(\"test_create\"));\n\n    txn.updateSchema()\n        .allowIncompatibleChanges()\n        .addRequiredColumn(\"col\", Types.StringType.get())\n        .setIdentifierFields(\"id\", \"col\")\n        .commit();\n\n    txn.commitTransaction();\n\n    TableMetadata meta = TestTables.readMetadata(\"test_create\");\n    Assert.assertNotNull(\"Table metadata should be created after transaction commits\", meta);\n    Assert.assertEquals(\"Should have metadata version 0\",\n        0, (int) TestTables.metadataVersion(\"test_create\"));\n    Assert.assertEquals(\"Should have 0 manifest files\",\n        0, listManifestFiles(tableDir).size());\n\n    Schema resultSchema = new Schema(\n        Lists.newArrayList(\n            required(1, \"id\", Types.IntegerType.get()),\n            required(2, \"data\", Types.StringType.get()),\n            required(3, \"col\", Types.StringType.get())),\n        Sets.newHashSet(1, 3)\n    );\n\n    Assert.assertEquals(\"Table schema should match with reassigned IDs\",\n        resultSchema.asStruct(), meta.schema().asStruct());\n    Assert.assertEquals(\"Table schema identifier should match\",\n        resultSchema.identifierFieldIds(), meta.schema().identifierFieldIds());\n    Assert.assertEquals(\"Table spec should match\", unpartitioned(), meta.spec());\n    Assert.assertEquals(\"Table should not have any snapshots\", 0, meta.snapshots().size());\n  }\n","date":"2021-06-18 03:59:57","endLine":116,"groupId":"102067","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateTransactionAndUpdateSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/28/3f85470723c7b7dd54beaf8c3f2c59fc376d4a.src","preCode":"  public void testCreateTransactionAndUpdateSchema() throws IOException {\n    File tableDir = temp.newFolder();\n    Assert.assertTrue(tableDir.delete());\n\n    Transaction txn = TestTables.beginCreate(tableDir, \"test_create\", SCHEMA, unpartitioned());\n\n    Assert.assertNull(\"Starting a create transaction should not commit metadata\",\n        TestTables.readMetadata(\"test_create\"));\n    Assert.assertNull(\"Should have no metadata version\",\n        TestTables.metadataVersion(\"test_create\"));\n\n    txn.updateSchema()\n        .addColumn(\"col\", Types.StringType.get())\n        .setIdentifierFields(\"id\", \"col\")\n        .commit();\n\n    txn.commitTransaction();\n\n    TableMetadata meta = TestTables.readMetadata(\"test_create\");\n    Assert.assertNotNull(\"Table metadata should be created after transaction commits\", meta);\n    Assert.assertEquals(\"Should have metadata version 0\",\n        0, (int) TestTables.metadataVersion(\"test_create\"));\n    Assert.assertEquals(\"Should have 0 manifest files\",\n        0, listManifestFiles(tableDir).size());\n\n    Schema resultSchema = new Schema(\n        Lists.newArrayList(\n            required(1, \"id\", Types.IntegerType.get()),\n            required(2, \"data\", Types.StringType.get()),\n            optional(3, \"col\", Types.StringType.get())),\n        Sets.newHashSet(1, 3)\n    );\n\n    Assert.assertEquals(\"Table schema should match with reassigned IDs\",\n        resultSchema.asStruct(), meta.schema().asStruct());\n    Assert.assertEquals(\"Table schema identifier should match\",\n        resultSchema.identifierFieldIds(), meta.schema().identifierFieldIds());\n    Assert.assertEquals(\"Table spec should match\", unpartitioned(), meta.spec());\n    Assert.assertEquals(\"Table should not have any snapshots\", 0, meta.snapshots().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestCreateTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2019-05-08 07:47:30","commitOrder":4,"curCode":"  public void testCreateDetectsUncommittedChangeOnCommit() throws IOException {\n    File tableDir = temp.newFolder();\n    Assert.assertTrue(tableDir.delete());\n\n    Transaction txn = TestTables.beginCreate(tableDir, \"uncommitted_change\", SCHEMA, unpartitioned());\n\n    Assert.assertNull(\"Starting a create transaction should not commit metadata\",\n        TestTables.readMetadata(\"uncommitted_change\"));\n    Assert.assertNull(\"Should have no metadata version\",\n        TestTables.metadataVersion(\"uncommitted_change\"));\n\n    txn.updateProperties().set(\"test-property\", \"test-value\"); \r\n\n    AssertHelpers.assertThrows(\"Should reject commit when last operation has not committed\",\n        IllegalStateException.class, \"Cannot commit transaction: last operation has not committed\",\n        txn::commitTransaction);\n  }\n","date":"2019-05-08 07:47:30","endLine":259,"groupId":"102067","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateDetectsUncommittedChangeOnCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/bc/8bf4b3ea94a02f3e2e17f7befa7134aa0c03d5.src","preCode":"  public void testCreateDetectsUncommittedChangeOnCommit() throws IOException {\n    File tableDir = temp.newFolder();\n    Assert.assertTrue(tableDir.delete());\n\n    Transaction txn = TestTables.beginCreate(tableDir, \"uncommitted_change\", SCHEMA, unpartitioned());\n\n    Assert.assertNull(\"Starting a create transaction should not commit metadata\",\n        TestTables.readMetadata(\"uncommitted_change\"));\n    Assert.assertNull(\"Should have no metadata version\",\n        TestTables.metadataVersion(\"uncommitted_change\"));\n\n    txn.updateProperties().set(\"test-property\", \"test-value\"); \r\n\n    AssertHelpers.assertThrows(\"Should reject commit when last operation has not committed\",\n        IllegalStateException.class, \"Cannot commit transaction: last operation has not committed\",\n        txn::commitTransaction);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestCreateTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"N"}],"commitId":"9ebebddaddf1b3ae3f941736ec6868525598a94b","commitMessage":"@@@Core: Do not allow optional.  double.  or float identifier fields (#2705)\n\n","date":"2021-06-18 03:59:57","modifiedFileCount":"4","status":"M","submitter":"Jack Ye"}]
