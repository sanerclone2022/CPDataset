[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public Type map(Types.MapType map, Supplier<Type> keyResult, Supplier<Type> valueResult) {\n    Preconditions.checkArgument(current instanceof MapType, \"Not a map: %s\", current);\n    MapType m = (MapType) current;\n\n    Preconditions.checkArgument(m.valueContainsNull() || !map.isValueOptional(),\n        \"Cannot project a map of optional values as required values: %s\", map);\n    Preconditions.checkArgument(StringType.class.isInstance(m.keyType()),\n        \"Invalid map key type (not string): %s\", m.keyType());\n\n    this.current = m.valueType();\n    try {\n      Type valueType = valueResult.get();\n      if (map.valueType() == valueType) {\n        return map;\n      }\n\n      if (map.isValueOptional()) {\n        return Types.MapType.ofOptional(map.keyId(), map.valueId(), map.keyType(), valueType);\n      } else {\n        return Types.MapType.ofRequired(map.keyId(), map.valueId(), map.keyType(), valueType);\n      }\n    } finally {\n      this.current = m;\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":213,"groupId":"4181","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"map","params":"(Types.MapTypemap@Supplier<Type>keyResult@Supplier<Type>valueResult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d3/5a423fc211931c263e74e7b8b2fb444a637b4b.src","preCode":"  public Type map(Types.MapType map, Supplier<Type> keyResult, Supplier<Type> valueResult) {\n    Preconditions.checkArgument(current instanceof MapType, \"Not a map: %s\", current);\n    MapType m = (MapType) current;\n\n    Preconditions.checkArgument(m.valueContainsNull() || !map.isValueOptional(),\n        \"Cannot project a map of optional values as required values: %s\", map);\n    Preconditions.checkArgument(StringType.class.isInstance(m.keyType()),\n        \"Invalid map key type (not string): %s\", m.keyType());\n\n    this.current = m.valueType();\n    try {\n      Type valueType = valueResult.get();\n      if (map.valueType() == valueType) {\n        return map;\n      }\n\n      if (map.isValueOptional()) {\n        return Types.MapType.ofOptional(map.keyId(), map.valueId(), map.keyType(), valueType);\n      } else {\n        return Types.MapType.ofRequired(map.keyId(), map.valueId(), map.keyType(), valueType);\n      }\n    } finally {\n      this.current = m;\n    }\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public Type map(Types.MapType map, Supplier<Type> keyResult, Supplier<Type> valueResult) {\n    Preconditions.checkArgument(current instanceof MapType, \"Not a map: %s\", current);\n    MapType m = (MapType) current;\n\n    Preconditions.checkArgument(m.valueContainsNull() || !map.isValueOptional(),\n        \"Cannot project a map of optional values as required values: %s\", map);\n\n    this.current = m.valueType();\n    try {\n      Type valueType = valueResult.get();\n      if (map.valueType() == valueType) {\n        return map;\n      }\n\n      if (map.isValueOptional()) {\n        return Types.MapType.ofOptional(map.keyId(), map.valueId(), map.keyType(), valueType);\n      } else {\n        return Types.MapType.ofRequired(map.keyId(), map.valueId(), map.keyType(), valueType);\n      }\n    } finally {\n      this.current = m;\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":187,"groupId":"4181","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"map","params":"(Types.MapTypemap@Supplier<Type>keyResult@Supplier<Type>valueResult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/6c/773740f067f11e13ae9bb94425d445fb55f2e3.src","preCode":"  public Type map(Types.MapType map, Supplier<Type> keyResult, Supplier<Type> valueResult) {\n    Preconditions.checkArgument(current instanceof MapType, \"Not a map: %s\", current);\n    MapType m = (MapType) current;\n\n    Preconditions.checkArgument(m.valueContainsNull() || !map.isValueOptional(),\n        \"Cannot project a map of optional values as required values: %s\", map);\n\n    this.current = m.valueType();\n    try {\n      Type valueType = valueResult.get();\n      if (map.valueType() == valueType) {\n        return map;\n      }\n\n      if (map.isValueOptional()) {\n        return Types.MapType.ofOptional(map.keyId(), map.valueId(), map.keyType(), valueType);\n      } else {\n        return Types.MapType.ofRequired(map.keyId(), map.valueId(), map.keyType(), valueType);\n      }\n    } finally {\n      this.current = m;\n    }\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithoutReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-06-24 23:57:49","codes":[{"authorDate":"2019-06-24 23:57:49","commitOrder":2,"curCode":"  public Type map(Types.MapType map, Supplier<Type> keyResult, Supplier<Type> valueResult) {\n    Preconditions.checkArgument(current instanceof MapType, \"Not a map: %s\", current);\n    MapType requestedMap = (MapType) current;\n\n    Preconditions.checkArgument(requestedMap.valueContainsNull() || !map.isValueOptional(),\n        \"Cannot project a map of optional values as required values: %s\", map);\n    Preconditions.checkArgument(StringType.class.isInstance(requestedMap.keyType()),\n        \"Invalid map key type (not string): %s\", requestedMap.keyType());\n\n    this.current = requestedMap.valueType();\n    try {\n      Type valueType = valueResult.get();\n      if (map.valueType() == valueType) {\n        return map;\n      }\n\n      if (map.isValueOptional()) {\n        return Types.MapType.ofOptional(map.keyId(), map.valueId(), map.keyType(), valueType);\n      } else {\n        return Types.MapType.ofRequired(map.keyId(), map.valueId(), map.keyType(), valueType);\n      }\n    } finally {\n      this.current = requestedMap;\n    }\n  }\n","date":"2019-06-24 23:57:49","endLine":213,"groupId":"10554","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"map","params":"(Types.MapTypemap@Supplier<Type>keyResult@Supplier<Type>valueResult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ed/be39015c429c30f69e858fc15ea407d35fcbc3.src","preCode":"  public Type map(Types.MapType map, Supplier<Type> keyResult, Supplier<Type> valueResult) {\n    Preconditions.checkArgument(current instanceof MapType, \"Not a map: %s\", current);\n    MapType m = (MapType) current;\n\n    Preconditions.checkArgument(m.valueContainsNull() || !map.isValueOptional(),\n        \"Cannot project a map of optional values as required values: %s\", map);\n    Preconditions.checkArgument(StringType.class.isInstance(m.keyType()),\n        \"Invalid map key type (not string): %s\", m.keyType());\n\n    this.current = m.valueType();\n    try {\n      Type valueType = valueResult.get();\n      if (map.valueType() == valueType) {\n        return map;\n      }\n\n      if (map.isValueOptional()) {\n        return Types.MapType.ofOptional(map.keyId(), map.valueId(), map.keyType(), valueType);\n      } else {\n        return Types.MapType.ofRequired(map.keyId(), map.valueId(), map.keyType(), valueType);\n      }\n    } finally {\n      this.current = m;\n    }\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2019-06-24 23:57:49","commitOrder":2,"curCode":"  public Type map(Types.MapType map, Supplier<Type> keyResult, Supplier<Type> valueResult) {\n    Preconditions.checkArgument(current instanceof MapType, \"Not a map: %s\", current);\n    MapType requestedMap = (MapType) current;\n\n    Preconditions.checkArgument(requestedMap.valueContainsNull() || !map.isValueOptional(),\n        \"Cannot project a map of optional values as required values: %s\", map);\n\n    this.current = requestedMap.valueType();\n    try {\n      Type valueType = valueResult.get();\n      if (map.valueType() == valueType) {\n        return map;\n      }\n\n      if (map.isValueOptional()) {\n        return Types.MapType.ofOptional(map.keyId(), map.valueId(), map.keyType(), valueType);\n      } else {\n        return Types.MapType.ofRequired(map.keyId(), map.valueId(), map.keyType(), valueType);\n      }\n    } finally {\n      this.current = requestedMap;\n    }\n  }\n","date":"2019-06-24 23:57:49","endLine":187,"groupId":"10554","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"map","params":"(Types.MapTypemap@Supplier<Type>keyResult@Supplier<Type>valueResult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1c/75b524f60ceef8c11cc8427e464f662e6a10c3.src","preCode":"  public Type map(Types.MapType map, Supplier<Type> keyResult, Supplier<Type> valueResult) {\n    Preconditions.checkArgument(current instanceof MapType, \"Not a map: %s\", current);\n    MapType m = (MapType) current;\n\n    Preconditions.checkArgument(m.valueContainsNull() || !map.isValueOptional(),\n        \"Cannot project a map of optional values as required values: %s\", map);\n\n    this.current = m.valueType();\n    try {\n      Type valueType = valueResult.get();\n      if (map.valueType() == valueType) {\n        return map;\n      }\n\n      if (map.isValueOptional()) {\n        return Types.MapType.ofOptional(map.keyId(), map.valueId(), map.keyType(), valueType);\n      } else {\n        return Types.MapType.ofRequired(map.keyId(), map.valueId(), map.keyType(), valueType);\n      }\n    } finally {\n      this.current = m;\n    }\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithoutReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"5f6fc3be3400cfae858a938213ba8516acc983a5","commitMessage":"@@@[Baseline] Apply Baseline plugin to iceberg-spark (#226)\n\n","date":"2019-06-24 23:57:49","modifiedFileCount":"36","status":"M","submitter":"Anton Okolnychyi"}]
