[{"authorTime":"2020-12-19 07:11:41","codes":[{"authorDate":"2020-12-19 07:11:41","commitOrder":1,"curCode":"  public void testAddNamedPartition() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg\", tableName);\n    Table table = validationCatalog.loadTable(tableIdent);\n\n    Assert.assertTrue(\"Table should start unpartitioned\", table.spec().isUnpartitioned());\n\n    sql(\"ALTER TABLE %s ADD PARTITION FIELD bucket(16, id) AS shard\", tableName);\n\n    table.refresh();\n\n    PartitionSpec expected = PartitionSpec.builderFor(table.schema())\n        .withSpecId(1)\n        .bucket(\"id\", 16, \"shard\")\n        .build();\n\n    Assert.assertEquals(\"Should have new spec field\", expected, table.spec());\n  }\n","date":"2020-12-19 07:11:41","endLine":189,"groupId":"4013","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddNamedPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/80/206b875c4ee7db6acd3c25888925992ec858ab.src","preCode":"  public void testAddNamedPartition() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg\", tableName);\n    Table table = validationCatalog.loadTable(tableIdent);\n\n    Assert.assertTrue(\"Table should start unpartitioned\", table.spec().isUnpartitioned());\n\n    sql(\"ALTER TABLE %s ADD PARTITION FIELD bucket(16, id) AS shard\", tableName);\n\n    table.refresh();\n\n    PartitionSpec expected = PartitionSpec.builderFor(table.schema())\n        .withSpecId(1)\n        .bucket(\"id\", 16, \"shard\")\n        .build();\n\n    Assert.assertEquals(\"Should have new spec field\", expected, table.spec());\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTablePartitionFields.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"},{"authorDate":"2020-12-19 07:11:41","commitOrder":1,"curCode":"  public void testDropPartitionByName() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg\", tableName);\n    Table table = validationCatalog.loadTable(tableIdent);\n\n    Assert.assertTrue(\"Table should start unpartitioned\", table.spec().isUnpartitioned());\n\n    sql(\"ALTER TABLE %s ADD PARTITION FIELD bucket(16, id) AS shard\", tableName);\n\n    table.refresh();\n\n    Assert.assertEquals(\"Table should have 1 partition field\", 1, table.spec().fields().size());\n\n    sql(\"ALTER TABLE %s DROP PARTITION FIELD shard\", tableName);\n\n    table.refresh();\n\n    PartitionSpec expected = PartitionSpec.builderFor(table.schema())\n        .withSpecId(2)\n        .alwaysNull(\"id\", \"shard\")\n        .build();\n\n    Assert.assertEquals(\"Should have new spec field\", expected, table.spec());\n  }\n","date":"2020-12-19 07:11:41","endLine":274,"groupId":"4013","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropPartitionByName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/80/206b875c4ee7db6acd3c25888925992ec858ab.src","preCode":"  public void testDropPartitionByName() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg\", tableName);\n    Table table = validationCatalog.loadTable(tableIdent);\n\n    Assert.assertTrue(\"Table should start unpartitioned\", table.spec().isUnpartitioned());\n\n    sql(\"ALTER TABLE %s ADD PARTITION FIELD bucket(16, id) AS shard\", tableName);\n\n    table.refresh();\n\n    Assert.assertEquals(\"Table should have 1 partition field\", 1, table.spec().fields().size());\n\n    sql(\"ALTER TABLE %s DROP PARTITION FIELD shard\", tableName);\n\n    table.refresh();\n\n    PartitionSpec expected = PartitionSpec.builderFor(table.schema())\n        .withSpecId(2)\n        .alwaysNull(\"id\", \"shard\")\n        .build();\n\n    Assert.assertEquals(\"Should have new spec field\", expected, table.spec());\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTablePartitionFields.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"B"}],"commitId":"d2e5a078299477f9387dab78e0a8eae9d39c7ef2","commitMessage":"@@@Spark: Add SQL commands evolve partition specs (#1948)\n\n","date":"2020-12-19 07:11:41","modifiedFileCount":"1","status":"B","submitter":"Ryan Blue"},{"authorTime":"2021-06-26 00:14:45","codes":[{"authorDate":"2020-12-19 07:11:41","commitOrder":2,"curCode":"  public void testAddNamedPartition() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg\", tableName);\n    Table table = validationCatalog.loadTable(tableIdent);\n\n    Assert.assertTrue(\"Table should start unpartitioned\", table.spec().isUnpartitioned());\n\n    sql(\"ALTER TABLE %s ADD PARTITION FIELD bucket(16, id) AS shard\", tableName);\n\n    table.refresh();\n\n    PartitionSpec expected = PartitionSpec.builderFor(table.schema())\n        .withSpecId(1)\n        .bucket(\"id\", 16, \"shard\")\n        .build();\n\n    Assert.assertEquals(\"Should have new spec field\", expected, table.spec());\n  }\n","date":"2020-12-19 07:11:41","endLine":189,"groupId":"101008","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddNamedPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/80/206b875c4ee7db6acd3c25888925992ec858ab.src","preCode":"  public void testAddNamedPartition() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg\", tableName);\n    Table table = validationCatalog.loadTable(tableIdent);\n\n    Assert.assertTrue(\"Table should start unpartitioned\", table.spec().isUnpartitioned());\n\n    sql(\"ALTER TABLE %s ADD PARTITION FIELD bucket(16, id) AS shard\", tableName);\n\n    table.refresh();\n\n    PartitionSpec expected = PartitionSpec.builderFor(table.schema())\n        .withSpecId(1)\n        .bucket(\"id\", 16, \"shard\")\n        .build();\n\n    Assert.assertEquals(\"Should have new spec field\", expected, table.spec());\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTablePartitionFields.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"N"},{"authorDate":"2021-06-26 00:14:45","commitOrder":2,"curCode":"  public void testDropPartitionByName() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg\", tableName);\n    Table table = validationCatalog.loadTable(tableIdent);\n\n    Assert.assertTrue(\"Table should start unpartitioned\", table.spec().isUnpartitioned());\n\n    sql(\"ALTER TABLE %s ADD PARTITION FIELD bucket(16, id) AS shard\", tableName);\n\n    table.refresh();\n\n    Assert.assertEquals(\"Table should have 1 partition field\", 1, table.spec().fields().size());\n\n    \r\n    sql(\"ALTER TABLE %s DROP  PARTITION \\n FIELD shard\", tableName);\n\n    table.refresh();\n\n    PartitionSpec expected = PartitionSpec.builderFor(table.schema())\n        .withSpecId(2)\n        .alwaysNull(\"id\", \"shard\")\n        .build();\n\n    Assert.assertEquals(\"Should have new spec field\", expected, table.spec());\n  }\n","date":"2021-06-26 00:14:45","endLine":279,"groupId":"101008","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDropPartitionByName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9d/630508b6e401dfee480ee4bc38f3218b7935ad.src","preCode":"  public void testDropPartitionByName() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg\", tableName);\n    Table table = validationCatalog.loadTable(tableIdent);\n\n    Assert.assertTrue(\"Table should start unpartitioned\", table.spec().isUnpartitioned());\n\n    sql(\"ALTER TABLE %s ADD PARTITION FIELD bucket(16, id) AS shard\", tableName);\n\n    table.refresh();\n\n    Assert.assertEquals(\"Table should have 1 partition field\", 1, table.spec().fields().size());\n\n    sql(\"ALTER TABLE %s DROP PARTITION FIELD shard\", tableName);\n\n    table.refresh();\n\n    PartitionSpec expected = PartitionSpec.builderFor(table.schema())\n        .withSpecId(2)\n        .alwaysNull(\"id\", \"shard\")\n        .build();\n\n    Assert.assertEquals(\"Should have new spec field\", expected, table.spec());\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTablePartitionFields.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"c3ac4c6ca74a0013b4705d5bd5d17fade8e6f499","commitMessage":"@@@Spark: Fix check for SQL extensions with extra white space (#2729)\n\n","date":"2021-06-26 00:14:45","modifiedFileCount":"1","status":"M","submitter":"Tim Jiang"}]
