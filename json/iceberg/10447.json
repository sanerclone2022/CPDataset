[{"authorTime":"2020-08-20 08:36:46","codes":[{"authorDate":"2019-06-24 23:57:49","commitOrder":3,"curCode":"    public ParquetValueReader<?> list(Types.ListType expectedList, GroupType array,\n                                      ParquetValueReader<?> elementReader) {\n      GroupType repeated = array.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type elementType = repeated.getType(0);\n      int elementD = type.getMaxDefinitionLevel(path(elementType.getName())) - 1;\n\n      return new ArrayReader<>(repeatedD, repeatedR, ParquetValueReaders.option(elementType, elementD, elementReader));\n    }\n","date":"2019-06-24 23:57:49","endLine":175,"groupId":"4772","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(Types.ListTypeexpectedList@GroupTypearray@ParquetValueReader<?>elementReader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9a/36266ffdf222c4dac237d44b43c458ba5bfe9b.src","preCode":"    public ParquetValueReader<?> list(Types.ListType expectedList, GroupType array,\n                                      ParquetValueReader<?> elementReader) {\n      GroupType repeated = array.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type elementType = repeated.getType(0);\n      int elementD = type.getMaxDefinitionLevel(path(elementType.getName())) - 1;\n\n      return new ArrayReader<>(repeatedD, repeatedR, ParquetValueReaders.option(elementType, elementD, elementReader));\n    }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/data/SparkParquetReaders.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"NB"},{"authorDate":"2020-08-20 08:36:46","commitOrder":3,"curCode":"    public ParquetValueReader<?> list(Types.ListType expectedList, GroupType array,\n                                      ParquetValueReader<?> elementReader) {\n      GroupType repeated = array.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type elementType = repeated.getType(0);\n      int elementD = type.getMaxDefinitionLevel(path(elementType.getName())) - 1;\n\n      return new ArrayReader<>(repeatedD, repeatedR, ParquetValueReaders.option(elementType, elementD, elementReader));\n    }\n","date":"2020-08-20 08:36:46","endLine":143,"groupId":"4772","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(Types.ListTypeexpectedList@GroupTypearray@ParquetValueReader<?>elementReader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/30/12544cba8367880b92039dd5d6a9552d50f001.src","preCode":"    public ParquetValueReader<?> list(Types.ListType expectedList, GroupType array,\n                                      ParquetValueReader<?> elementReader) {\n      GroupType repeated = array.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type elementType = repeated.getType(0);\n      int elementD = type.getMaxDefinitionLevel(path(elementType.getName())) - 1;\n\n      return new ArrayReader<>(repeatedD, repeatedR, ParquetValueReaders.option(elementType, elementD, elementReader));\n    }\n","realPath":"flink/src/main/java/org/apache/iceberg/flink/data/FlinkParquetReaders.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"6cb2db7acb06891502ac4af1845b239ed7cb521d","commitMessage":"@@@Flink: Read Parquet as RowData using a schema visitor (#1266)\n\n","date":"2020-08-20 08:36:46","modifiedFileCount":"5","status":"M","submitter":"Chen Junjie"},{"authorTime":"2020-12-08 10:16:47","codes":[{"authorDate":"2019-06-24 23:57:49","commitOrder":4,"curCode":"    public ParquetValueReader<?> list(Types.ListType expectedList, GroupType array,\n                                      ParquetValueReader<?> elementReader) {\n      GroupType repeated = array.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type elementType = repeated.getType(0);\n      int elementD = type.getMaxDefinitionLevel(path(elementType.getName())) - 1;\n\n      return new ArrayReader<>(repeatedD, repeatedR, ParquetValueReaders.option(elementType, elementD, elementReader));\n    }\n","date":"2019-06-24 23:57:49","endLine":175,"groupId":"10447","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(Types.ListTypeexpectedList@GroupTypearray@ParquetValueReader<?>elementReader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9a/36266ffdf222c4dac237d44b43c458ba5bfe9b.src","preCode":"    public ParquetValueReader<?> list(Types.ListType expectedList, GroupType array,\n                                      ParquetValueReader<?> elementReader) {\n      GroupType repeated = array.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type elementType = repeated.getType(0);\n      int elementD = type.getMaxDefinitionLevel(path(elementType.getName())) - 1;\n\n      return new ArrayReader<>(repeatedD, repeatedR, ParquetValueReaders.option(elementType, elementD, elementReader));\n    }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/data/SparkParquetReaders.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"N"},{"authorDate":"2020-12-08 10:16:47","commitOrder":4,"curCode":"    public ParquetValueReader<?> list(Types.ListType expectedList, GroupType array,\n                                      ParquetValueReader<?> elementReader) {\n      if (expectedList == null) {\n        return null;\n      }\n\n      GroupType repeated = array.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type elementType = repeated.getType(0);\n      int elementD = type.getMaxDefinitionLevel(path(elementType.getName())) - 1;\n\n      return new ArrayReader<>(repeatedD, repeatedR, ParquetValueReaders.option(elementType, elementD, elementReader));\n    }\n","date":"2020-12-08 10:16:47","endLine":153,"groupId":"10447","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(Types.ListTypeexpectedList@GroupTypearray@ParquetValueReader<?>elementReader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/6f/95d652ceab5aa73312fb1adc5c22471d9a946d.src","preCode":"    public ParquetValueReader<?> list(Types.ListType expectedList, GroupType array,\n                                      ParquetValueReader<?> elementReader) {\n      GroupType repeated = array.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type elementType = repeated.getType(0);\n      int elementD = type.getMaxDefinitionLevel(path(elementType.getName())) - 1;\n\n      return new ArrayReader<>(repeatedD, repeatedR, ParquetValueReaders.option(elementType, elementD, elementReader));\n    }\n","realPath":"flink/src/main/java/org/apache/iceberg/flink/data/FlinkParquetReaders.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"c3dd3e19a766b2111fb8378eb7834587dd65eb1d","commitMessage":"@@@Flink: fix projection NPE caused by timestamp type (#1882)\n\n","date":"2020-12-08 10:16:47","modifiedFileCount":"2","status":"M","submitter":"Chen Junjie"}]
