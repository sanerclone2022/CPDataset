[{"authorTime":"2019-12-28 05:07:53","codes":[{"authorDate":"2019-05-29 03:40:04","commitOrder":3,"curCode":"    public <T> Boolean gtEq(BoundReference<T> ref, Literal<T> lit) {\n      Integer id = ref.fieldId();\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        int cmp = lit.comparator().compare(upper, lit.value());\n        if (cmp < 0) {\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","date":"2019-05-29 03:40:04","endLine":284,"groupId":"1306","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"gtEq","params":"(BoundReference<T>ref@Literal<T>lit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/88/4ac16c590cca7ff064d328957686cb8739939c.src","preCode":"    public <T> Boolean gtEq(BoundReference<T> ref, Literal<T> lit) {\n      Integer id = ref.fieldId();\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        int cmp = lit.comparator().compare(upper, lit.value());\n        if (cmp < 0) {\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ParquetMetricsRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"NB"},{"authorDate":"2019-12-28 05:07:53","commitOrder":3,"curCode":"    public <T> Boolean in(BoundReference<T> ref, Set<T> literalSet) {\n      Integer id = ref.fieldId();\n\n      \r\n      \r\n      \r\n      if (schema.findType(id) instanceof Type.NestedType) {\n        return ROWS_MIGHT_MATCH;\n      }\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        Collection<T> literals = literalSet;\n\n        T lower = min(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(lower, v) <= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) {  \r\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(upper, v) >= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) { \r\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","date":"2019-12-28 05:07:53","endLine":374,"groupId":"5009","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"in","params":"(BoundReference<T>ref@Set<T>literalSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/2d/072222cfbc10d4c557fccacf82fc0d8b45e740.src","preCode":"    public <T> Boolean in(BoundReference<T> ref, Set<T> literalSet) {\n      Integer id = ref.fieldId();\n\n      \r\n      \r\n      \r\n      if (schema.findType(id) instanceof Type.NestedType) {\n        return ROWS_MIGHT_MATCH;\n      }\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        Collection<T> literals = literalSet;\n\n        T lower = min(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(lower, v) <= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) {  \r\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(upper, v) >= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) { \r\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ParquetMetricsRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"B"}],"commitId":"33e675331e221af0b2618815addbdb4fb29c9083","commitMessage":"@@@Implement in and notIn in multiple visitors (#600)\n\n","date":"2019-12-28 05:07:53","modifiedFileCount":"10","status":"M","submitter":"jun-he"},{"authorTime":"2020-10-22 08:07:37","codes":[{"authorDate":"2020-10-22 08:07:37","commitOrder":4,"curCode":"    public <T> Boolean gtEq(BoundReference<T> ref, Literal<T> lit) {\n      Integer id = ref.fieldId();\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (hasNonNullButNoMinMax(colStats, valueCount)) {\n          return ROWS_MIGHT_MATCH;\n        }\n\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        int cmp = lit.comparator().compare(upper, lit.value());\n        if (cmp < 0) {\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","date":"2020-10-22 08:07:37","endLine":295,"groupId":"1306","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"gtEq","params":"(BoundReference<T>ref@Literal<T>lit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/3a/a266002f7f916173f1ac6303525383683291d1.src","preCode":"    public <T> Boolean gtEq(BoundReference<T> ref, Literal<T> lit) {\n      Integer id = ref.fieldId();\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        int cmp = lit.comparator().compare(upper, lit.value());\n        if (cmp < 0) {\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ParquetMetricsRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"},{"authorDate":"2020-10-22 08:07:37","commitOrder":4,"curCode":"    public <T> Boolean in(BoundReference<T> ref, Set<T> literalSet) {\n      Integer id = ref.fieldId();\n\n      \r\n      \r\n      \r\n      if (schema.findType(id) instanceof Type.NestedType) {\n        return ROWS_MIGHT_MATCH;\n      }\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (hasNonNullButNoMinMax(colStats, valueCount)) {\n          return ROWS_MIGHT_MATCH;\n        }\n\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        Collection<T> literals = literalSet;\n\n        T lower = min(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(lower, v) <= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) {  \r\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(upper, v) >= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) { \r\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","date":"2020-10-22 08:07:37","endLine":390,"groupId":"1306","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"in","params":"(BoundReference<T>ref@Set<T>literalSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/3a/a266002f7f916173f1ac6303525383683291d1.src","preCode":"    public <T> Boolean in(BoundReference<T> ref, Set<T> literalSet) {\n      Integer id = ref.fieldId();\n\n      \r\n      \r\n      \r\n      if (schema.findType(id) instanceof Type.NestedType) {\n        return ROWS_MIGHT_MATCH;\n      }\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        Collection<T> literals = literalSet;\n\n        T lower = min(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(lower, v) <= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) {  \r\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(upper, v) >= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) { \r\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ParquetMetricsRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"}],"commitId":"997f571273509270904f4ce7490af0cbe9262190","commitMessage":"@@@Parquet: Fix row group filtering with old CDH stats (#1638)\n\n","date":"2020-10-22 08:07:37","modifiedFileCount":"1","status":"M","submitter":"Russell Spitzer"},{"authorTime":"2020-10-29 06:57:56","codes":[{"authorDate":"2020-10-22 08:07:37","commitOrder":5,"curCode":"    public <T> Boolean gtEq(BoundReference<T> ref, Literal<T> lit) {\n      Integer id = ref.fieldId();\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (hasNonNullButNoMinMax(colStats, valueCount)) {\n          return ROWS_MIGHT_MATCH;\n        }\n\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        int cmp = lit.comparator().compare(upper, lit.value());\n        if (cmp < 0) {\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","date":"2020-10-22 08:07:37","endLine":295,"groupId":"10109","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"gtEq","params":"(BoundReference<T>ref@Literal<T>lit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/3a/a266002f7f916173f1ac6303525383683291d1.src","preCode":"    public <T> Boolean gtEq(BoundReference<T> ref, Literal<T> lit) {\n      Integer id = ref.fieldId();\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (hasNonNullButNoMinMax(colStats, valueCount)) {\n          return ROWS_MIGHT_MATCH;\n        }\n\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        int cmp = lit.comparator().compare(upper, lit.value());\n        if (cmp < 0) {\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ParquetMetricsRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"N"},{"authorDate":"2020-10-29 06:57:56","commitOrder":5,"curCode":"    public <T> Boolean in(BoundReference<T> ref, Set<T> literalSet) {\n      Integer id = ref.fieldId();\n\n      \r\n      \r\n      \r\n      if (schema.findType(id) instanceof Type.NestedType) {\n        return ROWS_MIGHT_MATCH;\n      }\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (hasNonNullButNoMinMax(colStats, valueCount)) {\n          return ROWS_MIGHT_MATCH;\n        }\n\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        Collection<T> literals = literalSet;\n\n        if (literals.size() > IN_PREDICATE_LIMIT) {\n          \r\n          return ROWS_MIGHT_MATCH;\n        }\n\n        T lower = min(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(lower, v) <= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) {  \r\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(upper, v) >= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) { \r\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","date":"2020-10-29 06:57:56","endLine":397,"groupId":"10109","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"in","params":"(BoundReference<T>ref@Set<T>literalSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e4/2f44026fce4d17ebc6e74772bf9eeab2191d10.src","preCode":"    public <T> Boolean in(BoundReference<T> ref, Set<T> literalSet) {\n      Integer id = ref.fieldId();\n\n      \r\n      \r\n      \r\n      if (schema.findType(id) instanceof Type.NestedType) {\n        return ROWS_MIGHT_MATCH;\n      }\n\n      Long valueCount = valueCounts.get(id);\n      if (valueCount == null) {\n        \r\n        return ROWS_CANNOT_MATCH;\n      }\n\n      Statistics<?> colStats = stats.get(id);\n      if (colStats != null && !colStats.isEmpty()) {\n        if (hasNonNullButNoMinMax(colStats, valueCount)) {\n          return ROWS_MIGHT_MATCH;\n        }\n\n        if (!colStats.hasNonNullValue()) {\n          return ROWS_CANNOT_MATCH;\n        }\n\n        Collection<T> literals = literalSet;\n\n        T lower = min(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(lower, v) <= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) {  \r\n          return ROWS_CANNOT_MATCH;\n        }\n\n        T upper = max(colStats, id);\n        literals = literals.stream().filter(v -> ref.comparator().compare(upper, v) >= 0).collect(Collectors.toList());\n        if (literals.isEmpty()) { \r\n          return ROWS_CANNOT_MATCH;\n        }\n      }\n\n      return ROWS_MIGHT_MATCH;\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ParquetMetricsRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"}],"commitId":"444779d86ba7fc21a1754aa21610aa7d1dc3ea23","commitMessage":"@@@Fix IN predicate performance (#1672)\n\n","date":"2020-10-29 06:57:56","modifiedFileCount":"5","status":"M","submitter":"Anton Okolnychyi"}]
