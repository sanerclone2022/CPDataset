[{"authorTime":"2020-08-14 03:27:26","codes":[{"authorDate":"2020-08-14 03:27:26","commitOrder":1,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null) {\n        Preconditions.checkState(createWriterFunc != null,\n            \"Cannot create delete file with deletes rows unless createWriterFunc is set\");\n\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema)));\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","date":"2020-08-14 03:27:26","endLine":418,"groupId":"2900","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/6a/04542fd552f6ae27f4b48a7b3d55539174d370.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null) {\n        Preconditions.checkState(createWriterFunc != null,\n            \"Cannot create delete file with deletes rows unless createWriterFunc is set\");\n\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema)));\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/Parquet.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"B"},{"authorDate":"2020-08-14 03:27:26","commitOrder":1,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null) {\n        Preconditions.checkState(createWriterFunc != null,\n            \"Cannot create delete file with deletes rows unless createWriterFunc is set\");\n\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","date":"2020-08-14 03:27:26","endLine":328,"groupId":"4980","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7c/6c7a1e31bed0b735d74a6de40782b9769317af.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null) {\n        Preconditions.checkState(createWriterFunc != null,\n            \"Cannot create delete file with deletes rows unless createWriterFunc is set\");\n\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/Avro.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"}],"commitId":"50f4ecca7711e69f63589fea828d26230fac8d59","commitMessage":"@@@Add Avro and Parquet delete file writers (#1327)\n\n","date":"2020-08-14 03:27:26","modifiedFileCount":"6","status":"B","submitter":"Ryan Blue"},{"authorTime":"2020-08-19 05:51:48","codes":[{"authorDate":"2020-08-19 05:51:48","commitOrder":2,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema)));\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","date":"2020-08-19 05:51:48","endLine":415,"groupId":"2900","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/61/adf56b73def71eb890d698dd05ed373325dcc3.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null) {\n        Preconditions.checkState(createWriterFunc != null,\n            \"Cannot create delete file with deletes rows unless createWriterFunc is set\");\n\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema)));\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/Parquet.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"},{"authorDate":"2020-08-19 05:51:48","commitOrder":2,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","date":"2020-08-19 05:51:48","endLine":325,"groupId":"4980","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/58/4c28070c9ba0c8c967a51ba48af87063199cd3.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null) {\n        Preconditions.checkState(createWriterFunc != null,\n            \"Cannot create delete file with deletes rows unless createWriterFunc is set\");\n\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/Avro.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"}],"commitId":"c8d9c85c29ad9426fbaa46687fdc07b1ce1b8f71","commitMessage":"@@@Core: Add file stats range optimizations for DeleteFileIndex (#1338)\n\n","date":"2020-08-19 05:51:48","modifiedFileCount":"10","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-08-19 05:51:48","codes":[{"authorDate":"2020-12-02 12:11:44","commitOrder":3,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer, pathTransformFunc);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema),\n                Function.identity()));\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","date":"2020-12-02 12:11:44","endLine":415,"groupId":"1297","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/17/e1275216e0f9ec26cd9d69c0dea1b0f35a3024.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema)));\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/Parquet.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"},{"authorDate":"2020-08-19 05:51:48","commitOrder":3,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","date":"2020-08-19 05:51:48","endLine":325,"groupId":"4980","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/58/4c28070c9ba0c8c967a51ba48af87063199cd3.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/Avro.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"N"}],"commitId":"4383ad4960feb0f22b85dd26a463d7776b64c077","commitMessage":"@@@Core: Add data and delete writers in FileAppenderFactory. (#1836)\n\n","date":"2020-12-02 12:11:44","modifiedFileCount":"12","status":"M","submitter":"openinx"},{"authorTime":"2020-12-08 03:50:56","codes":[{"authorDate":"2020-12-02 12:11:44","commitOrder":4,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer, pathTransformFunc);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema),\n                Function.identity()));\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","date":"2020-12-02 12:11:44","endLine":415,"groupId":"1297","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/17/e1275216e0f9ec26cd9d69c0dea1b0f35a3024.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer, pathTransformFunc);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema),\n                Function.identity()));\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/Parquet.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"N"},{"authorDate":"2020-12-08 03:50:56","commitOrder":4,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","date":"2020-12-08 03:50:56","endLine":317,"groupId":"4537","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/5a/34eedc80d555f2053e94e17182dfe3e5e7fbb9.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS,\n            NestedField.optional(\n                MetadataColumns.DELETE_FILE_ROW_FIELD_ID, \"row\", rowSchema.asStruct(),\n                MetadataColumns.DELETE_FILE_ROW_DOC)));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(new org.apache.iceberg.Schema(\n            MetadataColumns.DELETE_FILE_PATH,\n            MetadataColumns.DELETE_FILE_POS));\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/Avro.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"df1859d83893941f7ef5ceaabd8a5394983feed2","commitMessage":"@@@Core: Add SortedPosDeleteWriter (#1858)\n\n","date":"2020-12-08 03:50:56","modifiedFileCount":"1","status":"M","submitter":"openinx"},{"authorTime":"2021-07-24 05:28:02","codes":[{"authorDate":"2021-07-24 05:28:02","commitOrder":5,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer, pathTransformFunc);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema),\n                Function.identity()));\n      }\n\n      appenderBuilder.createContextFunc(WriteBuilder.Context::deleteContext);\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","date":"2021-07-24 05:28:02","endLine":527,"groupId":"1297","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/69/ae1cf0096607c3358cff17c039cf7d384449f0.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer, pathTransformFunc);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema),\n                Function.identity()));\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/Parquet.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":497,"status":"M"},{"authorDate":"2021-07-24 05:28:02","commitOrder":5,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      appenderBuilder.createContextFunc(WriteBuilder.Context::deleteContext);\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","date":"2021-07-24 05:28:02","endLine":376,"groupId":"4537","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/28/790faf47bc1a43b4bb4008f2afdfe2c313f1f2.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/Avro.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"c29b2b9722f6306f21016a78fab95aacdb9d1083","commitMessage":"@@@Core: Add table properties for Avro and Parquet delete files (#2851)\n\n","date":"2021-07-24 05:28:02","modifiedFileCount":"3","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2021-07-31 15:18:17","codes":[{"authorDate":"2021-07-31 15:18:17","commitOrder":6,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n      Preconditions.checkArgument(spec != null,\n          \"Spec must not be null when creating position delete writer\");\n      Preconditions.checkArgument(spec.isUnpartitioned() || partition != null,\n          \"Partition must not be null for partitioned writes\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer, pathTransformFunc);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema),\n                Function.identity()));\n      }\n\n      appenderBuilder.createContextFunc(WriteBuilder.Context::deleteContext);\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","date":"2021-07-31 15:18:17","endLine":630,"groupId":"10112","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/aa/dddbf4b34be522febd93a2998b8ba745845227.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(parquetSchema -> {\n          ParquetValueWriter<?> writer = createWriterFunc.apply(parquetSchema);\n          if (writer instanceof StructWriter) {\n            return new PositionDeleteStructWriter<T>((StructWriter<?>) writer, pathTransformFunc);\n          } else {\n            throw new UnsupportedOperationException(\"Cannot wrap writer for position deletes: \" + writer.getClass());\n          }\n        });\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(parquetSchema ->\n            new PositionDeleteStructWriter<T>((StructWriter<?>) GenericParquetWriter.buildWriter(parquetSchema),\n                Function.identity()));\n      }\n\n      appenderBuilder.createContextFunc(WriteBuilder.Context::deleteContext);\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.PARQUET, location, spec, partition, keyMetadata);\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/Parquet.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"},{"authorDate":"2021-07-31 15:18:17","commitOrder":6,"curCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n      Preconditions.checkArgument(spec != null,\n          \"Spec must not be null when creating position delete writer\");\n      Preconditions.checkArgument(spec.isUnpartitioned() || partition != null,\n          \"Partition must not be null for partitioned writes\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      appenderBuilder.createContextFunc(WriteBuilder.Context::deleteContext);\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","date":"2021-07-31 15:18:17","endLine":479,"groupId":"10112","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"buildPositionWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/59/715b01b0e7f21c55a17b8a1c0f7d31b96a0bf8.src","preCode":"    public <T> PositionDeleteWriter<T> buildPositionWriter() throws IOException {\n      Preconditions.checkState(equalityFieldIds == null, \"Cannot create position delete file using delete field ids\");\n\n      meta(\"delete-type\", \"position\");\n\n      if (rowSchema != null && createWriterFunc != null) {\n        \r\n        appenderBuilder.schema(DeleteSchemaUtil.posDeleteSchema(rowSchema));\n\n        appenderBuilder.createWriterFunc(\n            avroSchema -> new PositionAndRowDatumWriter<>(createWriterFunc.apply(avroSchema)));\n\n      } else {\n        appenderBuilder.schema(DeleteSchemaUtil.pathPosSchema());\n\n        appenderBuilder.createWriterFunc(ignored -> new PositionDatumWriter());\n      }\n\n      appenderBuilder.createContextFunc(WriteBuilder.Context::deleteContext);\n\n      return new PositionDeleteWriter<>(\n          appenderBuilder.build(), FileFormat.AVRO, location, spec, partition, keyMetadata);\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/Avro.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"970e8aac60081c7d286ab0f7e12e428b3309dd34","commitMessage":"@@@Core: Add WriterFactory (#2873)\n\n","date":"2021-07-31 15:18:17","modifiedFileCount":"4","status":"M","submitter":"Anton Okolnychyi"}]
