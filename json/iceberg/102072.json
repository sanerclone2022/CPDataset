[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops, System.currentTimeMillis(),\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops, json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n  }\n","date":"2019-03-21 07:25:05","endLine":53,"groupId":"3803","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonConversion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f4/f99ef2ddb164bde03d019b02d177b3113bc08d.src","preCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops, System.currentTimeMillis(),\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops, json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops, id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops, json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n  }\n","date":"2019-03-21 07:25:05","endLine":84,"groupId":"4500","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonConversionWithOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f4/f99ef2ddb164bde03d019b02d177b3113bc08d.src","preCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops, id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops, json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-11-21 01:48:39","codes":[{"authorDate":"2019-11-21 01:48:39","commitOrder":2,"curCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops.io(), System.currentTimeMillis(),\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n  }\n","date":"2019-11-21 01:48:39","endLine":53,"groupId":"265","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonConversion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/16/ad4ee16a75e6b95d97dab373ed4ec098c9f9c2.src","preCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops, System.currentTimeMillis(),\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops, json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2019-11-21 01:48:39","commitOrder":2,"curCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops.io(), id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n  }\n","date":"2019-11-21 01:48:39","endLine":84,"groupId":"3060","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonConversionWithOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/16/ad4ee16a75e6b95d97dab373ed4ec098c9f9c2.src","preCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops, id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops, json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"083edc1f749d9a64cd4042fb360a27a0a3bfe03c","commitMessage":"@@@Decouple TableMetadataParser and TableMetadata from TableOperations (#591)\n\nThe rationale behind not using TableOperations is:\n1. It saves the need to construct a TableOperations instance when you\n?? want to get a table's metadata by parsing its metadata files.\n2. It's more intuitive because a TableMetadata instance reflects a\n?? table's state and is determined by only a set of metadata files.","date":"2019-11-21 01:48:39","modifiedFileCount":"19","status":"M","submitter":"Xingyuan Lin"},{"authorTime":"2020-04-11 07:02:33","codes":[{"authorDate":"2019-11-21 01:48:39","commitOrder":3,"curCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops.io(), System.currentTimeMillis(),\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n  }\n","date":"2019-11-21 01:48:39","endLine":53,"groupId":"265","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonConversion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/16/ad4ee16a75e6b95d97dab373ed4ec098c9f9c2.src","preCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops.io(), System.currentTimeMillis(),\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"},{"authorDate":"2020-04-11 07:02:33","commitOrder":3,"curCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops.io(), id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Sequence number should default to 0 for v1\",\n        0, snapshot.sequenceNumber());\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n  }\n","date":"2020-04-11 07:02:33","endLine":86,"groupId":"266","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonConversionWithOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/67/c1c04fe089088cdc2f1b12016f74888b76625c.src","preCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops.io(), id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"720b240a3e6a32b6f01173ebcc448c2c6e32e13a","commitMessage":"@@@Update Snapshot and TableMetadata with sequence numbers (#910)\n\n","date":"2020-04-11 07:02:33","modifiedFileCount":"11","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-06-03 03:43:03","codes":[{"authorDate":"2020-06-03 03:43:03","commitOrder":4,"curCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops.io(), System.currentTimeMillis(),\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.allManifests(), snapshot.allManifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n  }\n","date":"2020-06-03 03:43:03","endLine":53,"groupId":"265","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonConversion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/8e/03bec2f428a8f805bfd39164802f0c9d8cc8ce.src","preCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops.io(), System.currentTimeMillis(),\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-06-03 03:43:03","commitOrder":4,"curCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops.io(), id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Sequence number should default to 0 for v1\",\n        0, snapshot.sequenceNumber());\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.allManifests(), snapshot.allManifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n  }\n","date":"2020-06-03 03:43:03","endLine":86,"groupId":"266","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonConversionWithOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/8e/03bec2f428a8f805bfd39164802f0c9d8cc8ce.src","preCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops.io(), id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Sequence number should default to 0 for v1\",\n        0, snapshot.sequenceNumber());\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.manifests(), snapshot.manifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"482f420141486f5b7b02bd62dc14cdb94b9a9cca","commitMessage":"@@@Split Snapshot.manifests into dataManifests and deleteManifests (#1080)\n\nThis replaces all calls to Snapshot.manifests with calls to one of 3 new methods:\n\n* `Snapshot.allManifests` returns both delete and data manifests\n* `Snapshot.deleteManifests` returns only delete manifests\n* `Snapshot.dataManifests` returns only data manifests\n\nExisting references mostly use either `allManifests` or `dataManifests`.  depending on the context. For example.  tests with assertions for the number of manifests use `allManifests` because the test cases should validate there are no new delete manifests.  but other tests that validate rewritten manifests are deleted use `dataManifests` because only data manifests are rewritten and deleted.\n\nThis tries to make minimal changes that preserve the current behavior. Operations are not updated to support delete manifests (rewrite still only rewrites data manifests).  but will carry through the list of delete manifests correctly.","date":"2020-06-03 03:43:03","modifiedFileCount":"46","status":"M","submitter":"Ryan Blue"},{"authorTime":"2021-06-29 08:24:47","codes":[{"authorDate":"2021-06-29 08:24:47","commitOrder":5,"curCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops.io(), System.currentTimeMillis(), 1,\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.allManifests(), snapshot.allManifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n    Assert.assertEquals(\"Schema ID should match\", Integer.valueOf(1), snapshot.schemaId());\n  }\n","date":"2021-06-29 08:24:47","endLine":54,"groupId":"102072","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testJsonConversion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/22/f0b0ccdbc6146171b9c646f001fe9db9157ea0.src","preCode":"  public void testJsonConversion() {\n    Snapshot expected = new BaseSnapshot(ops.io(), System.currentTimeMillis(),\n        \"file:/tmp/manifest1.avro\", \"file:/tmp/manifest2.avro\");\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Files should match\",\n        expected.allManifests(), snapshot.allManifests());\n    Assert.assertNull(\"Operation should be null\", snapshot.operation());\n    Assert.assertNull(\"Summary should be null\", snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2021-06-29 08:24:47","commitOrder":5,"curCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops.io(), id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        3, manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Sequence number should default to 0 for v1\",\n        0, snapshot.sequenceNumber());\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.allManifests(), snapshot.allManifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n    Assert.assertEquals(\"Schema ID should match\",\n        expected.schemaId(), snapshot.schemaId());\n  }\n","date":"2021-06-29 08:24:47","endLine":105,"groupId":"102072","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testJsonConversionWithOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/22/f0b0ccdbc6146171b9c646f001fe9db9157ea0.src","preCode":"  public void testJsonConversionWithOperation() {\n    long parentId = 1;\n    long id = 2;\n    List<ManifestFile> manifests = ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manifest1.avro\"), 0),\n        new GenericManifestFile(localInput(\"file:/tmp/manifest2.avro\"), 0));\n\n    Snapshot expected = new BaseSnapshot(ops.io(), id, parentId, System.currentTimeMillis(),\n        DataOperations.REPLACE, ImmutableMap.of(\"files-added\", \"4\", \"files-deleted\", \"100\"),\n        manifests);\n\n    String json = SnapshotParser.toJson(expected);\n    Snapshot snapshot = SnapshotParser.fromJson(ops.io(), json);\n\n    Assert.assertEquals(\"Sequence number should default to 0 for v1\",\n        0, snapshot.sequenceNumber());\n    Assert.assertEquals(\"Snapshot ID should match\",\n        expected.snapshotId(), snapshot.snapshotId());\n    Assert.assertEquals(\"Timestamp should match\",\n        expected.timestampMillis(), snapshot.timestampMillis());\n    Assert.assertEquals(\"Parent ID should match\",\n        expected.parentId(), snapshot.parentId());\n    Assert.assertEquals(\"Manifest list should match\",\n        expected.manifestListLocation(), snapshot.manifestListLocation());\n    Assert.assertEquals(\"Files should match\",\n        expected.allManifests(), snapshot.allManifests());\n    Assert.assertEquals(\"Operation should match\",\n        expected.operation(), snapshot.operation());\n    Assert.assertEquals(\"Summary should match\",\n        expected.summary(), snapshot.summary());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSnapshotJson.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"d4d376bb559e8dc83da3cb7ecbb8ff9205d68f21","commitMessage":"@@@Core: Add schema-id to snapshots (#2275)\n\n","date":"2021-06-29 08:24:47","modifiedFileCount":"13","status":"M","submitter":"yyanyy"}]
