[{"authorTime":"2020-08-25 08:45:43","codes":[{"authorDate":"2020-05-07 23:55:01","commitOrder":3,"curCode":"    public ParquetValueWriter<?> primitive(DataType sType, PrimitiveType primitive) {\n      ColumnDescriptor desc = type.getColumnDescription(currentPath());\n\n      if (primitive.getOriginalType() != null) {\n        switch (primitive.getOriginalType()) {\n          case ENUM:\n          case JSON:\n          case UTF8:\n            return utf8Strings(desc);\n          case DATE:\n          case INT_8:\n          case INT_16:\n          case INT_32:\n            return ints(sType, desc);\n          case INT_64:\n          case TIME_MICROS:\n          case TIMESTAMP_MICROS:\n            return ParquetValueWriters.longs(desc);\n          case DECIMAL:\n            DecimalMetadata decimal = primitive.getDecimalMetadata();\n            switch (primitive.getPrimitiveTypeName()) {\n              case INT32:\n                return decimalAsInteger(desc, decimal.getPrecision(), decimal.getScale());\n              case INT64:\n                return decimalAsLong(desc, decimal.getPrecision(), decimal.getScale());\n              case BINARY:\n              case FIXED_LEN_BYTE_ARRAY:\n                return decimalAsFixed(desc, decimal.getPrecision(), decimal.getScale());\n              default:\n                throw new UnsupportedOperationException(\n                    \"Unsupported base type for decimal: \" + primitive.getPrimitiveTypeName());\n            }\n          case BSON:\n            return byteArrays(desc);\n          default:\n            throw new UnsupportedOperationException(\n                \"Unsupported logical type: \" + primitive.getOriginalType());\n        }\n      }\n\n      switch (primitive.getPrimitiveTypeName()) {\n        case FIXED_LEN_BYTE_ARRAY:\n        case BINARY:\n          return byteArrays(desc);\n        case BOOLEAN:\n          return ParquetValueWriters.booleans(desc);\n        case INT32:\n          return ints(sType, desc);\n        case INT64:\n          return ParquetValueWriters.longs(desc);\n        case FLOAT:\n          return ParquetValueWriters.floats(desc);\n        case DOUBLE:\n          return ParquetValueWriters.doubles(desc);\n        default:\n          throw new UnsupportedOperationException(\"Unsupported type: \" + primitive);\n      }\n    }\n","date":"2020-05-07 23:55:01","endLine":184,"groupId":"2469","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"primitive","params":"(DataTypesType@PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/99/c957c5277aa4912491ecd2bf881284edd7e0ae.src","preCode":"    public ParquetValueWriter<?> primitive(DataType sType, PrimitiveType primitive) {\n      ColumnDescriptor desc = type.getColumnDescription(currentPath());\n\n      if (primitive.getOriginalType() != null) {\n        switch (primitive.getOriginalType()) {\n          case ENUM:\n          case JSON:\n          case UTF8:\n            return utf8Strings(desc);\n          case DATE:\n          case INT_8:\n          case INT_16:\n          case INT_32:\n            return ints(sType, desc);\n          case INT_64:\n          case TIME_MICROS:\n          case TIMESTAMP_MICROS:\n            return ParquetValueWriters.longs(desc);\n          case DECIMAL:\n            DecimalMetadata decimal = primitive.getDecimalMetadata();\n            switch (primitive.getPrimitiveTypeName()) {\n              case INT32:\n                return decimalAsInteger(desc, decimal.getPrecision(), decimal.getScale());\n              case INT64:\n                return decimalAsLong(desc, decimal.getPrecision(), decimal.getScale());\n              case BINARY:\n              case FIXED_LEN_BYTE_ARRAY:\n                return decimalAsFixed(desc, decimal.getPrecision(), decimal.getScale());\n              default:\n                throw new UnsupportedOperationException(\n                    \"Unsupported base type for decimal: \" + primitive.getPrimitiveTypeName());\n            }\n          case BSON:\n            return byteArrays(desc);\n          default:\n            throw new UnsupportedOperationException(\n                \"Unsupported logical type: \" + primitive.getOriginalType());\n        }\n      }\n\n      switch (primitive.getPrimitiveTypeName()) {\n        case FIXED_LEN_BYTE_ARRAY:\n        case BINARY:\n          return byteArrays(desc);\n        case BOOLEAN:\n          return ParquetValueWriters.booleans(desc);\n        case INT32:\n          return ints(sType, desc);\n        case INT64:\n          return ParquetValueWriters.longs(desc);\n        case FLOAT:\n          return ParquetValueWriters.floats(desc);\n        case DOUBLE:\n          return ParquetValueWriters.doubles(desc);\n        default:\n          throw new UnsupportedOperationException(\"Unsupported type: \" + primitive);\n      }\n    }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/data/SparkParquetWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"NB"},{"authorDate":"2020-08-25 08:45:43","commitOrder":3,"curCode":"    public ParquetValueWriter<?> primitive(LogicalType sType, PrimitiveType primitive) {\n      ColumnDescriptor desc = type.getColumnDescription(currentPath());\n\n      if (primitive.getOriginalType() != null) {\n        switch (primitive.getOriginalType()) {\n          case ENUM:\n          case JSON:\n          case UTF8:\n            return strings(desc);\n          case DATE:\n          case INT_8:\n          case INT_16:\n          case INT_32:\n            return ints(sType, desc);\n          case INT_64:\n            return ParquetValueWriters.longs(desc);\n          case TIME_MICROS:\n            return timeMicros(desc);\n          case TIMESTAMP_MICROS:\n            return timestamps(desc);\n          case DECIMAL:\n            DecimalLogicalTypeAnnotation decimal = (DecimalLogicalTypeAnnotation) primitive.getLogicalTypeAnnotation();\n            switch (primitive.getPrimitiveTypeName()) {\n              case INT32:\n                return decimalAsInteger(desc, decimal.getPrecision(), decimal.getScale());\n              case INT64:\n                return decimalAsLong(desc, decimal.getPrecision(), decimal.getScale());\n              case BINARY:\n              case FIXED_LEN_BYTE_ARRAY:\n                return decimalAsFixed(desc, decimal.getPrecision(), decimal.getScale());\n              default:\n                throw new UnsupportedOperationException(\n                    \"Unsupported base type for decimal: \" + primitive.getPrimitiveTypeName());\n            }\n          case BSON:\n            return byteArrays(desc);\n          default:\n            throw new UnsupportedOperationException(\n                \"Unsupported logical type: \" + primitive.getOriginalType());\n        }\n      }\n\n      switch (primitive.getPrimitiveTypeName()) {\n        case FIXED_LEN_BYTE_ARRAY:\n        case BINARY:\n          return byteArrays(desc);\n        case BOOLEAN:\n          return ParquetValueWriters.booleans(desc);\n        case INT32:\n          return ints(sType, desc);\n        case INT64:\n          return ParquetValueWriters.longs(desc);\n        case FLOAT:\n          return ParquetValueWriters.floats(desc);\n        case DOUBLE:\n          return ParquetValueWriters.doubles(desc);\n        default:\n          throw new UnsupportedOperationException(\"Unsupported type: \" + primitive);\n      }\n    }\n","date":"2020-08-25 08:45:43","endLine":184,"groupId":"218","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"primitive","params":"(LogicalTypesType@PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/75/104cacd9a5e90c2568eb5752002b2cc4d933f3.src","preCode":"    public ParquetValueWriter<?> primitive(LogicalType sType, PrimitiveType primitive) {\n      ColumnDescriptor desc = type.getColumnDescription(currentPath());\n\n      if (primitive.getOriginalType() != null) {\n        switch (primitive.getOriginalType()) {\n          case ENUM:\n          case JSON:\n          case UTF8:\n            return strings(desc);\n          case DATE:\n          case INT_8:\n          case INT_16:\n          case INT_32:\n            return ints(sType, desc);\n          case INT_64:\n            return ParquetValueWriters.longs(desc);\n          case TIME_MICROS:\n            return timeMicros(desc);\n          case TIMESTAMP_MICROS:\n            return timestamps(desc);\n          case DECIMAL:\n            DecimalLogicalTypeAnnotation decimal = (DecimalLogicalTypeAnnotation) primitive.getLogicalTypeAnnotation();\n            switch (primitive.getPrimitiveTypeName()) {\n              case INT32:\n                return decimalAsInteger(desc, decimal.getPrecision(), decimal.getScale());\n              case INT64:\n                return decimalAsLong(desc, decimal.getPrecision(), decimal.getScale());\n              case BINARY:\n              case FIXED_LEN_BYTE_ARRAY:\n                return decimalAsFixed(desc, decimal.getPrecision(), decimal.getScale());\n              default:\n                throw new UnsupportedOperationException(\n                    \"Unsupported base type for decimal: \" + primitive.getPrimitiveTypeName());\n            }\n          case BSON:\n            return byteArrays(desc);\n          default:\n            throw new UnsupportedOperationException(\n                \"Unsupported logical type: \" + primitive.getOriginalType());\n        }\n      }\n\n      switch (primitive.getPrimitiveTypeName()) {\n        case FIXED_LEN_BYTE_ARRAY:\n        case BINARY:\n          return byteArrays(desc);\n        case BOOLEAN:\n          return ParquetValueWriters.booleans(desc);\n        case INT32:\n          return ints(sType, desc);\n        case INT64:\n          return ParquetValueWriters.longs(desc);\n        case FLOAT:\n          return ParquetValueWriters.floats(desc);\n        case DOUBLE:\n          return ParquetValueWriters.doubles(desc);\n        default:\n          throw new UnsupportedOperationException(\"Unsupported type: \" + primitive);\n      }\n    }\n","realPath":"flink/src/main/java/org/apache/iceberg/flink/data/FlinkParquetWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"}],"commitId":"6a7c0db5d5a000959e7c8f3644d3c4a9c56e67b0","commitMessage":"@@@Flink: Add Parquet writer for RowData (#1272)\n\n","date":"2020-08-25 08:45:43","modifiedFileCount":"2","status":"M","submitter":"Chen Junjie"},{"authorTime":"2020-08-26 01:25:48","codes":[{"authorDate":"2020-05-07 23:55:01","commitOrder":4,"curCode":"    public ParquetValueWriter<?> primitive(DataType sType, PrimitiveType primitive) {\n      ColumnDescriptor desc = type.getColumnDescription(currentPath());\n\n      if (primitive.getOriginalType() != null) {\n        switch (primitive.getOriginalType()) {\n          case ENUM:\n          case JSON:\n          case UTF8:\n            return utf8Strings(desc);\n          case DATE:\n          case INT_8:\n          case INT_16:\n          case INT_32:\n            return ints(sType, desc);\n          case INT_64:\n          case TIME_MICROS:\n          case TIMESTAMP_MICROS:\n            return ParquetValueWriters.longs(desc);\n          case DECIMAL:\n            DecimalMetadata decimal = primitive.getDecimalMetadata();\n            switch (primitive.getPrimitiveTypeName()) {\n              case INT32:\n                return decimalAsInteger(desc, decimal.getPrecision(), decimal.getScale());\n              case INT64:\n                return decimalAsLong(desc, decimal.getPrecision(), decimal.getScale());\n              case BINARY:\n              case FIXED_LEN_BYTE_ARRAY:\n                return decimalAsFixed(desc, decimal.getPrecision(), decimal.getScale());\n              default:\n                throw new UnsupportedOperationException(\n                    \"Unsupported base type for decimal: \" + primitive.getPrimitiveTypeName());\n            }\n          case BSON:\n            return byteArrays(desc);\n          default:\n            throw new UnsupportedOperationException(\n                \"Unsupported logical type: \" + primitive.getOriginalType());\n        }\n      }\n\n      switch (primitive.getPrimitiveTypeName()) {\n        case FIXED_LEN_BYTE_ARRAY:\n        case BINARY:\n          return byteArrays(desc);\n        case BOOLEAN:\n          return ParquetValueWriters.booleans(desc);\n        case INT32:\n          return ints(sType, desc);\n        case INT64:\n          return ParquetValueWriters.longs(desc);\n        case FLOAT:\n          return ParquetValueWriters.floats(desc);\n        case DOUBLE:\n          return ParquetValueWriters.doubles(desc);\n        default:\n          throw new UnsupportedOperationException(\"Unsupported type: \" + primitive);\n      }\n    }\n","date":"2020-05-07 23:55:01","endLine":184,"groupId":"10499","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"primitive","params":"(DataTypesType@PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/99/c957c5277aa4912491ecd2bf881284edd7e0ae.src","preCode":"    public ParquetValueWriter<?> primitive(DataType sType, PrimitiveType primitive) {\n      ColumnDescriptor desc = type.getColumnDescription(currentPath());\n\n      if (primitive.getOriginalType() != null) {\n        switch (primitive.getOriginalType()) {\n          case ENUM:\n          case JSON:\n          case UTF8:\n            return utf8Strings(desc);\n          case DATE:\n          case INT_8:\n          case INT_16:\n          case INT_32:\n            return ints(sType, desc);\n          case INT_64:\n          case TIME_MICROS:\n          case TIMESTAMP_MICROS:\n            return ParquetValueWriters.longs(desc);\n          case DECIMAL:\n            DecimalMetadata decimal = primitive.getDecimalMetadata();\n            switch (primitive.getPrimitiveTypeName()) {\n              case INT32:\n                return decimalAsInteger(desc, decimal.getPrecision(), decimal.getScale());\n              case INT64:\n                return decimalAsLong(desc, decimal.getPrecision(), decimal.getScale());\n              case BINARY:\n              case FIXED_LEN_BYTE_ARRAY:\n                return decimalAsFixed(desc, decimal.getPrecision(), decimal.getScale());\n              default:\n                throw new UnsupportedOperationException(\n                    \"Unsupported base type for decimal: \" + primitive.getPrimitiveTypeName());\n            }\n          case BSON:\n            return byteArrays(desc);\n          default:\n            throw new UnsupportedOperationException(\n                \"Unsupported logical type: \" + primitive.getOriginalType());\n        }\n      }\n\n      switch (primitive.getPrimitiveTypeName()) {\n        case FIXED_LEN_BYTE_ARRAY:\n        case BINARY:\n          return byteArrays(desc);\n        case BOOLEAN:\n          return ParquetValueWriters.booleans(desc);\n        case INT32:\n          return ints(sType, desc);\n        case INT64:\n          return ParquetValueWriters.longs(desc);\n        case FLOAT:\n          return ParquetValueWriters.floats(desc);\n        case DOUBLE:\n          return ParquetValueWriters.doubles(desc);\n        default:\n          throw new UnsupportedOperationException(\"Unsupported type: \" + primitive);\n      }\n    }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/data/SparkParquetWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"N"},{"authorDate":"2020-08-26 01:25:48","commitOrder":4,"curCode":"    public ParquetValueWriter<?> primitive(LogicalType fType, PrimitiveType primitive) {\n      ColumnDescriptor desc = type.getColumnDescription(currentPath());\n\n      if (primitive.getOriginalType() != null) {\n        switch (primitive.getOriginalType()) {\n          case ENUM:\n          case JSON:\n          case UTF8:\n            return strings(desc);\n          case DATE:\n          case INT_8:\n          case INT_16:\n          case INT_32:\n            return ints(fType, desc);\n          case INT_64:\n            return ParquetValueWriters.longs(desc);\n          case TIME_MICROS:\n            return timeMicros(desc);\n          case TIMESTAMP_MICROS:\n            return timestamps(desc);\n          case DECIMAL:\n            DecimalLogicalTypeAnnotation decimal = (DecimalLogicalTypeAnnotation) primitive.getLogicalTypeAnnotation();\n            switch (primitive.getPrimitiveTypeName()) {\n              case INT32:\n                return decimalAsInteger(desc, decimal.getPrecision(), decimal.getScale());\n              case INT64:\n                return decimalAsLong(desc, decimal.getPrecision(), decimal.getScale());\n              case BINARY:\n              case FIXED_LEN_BYTE_ARRAY:\n                return decimalAsFixed(desc, decimal.getPrecision(), decimal.getScale());\n              default:\n                throw new UnsupportedOperationException(\n                    \"Unsupported base type for decimal: \" + primitive.getPrimitiveTypeName());\n            }\n          case BSON:\n            return byteArrays(desc);\n          default:\n            throw new UnsupportedOperationException(\n                \"Unsupported logical type: \" + primitive.getOriginalType());\n        }\n      }\n\n      switch (primitive.getPrimitiveTypeName()) {\n        case FIXED_LEN_BYTE_ARRAY:\n        case BINARY:\n          return byteArrays(desc);\n        case BOOLEAN:\n          return ParquetValueWriters.booleans(desc);\n        case INT32:\n          return ints(fType, desc);\n        case INT64:\n          return ParquetValueWriters.longs(desc);\n        case FLOAT:\n          return ParquetValueWriters.floats(desc);\n        case DOUBLE:\n          return ParquetValueWriters.doubles(desc);\n        default:\n          throw new UnsupportedOperationException(\"Unsupported type: \" + primitive);\n      }\n    }\n","date":"2020-08-26 01:25:48","endLine":184,"groupId":"10499","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"primitive","params":"(LogicalTypefType@PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/16/39a44b29170327b75cb4bcb054047cf1f8fc1e.src","preCode":"    public ParquetValueWriter<?> primitive(LogicalType sType, PrimitiveType primitive) {\n      ColumnDescriptor desc = type.getColumnDescription(currentPath());\n\n      if (primitive.getOriginalType() != null) {\n        switch (primitive.getOriginalType()) {\n          case ENUM:\n          case JSON:\n          case UTF8:\n            return strings(desc);\n          case DATE:\n          case INT_8:\n          case INT_16:\n          case INT_32:\n            return ints(sType, desc);\n          case INT_64:\n            return ParquetValueWriters.longs(desc);\n          case TIME_MICROS:\n            return timeMicros(desc);\n          case TIMESTAMP_MICROS:\n            return timestamps(desc);\n          case DECIMAL:\n            DecimalLogicalTypeAnnotation decimal = (DecimalLogicalTypeAnnotation) primitive.getLogicalTypeAnnotation();\n            switch (primitive.getPrimitiveTypeName()) {\n              case INT32:\n                return decimalAsInteger(desc, decimal.getPrecision(), decimal.getScale());\n              case INT64:\n                return decimalAsLong(desc, decimal.getPrecision(), decimal.getScale());\n              case BINARY:\n              case FIXED_LEN_BYTE_ARRAY:\n                return decimalAsFixed(desc, decimal.getPrecision(), decimal.getScale());\n              default:\n                throw new UnsupportedOperationException(\n                    \"Unsupported base type for decimal: \" + primitive.getPrimitiveTypeName());\n            }\n          case BSON:\n            return byteArrays(desc);\n          default:\n            throw new UnsupportedOperationException(\n                \"Unsupported logical type: \" + primitive.getOriginalType());\n        }\n      }\n\n      switch (primitive.getPrimitiveTypeName()) {\n        case FIXED_LEN_BYTE_ARRAY:\n        case BINARY:\n          return byteArrays(desc);\n        case BOOLEAN:\n          return ParquetValueWriters.booleans(desc);\n        case INT32:\n          return ints(sType, desc);\n        case INT64:\n          return ParquetValueWriters.longs(desc);\n        case FLOAT:\n          return ParquetValueWriters.floats(desc);\n        case DOUBLE:\n          return ParquetValueWriters.doubles(desc);\n        default:\n          throw new UnsupportedOperationException(\"Unsupported type: \" + primitive);\n      }\n    }\n","realPath":"flink/src/main/java/org/apache/iceberg/flink/data/FlinkParquetWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"10ccc91782c29c40a3562b48a639764e8fd3550b","commitMessage":"@@@Flink: Fix getters in Parquet writers (#1377)\n\n","date":"2020-08-26 01:25:48","modifiedFileCount":"1","status":"M","submitter":"Chen Junjie"}]
