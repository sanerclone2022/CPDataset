[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testAllNulls() {\n    boolean shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"all_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should not match: no non-null value in all null column\", shouldRead);\n\n    shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"some_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should not match: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"no_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should match: non-null column contains no null values\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":90,"groupId":"278","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/22/69c07bc02c9058586137279f68cb326934cb2e.src","preCode":"  public void testAllNulls() {\n    boolean shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"all_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should not match: no non-null value in all null column\", shouldRead);\n\n    shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"some_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should not match: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"no_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should match: non-null column contains no null values\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testNoNulls() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"all_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"no_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":99,"groupId":"958","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/60/14ce6ff9ac57ade8b67ec8c9fbf733dab9e8c7.src","preCode":"  public void testNoNulls() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"all_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"no_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-08-27 01:23:12","commitOrder":2,"curCode":"  public void testAllNulls() {\n    boolean shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"all_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should not match: no non-null value in all null column\", shouldRead);\n\n    shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"some_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should not match: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"no_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should match: non-null column contains no null values\", shouldRead);\n\n    shouldRead = new StrictMetricsEvaluator(SCHEMA, notEqual(\"all_nulls\", \"a\")).eval(FILE);\n    Assert.assertTrue(\"Should match: notEqual on all nulls column\", shouldRead);\n  }\n","date":"2019-08-27 01:23:12","endLine":125,"groupId":"101255","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0a/7251c171fcb58a88f6f5e4cbaac3c736188846.src","preCode":"  public void testAllNulls() {\n    boolean shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"all_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should not match: no non-null value in all null column\", shouldRead);\n\n    shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"some_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should not match: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = new StrictMetricsEvaluator(SCHEMA, notNull(\"no_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should match: non-null column contains no null values\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestStrictMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public void testNoNulls() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"all_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"no_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":99,"groupId":"101255","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/60/14ce6ff9ac57ade8b67ec8c9fbf733dab9e8c7.src","preCode":"  public void testNoNulls() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"all_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNull(\"no_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"}],"commitId":"e7197a7e9cda676ddce402a258ca6e3ebfb2dcad","commitMessage":"@@@Use null counts in metrics evaluators (#412)\n\n","date":"2019-08-27 01:23:12","modifiedFileCount":"4","status":"M","submitter":"Anton Okolnychyi"}]
