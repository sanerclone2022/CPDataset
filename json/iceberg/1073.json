[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testBasicProjection() throws Exception {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"basic_projection_id\", writeSchema, idOnly, record);\n    Assert.assertNull(\"Should not project data\", projected.get(\"data\"));\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n\n    Schema dataOnly = new Schema(\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    projected = writeAndRead(\"basic_projection_data\", writeSchema, dataOnly, record);\n\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    int cmp = Comparators.charSequences()\n        .compare(\"test\", (CharSequence) projected.get(\"data\"));\n    Assert.assertTrue(\"Should contain the correct data value\", cmp == 0);\n  }\n","date":"2019-03-21 07:25:05","endLine":164,"groupId":"2588","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/d18d0ce9108879420cd44e6c3ec52aa1390fe6.src","preCode":"  public void testBasicProjection() throws Exception {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"basic_projection_id\", writeSchema, idOnly, record);\n    Assert.assertNull(\"Should not project data\", projected.get(\"data\"));\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n\n    Schema dataOnly = new Schema(\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    projected = writeAndRead(\"basic_projection_data\", writeSchema, dataOnly, record);\n\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    int cmp = Comparators.charSequences()\n        .compare(\"test\", (CharSequence) projected.get(\"data\"));\n    Assert.assertTrue(\"Should contain the correct data value\", cmp == 0);\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testBasicProjection() throws Exception {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"basic_projection_id\", writeSchema, idOnly, record);\n    Assert.assertNull(\"Should not project data\", projected.get(\"data\"));\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n\n    Schema dataOnly = new Schema(\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    projected = writeAndRead(\"basic_projection_data\", writeSchema, dataOnly, record);\n\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    int cmp = Comparators.charSequences()\n        .compare(\"test\", (CharSequence) projected.get(\"data\"));\n    Assert.assertTrue(\"Should contain the correct data value\", cmp == 0);\n  }\n","date":"2019-03-21 07:25:05","endLine":164,"groupId":"2588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/d18d0ce9108879420cd44e6c3ec52aa1390fe6.src","preCode":"  public void testBasicProjection() throws Exception {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"basic_projection_id\", writeSchema, idOnly, record);\n    Assert.assertNull(\"Should not project data\", projected.get(\"data\"));\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n\n    Schema dataOnly = new Schema(\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    projected = writeAndRead(\"basic_projection_data\", writeSchema, dataOnly, record);\n\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    int cmp = Comparators.charSequences()\n        .compare(\"test\", (CharSequence) projected.get(\"data\"));\n    Assert.assertTrue(\"Should contain the correct data value\", cmp == 0);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2021-07-13 23:59:22","codes":[{"authorDate":"2021-07-13 23:59:22","commitOrder":2,"curCode":"  public void testBasicProjection() throws Exception {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"basic_projection_id\", writeSchema, idOnly, record);\n    TestHelpers.assertEmptyAvroField(projected, \"data\");\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n\n    Schema dataOnly = new Schema(\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    projected = writeAndRead(\"basic_projection_data\", writeSchema, dataOnly, record);\n\n    TestHelpers.assertEmptyAvroField(projected, \"id\");\n    int cmp = Comparators.charSequences()\n        .compare(\"test\", (CharSequence) projected.get(\"data\"));\n    Assert.assertEquals(\"Should contain the correct data value\", 0, cmp);\n  }\n","date":"2021-07-13 23:59:22","endLine":165,"groupId":"1073","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testBasicProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/68/5d4ee88f195a823aa551f19ac18900355fe9bc.src","preCode":"  public void testBasicProjection() throws Exception {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"basic_projection_id\", writeSchema, idOnly, record);\n    Assert.assertNull(\"Should not project data\", projected.get(\"data\"));\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n\n    Schema dataOnly = new Schema(\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    projected = writeAndRead(\"basic_projection_data\", writeSchema, dataOnly, record);\n\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    int cmp = Comparators.charSequences()\n        .compare(\"test\", (CharSequence) projected.get(\"data\"));\n    Assert.assertTrue(\"Should contain the correct data value\", cmp == 0);\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2021-07-13 23:59:22","commitOrder":2,"curCode":"  public void testBasicProjection() throws Exception {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"basic_projection_id\", writeSchema, idOnly, record);\n    AssertHelpers.assertEmptyAvroField(projected, \"data\");\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n\n    Schema dataOnly = new Schema(\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    projected = writeAndRead(\"basic_projection_data\", writeSchema, dataOnly, record);\n\n    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n    int cmp = Comparators.charSequences()\n        .compare(\"test\", (CharSequence) projected.get(\"data\"));\n    Assert.assertEquals(\"Should contain the correct data value\", 0, cmp);\n  }\n","date":"2021-07-13 23:59:22","endLine":165,"groupId":"1073","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testBasicProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e7/1034483bdc072c811dba91af1923893d561906.src","preCode":"  public void testBasicProjection() throws Exception {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"basic_projection_id\", writeSchema, idOnly, record);\n    Assert.assertNull(\"Should not project data\", projected.get(\"data\"));\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n\n    Schema dataOnly = new Schema(\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    projected = writeAndRead(\"basic_projection_data\", writeSchema, dataOnly, record);\n\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    int cmp = Comparators.charSequences()\n        .compare(\"test\", (CharSequence) projected.get(\"data\"));\n    Assert.assertTrue(\"Should contain the correct data value\", cmp == 0);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"b3fb81a19e9632608b2bd4cdede4bbfcbd26bc8e","commitMessage":"@@@Core: Use Avro 1.10.1 (#1648)\n\nCo-authored-by: Fokko Driesprong <fdriesprong@ebay.com>","date":"2021-07-13 23:59:22","modifiedFileCount":"6","status":"M","submitter":"Fokko Driesprong"}]
