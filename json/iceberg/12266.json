[{"authorTime":"2020-06-16 06:16:19","codes":[{"authorDate":"2020-06-16 06:16:19","commitOrder":2,"curCode":"  public static void assertEqualsBatch(Types.StructType struct, Iterator<Record> expected, ColumnarBatch batch,\n                                       boolean checkArrowValidityVector) {\n    for (int rowId = 0; rowId < batch.numRows(); rowId++) {\n      List<Types.NestedField> fields = struct.fields();\n      InternalRow row = batch.getRow(rowId);\n      Record rec = expected.next();\n      for (int i = 0; i < fields.size(); i += 1) {\n        Type fieldType = fields.get(i).type();\n        Object expectedValue = rec.get(i);\n        Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n        assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n\n        if (checkArrowValidityVector) {\n          ColumnVector columnVector = batch.column(i);\n          ValueVector arrowVector = ((IcebergArrowColumnVector) columnVector).vectorAccessor().getVector();\n          Assert.assertEquals(\"Nullability doesn't match\", expectedValue == null, arrowVector.isNull(rowId));\n        }\n      }\n    }\n  }\n","date":"2020-06-16 06:16:19","endLine":105,"groupId":"116","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEqualsBatch","params":"(Types.StructTypestruct@Iterator<Record>expected@ColumnarBatchbatch@booleancheckArrowValidityVector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/03757c2c44f8039610a085288f86650147a1f5.src","preCode":"  public static void assertEqualsBatch(Types.StructType struct, Iterator<Record> expected, ColumnarBatch batch,\n                                       boolean checkArrowValidityVector) {\n    for (int rowId = 0; rowId < batch.numRows(); rowId++) {\n      List<Types.NestedField> fields = struct.fields();\n      InternalRow row = batch.getRow(rowId);\n      Record rec = expected.next();\n      for (int i = 0; i < fields.size(); i += 1) {\n        Type fieldType = fields.get(i).type();\n        Object expectedValue = rec.get(i);\n        Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n        assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n\n        if (checkArrowValidityVector) {\n          ColumnVector columnVector = batch.column(i);\n          ValueVector arrowVector = ((IcebergArrowColumnVector) columnVector).vectorAccessor().getVector();\n          Assert.assertEquals(\"Nullability doesn't match\", expectedValue == null, arrowVector.isNull(rowId));\n        }\n      }\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2020-06-16 06:16:19","commitOrder":2,"curCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","date":"2020-06-16 06:16:19","endLine":233,"groupId":"116","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEqualsUnsafe","params":"(Types.StructTypestruct@Recordrec@InternalRowrow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/03757c2c44f8039610a085288f86650147a1f5.src","preCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"MB"}],"commitId":"ffdcf09027e09460b7d7505e65aea119107934a3","commitMessage":"@@@Spark: Support vectorized Parquet reads for flat projections (#828)\n\n","date":"2020-06-16 06:16:19","modifiedFileCount":"21","status":"M","submitter":"Samarth Jain"},{"authorTime":"2020-06-16 06:16:19","codes":[{"authorDate":"2020-10-24 05:30:49","commitOrder":3,"curCode":"  public static void assertEqualsBatch(Types.StructType struct, Iterator<Record> expected, ColumnarBatch batch,\n                                       boolean checkArrowValidityVector) {\n    for (int rowId = 0; rowId < batch.numRows(); rowId++) {\n      List<Types.NestedField> fields = struct.fields();\n      InternalRow row = batch.getRow(rowId);\n      Record rec = expected.next();\n      for (int i = 0; i < fields.size(); i += 1) {\n        Type fieldType = fields.get(i).type();\n        Object expectedValue = rec.get(i);\n        Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n        assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n\n        if (checkArrowValidityVector) {\n          ColumnVector columnVector = batch.column(i);\n          ValueVector arrowVector = ((IcebergArrowColumnVector) columnVector).vectorAccessor().getVector();\n          Assert.assertFalse(\"Nullability doesn't match\", expectedValue == null ^ arrowVector.isNull(rowId));\n        }\n      }\n    }\n  }\n","date":"2020-10-24 05:30:49","endLine":105,"groupId":"116","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEqualsBatch","params":"(Types.StructTypestruct@Iterator<Record>expected@ColumnarBatchbatch@booleancheckArrowValidityVector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d2/97d35b18e224d9d72f271b380600e37c139baa.src","preCode":"  public static void assertEqualsBatch(Types.StructType struct, Iterator<Record> expected, ColumnarBatch batch,\n                                       boolean checkArrowValidityVector) {\n    for (int rowId = 0; rowId < batch.numRows(); rowId++) {\n      List<Types.NestedField> fields = struct.fields();\n      InternalRow row = batch.getRow(rowId);\n      Record rec = expected.next();\n      for (int i = 0; i < fields.size(); i += 1) {\n        Type fieldType = fields.get(i).type();\n        Object expectedValue = rec.get(i);\n        Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n        assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n\n        if (checkArrowValidityVector) {\n          ColumnVector columnVector = batch.column(i);\n          ValueVector arrowVector = ((IcebergArrowColumnVector) columnVector).vectorAccessor().getVector();\n          Assert.assertEquals(\"Nullability doesn't match\", expectedValue == null, arrowVector.isNull(rowId));\n        }\n      }\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-06-16 06:16:19","commitOrder":3,"curCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","date":"2020-06-16 06:16:19","endLine":233,"groupId":"116","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEqualsUnsafe","params":"(Types.StructTypestruct@Recordrec@InternalRowrow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/03757c2c44f8039610a085288f86650147a1f5.src","preCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"}],"commitId":"3d308d3c292ba06ebce554efe05561b8f2e79b51","commitMessage":"@@@Parquet: Add test for Arrow buffer reallocation (#1480)\n\n","date":"2020-10-24 05:30:49","modifiedFileCount":"4","status":"M","submitter":"Samarth Jain"},{"authorTime":"2020-06-16 06:16:19","codes":[{"authorDate":"2021-06-26 00:48:11","commitOrder":4,"curCode":"  public static void assertEqualsBatch(Types.StructType struct, Iterator<Record> expected, ColumnarBatch batch,\n                                       boolean checkArrowValidityVector) {\n    for (int rowId = 0; rowId < batch.numRows(); rowId++) {\n      List<Types.NestedField> fields = struct.fields();\n      InternalRow row = batch.getRow(rowId);\n      Record rec = expected.next();\n      for (int i = 0; i < fields.size(); i += 1) {\n        Type fieldType = fields.get(i).type();\n        Object expectedValue = rec.get(i);\n        Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n        assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n\n        if (checkArrowValidityVector) {\n          ColumnVector columnVector = batch.column(i);\n          ValueVector arrowVector = ((IcebergArrowColumnVector) columnVector).vectorAccessor().getVector();\n          Assert.assertFalse(\"Nullability doesn't match of \" + columnVector.dataType(),\n              expectedValue == null ^ arrowVector.isNull(rowId));\n        }\n      }\n    }\n  }\n","date":"2021-07-12 18:46:03","endLine":106,"groupId":"12266","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEqualsBatch","params":"(Types.StructTypestruct@Iterator<Record>expected@ColumnarBatchbatch@booleancheckArrowValidityVector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/63/22827c3af56d6e9179d38a4c3f0452f2512b1d.src","preCode":"  public static void assertEqualsBatch(Types.StructType struct, Iterator<Record> expected, ColumnarBatch batch,\n                                       boolean checkArrowValidityVector) {\n    for (int rowId = 0; rowId < batch.numRows(); rowId++) {\n      List<Types.NestedField> fields = struct.fields();\n      InternalRow row = batch.getRow(rowId);\n      Record rec = expected.next();\n      for (int i = 0; i < fields.size(); i += 1) {\n        Type fieldType = fields.get(i).type();\n        Object expectedValue = rec.get(i);\n        Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n        assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n\n        if (checkArrowValidityVector) {\n          ColumnVector columnVector = batch.column(i);\n          ValueVector arrowVector = ((IcebergArrowColumnVector) columnVector).vectorAccessor().getVector();\n          Assert.assertFalse(\"Nullability doesn't match\", expectedValue == null ^ arrowVector.isNull(rowId));\n        }\n      }\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-06-16 06:16:19","commitOrder":4,"curCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","date":"2020-06-16 06:16:19","endLine":233,"groupId":"12266","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEqualsUnsafe","params":"(Types.StructTypestruct@Recordrec@InternalRowrow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/03757c2c44f8039610a085288f86650147a1f5.src","preCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"}],"commitId":"2842f0b5e4934f9a102a5298536efaaff0af6b45","commitMessage":"@@@Reduce code duplication in VectorizedDictionaryEncodedParquetValuesReader\n","date":"2021-07-12 18:46:03","modifiedFileCount":"4","status":"M","submitter":"Eduard Tudenhoefner"}]
