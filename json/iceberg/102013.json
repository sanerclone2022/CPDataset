[{"authorTime":"2019-09-05 07:15:46","codes":[{"authorDate":"2019-09-05 07:15:46","commitOrder":1,"curCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(localInput(manifests.get(0).path()))) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2019-09-05 07:15:46","endLine":108,"groupId":"1653","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceManifestsConsolidate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/66/9722ae54626fb98d7adc99f9736893e13c8768.src","preCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(localInput(manifests.get(0).path()))) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2019-09-05 07:15:46","commitOrder":1,"curCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader reader = ManifestReader.read(localInput(manifest.path()))) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(localInput(manifests.get(0).path()))) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2019-09-05 07:15:46","endLine":254,"groupId":"5037","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrentRewriteManifest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/66/9722ae54626fb98d7adc99f9736893e13c8768.src","preCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader reader = ManifestReader.read(localInput(manifest.path()))) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(localInput(manifests.get(0).path()))) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"44ebc5bf7f38c0f12c8f0267a42b6a48ce6a9213","commitMessage":"@@@Rename some implementations for consistency (#380)\n\n","date":"2019-09-05 07:15:46","modifiedFileCount":"2","status":"B","submitter":"Anton Okolnychyi"},{"authorTime":"2020-02-04 06:53:50","codes":[{"authorDate":"2020-02-04 06:53:50","commitOrder":2,"curCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2020-02-04 06:53:50","endLine":193,"groupId":"1653","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceManifestsConsolidate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c1/bd7a895b4a2ee7901969bf632f88fe37e4a7ce.src","preCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(localInput(manifests.get(0).path()))) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2020-02-04 06:53:50","commitOrder":2,"curCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader reader = ManifestReader.read(manifest, table.io())) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2020-02-04 06:53:50","endLine":339,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrentRewriteManifest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c1/bd7a895b4a2ee7901969bf632f88fe37e4a7ce.src","preCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader reader = ManifestReader.read(localInput(manifest.path()))) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(localInput(manifests.get(0).path()))) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"c3dc9824b381e5e479e356be5e0f4fcf61a9fc37","commitMessage":"@@@Inherit snapshot ids for manifest entries (#675)\n\nThis change makes the snapshot ID optional for each data file in a manifest so that a null snapshot ID indicates that it should be inherited from the manifest metadata. As a consequence.  people can create manifests with missing snapshot IDs that will be assigned at commit time.\n\nCloses #504.","date":"2020-02-04 06:53:50","modifiedFileCount":"28","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2020-04-16 07:44:35","codes":[{"authorDate":"2020-04-16 07:44:35","commitOrder":3,"curCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2020-04-16 07:44:35","endLine":193,"groupId":"1653","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceManifestsConsolidate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1d/85a2eb7af6881c72ddf4fe94b04037f8839761.src","preCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2020-04-16 07:44:35","commitOrder":3,"curCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader reader = ManifestFiles.read(manifest, table.io())) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2020-04-16 07:44:35","endLine":339,"groupId":"668","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrentRewriteManifest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1d/85a2eb7af6881c72ddf4fe94b04037f8839761.src","preCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader reader = ManifestReader.read(manifest, table.io())) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestReader.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"a5e77369c330873a6a292b8952b1ca09b7712bb7","commitMessage":"@@@Move manifest factory methods (#925)\n\n","date":"2020-04-16 07:44:35","modifiedFileCount":"18","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-06-03 03:43:03","codes":[{"authorDate":"2020-06-03 03:43:03","commitOrder":4,"curCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().allManifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().allManifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2020-06-03 03:43:03","endLine":207,"groupId":"1653","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceManifestsConsolidate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/74/a46def06d7a6051efec7ff0851b926a7852d0a.src","preCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2020-06-03 03:43:03","commitOrder":4,"curCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader reader = ManifestFiles.read(manifest, table.io())) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().allManifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().allManifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2020-06-03 03:43:03","endLine":353,"groupId":"668","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrentRewriteManifest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/74/a46def06d7a6051efec7ff0851b926a7852d0a.src","preCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader reader = ManifestFiles.read(manifest, table.io())) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().manifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().manifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"482f420141486f5b7b02bd62dc14cdb94b9a9cca","commitMessage":"@@@Split Snapshot.manifests into dataManifests and deleteManifests (#1080)\n\nThis replaces all calls to Snapshot.manifests with calls to one of 3 new methods:\n\n* `Snapshot.allManifests` returns both delete and data manifests\n* `Snapshot.deleteManifests` returns only delete manifests\n* `Snapshot.dataManifests` returns only data manifests\n\nExisting references mostly use either `allManifests` or `dataManifests`.  depending on the context. For example.  tests with assertions for the number of manifests use `allManifests` because the test cases should validate there are no new delete manifests.  but other tests that validate rewritten manifests are deleted use `dataManifests` because only data manifests are rewritten and deleted.\n\nThis tries to make minimal changes that preserve the current behavior. Operations are not updated to support delete manifests (rewrite still only rewrites data manifests).  but will carry through the list of delete manifests correctly.","date":"2020-06-03 03:43:03","modifiedFileCount":"46","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-06-10 01:43:32","codes":[{"authorDate":"2020-06-10 01:43:32","commitOrder":5,"curCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().allManifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().allManifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2020-06-10 01:43:32","endLine":207,"groupId":"102013","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceManifestsConsolidate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7a/2c5fbc7df13432e51a8c3ac03047cfc1993555.src","preCode":"  public void testReplaceManifestsConsolidate() throws IOException {\n    Table table = load();\n\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    Assert.assertEquals(2, table.currentSnapshot().allManifests().size());\n\n    \r\n\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().allManifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2020-06-10 01:43:32","commitOrder":5,"curCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, table.io())) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().allManifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().allManifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","date":"2020-06-10 01:43:32","endLine":353,"groupId":"102013","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrentRewriteManifest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7a/2c5fbc7df13432e51a8c3ac03047cfc1993555.src","preCode":"  public void testConcurrentRewriteManifest() throws IOException {\n    Table table = load();\n    table.newFastAppend()\n      .appendFile(FILE_A)\n      .commit();\n    long appendIdA = table.currentSnapshot().snapshotId();\n    table.newFastAppend()\n      .appendFile(FILE_B)\n      .commit();\n    long appendIdB = table.currentSnapshot().snapshotId();\n\n    \r\n    RewriteManifests rewrite = table.rewriteManifests();\n    rewrite.clusterBy(file -> \"file\").apply();\n\n    \r\n    table.rewriteManifests()\n      .clusterBy(file -> \"file\")\n      .rewriteIf(manifest -> {\n        try (ManifestReader reader = ManifestFiles.read(manifest, table.io())) {\n          return !reader.iterator().next().path().equals(FILE_A.path());\n        } catch (IOException x) {\n          throw new RuntimeIOException(x);\n        }\n      })\n      .commit();\n\n    Assert.assertEquals(2, table.currentSnapshot().allManifests().size());\n\n    \r\n    \r\n    rewrite.commit();\n\n    List<ManifestFile> manifests = table.currentSnapshot().allManifests();\n    Assert.assertEquals(1, manifests.size());\n\n    \r\n    List<DataFile> files;\n    List<Long> ids;\n    try (ManifestReader reader = ManifestFiles.read(manifests.get(0), table.io())) {\n      if (reader.iterator().next().path().equals(FILE_A.path())) {\n        files = Arrays.asList(FILE_A, FILE_B);\n        ids = Arrays.asList(appendIdA, appendIdB);\n      } else {\n        files = Arrays.asList(FILE_B, FILE_A);\n        ids = Arrays.asList(appendIdB, appendIdA);\n      }\n    }\n\n    validateManifestEntries(manifests.get(0),\n                            ids.iterator(),\n                            files.iterator(),\n                            statuses(ManifestEntry.Status.EXISTING, ManifestEntry.Status.EXISTING));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestRewriteManifests.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"2ac53b346c8a1b4cfac42aa8b5811b120b4cf0f0","commitMessage":"@@@Combine ManifestReaders into one parameterized class. (#1099)\n\n","date":"2020-06-10 01:43:32","modifiedFileCount":"12","status":"M","submitter":"Ryan Blue"}]
