[{"authorTime":"2020-04-16 04:13:35","codes":[{"authorDate":"2020-04-16 04:13:35","commitOrder":1,"curCode":"  public void testNewTableMetadataReassignmentAllIds() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(3, \"x\", Types.LongType.get()),\n        Types.NestedField.required(4, \"y\", Types.LongType.get()),\n        Types.NestedField.required(5, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5)\n        .add(3, 1005, \"x_partition\", \"bucket[4]\")\n        .add(5, 1005, \"z_partition\", \"bucket[8]\")\n        .build();\n    String location = \"file://tmp/db/table\";\n    TableMetadata metadata = TableMetadata.newTableMetadata(schema, spec, location, ImmutableMap.of());\n\n    \r\n    PartitionSpec expected = PartitionSpec.builderFor(metadata.schema()).withSpecId(0)\n        .add(1, 1000, \"x_partition\", \"bucket[4]\")\n        .add(3, 1001, \"z_partition\", \"bucket[8]\")\n        .build();\n\n    Assert.assertEquals(expected, metadata.spec());\n  }\n","date":"2020-04-16 04:13:35","endLine":561,"groupId":"2008","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNewTableMetadataReassignmentAllIds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1d/5d3d3b4638600cdc671ec5b56955683cb0705b.src","preCode":"  public void testNewTableMetadataReassignmentAllIds() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(3, \"x\", Types.LongType.get()),\n        Types.NestedField.required(4, \"y\", Types.LongType.get()),\n        Types.NestedField.required(5, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5)\n        .add(3, 1005, \"x_partition\", \"bucket[4]\")\n        .add(5, 1005, \"z_partition\", \"bucket[8]\")\n        .build();\n    String location = \"file://tmp/db/table\";\n    TableMetadata metadata = TableMetadata.newTableMetadata(schema, spec, location, ImmutableMap.of());\n\n    \r\n    PartitionSpec expected = PartitionSpec.builderFor(metadata.schema()).withSpecId(0)\n        .add(1, 1000, \"x_partition\", \"bucket[4]\")\n        .add(3, 1001, \"z_partition\", \"bucket[8]\")\n        .build();\n\n    Assert.assertEquals(expected, metadata.spec());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"B"},{"authorDate":"2020-04-16 04:13:35","commitOrder":1,"curCode":"  public void testInvalidUpdatePartitionSpecForV1Table() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5)\n        .add(1, 1005, \"x_partition\", \"bucket[4]\")\n        .build();\n    String location = \"file://tmp/db/table\";\n    TableMetadata metadata = TableMetadata.newTableMetadata(schema, spec, location, ImmutableMap.of());\n\n    AssertHelpers.assertThrows(\"Should fail to update an invalid partition spec\",\n        ValidationException.class, \"Spec does not use sequential IDs that are required in v1\",\n        () -> metadata.updatePartitionSpec(spec));\n  }\n","date":"2020-04-16 04:13:35","endLine":578,"groupId":"3613","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidUpdatePartitionSpecForV1Table","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1d/5d3d3b4638600cdc671ec5b56955683cb0705b.src","preCode":"  public void testInvalidUpdatePartitionSpecForV1Table() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5)\n        .add(1, 1005, \"x_partition\", \"bucket[4]\")\n        .build();\n    String location = \"file://tmp/db/table\";\n    TableMetadata metadata = TableMetadata.newTableMetadata(schema, spec, location, ImmutableMap.of());\n\n    AssertHelpers.assertThrows(\"Should fail to update an invalid partition spec\",\n        ValidationException.class, \"Spec does not use sequential IDs that are required in v1\",\n        () -> metadata.updatePartitionSpec(spec));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"B"}],"commitId":"b6cdc694b6b5a1040d6a2ffb4e72446fe52309c4","commitMessage":"@@@Add persistent IDs to partition fields (#845)\n\n","date":"2020-04-16 04:13:35","modifiedFileCount":"10","status":"B","submitter":"jun-he"},{"authorTime":"2020-04-16 04:13:35","codes":[{"authorDate":"2020-12-17 05:19:06","commitOrder":2,"curCode":"  public void testNewTableMetadataReassignmentAllIds() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(3, \"x\", Types.LongType.get()),\n        Types.NestedField.required(4, \"y\", Types.LongType.get()),\n        Types.NestedField.required(5, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5)\n        .add(3, 1005, \"x_partition\", \"bucket[4]\")\n        .add(5, 1003, \"z_partition\", \"bucket[8]\")\n        .build();\n    String location = \"file://tmp/db/table\";\n    TableMetadata metadata = TableMetadata.newTableMetadata(schema, spec, location, ImmutableMap.of());\n\n    \r\n    PartitionSpec expected = PartitionSpec.builderFor(metadata.schema()).withSpecId(0)\n        .add(1, 1000, \"x_partition\", \"bucket[4]\")\n        .add(3, 1001, \"z_partition\", \"bucket[8]\")\n        .build();\n\n    Assert.assertEquals(expected, metadata.spec());\n  }\n","date":"2020-12-17 05:19:06","endLine":516,"groupId":"101884","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNewTableMetadataReassignmentAllIds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/75/09ac4d667a422a711749c05009aafa644458ce.src","preCode":"  public void testNewTableMetadataReassignmentAllIds() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(3, \"x\", Types.LongType.get()),\n        Types.NestedField.required(4, \"y\", Types.LongType.get()),\n        Types.NestedField.required(5, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5)\n        .add(3, 1005, \"x_partition\", \"bucket[4]\")\n        .add(5, 1005, \"z_partition\", \"bucket[8]\")\n        .build();\n    String location = \"file://tmp/db/table\";\n    TableMetadata metadata = TableMetadata.newTableMetadata(schema, spec, location, ImmutableMap.of());\n\n    \r\n    PartitionSpec expected = PartitionSpec.builderFor(metadata.schema()).withSpecId(0)\n        .add(1, 1000, \"x_partition\", \"bucket[4]\")\n        .add(3, 1001, \"z_partition\", \"bucket[8]\")\n        .build();\n\n    Assert.assertEquals(expected, metadata.spec());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"M"},{"authorDate":"2020-04-16 04:13:35","commitOrder":2,"curCode":"  public void testInvalidUpdatePartitionSpecForV1Table() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5)\n        .add(1, 1005, \"x_partition\", \"bucket[4]\")\n        .build();\n    String location = \"file://tmp/db/table\";\n    TableMetadata metadata = TableMetadata.newTableMetadata(schema, spec, location, ImmutableMap.of());\n\n    AssertHelpers.assertThrows(\"Should fail to update an invalid partition spec\",\n        ValidationException.class, \"Spec does not use sequential IDs that are required in v1\",\n        () -> metadata.updatePartitionSpec(spec));\n  }\n","date":"2020-04-16 04:13:35","endLine":578,"groupId":"101884","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidUpdatePartitionSpecForV1Table","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1d/5d3d3b4638600cdc671ec5b56955683cb0705b.src","preCode":"  public void testInvalidUpdatePartitionSpecForV1Table() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5)\n        .add(1, 1005, \"x_partition\", \"bucket[4]\")\n        .build();\n    String location = \"file://tmp/db/table\";\n    TableMetadata metadata = TableMetadata.newTableMetadata(schema, spec, location, ImmutableMap.of());\n\n    AssertHelpers.assertThrows(\"Should fail to update an invalid partition spec\",\n        ValidationException.class, \"Spec does not use sequential IDs that are required in v1\",\n        () -> metadata.updatePartitionSpec(spec));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"N"}],"commitId":"a0e76df474e1d0d2ae9e7bb2f808f3dc3940a3d8","commitMessage":"@@@Core: Add partition spec update operation (#1942)\n\nCo-authored-by: Jun He <jun-he@users.noreply.github.com>","date":"2020-12-17 05:19:06","modifiedFileCount":"10","status":"M","submitter":"Ryan Blue"}]
