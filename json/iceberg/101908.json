[{"authorTime":"2020-08-06 04:22:25","codes":[{"authorDate":"2020-08-06 04:22:25","commitOrder":1,"curCode":"  public void testUnpartitionedDeletes() {\n    DeleteFileIndex index = new DeleteFileIndex(new long[] { 3, 5, 5, 6 }, DELETE_FILES, ImmutableMap.of());\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(1, 0, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(1, 3, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 4, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 5, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(1, 6, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(1, 7, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(1, 10, UNPARTITIONED_FILE));\n\n    Assert.assertArrayEquals(\"All global deletes should apply to a partitioned file\",\n        DELETE_FILES, index.forDataFile(2, 0, FILE_B));\n  }\n","date":"2020-08-06 04:22:25","endLine":100,"groupId":"3359","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnpartitionedDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/40/d8363cc3202da93979634f4a473092758c95b2.src","preCode":"  public void testUnpartitionedDeletes() {\n    DeleteFileIndex index = new DeleteFileIndex(new long[] { 3, 5, 5, 6 }, DELETE_FILES, ImmutableMap.of());\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(1, 0, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(1, 3, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 4, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 5, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(1, 6, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(1, 7, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(1, 10, UNPARTITIONED_FILE));\n\n    Assert.assertArrayEquals(\"All global deletes should apply to a partitioned file\",\n        DELETE_FILES, index.forDataFile(2, 0, FILE_B));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2020-08-06 04:22:25","commitOrder":1,"curCode":"  public void testPartitionedDeleteIndex() {\n    DeleteFileIndex index = new DeleteFileIndex(null, null, ImmutableMap.of(\n        Pair.of(1, StructLikeWrapper.wrap(FILE_A.partition())),\n        Pair.of(new long[] { 3, 5, 5, 6 }, DELETE_FILES),\n        Pair.of(1, StructLikeWrapper.wrap(FILE_C.partition())),\n        Pair.of(new long[0], new DeleteFile[0])));\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(1, 0, FILE_A));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(1, 3, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 4, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 5, FILE_A));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(1, 6, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(1, 7, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(1, 10, FILE_A));\n\n    Assert.assertEquals(\"No deletes should apply to FILE_B, partition not in index\",\n        0, index.forDataFile(1, 0, FILE_B).length);\n\n    Assert.assertEquals(\"No deletes should apply to FILE_C, no indexed delete files\",\n        0, index.forDataFile(1, 0, FILE_C).length);\n\n    Assert.assertEquals(\"No deletes should apply to FILE_A with a different specId\",\n        0, index.forDataFile(2, 0, FILE_A).length);\n  }\n","date":"2020-08-06 04:22:25","endLine":133,"groupId":"3359","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPartitionedDeleteIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/40/d8363cc3202da93979634f4a473092758c95b2.src","preCode":"  public void testPartitionedDeleteIndex() {\n    DeleteFileIndex index = new DeleteFileIndex(null, null, ImmutableMap.of(\n        Pair.of(1, StructLikeWrapper.wrap(FILE_A.partition())),\n        Pair.of(new long[] { 3, 5, 5, 6 }, DELETE_FILES),\n        Pair.of(1, StructLikeWrapper.wrap(FILE_C.partition())),\n        Pair.of(new long[0], new DeleteFile[0])));\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(1, 0, FILE_A));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(1, 3, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 4, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 5, FILE_A));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(1, 6, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(1, 7, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(1, 10, FILE_A));\n\n    Assert.assertEquals(\"No deletes should apply to FILE_B, partition not in index\",\n        0, index.forDataFile(1, 0, FILE_B).length);\n\n    Assert.assertEquals(\"No deletes should apply to FILE_C, no indexed delete files\",\n        0, index.forDataFile(1, 0, FILE_C).length);\n\n    Assert.assertEquals(\"No deletes should apply to FILE_A with a different specId\",\n        0, index.forDataFile(2, 0, FILE_A).length);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"}],"commitId":"0cd284978c3800a30d44aa2454dd5730b9bebfa7","commitMessage":"@@@Update scan planning with DeleteFiles in each task (#1288)\n\nThis adds `DeleteFileIndex` to scan delete manifests and index delete files.  updates `ManifestGroup` to use the index when planning tasks.  and adds delete files to `FileScanTask`.\n\nThe `DeleteFileIndex` uses a map keyed by partition spec ID and partition tuple. Values of the map are sorted list of sequence numbers and corresponding `DeleteFile` instances. When looking up a `DataFile`.  the potentially matching delete files are fetched using its partition tuple.  then the sequence numbers are binary searched to find the matching set of delete files with sequence numbers higher than the data file.\n\nThe index also supports global equality delete files. If an equality delete file is added to the table with an unpartitioned spec.  it will be returned for all data files with a lower sequence number.  regardless of partition.","date":"2020-08-06 04:22:25","modifiedFileCount":"11","status":"B","submitter":"Ryan Blue"},{"authorTime":"2020-08-13 02:09:02","codes":[{"authorDate":"2020-08-13 02:09:02","commitOrder":2,"curCode":"  public void testUnpartitionedDeletes() {\n    DeleteFileIndex index = new DeleteFileIndex(\n        ImmutableMap.of(\n            PartitionSpec.unpartitioned().specId(), PartitionSpec.unpartitioned(),\n            1, SPEC),\n        new long[] { 3, 5, 5, 6 }, DELETE_FILES, ImmutableMap.of());\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(0, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(3, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(4, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(5, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(6, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(7, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(10, UNPARTITIONED_FILE));\n\n    \r\n    DataFile partitionedFileA = FILE_A.copy();\n    ((BaseFile<?>) partitionedFileA).setSpecId(1);\n    Assert.assertArrayEquals(\"All global deletes should apply to a partitioned file\",\n        DELETE_FILES, index.forDataFile(0, partitionedFileA));\n  }\n","date":"2020-08-13 02:09:02","endLine":107,"groupId":"3359","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnpartitionedDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/dd/2252629b0fa2e231feec93c5d320dbf23f67cf.src","preCode":"  public void testUnpartitionedDeletes() {\n    DeleteFileIndex index = new DeleteFileIndex(new long[] { 3, 5, 5, 6 }, DELETE_FILES, ImmutableMap.of());\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(1, 0, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(1, 3, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 4, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 5, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(1, 6, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(1, 7, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(1, 10, UNPARTITIONED_FILE));\n\n    Assert.assertArrayEquals(\"All global deletes should apply to a partitioned file\",\n        DELETE_FILES, index.forDataFile(2, 0, FILE_B));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-08-13 02:09:02","commitOrder":2,"curCode":"  public void testPartitionedDeleteIndex() {\n    DeleteFileIndex index = new DeleteFileIndex(\n        ImmutableMap.of(\n            SPEC.specId(), SPEC,\n            1, PartitionSpec.unpartitioned()),\n        null, null, ImmutableMap.of(\n            Pair.of(SPEC.specId(), StructLikeWrapper.forType(SPEC.partitionType()).set(FILE_A.partition())),\n            Pair.of(new long[] { 3, 5, 5, 6 }, DELETE_FILES),\n            Pair.of(SPEC.specId(), StructLikeWrapper.forType(SPEC.partitionType()).set(FILE_C.partition())),\n            Pair.of(new long[0], new DeleteFile[0])));\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(0, FILE_A));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(3, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(4, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(5, FILE_A));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(6, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(7, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(10, FILE_A));\n\n    Assert.assertEquals(\"No deletes should apply to FILE_B, partition not in index\",\n        0, index.forDataFile(0, FILE_B).length);\n\n    Assert.assertEquals(\"No deletes should apply to FILE_C, no indexed delete files\",\n        0, index.forDataFile(0, FILE_C).length);\n\n    DataFile unpartitionedFileA = FILE_A.copy();\n    ((BaseFile<?>) unpartitionedFileA).setSpecId(1);\n    Assert.assertEquals(\"No deletes should apply to FILE_A with a different specId\",\n        0, index.forDataFile(0, unpartitionedFileA).length);\n  }\n","date":"2020-08-13 02:09:02","endLine":146,"groupId":"3359","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPartitionedDeleteIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/dd/2252629b0fa2e231feec93c5d320dbf23f67cf.src","preCode":"  public void testPartitionedDeleteIndex() {\n    DeleteFileIndex index = new DeleteFileIndex(null, null, ImmutableMap.of(\n        Pair.of(1, StructLikeWrapper.wrap(FILE_A.partition())),\n        Pair.of(new long[] { 3, 5, 5, 6 }, DELETE_FILES),\n        Pair.of(1, StructLikeWrapper.wrap(FILE_C.partition())),\n        Pair.of(new long[0], new DeleteFile[0])));\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(1, 0, FILE_A));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(1, 3, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 4, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(1, 5, FILE_A));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(1, 6, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(1, 7, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(1, 10, FILE_A));\n\n    Assert.assertEquals(\"No deletes should apply to FILE_B, partition not in index\",\n        0, index.forDataFile(1, 0, FILE_B).length);\n\n    Assert.assertEquals(\"No deletes should apply to FILE_C, no indexed delete files\",\n        0, index.forDataFile(1, 0, FILE_C).length);\n\n    Assert.assertEquals(\"No deletes should apply to FILE_A with a different specId\",\n        0, index.forDataFile(2, 0, FILE_A).length);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"01986ea77b761fe2190699bba6f3dbb25fa93042","commitMessage":"@@@Core: Fix partition sets (#1308)\n\n","date":"2020-08-13 02:09:02","modifiedFileCount":"9","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-08-13 02:09:02","codes":[{"authorDate":"2021-03-30 08:24:02","commitOrder":3,"curCode":"  public void testUnpartitionedDeletes() {\n    PartitionSpec partSpec = PartitionSpec.unpartitioned();\n    DeleteFileIndex index = new DeleteFileIndex(\n        ImmutableMap.of(\n            partSpec.specId(), partSpec,\n            1, SPEC),\n        new long[] { 3, 5, 5, 6 }, DELETE_FILES, ImmutableMap.of());\n\n    DataFile unpartitionedFile = unpartitionedFile(partSpec);\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(0, unpartitionedFile));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(3, unpartitionedFile));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(4, unpartitionedFile));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(5, unpartitionedFile));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(6, unpartitionedFile));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(7, unpartitionedFile));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(10, unpartitionedFile));\n\n    \r\n    DataFile partitionedFileA = FILE_A.copy();\n    ((BaseFile<?>) partitionedFileA).setSpecId(1);\n    Assert.assertArrayEquals(\"All global deletes should apply to a partitioned file\",\n        DELETE_FILES, index.forDataFile(0, partitionedFileA));\n  }\n","date":"2021-03-30 08:24:02","endLine":115,"groupId":"101908","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testUnpartitionedDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/17/91eaaf67d2732357c6cfd6d591c2099814cd30.src","preCode":"  public void testUnpartitionedDeletes() {\n    DeleteFileIndex index = new DeleteFileIndex(\n        ImmutableMap.of(\n            PartitionSpec.unpartitioned().specId(), PartitionSpec.unpartitioned(),\n            1, SPEC),\n        new long[] { 3, 5, 5, 6 }, DELETE_FILES, ImmutableMap.of());\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(0, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(3, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(4, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(5, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(6, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(7, UNPARTITIONED_FILE));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(10, UNPARTITIONED_FILE));\n\n    \r\n    DataFile partitionedFileA = FILE_A.copy();\n    ((BaseFile<?>) partitionedFileA).setSpecId(1);\n    Assert.assertArrayEquals(\"All global deletes should apply to a partitioned file\",\n        DELETE_FILES, index.forDataFile(0, partitionedFileA));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-08-13 02:09:02","commitOrder":3,"curCode":"  public void testPartitionedDeleteIndex() {\n    DeleteFileIndex index = new DeleteFileIndex(\n        ImmutableMap.of(\n            SPEC.specId(), SPEC,\n            1, PartitionSpec.unpartitioned()),\n        null, null, ImmutableMap.of(\n            Pair.of(SPEC.specId(), StructLikeWrapper.forType(SPEC.partitionType()).set(FILE_A.partition())),\n            Pair.of(new long[] { 3, 5, 5, 6 }, DELETE_FILES),\n            Pair.of(SPEC.specId(), StructLikeWrapper.forType(SPEC.partitionType()).set(FILE_C.partition())),\n            Pair.of(new long[0], new DeleteFile[0])));\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(0, FILE_A));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(3, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(4, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(5, FILE_A));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(6, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(7, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(10, FILE_A));\n\n    Assert.assertEquals(\"No deletes should apply to FILE_B, partition not in index\",\n        0, index.forDataFile(0, FILE_B).length);\n\n    Assert.assertEquals(\"No deletes should apply to FILE_C, no indexed delete files\",\n        0, index.forDataFile(0, FILE_C).length);\n\n    DataFile unpartitionedFileA = FILE_A.copy();\n    ((BaseFile<?>) unpartitionedFileA).setSpecId(1);\n    Assert.assertEquals(\"No deletes should apply to FILE_A with a different specId\",\n        0, index.forDataFile(0, unpartitionedFileA).length);\n  }\n","date":"2020-08-13 02:09:02","endLine":146,"groupId":"101908","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPartitionedDeleteIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/dd/2252629b0fa2e231feec93c5d320dbf23f67cf.src","preCode":"  public void testPartitionedDeleteIndex() {\n    DeleteFileIndex index = new DeleteFileIndex(\n        ImmutableMap.of(\n            SPEC.specId(), SPEC,\n            1, PartitionSpec.unpartitioned()),\n        null, null, ImmutableMap.of(\n            Pair.of(SPEC.specId(), StructLikeWrapper.forType(SPEC.partitionType()).set(FILE_A.partition())),\n            Pair.of(new long[] { 3, 5, 5, 6 }, DELETE_FILES),\n            Pair.of(SPEC.specId(), StructLikeWrapper.forType(SPEC.partitionType()).set(FILE_C.partition())),\n            Pair.of(new long[0], new DeleteFile[0])));\n\n    Assert.assertArrayEquals(\"All deletes should apply to seq 0\",\n        DELETE_FILES, index.forDataFile(0, FILE_A));\n    Assert.assertArrayEquals(\"All deletes should apply to seq 3\",\n        DELETE_FILES, index.forDataFile(3, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 4\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(4, FILE_A));\n    Assert.assertArrayEquals(\"Last 3 deletes should apply to seq 5\",\n        Arrays.copyOfRange(DELETE_FILES, 1, 4), index.forDataFile(5, FILE_A));\n    Assert.assertArrayEquals(\"Last delete should apply to seq 6\",\n        Arrays.copyOfRange(DELETE_FILES, 3, 4), index.forDataFile(6, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 7\",\n        new DataFile[0], index.forDataFile(7, FILE_A));\n    Assert.assertArrayEquals(\"No deletes should apply to seq 10\",\n        new DataFile[0], index.forDataFile(10, FILE_A));\n\n    Assert.assertEquals(\"No deletes should apply to FILE_B, partition not in index\",\n        0, index.forDataFile(0, FILE_B).length);\n\n    Assert.assertEquals(\"No deletes should apply to FILE_C, no indexed delete files\",\n        0, index.forDataFile(0, FILE_C).length);\n\n    DataFile unpartitionedFileA = FILE_A.copy();\n    ((BaseFile<?>) unpartitionedFileA).setSpecId(1);\n    Assert.assertEquals(\"No deletes should apply to FILE_A with a different specId\",\n        0, index.forDataFile(0, unpartitionedFileA).length);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"}],"commitId":"aba898b1a2ea15fd091228626b6887a5a72800c0","commitMessage":"@@@Spark: Fix RewriteDataFilesAction with custom outputSpecId (#2293)\n\n","date":"2021-03-30 08:24:02","modifiedFileCount":"7","status":"M","submitter":"Edgar Rodriguez"}]
