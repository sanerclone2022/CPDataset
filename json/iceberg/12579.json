[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected\", expected, actual);\n        break;\n      case FIXED:\n        Assert.assertTrue(\"Expected should be a byte[]\", expected instanceof byte[]);\n        Assert.assertTrue(\"Actual should be a byte[]\", actual instanceof byte[]);\n        Assert.assertArrayEquals(\"Array contents should be equal\",\n            (byte[]) expected, (byte[]) actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":111,"groupId":"930","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEquals","params":"(Typetype@Objectexpected@Objectactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/bc/92cfb1c7cdc54dcf06174577515c33a6bb6b92.src","preCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected\", expected, actual);\n        break;\n      case FIXED:\n        Assert.assertTrue(\"Expected should be a byte[]\", expected instanceof byte[]);\n        Assert.assertTrue(\"Actual should be a byte[]\", actual instanceof byte[]);\n        Assert.assertArrayEquals(\"Array contents should be equal\",\n            (byte[]) expected, (byte[]) actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DataTestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case FIXED:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected\", expected, actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":145,"groupId":"2113","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEquals","params":"(Typetype@Objectexpected@Objectactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d4/e60bdec4fd76ad43473c337933cb212ef991d8.src","preCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case FIXED:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected\", expected, actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/AvroTestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2020-05-29 01:19:11","commitOrder":2,"curCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected for type \" + type, expected, actual);\n        break;\n      case FIXED:\n        Assert.assertTrue(\"Expected should be a byte[]\", expected instanceof byte[]);\n        Assert.assertTrue(\"Actual should be a byte[]\", actual instanceof byte[]);\n        Assert.assertArrayEquals(\"Array contents should be equal\",\n            (byte[]) expected, (byte[]) actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","date":"2020-05-29 01:19:11","endLine":113,"groupId":"930","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEquals","params":"(Typetype@Objectexpected@Objectactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f5/2aa7e114f62656ed01797006bcac602b0139e0.src","preCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected\", expected, actual);\n        break;\n      case FIXED:\n        Assert.assertTrue(\"Expected should be a byte[]\", expected instanceof byte[]);\n        Assert.assertTrue(\"Actual should be a byte[]\", actual instanceof byte[]);\n        Assert.assertArrayEquals(\"Array contents should be equal\",\n            (byte[]) expected, (byte[]) actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DataTestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case FIXED:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected\", expected, actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":145,"groupId":"2113","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEquals","params":"(Typetype@Objectexpected@Objectactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d4/e60bdec4fd76ad43473c337933cb212ef991d8.src","preCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case FIXED:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected\", expected, actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/AvroTestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"c093f121a250706f4a6b340852131ecf4bd334d1","commitMessage":"@@@ORC: Support nested identity partitioning for Iceberg generics (#1072)\n\n","date":"2020-05-29 01:19:11","modifiedFileCount":"3","status":"M","submitter":"Ratandeep Ratti"},{"authorTime":"2021-07-19 18:57:09","codes":[{"authorDate":"2021-07-19 18:57:09","commitOrder":3,"curCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected for type \" + type, expected, actual);\n        break;\n      case FIXED:\n        Assertions.assertThat(expected).as(\"Expected should be a byte[]\").isInstanceOf(byte[].class);\n        Assertions.assertThat(expected).as(\"Actual should be a byte[]\").isInstanceOf(byte[].class);\n        Assert.assertArrayEquals(\"Array contents should be equal\",\n            (byte[]) expected, (byte[]) actual);\n        break;\n      case STRUCT:\n        Assertions.assertThat(expected).as(\"Expected should be a Record\").isInstanceOf(Record.class);\n        Assertions.assertThat(actual).as(\"Actual should be a Record\").isInstanceOf(Record.class);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assertions.assertThat(expected).as(\"Expected should be a List\").isInstanceOf(List.class);\n        Assertions.assertThat(actual).as(\"Actual should be a List\").isInstanceOf(List.class);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assertions.assertThat(expected).as(\"Expected should be a Map\").isInstanceOf(Map.class);\n        Assertions.assertThat(actual).as(\"Actual should be a Map\").isInstanceOf(Map.class);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","date":"2021-07-19 18:57:09","endLine":115,"groupId":"12579","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"assertEquals","params":"(Typetype@Objectexpected@Objectactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/94/9716ee91655230d710db3a3fe075024282ce65.src","preCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected for type \" + type, expected, actual);\n        break;\n      case FIXED:\n        Assert.assertTrue(\"Expected should be a byte[]\", expected instanceof byte[]);\n        Assert.assertTrue(\"Actual should be a byte[]\", actual instanceof byte[]);\n        Assert.assertArrayEquals(\"Array contents should be equal\",\n            (byte[]) expected, (byte[]) actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DataTestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-07-19 18:57:09","commitOrder":3,"curCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case FIXED:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected\", expected, actual);\n        break;\n      case STRUCT:\n        Assertions.assertThat(expected).as(\"Expected should be a Record\").isInstanceOf(Record.class);\n        Assertions.assertThat(actual).as(\"Actual should be a Record\").isInstanceOf(Record.class);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assertions.assertThat(expected).as(\"Expected should be a List\").isInstanceOf(List.class);\n        Assertions.assertThat(actual).as(\"Actual should be a List\").isInstanceOf(List.class);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assertions.assertThat(expected).as(\"Expected should be a Map\").isInstanceOf(Map.class);\n        Assertions.assertThat(actual).as(\"Actual should be a Map\").isInstanceOf(Map.class);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","date":"2021-07-19 18:57:09","endLine":150,"groupId":"12579","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"assertEquals","params":"(Typetype@Objectexpected@Objectactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/8b/70499c70bebb01f541f05399c7bed293d4cfeb.src","preCode":"  private static void assertEquals(Type type, Object expected, Object actual) {\n    if (expected == null && actual == null) {\n      return;\n    }\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n      case INTEGER:\n      case LONG:\n      case FLOAT:\n      case DOUBLE:\n      case STRING:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case UUID:\n      case FIXED:\n      case BINARY:\n      case DECIMAL:\n        Assert.assertEquals(\"Primitive value should be equal to expected\", expected, actual);\n        break;\n      case STRUCT:\n        Assert.assertTrue(\"Expected should be a Record\", expected instanceof Record);\n        Assert.assertTrue(\"Actual should be a Record\", actual instanceof Record);\n        assertEquals(type.asStructType(), (Record) expected, (Record) actual);\n        break;\n      case LIST:\n        Assert.assertTrue(\"Expected should be a List\", expected instanceof List);\n        Assert.assertTrue(\"Actual should be a List\", actual instanceof List);\n        assertEquals(type.asListType(), (List) expected, (List) actual);\n        break;\n      case MAP:\n        Assert.assertTrue(\"Expected should be a Map\", expected instanceof Map);\n        Assert.assertTrue(\"Actual should be a Map\", actual instanceof Map);\n        assertEquals(type.asMapType(), (Map<?, ?>) expected, (Map<?, ?>) actual);\n        break;\n      default:\n        throw new IllegalArgumentException(\"Not a supported type: \" + type);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/AvroTestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"0055e855ccabbd6a592b3b49e1f38131f62e0fdd","commitMessage":"@@@Move Assert.assertTrue(..) instance checks to AssertJ assertions (#2756)\n\n","date":"2021-07-19 18:57:09","modifiedFileCount":"25","status":"M","submitter":"Eduard Tudenh?fner"}]
