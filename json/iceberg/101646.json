[{"authorTime":"2020-11-20 02:23:35","codes":[{"authorDate":"2020-11-20 02:23:35","commitOrder":1,"curCode":"  public void listTables() {\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Mockito.doReturn(GetTablesResponse.builder()\n        .tableList(\n            Table.builder().databaseName(\"db1\").name(\"t1\").build(),\n            Table.builder().databaseName(\"db1\").name(\"t2\").build()\n        ).build())\n        .when(glue).getTables(Mockito.any(GetTablesRequest.class));\n    Assert.assertEquals(\n        Lists.newArrayList(\n            TableIdentifier.of(\"db1\", \"t1\"),\n            TableIdentifier.of(\"db1\", \"t2\")\n        ),\n        glueCatalog.listTables(Namespace.of(\"db1\"))\n    );\n  }\n","date":"2020-11-20 02:23:35","endLine":134,"groupId":"1244","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a8/0b168f77bb5bfe9b297ee0c51b74cfbb323a36.src","preCode":"  public void listTables() {\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Mockito.doReturn(GetTablesResponse.builder()\n        .tableList(\n            Table.builder().databaseName(\"db1\").name(\"t1\").build(),\n            Table.builder().databaseName(\"db1\").name(\"t2\").build()\n        ).build())\n        .when(glue).getTables(Mockito.any(GetTablesRequest.class));\n    Assert.assertEquals(\n        Lists.newArrayList(\n            TableIdentifier.of(\"db1\", \"t1\"),\n            TableIdentifier.of(\"db1\", \"t2\")\n        ),\n        glueCatalog.listTables(Namespace.of(\"db1\"))\n    );\n  }\n","realPath":"aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2020-11-20 02:23:35","commitOrder":1,"curCode":"  public void listNamespaces_self() {\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Assert.assertEquals(\n        \"list self should return empty list\",\n        Lists.newArrayList(),\n        glueCatalog.listNamespaces(Namespace.of(\"db1\"))\n    );\n  }\n","date":"2020-11-20 02:23:35","endLine":278,"groupId":"1248","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listNamespaces_self","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a8/0b168f77bb5bfe9b297ee0c51b74cfbb323a36.src","preCode":"  public void listNamespaces_self() {\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Assert.assertEquals(\n        \"list self should return empty list\",\n        Lists.newArrayList(),\n        glueCatalog.listNamespaces(Namespace.of(\"db1\"))\n    );\n  }\n","realPath":"aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"}],"commitId":"0beb7d663694d78e6edecb241a008e9834c82d8c","commitMessage":"@@@AWS: Add Glue catalog and table operations (#1633)\n\n","date":"2020-11-20 02:23:35","modifiedFileCount":"3","status":"B","submitter":"jackye1995"},{"authorTime":"2020-11-20 02:23:35","codes":[{"authorDate":"2021-03-04 08:23:29","commitOrder":2,"curCode":"  public void listTables() {\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Mockito.doReturn(GetTablesResponse.builder()\n        .tableList(\n            Table.builder().databaseName(\"db1\").name(\"t1\").parameters(\n                ImmutableMap.of(\n                    BaseMetastoreTableOperations.TABLE_TYPE_PROP, BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE\n                )\n            ).build(),\n            Table.builder().databaseName(\"db1\").name(\"t2\").parameters(\n                ImmutableMap.of(\n                    \"key\", \"val\",\n                    BaseMetastoreTableOperations.TABLE_TYPE_PROP, BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE\n                )\n            ).build(),\n            Table.builder().databaseName(\"db1\").name(\"t3\").parameters(\n                ImmutableMap.of(\n                    \"key\", \"val\",\n                    BaseMetastoreTableOperations.TABLE_TYPE_PROP, \"wrongVal\"\n                )\n            ).build(),\n            Table.builder().databaseName(\"db1\").name(\"t4\").parameters(\n                ImmutableMap.of(\n                    \"key\", \"val\"\n                )\n            ).build(),\n            Table.builder().databaseName(\"db1\").name(\"t5\").parameters(null).build()\n        ).build())\n        .when(glue).getTables(Mockito.any(GetTablesRequest.class));\n    Assert.assertEquals(\n        Lists.newArrayList(\n            TableIdentifier.of(\"db1\", \"t1\"),\n            TableIdentifier.of(\"db1\", \"t2\")\n        ),\n        glueCatalog.listTables(Namespace.of(\"db1\"))\n    );\n  }\n","date":"2021-03-04 08:23:29","endLine":159,"groupId":"101646","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"listTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/66/9a73e30b5edc218a6d92991e4e34e36c35659e.src","preCode":"  public void listTables() {\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Mockito.doReturn(GetTablesResponse.builder()\n        .tableList(\n            Table.builder().databaseName(\"db1\").name(\"t1\").build(),\n            Table.builder().databaseName(\"db1\").name(\"t2\").build()\n        ).build())\n        .when(glue).getTables(Mockito.any(GetTablesRequest.class));\n    Assert.assertEquals(\n        Lists.newArrayList(\n            TableIdentifier.of(\"db1\", \"t1\"),\n            TableIdentifier.of(\"db1\", \"t2\")\n        ),\n        glueCatalog.listTables(Namespace.of(\"db1\"))\n    );\n  }\n","realPath":"aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2020-11-20 02:23:35","commitOrder":2,"curCode":"  public void listNamespaces_self() {\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Assert.assertEquals(\n        \"list self should return empty list\",\n        Lists.newArrayList(),\n        glueCatalog.listNamespaces(Namespace.of(\"db1\"))\n    );\n  }\n","date":"2020-11-20 02:23:35","endLine":278,"groupId":"101646","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listNamespaces_self","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a8/0b168f77bb5bfe9b297ee0c51b74cfbb323a36.src","preCode":"  public void listNamespaces_self() {\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Assert.assertEquals(\n        \"list self should return empty list\",\n        Lists.newArrayList(),\n        glueCatalog.listNamespaces(Namespace.of(\"db1\"))\n    );\n  }\n","realPath":"aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"N"}],"commitId":"ef6de31a805783bce87efb51d2e5843c192e6822","commitMessage":"@@@AWS: Do not list non-iceberg table in GlueCatalog (#2267)\n\n","date":"2021-03-04 08:23:29","modifiedFileCount":"3","status":"M","submitter":"Jack Ye"}]
