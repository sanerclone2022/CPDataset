[{"authorTime":"2020-07-30 12:45:55","codes":[{"authorDate":"2020-01-30 01:08:16","commitOrder":2,"curCode":"  public void testUseSnapshot() throws IOException {\n    overwriteExistingData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .useSnapshot( sharedTable.history().get(1).snapshotId())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1FirstSnapshotRecords);\n    expected.addAll(file2FirstSnapshotRecords);\n    expected.addAll(file3FirstSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","date":"2020-01-30 01:08:16","endLine":345,"groupId":"835","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUseSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e4/1c41d088c926afb426ca2859928167424b47a2.src","preCode":"  public void testUseSnapshot() throws IOException {\n    overwriteExistingData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .useSnapshot( sharedTable.history().get(1).snapshotId())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1FirstSnapshotRecords);\n    expected.addAll(file2FirstSnapshotRecords);\n    expected.addAll(file3FirstSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"NB"},{"authorDate":"2020-07-30 12:45:55","commitOrder":2,"curCode":"  public void testAppendsBetween() throws IOException {\n    appendData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .appendsBetween(sharedTable.history().get(1).snapshotId(), sharedTable.currentSnapshot().snapshotId())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1SecondSnapshotRecords);\n    expected.addAll(file2SecondSnapshotRecords);\n    expected.addAll(file3SecondSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","date":"2020-07-30 12:45:55","endLine":449,"groupId":"835","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppendsBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/df/b2d6164fb1f9d2b3c10838fcc237f4ccf67c11.src","preCode":"  public void testAppendsBetween() throws IOException {\n    appendData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .appendsBetween(sharedTable.history().get(1).snapshotId(), sharedTable.currentSnapshot().snapshotId())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1SecondSnapshotRecords);\n    expected.addAll(file2SecondSnapshotRecords);\n    expected.addAll(file3SecondSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"B"}],"commitId":"aad99b5f7954678193ee6c3fa69f68392b8b81dd","commitMessage":"@@@Add incremental scan for iceberg generics  (#1239)\n\n","date":"2020-07-30 12:45:55","modifiedFileCount":"2","status":"M","submitter":"Chen Junjie"},{"authorTime":"2020-08-06 15:02:28","codes":[{"authorDate":"2020-08-06 15:02:28","commitOrder":3,"curCode":"  public void testUseSnapshot() throws IOException {\n    overwriteExistingData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .useSnapshot( sharedTable.history().get(1).snapshotId())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1SecondSnapshotRecords);\n    expected.addAll(file2SecondSnapshotRecords);\n    expected.addAll(file3SecondSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","date":"2020-08-06 15:02:28","endLine":360,"groupId":"10566","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUseSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/10/ace67364888ea2a56fd4b839c6d2215375c14d.src","preCode":"  public void testUseSnapshot() throws IOException {\n    overwriteExistingData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .useSnapshot( sharedTable.history().get(1).snapshotId())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1FirstSnapshotRecords);\n    expected.addAll(file2FirstSnapshotRecords);\n    expected.addAll(file3FirstSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2020-08-06 15:02:28","commitOrder":3,"curCode":"  public void testAppendsBetween() throws IOException {\n    appendData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .appendsBetween(sharedTable.history().get(1).snapshotId(), sharedTable.currentSnapshot().snapshotId())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1ThirdSnapshotRecords);\n    expected.addAll(file2ThirdSnapshotRecords);\n    expected.addAll(file3ThirdSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","date":"2020-08-06 15:02:28","endLine":402,"groupId":"10566","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppendsBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/10/ace67364888ea2a56fd4b839c6d2215375c14d.src","preCode":"  public void testAppendsBetween() throws IOException {\n    appendData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .appendsBetween(sharedTable.history().get(1).snapshotId(), sharedTable.currentSnapshot().snapshotId())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1SecondSnapshotRecords);\n    expected.addAll(file2SecondSnapshotRecords);\n    expected.addAll(file3SecondSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"3e8329ca61e5346126be1cbcaba9e9ddd9fa972f","commitMessage":"@@@Generics: Refactor TestLocalScan (#1273)\n\n* Generics: Refactor TestLocalScan","date":"2020-08-06 15:02:28","modifiedFileCount":"1","status":"M","submitter":"Chen Junjie"}]
