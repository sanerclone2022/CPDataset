[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testReplaceTransaction() {\n    Schema newSchema = new Schema(\n        required(4, \"id\", Types.IntegerType.get()),\n        required(5, \"data\", Types.StringType.get()));\n\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n  }\n","date":"2019-03-21 07:25:05","endLine":63,"groupId":"3585","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f0/38d36909a2e4ce3f2f33e772710afc18c3276b.src","preCode":"  public void testReplaceTransaction() {\n    Schema newSchema = new Schema(\n        required(4, \"id\", Types.IntegerType.get()),\n        required(5, \"data\", Types.StringType.get()));\n\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testReplaceWithIncompatibleSchemaUpdate() {\n    Schema newSchema = new Schema(\n        required(4, \"obj_id\", Types.IntegerType.get()));\n\n    Snapshot start = table.currentSnapshot();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",\n        new Schema(required(1, \"obj_id\", Types.IntegerType.get())).asStruct(),\n        table.schema().asStruct());\n  }\n","date":"2019-03-21 07:25:05","endLine":90,"groupId":"68","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReplaceWithIncompatibleSchemaUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f0/38d36909a2e4ce3f2f33e772710afc18c3276b.src","preCode":"  public void testReplaceWithIncompatibleSchemaUpdate() {\n    Schema newSchema = new Schema(\n        required(4, \"obj_id\", Types.IntegerType.get()));\n\n    Snapshot start = table.currentSnapshot();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",\n        new Schema(required(1, \"obj_id\", Types.IntegerType.get())).asStruct(),\n        table.schema().asStruct());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2020-09-04 13:48:01","commitOrder":2,"curCode":"  public void testReplaceTransaction() {\n    Schema newSchema = new Schema(\n        required(4, \"id\", Types.IntegerType.get()),\n        required(5, \"data\", Types.StringType.get()));\n\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n    Assert.assertEquals(\"Table should have 1 order\", 1, table.sortOrders().size());\n    Assert.assertEquals(\"Table order ID should match\", 0, table.sortOrder().orderId());\n    Assert.assertTrue(\"Table should be unsorted\", table.sortOrder().isUnsorted());\n  }\n","date":"2020-09-04 13:48:01","endLine":128,"groupId":"3585","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f2/b8243f41f93b54f1be84a9ed8d27c57564ed26.src","preCode":"  public void testReplaceTransaction() {\n    Schema newSchema = new Schema(\n        required(4, \"id\", Types.IntegerType.get()),\n        required(5, \"data\", Types.StringType.get()));\n\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public void testReplaceWithIncompatibleSchemaUpdate() {\n    Schema newSchema = new Schema(\n        required(4, \"obj_id\", Types.IntegerType.get()));\n\n    Snapshot start = table.currentSnapshot();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",\n        new Schema(required(1, \"obj_id\", Types.IntegerType.get())).asStruct(),\n        table.schema().asStruct());\n  }\n","date":"2019-03-21 07:25:05","endLine":90,"groupId":"68","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReplaceWithIncompatibleSchemaUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f0/38d36909a2e4ce3f2f33e772710afc18c3276b.src","preCode":"  public void testReplaceWithIncompatibleSchemaUpdate() {\n    Schema newSchema = new Schema(\n        required(4, \"obj_id\", Types.IntegerType.get()));\n\n    Snapshot start = table.currentSnapshot();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",\n        new Schema(required(1, \"obj_id\", Types.IntegerType.get())).asStruct(),\n        table.schema().asStruct());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"454101c3573acb9cd94d6d9a306ed99a5a324ed9","commitMessage":"@@@API: Implement SortOrder (#1373)\n\nThis commit extends Iceberg metadata with a sort order that defines how data and delete files should be ordered.","date":"2020-09-04 13:48:01","modifiedFileCount":"17","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2020-09-24 00:20:34","codes":[{"authorDate":"2020-09-04 13:48:01","commitOrder":3,"curCode":"  public void testReplaceTransaction() {\n    Schema newSchema = new Schema(\n        required(4, \"id\", Types.IntegerType.get()),\n        required(5, \"data\", Types.StringType.get()));\n\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n    Assert.assertEquals(\"Table should have 1 order\", 1, table.sortOrders().size());\n    Assert.assertEquals(\"Table order ID should match\", 0, table.sortOrder().orderId());\n    Assert.assertTrue(\"Table should be unsorted\", table.sortOrder().isUnsorted());\n  }\n","date":"2020-09-04 13:48:01","endLine":128,"groupId":"3585","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f2/b8243f41f93b54f1be84a9ed8d27c57564ed26.src","preCode":"  public void testReplaceTransaction() {\n    Schema newSchema = new Schema(\n        required(4, \"id\", Types.IntegerType.get()),\n        required(5, \"data\", Types.StringType.get()));\n\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n    Assert.assertEquals(\"Table should have 1 order\", 1, table.sortOrders().size());\n    Assert.assertEquals(\"Table order ID should match\", 0, table.sortOrder().orderId());\n    Assert.assertTrue(\"Table should be unsorted\", table.sortOrder().isUnsorted());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"},{"authorDate":"2020-09-24 00:20:34","commitOrder":3,"curCode":"  public void testReplaceWithIncompatibleSchemaUpdate() {\n    Schema newSchema = new Schema(\n        required(4, \"obj_id\", Types.IntegerType.get()));\n\n    Snapshot start = table.currentSnapshot();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",\n        new Schema(required(3, \"obj_id\", Types.IntegerType.get())).asStruct(),\n        table.schema().asStruct());\n  }\n","date":"2020-09-24 00:20:34","endLine":155,"groupId":"68","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReplaceWithIncompatibleSchemaUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/4c/c015bd89845a8cf414cafd6f2adab32dc1dc8e.src","preCode":"  public void testReplaceWithIncompatibleSchemaUpdate() {\n    Schema newSchema = new Schema(\n        required(4, \"obj_id\", Types.IntegerType.get()));\n\n    Snapshot start = table.currentSnapshot();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",\n        new Schema(required(1, \"obj_id\", Types.IntegerType.get())).asStruct(),\n        table.schema().asStruct());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"2f2f461d5f280dff4de486fc54d0123591f0fe0a","commitMessage":"@@@Core: Fix table replacement by preserving existing field IDs (#1475)\n\n","date":"2020-09-24 00:20:34","modifiedFileCount":"4","status":"M","submitter":"Ryan Blue"},{"authorTime":"2021-08-03 22:39:58","codes":[{"authorDate":"2021-08-03 22:39:58","commitOrder":4,"curCode":"  public void testReplaceTransaction() {\n    Schema newSchema = new Schema(\n        required(4, \"id\", Types.IntegerType.get()),\n        required(5, \"data\", Types.StringType.get()));\n\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n\n    PartitionSpec v2Expected = PartitionSpec.builderFor(table.schema()).withSpecId(1).build();\n    V2Assert.assertEquals(\"Table should have an unpartitioned spec\",\n        v2Expected, table.spec());\n\n    PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema())\n        .alwaysNull(\"data\", \"data_bucket\")\n        .withSpecId(1)\n        .build();\n    V1Assert.assertEquals(\"Table should have a spec with one void field\",\n        v1Expected, table.spec());\n\n    Assert.assertEquals(\"Table should have 1 order\", 1, table.sortOrders().size());\n    Assert.assertEquals(\"Table order ID should match\", 0, table.sortOrder().orderId());\n    Assert.assertTrue(\"Table should be unsorted\", table.sortOrder().isUnsorted());\n  }\n","date":"2021-08-03 22:39:58","endLine":146,"groupId":"101702","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testReplaceTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e7/9e2975497f3be2c8b30c407492b636aef75d97.src","preCode":"  public void testReplaceTransaction() {\n    Schema newSchema = new Schema(\n        required(4, \"id\", Types.IntegerType.get()),\n        required(5, \"data\", Types.StringType.get()));\n\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n    Assert.assertEquals(\"Table should have 1 order\", 1, table.sortOrders().size());\n    Assert.assertEquals(\"Table order ID should match\", 0, table.sortOrder().orderId());\n    Assert.assertTrue(\"Table should be unsorted\", table.sortOrder().isUnsorted());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2021-08-03 22:39:58","commitOrder":4,"curCode":"  public void testReplaceWithIncompatibleSchemaUpdate() {\n    Assume.assumeTrue(\"Fails early for v1 tables because partition spec cannot drop a field\", formatVersion == 2);\n\n    Schema newSchema = new Schema(\n        required(4, \"obj_id\", Types.IntegerType.get()));\n\n    Snapshot start = table.currentSnapshot();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",\n        new Schema(required(3, \"obj_id\", Types.IntegerType.get())).asStruct(),\n        table.schema().asStruct());\n  }\n","date":"2021-08-03 22:39:58","endLine":175,"groupId":"101702","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testReplaceWithIncompatibleSchemaUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e7/9e2975497f3be2c8b30c407492b636aef75d97.src","preCode":"  public void testReplaceWithIncompatibleSchemaUpdate() {\n    Schema newSchema = new Schema(\n        required(4, \"obj_id\", Types.IntegerType.get()));\n\n    Snapshot start = table.currentSnapshot();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", newSchema, unpartitioned());\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should use new schema, not compatible with previous\",\n        new Schema(required(3, \"obj_id\", Types.IntegerType.get())).asStruct(),\n        table.schema().asStruct());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"a42a546a5e0b32fc5634626e28d10f0c29f838fe","commitMessage":"@@@Core: Fix partition field IDs in table replacement (#2906)\n\nCo-authored-by: Jun He <jun-he@users.noreply.github.com>","date":"2021-08-03 22:39:58","modifiedFileCount":"7","status":"M","submitter":"Ryan Blue"}]
