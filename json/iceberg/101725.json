[{"authorTime":"2021-06-22 05:48:49","codes":[{"authorDate":"2020-09-04 13:48:01","commitOrder":2,"curCode":"  public void testReplaceTransactionWithCustomSortOrder() {\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    SortOrder newSortOrder = SortOrder.builderFor(schema)\n        .asc(\"id\", NULLS_FIRST)\n        .build();\n\n    Map<String, String> props = Maps.newHashMap();\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", schema, unpartitioned(), newSortOrder, props);\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n    Assert.assertEquals(\"Table should have 2 orders\", 2, table.sortOrders().size());\n    SortOrder sortOrder = table.sortOrder();\n    Assert.assertEquals(\"Order ID must match\", 1, sortOrder.orderId());\n    Assert.assertEquals(\"Order must have 1 field\", 1, sortOrder.fields().size());\n    Assert.assertEquals(\"Direction must match \", ASC, sortOrder.fields().get(0).direction());\n    Assert.assertEquals(\"Null order must match \", NULLS_FIRST, sortOrder.fields().get(0).nullOrder());\n    Transform<?, ?> transform = Transforms.identity(Types.IntegerType.get());\n    Assert.assertEquals(\"Transform must match\", transform, sortOrder.fields().get(0).transform());\n  }\n","date":"2020-09-04 13:48:01","endLine":95,"groupId":"3584","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceTransactionWithCustomSortOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f2/b8243f41f93b54f1be84a9ed8d27c57564ed26.src","preCode":"  public void testReplaceTransactionWithCustomSortOrder() {\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    SortOrder newSortOrder = SortOrder.builderFor(schema)\n        .asc(\"id\", NULLS_FIRST)\n        .build();\n\n    Map<String, String> props = Maps.newHashMap();\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", schema, unpartitioned(), newSortOrder, props);\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n    Assert.assertEquals(\"Table should have 2 orders\", 2, table.sortOrders().size());\n    SortOrder sortOrder = table.sortOrder();\n    Assert.assertEquals(\"Order ID must match\", 1, sortOrder.orderId());\n    Assert.assertEquals(\"Order must have 1 field\", 1, sortOrder.fields().size());\n    Assert.assertEquals(\"Direction must match \", ASC, sortOrder.fields().get(0).direction());\n    Assert.assertEquals(\"Null order must match \", NULLS_FIRST, sortOrder.fields().get(0).nullOrder());\n    Transform<?, ?> transform = Transforms.identity(Types.IntegerType.get());\n    Assert.assertEquals(\"Transform must match\", transform, sortOrder.fields().get(0).transform());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"NB"},{"authorDate":"2021-06-22 05:48:49","commitOrder":2,"curCode":"  public void testCreateTableCustomSortOrder() {\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n    SortOrder order = SortOrder.builderFor(SCHEMA)\n        .asc(\"id\", NULLS_FIRST)\n        .build();\n    Table table = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(PARTITION_SPEC)\n        .withSortOrder(order)\n        .create();\n\n    SortOrder sortOrder = table.sortOrder();\n    Assert.assertEquals(\"Order ID must match\", 1, sortOrder.orderId());\n    Assert.assertEquals(\"Order must have 1 field\", 1, sortOrder.fields().size());\n    Assert.assertEquals(\"Direction must match \", ASC, sortOrder.fields().get(0).direction());\n    Assert.assertEquals(\"Null order must match \", NULLS_FIRST, sortOrder.fields().get(0).nullOrder());\n    Transform<?, ?> transform = Transforms.identity(Types.IntegerType.get());\n    Assert.assertEquals(\"Transform must match\", transform, sortOrder.fields().get(0).transform());\n  }\n","date":"2021-06-22 05:48:49","endLine":231,"groupId":"4129","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateTableCustomSortOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/52/92e3146ec7b62ace8bae2b79228ba020929c5b.src","preCode":"  public void testCreateTableCustomSortOrder() {\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n    SortOrder order = SortOrder.builderFor(SCHEMA)\n        .asc(\"id\", NULLS_FIRST)\n        .build();\n    Table table = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(PARTITION_SPEC)\n        .withSortOrder(order)\n        .create();\n\n    SortOrder sortOrder = table.sortOrder();\n    Assert.assertEquals(\"Order ID must match\", 1, sortOrder.orderId());\n    Assert.assertEquals(\"Order must have 1 field\", 1, sortOrder.fields().size());\n    Assert.assertEquals(\"Direction must match \", ASC, sortOrder.fields().get(0).direction());\n    Assert.assertEquals(\"Null order must match \", NULLS_FIRST, sortOrder.fields().get(0).nullOrder());\n    Transform<?, ?> transform = Transforms.identity(Types.IntegerType.get());\n    Assert.assertEquals(\"Transform must match\", transform, sortOrder.fields().get(0).transform());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"}],"commitId":"0c784fae03e792d98aee46f4c71da5e180611f10","commitMessage":"@@@Core: Add JDBC catalog implementation (#1870)\n\n","date":"2021-06-22 05:48:49","modifiedFileCount":"2","status":"M","submitter":"ismail simsek"},{"authorTime":"2021-06-22 05:48:49","codes":[{"authorDate":"2021-08-03 22:39:58","commitOrder":3,"curCode":"  public void testReplaceTransactionWithCustomSortOrder() {\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    SortOrder newSortOrder = SortOrder.builderFor(schema)\n        .asc(\"id\", NULLS_FIRST)\n        .build();\n\n    Map<String, String> props = Maps.newHashMap();\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", schema, unpartitioned(), newSortOrder, props);\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n\n    PartitionSpec v2Expected = PartitionSpec.builderFor(table.schema()).withSpecId(1).build();\n    V2Assert.assertEquals(\"Table should have an unpartitioned spec\",\n        v2Expected, table.spec());\n\n    PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema())\n        .alwaysNull(\"data\", \"data_bucket\")\n        .withSpecId(1)\n        .build();\n    V1Assert.assertEquals(\"Table should have a spec with one void field\",\n        v1Expected, table.spec());\n\n    Assert.assertEquals(\"Table should have 2 orders\", 2, table.sortOrders().size());\n    SortOrder sortOrder = table.sortOrder();\n    Assert.assertEquals(\"Order ID must match\", 1, sortOrder.orderId());\n    Assert.assertEquals(\"Order must have 1 field\", 1, sortOrder.fields().size());\n    Assert.assertEquals(\"Direction must match \", ASC, sortOrder.fields().get(0).direction());\n    Assert.assertEquals(\"Null order must match \", NULLS_FIRST, sortOrder.fields().get(0).nullOrder());\n    Transform<?, ?> transform = Transforms.identity(Types.IntegerType.get());\n    Assert.assertEquals(\"Transform must match\", transform, sortOrder.fields().get(0).transform());\n  }\n","date":"2021-08-03 22:39:58","endLine":103,"groupId":"101725","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testReplaceTransactionWithCustomSortOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e7/9e2975497f3be2c8b30c407492b636aef75d97.src","preCode":"  public void testReplaceTransactionWithCustomSortOrder() {\n    Snapshot start = table.currentSnapshot();\n    Schema schema = table.schema();\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    Assert.assertEquals(\"Version should be 1\", 1L, (long) version());\n\n    validateSnapshot(start, table.currentSnapshot(), FILE_A);\n\n    SortOrder newSortOrder = SortOrder.builderFor(schema)\n        .asc(\"id\", NULLS_FIRST)\n        .build();\n\n    Map<String, String> props = Maps.newHashMap();\n    Transaction replace = TestTables.beginReplace(tableDir, \"test\", schema, unpartitioned(), newSortOrder, props);\n    replace.commitTransaction();\n\n    table.refresh();\n\n    Assert.assertEquals(\"Version should be 2\", 2L, (long) version());\n    Assert.assertNull(\"Table should not have a current snapshot\", table.currentSnapshot());\n    Assert.assertEquals(\"Schema should match previous schema\",\n        schema.asStruct(), table.schema().asStruct());\n    Assert.assertEquals(\"Partition spec should have no fields\",\n        0, table.spec().fields().size());\n    Assert.assertEquals(\"Table should have 2 orders\", 2, table.sortOrders().size());\n    SortOrder sortOrder = table.sortOrder();\n    Assert.assertEquals(\"Order ID must match\", 1, sortOrder.orderId());\n    Assert.assertEquals(\"Order must have 1 field\", 1, sortOrder.fields().size());\n    Assert.assertEquals(\"Direction must match \", ASC, sortOrder.fields().get(0).direction());\n    Assert.assertEquals(\"Null order must match \", NULLS_FIRST, sortOrder.fields().get(0).nullOrder());\n    Transform<?, ?> transform = Transforms.identity(Types.IntegerType.get());\n    Assert.assertEquals(\"Transform must match\", transform, sortOrder.fields().get(0).transform());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestReplaceTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-06-22 05:48:49","commitOrder":3,"curCode":"  public void testCreateTableCustomSortOrder() {\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n    SortOrder order = SortOrder.builderFor(SCHEMA)\n        .asc(\"id\", NULLS_FIRST)\n        .build();\n    Table table = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(PARTITION_SPEC)\n        .withSortOrder(order)\n        .create();\n\n    SortOrder sortOrder = table.sortOrder();\n    Assert.assertEquals(\"Order ID must match\", 1, sortOrder.orderId());\n    Assert.assertEquals(\"Order must have 1 field\", 1, sortOrder.fields().size());\n    Assert.assertEquals(\"Direction must match \", ASC, sortOrder.fields().get(0).direction());\n    Assert.assertEquals(\"Null order must match \", NULLS_FIRST, sortOrder.fields().get(0).nullOrder());\n    Transform<?, ?> transform = Transforms.identity(Types.IntegerType.get());\n    Assert.assertEquals(\"Transform must match\", transform, sortOrder.fields().get(0).transform());\n  }\n","date":"2021-06-22 05:48:49","endLine":231,"groupId":"101725","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateTableCustomSortOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/52/92e3146ec7b62ace8bae2b79228ba020929c5b.src","preCode":"  public void testCreateTableCustomSortOrder() {\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n    SortOrder order = SortOrder.builderFor(SCHEMA)\n        .asc(\"id\", NULLS_FIRST)\n        .build();\n    Table table = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(PARTITION_SPEC)\n        .withSortOrder(order)\n        .create();\n\n    SortOrder sortOrder = table.sortOrder();\n    Assert.assertEquals(\"Order ID must match\", 1, sortOrder.orderId());\n    Assert.assertEquals(\"Order must have 1 field\", 1, sortOrder.fields().size());\n    Assert.assertEquals(\"Direction must match \", ASC, sortOrder.fields().get(0).direction());\n    Assert.assertEquals(\"Null order must match \", NULLS_FIRST, sortOrder.fields().get(0).nullOrder());\n    Transform<?, ?> transform = Transforms.identity(Types.IntegerType.get());\n    Assert.assertEquals(\"Transform must match\", transform, sortOrder.fields().get(0).transform());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"}],"commitId":"a42a546a5e0b32fc5634626e28d10f0c29f838fe","commitMessage":"@@@Core: Fix partition field IDs in table replacement (#2906)\n\nCo-authored-by: Jun He <jun-he@users.noreply.github.com>","date":"2021-08-03 22:39:58","modifiedFileCount":"7","status":"M","submitter":"Ryan Blue"}]
