[{"authorTime":"2020-11-14 09:06:15","codes":[{"authorDate":"2020-11-14 07:55:36","commitOrder":2,"curCode":"  public void testCherrypickSnapshotUsingPositionalArgs() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'true')\", tableName, WRITE_AUDIT_PUBLISH_ENABLED);\n\n    spark.conf().set(\"spark.wap.id\", \"1\");\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n\n    assertEquals(\"Should not see rows from staged snapshot\",\n        ImmutableList.of(),\n        sql(\"SELECT * FROM %s\", tableName));\n\n    Table table = validationCatalog.loadTable(tableIdent);\n    Snapshot wapSnapshot = Iterables.getOnlyElement(table.snapshots());\n\n    List<Object[]> output = sql(\n        \"CALL %s.system.cherrypick_snapshot('%s', '%s', %dL)\",\n        catalogName, tableIdent.namespace(), tableIdent.name(), wapSnapshot.snapshotId());\n\n    table.refresh();\n\n    Snapshot currentSnapshot = table.currentSnapshot();\n\n    assertEquals(\"Procedure output must match\",\n        ImmutableList.of(row(wapSnapshot.snapshotId(), currentSnapshot.snapshotId())),\n        output);\n\n    assertEquals(\"Cherrypick must be successful\",\n        ImmutableList.of(row(1L, \"a\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","date":"2020-11-14 07:55:36","endLine":82,"groupId":"1672","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCherrypickSnapshotUsingPositionalArgs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9d/f5639073e8cb81a1f5411385aaf3e3263a0187.src","preCode":"  public void testCherrypickSnapshotUsingPositionalArgs() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'true')\", tableName, WRITE_AUDIT_PUBLISH_ENABLED);\n\n    spark.conf().set(\"spark.wap.id\", \"1\");\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n\n    assertEquals(\"Should not see rows from staged snapshot\",\n        ImmutableList.of(),\n        sql(\"SELECT * FROM %s\", tableName));\n\n    Table table = validationCatalog.loadTable(tableIdent);\n    Snapshot wapSnapshot = Iterables.getOnlyElement(table.snapshots());\n\n    List<Object[]> output = sql(\n        \"CALL %s.system.cherrypick_snapshot('%s', '%s', %dL)\",\n        catalogName, tableIdent.namespace(), tableIdent.name(), wapSnapshot.snapshotId());\n\n    table.refresh();\n\n    Snapshot currentSnapshot = table.currentSnapshot();\n\n    assertEquals(\"Procedure output must match\",\n        ImmutableList.of(row(wapSnapshot.snapshotId(), currentSnapshot.snapshotId())),\n        output);\n\n    assertEquals(\"Cherrypick must be successful\",\n        ImmutableList.of(row(1L, \"a\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestCherrypickSnapshotProcedure.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"NB"},{"authorDate":"2020-11-14 09:06:15","commitOrder":2,"curCode":"  public void testSetCurrentSnapshotWap() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'true')\", tableName, WRITE_AUDIT_PUBLISH_ENABLED);\n\n    spark.conf().set(\"spark.wap.id\", \"1\");\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n\n    assertEquals(\"Should not see rows from staged snapshot\",\n        ImmutableList.of(),\n        sql(\"SELECT * FROM %s\", tableName));\n\n    Table table = validationCatalog.loadTable(tableIdent);\n    Snapshot wapSnapshot = Iterables.getOnlyElement(table.snapshots());\n\n    List<Object[]> output = sql(\n        \"CALL %s.system.set_current_snapshot(namespace => '%s', table => '%s', snapshot_id => %dL)\",\n        catalogName, tableIdent.namespace(), tableIdent.name(), wapSnapshot.snapshotId());\n\n    assertEquals(\"Procedure output must match\",\n        ImmutableList.of(row(null, wapSnapshot.snapshotId())),\n        output);\n\n    assertEquals(\"Current snapshot must be set correctly\",\n        ImmutableList.of(row(1L, \"a\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","date":"2020-11-14 09:06:15","endLine":139,"groupId":"1672","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetCurrentSnapshotWap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7b/8732562fba0c232819f104a8595196a925c14f.src","preCode":"  public void testSetCurrentSnapshotWap() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'true')\", tableName, WRITE_AUDIT_PUBLISH_ENABLED);\n\n    spark.conf().set(\"spark.wap.id\", \"1\");\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n\n    assertEquals(\"Should not see rows from staged snapshot\",\n        ImmutableList.of(),\n        sql(\"SELECT * FROM %s\", tableName));\n\n    Table table = validationCatalog.loadTable(tableIdent);\n    Snapshot wapSnapshot = Iterables.getOnlyElement(table.snapshots());\n\n    List<Object[]> output = sql(\n        \"CALL %s.system.set_current_snapshot(namespace => '%s', table => '%s', snapshot_id => %dL)\",\n        catalogName, tableIdent.namespace(), tableIdent.name(), wapSnapshot.snapshotId());\n\n    assertEquals(\"Procedure output must match\",\n        ImmutableList.of(row(null, wapSnapshot.snapshotId())),\n        output);\n\n    assertEquals(\"Current snapshot must be set correctly\",\n        ImmutableList.of(row(1L, \"a\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetCurrentSnapshotProcedure.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"2af5592eaf439f2044936de7960e202f694bfb98","commitMessage":"@@@Spark: Add SetCurrentSnapshotProcedure (#1770)\n\n","date":"2020-11-14 09:06:15","modifiedFileCount":"1","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2020-12-09 23:37:55","codes":[{"authorDate":"2020-12-09 23:37:55","commitOrder":3,"curCode":"  public void testCherrypickSnapshotUsingPositionalArgs() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'true')\", tableName, WRITE_AUDIT_PUBLISH_ENABLED);\n\n    spark.conf().set(\"spark.wap.id\", \"1\");\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n\n    assertEquals(\"Should not see rows from staged snapshot\",\n        ImmutableList.of(),\n        sql(\"SELECT * FROM %s\", tableName));\n\n    Table table = validationCatalog.loadTable(tableIdent);\n    Snapshot wapSnapshot = Iterables.getOnlyElement(table.snapshots());\n\n    List<Object[]> output = sql(\n        \"CALL %s.system.cherrypick_snapshot('%s', %dL)\",\n        catalogName, tableIdent, wapSnapshot.snapshotId());\n\n    table.refresh();\n\n    Snapshot currentSnapshot = table.currentSnapshot();\n\n    assertEquals(\"Procedure output must match\",\n        ImmutableList.of(row(wapSnapshot.snapshotId(), currentSnapshot.snapshotId())),\n        output);\n\n    assertEquals(\"Cherrypick must be successful\",\n        ImmutableList.of(row(1L, \"a\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","date":"2020-12-09 23:37:55","endLine":81,"groupId":"101145","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCherrypickSnapshotUsingPositionalArgs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ba/1c5db167477d4526c560b5f6a422f692c5cd46.src","preCode":"  public void testCherrypickSnapshotUsingPositionalArgs() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'true')\", tableName, WRITE_AUDIT_PUBLISH_ENABLED);\n\n    spark.conf().set(\"spark.wap.id\", \"1\");\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n\n    assertEquals(\"Should not see rows from staged snapshot\",\n        ImmutableList.of(),\n        sql(\"SELECT * FROM %s\", tableName));\n\n    Table table = validationCatalog.loadTable(tableIdent);\n    Snapshot wapSnapshot = Iterables.getOnlyElement(table.snapshots());\n\n    List<Object[]> output = sql(\n        \"CALL %s.system.cherrypick_snapshot('%s', '%s', %dL)\",\n        catalogName, tableIdent.namespace(), tableIdent.name(), wapSnapshot.snapshotId());\n\n    table.refresh();\n\n    Snapshot currentSnapshot = table.currentSnapshot();\n\n    assertEquals(\"Procedure output must match\",\n        ImmutableList.of(row(wapSnapshot.snapshotId(), currentSnapshot.snapshotId())),\n        output);\n\n    assertEquals(\"Cherrypick must be successful\",\n        ImmutableList.of(row(1L, \"a\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestCherrypickSnapshotProcedure.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-12-09 23:37:55","commitOrder":3,"curCode":"  public void testSetCurrentSnapshotWap() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'true')\", tableName, WRITE_AUDIT_PUBLISH_ENABLED);\n\n    spark.conf().set(\"spark.wap.id\", \"1\");\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n\n    assertEquals(\"Should not see rows from staged snapshot\",\n        ImmutableList.of(),\n        sql(\"SELECT * FROM %s\", tableName));\n\n    Table table = validationCatalog.loadTable(tableIdent);\n    Snapshot wapSnapshot = Iterables.getOnlyElement(table.snapshots());\n\n    List<Object[]> output = sql(\n        \"CALL %s.system.set_current_snapshot(table => '%s', snapshot_id => %dL)\",\n        catalogName, tableIdent, wapSnapshot.snapshotId());\n\n    assertEquals(\"Procedure output must match\",\n        ImmutableList.of(row(null, wapSnapshot.snapshotId())),\n        output);\n\n    assertEquals(\"Current snapshot must be set correctly\",\n        ImmutableList.of(row(1L, \"a\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","date":"2020-12-09 23:37:55","endLine":139,"groupId":"101145","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSetCurrentSnapshotWap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0e/a8c4861e8c4bd61fdd3a41f6aaee5dfba0ca3c.src","preCode":"  public void testSetCurrentSnapshotWap() {\n    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'true')\", tableName, WRITE_AUDIT_PUBLISH_ENABLED);\n\n    spark.conf().set(\"spark.wap.id\", \"1\");\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n\n    assertEquals(\"Should not see rows from staged snapshot\",\n        ImmutableList.of(),\n        sql(\"SELECT * FROM %s\", tableName));\n\n    Table table = validationCatalog.loadTable(tableIdent);\n    Snapshot wapSnapshot = Iterables.getOnlyElement(table.snapshots());\n\n    List<Object[]> output = sql(\n        \"CALL %s.system.set_current_snapshot(namespace => '%s', table => '%s', snapshot_id => %dL)\",\n        catalogName, tableIdent.namespace(), tableIdent.name(), wapSnapshot.snapshotId());\n\n    assertEquals(\"Procedure output must match\",\n        ImmutableList.of(row(null, wapSnapshot.snapshotId())),\n        output);\n\n    assertEquals(\"Current snapshot must be set correctly\",\n        ImmutableList.of(row(1L, \"a\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetCurrentSnapshotProcedure.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"e39584ed89356cacf006610bffd475a3ad3a1ac4","commitMessage":"@@@Spark: Migrate to identifiers in procedures (#1890)\n\n","date":"2020-12-09 23:37:55","modifiedFileCount":"16","status":"M","submitter":"Russell Spitzer"}]
