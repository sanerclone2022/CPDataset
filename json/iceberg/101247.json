[{"authorTime":"2019-11-01 03:58:05","codes":[{"authorDate":"2019-11-01 03:58:05","commitOrder":1,"curCode":"  public void testInPredicateBindingConversionToEq() {\n    StructType struct = StructType.of(required(14, \"x\", Types.IntegerType.get()));\n\n    UnboundPredicate<Long> unbound = Expressions.in(\"x\", 5L, Long.MAX_VALUE);\n\n    Expression.Operation op = unbound.op();\n    Assert.assertEquals(\"Should create an IN unbound predicate\", IN, op);\n\n    Expression expr = unbound.bind(struct);\n    BoundPredicate<Integer> bound = assertAndUnwrap(expr);\n\n    Assert.assertEquals(\"Should remove aboveMax literal value\",\n        Integer.valueOf(5), bound.literal().value());\n    Assert.assertEquals(\"Should reference correct field ID\", 14, bound.ref().fieldId());\n    Assert.assertEquals(\"Should change the IN operation to EQ\", EQ, bound.op());\n  }\n","date":"2019-11-01 03:58:05","endLine":380,"groupId":"2811","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInPredicateBindingConversionToEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/2a/ba3eadbd6fdca2522a3c242dbfa80a5bbf2c6c.src","preCode":"  public void testInPredicateBindingConversionToEq() {\n    StructType struct = StructType.of(required(14, \"x\", Types.IntegerType.get()));\n\n    UnboundPredicate<Long> unbound = Expressions.in(\"x\", 5L, Long.MAX_VALUE);\n\n    Expression.Operation op = unbound.op();\n    Assert.assertEquals(\"Should create an IN unbound predicate\", IN, op);\n\n    Expression expr = unbound.bind(struct);\n    BoundPredicate<Integer> bound = assertAndUnwrap(expr);\n\n    Assert.assertEquals(\"Should remove aboveMax literal value\",\n        Integer.valueOf(5), bound.literal().value());\n    Assert.assertEquals(\"Should reference correct field ID\", 14, bound.ref().fieldId());\n    Assert.assertEquals(\"Should change the IN operation to EQ\", EQ, bound.op());\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"B"},{"authorDate":"2019-11-01 03:58:05","commitOrder":1,"curCode":"  public void testInPredicateBindingConversionToExpression() {\n    StructType struct = StructType.of(required(14, \"x\", Types.IntegerType.get()));\n\n    UnboundPredicate<Long> unbound = Expressions.in(\"x\", Long.MAX_VALUE - 1, Long.MAX_VALUE);\n\n    Expression.Operation op = unbound.op();\n    Assert.assertEquals(\"Should create an IN predicate\", IN, op);\n\n    Expression expr = unbound.bind(struct);\n    Assert.assertEquals(\"Should change IN to alwaysFalse expression\", Expressions.alwaysFalse(), expr);\n  }\n","date":"2019-11-01 03:58:05","endLine":407,"groupId":"2811","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInPredicateBindingConversionToExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/2a/ba3eadbd6fdca2522a3c242dbfa80a5bbf2c6c.src","preCode":"  public void testInPredicateBindingConversionToExpression() {\n    StructType struct = StructType.of(required(14, \"x\", Types.IntegerType.get()));\n\n    UnboundPredicate<Long> unbound = Expressions.in(\"x\", Long.MAX_VALUE - 1, Long.MAX_VALUE);\n\n    Expression.Operation op = unbound.op();\n    Assert.assertEquals(\"Should create an IN predicate\", IN, op);\n\n    Expression expr = unbound.bind(struct);\n    Assert.assertEquals(\"Should change IN to alwaysFalse expression\", Expressions.alwaysFalse(), expr);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"B"}],"commitId":"860cdcf428b901ea546957187d517089924e0917","commitMessage":"@@@Add IN and NOT_IN predicates (#594)\n\n","date":"2019-11-01 03:58:05","modifiedFileCount":"17","status":"B","submitter":"jun-he"},{"authorTime":"2019-11-01 03:58:05","codes":[{"authorDate":"2019-11-21 01:58:39","commitOrder":2,"curCode":"  public void testInPredicateBindingConversionToEq() {\n    StructType struct = StructType.of(required(14, \"x\", Types.IntegerType.get()));\n\n    UnboundPredicate<Long> unbound = Expressions.in(\"x\", 5L, Long.MAX_VALUE);\n\n    Expression.Operation op = unbound.op();\n    Assert.assertEquals(\"Should create an IN unbound predicate\", IN, op);\n\n    Expression expr = unbound.bind(struct);\n    BoundPredicate<Integer> bound = assertAndUnwrap(expr);\n\n    Assert.assertTrue(\"Should be a literal predicate\", bound.isLiteralPredicate());\n    Assert.assertEquals(\"Should remove aboveMax literal value\",\n        Integer.valueOf(5), bound.asLiteralPredicate().literal().value());\n    Assert.assertEquals(\"Should reference correct field ID\", 14, bound.ref().fieldId());\n    Assert.assertEquals(\"Should change the IN operation to EQ\", EQ, bound.op());\n  }\n","date":"2019-11-21 01:58:39","endLine":393,"groupId":"101247","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInPredicateBindingConversionToEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/37/b90c15c3c78b2b86fc57a982e05e15c960d187.src","preCode":"  public void testInPredicateBindingConversionToEq() {\n    StructType struct = StructType.of(required(14, \"x\", Types.IntegerType.get()));\n\n    UnboundPredicate<Long> unbound = Expressions.in(\"x\", 5L, Long.MAX_VALUE);\n\n    Expression.Operation op = unbound.op();\n    Assert.assertEquals(\"Should create an IN unbound predicate\", IN, op);\n\n    Expression expr = unbound.bind(struct);\n    BoundPredicate<Integer> bound = assertAndUnwrap(expr);\n\n    Assert.assertEquals(\"Should remove aboveMax literal value\",\n        Integer.valueOf(5), bound.literal().value());\n    Assert.assertEquals(\"Should reference correct field ID\", 14, bound.ref().fieldId());\n    Assert.assertEquals(\"Should change the IN operation to EQ\", EQ, bound.op());\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":377,"status":"M"},{"authorDate":"2019-11-01 03:58:05","commitOrder":2,"curCode":"  public void testInPredicateBindingConversionToExpression() {\n    StructType struct = StructType.of(required(14, \"x\", Types.IntegerType.get()));\n\n    UnboundPredicate<Long> unbound = Expressions.in(\"x\", Long.MAX_VALUE - 1, Long.MAX_VALUE);\n\n    Expression.Operation op = unbound.op();\n    Assert.assertEquals(\"Should create an IN predicate\", IN, op);\n\n    Expression expr = unbound.bind(struct);\n    Assert.assertEquals(\"Should change IN to alwaysFalse expression\", Expressions.alwaysFalse(), expr);\n  }\n","date":"2019-11-01 03:58:05","endLine":407,"groupId":"101247","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInPredicateBindingConversionToExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/2a/ba3eadbd6fdca2522a3c242dbfa80a5bbf2c6c.src","preCode":"  public void testInPredicateBindingConversionToExpression() {\n    StructType struct = StructType.of(required(14, \"x\", Types.IntegerType.get()));\n\n    UnboundPredicate<Long> unbound = Expressions.in(\"x\", Long.MAX_VALUE - 1, Long.MAX_VALUE);\n\n    Expression.Operation op = unbound.op();\n    Assert.assertEquals(\"Should create an IN predicate\", IN, op);\n\n    Expression expr = unbound.bind(struct);\n    Assert.assertEquals(\"Should change IN to alwaysFalse expression\", Expressions.alwaysFalse(), expr);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestPredicateBinding.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"N"}],"commitId":"94fdc7321407c22b143b9eab83d29179d12d1a6d","commitMessage":"@@@Refactor in and notIn expressions (#650)\n\n* Make BoundSetPredicate extend BoundPredicate\n* Remove visitor method for BoundSetPredicate\n* Add BoundUnaryPredicate\n* Add BoundPredicate subclass test and cast methods\n* Replace LiteralSet and CharSeqLiteralSet with CharSequenceSet\n* Implement all Set methods in CharSequenceSet","date":"2019-11-21 01:58:39","modifiedFileCount":"19","status":"M","submitter":"Ryan Blue"}]
