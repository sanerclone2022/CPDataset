[{"authorTime":"2019-06-28 12:50:43","codes":[{"authorDate":"2019-12-31 01:50:00","commitOrder":3,"curCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n      model.setRowGroupInfo(pages, columnChunkMetadata.get(nextRowGroup));\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n    }\n","date":"2019-12-31 01:50:00","endLine":143,"groupId":"5051","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"advance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/58/5f99522f4c18073bd352719d50b9d586a46a4f.src","preCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n      model.setRowGroupInfo(pages, columnChunkMetadata.get(nextRowGroup));\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/VectorizedParquetReader.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"},{"authorDate":"2019-06-28 12:50:43","commitOrder":3,"curCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n\n      model.setPageSource(pages);\n    }\n","date":"2019-06-28 12:50:43","endLine":251,"groupId":"5051","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"advance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/2f/f2bdb441e833c4a1db2c28a32d2547ebc32e03.src","preCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n\n      model.setPageSource(pages);\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ParquetReader.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"NB"}],"commitId":"3c88ef1d89800dde9edb61e59b851e64ffef0f33","commitMessage":"@@@Vectorization: Parquet additions to support batch reads (#710)\n\nCo-authored-by: gautamkowshik@gmail.com\nCo-authored-by: anjalinorwood@gmail.com","date":"2019-12-31 01:50:00","modifiedFileCount":"4","status":"M","submitter":"Samarth Jain"},{"authorTime":"2020-07-31 09:13:43","codes":[{"authorDate":"2019-12-31 01:50:00","commitOrder":4,"curCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n      model.setRowGroupInfo(pages, columnChunkMetadata.get(nextRowGroup));\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n    }\n","date":"2019-12-31 01:50:00","endLine":143,"groupId":"5051","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"advance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/58/5f99522f4c18073bd352719d50b9d586a46a4f.src","preCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n      model.setRowGroupInfo(pages, columnChunkMetadata.get(nextRowGroup));\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/VectorizedParquetReader.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"},{"authorDate":"2020-07-31 09:13:43","commitOrder":4,"curCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n\n      long rowPosition = rowGroupsStartRowPos[nextRowGroup];\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n\n      model.setPageSource(pages, rowPosition);\n    }\n","date":"2020-07-31 09:13:43","endLine":143,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"advance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/29/e980def260463b2299caa88c2bd09da9cc3f5e.src","preCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n\n      model.setPageSource(pages);\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ParquetReader.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"7060c928390c59e24dc207ec86f99132f6c1a828","commitMessage":"@@@Parquet: Add row position reader (#1254)\n\n","date":"2020-07-31 09:13:43","modifiedFileCount":"6","status":"M","submitter":"Chen Junjie"},{"authorTime":"2020-07-31 09:13:43","codes":[{"authorDate":"2020-12-19 02:39:19","commitOrder":5,"curCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n\n      long rowPosition = rowGroupsStartRowPos[nextRowGroup];\n      model.setRowGroupInfo(pages, columnChunkMetadata.get(nextRowGroup), rowPosition);\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n    }\n","date":"2020-12-19 02:39:19","endLine":159,"groupId":"10115","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"advance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d3/e08480c5008b7a069842a6b816257d655fe1a7.src","preCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n      model.setRowGroupInfo(pages, columnChunkMetadata.get(nextRowGroup));\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/VectorizedParquetReader.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2020-07-31 09:13:43","commitOrder":5,"curCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n\n      long rowPosition = rowGroupsStartRowPos[nextRowGroup];\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n\n      model.setPageSource(pages, rowPosition);\n    }\n","date":"2020-07-31 09:13:43","endLine":143,"groupId":"10115","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"advance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/29/e980def260463b2299caa88c2bd09da9cc3f5e.src","preCode":"    private void advance() {\n      while (shouldSkip[nextRowGroup]) {\n        nextRowGroup += 1;\n        reader.skipNextRowGroup();\n      }\n\n      PageReadStore pages;\n      try {\n        pages = reader.readNextRowGroup();\n      } catch (IOException e) {\n        throw new RuntimeIOException(e);\n      }\n\n      long rowPosition = rowGroupsStartRowPos[nextRowGroup];\n      nextRowGroupStart += pages.getRowCount();\n      nextRowGroup += 1;\n\n      model.setPageSource(pages, rowPosition);\n    }\n","realPath":"parquet/src/main/java/org/apache/iceberg/parquet/ParquetReader.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"}],"commitId":"63790502b37e3a620b608e13597dd434519565c7","commitMessage":"@@@Parquet: Add vectorized position reader (#1356)\n\n","date":"2020-12-19 02:39:19","modifiedFileCount":"8","status":"M","submitter":"Chen Junjie"}]
