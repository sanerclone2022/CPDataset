[{"authorTime":"2020-08-29 01:19:33","codes":[{"authorDate":"2020-08-29 01:19:33","commitOrder":1,"curCode":"  public void testWritingTable() throws Exception {\n    long checkpointId = 1L;\n    try (OneInputStreamOperatorTestHarness<RowData, DataFile> testHarness = createIcebergStreamWriter()) {\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(3, \"hello\"), 1);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      long expectedDataFiles = partitioned ? 2 : 1;\n      Assert.assertEquals(expectedDataFiles, testHarness.extractOutputValues().size());\n\n      checkpointId = checkpointId + 1;\n\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(4, \"foo\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(5, \"bar\"), 2);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      expectedDataFiles = partitioned ? 4 : 2;\n      Assert.assertEquals(expectedDataFiles, testHarness.extractOutputValues().size());\n\n      \r\n      AppendFiles appendFiles = table.newAppend();\n      testHarness.extractOutputValues().forEach(appendFiles::appendFile);\n      appendFiles.commit();\n\n      \r\n      SimpleDataUtil.assertTableRecords(tablePath, Lists.newArrayList(\n          SimpleDataUtil.createRecord(1, \"hello\"),\n          SimpleDataUtil.createRecord(2, \"world\"),\n          SimpleDataUtil.createRecord(3, \"hello\"),\n          SimpleDataUtil.createRecord(4, \"foo\"),\n          SimpleDataUtil.createRecord(5, \"bar\")\n      ));\n    }\n  }\n","date":"2020-08-29 01:19:33","endLine":138,"groupId":"1538","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWritingTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f4/e10d56c330b5500071e1523280ed9c3fe81931.src","preCode":"  public void testWritingTable() throws Exception {\n    long checkpointId = 1L;\n    try (OneInputStreamOperatorTestHarness<RowData, DataFile> testHarness = createIcebergStreamWriter()) {\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(3, \"hello\"), 1);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      long expectedDataFiles = partitioned ? 2 : 1;\n      Assert.assertEquals(expectedDataFiles, testHarness.extractOutputValues().size());\n\n      checkpointId = checkpointId + 1;\n\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(4, \"foo\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(5, \"bar\"), 2);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      expectedDataFiles = partitioned ? 4 : 2;\n      Assert.assertEquals(expectedDataFiles, testHarness.extractOutputValues().size());\n\n      \r\n      AppendFiles appendFiles = table.newAppend();\n      testHarness.extractOutputValues().forEach(appendFiles::appendFile);\n      appendFiles.commit();\n\n      \r\n      SimpleDataUtil.assertTableRecords(tablePath, Lists.newArrayList(\n          SimpleDataUtil.createRecord(1, \"hello\"),\n          SimpleDataUtil.createRecord(2, \"world\"),\n          SimpleDataUtil.createRecord(3, \"hello\"),\n          SimpleDataUtil.createRecord(4, \"foo\"),\n          SimpleDataUtil.createRecord(5, \"bar\")\n      ));\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2020-08-29 01:19:33","commitOrder":1,"curCode":"  public void testBoundedStreamCloseWithEmittingDataFiles() throws Exception {\n    try (OneInputStreamOperatorTestHarness<RowData, DataFile> testHarness = createIcebergStreamWriter()) {\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 2);\n\n      Assert.assertTrue(testHarness.getOneInputOperator() instanceof BoundedOneInput);\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n\n      long expectedDataFiles = partitioned ? 2 : 1;\n      Assert.assertEquals(expectedDataFiles, testHarness.extractOutputValues().size());\n\n      \r\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n      Assert.assertEquals(expectedDataFiles * 2, testHarness.extractOutputValues().size());\n    }\n  }\n","date":"2020-08-29 01:19:33","endLine":214,"groupId":"1496","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoundedStreamCloseWithEmittingDataFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f4/e10d56c330b5500071e1523280ed9c3fe81931.src","preCode":"  public void testBoundedStreamCloseWithEmittingDataFiles() throws Exception {\n    try (OneInputStreamOperatorTestHarness<RowData, DataFile> testHarness = createIcebergStreamWriter()) {\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 2);\n\n      Assert.assertTrue(testHarness.getOneInputOperator() instanceof BoundedOneInput);\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n\n      long expectedDataFiles = partitioned ? 2 : 1;\n      Assert.assertEquals(expectedDataFiles, testHarness.extractOutputValues().size());\n\n      \r\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n      Assert.assertEquals(expectedDataFiles * 2, testHarness.extractOutputValues().size());\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"}],"commitId":"f950a3e63c98e88b1f8905faacf33a1d5d31e4c0","commitMessage":"@@@Flink: Add operator to collect data files and append to a table (#1185)\n\n","date":"2020-08-29 01:19:33","modifiedFileCount":"2","status":"B","submitter":"openinx"},{"authorTime":"2020-12-19 01:57:04","codes":[{"authorDate":"2020-12-19 01:57:04","commitOrder":2,"curCode":"  public void testWritingTable() throws Exception {\n    long checkpointId = 1L;\n    try (OneInputStreamOperatorTestHarness<RowData, WriteResult> testHarness = createIcebergStreamWriter()) {\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(3, \"hello\"), 1);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      long expectedDataFiles = partitioned ? 2 : 1;\n      WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles, result.dataFiles().length);\n\n      checkpointId = checkpointId + 1;\n\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(4, \"foo\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(5, \"bar\"), 2);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      expectedDataFiles = partitioned ? 4 : 2;\n      result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles, result.dataFiles().length);\n\n      \r\n      AppendFiles appendFiles = table.newAppend();\n      Arrays.stream(result.dataFiles()).forEach(appendFiles::appendFile);\n      appendFiles.commit();\n\n      \r\n      SimpleDataUtil.assertTableRecords(tablePath, Lists.newArrayList(\n          SimpleDataUtil.createRecord(1, \"hello\"),\n          SimpleDataUtil.createRecord(2, \"world\"),\n          SimpleDataUtil.createRecord(3, \"hello\"),\n          SimpleDataUtil.createRecord(4, \"foo\"),\n          SimpleDataUtil.createRecord(5, \"bar\")\n      ));\n    }\n  }\n","date":"2020-12-19 01:57:04","endLine":144,"groupId":"1538","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWritingTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/28/db89456f7e510f35030829765640f84f560de1.src","preCode":"  public void testWritingTable() throws Exception {\n    long checkpointId = 1L;\n    try (OneInputStreamOperatorTestHarness<RowData, DataFile> testHarness = createIcebergStreamWriter()) {\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(3, \"hello\"), 1);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      long expectedDataFiles = partitioned ? 2 : 1;\n      Assert.assertEquals(expectedDataFiles, testHarness.extractOutputValues().size());\n\n      checkpointId = checkpointId + 1;\n\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(4, \"foo\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(5, \"bar\"), 2);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      expectedDataFiles = partitioned ? 4 : 2;\n      Assert.assertEquals(expectedDataFiles, testHarness.extractOutputValues().size());\n\n      \r\n      AppendFiles appendFiles = table.newAppend();\n      testHarness.extractOutputValues().forEach(appendFiles::appendFile);\n      appendFiles.commit();\n\n      \r\n      SimpleDataUtil.assertTableRecords(tablePath, Lists.newArrayList(\n          SimpleDataUtil.createRecord(1, \"hello\"),\n          SimpleDataUtil.createRecord(2, \"world\"),\n          SimpleDataUtil.createRecord(3, \"hello\"),\n          SimpleDataUtil.createRecord(4, \"foo\"),\n          SimpleDataUtil.createRecord(5, \"bar\")\n      ));\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2020-12-19 01:57:04","commitOrder":2,"curCode":"  public void testBoundedStreamCloseWithEmittingDataFiles() throws Exception {\n    try (OneInputStreamOperatorTestHarness<RowData, WriteResult> testHarness = createIcebergStreamWriter()) {\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 2);\n\n      Assert.assertTrue(testHarness.getOneInputOperator() instanceof BoundedOneInput);\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n\n      long expectedDataFiles = partitioned ? 2 : 1;\n      WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles, result.dataFiles().length);\n\n      \r\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n\n      result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles * 2, result.dataFiles().length);\n    }\n  }\n","date":"2020-12-19 01:57:04","endLine":230,"groupId":"674","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoundedStreamCloseWithEmittingDataFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/28/db89456f7e510f35030829765640f84f560de1.src","preCode":"  public void testBoundedStreamCloseWithEmittingDataFiles() throws Exception {\n    try (OneInputStreamOperatorTestHarness<RowData, DataFile> testHarness = createIcebergStreamWriter()) {\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 2);\n\n      Assert.assertTrue(testHarness.getOneInputOperator() instanceof BoundedOneInput);\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n\n      long expectedDataFiles = partitioned ? 2 : 1;\n      Assert.assertEquals(expectedDataFiles, testHarness.extractOutputValues().size());\n\n      \r\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n      Assert.assertEquals(expectedDataFiles * 2, testHarness.extractOutputValues().size());\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"77c5617c102c2ab27fbf35cac3fd75380a887d5d","commitMessage":"@@@Flink: Commit both data files and delete files (#1939)\n\n","date":"2020-12-19 01:57:04","modifiedFileCount":"9","status":"M","submitter":"openinx"},{"authorTime":"2021-07-19 18:57:09","codes":[{"authorDate":"2020-12-19 01:57:04","commitOrder":3,"curCode":"  public void testWritingTable() throws Exception {\n    long checkpointId = 1L;\n    try (OneInputStreamOperatorTestHarness<RowData, WriteResult> testHarness = createIcebergStreamWriter()) {\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(3, \"hello\"), 1);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      long expectedDataFiles = partitioned ? 2 : 1;\n      WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles, result.dataFiles().length);\n\n      checkpointId = checkpointId + 1;\n\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(4, \"foo\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(5, \"bar\"), 2);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      expectedDataFiles = partitioned ? 4 : 2;\n      result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles, result.dataFiles().length);\n\n      \r\n      AppendFiles appendFiles = table.newAppend();\n      Arrays.stream(result.dataFiles()).forEach(appendFiles::appendFile);\n      appendFiles.commit();\n\n      \r\n      SimpleDataUtil.assertTableRecords(tablePath, Lists.newArrayList(\n          SimpleDataUtil.createRecord(1, \"hello\"),\n          SimpleDataUtil.createRecord(2, \"world\"),\n          SimpleDataUtil.createRecord(3, \"hello\"),\n          SimpleDataUtil.createRecord(4, \"foo\"),\n          SimpleDataUtil.createRecord(5, \"bar\")\n      ));\n    }\n  }\n","date":"2020-12-19 01:57:04","endLine":144,"groupId":"102220","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWritingTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/28/db89456f7e510f35030829765640f84f560de1.src","preCode":"  public void testWritingTable() throws Exception {\n    long checkpointId = 1L;\n    try (OneInputStreamOperatorTestHarness<RowData, WriteResult> testHarness = createIcebergStreamWriter()) {\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(3, \"hello\"), 1);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      long expectedDataFiles = partitioned ? 2 : 1;\n      WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles, result.dataFiles().length);\n\n      checkpointId = checkpointId + 1;\n\n      \r\n      testHarness.processElement(SimpleDataUtil.createRowData(4, \"foo\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(5, \"bar\"), 2);\n\n      testHarness.prepareSnapshotPreBarrier(checkpointId);\n      expectedDataFiles = partitioned ? 4 : 2;\n      result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles, result.dataFiles().length);\n\n      \r\n      AppendFiles appendFiles = table.newAppend();\n      Arrays.stream(result.dataFiles()).forEach(appendFiles::appendFile);\n      appendFiles.commit();\n\n      \r\n      SimpleDataUtil.assertTableRecords(tablePath, Lists.newArrayList(\n          SimpleDataUtil.createRecord(1, \"hello\"),\n          SimpleDataUtil.createRecord(2, \"world\"),\n          SimpleDataUtil.createRecord(3, \"hello\"),\n          SimpleDataUtil.createRecord(4, \"foo\"),\n          SimpleDataUtil.createRecord(5, \"bar\")\n      ));\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"},{"authorDate":"2021-07-19 18:57:09","commitOrder":3,"curCode":"  public void testBoundedStreamCloseWithEmittingDataFiles() throws Exception {\n    try (OneInputStreamOperatorTestHarness<RowData, WriteResult> testHarness = createIcebergStreamWriter()) {\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 2);\n\n      Assertions.assertThat(testHarness.getOneInputOperator()).isInstanceOf(BoundedOneInput.class);\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n\n      long expectedDataFiles = partitioned ? 2 : 1;\n      WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles, result.dataFiles().length);\n\n      \r\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n\n      result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles * 2, result.dataFiles().length);\n    }\n  }\n","date":"2021-07-19 18:57:09","endLine":232,"groupId":"102220","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoundedStreamCloseWithEmittingDataFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e5/ffd01042c31d57e434f8aa35e48b74842e909e.src","preCode":"  public void testBoundedStreamCloseWithEmittingDataFiles() throws Exception {\n    try (OneInputStreamOperatorTestHarness<RowData, WriteResult> testHarness = createIcebergStreamWriter()) {\n      testHarness.processElement(SimpleDataUtil.createRowData(1, \"hello\"), 1);\n      testHarness.processElement(SimpleDataUtil.createRowData(2, \"world\"), 2);\n\n      Assert.assertTrue(testHarness.getOneInputOperator() instanceof BoundedOneInput);\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n\n      long expectedDataFiles = partitioned ? 2 : 1;\n      WriteResult result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles, result.dataFiles().length);\n\n      \r\n      ((BoundedOneInput) testHarness.getOneInputOperator()).endInput();\n\n      result = WriteResult.builder().addAll(testHarness.extractOutputValues()).build();\n      Assert.assertEquals(0, result.deleteFiles().length);\n      Assert.assertEquals(expectedDataFiles * 2, result.dataFiles().length);\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"}],"commitId":"0055e855ccabbd6a592b3b49e1f38131f62e0fdd","commitMessage":"@@@Move Assert.assertTrue(..) instance checks to AssertJ assertions (#2756)\n\n","date":"2021-07-19 18:57:09","modifiedFileCount":"25","status":"M","submitter":"Eduard Tudenh?fner"}]
