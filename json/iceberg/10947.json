[{"authorTime":"2020-06-03 06:25:44","codes":[{"authorDate":"2020-06-03 06:25:44","commitOrder":1,"curCode":"  private static Optional<ByteBuffer> fromOrcMin(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = Optional.ofNullable(((DateColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> DateTimeUtil.daysFromDate(\n              DateTimeUtil.EPOCH.plus(minStats.getTime(), ChronoUnit.MILLIS).toLocalDate()))\n          .orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), min));\n  }\n","date":"2020-06-03 06:25:44","endLine":175,"groupId":"1080","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromOrcMin","params":"(Types.NestedFieldcolumn@ColumnStatisticscolumnStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a5/bcc2f8b1613c5a74159e8b38e7179d7a7970a6.src","preCode":"  private static Optional<ByteBuffer> fromOrcMin(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = Optional.ofNullable(((DateColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> DateTimeUtil.daysFromDate(\n              DateTimeUtil.EPOCH.plus(minStats.getTime(), ChronoUnit.MILLIS).toLocalDate()))\n          .orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), min));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"},{"authorDate":"2020-06-03 06:25:44","commitOrder":1,"curCode":"  private static Optional<ByteBuffer> fromOrcMax(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = Optional.ofNullable(((DateColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> DateTimeUtil.daysFromDate(\n              DateTimeUtil.EPOCH.plus(maxStats.getTime(), ChronoUnit.MILLIS).toLocalDate()))\n          .orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .map(v -> v + 1_000) \r\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), max));\n  }\n","date":"2020-06-03 06:25:44","endLine":215,"groupId":"4871","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fromOrcMax","params":"(Types.NestedFieldcolumn@ColumnStatisticscolumnStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a5/bcc2f8b1613c5a74159e8b38e7179d7a7970a6.src","preCode":"  private static Optional<ByteBuffer> fromOrcMax(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = Optional.ofNullable(((DateColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> DateTimeUtil.daysFromDate(\n              DateTimeUtil.EPOCH.plus(maxStats.getTime(), ChronoUnit.MILLIS).toLocalDate()))\n          .orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .map(v -> v + 1_000) \r\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), max));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"260bfa0a33aebc25d07e9a3add46fb7ba0eeca43","commitMessage":"@@@ORC: Support metrics in Iceberg metadata (#199)\n\n","date":"2020-06-03 06:25:44","modifiedFileCount":"6","status":"B","submitter":"Edgar Rodriguez"},{"authorTime":"2020-06-28 04:42:10","codes":[{"authorDate":"2020-06-28 04:42:10","commitOrder":2,"curCode":"  private static Optional<ByteBuffer> fromOrcMin(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = Optional.ofNullable(minDayFromEpoch((DateColumnStatistics) columnStats)).orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), min));\n  }\n","date":"2020-06-28 04:42:10","endLine":173,"groupId":"1080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fromOrcMin","params":"(Types.NestedFieldcolumn@ColumnStatisticscolumnStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/86/b76972a34685dcb2915949acb0cec6e0cc3ed1.src","preCode":"  private static Optional<ByteBuffer> fromOrcMin(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = Optional.ofNullable(((DateColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> DateTimeUtil.daysFromDate(\n              DateTimeUtil.EPOCH.plus(minStats.getTime(), ChronoUnit.MILLIS).toLocalDate()))\n          .orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), min));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2020-06-28 04:42:10","commitOrder":2,"curCode":"  private static Optional<ByteBuffer> fromOrcMax(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = Optional.ofNullable(maxDayFromEpoch((DateColumnStatistics) columnStats)).orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .map(v -> v + 1_000) \r\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), max));\n  }\n","date":"2020-06-28 04:42:10","endLine":210,"groupId":"4871","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fromOrcMax","params":"(Types.NestedFieldcolumn@ColumnStatisticscolumnStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/86/b76972a34685dcb2915949acb0cec6e0cc3ed1.src","preCode":"  private static Optional<ByteBuffer> fromOrcMax(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = Optional.ofNullable(((DateColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> DateTimeUtil.daysFromDate(\n              DateTimeUtil.EPOCH.plus(maxStats.getTime(), ChronoUnit.MILLIS).toLocalDate()))\n          .orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .map(v -> v + 1_000) \r\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), max));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"4e282c3d13936592e0d27a92356de1c57aa58ce1","commitMessage":"@@@ORC: Fix date metrics (#1127)\n\n","date":"2020-06-28 04:42:10","modifiedFileCount":"4","status":"M","submitter":"Edgar Rodriguez"},{"authorTime":"2020-08-25 08:36:31","codes":[{"authorDate":"2020-08-25 08:36:31","commitOrder":3,"curCode":"  private static Optional<ByteBuffer> fromOrcMin(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = Optional.ofNullable(minDayFromEpoch((DateColumnStatistics) columnStats)).orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.LOWER, type, min, metricsMode)));\n  }\n","date":"2020-08-25 08:36:31","endLine":193,"groupId":"1080","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fromOrcMin","params":"(Typetype@ColumnStatisticscolumnStats@MetricsModemetricsMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/0c9cc2787e2cd18fa52815b2ec19944e6c1099.src","preCode":"  private static Optional<ByteBuffer> fromOrcMin(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = Optional.ofNullable(minDayFromEpoch((DateColumnStatistics) columnStats)).orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), min));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-08-25 08:36:31","commitOrder":3,"curCode":"  private static Optional<ByteBuffer> fromOrcMax(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = Optional.ofNullable(maxDayFromEpoch((DateColumnStatistics) columnStats)).orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .map(v -> v + 1_000) \r\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.UPPER, type, max, metricsMode)));\n  }\n","date":"2020-08-25 08:36:31","endLine":230,"groupId":"4871","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fromOrcMax","params":"(Typetype@ColumnStatisticscolumnStats@MetricsModemetricsMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/0c9cc2787e2cd18fa52815b2ec19944e6c1099.src","preCode":"  private static Optional<ByteBuffer> fromOrcMax(Types.NestedField column,\n                                                 ColumnStatistics columnStats) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (column.type().typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) column.type()).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = Optional.ofNullable(maxDayFromEpoch((DateColumnStatistics) columnStats)).orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .map(v -> v + 1_000) \r\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(column.type(), max));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"6e2692c02bc79e1cfc40d03a9703776d9e92d2a0","commitMessage":"@@@ORC: Respect MetricsConfig when extracting file metrics (#1339)\n\n","date":"2020-08-25 08:36:31","modifiedFileCount":"8","status":"M","submitter":"Edgar Rodriguez"},{"authorTime":"2020-10-14 00:32:19","codes":[{"authorDate":"2020-10-14 00:32:19","commitOrder":4,"curCode":"  private static Optional<ByteBuffer> fromOrcMin(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = (int) ((DateColumnStatistics) columnStats).getMinimumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.LOWER, type, min, metricsMode)));\n  }\n","date":"2020-10-14 00:32:19","endLine":209,"groupId":"1080","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fromOrcMin","params":"(Typetype@ColumnStatisticscolumnStats@MetricsModemetricsMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a1/5bac8e4992dd202c39d102ed51fb4879fd0e37.src","preCode":"  private static Optional<ByteBuffer> fromOrcMin(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = Optional.ofNullable(minDayFromEpoch((DateColumnStatistics) columnStats)).orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.LOWER, type, min, metricsMode)));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2020-10-14 00:32:19","commitOrder":4,"curCode":"  private static Optional<ByteBuffer> fromOrcMax(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = (int) ((DateColumnStatistics) columnStats).getMaximumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .map(v -> v + 1_000) \r\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.UPPER, type, max, metricsMode)));\n  }\n","date":"2020-10-14 00:32:19","endLine":246,"groupId":"2924","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"fromOrcMax","params":"(Typetype@ColumnStatisticscolumnStats@MetricsModemetricsMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a1/5bac8e4992dd202c39d102ed51fb4879fd0e37.src","preCode":"  private static Optional<ByteBuffer> fromOrcMax(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = Optional.ofNullable(maxDayFromEpoch((DateColumnStatistics) columnStats)).orElse(null);\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .map(v -> v + 1_000) \r\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.UPPER, type, max, metricsMode)));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"759510e8387a55edddd151a4f7d495db5c57dc18","commitMessage":"@@@ORC: Remove workarounds after 1.6.5 upgrade (#1561)\n\n","date":"2020-10-14 00:32:19","modifiedFileCount":"2","status":"M","submitter":"Shardul Mahadik"},{"authorTime":"2020-11-02 03:27:53","codes":[{"authorDate":"2020-11-02 03:27:53","commitOrder":5,"curCode":"  private static Optional<ByteBuffer> fromOrcMin(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = (int) ((DateColumnStatistics) columnStats).getMinimumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> DateTimeUtil.microsFromInstant(v.toInstant()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.LOWER, type, min, metricsMode)));\n  }\n","date":"2020-11-02 03:27:53","endLine":209,"groupId":"1080","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"fromOrcMin","params":"(Typetype@ColumnStatisticscolumnStats@MetricsModemetricsMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/aa/cd621cd3bb3e4e996cc9bdaac10609f8663e56.src","preCode":"  private static Optional<ByteBuffer> fromOrcMin(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = (int) ((DateColumnStatistics) columnStats).getMinimumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.LOWER, type, min, metricsMode)));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2020-11-02 03:27:53","commitOrder":5,"curCode":"  private static Optional<ByteBuffer> fromOrcMax(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = (int) ((DateColumnStatistics) columnStats).getMaximumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> DateTimeUtil.microsFromInstant(v.toInstant()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.UPPER, type, max, metricsMode)));\n  }\n","date":"2020-11-02 03:27:53","endLine":245,"groupId":"2924","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"fromOrcMax","params":"(Typetype@ColumnStatisticscolumnStats@MetricsModemetricsMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/aa/cd621cd3bb3e4e996cc9bdaac10609f8663e56.src","preCode":"  private static Optional<ByteBuffer> fromOrcMax(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = (int) ((DateColumnStatistics) columnStats).getMaximumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> TimeUnit.MILLISECONDS.toMicros(v.getTime()))\n          .map(v -> v + 1_000) \r\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.UPPER, type, max, metricsMode)));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"29915e3522f9a808420a2e16fb1c2cf3ae165a74","commitMessage":"@@@ORC: Enable predicate pushdown and remove metrics workaround for Timestamps (#1696)\n\n","date":"2020-11-02 03:27:53","modifiedFileCount":"5","status":"M","submitter":"Shardul Mahadik"},{"authorTime":"2021-06-25 06:58:29","codes":[{"authorDate":"2021-06-25 06:58:29","commitOrder":6,"curCode":"  private static Optional<ByteBuffer> fromOrcMin(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode, FieldMetrics<?> fieldMetrics) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      \r\n      \r\n      Preconditions.checkNotNull(fieldMetrics,\n          \"[BUG] Float or double type columns should have metrics being tracked by Iceberg Orc writers\");\n      min = fieldMetrics.lowerBound();\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = (int) ((DateColumnStatistics) columnStats).getMinimumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> DateTimeUtil.microsFromInstant(v.toInstant()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.LOWER, type, min, metricsMode)));\n  }\n","date":"2021-06-25 06:58:29","endLine":226,"groupId":"10947","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"fromOrcMin","params":"(Typetype@ColumnStatisticscolumnStats@MetricsModemetricsMode@FieldMetrics<?>fieldMetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/ad4dae139e788b06fb3bc9db0e181f9f5a3810.src","preCode":"  private static Optional<ByteBuffer> fromOrcMin(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object min = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      min = ((IntegerColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        min = Math.toIntExact((long) min);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      min = ((DoubleColumnStatistics) columnStats).getMinimum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        min = ((Double) min).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      min = ((StringColumnStatistics) columnStats).getMinimum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      min = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMinimum())\n          .map(minStats -> minStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      min = (int) ((DateColumnStatistics) columnStats).getMinimumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp minValue = tColStats.getMinimumUTC();\n      min = Optional.ofNullable(minValue)\n          .map(v -> DateTimeUtil.microsFromInstant(v.toInstant()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      min = booleanStats.getFalseCount() <= 0;\n    }\n\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.LOWER, type, min, metricsMode)));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2021-06-25 06:58:29","commitOrder":6,"curCode":"  private static Optional<ByteBuffer> fromOrcMax(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode, FieldMetrics<?> fieldMetrics) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      \r\n      \r\n      Preconditions.checkNotNull(fieldMetrics,\n          \"[BUG] Float or double type columns should have metrics being tracked by Iceberg Orc writers\");\n      max = fieldMetrics.upperBound();\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = (int) ((DateColumnStatistics) columnStats).getMaximumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> DateTimeUtil.microsFromInstant(v.toInstant()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.UPPER, type, max, metricsMode)));\n  }\n","date":"2021-06-25 06:58:29","endLine":263,"groupId":"10947","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"fromOrcMax","params":"(Typetype@ColumnStatisticscolumnStats@MetricsModemetricsMode@FieldMetrics<?>fieldMetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/ad4dae139e788b06fb3bc9db0e181f9f5a3810.src","preCode":"  private static Optional<ByteBuffer> fromOrcMax(Type type, ColumnStatistics columnStats,\n                                                 MetricsMode metricsMode) {\n    Object max = null;\n    if (columnStats instanceof IntegerColumnStatistics) {\n      max = ((IntegerColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.INTEGER) {\n        max = Math.toIntExact((long) max);\n      }\n    } else if (columnStats instanceof DoubleColumnStatistics) {\n      max = ((DoubleColumnStatistics) columnStats).getMaximum();\n      if (type.typeId() == Type.TypeID.FLOAT) {\n        max = ((Double) max).floatValue();\n      }\n    } else if (columnStats instanceof StringColumnStatistics) {\n      max = ((StringColumnStatistics) columnStats).getMaximum();\n    } else if (columnStats instanceof DecimalColumnStatistics) {\n      max = Optional\n          .ofNullable(((DecimalColumnStatistics) columnStats).getMaximum())\n          .map(maxStats -> maxStats.bigDecimalValue()\n              .setScale(((Types.DecimalType) type).scale()))\n          .orElse(null);\n    } else if (columnStats instanceof DateColumnStatistics) {\n      max = (int) ((DateColumnStatistics) columnStats).getMaximumDayOfEpoch();\n    } else if (columnStats instanceof TimestampColumnStatistics) {\n      TimestampColumnStatistics tColStats = (TimestampColumnStatistics) columnStats;\n      Timestamp maxValue = tColStats.getMaximumUTC();\n      max = Optional.ofNullable(maxValue)\n          .map(v -> DateTimeUtil.microsFromInstant(v.toInstant()))\n          .orElse(null);\n    } else if (columnStats instanceof BooleanColumnStatistics) {\n      BooleanColumnStatistics booleanStats = (BooleanColumnStatistics) columnStats;\n      max = booleanStats.getTrueCount() > 0;\n    }\n    return Optional.ofNullable(Conversions.toByteBuffer(type, truncateIfNeeded(Bound.UPPER, type, max, metricsMode)));\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"2e4684740b56f6d80328f50b7e7fef0863c262e7","commitMessage":"@@@Core: Fix float and double metrics for Parquet and ORC (#2464)\n\nThis replaces the metrics from Parquet and ORC with metrics that are accumulated by Iceberg writers to ensure that the metrics do not include NaN values.","date":"2021-06-25 06:58:29","modifiedFileCount":"18","status":"M","submitter":"yyanyy"}]
