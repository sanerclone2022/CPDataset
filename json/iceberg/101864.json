[{"authorTime":"2019-11-21 01:48:39","codes":[{"authorDate":"2019-11-21 01:48:39","commitOrder":2,"curCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get()),\n        Types.NestedField.required(2, \"y\", Types.LongType.get()),\n        Types.NestedField.required(3, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5).build();\n\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), spec.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), spec.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, UUID.randomUUID().toString(), \"s3://bucket/test/location\",\n        System.currentTimeMillis(), 3, schema, 5, ImmutableList.of(spec),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","date":"2019-11-21 01:48:39","endLine":318,"groupId":"1321","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonWithPreviousMetadataLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c2/603f2613e5cbe02c971208b7398e0c03760272.src","preCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get()),\n        Types.NestedField.required(2, \"y\", Types.LongType.get()),\n        Types.NestedField.required(3, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5).build();\n\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), spec.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), spec.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, UUID.randomUUID().toString(), \"s3://bucket/test/location\",\n        System.currentTimeMillis(), 3, schema, 5, ImmutableList.of(spec),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"MB"},{"authorDate":"2019-11-21 01:48:39","commitOrder":2,"curCode":"  public void testAddPreviousMetadataRemoveMultiple() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get()),\n        Types.NestedField.required(2, \"y\", Types.LongType.get()),\n        Types.NestedField.required(3, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5).build();\n\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), spec.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), spec.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), UUID.randomUUID().toString(),\n        \"s3://bucket/test/location\", currentTimestamp - 50, 3, schema, 2,\n        ImmutableList.of(spec), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","date":"2019-11-21 01:48:39","endLine":481,"groupId":"1322","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPreviousMetadataRemoveMultiple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c2/603f2613e5cbe02c971208b7398e0c03760272.src","preCode":"  public void testAddPreviousMetadataRemoveMultiple() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get()),\n        Types.NestedField.required(2, \"y\", Types.LongType.get()),\n        Types.NestedField.required(3, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5).build();\n\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), spec.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), spec.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), UUID.randomUUID().toString(),\n        \"s3://bucket/test/location\", currentTimestamp - 50, 3, schema, 2,\n        ImmutableList.of(spec), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"MB"}],"commitId":"083edc1f749d9a64cd4042fb360a27a0a3bfe03c","commitMessage":"@@@Decouple TableMetadataParser and TableMetadata from TableOperations (#591)\n\nThe rationale behind not using TableOperations is:\n1. It saves the need to construct a TableOperations instance when you\n?? want to get a table's metadata by parsing its metadata files.\n2. It's more intuitive because a TableMetadata instance reflects a\n?? table's state and is determined by only a set of metadata files.","date":"2019-11-21 01:48:39","modifiedFileCount":"19","status":"M","submitter":"Xingyuan Lin"},{"authorTime":"2020-04-10 03:14:34","codes":[{"authorDate":"2020-04-10 03:14:34","commitOrder":3,"curCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        System.currentTimeMillis(), 3, TEST_SCHEMA, 5, ImmutableList.of(SPEC_5),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","date":"2020-04-10 03:14:34","endLine":305,"groupId":"4581","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonWithPreviousMetadataLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a7/7530bba8edf55acb3e883fce3a02f69e52afed.src","preCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get()),\n        Types.NestedField.required(2, \"y\", Types.LongType.get()),\n        Types.NestedField.required(3, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5).build();\n\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), spec.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), spec.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, UUID.randomUUID().toString(), \"s3://bucket/test/location\",\n        System.currentTimeMillis(), 3, schema, 5, ImmutableList.of(spec),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2020-04-10 03:14:34","commitOrder":3,"curCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, currentTimestamp - 50, 3, TEST_SCHEMA, 2,\n        ImmutableList.of(SPEC_5), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","date":"2020-04-10 03:14:34","endLine":444,"groupId":"4586","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPreviousMetadataRemoveMultiple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a7/7530bba8edf55acb3e883fce3a02f69e52afed.src","preCode":"  public void testAddPreviousMetadataRemoveMultiple() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"x\", Types.LongType.get()),\n        Types.NestedField.required(2, \"y\", Types.LongType.get()),\n        Types.NestedField.required(3, \"z\", Types.LongType.get())\n    );\n\n    PartitionSpec spec = PartitionSpec.builderFor(schema).withSpecId(5).build();\n\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), spec.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), spec.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), UUID.randomUUID().toString(),\n        \"s3://bucket/test/location\", currentTimestamp - 50, 3, schema, 2,\n        ImmutableList.of(spec), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"}],"commitId":"c094da57db072187b2d930ae6c5590218012ec3f","commitMessage":"@@@Prepare metadata writers for format v2 (#903)\n\n* Track format version in TableMetadata.\n* Pass formatVersion when creating a manifest writer.\n* Pass formatVersion when creating a manifest list writer.\n* Add v2 change section to spec.","date":"2020-04-10 03:14:34","modifiedFileCount":"12","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-04-11 07:02:33","codes":[{"authorDate":"2020-04-11 07:02:33","commitOrder":4,"curCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        0, System.currentTimeMillis(), 3, TEST_SCHEMA, 5, ImmutableList.of(SPEC_5),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","date":"2020-04-11 07:02:33","endLine":310,"groupId":"4581","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonWithPreviousMetadataLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/52/e7f6882c52edc27164662ccda2dc3c8b408233.src","preCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        System.currentTimeMillis(), 3, TEST_SCHEMA, 5, ImmutableList.of(SPEC_5),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"},{"authorDate":"2020-04-11 07:02:33","commitOrder":4,"curCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, 0, currentTimestamp - 50, 3, TEST_SCHEMA, 2,\n        ImmutableList.of(SPEC_5), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","date":"2020-04-11 07:02:33","endLine":449,"groupId":"4508","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPreviousMetadataRemoveMultiple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/52/e7f6882c52edc27164662ccda2dc3c8b408233.src","preCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, currentTimestamp - 50, 3, TEST_SCHEMA, 2,\n        ImmutableList.of(SPEC_5), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"720b240a3e6a32b6f01173ebcc448c2c6e32e13a","commitMessage":"@@@Update Snapshot and TableMetadata with sequence numbers (#910)\n\n","date":"2020-04-11 07:02:33","modifiedFileCount":"11","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-09-04 13:48:01","codes":[{"authorDate":"2020-09-04 13:48:01","commitOrder":5,"curCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        0, System.currentTimeMillis(), 3, TEST_SCHEMA, 5, ImmutableList.of(SPEC_5),\n        3, ImmutableList.of(SORT_ORDER_3), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","date":"2020-09-04 13:48:01","endLine":281,"groupId":"4581","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonWithPreviousMetadataLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/38/512de31fd141a5c1f98b930255be7de4ab169c.src","preCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        0, System.currentTimeMillis(), 3, TEST_SCHEMA, 5, ImmutableList.of(SPEC_5),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2020-09-04 13:48:01","commitOrder":5,"curCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, 0, currentTimestamp - 50, 3, TEST_SCHEMA, 2,\n        ImmutableList.of(SPEC_5), TableMetadata.INITIAL_SORT_ORDER_ID, ImmutableList.of(SortOrder.unsorted()),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","date":"2020-09-04 13:48:01","endLine":422,"groupId":"1791","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPreviousMetadataRemoveMultiple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/38/512de31fd141a5c1f98b930255be7de4ab169c.src","preCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, 0, currentTimestamp - 50, 3, TEST_SCHEMA, 2,\n        ImmutableList.of(SPEC_5), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"}],"commitId":"454101c3573acb9cd94d6d9a306ed99a5a324ed9","commitMessage":"@@@API: Implement SortOrder (#1373)\n\nThis commit extends Iceberg metadata with a sort order that defines how data and delete files should be ordered.","date":"2020-09-04 13:48:01","modifiedFileCount":"17","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2021-01-31 05:48:52","codes":[{"authorDate":"2021-01-31 05:48:52","commitOrder":6,"curCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        0, System.currentTimeMillis(), 3, TEST_SCHEMA, 5, ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(),\n        3, ImmutableList.of(SORT_ORDER_3), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","date":"2021-01-31 05:48:52","endLine":286,"groupId":"4581","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonWithPreviousMetadataLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1c/4040f0ecaf43b29c93631cfc611e64155cedb6.src","preCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        0, System.currentTimeMillis(), 3, TEST_SCHEMA, 5, ImmutableList.of(SPEC_5),\n        3, ImmutableList.of(SORT_ORDER_3), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2021-01-31 05:48:52","commitOrder":6,"curCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, 0, currentTimestamp - 50, 3, TEST_SCHEMA, 2,\n        ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(), TableMetadata.INITIAL_SORT_ORDER_ID,\n        ImmutableList.of(SortOrder.unsorted()), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","date":"2021-01-31 05:48:52","endLine":428,"groupId":"4508","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPreviousMetadataRemoveMultiple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1c/4040f0ecaf43b29c93631cfc611e64155cedb6.src","preCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, 0, currentTimestamp - 50, 3, TEST_SCHEMA, 2,\n        ImmutableList.of(SPEC_5), TableMetadata.INITIAL_SORT_ORDER_ID, ImmutableList.of(SortOrder.unsorted()),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"}],"commitId":"b3e01b74fb8909d0c5aa3f9a1b9468471e03c13c","commitMessage":"@@@Core: Add lastAssignedPartitionId to TableMetadata (#2089)\n\n","date":"2021-01-31 05:48:52","modifiedFileCount":"5","status":"M","submitter":"jun-he"},{"authorTime":"2021-02-23 08:16:04","codes":[{"authorDate":"2021-02-23 08:16:04","commitOrder":7,"curCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        0, System.currentTimeMillis(), 3,\n        7, ImmutableList.of(TEST_SCHEMA), 5, ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(),\n        3, ImmutableList.of(SORT_ORDER_3), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","date":"2021-02-23 08:16:04","endLine":302,"groupId":"4581","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonWithPreviousMetadataLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/42/c46076b134ca1e739d7d5f5ee0248ff23851c4.src","preCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        0, System.currentTimeMillis(), 3, TEST_SCHEMA, 5, ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(),\n        3, ImmutableList.of(SORT_ORDER_3), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2021-02-23 08:16:04","commitOrder":7,"curCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, 0, currentTimestamp - 50, 3, 7, ImmutableList.of(TEST_SCHEMA), 2,\n        ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(),\n        TableMetadata.INITIAL_SORT_ORDER_ID, ImmutableList.of(SortOrder.unsorted()),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","date":"2021-02-23 08:16:04","endLine":446,"groupId":"233","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPreviousMetadataRemoveMultiple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/42/c46076b134ca1e739d7d5f5ee0248ff23851c4.src","preCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, 0, currentTimestamp - 50, 3, TEST_SCHEMA, 2,\n        ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(), TableMetadata.INITIAL_SORT_ORDER_ID,\n        ImmutableList.of(SortOrder.unsorted()), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"}],"commitId":"255e9525c5bfeb7b57e49a2d96178ebe615c5e16","commitMessage":"@@@Core: Add current-schema-id and schemas to table metadata (#2096)\n\n","date":"2021-02-23 08:16:04","modifiedFileCount":"8","status":"M","submitter":"yyanyy"},{"authorTime":"2021-06-29 08:24:47","codes":[{"authorDate":"2021-06-29 08:24:47","commitOrder":8,"curCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        0, System.currentTimeMillis(), 3,\n        7, ImmutableList.of(TEST_SCHEMA), 5, ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(),\n        3, ImmutableList.of(SORT_ORDER_3), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","date":"2021-06-29 08:24:47","endLine":315,"groupId":"101864","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonWithPreviousMetadataLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d3/cebec1f3287b4f19ba6b60d947d8babf685be1.src","preCode":"  public void testJsonWithPreviousMetadataLog() throws Exception {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    TableMetadata base = new TableMetadata(null, 1, UUID.randomUUID().toString(), TEST_LOCATION,\n        0, System.currentTimeMillis(), 3,\n        7, ImmutableList.of(TEST_SCHEMA), 5, ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(),\n        3, ImmutableList.of(SORT_ORDER_3), ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    String asJson = TableMetadataParser.toJson(base);\n    TableMetadata metadataFromJson = TableMetadataParser.fromJson(ops.io(), null,\n        JsonUtil.mapper().readValue(asJson, JsonNode.class));\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog, metadataFromJson.previousFiles());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2021-06-29 08:24:47","commitOrder":8,"curCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, 0, currentTimestamp - 50, 3, 7, ImmutableList.of(TEST_SCHEMA), 2,\n        ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(),\n        TableMetadata.INITIAL_SORT_ORDER_ID, ImmutableList.of(SortOrder.unsorted()),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","date":"2021-06-29 08:24:47","endLine":459,"groupId":"101864","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPreviousMetadataRemoveMultiple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d3/cebec1f3287b4f19ba6b60d947d8babf685be1.src","preCode":"  public void testAddPreviousMetadataRemoveMultiple() {\n    long previousSnapshotId = System.currentTimeMillis() - new Random(1234).nextInt(3600);\n    Snapshot previousSnapshot = new BaseSnapshot(\n        ops.io(), previousSnapshotId, null, previousSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.1.avro\"), SPEC_5.specId())));\n    long currentSnapshotId = System.currentTimeMillis();\n    Snapshot currentSnapshot = new BaseSnapshot(\n        ops.io(), currentSnapshotId, previousSnapshotId, currentSnapshotId, null, null, ImmutableList.of(\n        new GenericManifestFile(localInput(\"file:/tmp/manfiest.2.avro\"), SPEC_5.specId())));\n\n    List<HistoryEntry> reversedSnapshotLog = Lists.newArrayList();\n    long currentTimestamp = System.currentTimeMillis();\n    List<MetadataLogEntry> previousMetadataLog = Lists.newArrayList();\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 100,\n        \"/tmp/000001-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 90,\n        \"/tmp/000002-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 80,\n        \"/tmp/000003-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 70,\n        \"/tmp/000004-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n    previousMetadataLog.add(new MetadataLogEntry(currentTimestamp - 60,\n        \"/tmp/000005-\" + UUID.randomUUID().toString() + \".metadata.json\"));\n\n    MetadataLogEntry latestPreviousMetadata = new MetadataLogEntry(currentTimestamp - 50,\n        \"/tmp/000006-\" + UUID.randomUUID().toString() + \".metadata.json\");\n\n    TableMetadata base = new TableMetadata(localInput(latestPreviousMetadata.file()), 1, UUID.randomUUID().toString(),\n        TEST_LOCATION, 0, currentTimestamp - 50, 3, 7, ImmutableList.of(TEST_SCHEMA), 2,\n        ImmutableList.of(SPEC_5), SPEC_5.lastAssignedFieldId(),\n        TableMetadata.INITIAL_SORT_ORDER_ID, ImmutableList.of(SortOrder.unsorted()),\n        ImmutableMap.of(\"property\", \"value\"), currentSnapshotId,\n        Arrays.asList(previousSnapshot, currentSnapshot), reversedSnapshotLog,\n        ImmutableList.copyOf(previousMetadataLog));\n\n    previousMetadataLog.add(latestPreviousMetadata);\n\n    TableMetadata metadata = base.replaceProperties(\n        ImmutableMap.of(TableProperties.METADATA_PREVIOUS_VERSIONS_MAX, \"2\"));\n\n    SortedSet<MetadataLogEntry> removedPreviousMetadata =\n        Sets.newTreeSet(Comparator.comparingLong(MetadataLogEntry::timestampMillis));\n    removedPreviousMetadata.addAll(base.previousFiles());\n    removedPreviousMetadata.removeAll(metadata.previousFiles());\n\n    Assert.assertEquals(\"Metadata logs should match\", previousMetadataLog.subList(4, 6),\n        metadata.previousFiles());\n    Assert.assertEquals(\"Removed Metadata logs should contain 4\", previousMetadataLog.subList(0, 4),\n        ImmutableList.copyOf(removedPreviousMetadata));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"M"}],"commitId":"d4d376bb559e8dc83da3cb7ecbb8ff9205d68f21","commitMessage":"@@@Core: Add schema-id to snapshots (#2275)\n\n","date":"2021-06-29 08:24:47","modifiedFileCount":"13","status":"M","submitter":"yyanyy"}]
