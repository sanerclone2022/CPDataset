[{"authorTime":"2019-11-01 03:58:05","codes":[{"authorDate":"2019-05-29 03:40:04","commitOrder":2,"curCode":"  public void testGreaterThan() {\n    Evaluator evaluator = new Evaluator(STRUCT, greaterThan(\"x\", 7));\n    Assert.assertFalse(\"7 > 7 => false\", evaluator.eval(TestHelpers.Row.of(7, 8, null)));\n    Assert.assertFalse(\"6 > 7 => false\", evaluator.eval(TestHelpers.Row.of(6, 8, null)));\n    Assert.assertTrue(\"8 > 7 => true\", evaluator.eval(TestHelpers.Row.of(8, 8, null)));\n\n    Evaluator structEvaluator = new Evaluator(STRUCT, greaterThan(\"s1.s2.s3.s4.i\", 7));\n    Assert.assertFalse(\"7 > 7 => false\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(7)))))));\n    Assert.assertFalse(\"6 > 7 => false\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(6)))))));\n    Assert.assertTrue(\"8 > 7 => true\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(8)))))));\n  }\n","date":"2019-05-29 03:40:04","endLine":134,"groupId":"3186","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreaterThan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/42/adb9ade92d0a18ddb05a7468c69cd0ed710407.src","preCode":"  public void testGreaterThan() {\n    Evaluator evaluator = new Evaluator(STRUCT, greaterThan(\"x\", 7));\n    Assert.assertFalse(\"7 > 7 => false\", evaluator.eval(TestHelpers.Row.of(7, 8, null)));\n    Assert.assertFalse(\"6 > 7 => false\", evaluator.eval(TestHelpers.Row.of(6, 8, null)));\n    Assert.assertTrue(\"8 > 7 => true\", evaluator.eval(TestHelpers.Row.of(8, 8, null)));\n\n    Evaluator structEvaluator = new Evaluator(STRUCT, greaterThan(\"s1.s2.s3.s4.i\", 7));\n    Assert.assertFalse(\"7 > 7 => false\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(7)))))));\n    Assert.assertFalse(\"6 > 7 => false\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(6)))))));\n    Assert.assertTrue(\"8 > 7 => true\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(8)))))));\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"NB"},{"authorDate":"2019-11-01 03:58:05","commitOrder":2,"curCode":"  public void testNotIn() {\n    Assert.assertEquals(3, notIn(\"s\", 7, 8, 9).literals().size());\n    Assert.assertEquals(3, notIn(\"s\", 7, 8.1, Long.MAX_VALUE).literals().size());\n    Assert.assertEquals(2, notIn(\"s\", \"abc\", \"abd\", \"abc\").literals().size());\n    Assert.assertEquals(0, notIn(\"s\").literals().size());\n    Assert.assertEquals(1, notIn(\"s\", 5).literals().size());\n    Assert.assertEquals(1, notIn(\"s\", 5, 5).literals().size());\n    Assert.assertEquals(1, notIn(\"s\", Arrays.asList(5, 5)).literals().size());\n    Assert.assertEquals(0, notIn(\"s\", Collections.emptyList()).literals().size());\n\n    Evaluator evaluator = new Evaluator(STRUCT, notIn(\"x\", 7, 8, Long.MAX_VALUE));\n    Assert.assertFalse(\"7 not in [7, 8] => false\", evaluator.eval(TestHelpers.Row.of(7, 8, null)));\n    Assert.assertTrue(\"6 not in [7, 8]  => true\", evaluator.eval(TestHelpers.Row.of(9, 8, null)));\n\n    Evaluator intSetEvaluator = new Evaluator(STRUCT,\n        notIn(\"x\", Long.MAX_VALUE, Integer.MAX_VALUE, Long.MIN_VALUE));\n    Assert.assertFalse(\"Integer.MAX_VALUE not_in [Integer.MAX_VALUE] => false\",\n        intSetEvaluator.eval(TestHelpers.Row.of(Integer.MAX_VALUE, 7.0, null)));\n    Assert.assertTrue(\"6 not_in [Integer.MAX_VALUE]  => true\",\n        intSetEvaluator.eval(TestHelpers.Row.of(6, 6.8, null)));\n\n    Evaluator integerEvaluator = new Evaluator(STRUCT, notIn(\"y\", 7, 8, 9.1));\n    Assert.assertFalse(\"7.0 not in [7, 8, 9] => false\",\n        integerEvaluator.eval(TestHelpers.Row.of(0, 7.0, null)));\n    Assert.assertFalse(\"9.1 not in [7, 8, 9.1] => false\",\n        integerEvaluator.eval(TestHelpers.Row.of(7, 9.1, null)));\n    Assert.assertTrue(\"6.8 not in [7, 8, 9.1]  => true\",\n        integerEvaluator.eval(TestHelpers.Row.of(6, 6.8, null)));\n\n    Evaluator structEvaluator = new Evaluator(STRUCT, notIn(\"s1.s2.s3.s4.i\", 7, 8, 9));\n    Assert.assertFalse(\"7 not in [7, 8, 9] => false\",\n            structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n                    TestHelpers.Row.of(\n                            TestHelpers.Row.of(\n                                    TestHelpers.Row.of(\n                                            TestHelpers.Row.of(7)))))));\n    Assert.assertTrue(\"6 not in [7, 8, 9]  => true\",\n            structEvaluator.eval(TestHelpers.Row.of(6, 8, null,\n                    TestHelpers.Row.of(\n                            TestHelpers.Row.of(\n                                    TestHelpers.Row.of(\n                                            TestHelpers.Row.of(6)))))));\n\n    StructType charSeqStruct = StructType.of(required(34, \"s\", Types.StringType.get()));\n    Evaluator charSeqEvaluator = new Evaluator(charSeqStruct, notIn(\"s\", \"abc\", \"abd\", \"abc\"));\n    Assert.assertFalse(\"utf8(abc) not in [string(abc), string(abd)] => false\",\n            charSeqEvaluator.eval(TestHelpers.Row.of(new Utf8(\"abc\"))));\n    Assert.assertTrue(\"utf8(abcd) not in [string(abc), string(abd)] => true\",\n            charSeqEvaluator.eval(TestHelpers.Row.of(new Utf8(\"abcd\"))));\n  }\n","date":"2019-11-01 03:58:05","endLine":524,"groupId":"1692","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/df/166e9a8977052097b141b33c481bb7d49d7517.src","preCode":"  public void testNotIn() {\n    Assert.assertEquals(3, notIn(\"s\", 7, 8, 9).literals().size());\n    Assert.assertEquals(3, notIn(\"s\", 7, 8.1, Long.MAX_VALUE).literals().size());\n    Assert.assertEquals(2, notIn(\"s\", \"abc\", \"abd\", \"abc\").literals().size());\n    Assert.assertEquals(0, notIn(\"s\").literals().size());\n    Assert.assertEquals(1, notIn(\"s\", 5).literals().size());\n    Assert.assertEquals(1, notIn(\"s\", 5, 5).literals().size());\n    Assert.assertEquals(1, notIn(\"s\", Arrays.asList(5, 5)).literals().size());\n    Assert.assertEquals(0, notIn(\"s\", Collections.emptyList()).literals().size());\n\n    Evaluator evaluator = new Evaluator(STRUCT, notIn(\"x\", 7, 8, Long.MAX_VALUE));\n    Assert.assertFalse(\"7 not in [7, 8] => false\", evaluator.eval(TestHelpers.Row.of(7, 8, null)));\n    Assert.assertTrue(\"6 not in [7, 8]  => true\", evaluator.eval(TestHelpers.Row.of(9, 8, null)));\n\n    Evaluator intSetEvaluator = new Evaluator(STRUCT,\n        notIn(\"x\", Long.MAX_VALUE, Integer.MAX_VALUE, Long.MIN_VALUE));\n    Assert.assertFalse(\"Integer.MAX_VALUE not_in [Integer.MAX_VALUE] => false\",\n        intSetEvaluator.eval(TestHelpers.Row.of(Integer.MAX_VALUE, 7.0, null)));\n    Assert.assertTrue(\"6 not_in [Integer.MAX_VALUE]  => true\",\n        intSetEvaluator.eval(TestHelpers.Row.of(6, 6.8, null)));\n\n    Evaluator integerEvaluator = new Evaluator(STRUCT, notIn(\"y\", 7, 8, 9.1));\n    Assert.assertFalse(\"7.0 not in [7, 8, 9] => false\",\n        integerEvaluator.eval(TestHelpers.Row.of(0, 7.0, null)));\n    Assert.assertFalse(\"9.1 not in [7, 8, 9.1] => false\",\n        integerEvaluator.eval(TestHelpers.Row.of(7, 9.1, null)));\n    Assert.assertTrue(\"6.8 not in [7, 8, 9.1]  => true\",\n        integerEvaluator.eval(TestHelpers.Row.of(6, 6.8, null)));\n\n    Evaluator structEvaluator = new Evaluator(STRUCT, notIn(\"s1.s2.s3.s4.i\", 7, 8, 9));\n    Assert.assertFalse(\"7 not in [7, 8, 9] => false\",\n            structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n                    TestHelpers.Row.of(\n                            TestHelpers.Row.of(\n                                    TestHelpers.Row.of(\n                                            TestHelpers.Row.of(7)))))));\n    Assert.assertTrue(\"6 not in [7, 8, 9]  => true\",\n            structEvaluator.eval(TestHelpers.Row.of(6, 8, null,\n                    TestHelpers.Row.of(\n                            TestHelpers.Row.of(\n                                    TestHelpers.Row.of(\n                                            TestHelpers.Row.of(6)))))));\n\n    StructType charSeqStruct = StructType.of(required(34, \"s\", Types.StringType.get()));\n    Evaluator charSeqEvaluator = new Evaluator(charSeqStruct, notIn(\"s\", \"abc\", \"abd\", \"abc\"));\n    Assert.assertFalse(\"utf8(abc) not in [string(abc), string(abd)] => false\",\n            charSeqEvaluator.eval(TestHelpers.Row.of(new Utf8(\"abc\"))));\n    Assert.assertTrue(\"utf8(abcd) not in [string(abc), string(abd)] => true\",\n            charSeqEvaluator.eval(TestHelpers.Row.of(new Utf8(\"abcd\"))));\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":475,"status":"B"}],"commitId":"860cdcf428b901ea546957187d517089924e0917","commitMessage":"@@@Add IN and NOT_IN predicates (#594)\n\n","date":"2019-11-01 03:58:05","modifiedFileCount":"17","status":"M","submitter":"jun-he"},{"authorTime":"2019-11-21 01:58:39","codes":[{"authorDate":"2019-05-29 03:40:04","commitOrder":3,"curCode":"  public void testGreaterThan() {\n    Evaluator evaluator = new Evaluator(STRUCT, greaterThan(\"x\", 7));\n    Assert.assertFalse(\"7 > 7 => false\", evaluator.eval(TestHelpers.Row.of(7, 8, null)));\n    Assert.assertFalse(\"6 > 7 => false\", evaluator.eval(TestHelpers.Row.of(6, 8, null)));\n    Assert.assertTrue(\"8 > 7 => true\", evaluator.eval(TestHelpers.Row.of(8, 8, null)));\n\n    Evaluator structEvaluator = new Evaluator(STRUCT, greaterThan(\"s1.s2.s3.s4.i\", 7));\n    Assert.assertFalse(\"7 > 7 => false\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(7)))))));\n    Assert.assertFalse(\"6 > 7 => false\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(6)))))));\n    Assert.assertTrue(\"8 > 7 => true\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(8)))))));\n  }\n","date":"2019-05-29 03:40:04","endLine":134,"groupId":"101325","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreaterThan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/42/adb9ade92d0a18ddb05a7468c69cd0ed710407.src","preCode":"  public void testGreaterThan() {\n    Evaluator evaluator = new Evaluator(STRUCT, greaterThan(\"x\", 7));\n    Assert.assertFalse(\"7 > 7 => false\", evaluator.eval(TestHelpers.Row.of(7, 8, null)));\n    Assert.assertFalse(\"6 > 7 => false\", evaluator.eval(TestHelpers.Row.of(6, 8, null)));\n    Assert.assertTrue(\"8 > 7 => true\", evaluator.eval(TestHelpers.Row.of(8, 8, null)));\n\n    Evaluator structEvaluator = new Evaluator(STRUCT, greaterThan(\"s1.s2.s3.s4.i\", 7));\n    Assert.assertFalse(\"7 > 7 => false\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(7)))))));\n    Assert.assertFalse(\"6 > 7 => false\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(6)))))));\n    Assert.assertTrue(\"8 > 7 => true\",\n        structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n            TestHelpers.Row.of(\n                TestHelpers.Row.of(\n                    TestHelpers.Row.of(\n                        TestHelpers.Row.of(8)))))));\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2019-11-21 01:58:39","commitOrder":3,"curCode":"  public void testNotIn() {\n    Assert.assertEquals(3, notIn(\"s\", 7, 8, 9).literals().size());\n    Assert.assertEquals(3, notIn(\"s\", 7, 8.1, Long.MAX_VALUE).literals().size());\n    Assert.assertEquals(3, notIn(\"s\", \"abc\", \"abd\", \"abc\").literals().size());\n    Assert.assertEquals(0, notIn(\"s\").literals().size());\n    Assert.assertEquals(1, notIn(\"s\", 5).literals().size());\n    Assert.assertEquals(2, notIn(\"s\", 5, 5).literals().size());\n    Assert.assertEquals(2, notIn(\"s\", Arrays.asList(5, 5)).literals().size());\n    Assert.assertEquals(0, notIn(\"s\", Collections.emptyList()).literals().size());\n\n    Evaluator evaluator = new Evaluator(STRUCT, notIn(\"x\", 7, 8, Long.MAX_VALUE));\n    Assert.assertFalse(\"7 not in [7, 8] => false\", evaluator.eval(TestHelpers.Row.of(7, 8, null)));\n    Assert.assertTrue(\"6 not in [7, 8]  => true\", evaluator.eval(TestHelpers.Row.of(9, 8, null)));\n\n    Evaluator intSetEvaluator = new Evaluator(STRUCT,\n        notIn(\"x\", Long.MAX_VALUE, Integer.MAX_VALUE, Long.MIN_VALUE));\n    Assert.assertFalse(\"Integer.MAX_VALUE not_in [Integer.MAX_VALUE] => false\",\n        intSetEvaluator.eval(TestHelpers.Row.of(Integer.MAX_VALUE, 7.0, null)));\n    Assert.assertTrue(\"6 not_in [Integer.MAX_VALUE]  => true\",\n        intSetEvaluator.eval(TestHelpers.Row.of(6, 6.8, null)));\n\n    Evaluator integerEvaluator = new Evaluator(STRUCT, notIn(\"y\", 7, 8, 9.1));\n    Assert.assertFalse(\"7.0 not in [7, 8, 9] => false\",\n        integerEvaluator.eval(TestHelpers.Row.of(0, 7.0, null)));\n    Assert.assertFalse(\"9.1 not in [7, 8, 9.1] => false\",\n        integerEvaluator.eval(TestHelpers.Row.of(7, 9.1, null)));\n    Assert.assertTrue(\"6.8 not in [7, 8, 9.1]  => true\",\n        integerEvaluator.eval(TestHelpers.Row.of(6, 6.8, null)));\n\n    Evaluator structEvaluator = new Evaluator(STRUCT, notIn(\"s1.s2.s3.s4.i\", 7, 8, 9));\n    Assert.assertFalse(\"7 not in [7, 8, 9] => false\",\n            structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n                    TestHelpers.Row.of(\n                            TestHelpers.Row.of(\n                                    TestHelpers.Row.of(\n                                            TestHelpers.Row.of(7)))))));\n    Assert.assertTrue(\"6 not in [7, 8, 9]  => true\",\n            structEvaluator.eval(TestHelpers.Row.of(6, 8, null,\n                    TestHelpers.Row.of(\n                            TestHelpers.Row.of(\n                                    TestHelpers.Row.of(\n                                            TestHelpers.Row.of(6)))))));\n\n    StructType charSeqStruct = StructType.of(required(34, \"s\", Types.StringType.get()));\n    Evaluator charSeqEvaluator = new Evaluator(charSeqStruct, notIn(\"s\", \"abc\", \"abd\", \"abc\"));\n    Assert.assertFalse(\"utf8(abc) not in [string(abc), string(abd)] => false\",\n            charSeqEvaluator.eval(TestHelpers.Row.of(new Utf8(\"abc\"))));\n    Assert.assertTrue(\"utf8(abcd) not in [string(abc), string(abd)] => true\",\n            charSeqEvaluator.eval(TestHelpers.Row.of(new Utf8(\"abcd\"))));\n  }\n","date":"2019-11-21 01:58:39","endLine":524,"groupId":"101325","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a4/37f7483558c8cc1ba41b956a6b76dd1b6cebc1.src","preCode":"  public void testNotIn() {\n    Assert.assertEquals(3, notIn(\"s\", 7, 8, 9).literals().size());\n    Assert.assertEquals(3, notIn(\"s\", 7, 8.1, Long.MAX_VALUE).literals().size());\n    Assert.assertEquals(2, notIn(\"s\", \"abc\", \"abd\", \"abc\").literals().size());\n    Assert.assertEquals(0, notIn(\"s\").literals().size());\n    Assert.assertEquals(1, notIn(\"s\", 5).literals().size());\n    Assert.assertEquals(1, notIn(\"s\", 5, 5).literals().size());\n    Assert.assertEquals(1, notIn(\"s\", Arrays.asList(5, 5)).literals().size());\n    Assert.assertEquals(0, notIn(\"s\", Collections.emptyList()).literals().size());\n\n    Evaluator evaluator = new Evaluator(STRUCT, notIn(\"x\", 7, 8, Long.MAX_VALUE));\n    Assert.assertFalse(\"7 not in [7, 8] => false\", evaluator.eval(TestHelpers.Row.of(7, 8, null)));\n    Assert.assertTrue(\"6 not in [7, 8]  => true\", evaluator.eval(TestHelpers.Row.of(9, 8, null)));\n\n    Evaluator intSetEvaluator = new Evaluator(STRUCT,\n        notIn(\"x\", Long.MAX_VALUE, Integer.MAX_VALUE, Long.MIN_VALUE));\n    Assert.assertFalse(\"Integer.MAX_VALUE not_in [Integer.MAX_VALUE] => false\",\n        intSetEvaluator.eval(TestHelpers.Row.of(Integer.MAX_VALUE, 7.0, null)));\n    Assert.assertTrue(\"6 not_in [Integer.MAX_VALUE]  => true\",\n        intSetEvaluator.eval(TestHelpers.Row.of(6, 6.8, null)));\n\n    Evaluator integerEvaluator = new Evaluator(STRUCT, notIn(\"y\", 7, 8, 9.1));\n    Assert.assertFalse(\"7.0 not in [7, 8, 9] => false\",\n        integerEvaluator.eval(TestHelpers.Row.of(0, 7.0, null)));\n    Assert.assertFalse(\"9.1 not in [7, 8, 9.1] => false\",\n        integerEvaluator.eval(TestHelpers.Row.of(7, 9.1, null)));\n    Assert.assertTrue(\"6.8 not in [7, 8, 9.1]  => true\",\n        integerEvaluator.eval(TestHelpers.Row.of(6, 6.8, null)));\n\n    Evaluator structEvaluator = new Evaluator(STRUCT, notIn(\"s1.s2.s3.s4.i\", 7, 8, 9));\n    Assert.assertFalse(\"7 not in [7, 8, 9] => false\",\n            structEvaluator.eval(TestHelpers.Row.of(7, 8, null,\n                    TestHelpers.Row.of(\n                            TestHelpers.Row.of(\n                                    TestHelpers.Row.of(\n                                            TestHelpers.Row.of(7)))))));\n    Assert.assertTrue(\"6 not in [7, 8, 9]  => true\",\n            structEvaluator.eval(TestHelpers.Row.of(6, 8, null,\n                    TestHelpers.Row.of(\n                            TestHelpers.Row.of(\n                                    TestHelpers.Row.of(\n                                            TestHelpers.Row.of(6)))))));\n\n    StructType charSeqStruct = StructType.of(required(34, \"s\", Types.StringType.get()));\n    Evaluator charSeqEvaluator = new Evaluator(charSeqStruct, notIn(\"s\", \"abc\", \"abd\", \"abc\"));\n    Assert.assertFalse(\"utf8(abc) not in [string(abc), string(abd)] => false\",\n            charSeqEvaluator.eval(TestHelpers.Row.of(new Utf8(\"abc\"))));\n    Assert.assertTrue(\"utf8(abcd) not in [string(abc), string(abd)] => true\",\n            charSeqEvaluator.eval(TestHelpers.Row.of(new Utf8(\"abcd\"))));\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":475,"status":"M"}],"commitId":"94fdc7321407c22b143b9eab83d29179d12d1a6d","commitMessage":"@@@Refactor in and notIn expressions (#650)\n\n* Make BoundSetPredicate extend BoundPredicate\n* Remove visitor method for BoundSetPredicate\n* Add BoundUnaryPredicate\n* Add BoundPredicate subclass test and cast methods\n* Replace LiteralSet and CharSeqLiteralSet with CharSequenceSet\n* Implement all Set methods in CharSequenceSet","date":"2019-11-21 01:58:39","modifiedFileCount":"19","status":"M","submitter":"Ryan Blue"}]
