[{"authorTime":"2020-07-04 00:13:54","codes":[{"authorDate":"2020-05-28 23:38:30","commitOrder":2,"curCode":"  public void testAddedFieldsWithRequiredChildren() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"a\", Types.LongType.get())\n    );\n\n    Record record = GenericRecord.create(schema.asStruct());\n    record.setField(\"a\", 100L);\n\n    Schema addedFields = new Schema(\n        Types.NestedField.optional(1, \"a\", Types.LongType.get()),\n        Types.NestedField.optional(2, \"b\", Types.StructType.of(\n            Types.NestedField.required(3, \"c\", Types.LongType.get())\n        )),\n        Types.NestedField.optional(4, \"d\", Types.ListType.ofRequired(5, Types.LongType.get())),\n        Types.NestedField.optional(6, \"e\", Types.MapType.ofRequired(7, 8, Types.LongType.get(), Types.LongType.get()))\n    );\n\n    Record projected = writeAndRead(\"add_fields_with_required_children_projection\", schema, addedFields, record);\n    Assert.assertEquals(\"Should contain the correct value in column 1\", projected.get(0), 100L);\n    Assert.assertEquals(\"Should contain the correct value in column a\", projected.getField(\"a\"), 100L);\n    Assert.assertNull(\"Should contain empty value in new column 2\", projected.get(1));\n    Assert.assertNull(\"Should contain empty value in column b\", projected.getField(\"b\"));\n    Assert.assertNull(\"Should contain empty value in new column 4\", projected.get(2));\n    Assert.assertNull(\"Should contain empty value in column d\", projected.getField(\"d\"));\n    Assert.assertNull(\"Should contain empty value in new column 6\", projected.get(3));\n    Assert.assertNull(\"Should contain empty value in column e\", projected.getField(\"e\"));\n  }\n","date":"2020-05-28 23:38:30","endLine":608,"groupId":"3836","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddedFieldsWithRequiredChildren","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/2d/ee8d1982f86f5c1db88bf19d709e32d70a278f.src","preCode":"  public void testAddedFieldsWithRequiredChildren() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"a\", Types.LongType.get())\n    );\n\n    Record record = GenericRecord.create(schema.asStruct());\n    record.setField(\"a\", 100L);\n\n    Schema addedFields = new Schema(\n        Types.NestedField.optional(1, \"a\", Types.LongType.get()),\n        Types.NestedField.optional(2, \"b\", Types.StructType.of(\n            Types.NestedField.required(3, \"c\", Types.LongType.get())\n        )),\n        Types.NestedField.optional(4, \"d\", Types.ListType.ofRequired(5, Types.LongType.get())),\n        Types.NestedField.optional(6, \"e\", Types.MapType.ofRequired(7, 8, Types.LongType.get(), Types.LongType.get()))\n    );\n\n    Record projected = writeAndRead(\"add_fields_with_required_children_projection\", schema, addedFields, record);\n    Assert.assertEquals(\"Should contain the correct value in column 1\", projected.get(0), 100L);\n    Assert.assertEquals(\"Should contain the correct value in column a\", projected.getField(\"a\"), 100L);\n    Assert.assertNull(\"Should contain empty value in new column 2\", projected.get(1));\n    Assert.assertNull(\"Should contain empty value in column b\", projected.getField(\"b\"));\n    Assert.assertNull(\"Should contain empty value in new column 4\", projected.get(2));\n    Assert.assertNull(\"Should contain empty value in column d\", projected.getField(\"d\"));\n    Assert.assertNull(\"Should contain empty value in new column 6\", projected.get(3));\n    Assert.assertNull(\"Should contain empty value in column e\", projected.getField(\"e\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":582,"status":"NB"},{"authorDate":"2020-07-04 00:13:54","commitOrder":2,"curCode":"  public void testAddedFieldsWithRequiredChildren() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"a\", Types.LongType.get())\n    );\n\n    Row row = Row.of(100L);\n\n    Schema addedFields = new Schema(\n        Types.NestedField.optional(1, \"a\", Types.LongType.get()),\n        Types.NestedField.optional(2, \"b\", Types.StructType.of(\n            Types.NestedField.required(3, \"c\", Types.LongType.get())\n        )),\n        Types.NestedField.optional(4, \"d\", Types.ListType.ofRequired(5, Types.LongType.get())),\n        Types.NestedField.optional(6, \"e\", Types.MapType.ofRequired(7, 8, Types.LongType.get(), Types.LongType.get()))\n    );\n\n    Row projected = writeAndRead(\"add_fields_with_required_children_projection\", schema, addedFields, row);\n    Assert.assertEquals(\"Should contain the correct value in column 1\", projected.getField(0), 100L);\n    Assert.assertNull(\"Should contain empty value in new column 2\", projected.getField(1));\n    Assert.assertNull(\"Should contain empty value in new column 4\", projected.getField(2));\n    Assert.assertNull(\"Should contain empty value in new column 6\", projected.getField(3));\n  }\n","date":"2020-07-04 00:13:54","endLine":569,"groupId":"539","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddedFieldsWithRequiredChildren","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/23/b4373da61f2625b2187644d87190720863224a.src","preCode":"  public void testAddedFieldsWithRequiredChildren() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"a\", Types.LongType.get())\n    );\n\n    Row row = Row.of(100L);\n\n    Schema addedFields = new Schema(\n        Types.NestedField.optional(1, \"a\", Types.LongType.get()),\n        Types.NestedField.optional(2, \"b\", Types.StructType.of(\n            Types.NestedField.required(3, \"c\", Types.LongType.get())\n        )),\n        Types.NestedField.optional(4, \"d\", Types.ListType.ofRequired(5, Types.LongType.get())),\n        Types.NestedField.optional(6, \"e\", Types.MapType.ofRequired(7, 8, Types.LongType.get(), Types.LongType.get()))\n    );\n\n    Row projected = writeAndRead(\"add_fields_with_required_children_projection\", schema, addedFields, row);\n    Assert.assertEquals(\"Should contain the correct value in column 1\", projected.getField(0), 100L);\n    Assert.assertNull(\"Should contain empty value in new column 2\", projected.getField(1));\n    Assert.assertNull(\"Should contain empty value in new column 4\", projected.getField(2));\n    Assert.assertNull(\"Should contain empty value in new column 6\", projected.getField(3));\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":548,"status":"B"}],"commitId":"bc7bd0e30839740d0d9d7430cac984c10659ca38","commitMessage":"@@@Flink: Add Avro value reader.  writer implementations (#1153)\n\n","date":"2020-07-04 00:13:54","modifiedFileCount":"4","status":"M","submitter":"openinx"},{"authorTime":"2020-08-06 04:46:32","codes":[{"authorDate":"2020-05-28 23:38:30","commitOrder":3,"curCode":"  public void testAddedFieldsWithRequiredChildren() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"a\", Types.LongType.get())\n    );\n\n    Record record = GenericRecord.create(schema.asStruct());\n    record.setField(\"a\", 100L);\n\n    Schema addedFields = new Schema(\n        Types.NestedField.optional(1, \"a\", Types.LongType.get()),\n        Types.NestedField.optional(2, \"b\", Types.StructType.of(\n            Types.NestedField.required(3, \"c\", Types.LongType.get())\n        )),\n        Types.NestedField.optional(4, \"d\", Types.ListType.ofRequired(5, Types.LongType.get())),\n        Types.NestedField.optional(6, \"e\", Types.MapType.ofRequired(7, 8, Types.LongType.get(), Types.LongType.get()))\n    );\n\n    Record projected = writeAndRead(\"add_fields_with_required_children_projection\", schema, addedFields, record);\n    Assert.assertEquals(\"Should contain the correct value in column 1\", projected.get(0), 100L);\n    Assert.assertEquals(\"Should contain the correct value in column a\", projected.getField(\"a\"), 100L);\n    Assert.assertNull(\"Should contain empty value in new column 2\", projected.get(1));\n    Assert.assertNull(\"Should contain empty value in column b\", projected.getField(\"b\"));\n    Assert.assertNull(\"Should contain empty value in new column 4\", projected.get(2));\n    Assert.assertNull(\"Should contain empty value in column d\", projected.getField(\"d\"));\n    Assert.assertNull(\"Should contain empty value in new column 6\", projected.get(3));\n    Assert.assertNull(\"Should contain empty value in column e\", projected.getField(\"e\"));\n  }\n","date":"2020-05-28 23:38:30","endLine":608,"groupId":"10570","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddedFieldsWithRequiredChildren","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/2d/ee8d1982f86f5c1db88bf19d709e32d70a278f.src","preCode":"  public void testAddedFieldsWithRequiredChildren() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"a\", Types.LongType.get())\n    );\n\n    Record record = GenericRecord.create(schema.asStruct());\n    record.setField(\"a\", 100L);\n\n    Schema addedFields = new Schema(\n        Types.NestedField.optional(1, \"a\", Types.LongType.get()),\n        Types.NestedField.optional(2, \"b\", Types.StructType.of(\n            Types.NestedField.required(3, \"c\", Types.LongType.get())\n        )),\n        Types.NestedField.optional(4, \"d\", Types.ListType.ofRequired(5, Types.LongType.get())),\n        Types.NestedField.optional(6, \"e\", Types.MapType.ofRequired(7, 8, Types.LongType.get(), Types.LongType.get()))\n    );\n\n    Record projected = writeAndRead(\"add_fields_with_required_children_projection\", schema, addedFields, record);\n    Assert.assertEquals(\"Should contain the correct value in column 1\", projected.get(0), 100L);\n    Assert.assertEquals(\"Should contain the correct value in column a\", projected.getField(\"a\"), 100L);\n    Assert.assertNull(\"Should contain empty value in new column 2\", projected.get(1));\n    Assert.assertNull(\"Should contain empty value in column b\", projected.getField(\"b\"));\n    Assert.assertNull(\"Should contain empty value in new column 4\", projected.get(2));\n    Assert.assertNull(\"Should contain empty value in column d\", projected.getField(\"d\"));\n    Assert.assertNull(\"Should contain empty value in new column 6\", projected.get(3));\n    Assert.assertNull(\"Should contain empty value in column e\", projected.getField(\"e\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":582,"status":"N"},{"authorDate":"2020-08-06 04:46:32","commitOrder":3,"curCode":"  public void testAddedFieldsWithRequiredChildren() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"a\", Types.LongType.get())\n    );\n\n    RowData row = GenericRowData.of(100L);\n\n    Schema addedFields = new Schema(\n        Types.NestedField.optional(1, \"a\", Types.LongType.get()),\n        Types.NestedField.optional(2, \"b\", Types.StructType.of(\n            Types.NestedField.required(3, \"c\", Types.LongType.get())\n        )),\n        Types.NestedField.optional(4, \"d\", Types.ListType.ofRequired(5, Types.LongType.get())),\n        Types.NestedField.optional(6, \"e\", Types.MapType.ofRequired(7, 8, Types.LongType.get(), Types.LongType.get()))\n    );\n\n    RowData projected = writeAndRead(\"add_fields_with_required_children_projection\", schema, addedFields, row);\n    Assert.assertEquals(\"Should contain the correct value in column 1\", projected.getLong(0), 100L);\n    Assert.assertTrue(\"Should contain empty value in new column 2\", projected.isNullAt(1));\n    Assert.assertTrue(\"Should contain empty value in new column 4\", projected.isNullAt(2));\n    Assert.assertTrue(\"Should contain empty value in new column 6\", projected.isNullAt(3));\n  }\n","date":"2020-08-06 04:46:32","endLine":571,"groupId":"10570","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testAddedFieldsWithRequiredChildren","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9c/cb1d56c0edadb81ed451f5aa427ac6bae152d3.src","preCode":"  public void testAddedFieldsWithRequiredChildren() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(1, \"a\", Types.LongType.get())\n    );\n\n    Row row = Row.of(100L);\n\n    Schema addedFields = new Schema(\n        Types.NestedField.optional(1, \"a\", Types.LongType.get()),\n        Types.NestedField.optional(2, \"b\", Types.StructType.of(\n            Types.NestedField.required(3, \"c\", Types.LongType.get())\n        )),\n        Types.NestedField.optional(4, \"d\", Types.ListType.ofRequired(5, Types.LongType.get())),\n        Types.NestedField.optional(6, \"e\", Types.MapType.ofRequired(7, 8, Types.LongType.get(), Types.LongType.get()))\n    );\n\n    Row projected = writeAndRead(\"add_fields_with_required_children_projection\", schema, addedFields, row);\n    Assert.assertEquals(\"Should contain the correct value in column 1\", projected.getField(0), 100L);\n    Assert.assertNull(\"Should contain empty value in new column 2\", projected.getField(1));\n    Assert.assertNull(\"Should contain empty value in new column 4\", projected.getField(2));\n    Assert.assertNull(\"Should contain empty value in new column 6\", projected.getField(3));\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"}],"commitId":"fc5e3e5bbde66f0d5c66c4d980d47b9fd1f19f63","commitMessage":"@@@Flink: Update Avro reader and writer to use RowData (#1232)\n\n","date":"2020-08-06 04:46:32","modifiedFileCount":"8","status":"M","submitter":"Jingsong Lee"}]
