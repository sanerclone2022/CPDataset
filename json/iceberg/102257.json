[{"authorTime":"2021-03-11 14:43:08","codes":[{"authorDate":"2021-03-11 14:43:08","commitOrder":3,"curCode":"  public void testFilterNotPushDownLike() {\n    Object[] expectRecord = new Object[] {1, \"iceberg\", 10.0};\n    String sqlNoPushDown = \"SELECT * FROM \" + TABLE_NAME + \" WHERE data LIKE '%%i' \";\n    List<Object[]> resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 0, resultLike.size());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM \" + TABLE_NAME + \" WHERE data LIKE '%%i%%' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%ice%%g' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 3 records\", 3, resultLike.size());\n    List<Object[]> expectedRecords = Lists.newArrayList();\n    expectedRecords.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedRecords.add(new Object[] {2, \"b\", 20.0});\n    expectedRecords.add(new Object[] {3, null, 30.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedRecords.toArray(), resultLike.toArray());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE 'iceber_' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE 'i%%g' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n  }\n","date":"2021-03-11 14:43:08","endLine":571,"groupId":"4540","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterNotPushDownLike","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/62/e51b2f916d32e9533559bda3f68ebbde719265.src","preCode":"  public void testFilterNotPushDownLike() {\n    Object[] expectRecord = new Object[] {1, \"iceberg\", 10.0};\n    String sqlNoPushDown = \"SELECT * FROM \" + TABLE_NAME + \" WHERE data LIKE '%%i' \";\n    List<Object[]> resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 0, resultLike.size());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM \" + TABLE_NAME + \" WHERE data LIKE '%%i%%' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%ice%%g' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 3 records\", 3, resultLike.size());\n    List<Object[]> expectedRecords = Lists.newArrayList();\n    expectedRecords.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedRecords.add(new Object[] {2, \"b\", 20.0});\n    expectedRecords.add(new Object[] {3, null, 30.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedRecords.toArray(), resultLike.toArray());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE 'iceber_' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE 'i%%g' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"MB"},{"authorDate":"2021-03-11 14:43:08","commitOrder":3,"curCode":"  public void testFilterPushDown2Literal() {\n    String sql2Literal = String.format(\"SELECT * FROM %s WHERE 1 > 0 \", TABLE_NAME);\n    List<Object[]> result = sql(sql2Literal);\n    List<Object[]> expectedRecords = Lists.newArrayList();\n    expectedRecords.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedRecords.add(new Object[] {2, \"b\", 20.0});\n    expectedRecords.add(new Object[] {3, null, 30.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedRecords.toArray(), result.toArray());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n  }\n","date":"2021-03-11 14:43:08","endLine":583,"groupId":"4517","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterPushDown2Literal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/62/e51b2f916d32e9533559bda3f68ebbde719265.src","preCode":"  public void testFilterPushDown2Literal() {\n    String sql2Literal = String.format(\"SELECT * FROM %s WHERE 1 > 0 \", TABLE_NAME);\n    List<Object[]> result = sql(sql2Literal);\n    List<Object[]> expectedRecords = Lists.newArrayList();\n    expectedRecords.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedRecords.add(new Object[] {2, \"b\", 20.0});\n    expectedRecords.add(new Object[] {3, null, 30.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedRecords.toArray(), result.toArray());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"B"}],"commitId":"312c622350a93b099190955edc6b4416dbe502da","commitMessage":"@@@Flink :  Refactor FlinkTableFactory to implement DynamicTableSinkFactory and DynamicTableSourceFactory (#2229)\n\n","date":"2021-03-11 14:43:08","modifiedFileCount":"5","status":"M","submitter":"JunZhang"},{"authorTime":"2021-04-01 14:26:14","codes":[{"authorDate":"2021-04-01 14:26:14","commitOrder":4,"curCode":"  public void testFilterNotPushDownLike() {\n    Row expectRecord = Row.of(1, \"iceberg\", 10.0);\n    String sqlNoPushDown = \"SELECT * FROM \" + TABLE_NAME + \" WHERE data LIKE '%%i' \";\n    List<Row> resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 0, resultLike.size());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM \" + TABLE_NAME + \" WHERE data LIKE '%%i%%' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%ice%%g' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 3 records\", 3, resultLike.size());\n    List<Row> expectedRecords = Lists.newArrayList(\n        Row.of(1, \"iceberg\", 10.0),\n        Row.of(2, \"b\", 20.0),\n        Row.of(3, null, 30.0)\n    );\n    Assert.assertEquals(\"Should produce the expected record\", expectedRecords, resultLike);\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE 'iceber_' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE 'i%%g' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n  }\n","date":"2021-04-01 14:26:14","endLine":571,"groupId":"102257","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testFilterNotPushDownLike","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/11/a6b6781e78ab28c604de2aedb2b86f9e36bf7e.src","preCode":"  public void testFilterNotPushDownLike() {\n    Object[] expectRecord = new Object[] {1, \"iceberg\", 10.0};\n    String sqlNoPushDown = \"SELECT * FROM \" + TABLE_NAME + \" WHERE data LIKE '%%i' \";\n    List<Object[]> resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 0, resultLike.size());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM \" + TABLE_NAME + \" WHERE data LIKE '%%i%%' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%ice%%g' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 3 records\", 3, resultLike.size());\n    List<Object[]> expectedRecords = Lists.newArrayList();\n    expectedRecords.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedRecords.add(new Object[] {2, \"b\", 20.0});\n    expectedRecords.add(new Object[] {3, null, 30.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedRecords.toArray(), resultLike.toArray());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE 'iceber_' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n\n    sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE 'i%%g' \";\n    resultLike = sql(sqlNoPushDown);\n    Assert.assertEquals(\"Should have 1 record\", 1, resultLike.size());\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectRecord, resultLike.get(0));\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"M"},{"authorDate":"2021-04-01 14:26:14","commitOrder":4,"curCode":"  public void testFilterPushDown2Literal() {\n    String sql2Literal = String.format(\"SELECT * FROM %s WHERE 1 > 0 \", TABLE_NAME);\n    List<Row> result = sql(sql2Literal);\n    List<Row> expectedRecords = Lists.newArrayList(\n        Row.of(1, \"iceberg\", 10.0),\n        Row.of(2, \"b\", 20.0),\n        Row.of(3, null, 30.0)\n    );\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedRecords.toArray(), result.toArray());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n  }\n","date":"2021-04-01 14:26:14","endLine":584,"groupId":"102257","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testFilterPushDown2Literal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/11/a6b6781e78ab28c604de2aedb2b86f9e36bf7e.src","preCode":"  public void testFilterPushDown2Literal() {\n    String sql2Literal = String.format(\"SELECT * FROM %s WHERE 1 > 0 \", TABLE_NAME);\n    List<Object[]> result = sql(sql2Literal);\n    List<Object[]> expectedRecords = Lists.newArrayList();\n    expectedRecords.add(new Object[] {1, \"iceberg\", 10.0});\n    expectedRecords.add(new Object[] {2, \"b\", 20.0});\n    expectedRecords.add(new Object[] {3, null, 30.0});\n    Assert.assertArrayEquals(\"Should produce the expected record\", expectedRecords.toArray(), result.toArray());\n    Assert.assertEquals(\"Should not push down a filter\", Expressions.alwaysTrue(), lastScanEvent.filter());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"988a33cb58981c3fabb221f6b49ed9dd176c9abd","commitMessage":"@@@Tests: Get row collection from flink sql query. (#2386)\n\n","date":"2021-04-01 14:26:14","modifiedFileCount":"3","status":"M","submitter":"openinx"}]
