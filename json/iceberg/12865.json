[{"authorTime":"2021-02-23 08:16:04","codes":[{"authorDate":"2021-02-23 08:16:04","commitOrder":10,"curCode":"  private static String toJsonWithoutSpecAndSchemaList(TableMetadata metadata) {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n\n      generator.writeStartObject(); \r\n\n      generator.writeNumberField(FORMAT_VERSION, 1);\n      generator.writeStringField(LOCATION, metadata.location());\n      generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n      generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n      \r\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n\n      \r\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n\n      generator.writeObjectFieldStart(PROPERTIES);\n      for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n        generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n      }\n      generator.writeEndObject();\n\n      generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n          metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n      generator.writeArrayFieldStart(SNAPSHOTS);\n      for (Snapshot snapshot : metadata.snapshots()) {\n        SnapshotParser.toJson(snapshot, generator);\n      }\n      generator.writeEndArray();\n      \r\n\n      generator.writeEndObject(); \r\n\n      generator.flush();\n    } catch (IOException e) {\n      throw new UncheckedIOException(String.format(\"Failed to write json for: %s\", metadata), e);\n    }\n    return writer.toString();\n  }\n","date":"2021-02-23 08:16:04","endLine":271,"groupId":"3875","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toJsonWithoutSpecAndSchemaList","params":"(TableMetadatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/42/c46076b134ca1e739d7d5f5ee0248ff23851c4.src","preCode":"  private static String toJsonWithoutSpecAndSchemaList(TableMetadata metadata) {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n\n      generator.writeStartObject(); \r\n\n      generator.writeNumberField(FORMAT_VERSION, 1);\n      generator.writeStringField(LOCATION, metadata.location());\n      generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n      generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n      \r\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n\n      \r\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n\n      generator.writeObjectFieldStart(PROPERTIES);\n      for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n        generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n      }\n      generator.writeEndObject();\n\n      generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n          metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n      generator.writeArrayFieldStart(SNAPSHOTS);\n      for (Snapshot snapshot : metadata.snapshots()) {\n        SnapshotParser.toJson(snapshot, generator);\n      }\n      generator.writeEndArray();\n      \r\n\n      generator.writeEndObject(); \r\n\n      generator.flush();\n    } catch (IOException e) {\n      throw new UncheckedIOException(String.format(\"Failed to write json for: %s\", metadata), e);\n    }\n    return writer.toString();\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"B"},{"authorDate":"2021-02-23 08:16:04","commitOrder":10,"curCode":"  private static void toJson(TableMetadata metadata, JsonGenerator generator) throws IOException {\n    generator.writeStartObject();\n\n    generator.writeNumberField(FORMAT_VERSION, metadata.formatVersion());\n    generator.writeStringField(TABLE_UUID, metadata.uuid());\n    generator.writeStringField(LOCATION, metadata.location());\n    if (metadata.formatVersion() > 1) {\n      generator.writeNumberField(LAST_SEQUENCE_NUMBER, metadata.lastSequenceNumber());\n    }\n    generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n    generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n    \r\n    \r\n    if (metadata.formatVersion() == 1) {\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n    }\n\n    \r\n    generator.writeNumberField(CURRENT_SCHEMA_ID, metadata.currentSchemaId());\n    generator.writeArrayFieldStart(SCHEMAS);\n    for (Schema schema : metadata.schemas()) {\n      SchemaParser.toJson(schema, generator);\n    }\n    generator.writeEndArray();\n\n    \r\n    if (metadata.formatVersion() == 1) {\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n    }\n\n    \r\n    generator.writeNumberField(DEFAULT_SPEC_ID, metadata.defaultSpecId());\n    generator.writeArrayFieldStart(PARTITION_SPECS);\n    for (PartitionSpec spec : metadata.specs()) {\n      PartitionSpecParser.toJson(spec, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeNumberField(LAST_PARTITION_ID, metadata.lastAssignedPartitionId());\n\n    generator.writeNumberField(DEFAULT_SORT_ORDER_ID, metadata.defaultSortOrderId());\n    generator.writeArrayFieldStart(SORT_ORDERS);\n    for (SortOrder sortOrder : metadata.sortOrders()) {\n      SortOrderParser.toJson(sortOrder, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeObjectFieldStart(PROPERTIES);\n    for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n      generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n    }\n    generator.writeEndObject();\n\n    generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n        metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n    generator.writeArrayFieldStart(SNAPSHOTS);\n    for (Snapshot snapshot : metadata.snapshots()) {\n      SnapshotParser.toJson(snapshot, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeArrayFieldStart(SNAPSHOT_LOG);\n    for (HistoryEntry logEntry : metadata.snapshotLog()) {\n      generator.writeStartObject();\n      generator.writeNumberField(TIMESTAMP_MS, logEntry.timestampMillis());\n      generator.writeNumberField(SNAPSHOT_ID, logEntry.snapshotId());\n      generator.writeEndObject();\n    }\n    generator.writeEndArray();\n\n    generator.writeArrayFieldStart(METADATA_LOG);\n    for (MetadataLogEntry logEntry : metadata.previousFiles()) {\n      generator.writeStartObject();\n      generator.writeNumberField(TIMESTAMP_MS, logEntry.timestampMillis());\n      generator.writeStringField(METADATA_FILE, logEntry.file());\n      generator.writeEndObject();\n    }\n    generator.writeEndArray();\n\n    generator.writeEndObject();\n  }\n","date":"2021-02-23 08:16:04","endLine":239,"groupId":"2043","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toJson","params":"(TableMetadatametadata@JsonGeneratorgenerator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/69/dae5c16ebadd98222aab2f3d9f26770c1549d5.src","preCode":"  private static void toJson(TableMetadata metadata, JsonGenerator generator) throws IOException {\n    generator.writeStartObject();\n\n    generator.writeNumberField(FORMAT_VERSION, metadata.formatVersion());\n    generator.writeStringField(TABLE_UUID, metadata.uuid());\n    generator.writeStringField(LOCATION, metadata.location());\n    if (metadata.formatVersion() > 1) {\n      generator.writeNumberField(LAST_SEQUENCE_NUMBER, metadata.lastSequenceNumber());\n    }\n    generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n    generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n    \r\n    \r\n    if (metadata.formatVersion() == 1) {\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n    }\n\n    \r\n    generator.writeNumberField(CURRENT_SCHEMA_ID, metadata.currentSchemaId());\n    generator.writeArrayFieldStart(SCHEMAS);\n    for (Schema schema : metadata.schemas()) {\n      SchemaParser.toJson(schema, generator);\n    }\n    generator.writeEndArray();\n\n    \r\n    if (metadata.formatVersion() == 1) {\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n    }\n\n    \r\n    generator.writeNumberField(DEFAULT_SPEC_ID, metadata.defaultSpecId());\n    generator.writeArrayFieldStart(PARTITION_SPECS);\n    for (PartitionSpec spec : metadata.specs()) {\n      PartitionSpecParser.toJson(spec, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeNumberField(LAST_PARTITION_ID, metadata.lastAssignedPartitionId());\n\n    generator.writeNumberField(DEFAULT_SORT_ORDER_ID, metadata.defaultSortOrderId());\n    generator.writeArrayFieldStart(SORT_ORDERS);\n    for (SortOrder sortOrder : metadata.sortOrders()) {\n      SortOrderParser.toJson(sortOrder, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeObjectFieldStart(PROPERTIES);\n    for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n      generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n    }\n    generator.writeEndObject();\n\n    generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n        metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n    generator.writeArrayFieldStart(SNAPSHOTS);\n    for (Snapshot snapshot : metadata.snapshots()) {\n      SnapshotParser.toJson(snapshot, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeArrayFieldStart(SNAPSHOT_LOG);\n    for (HistoryEntry logEntry : metadata.snapshotLog()) {\n      generator.writeStartObject();\n      generator.writeNumberField(TIMESTAMP_MS, logEntry.timestampMillis());\n      generator.writeNumberField(SNAPSHOT_ID, logEntry.snapshotId());\n      generator.writeEndObject();\n    }\n    generator.writeEndArray();\n\n    generator.writeArrayFieldStart(METADATA_LOG);\n    for (MetadataLogEntry logEntry : metadata.previousFiles()) {\n      generator.writeStartObject();\n      generator.writeNumberField(TIMESTAMP_MS, logEntry.timestampMillis());\n      generator.writeStringField(METADATA_FILE, logEntry.file());\n      generator.writeEndObject();\n    }\n    generator.writeEndArray();\n\n    generator.writeEndObject();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadataParser.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"MB"}],"commitId":"255e9525c5bfeb7b57e49a2d96178ebe615c5e16","commitMessage":"@@@Core: Add current-schema-id and schemas to table metadata (#2096)\n\n","date":"2021-02-23 08:16:04","modifiedFileCount":"8","status":"M","submitter":"yyanyy"},{"authorTime":"2021-02-23 08:16:04","codes":[{"authorDate":"2021-06-29 08:24:47","commitOrder":11,"curCode":"  private static String toJsonWithoutSpecAndSchemaList(TableMetadata metadata) {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n\n      generator.writeStartObject(); \r\n\n      generator.writeNumberField(FORMAT_VERSION, 1);\n      generator.writeStringField(LOCATION, metadata.location());\n      generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n      generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n      \r\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema().asStruct(), generator);\n\n      \r\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n\n      generator.writeObjectFieldStart(PROPERTIES);\n      for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n        generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n      }\n      generator.writeEndObject();\n\n      generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n          metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n      generator.writeArrayFieldStart(SNAPSHOTS);\n      for (Snapshot snapshot : metadata.snapshots()) {\n        SnapshotParser.toJson(snapshot, generator);\n      }\n      generator.writeEndArray();\n      \r\n\n      generator.writeEndObject(); \r\n\n      generator.flush();\n    } catch (IOException e) {\n      throw new UncheckedIOException(String.format(\"Failed to write json for: %s\", metadata), e);\n    }\n    return writer.toString();\n  }\n","date":"2021-06-29 08:24:47","endLine":284,"groupId":"12865","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toJsonWithoutSpecAndSchemaList","params":"(TableMetadatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d3/cebec1f3287b4f19ba6b60d947d8babf685be1.src","preCode":"  private static String toJsonWithoutSpecAndSchemaList(TableMetadata metadata) {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n\n      generator.writeStartObject(); \r\n\n      generator.writeNumberField(FORMAT_VERSION, 1);\n      generator.writeStringField(LOCATION, metadata.location());\n      generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n      generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n      \r\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n\n      \r\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n\n      generator.writeObjectFieldStart(PROPERTIES);\n      for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n        generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n      }\n      generator.writeEndObject();\n\n      generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n          metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n      generator.writeArrayFieldStart(SNAPSHOTS);\n      for (Snapshot snapshot : metadata.snapshots()) {\n        SnapshotParser.toJson(snapshot, generator);\n      }\n      generator.writeEndArray();\n      \r\n\n      generator.writeEndObject(); \r\n\n      generator.flush();\n    } catch (IOException e) {\n      throw new UncheckedIOException(String.format(\"Failed to write json for: %s\", metadata), e);\n    }\n    return writer.toString();\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2021-02-23 08:16:04","commitOrder":11,"curCode":"  private static void toJson(TableMetadata metadata, JsonGenerator generator) throws IOException {\n    generator.writeStartObject();\n\n    generator.writeNumberField(FORMAT_VERSION, metadata.formatVersion());\n    generator.writeStringField(TABLE_UUID, metadata.uuid());\n    generator.writeStringField(LOCATION, metadata.location());\n    if (metadata.formatVersion() > 1) {\n      generator.writeNumberField(LAST_SEQUENCE_NUMBER, metadata.lastSequenceNumber());\n    }\n    generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n    generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n    \r\n    \r\n    if (metadata.formatVersion() == 1) {\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n    }\n\n    \r\n    generator.writeNumberField(CURRENT_SCHEMA_ID, metadata.currentSchemaId());\n    generator.writeArrayFieldStart(SCHEMAS);\n    for (Schema schema : metadata.schemas()) {\n      SchemaParser.toJson(schema, generator);\n    }\n    generator.writeEndArray();\n\n    \r\n    if (metadata.formatVersion() == 1) {\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n    }\n\n    \r\n    generator.writeNumberField(DEFAULT_SPEC_ID, metadata.defaultSpecId());\n    generator.writeArrayFieldStart(PARTITION_SPECS);\n    for (PartitionSpec spec : metadata.specs()) {\n      PartitionSpecParser.toJson(spec, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeNumberField(LAST_PARTITION_ID, metadata.lastAssignedPartitionId());\n\n    generator.writeNumberField(DEFAULT_SORT_ORDER_ID, metadata.defaultSortOrderId());\n    generator.writeArrayFieldStart(SORT_ORDERS);\n    for (SortOrder sortOrder : metadata.sortOrders()) {\n      SortOrderParser.toJson(sortOrder, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeObjectFieldStart(PROPERTIES);\n    for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n      generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n    }\n    generator.writeEndObject();\n\n    generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n        metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n    generator.writeArrayFieldStart(SNAPSHOTS);\n    for (Snapshot snapshot : metadata.snapshots()) {\n      SnapshotParser.toJson(snapshot, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeArrayFieldStart(SNAPSHOT_LOG);\n    for (HistoryEntry logEntry : metadata.snapshotLog()) {\n      generator.writeStartObject();\n      generator.writeNumberField(TIMESTAMP_MS, logEntry.timestampMillis());\n      generator.writeNumberField(SNAPSHOT_ID, logEntry.snapshotId());\n      generator.writeEndObject();\n    }\n    generator.writeEndArray();\n\n    generator.writeArrayFieldStart(METADATA_LOG);\n    for (MetadataLogEntry logEntry : metadata.previousFiles()) {\n      generator.writeStartObject();\n      generator.writeNumberField(TIMESTAMP_MS, logEntry.timestampMillis());\n      generator.writeStringField(METADATA_FILE, logEntry.file());\n      generator.writeEndObject();\n    }\n    generator.writeEndArray();\n\n    generator.writeEndObject();\n  }\n","date":"2021-02-23 08:16:04","endLine":239,"groupId":"12865","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toJson","params":"(TableMetadatametadata@JsonGeneratorgenerator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/69/dae5c16ebadd98222aab2f3d9f26770c1549d5.src","preCode":"  private static void toJson(TableMetadata metadata, JsonGenerator generator) throws IOException {\n    generator.writeStartObject();\n\n    generator.writeNumberField(FORMAT_VERSION, metadata.formatVersion());\n    generator.writeStringField(TABLE_UUID, metadata.uuid());\n    generator.writeStringField(LOCATION, metadata.location());\n    if (metadata.formatVersion() > 1) {\n      generator.writeNumberField(LAST_SEQUENCE_NUMBER, metadata.lastSequenceNumber());\n    }\n    generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n    generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n    \r\n    \r\n    if (metadata.formatVersion() == 1) {\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n    }\n\n    \r\n    generator.writeNumberField(CURRENT_SCHEMA_ID, metadata.currentSchemaId());\n    generator.writeArrayFieldStart(SCHEMAS);\n    for (Schema schema : metadata.schemas()) {\n      SchemaParser.toJson(schema, generator);\n    }\n    generator.writeEndArray();\n\n    \r\n    if (metadata.formatVersion() == 1) {\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n    }\n\n    \r\n    generator.writeNumberField(DEFAULT_SPEC_ID, metadata.defaultSpecId());\n    generator.writeArrayFieldStart(PARTITION_SPECS);\n    for (PartitionSpec spec : metadata.specs()) {\n      PartitionSpecParser.toJson(spec, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeNumberField(LAST_PARTITION_ID, metadata.lastAssignedPartitionId());\n\n    generator.writeNumberField(DEFAULT_SORT_ORDER_ID, metadata.defaultSortOrderId());\n    generator.writeArrayFieldStart(SORT_ORDERS);\n    for (SortOrder sortOrder : metadata.sortOrders()) {\n      SortOrderParser.toJson(sortOrder, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeObjectFieldStart(PROPERTIES);\n    for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n      generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n    }\n    generator.writeEndObject();\n\n    generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n        metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n    generator.writeArrayFieldStart(SNAPSHOTS);\n    for (Snapshot snapshot : metadata.snapshots()) {\n      SnapshotParser.toJson(snapshot, generator);\n    }\n    generator.writeEndArray();\n\n    generator.writeArrayFieldStart(SNAPSHOT_LOG);\n    for (HistoryEntry logEntry : metadata.snapshotLog()) {\n      generator.writeStartObject();\n      generator.writeNumberField(TIMESTAMP_MS, logEntry.timestampMillis());\n      generator.writeNumberField(SNAPSHOT_ID, logEntry.snapshotId());\n      generator.writeEndObject();\n    }\n    generator.writeEndArray();\n\n    generator.writeArrayFieldStart(METADATA_LOG);\n    for (MetadataLogEntry logEntry : metadata.previousFiles()) {\n      generator.writeStartObject();\n      generator.writeNumberField(TIMESTAMP_MS, logEntry.timestampMillis());\n      generator.writeStringField(METADATA_FILE, logEntry.file());\n      generator.writeEndObject();\n    }\n    generator.writeEndArray();\n\n    generator.writeEndObject();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadataParser.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"N"}],"commitId":"d4d376bb559e8dc83da3cb7ecbb8ff9205d68f21","commitMessage":"@@@Core: Add schema-id to snapshots (#2275)\n\n","date":"2021-06-29 08:24:47","modifiedFileCount":"13","status":"M","submitter":"yyanyy"}]
