[{"authorTime":"2020-09-04 02:04:52","codes":[{"authorDate":"2020-09-04 13:48:01","commitOrder":2,"curCode":"  public void testCreateTableDefaultSortOrder() {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n\n    try {\n      Table table = catalog.createTable(tableIdent, schema, spec);\n      Assert.assertEquals(\"Order ID must match\", 0, table.sortOrder().orderId());\n      Assert.assertTrue(\"Order must unsorted\", table.sortOrder().isUnsorted());\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","date":"2020-09-04 13:48:01","endLine":205,"groupId":"1801","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableDefaultSortOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f1/cdade1e5b301538d2181addea12d98575025ab.src","preCode":"  public void testCreateTableDefaultSortOrder() {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n\n    try {\n      Table table = catalog.createTable(tableIdent, schema, spec);\n      Assert.assertEquals(\"Order ID must match\", 0, table.sortOrder().orderId());\n      Assert.assertTrue(\"Order must unsorted\", table.sortOrder().isUnsorted());\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","realPath":"hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"},{"authorDate":"2020-09-04 02:04:52","commitOrder":2,"curCode":"  public void testReplaceTxnBuilder() throws Exception {\n    Configuration conf = new Configuration();\n    String warehousePath = temp.newFolder().getAbsolutePath();\n    HadoopCatalog catalog = new HadoopCatalog(conf, warehousePath);\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n\n    Transaction createTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(SPEC)\n        .withProperty(\"key1\", \"value1\")\n        .createOrReplaceTransaction();\n\n    createTxn.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    createTxn.commitTransaction();\n\n    Table table = catalog.loadTable(tableIdent);\n    Assert.assertNotNull(table.currentSnapshot());\n\n    Transaction replaceTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withProperty(\"key2\", \"value2\")\n        .replaceTransaction();\n    replaceTxn.commitTransaction();\n\n    table = catalog.loadTable(tableIdent);\n    Assert.assertNull(table.currentSnapshot());\n    Assert.assertTrue(table.spec().isUnpartitioned());\n    Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n    Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n  }\n","date":"2020-09-04 02:04:52","endLine":111,"groupId":"2107","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReplaceTxnBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/5d/427d5263368a0fc1836886c5a489d32ee0055c.src","preCode":"  public void testReplaceTxnBuilder() throws Exception {\n    Configuration conf = new Configuration();\n    String warehousePath = temp.newFolder().getAbsolutePath();\n    HadoopCatalog catalog = new HadoopCatalog(conf, warehousePath);\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n\n    Transaction createTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(SPEC)\n        .withProperty(\"key1\", \"value1\")\n        .createOrReplaceTransaction();\n\n    createTxn.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    createTxn.commitTransaction();\n\n    Table table = catalog.loadTable(tableIdent);\n    Assert.assertNotNull(table.currentSnapshot());\n\n    Transaction replaceTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withProperty(\"key2\", \"value2\")\n        .replaceTransaction();\n    replaceTxn.commitTransaction();\n\n    table = catalog.loadTable(tableIdent);\n    Assert.assertNull(table.currentSnapshot());\n    Assert.assertTrue(table.spec().isUnpartitioned());\n    Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n    Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"NB"}],"commitId":"454101c3573acb9cd94d6d9a306ed99a5a324ed9","commitMessage":"@@@API: Implement SortOrder (#1373)\n\nThis commit extends Iceberg metadata with a sort order that defines how data and delete files should be ordered.","date":"2020-09-04 13:48:01","modifiedFileCount":"17","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2021-08-03 22:39:58","codes":[{"authorDate":"2020-09-04 13:48:01","commitOrder":3,"curCode":"  public void testCreateTableDefaultSortOrder() {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n\n    try {\n      Table table = catalog.createTable(tableIdent, schema, spec);\n      Assert.assertEquals(\"Order ID must match\", 0, table.sortOrder().orderId());\n      Assert.assertTrue(\"Order must unsorted\", table.sortOrder().isUnsorted());\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","date":"2020-09-04 13:48:01","endLine":205,"groupId":"10915","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableDefaultSortOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f1/cdade1e5b301538d2181addea12d98575025ab.src","preCode":"  public void testCreateTableDefaultSortOrder() {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n\n    try {\n      Table table = catalog.createTable(tableIdent, schema, spec);\n      Assert.assertEquals(\"Order ID must match\", 0, table.sortOrder().orderId());\n      Assert.assertTrue(\"Order must unsorted\", table.sortOrder().isUnsorted());\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","realPath":"hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"N"},{"authorDate":"2021-08-03 22:39:58","commitOrder":3,"curCode":"  public void testReplaceTxnBuilder() throws Exception {\n    Configuration conf = new Configuration();\n    String warehousePath = temp.newFolder().getAbsolutePath();\n    HadoopCatalog catalog = new HadoopCatalog(conf, warehousePath);\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n\n    Transaction createTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(SPEC)\n        .withProperty(\"key1\", \"value1\")\n        .createOrReplaceTransaction();\n\n    createTxn.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    createTxn.commitTransaction();\n\n    Table table = catalog.loadTable(tableIdent);\n    Assert.assertNotNull(table.currentSnapshot());\n\n    Transaction replaceTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withProperty(\"key2\", \"value2\")\n        .replaceTransaction();\n    replaceTxn.commitTransaction();\n\n    table = catalog.loadTable(tableIdent);\n    Assert.assertNull(table.currentSnapshot());\n    PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema())\n        .alwaysNull(\"data\", \"data_bucket\")\n        .withSpecId(1)\n        .build();\n    Assert.assertEquals(\"Table should have a spec with one void field\",\n        v1Expected, table.spec());\n\n    Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n    Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n  }\n","date":"2021-08-03 22:39:58","endLine":130,"groupId":"10915","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReplaceTxnBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/be/bf5b5b32c191f46b224b2c182aafaf6c801dbf.src","preCode":"  public void testReplaceTxnBuilder() throws Exception {\n    Configuration conf = new Configuration();\n    String warehousePath = temp.newFolder().getAbsolutePath();\n    HadoopCatalog catalog = new HadoopCatalog(conf, warehousePath);\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n\n    Transaction createTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(SPEC)\n        .withProperty(\"key1\", \"value1\")\n        .createOrReplaceTransaction();\n\n    createTxn.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n\n    createTxn.commitTransaction();\n\n    Table table = catalog.loadTable(tableIdent);\n    Assert.assertNotNull(table.currentSnapshot());\n\n    Transaction replaceTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withProperty(\"key2\", \"value2\")\n        .replaceTransaction();\n    replaceTxn.commitTransaction();\n\n    table = catalog.loadTable(tableIdent);\n    Assert.assertNull(table.currentSnapshot());\n    Assert.assertTrue(table.spec().isUnpartitioned());\n    Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n    Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"a42a546a5e0b32fc5634626e28d10f0c29f838fe","commitMessage":"@@@Core: Fix partition field IDs in table replacement (#2906)\n\nCo-authored-by: Jun He <jun-he@users.noreply.github.com>","date":"2021-08-03 22:39:58","modifiedFileCount":"7","status":"M","submitter":"Ryan Blue"}]
