[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public static TableMetadata newTableMetadata(TableOperations ops,\n                                               Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(ops, null, location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2019-03-21 07:25:05","endLine":80,"groupId":"3653","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(TableOperationsops@Schemaschema@PartitionSpecspec@Stringlocation@Map<String@String>properties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ef/ae379ba19b38a3901e21abc69f34a850bc71af.src","preCode":"  public static TableMetadata newTableMetadata(TableOperations ops,\n                                               Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(ops, null, location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2019-03-21 07:25:05","endLine":440,"groupId":"4192","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ef/ae379ba19b38a3901e21abc69f34a850bc71af.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-07-10 02:03:21","commitOrder":2,"curCode":"  public static TableMetadata newTableMetadata(TableOperations ops,\n                                               Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(ops, null, UUID.randomUUID().toString(), location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2019-07-10 02:03:21","endLine":82,"groupId":"3653","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(TableOperationsops@Schemaschema@PartitionSpecspec@Stringlocation@Map<String@String>properties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/61/209095586411520ddaccc20a695d1672eb1305.src","preCode":"  public static TableMetadata newTableMetadata(TableOperations ops,\n                                               Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(ops, null, location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2019-03-21 07:25:05","endLine":440,"groupId":"4192","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ef/ae379ba19b38a3901e21abc69f34a850bc71af.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"}],"commitId":"13002b534555fbf1b43ad824e7757293e8b49cf4","commitMessage":"@@@Add table UUID (#264)\n\n","date":"2019-07-10 02:03:21","modifiedFileCount":"6","status":"M","submitter":"Ryan Blue"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-11-16 08:51:06","commitOrder":3,"curCode":"  public static TableMetadata newTableMetadata(TableOperations ops,\n                                               Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(ops, null, UUID.randomUUID().toString(), location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2019-11-16 08:51:06","endLine":83,"groupId":"3653","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(TableOperationsops@Schemaschema@PartitionSpecspec@Stringlocation@Map<String@String>properties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ba/a369a018d6373512fd24db245018f034aea966.src","preCode":"  public static TableMetadata newTableMetadata(TableOperations ops,\n                                               Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(ops, null, UUID.randomUUID().toString(), location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":3,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2019-03-21 07:25:05","endLine":440,"groupId":"4192","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ef/ae379ba19b38a3901e21abc69f34a850bc71af.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"}],"commitId":"c4cc4dcc427ddd62b8ae88b4120d6783d787b09e","commitMessage":"@@@Add mechanism to track and remove old metadata files (#631)\n\n","date":"2019-11-16 08:51:06","modifiedFileCount":"5","status":"M","submitter":"yathindranath"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-11-21 01:48:39","commitOrder":4,"curCode":"  public static TableMetadata newTableMetadata(Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, UUID.randomUUID().toString(), location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2019-11-21 01:48:39","endLine":81,"groupId":"1105","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@Stringlocation@Map<String@String>properties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a5/081a6b45d98b0265beffcb15ce702deb22d43b.src","preCode":"  public static TableMetadata newTableMetadata(TableOperations ops,\n                                               Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(ops, null, UUID.randomUUID().toString(), location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":4,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2019-03-21 07:25:05","endLine":440,"groupId":"4192","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ef/ae379ba19b38a3901e21abc69f34a850bc71af.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"}],"commitId":"083edc1f749d9a64cd4042fb360a27a0a3bfe03c","commitMessage":"@@@Decouple TableMetadataParser and TableMetadata from TableOperations (#591)\n\nThe rationale behind not using TableOperations is:\n1. It saves the need to construct a TableOperations instance when you\n?? want to get a table's metadata by parsing its metadata files.\n2. It's more intuitive because a TableMetadata instance reflects a\n?? table's state and is determined by only a set of metadata files.","date":"2019-11-21 01:48:39","modifiedFileCount":"19","status":"M","submitter":"Xingyuan Lin"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2020-04-10 03:14:34","commitOrder":5,"curCode":"  public static TableMetadata newTableMetadata(Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, DEFAULT_TABLE_FORMAT_VERSION, UUID.randomUUID().toString(), location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-04-10 03:14:34","endLine":76,"groupId":"4302","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@Stringlocation@Map<String@String>properties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/4d/12cf5ce84c370fa98ed513c21830bbbf9dc5ac.src","preCode":"  public static TableMetadata newTableMetadata(Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, UUID.randomUUID().toString(), location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":5,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2019-03-21 07:25:05","endLine":440,"groupId":"4192","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ef/ae379ba19b38a3901e21abc69f34a850bc71af.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"}],"commitId":"c094da57db072187b2d930ae6c5590218012ec3f","commitMessage":"@@@Prepare metadata writers for format v2 (#903)\n\n* Track format version in TableMetadata.\n* Pass formatVersion when creating a manifest writer.\n* Pass formatVersion when creating a manifest list writer.\n* Add v2 change section to spec.","date":"2020-04-10 03:14:34","modifiedFileCount":"12","status":"M","submitter":"Ryan Blue"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2020-04-11 07:02:33","commitOrder":6,"curCode":"  public static TableMetadata newTableMetadata(Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, DEFAULT_TABLE_FORMAT_VERSION, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-04-11 07:02:33","endLine":77,"groupId":"4302","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@Stringlocation@Map<String@String>properties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f3/bd7b226f9acc00a154e5b271870a639551114a.src","preCode":"  public static TableMetadata newTableMetadata(Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, DEFAULT_TABLE_FORMAT_VERSION, UUID.randomUUID().toString(), location,\n        System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":6,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2019-03-21 07:25:05","endLine":440,"groupId":"4192","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ef/ae379ba19b38a3901e21abc69f34a850bc71af.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"}],"commitId":"720b240a3e6a32b6f01173ebcc448c2c6e32e13a","commitMessage":"@@@Update Snapshot and TableMetadata with sequence numbers (#910)\n\n","date":"2020-04-11 07:02:33","modifiedFileCount":"11","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-04-16 04:13:35","codes":[{"authorDate":"2020-04-11 07:02:33","commitOrder":7,"curCode":"  public static TableMetadata newTableMetadata(Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, DEFAULT_TABLE_FORMAT_VERSION, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-04-11 07:02:33","endLine":77,"groupId":"4302","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@Stringlocation@Map<String@String>properties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f3/bd7b226f9acc00a154e5b271870a639551114a.src","preCode":"  public static TableMetadata newTableMetadata(Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, DEFAULT_TABLE_FORMAT_VERSION, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2020-04-16 04:13:35","commitOrder":7,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2020-04-16 04:13:35","endLine":640,"groupId":"4192","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/6c4042d64ed88b22845879fddc510daef6db2f.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"M"}],"commitId":"b6cdc694b6b5a1040d6a2ffb4e72446fe52309c4","commitMessage":"@@@Add persistent IDs to partition fields (#845)\n\n","date":"2020-04-16 04:13:35","modifiedFileCount":"10","status":"M","submitter":"jun-he"},{"authorTime":"2020-04-16 04:13:35","codes":[{"authorDate":"2020-04-22 03:50:32","commitOrder":8,"curCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-04-22 03:50:32","endLine":86,"groupId":"4302","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@Stringlocation@Map<String@String>properties@intformatVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1b/1021f6b85422cf049effc5d301c252d1d10d09.src","preCode":"  public static TableMetadata newTableMetadata(Schema schema,\n                                               PartitionSpec spec,\n                                               String location,\n                                               Map<String, String> properties) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, DEFAULT_TABLE_FORMAT_VERSION, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-04-16 04:13:35","commitOrder":8,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2020-04-16 04:13:35","endLine":640,"groupId":"4192","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/6c4042d64ed88b22845879fddc510daef6db2f.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"N"}],"commitId":"a81d11e78fb447f68b2a3e8f98cf02b0c57c7f58","commitMessage":"@@@Update TableTestBase tests to run with formats v1 and v2 (#936)\n\n","date":"2020-04-22 03:50:32","modifiedFileCount":"37","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-04-16 04:13:35","codes":[{"authorDate":"2020-09-04 13:48:01","commitOrder":9,"curCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        SortOrder sortOrder,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    \r\n    int freshSortOrderId = sortOrder.isUnsorted() ? sortOrder.orderId() : INITIAL_SORT_ORDER_ID;\n    SortOrder freshSortOrder = freshSortOrder(freshSortOrderId, freshSchema, sortOrder);\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        freshSortOrderId, ImmutableList.of(freshSortOrder),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-09-04 13:48:01","endLine":119,"groupId":"2315","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@SortOrdersortOrder@Stringlocation@Map<String@String>properties@intformatVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/31/155778969ed81f2c7876fe5815b9df47c8b15e.src","preCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-04-16 04:13:35","commitOrder":9,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2020-04-16 04:13:35","endLine":640,"groupId":"4192","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/6c4042d64ed88b22845879fddc510daef6db2f.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"N"}],"commitId":"454101c3573acb9cd94d6d9a306ed99a5a324ed9","commitMessage":"@@@API: Implement SortOrder (#1373)\n\nThis commit extends Iceberg metadata with a sort order that defines how data and delete files should be ordered.","date":"2020-09-04 13:48:01","modifiedFileCount":"17","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2020-04-16 04:13:35","codes":[{"authorDate":"2021-01-21 10:01:36","commitOrder":10,"curCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        SortOrder sortOrder,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    \r\n    int freshSortOrderId = sortOrder.isUnsorted() ? sortOrder.orderId() : INITIAL_SORT_ORDER_ID;\n    SortOrder freshSortOrder = freshSortOrder(freshSortOrderId, freshSchema, sortOrder);\n\n    \r\n    \r\n    MetricsConfig.fromProperties(properties).validateReferencedColumns(schema);\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        freshSortOrderId, ImmutableList.of(freshSortOrder),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2021-01-21 10:01:36","endLine":123,"groupId":"2315","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@SortOrdersortOrder@Stringlocation@Map<String@String>properties@intformatVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/74/e0db1e32ce1d47ab56eb82bb6a270a24571e33.src","preCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        SortOrder sortOrder,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    \r\n    int freshSortOrderId = sortOrder.isUnsorted() ? sortOrder.orderId() : INITIAL_SORT_ORDER_ID;\n    SortOrder freshSortOrder = freshSortOrder(freshSortOrderId, freshSchema, sortOrder);\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        freshSortOrderId, ImmutableList.of(freshSortOrder),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-04-16 04:13:35","commitOrder":10,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2020-04-16 04:13:35","endLine":640,"groupId":"4192","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/6c4042d64ed88b22845879fddc510daef6db2f.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"N"}],"commitId":"fffdb69358783a83483e1779357579d9e9c72ca6","commitMessage":"@@@Core: Add validation for metrics config (#2048)\n\n","date":"2021-01-21 10:01:36","modifiedFileCount":"6","status":"M","submitter":"Holden Karau"},{"authorTime":"2020-04-16 04:13:35","codes":[{"authorDate":"2021-01-31 05:48:52","commitOrder":11,"curCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        SortOrder sortOrder,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    \r\n    int freshSortOrderId = sortOrder.isUnsorted() ? sortOrder.orderId() : INITIAL_SORT_ORDER_ID;\n    SortOrder freshSortOrder = freshSortOrder(freshSortOrderId, freshSchema, sortOrder);\n\n    \r\n    \r\n    MetricsConfig.fromProperties(properties).validateReferencedColumns(schema);\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        freshSpec.lastAssignedFieldId(), freshSortOrderId, ImmutableList.of(freshSortOrder),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2021-01-31 05:48:52","endLine":123,"groupId":"2315","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@SortOrdersortOrder@Stringlocation@Map<String@String>properties@intformatVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/cf/8e64b0203dd2ed2897b51440dfd8385b3739fd.src","preCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        SortOrder sortOrder,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    \r\n    int freshSortOrderId = sortOrder.isUnsorted() ? sortOrder.orderId() : INITIAL_SORT_ORDER_ID;\n    SortOrder freshSortOrder = freshSortOrder(freshSortOrderId, freshSchema, sortOrder);\n\n    \r\n    \r\n    MetricsConfig.fromProperties(properties).validateReferencedColumns(schema);\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        freshSortOrderId, ImmutableList.of(freshSortOrder),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-04-16 04:13:35","commitOrder":11,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2020-04-16 04:13:35","endLine":640,"groupId":"4192","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/6c4042d64ed88b22845879fddc510daef6db2f.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"N"}],"commitId":"b3e01b74fb8909d0c5aa3f9a1b9468471e03c13c","commitMessage":"@@@Core: Add lastAssignedPartitionId to TableMetadata (#2089)\n\n","date":"2021-01-31 05:48:52","modifiedFileCount":"5","status":"M","submitter":"jun-he"},{"authorTime":"2020-04-16 04:13:35","codes":[{"authorDate":"2021-02-23 08:16:04","commitOrder":12,"curCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        SortOrder sortOrder,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(INITIAL_SCHEMA_ID, schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    \r\n    int freshSortOrderId = sortOrder.isUnsorted() ? sortOrder.orderId() : INITIAL_SORT_ORDER_ID;\n    SortOrder freshSortOrder = freshSortOrder(freshSortOrderId, freshSchema, sortOrder);\n\n    \r\n    \r\n    MetricsConfig.fromProperties(properties).validateReferencedColumns(schema);\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema.schemaId(), ImmutableList.of(freshSchema),\n        freshSpec.specId(), ImmutableList.of(freshSpec), freshSpec.lastAssignedFieldId(),\n        freshSortOrderId, ImmutableList.of(freshSortOrder),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2021-02-23 08:16:04","endLine":125,"groupId":"2315","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@SortOrdersortOrder@Stringlocation@Map<String@String>properties@intformatVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1e/33c54b8ec6d005786743f882bb7125cdcc4e00.src","preCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        SortOrder sortOrder,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    \r\n    int freshSortOrderId = sortOrder.isUnsorted() ? sortOrder.orderId() : INITIAL_SORT_ORDER_ID;\n    SortOrder freshSortOrder = freshSortOrder(freshSortOrderId, freshSchema, sortOrder);\n\n    \r\n    \r\n    MetricsConfig.fromProperties(properties).validateReferencedColumns(schema);\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema, INITIAL_SPEC_ID, ImmutableList.of(freshSpec),\n        freshSpec.lastAssignedFieldId(), freshSortOrderId, ImmutableList.of(freshSortOrder),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-04-16 04:13:35","commitOrder":12,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2020-04-16 04:13:35","endLine":640,"groupId":"4192","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/6c4042d64ed88b22845879fddc510daef6db2f.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"N"}],"commitId":"255e9525c5bfeb7b57e49a2d96178ebe615c5e16","commitMessage":"@@@Core: Add current-schema-id and schemas to table metadata (#2096)\n\n","date":"2021-02-23 08:16:04","modifiedFileCount":"8","status":"M","submitter":"yyanyy"},{"authorTime":"2020-04-16 04:13:35","codes":[{"authorDate":"2021-08-04 06:27:58","commitOrder":13,"curCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        SortOrder sortOrder,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    Preconditions.checkArgument(properties.keySet().stream().noneMatch(TableProperties.RESERVED_PROPERTIES::contains),\n        \"Table properties should not contain reserved properties, but got %s\", properties);\n\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(INITIAL_SCHEMA_ID, schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    \r\n    int freshSortOrderId = sortOrder.isUnsorted() ? sortOrder.orderId() : INITIAL_SORT_ORDER_ID;\n    SortOrder freshSortOrder = freshSortOrder(freshSortOrderId, freshSchema, sortOrder);\n\n    \r\n    \r\n    MetricsConfig.fromProperties(properties).validateReferencedColumns(schema);\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema.schemaId(), ImmutableList.of(freshSchema),\n        freshSpec.specId(), ImmutableList.of(freshSpec), freshSpec.lastAssignedFieldId(),\n        freshSortOrderId, ImmutableList.of(freshSortOrder),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2021-08-04 06:27:58","endLine":131,"groupId":"102130","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"newTableMetadata","params":"(Schemaschema@PartitionSpecspec@SortOrdersortOrder@Stringlocation@Map<String@String>properties@intformatVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/cb/56389cbd09e2533e41b433f657efc70d394946.src","preCode":"  static TableMetadata newTableMetadata(Schema schema,\n                                        PartitionSpec spec,\n                                        SortOrder sortOrder,\n                                        String location,\n                                        Map<String, String> properties,\n                                        int formatVersion) {\n    \r\n    AtomicInteger lastColumnId = new AtomicInteger(0);\n    Schema freshSchema = TypeUtil.assignFreshIds(INITIAL_SCHEMA_ID, schema, lastColumnId::incrementAndGet);\n\n    \r\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(freshSchema)\n        .withSpecId(INITIAL_SPEC_ID);\n    for (PartitionField field : spec.fields()) {\n      \r\n      String sourceName = schema.findColumnName(field.sourceId());\n      \r\n      specBuilder.add(\n          freshSchema.findField(sourceName).fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n    PartitionSpec freshSpec = specBuilder.build();\n\n    \r\n    int freshSortOrderId = sortOrder.isUnsorted() ? sortOrder.orderId() : INITIAL_SORT_ORDER_ID;\n    SortOrder freshSortOrder = freshSortOrder(freshSortOrderId, freshSchema, sortOrder);\n\n    \r\n    \r\n    MetricsConfig.fromProperties(properties).validateReferencedColumns(schema);\n\n    return new TableMetadata(null, formatVersion, UUID.randomUUID().toString(), location,\n        INITIAL_SEQUENCE_NUMBER, System.currentTimeMillis(),\n        lastColumnId.get(), freshSchema.schemaId(), ImmutableList.of(freshSchema),\n        freshSpec.specId(), ImmutableList.of(freshSpec), freshSpec.lastAssignedFieldId(),\n        freshSortOrderId, ImmutableList.of(freshSortOrder),\n        ImmutableMap.copyOf(properties), -1, ImmutableList.of(),\n        ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-04-16 04:13:35","commitOrder":13,"curCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","date":"2020-04-16 04:13:35","endLine":640,"groupId":"102130","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"freshSpec","params":"(intspecId@Schemaschema@PartitionSpecpartitionSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/6c4042d64ed88b22845879fddc510daef6db2f.src","preCode":"  private static PartitionSpec freshSpec(int specId, Schema schema, PartitionSpec partitionSpec) {\n    PartitionSpec.Builder specBuilder = PartitionSpec.builderFor(schema)\n        .withSpecId(specId);\n\n    for (PartitionField field : partitionSpec.fields()) {\n      \r\n      String sourceName = partitionSpec.schema().findColumnName(field.sourceId());\n      specBuilder.add(\n          schema.findField(sourceName).fieldId(),\n          field.fieldId(),\n          field.name(),\n          field.transform().toString());\n    }\n\n    return specBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/TableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"N"}],"commitId":"0b2f0657037c7a5be685ba5f082ba1cc1a145fa1","commitMessage":"@@@Core: Allow creating v2 tables through table property (#2887)\n\n","date":"2021-08-04 06:27:58","modifiedFileCount":"6","status":"M","submitter":"Jack Ye"}]
