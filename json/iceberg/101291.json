[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testAllNulls() {\n    boolean shouldRead = new InclusiveManifestEvaluator(SPEC, notNull(\"all_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: no non-null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, notNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, notNull(\"no_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: non-null column contains a non-null value\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":90,"groupId":"3929","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c6/2d32c261a8e4e2f814e0a162075cac0e3ff30f.src","preCode":"  public void testAllNulls() {\n    boolean shouldRead = new InclusiveManifestEvaluator(SPEC, notNull(\"all_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: no non-null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, notNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, notNull(\"no_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: non-null column contains a non-null value\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testNoNulls() {\n    boolean shouldRead = new InclusiveManifestEvaluator(SPEC, isNull(\"all_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, isNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, isNull(\"no_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":102,"groupId":"3930","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c6/2d32c261a8e4e2f814e0a162075cac0e3ff30f.src","preCode":"  public void testNoNulls() {\n    boolean shouldRead = new InclusiveManifestEvaluator(SPEC, isNull(\"all_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, isNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, isNull(\"no_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-07-13 03:55:36","codes":[{"authorDate":"2019-07-13 03:55:36","commitOrder":2,"curCode":"  public void testAllNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(notNull(\"all_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: no non-null value in all null column\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: non-null column contains a non-null value\", shouldRead);\n  }\n","date":"2019-07-13 03:55:36","endLine":90,"groupId":"2074","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/38/59f0074c73cd6ed7b477e84c5b7698a9a904b6.src","preCode":"  public void testAllNulls() {\n    boolean shouldRead = new InclusiveManifestEvaluator(SPEC, notNull(\"all_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: no non-null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, notNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, notNull(\"no_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: non-null column contains a non-null value\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2019-07-13 03:55:36","commitOrder":2,"curCode":"  public void testNoNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(isNull(\"all_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","date":"2019-07-13 03:55:36","endLine":102,"groupId":"813","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/38/59f0074c73cd6ed7b477e84c5b7698a9a904b6.src","preCode":"  public void testNoNulls() {\n    boolean shouldRead = new InclusiveManifestEvaluator(SPEC, isNull(\"all_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, isNull(\"some_nulls\")).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, isNull(\"no_nulls\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"e4c6fb979003b1629961b0c950ec6acec994de3b","commitMessage":"@@@Add metadata tables (#252)\n\nThis commit adds metadata tables:\n* history -- the snapshot log\n* snapshots -- known snapshots\n* manifests -- manifest files for a snapshot\n* files -- data files for a snapshot\n* entries -- manifest entries for a snapshot","date":"2019-07-13 03:55:36","modifiedFileCount":"23","status":"M","submitter":"Ryan Blue"},{"authorTime":"2019-07-13 03:55:36","codes":[{"authorDate":"2019-08-28 01:16:08","commitOrder":3,"curCode":"  public void testAllNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(notNull(\"all_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: no non-null value in all null column\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: non-null column contains a non-null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(startsWith(\"all_nulls\", \"asad\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: startsWith on all null column\", shouldRead);\n  }\n","date":"2019-08-28 01:16:08","endLine":94,"groupId":"2074","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0b/909ca503044bf0a99b6c93867d4c424d591798.src","preCode":"  public void testAllNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(notNull(\"all_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: no non-null value in all null column\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: non-null column contains a non-null value\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-07-13 03:55:36","commitOrder":3,"curCode":"  public void testNoNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(isNull(\"all_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","date":"2019-07-13 03:55:36","endLine":102,"groupId":"813","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/38/59f0074c73cd6ed7b477e84c5b7698a9a904b6.src","preCode":"  public void testNoNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(isNull(\"all_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"3c3460433d2f4f5601dab2aebad870e9b3abdec4","commitMessage":"@@@Push down StringStartsWith in Spark IcebergSource (#398)\n\n","date":"2019-08-28 01:16:08","modifiedFileCount":"13","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2021-02-06 01:38:12","codes":[{"authorDate":"2021-02-06 01:38:12","commitOrder":4,"curCode":"  public void testAllNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(notNull(\"all_nulls_missing_nan\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: all nulls column with non-floating type contains all null\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"all_nulls_missing_nan_float\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: no NaN information may indicate presence of NaN value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: non-null column contains a non-null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(startsWith(\"all_nulls_missing_nan\", \"asad\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: startsWith on all null column\", shouldRead);\n  }\n","date":"2021-02-06 01:38:12","endLine":131,"groupId":"101291","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/97/2fc8ed5871349fa44f381b6bf62480b397ddd4.src","preCode":"  public void testAllNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(notNull(\"all_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: no non-null value in all null column\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a non-null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(notNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: non-null column contains a non-null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(startsWith(\"all_nulls\", \"asad\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: startsWith on all null column\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2021-02-06 01:38:12","commitOrder":4,"curCode":"  public void testNoNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(isNull(\"all_nulls_missing_nan\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"both_nan_and_null\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: both_nan_and_null column contains no null values\", shouldRead);\n  }\n","date":"2021-02-06 01:38:12","endLine":146,"groupId":"101291","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/97/2fc8ed5871349fa44f381b6bf62480b397ddd4.src","preCode":"  public void testNoNulls() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(isNull(\"all_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: at least one null value in all null column\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"some_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: column with some nulls contains a null value\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(isNull(\"no_nulls\"), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"8a84715205631a17668ec8d63a791a25fb511992","commitMessage":"@@@Core: Add contains_nan to manifest list partition summaries (#1872)\n\n","date":"2021-02-06 01:38:12","modifiedFileCount":"13","status":"M","submitter":"yyanyy"}]
