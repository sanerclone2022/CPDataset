[{"authorTime":"2020-01-08 03:07:45","codes":[{"authorDate":"2020-01-08 03:07:45","commitOrder":1,"curCode":"  public static TypeDescription convert(Schema schema) {\n    final TypeDescription root = TypeDescription.createStruct();\n    final Types.StructType schemaRoot = schema.asStruct();\n    for (Types.NestedField field : schemaRoot.asStructType().fields()) {\n      TypeDescription orcColumType = convert(field.fieldId(), field.type(), field.isRequired());\n      root.addField(field.name(), orcColumType);\n    }\n    return root;\n  }\n","date":"2020-01-08 03:07:45","endLine":104,"groupId":"896","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/55/8650aec9670663e1bb417dfc0370d71fcb60c4.src","preCode":"  public static TypeDescription convert(Schema schema) {\n    final TypeDescription root = TypeDescription.createStruct();\n    final Types.StructType schemaRoot = schema.asStruct();\n    for (Types.NestedField field : schemaRoot.asStructType().fields()) {\n      TypeDescription orcColumType = convert(field.fieldId(), field.type(), field.isRequired());\n      root.addField(field.name(), orcColumType);\n    }\n    return root;\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2020-01-08 03:07:45","commitOrder":1,"curCode":"  private static TypeDescription convert(Integer fieldId, Type type, boolean isRequired) {\n    final TypeDescription orcType;\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n        orcType = TypeDescription.createBoolean();\n        break;\n      case INTEGER:\n        orcType = TypeDescription.createInt();\n        orcType.setAttribute(ICEBERG_INTEGER_TYPE_ATTRIBUTE, IntegerType.INTEGER.toString());\n        break;\n      case TIME:\n        orcType = TypeDescription.createInt();\n        orcType.setAttribute(ICEBERG_INTEGER_TYPE_ATTRIBUTE, IntegerType.TIME.toString());\n        break;\n      case LONG:\n        orcType = TypeDescription.createLong();\n        break;\n      case FLOAT:\n        orcType = TypeDescription.createFloat();\n        break;\n      case DOUBLE:\n        orcType = TypeDescription.createDouble();\n        break;\n      case DATE:\n        orcType = TypeDescription.createDate();\n        break;\n      case TIMESTAMP:\n        orcType = TypeDescription.createTimestamp();\n        break;\n      case STRING:\n        orcType = TypeDescription.createString();\n        break;\n      case UUID:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.UUID.toString());\n        break;\n      case FIXED:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.FIXED.toString());\n        orcType.setAttribute(ICEBERG_FIELD_LENGTH, Integer.toString(((Types.FixedType) type).length()));\n        break;\n      case BINARY:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.BINARY.toString());\n        break;\n      case DECIMAL: {\n        Types.DecimalType decimal = (Types.DecimalType) type;\n        orcType = TypeDescription.createDecimal()\n            .withScale(decimal.scale())\n            .withPrecision(decimal.precision());\n        break;\n      }\n      case STRUCT: {\n        orcType = TypeDescription.createStruct();\n        for (Types.NestedField field : type.asStructType().fields()) {\n          TypeDescription childType = convert(field.fieldId(), field.type(), field.isRequired());\n          orcType.addField(field.name(), childType);\n        }\n        break;\n      }\n      case LIST: {\n        Types.ListType list = (Types.ListType) type;\n        TypeDescription elementType = convert(list.elementId(), list.elementType(),\n            list.isElementRequired());\n        orcType = TypeDescription.createList(elementType);\n        break;\n      }\n      case MAP: {\n        Types.MapType map = (Types.MapType) type;\n        TypeDescription keyType = convert(map.keyId(), map.keyType(), true);\n        TypeDescription valueType = convert(map.valueId(), map.valueType(), map.isValueRequired());\n        orcType = TypeDescription.createMap(keyType, valueType);\n        break;\n      }\n      default:\n        throw new IllegalArgumentException(\"Unhandled type \" + type.typeId());\n    }\n\n    \r\n    orcType.setAttribute(ICEBERG_ID_ATTRIBUTE, String.valueOf(fieldId));\n    orcType.setAttribute(ICEBERG_REQUIRED_ATTRIBUTE, String.valueOf(isRequired));\n    return orcType;\n  }\n","date":"2020-01-08 03:07:45","endLine":189,"groupId":"4243","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(IntegerfieldId@Typetype@booleanisRequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/55/8650aec9670663e1bb417dfc0370d71fcb60c4.src","preCode":"  private static TypeDescription convert(Integer fieldId, Type type, boolean isRequired) {\n    final TypeDescription orcType;\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n        orcType = TypeDescription.createBoolean();\n        break;\n      case INTEGER:\n        orcType = TypeDescription.createInt();\n        orcType.setAttribute(ICEBERG_INTEGER_TYPE_ATTRIBUTE, IntegerType.INTEGER.toString());\n        break;\n      case TIME:\n        orcType = TypeDescription.createInt();\n        orcType.setAttribute(ICEBERG_INTEGER_TYPE_ATTRIBUTE, IntegerType.TIME.toString());\n        break;\n      case LONG:\n        orcType = TypeDescription.createLong();\n        break;\n      case FLOAT:\n        orcType = TypeDescription.createFloat();\n        break;\n      case DOUBLE:\n        orcType = TypeDescription.createDouble();\n        break;\n      case DATE:\n        orcType = TypeDescription.createDate();\n        break;\n      case TIMESTAMP:\n        orcType = TypeDescription.createTimestamp();\n        break;\n      case STRING:\n        orcType = TypeDescription.createString();\n        break;\n      case UUID:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.UUID.toString());\n        break;\n      case FIXED:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.FIXED.toString());\n        orcType.setAttribute(ICEBERG_FIELD_LENGTH, Integer.toString(((Types.FixedType) type).length()));\n        break;\n      case BINARY:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.BINARY.toString());\n        break;\n      case DECIMAL: {\n        Types.DecimalType decimal = (Types.DecimalType) type;\n        orcType = TypeDescription.createDecimal()\n            .withScale(decimal.scale())\n            .withPrecision(decimal.precision());\n        break;\n      }\n      case STRUCT: {\n        orcType = TypeDescription.createStruct();\n        for (Types.NestedField field : type.asStructType().fields()) {\n          TypeDescription childType = convert(field.fieldId(), field.type(), field.isRequired());\n          orcType.addField(field.name(), childType);\n        }\n        break;\n      }\n      case LIST: {\n        Types.ListType list = (Types.ListType) type;\n        TypeDescription elementType = convert(list.elementId(), list.elementType(),\n            list.isElementRequired());\n        orcType = TypeDescription.createList(elementType);\n        break;\n      }\n      case MAP: {\n        Types.MapType map = (Types.MapType) type;\n        TypeDescription keyType = convert(map.keyId(), map.keyType(), true);\n        TypeDescription valueType = convert(map.valueId(), map.valueType(), map.isValueRequired());\n        orcType = TypeDescription.createMap(keyType, valueType);\n        break;\n      }\n      default:\n        throw new IllegalArgumentException(\"Unhandled type \" + type.typeId());\n    }\n\n    \r\n    orcType.setAttribute(ICEBERG_ID_ATTRIBUTE, String.valueOf(fieldId));\n    orcType.setAttribute(ICEBERG_REQUIRED_ATTRIBUTE, String.valueOf(isRequired));\n    return orcType;\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"20fa2c48d312c56843efaa8cf51d35ca61ecf79a","commitMessage":"@@@ORC: Implement schema evolution using IDs (#227)\n\n","date":"2020-01-08 03:07:45","modifiedFileCount":"9","status":"B","submitter":"Edgar Rodriguez"},{"authorTime":"2020-04-01 05:54:30","codes":[{"authorDate":"2020-01-08 03:07:45","commitOrder":2,"curCode":"  public static TypeDescription convert(Schema schema) {\n    final TypeDescription root = TypeDescription.createStruct();\n    final Types.StructType schemaRoot = schema.asStruct();\n    for (Types.NestedField field : schemaRoot.asStructType().fields()) {\n      TypeDescription orcColumType = convert(field.fieldId(), field.type(), field.isRequired());\n      root.addField(field.name(), orcColumType);\n    }\n    return root;\n  }\n","date":"2020-01-08 03:07:45","endLine":104,"groupId":"11946","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/55/8650aec9670663e1bb417dfc0370d71fcb60c4.src","preCode":"  public static TypeDescription convert(Schema schema) {\n    final TypeDescription root = TypeDescription.createStruct();\n    final Types.StructType schemaRoot = schema.asStruct();\n    for (Types.NestedField field : schemaRoot.asStructType().fields()) {\n      TypeDescription orcColumType = convert(field.fieldId(), field.type(), field.isRequired());\n      root.addField(field.name(), orcColumType);\n    }\n    return root;\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2020-04-01 05:54:30","commitOrder":2,"curCode":"  private static TypeDescription convert(Integer fieldId, Type type, boolean isRequired) {\n    final TypeDescription orcType;\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n        orcType = TypeDescription.createBoolean();\n        break;\n      case INTEGER:\n        orcType = TypeDescription.createInt();\n        break;\n      case TIME:\n        orcType = TypeDescription.createLong();\n        orcType.setAttribute(ICEBERG_LONG_TYPE_ATTRIBUTE, LongType.TIME.toString());\n        break;\n      case LONG:\n        orcType = TypeDescription.createLong();\n        orcType.setAttribute(ICEBERG_LONG_TYPE_ATTRIBUTE, LongType.LONG.toString());\n        break;\n      case FLOAT:\n        orcType = TypeDescription.createFloat();\n        break;\n      case DOUBLE:\n        orcType = TypeDescription.createDouble();\n        break;\n      case DATE:\n        orcType = TypeDescription.createDate();\n        break;\n      case TIMESTAMP:\n        Types.TimestampType tsType = (Types.TimestampType) type;\n        if (tsType.shouldAdjustToUTC()) {\n          orcType = TypeDescription.createTimestampInstant();\n        } else {\n          orcType = TypeDescription.createTimestamp();\n        }\n        break;\n      case STRING:\n        orcType = TypeDescription.createString();\n        break;\n      case UUID:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.UUID.toString());\n        break;\n      case FIXED:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.FIXED.toString());\n        orcType.setAttribute(ICEBERG_FIELD_LENGTH, Integer.toString(((Types.FixedType) type).length()));\n        break;\n      case BINARY:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.BINARY.toString());\n        break;\n      case DECIMAL: {\n        Types.DecimalType decimal = (Types.DecimalType) type;\n        orcType = TypeDescription.createDecimal()\n            .withScale(decimal.scale())\n            .withPrecision(decimal.precision());\n        break;\n      }\n      case STRUCT: {\n        orcType = TypeDescription.createStruct();\n        for (Types.NestedField field : type.asStructType().fields()) {\n          TypeDescription childType = convert(field.fieldId(), field.type(), field.isRequired());\n          orcType.addField(field.name(), childType);\n        }\n        break;\n      }\n      case LIST: {\n        Types.ListType list = (Types.ListType) type;\n        TypeDescription elementType = convert(list.elementId(), list.elementType(),\n            list.isElementRequired());\n        orcType = TypeDescription.createList(elementType);\n        break;\n      }\n      case MAP: {\n        Types.MapType map = (Types.MapType) type;\n        TypeDescription keyType = convert(map.keyId(), map.keyType(), true);\n        TypeDescription valueType = convert(map.valueId(), map.valueType(), map.isValueRequired());\n        orcType = TypeDescription.createMap(keyType, valueType);\n        break;\n      }\n      default:\n        throw new IllegalArgumentException(\"Unhandled type \" + type.typeId());\n    }\n\n    \r\n    orcType.setAttribute(ICEBERG_ID_ATTRIBUTE, String.valueOf(fieldId));\n    orcType.setAttribute(ICEBERG_REQUIRED_ATTRIBUTE, String.valueOf(isRequired));\n    return orcType;\n  }\n","date":"2020-04-01 05:54:30","endLine":201,"groupId":"11946","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(IntegerfieldId@Typetype@booleanisRequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/3a/f6f587783b7bdf7d1c0e24002876d10a7223cb.src","preCode":"  private static TypeDescription convert(Integer fieldId, Type type, boolean isRequired) {\n    final TypeDescription orcType;\n\n    switch (type.typeId()) {\n      case BOOLEAN:\n        orcType = TypeDescription.createBoolean();\n        break;\n      case INTEGER:\n        orcType = TypeDescription.createInt();\n        orcType.setAttribute(ICEBERG_INTEGER_TYPE_ATTRIBUTE, IntegerType.INTEGER.toString());\n        break;\n      case TIME:\n        orcType = TypeDescription.createInt();\n        orcType.setAttribute(ICEBERG_INTEGER_TYPE_ATTRIBUTE, IntegerType.TIME.toString());\n        break;\n      case LONG:\n        orcType = TypeDescription.createLong();\n        break;\n      case FLOAT:\n        orcType = TypeDescription.createFloat();\n        break;\n      case DOUBLE:\n        orcType = TypeDescription.createDouble();\n        break;\n      case DATE:\n        orcType = TypeDescription.createDate();\n        break;\n      case TIMESTAMP:\n        orcType = TypeDescription.createTimestamp();\n        break;\n      case STRING:\n        orcType = TypeDescription.createString();\n        break;\n      case UUID:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.UUID.toString());\n        break;\n      case FIXED:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.FIXED.toString());\n        orcType.setAttribute(ICEBERG_FIELD_LENGTH, Integer.toString(((Types.FixedType) type).length()));\n        break;\n      case BINARY:\n        orcType = TypeDescription.createBinary();\n        orcType.setAttribute(ICEBERG_BINARY_TYPE_ATTRIBUTE, BinaryType.BINARY.toString());\n        break;\n      case DECIMAL: {\n        Types.DecimalType decimal = (Types.DecimalType) type;\n        orcType = TypeDescription.createDecimal()\n            .withScale(decimal.scale())\n            .withPrecision(decimal.precision());\n        break;\n      }\n      case STRUCT: {\n        orcType = TypeDescription.createStruct();\n        for (Types.NestedField field : type.asStructType().fields()) {\n          TypeDescription childType = convert(field.fieldId(), field.type(), field.isRequired());\n          orcType.addField(field.name(), childType);\n        }\n        break;\n      }\n      case LIST: {\n        Types.ListType list = (Types.ListType) type;\n        TypeDescription elementType = convert(list.elementId(), list.elementType(),\n            list.isElementRequired());\n        orcType = TypeDescription.createList(elementType);\n        break;\n      }\n      case MAP: {\n        Types.MapType map = (Types.MapType) type;\n        TypeDescription keyType = convert(map.keyId(), map.keyType(), true);\n        TypeDescription valueType = convert(map.valueId(), map.valueType(), map.isValueRequired());\n        orcType = TypeDescription.createMap(keyType, valueType);\n        break;\n      }\n      default:\n        throw new IllegalArgumentException(\"Unhandled type \" + type.typeId());\n    }\n\n    \r\n    orcType.setAttribute(ICEBERG_ID_ATTRIBUTE, String.valueOf(fieldId));\n    orcType.setAttribute(ICEBERG_REQUIRED_ATTRIBUTE, String.valueOf(isRequired));\n    return orcType;\n  }\n","realPath":"orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"6739efe0fc701ed8b40ef0880c58d4d26fc5a451","commitMessage":"@@@ORC: Implement TestGenericData and fix related issues (#778)\n\n","date":"2020-04-01 05:54:30","modifiedFileCount":"7","status":"M","submitter":"Shardul Mahadik"}]
