[{"authorTime":"2020-09-01 09:27:30","codes":[{"authorDate":"2020-09-01 09:27:30","commitOrder":1,"curCode":"  public void testFloatType() {\n    SearchArgument.Builder builder = SearchArgumentFactory.newBuilder();\n    SearchArgument arg = builder.startAnd().equals(\"float\", PredicateLeaf.Type.FLOAT, 1200D).end().build();\n\n    UnboundPredicate expected = Expressions.equal(\"float\", 1200D);\n    UnboundPredicate actual = (UnboundPredicate) HiveIcebergFilterFactory.generateFilterExpression(arg);\n\n    assertPredicatesMatch(expected, actual);\n  }\n","date":"2020-09-01 09:27:30","endLine":193,"groupId":"946","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloatType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/5d/c327358df69f7660a5c542cfd5d23bd065a5c1.src","preCode":"  public void testFloatType() {\n    SearchArgument.Builder builder = SearchArgumentFactory.newBuilder();\n    SearchArgument arg = builder.startAnd().equals(\"float\", PredicateLeaf.Type.FLOAT, 1200D).end().build();\n\n    UnboundPredicate expected = Expressions.equal(\"float\", 1200D);\n    UnboundPredicate actual = (UnboundPredicate) HiveIcebergFilterFactory.generateFilterExpression(arg);\n\n    assertPredicatesMatch(expected, actual);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergFilterFactory.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"},{"authorDate":"2020-09-01 09:27:30","commitOrder":1,"curCode":"  public void testTimestampType() {\n    Literal<Long> timestampLiteral = Literal.of(\"2012-10-02T05:16:17.123456\").to(Types.TimestampType.withoutZone());\n    long timestampMicros = timestampLiteral.value();\n    Timestamp ts = Timestamp.from(DateTimeUtil.timestampFromMicros(timestampMicros).toInstant(ZoneOffset.UTC));\n\n    SearchArgument.Builder builder = SearchArgumentFactory.newBuilder();\n    SearchArgument arg = builder.startAnd().equals(\"timestamp\", PredicateLeaf.Type.TIMESTAMP, ts).end().build();\n\n    UnboundPredicate expected = Expressions.equal(\"timestamp\", timestampMicros);\n    UnboundPredicate actual = (UnboundPredicate) HiveIcebergFilterFactory.generateFilterExpression(arg);\n\n    assertPredicatesMatch(expected, actual);\n  }\n","date":"2020-09-01 09:27:30","endLine":231,"groupId":"3807","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimestampType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/5d/c327358df69f7660a5c542cfd5d23bd065a5c1.src","preCode":"  public void testTimestampType() {\n    Literal<Long> timestampLiteral = Literal.of(\"2012-10-02T05:16:17.123456\").to(Types.TimestampType.withoutZone());\n    long timestampMicros = timestampLiteral.value();\n    Timestamp ts = Timestamp.from(DateTimeUtil.timestampFromMicros(timestampMicros).toInstant(ZoneOffset.UTC));\n\n    SearchArgument.Builder builder = SearchArgumentFactory.newBuilder();\n    SearchArgument arg = builder.startAnd().equals(\"timestamp\", PredicateLeaf.Type.TIMESTAMP, ts).end().build();\n\n    UnboundPredicate expected = Expressions.equal(\"timestamp\", timestampMicros);\n    UnboundPredicate actual = (UnboundPredicate) HiveIcebergFilterFactory.generateFilterExpression(arg);\n\n    assertPredicatesMatch(expected, actual);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergFilterFactory.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"}],"commitId":"c801a2c15715f6d33c3b26eca1c2f495c3cb73b5","commitMessage":"@@@Hive: Add filter pushdown support (#1326)\n\n","date":"2020-09-01 09:27:30","modifiedFileCount":"2","status":"B","submitter":"cmathiesen"},{"authorTime":"2021-03-01 04:45:57","codes":[{"authorDate":"2020-09-01 09:27:30","commitOrder":2,"curCode":"  public void testFloatType() {\n    SearchArgument.Builder builder = SearchArgumentFactory.newBuilder();\n    SearchArgument arg = builder.startAnd().equals(\"float\", PredicateLeaf.Type.FLOAT, 1200D).end().build();\n\n    UnboundPredicate expected = Expressions.equal(\"float\", 1200D);\n    UnboundPredicate actual = (UnboundPredicate) HiveIcebergFilterFactory.generateFilterExpression(arg);\n\n    assertPredicatesMatch(expected, actual);\n  }\n","date":"2020-09-01 09:27:30","endLine":193,"groupId":"101565","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloatType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/5d/c327358df69f7660a5c542cfd5d23bd065a5c1.src","preCode":"  public void testFloatType() {\n    SearchArgument.Builder builder = SearchArgumentFactory.newBuilder();\n    SearchArgument arg = builder.startAnd().equals(\"float\", PredicateLeaf.Type.FLOAT, 1200D).end().build();\n\n    UnboundPredicate expected = Expressions.equal(\"float\", 1200D);\n    UnboundPredicate actual = (UnboundPredicate) HiveIcebergFilterFactory.generateFilterExpression(arg);\n\n    assertPredicatesMatch(expected, actual);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergFilterFactory.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"N"},{"authorDate":"2021-03-01 04:45:57","commitOrder":2,"curCode":"  public void testTimestampType() {\n    Literal<Long> timestampLiteral = Literal.of(\"2012-10-02T05:16:17.123456\").to(Types.TimestampType.withoutZone());\n    long timestampMicros = timestampLiteral.value();\n    Timestamp ts = Timestamp.valueOf(DateTimeUtil.timestampFromMicros(timestampMicros));\n\n    SearchArgument.Builder builder = SearchArgumentFactory.newBuilder();\n    SearchArgument arg = builder.startAnd().equals(\"timestamp\", PredicateLeaf.Type.TIMESTAMP, ts).end().build();\n\n    UnboundPredicate expected = Expressions.equal(\"timestamp\", timestampMicros);\n    UnboundPredicate actual = (UnboundPredicate) HiveIcebergFilterFactory.generateFilterExpression(arg);\n\n    assertPredicatesMatch(expected, actual);\n  }\n","date":"2021-03-01 04:45:57","endLine":242,"groupId":"101565","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testTimestampType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/dc/48501e3084753011e98d32b6630cd37e4b31af.src","preCode":"  public void testTimestampType() {\n    Literal<Long> timestampLiteral = Literal.of(\"2012-10-02T05:16:17.123456\").to(Types.TimestampType.withoutZone());\n    long timestampMicros = timestampLiteral.value();\n    Timestamp ts = Timestamp.from(DateTimeUtil.timestampFromMicros(timestampMicros).toInstant(ZoneOffset.UTC));\n\n    SearchArgument.Builder builder = SearchArgumentFactory.newBuilder();\n    SearchArgument arg = builder.startAnd().equals(\"timestamp\", PredicateLeaf.Type.TIMESTAMP, ts).end().build();\n\n    UnboundPredicate expected = Expressions.equal(\"timestamp\", timestampMicros);\n    UnboundPredicate actual = (UnboundPredicate) HiveIcebergFilterFactory.generateFilterExpression(arg);\n\n    assertPredicatesMatch(expected, actual);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergFilterFactory.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"c66cb02c64eb82ea3b07f618b297290a851d76e7","commitMessage":"@@@Hive: Quick fix for broken TestHiveIcebergFilterFactory.testTimestampType test (#2283)\n\n","date":"2021-03-01 04:45:57","modifiedFileCount":"1","status":"M","submitter":"pvary"}]
