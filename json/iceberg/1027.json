[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testNot() {\n    \r\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(lessThan(\"id\", 5)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: not(false)\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(greaterThan(\"id\", 5)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertFalse(\"Should skip: not(true)\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":234,"groupId":"3303","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/54/40f67122b70984264defcbaba071de27bfa9f1.src","preCode":"  public void testNot() {\n    \r\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(lessThan(\"id\", 5)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: not(false)\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(greaterThan(\"id\", 5)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertFalse(\"Should skip: not(true)\", shouldRead);\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testIntegerNotEqRewritten() {\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 5)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 29)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 30)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 75)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 79)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 80)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 85)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":431,"groupId":"2706","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerNotEqRewritten","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/54/40f67122b70984264defcbaba071de27bfa9f1.src","preCode":"  public void testIntegerNotEqRewritten() {\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 5)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 29)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 30)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 75)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 79)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 80)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 85)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":403,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-10-23 02:17:28","codes":[{"authorDate":"2019-10-23 02:17:28","commitOrder":2,"curCode":"  public void testNot() {\n    \r\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(lessThan(\"id\", 5)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: not(false)\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(greaterThan(\"id\", 5)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertFalse(\"Should skip: not(true)\", shouldRead);\n  }\n","date":"2019-10-23 02:17:28","endLine":331,"groupId":"3303","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/81/dcd302219e8cda9e47bc5e79432934a42bcaad.src","preCode":"  public void testNot() {\n    \r\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(lessThan(\"id\", 5)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: not(false)\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(greaterThan(\"id\", 5)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertFalse(\"Should skip: not(true)\", shouldRead);\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"},{"authorDate":"2019-10-23 02:17:28","commitOrder":2,"curCode":"  public void testIntegerNotEqRewritten() {\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 5)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 29)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 30)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 75)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 79)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 80)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 85)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n  }\n","date":"2019-10-23 02:17:28","endLine":528,"groupId":"2706","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerNotEqRewritten","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/81/dcd302219e8cda9e47bc5e79432934a42bcaad.src","preCode":"  public void testIntegerNotEqRewritten() {\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 5)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 29)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 30)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 75)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 79)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 80)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 85)))\n        .shouldRead(PARQUET_SCHEMA, ROW_GROUP_METADATA, DICTIONARY_STORE);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"M"}],"commitId":"336174b0a4438ed68cdb8e208833e380adaa15fc","commitMessage":"@@@Baseline: Add Baseline to iceberg-parquet (#526)\n\n","date":"2019-10-23 02:17:28","modifiedFileCount":"29","status":"M","submitter":"Fokko Driesprong"},{"authorTime":"2019-12-28 05:07:53","codes":[{"authorDate":"2019-12-28 05:07:53","commitOrder":3,"curCode":"  public void testNot() {\n    \r\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(lessThan(\"id\", INT_MIN_VALUE - 25)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: not(false)\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(greaterThan(\"id\", INT_MIN_VALUE - 25)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertFalse(\"Should skip: not(true)\", shouldRead);\n  }\n","date":"2019-12-28 05:07:53","endLine":338,"groupId":"1027","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/ab6438afdd384189a76a151d96761ed5b717a3.src","preCode":"  public void testNot() {\n    \r\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(lessThan(\"id\", 5)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: not(false)\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(greaterThan(\"id\", 5)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertFalse(\"Should skip: not(true)\", shouldRead);\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"},{"authorDate":"2019-12-28 05:07:53","commitOrder":3,"curCode":"  public void testIntegerNotEqRewritten() {\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", INT_MIN_VALUE - 25)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", INT_MIN_VALUE - 1)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", INT_MIN_VALUE)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", INT_MAX_VALUE - 4)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", INT_MAX_VALUE)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", INT_MAX_VALUE + 1)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", INT_MAX_VALUE + 6)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n  }\n","date":"2019-12-28 05:07:53","endLine":540,"groupId":"1027","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerNotEqRewritten","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/ab6438afdd384189a76a151d96761ed5b717a3.src","preCode":"  public void testIntegerNotEqRewritten() {\n    boolean shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 5)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 29)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id below lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 30)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 75)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 79)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 80)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n\n    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, not(equal(\"id\", 85)))\n        .shouldRead(parquetSchema, rowGroupMetadata, dictionaryStore);\n    Assert.assertTrue(\"Should read: id above upper bound\", shouldRead);\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"}],"commitId":"33e675331e221af0b2618815addbdb4fb29c9083","commitMessage":"@@@Implement in and notIn in multiple visitors (#600)\n\n","date":"2019-12-28 05:07:53","modifiedFileCount":"10","status":"M","submitter":"jun-he"}]
