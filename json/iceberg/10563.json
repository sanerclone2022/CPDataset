[{"authorTime":"2020-01-30 01:08:16","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public void testFullScan() {\n    Iterable<Record> results = IcebergGenerics.read(sharedTable).build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1Records);\n    expected.addAll(file2Records);\n    expected.addAll(file3Records);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Random record set should match\",\n        Sets.newHashSet(expected), records);\n  }\n","date":"2019-03-21 07:25:05","endLine":227,"groupId":"835","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/38/8e1cfc308da093a8d523e45c4dfc444586b843.src","preCode":"  public void testFullScan() {\n    Iterable<Record> results = IcebergGenerics.read(sharedTable).build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1Records);\n    expected.addAll(file2Records);\n    expected.addAll(file3Records);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Random record set should match\",\n        Sets.newHashSet(expected), records);\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"NB"},{"authorDate":"2020-01-30 01:08:16","commitOrder":2,"curCode":"  public void testAsOfTime() throws IOException {\n    overwriteExistingData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .asOfTime( sharedTable.history().get(2).timestampMillis())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1SecondSnapshotRecords);\n    expected.addAll(file2SecondSnapshotRecords);\n    expected.addAll(file3SecondSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","date":"2020-01-30 01:08:16","endLine":366,"groupId":"835","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsOfTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e4/1c41d088c926afb426ca2859928167424b47a2.src","preCode":"  public void testAsOfTime() throws IOException {\n    overwriteExistingData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .asOfTime( sharedTable.history().get(2).timestampMillis())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1SecondSnapshotRecords);\n    expected.addAll(file2SecondSnapshotRecords);\n    expected.addAll(file3SecondSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"}],"commitId":"2ce03e559cbe4db34805a37b9dd460e1a72372f4","commitMessage":"@@@Add time-travel methods to IcebergGenerics (#750)\n\n","date":"2020-01-30 01:08:16","modifiedFileCount":"2","status":"M","submitter":"maqroll"},{"authorTime":"2020-08-06 15:02:28","codes":[{"authorDate":"2020-08-06 15:02:28","commitOrder":3,"curCode":"  public void testFullScan() {\n    Iterable<Record> results = IcebergGenerics.read(sharedTable).build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1FirstSnapshotRecords);\n    expected.addAll(file2FirstSnapshotRecords);\n    expected.addAll(file3FirstSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Random record set should match\",\n        Sets.newHashSet(expected), records);\n  }\n","date":"2020-08-06 15:02:28","endLine":286,"groupId":"10563","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/10/ace67364888ea2a56fd4b839c6d2215375c14d.src","preCode":"  public void testFullScan() {\n    Iterable<Record> results = IcebergGenerics.read(sharedTable).build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1Records);\n    expected.addAll(file2Records);\n    expected.addAll(file3Records);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Random record set should match\",\n        Sets.newHashSet(expected), records);\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2020-08-06 15:02:28","commitOrder":3,"curCode":"  public void testAsOfTime() throws IOException {\n    overwriteExistingData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .asOfTime( sharedTable.history().get(2).timestampMillis())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1ThirdSnapshotRecords);\n    expected.addAll(file2ThirdSnapshotRecords);\n    expected.addAll(file3ThirdSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","date":"2020-08-06 15:02:28","endLine":381,"groupId":"10563","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsOfTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/10/ace67364888ea2a56fd4b839c6d2215375c14d.src","preCode":"  public void testAsOfTime() throws IOException {\n    overwriteExistingData();\n    Iterable<Record> results = IcebergGenerics.read(sharedTable)\n        .asOfTime( sharedTable.history().get(2).timestampMillis())\n        .build();\n\n    Set<Record> expected = Sets.newHashSet();\n    expected.addAll(file1SecondSnapshotRecords);\n    expected.addAll(file2SecondSnapshotRecords);\n    expected.addAll(file3SecondSnapshotRecords);\n\n    Set<Record> records = Sets.newHashSet(results);\n    Assert.assertEquals(\"Should produce correct number of records\",\n        expected.size(), records.size());\n    Assert.assertEquals(\"Record set should match\",\n        Sets.newHashSet(expected), records);\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"id\"));\n    Assert.assertNotNull(Iterables.get(records, 0).getField(\"data\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"M"}],"commitId":"3e8329ca61e5346126be1cbcaba9e9ddd9fa972f","commitMessage":"@@@Generics: Refactor TestLocalScan (#1273)\n\n* Generics: Refactor TestLocalScan","date":"2020-08-06 15:02:28","modifiedFileCount":"1","status":"M","submitter":"Chen Junjie"}]
