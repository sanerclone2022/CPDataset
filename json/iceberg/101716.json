[{"authorTime":"2020-02-04 06:53:50","codes":[{"authorDate":"2019-06-24 00:52:11","commitOrder":2,"curCode":"  public void testTransactionRetryAndAppendManifests() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n    ManifestFile v1manifest = table.currentSnapshot().manifests().get(0);\n\n    TableMetadata base = readMetadata();\n\n    \r\n    OutputFile manifestLocation = Files.localOutput(\"/tmp/\" + UUID.randomUUID().toString() + \".avro\");\n    ManifestWriter writer = ManifestWriter.write(table.spec(), manifestLocation);\n    try {\n      writer.add(FILE_D);\n    } finally {\n      writer.close();\n    }\n\n    Transaction txn = table.newTransaction();\n\n    txn.newAppend()\n        .appendManifest(writer.toManifestFile())\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    String copiedAppendManifest = Iterables.getOnlyElement(Iterables.filter(\n        Iterables.transform(listManifestFiles(), File::getPath),\n        path -> !v1manifest.path().contains(path) && !mergedManifest.path().contains(path)));\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertTrue(\"Copied append manifest should not be deleted yet\", new File(copiedAppendManifest).exists());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(copiedAppendManifest).exists());\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","date":"2019-06-24 00:52:11","endLine":537,"groupId":"2553","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionRetryAndAppendManifests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a9/20f28c90c6244b9ec831a069e8f6bb7c21e386.src","preCode":"  public void testTransactionRetryAndAppendManifests() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n    ManifestFile v1manifest = table.currentSnapshot().manifests().get(0);\n\n    TableMetadata base = readMetadata();\n\n    \r\n    OutputFile manifestLocation = Files.localOutput(\"/tmp/\" + UUID.randomUUID().toString() + \".avro\");\n    ManifestWriter writer = ManifestWriter.write(table.spec(), manifestLocation);\n    try {\n      writer.add(FILE_D);\n    } finally {\n      writer.close();\n    }\n\n    Transaction txn = table.newTransaction();\n\n    txn.newAppend()\n        .appendManifest(writer.toManifestFile())\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    String copiedAppendManifest = Iterables.getOnlyElement(Iterables.filter(\n        Iterables.transform(listManifestFiles(), File::getPath),\n        path -> !v1manifest.path().contains(path) && !mergedManifest.path().contains(path)));\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertTrue(\"Copied append manifest should not be deleted yet\", new File(copiedAppendManifest).exists());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(copiedAppendManifest).exists());\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"NB"},{"authorDate":"2020-02-04 06:53:50","commitOrder":2,"curCode":"  public void testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .set(TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED, \"true\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n\n    TableMetadata base = readMetadata();\n\n    Transaction txn = table.newTransaction();\n\n    ManifestFile appendManifest = writeManifestWithName(\"input.m0\", FILE_D);\n    txn.newAppend()\n        .appendManifest(appendManifest)\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original append manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(appendManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(appendManifest.path()).exists());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Merged append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","date":"2020-02-04 06:53:50","endLine":595,"groupId":"4836","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/13/a298b37a16b57f2494bfcfe3c91f08d80546e2.src","preCode":"  public void testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .set(TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED, \"true\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n\n    TableMetadata base = readMetadata();\n\n    Transaction txn = table.newTransaction();\n\n    ManifestFile appendManifest = writeManifestWithName(\"input.m0\", FILE_D);\n    txn.newAppend()\n        .appendManifest(appendManifest)\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original append manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(appendManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(appendManifest.path()).exists());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Merged append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":541,"status":"B"}],"commitId":"c3dc9824b381e5e479e356be5e0f4fcf61a9fc37","commitMessage":"@@@Inherit snapshot ids for manifest entries (#675)\n\nThis change makes the snapshot ID optional for each data file in a manifest so that a null snapshot ID indicates that it should be inherited from the manifest metadata. As a consequence.  people can create manifests with missing snapshot IDs that will be assigned at commit time.\n\nCloses #504.","date":"2020-02-04 06:53:50","modifiedFileCount":"28","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2020-02-04 06:53:50","codes":[{"authorDate":"2020-04-16 07:44:35","commitOrder":3,"curCode":"  public void testTransactionRetryAndAppendManifests() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n    ManifestFile v1manifest = table.currentSnapshot().manifests().get(0);\n\n    TableMetadata base = readMetadata();\n\n    \r\n    OutputFile manifestLocation = Files.localOutput(\"/tmp/\" + UUID.randomUUID().toString() + \".avro\");\n    ManifestWriter writer = ManifestFiles.write(table.spec(), manifestLocation);\n    try {\n      writer.add(FILE_D);\n    } finally {\n      writer.close();\n    }\n\n    Transaction txn = table.newTransaction();\n\n    txn.newAppend()\n        .appendManifest(writer.toManifestFile())\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    String copiedAppendManifest = Iterables.getOnlyElement(Iterables.filter(\n        Iterables.transform(listManifestFiles(), File::getPath),\n        path -> !v1manifest.path().contains(path) && !mergedManifest.path().contains(path)));\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertTrue(\"Copied append manifest should not be deleted yet\", new File(copiedAppendManifest).exists());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(copiedAppendManifest).exists());\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","date":"2020-04-16 07:44:35","endLine":538,"groupId":"2553","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionRetryAndAppendManifests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/8f/0fedbf018a5b92cdd36acb6f2e6e566230a97a.src","preCode":"  public void testTransactionRetryAndAppendManifests() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n    ManifestFile v1manifest = table.currentSnapshot().manifests().get(0);\n\n    TableMetadata base = readMetadata();\n\n    \r\n    OutputFile manifestLocation = Files.localOutput(\"/tmp/\" + UUID.randomUUID().toString() + \".avro\");\n    ManifestWriter writer = ManifestWriter.write(table.spec(), manifestLocation);\n    try {\n      writer.add(FILE_D);\n    } finally {\n      writer.close();\n    }\n\n    Transaction txn = table.newTransaction();\n\n    txn.newAppend()\n        .appendManifest(writer.toManifestFile())\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    String copiedAppendManifest = Iterables.getOnlyElement(Iterables.filter(\n        Iterables.transform(listManifestFiles(), File::getPath),\n        path -> !v1manifest.path().contains(path) && !mergedManifest.path().contains(path)));\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertTrue(\"Copied append manifest should not be deleted yet\", new File(copiedAppendManifest).exists());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(copiedAppendManifest).exists());\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":468,"status":"M"},{"authorDate":"2020-02-04 06:53:50","commitOrder":3,"curCode":"  public void testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .set(TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED, \"true\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n\n    TableMetadata base = readMetadata();\n\n    Transaction txn = table.newTransaction();\n\n    ManifestFile appendManifest = writeManifestWithName(\"input.m0\", FILE_D);\n    txn.newAppend()\n        .appendManifest(appendManifest)\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original append manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(appendManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(appendManifest.path()).exists());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Merged append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","date":"2020-02-04 06:53:50","endLine":595,"groupId":"4836","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/13/a298b37a16b57f2494bfcfe3c91f08d80546e2.src","preCode":"  public void testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .set(TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED, \"true\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n\n    TableMetadata base = readMetadata();\n\n    Transaction txn = table.newTransaction();\n\n    ManifestFile appendManifest = writeManifestWithName(\"input.m0\", FILE_D);\n    txn.newAppend()\n        .appendManifest(appendManifest)\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original append manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(appendManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(appendManifest.path()).exists());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Merged append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":541,"status":"N"}],"commitId":"a5e77369c330873a6a292b8952b1ca09b7712bb7","commitMessage":"@@@Move manifest factory methods (#925)\n\n","date":"2020-04-16 07:44:35","modifiedFileCount":"18","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-06-03 03:43:03","codes":[{"authorDate":"2020-06-03 03:43:03","commitOrder":4,"curCode":"  public void testTransactionRetryAndAppendManifests() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().allManifests().size());\n    ManifestFile v1manifest = table.currentSnapshot().allManifests().get(0);\n\n    TableMetadata base = readMetadata();\n\n    \r\n    OutputFile manifestLocation = Files.localOutput(\"/tmp/\" + UUID.randomUUID().toString() + \".avro\");\n    ManifestWriter writer = ManifestFiles.write(table.spec(), manifestLocation);\n    try {\n      writer.add(FILE_D);\n    } finally {\n      writer.close();\n    }\n\n    Transaction txn = table.newTransaction();\n\n    txn.newAppend()\n        .appendManifest(writer.toManifestFile())\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\",\n        1, txn.table().currentSnapshot().allManifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().allManifests().get(0);\n\n    \r\n    String copiedAppendManifest = Iterables.getOnlyElement(Iterables.filter(\n        Iterables.transform(listManifestFiles(), File::getPath),\n        path -> !v1manifest.path().contains(path) && !mergedManifest.path().contains(path)));\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertTrue(\"Copied append manifest should not be deleted yet\", new File(copiedAppendManifest).exists());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(copiedAppendManifest).exists());\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().allManifests().size());\n  }\n","date":"2020-06-03 03:43:03","endLine":554,"groupId":"2553","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionRetryAndAppendManifests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/21/82608d31a3cfeda892f341a60ab13bce575ee9.src","preCode":"  public void testTransactionRetryAndAppendManifests() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n    ManifestFile v1manifest = table.currentSnapshot().manifests().get(0);\n\n    TableMetadata base = readMetadata();\n\n    \r\n    OutputFile manifestLocation = Files.localOutput(\"/tmp/\" + UUID.randomUUID().toString() + \".avro\");\n    ManifestWriter writer = ManifestFiles.write(table.spec(), manifestLocation);\n    try {\n      writer.add(FILE_D);\n    } finally {\n      writer.close();\n    }\n\n    Transaction txn = table.newTransaction();\n\n    txn.newAppend()\n        .appendManifest(writer.toManifestFile())\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    String copiedAppendManifest = Iterables.getOnlyElement(Iterables.filter(\n        Iterables.transform(listManifestFiles(), File::getPath),\n        path -> !v1manifest.path().contains(path) && !mergedManifest.path().contains(path)));\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertTrue(\"Copied append manifest should not be deleted yet\", new File(copiedAppendManifest).exists());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(copiedAppendManifest).exists());\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":483,"status":"M"},{"authorDate":"2020-06-03 03:43:03","commitOrder":4,"curCode":"  public void testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .set(TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED, \"true\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().allManifests().size());\n\n    TableMetadata base = readMetadata();\n\n    Transaction txn = table.newTransaction();\n\n    ManifestFile appendManifest = writeManifestWithName(\"input.m0\", FILE_D);\n    txn.newAppend()\n        .appendManifest(appendManifest)\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\",\n        1, txn.table().currentSnapshot().allManifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().allManifests().get(0);\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original append manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(appendManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(appendManifest.path()).exists());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Merged append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().allManifests().size());\n  }\n","date":"2020-06-03 03:43:03","endLine":612,"groupId":"4836","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/21/82608d31a3cfeda892f341a60ab13bce575ee9.src","preCode":"  public void testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .set(TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED, \"true\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().manifests().size());\n\n    TableMetadata base = readMetadata();\n\n    Transaction txn = table.newTransaction();\n\n    ManifestFile appendManifest = writeManifestWithName(\"input.m0\", FILE_D);\n    txn.newAppend()\n        .appendManifest(appendManifest)\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\", 1, txn.table().currentSnapshot().manifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().manifests().get(0);\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original append manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(appendManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(appendManifest.path()).exists());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Merged append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().manifests().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"M"}],"commitId":"482f420141486f5b7b02bd62dc14cdb94b9a9cca","commitMessage":"@@@Split Snapshot.manifests into dataManifests and deleteManifests (#1080)\n\nThis replaces all calls to Snapshot.manifests with calls to one of 3 new methods:\n\n* `Snapshot.allManifests` returns both delete and data manifests\n* `Snapshot.deleteManifests` returns only delete manifests\n* `Snapshot.dataManifests` returns only data manifests\n\nExisting references mostly use either `allManifests` or `dataManifests`.  depending on the context. For example.  tests with assertions for the number of manifests use `allManifests` because the test cases should validate there are no new delete manifests.  but other tests that validate rewritten manifests are deleted use `dataManifests` because only data manifests are rewritten and deleted.\n\nThis tries to make minimal changes that preserve the current behavior. Operations are not updated to support delete manifests (rewrite still only rewrites data manifests).  but will carry through the list of delete manifests correctly.","date":"2020-06-03 03:43:03","modifiedFileCount":"46","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-06-03 03:43:03","codes":[{"authorDate":"2020-06-10 01:43:32","commitOrder":5,"curCode":"  public void testTransactionRetryAndAppendManifests() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().allManifests().size());\n    ManifestFile v1manifest = table.currentSnapshot().allManifests().get(0);\n\n    TableMetadata base = readMetadata();\n\n    \r\n    OutputFile manifestLocation = Files.localOutput(\"/tmp/\" + UUID.randomUUID().toString() + \".avro\");\n    ManifestWriter<DataFile> writer = ManifestFiles.write(table.spec(), manifestLocation);\n    try {\n      writer.add(FILE_D);\n    } finally {\n      writer.close();\n    }\n\n    Transaction txn = table.newTransaction();\n\n    txn.newAppend()\n        .appendManifest(writer.toManifestFile())\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\",\n        1, txn.table().currentSnapshot().allManifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().allManifests().get(0);\n\n    \r\n    String copiedAppendManifest = Iterables.getOnlyElement(Iterables.filter(\n        Iterables.transform(listManifestFiles(), File::getPath),\n        path -> !v1manifest.path().contains(path) && !mergedManifest.path().contains(path)));\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertTrue(\"Copied append manifest should not be deleted yet\", new File(copiedAppendManifest).exists());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(copiedAppendManifest).exists());\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().allManifests().size());\n  }\n","date":"2020-06-10 01:43:32","endLine":554,"groupId":"101716","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionRetryAndAppendManifests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/57/7480f2e839a051940b75db64a1f62ee8da4887.src","preCode":"  public void testTransactionRetryAndAppendManifests() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().allManifests().size());\n    ManifestFile v1manifest = table.currentSnapshot().allManifests().get(0);\n\n    TableMetadata base = readMetadata();\n\n    \r\n    OutputFile manifestLocation = Files.localOutput(\"/tmp/\" + UUID.randomUUID().toString() + \".avro\");\n    ManifestWriter writer = ManifestFiles.write(table.spec(), manifestLocation);\n    try {\n      writer.add(FILE_D);\n    } finally {\n      writer.close();\n    }\n\n    Transaction txn = table.newTransaction();\n\n    txn.newAppend()\n        .appendManifest(writer.toManifestFile())\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\",\n        1, txn.table().currentSnapshot().allManifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().allManifests().get(0);\n\n    \r\n    String copiedAppendManifest = Iterables.getOnlyElement(Iterables.filter(\n        Iterables.transform(listManifestFiles(), File::getPath),\n        path -> !v1manifest.path().contains(path) && !mergedManifest.path().contains(path)));\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertTrue(\"Copied append manifest should not be deleted yet\", new File(copiedAppendManifest).exists());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original copied manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(copiedAppendManifest));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(copiedAppendManifest).exists());\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().allManifests().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":483,"status":"M"},{"authorDate":"2020-06-03 03:43:03","commitOrder":5,"curCode":"  public void testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .set(TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED, \"true\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().allManifests().size());\n\n    TableMetadata base = readMetadata();\n\n    Transaction txn = table.newTransaction();\n\n    ManifestFile appendManifest = writeManifestWithName(\"input.m0\", FILE_D);\n    txn.newAppend()\n        .appendManifest(appendManifest)\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\",\n        1, txn.table().currentSnapshot().allManifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().allManifests().get(0);\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original append manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(appendManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(appendManifest.path()).exists());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Merged append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().allManifests().size());\n  }\n","date":"2020-06-03 03:43:03","endLine":612,"groupId":"101716","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/21/82608d31a3cfeda892f341a60ab13bce575ee9.src","preCode":"  public void testTransactionRetryAndAppendManifestsWithSnapshotIdInheritance() throws Exception {\n    \r\n    table.updateProperties()\n        .set(TableProperties.COMMIT_NUM_RETRIES, \"1\")\n        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"0\")\n        .set(TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED, \"true\")\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 1\", 1, (int) version());\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .appendFile(FILE_B)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 2 after append\", 2, (int) version());\n    Assert.assertEquals(\"Append should create one manifest\", 1, table.currentSnapshot().allManifests().size());\n\n    TableMetadata base = readMetadata();\n\n    Transaction txn = table.newTransaction();\n\n    ManifestFile appendManifest = writeManifestWithName(\"input.m0\", FILE_D);\n    txn.newAppend()\n        .appendManifest(appendManifest)\n        .commit();\n\n    Assert.assertSame(\"Base metadata should not change when commit is created\", base, readMetadata());\n    Assert.assertEquals(\"Table should be on version 2 after txn create\", 2, (int) version());\n\n    Assert.assertEquals(\"Append should have one merged manifest\",\n        1, txn.table().currentSnapshot().allManifests().size());\n    ManifestFile mergedManifest = txn.table().currentSnapshot().allManifests().get(0);\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Assert.assertEquals(\"Table should be on version 3 after real append\", 3, (int) version());\n\n    txn.commitTransaction();\n\n    Assert.assertEquals(\"Table should be on version 4 after commit\", 4, (int) version());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the original append manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(appendManifest.path()));\n    Assert.assertFalse(\"Append manifest should be deleted\", new File(appendManifest.path()).exists());\n\n    Assert.assertTrue(\"Transaction should hijack the delete of the first merged manifest\",\n        ((BaseTransaction) txn).deletedFiles().contains(mergedManifest.path()));\n    Assert.assertFalse(\"Merged append manifest should be deleted\", new File(mergedManifest.path()).exists());\n\n    Assert.assertEquals(\"Should merge all commit manifests into a single manifest\",\n        1, table.currentSnapshot().allManifests().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTransaction.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"N"}],"commitId":"2ac53b346c8a1b4cfac42aa8b5811b120b4cf0f0","commitMessage":"@@@Combine ManifestReaders into one parameterized class. (#1099)\n\n","date":"2020-06-10 01:43:32","modifiedFileCount":"12","status":"M","submitter":"Ryan Blue"}]
