[{"authorTime":"2021-05-20 10:14:59","codes":[{"authorDate":"2021-05-20 10:14:59","commitOrder":1,"curCode":"  static StreamingOffset fromJson(String json) {\n    Preconditions.checkNotNull(json, \"Cannot parse StreamingOffset JSON: null\");\n\n    try {\n      JsonNode node = JsonUtil.mapper().readValue(json, JsonNode.class);\n      \r\n      \r\n      int version = JsonUtil.getInt(VERSION, node);\n      Preconditions.checkArgument(version == CURR_VERSION,\n              \"Cannot parse offset JSON: offset version %s is not supported\", version);\n\n      long snapshotId = JsonUtil.getLong(SNAPSHOT_ID, node);\n      int position = JsonUtil.getInt(POSITION, node);\n      boolean shouldScanAllFiles = JsonUtil.getBool(SCAN_ALL_FILES, node);\n\n      return new StreamingOffset(snapshotId, position, shouldScanAllFiles);\n    } catch (IOException e) {\n      throw new IllegalArgumentException(String.format(\"Failed to parse StreamingOffset from JSON string %s\", json), e);\n    }\n  }\n","date":"2021-05-20 10:14:59","endLine":79,"groupId":"3030","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromJson","params":"(Stringjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f4/3578ada310fc1a95bbb416cb0a7784119d1994.src","preCode":"  static StreamingOffset fromJson(String json) {\n    Preconditions.checkNotNull(json, \"Cannot parse StreamingOffset JSON: null\");\n\n    try {\n      JsonNode node = JsonUtil.mapper().readValue(json, JsonNode.class);\n      \r\n      \r\n      int version = JsonUtil.getInt(VERSION, node);\n      Preconditions.checkArgument(version == CURR_VERSION,\n              \"Cannot parse offset JSON: offset version %s is not supported\", version);\n\n      long snapshotId = JsonUtil.getLong(SNAPSHOT_ID, node);\n      int position = JsonUtil.getInt(POSITION, node);\n      boolean shouldScanAllFiles = JsonUtil.getBool(SCAN_ALL_FILES, node);\n\n      return new StreamingOffset(snapshotId, position, shouldScanAllFiles);\n    } catch (IOException e) {\n      throw new IllegalArgumentException(String.format(\"Failed to parse StreamingOffset from JSON string %s\", json), e);\n    }\n  }\n","realPath":"spark3/src/main/java/org/apache/iceberg/spark/source/StreamingOffset.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2021-05-20 10:14:59","commitOrder":1,"curCode":"  static StreamingOffset fromJson(String json) {\n    Preconditions.checkNotNull(json, \"Cannot parse StreamingOffset JSON: null\");\n\n    try {\n      JsonNode node = JsonUtil.mapper().readValue(json, JsonNode.class);\n      \r\n      \r\n      int version = JsonUtil.getInt(VERSION, node);\n      Preconditions.checkArgument(version == CURR_VERSION,\n          \"Cannot parse offset JSON: offset version %s is not supported\", version);\n\n      long snapshotId = JsonUtil.getLong(SNAPSHOT_ID, node);\n      int position = JsonUtil.getInt(POSITION, node);\n      boolean shouldScanAllFiles = JsonUtil.getBool(SCAN_ALL_FILES, node);\n\n      return new StreamingOffset(snapshotId, position, shouldScanAllFiles);\n    } catch (IOException e) {\n      throw new IllegalArgumentException(String.format(\"Failed to parse StreamingOffset from JSON string %s\", json), e);\n    }\n  }\n","date":"2021-05-20 10:14:59","endLine":79,"groupId":"3030","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"fromJson","params":"(Stringjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f1/5c5c6536e97e885b721b1561cdb9201e9615d4.src","preCode":"  static StreamingOffset fromJson(String json) {\n    Preconditions.checkNotNull(json, \"Cannot parse StreamingOffset JSON: null\");\n\n    try {\n      JsonNode node = JsonUtil.mapper().readValue(json, JsonNode.class);\n      \r\n      \r\n      int version = JsonUtil.getInt(VERSION, node);\n      Preconditions.checkArgument(version == CURR_VERSION,\n          \"Cannot parse offset JSON: offset version %s is not supported\", version);\n\n      long snapshotId = JsonUtil.getLong(SNAPSHOT_ID, node);\n      int position = JsonUtil.getInt(POSITION, node);\n      boolean shouldScanAllFiles = JsonUtil.getBool(SCAN_ALL_FILES, node);\n\n      return new StreamingOffset(snapshotId, position, shouldScanAllFiles);\n    } catch (IOException e) {\n      throw new IllegalArgumentException(String.format(\"Failed to parse StreamingOffset from JSON string %s\", json), e);\n    }\n  }\n","realPath":"spark2/src/main/java/org/apache/iceberg/spark/source/StreamingOffset.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"848797d7a1068b4b613c3bd4bd4991a20b2991ad","commitMessage":"@@@Spark: Create Spark2 and Spark3 StreamingOffset classes (#2615)\n\n* Make a Copy of StreamingOffset implementation from Spark2 into Spark3 to avoid naming conflicts\n* Move Spark2 implementation of StreamingOffset from iceberg-spark to iceberg-Spark2","date":"2021-05-20 10:14:59","modifiedFileCount":"0","status":"B","submitter":"Sreeram Garlapati"},{"authorTime":"2021-05-20 10:14:59","codes":[{"authorDate":"2021-06-26 03:43:32","commitOrder":2,"curCode":"  static StreamingOffset fromJson(String json) {\n    Preconditions.checkNotNull(json, \"Cannot parse StreamingOffset JSON: null\");\n\n    try {\n      JsonNode node = JsonUtil.mapper().readValue(json, JsonNode.class);\n      return fromJsonNode(node);\n    } catch (IOException e) {\n      throw new UncheckedIOException(String.format(\"Failed to parse StreamingOffset from JSON string %s\", json), e);\n    }\n  }\n","date":"2021-06-26 03:43:32","endLine":70,"groupId":"12867","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"fromJson","params":"(Stringjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/64/277ecf3be51b8e14c643ba9021682d8d711b3b.src","preCode":"  static StreamingOffset fromJson(String json) {\n    Preconditions.checkNotNull(json, \"Cannot parse StreamingOffset JSON: null\");\n\n    try {\n      JsonNode node = JsonUtil.mapper().readValue(json, JsonNode.class);\n      \r\n      \r\n      int version = JsonUtil.getInt(VERSION, node);\n      Preconditions.checkArgument(version == CURR_VERSION,\n              \"Cannot parse offset JSON: offset version %s is not supported\", version);\n\n      long snapshotId = JsonUtil.getLong(SNAPSHOT_ID, node);\n      int position = JsonUtil.getInt(POSITION, node);\n      boolean shouldScanAllFiles = JsonUtil.getBool(SCAN_ALL_FILES, node);\n\n      return new StreamingOffset(snapshotId, position, shouldScanAllFiles);\n    } catch (IOException e) {\n      throw new IllegalArgumentException(String.format(\"Failed to parse StreamingOffset from JSON string %s\", json), e);\n    }\n  }\n","realPath":"spark3/src/main/java/org/apache/iceberg/spark/source/StreamingOffset.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-05-20 10:14:59","commitOrder":2,"curCode":"  static StreamingOffset fromJson(String json) {\n    Preconditions.checkNotNull(json, \"Cannot parse StreamingOffset JSON: null\");\n\n    try {\n      JsonNode node = JsonUtil.mapper().readValue(json, JsonNode.class);\n      \r\n      \r\n      int version = JsonUtil.getInt(VERSION, node);\n      Preconditions.checkArgument(version == CURR_VERSION,\n          \"Cannot parse offset JSON: offset version %s is not supported\", version);\n\n      long snapshotId = JsonUtil.getLong(SNAPSHOT_ID, node);\n      int position = JsonUtil.getInt(POSITION, node);\n      boolean shouldScanAllFiles = JsonUtil.getBool(SCAN_ALL_FILES, node);\n\n      return new StreamingOffset(snapshotId, position, shouldScanAllFiles);\n    } catch (IOException e) {\n      throw new IllegalArgumentException(String.format(\"Failed to parse StreamingOffset from JSON string %s\", json), e);\n    }\n  }\n","date":"2021-05-20 10:14:59","endLine":79,"groupId":"12867","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"fromJson","params":"(Stringjson)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f1/5c5c6536e97e885b721b1561cdb9201e9615d4.src","preCode":"  static StreamingOffset fromJson(String json) {\n    Preconditions.checkNotNull(json, \"Cannot parse StreamingOffset JSON: null\");\n\n    try {\n      JsonNode node = JsonUtil.mapper().readValue(json, JsonNode.class);\n      \r\n      \r\n      int version = JsonUtil.getInt(VERSION, node);\n      Preconditions.checkArgument(version == CURR_VERSION,\n          \"Cannot parse offset JSON: offset version %s is not supported\", version);\n\n      long snapshotId = JsonUtil.getLong(SNAPSHOT_ID, node);\n      int position = JsonUtil.getInt(POSITION, node);\n      boolean shouldScanAllFiles = JsonUtil.getBool(SCAN_ALL_FILES, node);\n\n      return new StreamingOffset(snapshotId, position, shouldScanAllFiles);\n    } catch (IOException e) {\n      throw new IllegalArgumentException(String.format(\"Failed to parse StreamingOffset from JSON string %s\", json), e);\n    }\n  }\n","realPath":"spark2/src/main/java/org/apache/iceberg/spark/source/StreamingOffset.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"9cfcf5c9e48cf00fbab6b8b134cf315c29069cd1","commitMessage":"@@@Spark: Support micro-batch streaming read for DSv2 (#2660)\n\n","date":"2021-06-26 03:43:32","modifiedFileCount":"4","status":"M","submitter":"Sreeram Garlapati"}]
