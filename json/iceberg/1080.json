[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"points\").schema())\n            .getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.get(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.get(\"z\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":528,"groupId":"2913","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testListOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/d18d0ce9108879420cd44e6c3ec52aa1390fe6.src","preCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"points\").schema())\n            .getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.get(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.get(\"z\"));\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"points\").schema())\n            .getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.get(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.get(\"z\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":528,"groupId":"2913","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/d18d0ce9108879420cd44e6c3ec52aa1390fe6.src","preCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"points\").schema())\n            .getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.get(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.get(\"z\"));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2021-07-13 23:59:22","codes":[{"authorDate":"2021-07-13 23:59:22","commitOrder":2,"curCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"points\").schema())\n            .getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    TestHelpers.assertEmptyAvroField(projected, \"points\");\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    TestHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    TestHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    TestHelpers.assertEmptyAvroField(projectedP1, \"y\");\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    TestHelpers.assertEmptyAvroField(projectedP2, \"y\");\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    TestHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    TestHelpers.assertEmptyAvroField(projectedP1, \"x\");\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    TestHelpers.assertEmptyAvroField(projectedP2, \"x\");\n    Assert.assertNull(\"Should project null y\", projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    TestHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    TestHelpers.assertEmptyAvroField(projectedP1, \"x\");\n    TestHelpers.assertEmptyAvroField(projectedP1, \"y\");\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    TestHelpers.assertEmptyAvroField(projectedP2, \"x\");\n    TestHelpers.assertEmptyAvroField(projectedP2, \"y\");\n    Assert.assertNull(\"Should project null z\", projectedP2.get(\"z\"));\n  }\n","date":"2021-07-13 23:59:22","endLine":528,"groupId":"1080","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testListOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/68/5d4ee88f195a823aa551f19ac18900355fe9bc.src","preCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"points\").schema())\n            .getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.get(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.get(\"z\"));\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"M"},{"authorDate":"2021-07-13 23:59:22","commitOrder":2,"curCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"points\").schema())\n            .getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    AssertHelpers.assertEmptyAvroField(projected, \"points\");\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    AssertHelpers.assertEmptyAvroField(projectedP1, \"y\");\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    AssertHelpers.assertEmptyAvroField(projectedP2, \"y\");\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    AssertHelpers.assertEmptyAvroField(projectedP1, \"x\");\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    AssertHelpers.assertEmptyAvroField(projectedP2, \"x\");\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    AssertHelpers.assertEmptyAvroField(projectedP1, \"x\");\n    AssertHelpers.assertEmptyAvroField(projectedP1, \"y\");\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    AssertHelpers.assertEmptyAvroField(projectedP2, \"x\");\n    AssertHelpers.assertEmptyAvroField(projectedP2, \"y\");\n    Assert.assertNull(\"Should project null z\", projectedP2.get(\"z\"));\n  }\n","date":"2021-07-13 23:59:22","endLine":528,"groupId":"1080","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testListOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e7/1034483bdc072c811dba91af1923893d561906.src","preCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"points\").schema())\n            .getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.get(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.get(\"z\"));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"M"}],"commitId":"b3fb81a19e9632608b2bd4cdede4bbfcbd26bc8e","commitMessage":"@@@Core: Use Avro 1.10.1 (#1648)\n\nCo-authored-by: Fokko Driesprong <fdriesprong@ebay.com>","date":"2021-07-13 23:59:22","modifiedFileCount":"6","status":"M","submitter":"Fokko Driesprong"}]
