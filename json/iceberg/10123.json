[{"authorTime":"2020-06-24 01:28:42","codes":[{"authorDate":"2019-10-23 01:47:52","commitOrder":3,"curCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (AvroSchemaUtil.hasFieldId(field)) {\n      int existingFieldId = AvroSchemaUtil.getFieldId(field);\n      Preconditions.checkArgument(existingFieldId == fieldId,\n          \"Existing field does match with that fetched from name mapping\");\n    } else {\n      \r\n      copy.addProp(AvroSchemaUtil.FIELD_ID_PROP, fieldId);\n    }\n\n    return copy;\n  }\n","date":"2019-10-23 01:47:52","endLine":267,"groupId":"2247","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema@IntegerfieldId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/d52124d7e38c2fdd9e10dada36575a55371b08.src","preCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (AvroSchemaUtil.hasFieldId(field)) {\n      int existingFieldId = AvroSchemaUtil.getFieldId(field);\n      Preconditions.checkArgument(existingFieldId == fieldId,\n          \"Existing field does match with that fetched from name mapping\");\n    } else {\n      \r\n      copy.addProp(AvroSchemaUtil.FIELD_ID_PROP, fieldId);\n    }\n\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"NB"},{"authorDate":"2020-06-24 01:28:42","commitOrder":3,"curCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema) {\n    Schema.Field copy = new Schema.Field(field.name(), newSchema, field.doc(), field.defaultVal(), field.order());\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      String key = prop.getKey();\n      if (key != AvroSchemaUtil.FIELD_ID_PROP) {\n        copy.addProp(key, prop.getValue());\n      }\n    }\n    return copy;\n  }\n","date":"2020-06-24 01:28:42","endLine":82,"groupId":"3569","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1f/929bf53bb684d7fac180227e8ec94c093257d2.src","preCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema) {\n    Schema.Field copy = new Schema.Field(field.name(), newSchema, field.doc(), field.defaultVal(), field.order());\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      String key = prop.getKey();\n      if (key != AvroSchemaUtil.FIELD_ID_PROP) {\n        copy.addProp(key, prop.getValue());\n      }\n    }\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/RemoveIds.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"33f1825b72efe05c7d83feb68fa1669eb00bb129","commitMessage":"@@@Spark: Read using Avro name mapping if configured (#1129)\n\n","date":"2020-06-24 01:28:42","modifiedFileCount":"1","status":"M","submitter":"Chen Junjie"},{"authorTime":"2020-06-24 01:28:42","codes":[{"authorDate":"2020-06-24 07:27:01","commitOrder":4,"curCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n    Schema newSchemaReordered;\n    \r\n    if (isOptionSchemaWithNonNullFirstOption(newSchema)) {\n      newSchemaReordered = AvroSchemaUtil.toOption(AvroSchemaUtil.fromOption(newSchema));\n    } else {\n      newSchemaReordered = newSchema;\n    }\n    \r\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchemaReordered, field.doc(),\n        AvroSchemaUtil.isOptionSchema(newSchemaReordered) ? JsonProperties.NULL_VALUE : null, field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (AvroSchemaUtil.hasFieldId(field)) {\n      int existingFieldId = AvroSchemaUtil.getFieldId(field);\n      Preconditions.checkArgument(existingFieldId == fieldId,\n          \"Existing field does match with that fetched from name mapping\");\n    } else {\n      \r\n      copy.addProp(AvroSchemaUtil.FIELD_ID_PROP, fieldId);\n    }\n\n    return copy;\n  }\n","date":"2020-06-24 07:27:01","endLine":284,"groupId":"2247","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema@IntegerfieldId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/de/cca0384ba142ec53c616657ca74c346b37e31b.src","preCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (AvroSchemaUtil.hasFieldId(field)) {\n      int existingFieldId = AvroSchemaUtil.getFieldId(field);\n      Preconditions.checkArgument(existingFieldId == fieldId,\n          \"Existing field does match with that fetched from name mapping\");\n    } else {\n      \r\n      copy.addProp(AvroSchemaUtil.FIELD_ID_PROP, fieldId);\n    }\n\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"},{"authorDate":"2020-06-24 01:28:42","commitOrder":4,"curCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema) {\n    Schema.Field copy = new Schema.Field(field.name(), newSchema, field.doc(), field.defaultVal(), field.order());\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      String key = prop.getKey();\n      if (key != AvroSchemaUtil.FIELD_ID_PROP) {\n        copy.addProp(key, prop.getValue());\n      }\n    }\n    return copy;\n  }\n","date":"2020-06-24 01:28:42","endLine":82,"groupId":"3569","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1f/929bf53bb684d7fac180227e8ec94c093257d2.src","preCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema) {\n    Schema.Field copy = new Schema.Field(field.name(), newSchema, field.doc(), field.defaultVal(), field.order());\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      String key = prop.getKey();\n      if (key != AvroSchemaUtil.FIELD_ID_PROP) {\n        copy.addProp(key, prop.getValue());\n      }\n    }\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/RemoveIds.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"d1ba7b62abdad6b9fd8f3ec98f789ca53e9cf7b4","commitMessage":"@@@Avro: Fix errors when reading options with non-null defaults (#1132)\n\n","date":"2020-06-24 07:27:01","modifiedFileCount":"1","status":"M","submitter":"Shardul Mahadik"},{"authorTime":"2021-06-25 07:17:58","codes":[{"authorDate":"2020-06-24 07:27:01","commitOrder":5,"curCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n    Schema newSchemaReordered;\n    \r\n    if (isOptionSchemaWithNonNullFirstOption(newSchema)) {\n      newSchemaReordered = AvroSchemaUtil.toOption(AvroSchemaUtil.fromOption(newSchema));\n    } else {\n      newSchemaReordered = newSchema;\n    }\n    \r\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchemaReordered, field.doc(),\n        AvroSchemaUtil.isOptionSchema(newSchemaReordered) ? JsonProperties.NULL_VALUE : null, field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (AvroSchemaUtil.hasFieldId(field)) {\n      int existingFieldId = AvroSchemaUtil.getFieldId(field);\n      Preconditions.checkArgument(existingFieldId == fieldId,\n          \"Existing field does match with that fetched from name mapping\");\n    } else {\n      \r\n      copy.addProp(AvroSchemaUtil.FIELD_ID_PROP, fieldId);\n    }\n\n    return copy;\n  }\n","date":"2020-06-24 07:27:01","endLine":284,"groupId":"10123","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema@IntegerfieldId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/de/cca0384ba142ec53c616657ca74c346b37e31b.src","preCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n    Schema newSchemaReordered;\n    \r\n    if (isOptionSchemaWithNonNullFirstOption(newSchema)) {\n      newSchemaReordered = AvroSchemaUtil.toOption(AvroSchemaUtil.fromOption(newSchema));\n    } else {\n      newSchemaReordered = newSchema;\n    }\n    \r\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchemaReordered, field.doc(),\n        AvroSchemaUtil.isOptionSchema(newSchemaReordered) ? JsonProperties.NULL_VALUE : null, field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (AvroSchemaUtil.hasFieldId(field)) {\n      int existingFieldId = AvroSchemaUtil.getFieldId(field);\n      Preconditions.checkArgument(existingFieldId == fieldId,\n          \"Existing field does match with that fetched from name mapping\");\n    } else {\n      \r\n      copy.addProp(AvroSchemaUtil.FIELD_ID_PROP, fieldId);\n    }\n\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"N"},{"authorDate":"2021-06-25 07:17:58","commitOrder":5,"curCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema) {\n    Schema.Field copy = new Schema.Field(field.name(), newSchema, field.doc(), field.defaultVal(), field.order());\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      String key = prop.getKey();\n      if (!Objects.equals(key, AvroSchemaUtil.FIELD_ID_PROP)) {\n        copy.addProp(key, prop.getValue());\n      }\n    }\n    return copy;\n  }\n","date":"2021-06-25 07:17:58","endLine":83,"groupId":"10123","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b9/e0d5cd1799496ea5a63b6548cee21506a19a2b.src","preCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema) {\n    Schema.Field copy = new Schema.Field(field.name(), newSchema, field.doc(), field.defaultVal(), field.order());\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      String key = prop.getKey();\n      if (key != AvroSchemaUtil.FIELD_ID_PROP) {\n        copy.addProp(key, prop.getValue());\n      }\n    }\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/RemoveIds.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"98da9749edee574b8ed673d69e0ef80ce7ae0272","commitMessage":"@@@API: Use equals instead of reference equality (#2716)\n\n","date":"2021-06-25 07:17:58","modifiedFileCount":"10","status":"M","submitter":"Eduard Tudenh?fner"}]
