[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    writeAndValidate(schema);\n  }\n","date":"2019-03-21 07:25:05","endLine":164,"groupId":"75","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/94/ad20bc33f7cc40a514d55d9a0b4edf8a2b7632.src","preCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    writeAndValidate(schema);\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/AvroDataTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    writeAndValidate(schema);\n  }\n","date":"2019-03-21 07:25:05","endLine":163,"groupId":"75","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMixedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/60/058ae645d288ae94985b42bb1228994454838b.src","preCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    writeAndValidate(schema);\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DataTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-09-07 04:25:04","commitOrder":2,"curCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = TypeUtil.assignIncreasingFreshIds(new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    ));\n\n    writeAndValidate(schema);\n  }\n","date":"2019-09-07 04:25:04","endLine":165,"groupId":"75","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/33/ae818ca7ea3a492a5de38eed69e1fc592fc0b7.src","preCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    writeAndValidate(schema);\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/AvroDataTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    writeAndValidate(schema);\n  }\n","date":"2019-03-21 07:25:05","endLine":163,"groupId":"75","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMixedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/60/058ae645d288ae94985b42bb1228994454838b.src","preCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    writeAndValidate(schema);\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DataTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"}],"commitId":"fef67332585a1e5e45b053448107b922bca1cd26","commitMessage":"@@@Update Avro test schemas to use unique IDs (#456)\n\n","date":"2019-09-07 04:25:04","modifiedFileCount":"3","status":"M","submitter":"Edgar Rodriguez"},{"authorTime":"2019-11-21 07:59:34","codes":[{"authorDate":"2019-11-21 07:59:34","commitOrder":3,"curCode":"  public void testMixedTypes() throws IOException {\n    StructType structType = StructType.of(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    Schema schema = new Schema(TypeUtil.assignFreshIds(structType, new AtomicInteger(0)::incrementAndGet)\n        .asStructType().fields());\n\n    writeAndValidate(schema);\n  }\n","date":"2019-11-21 07:59:34","endLine":169,"groupId":"108","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/57/e61efd6afa993ef2bb2b0bb118a7fc3602f43e.src","preCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = TypeUtil.assignIncreasingFreshIds(new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    ));\n\n    writeAndValidate(schema);\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/AvroDataTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2019-11-21 07:59:34","commitOrder":3,"curCode":"  public void testMixedTypes() throws IOException {\n    StructType structType = StructType.of(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    Schema schema = new Schema(TypeUtil.assignFreshIds(structType, new AtomicInteger(0)::incrementAndGet)\n        .asStructType().fields());\n\n    writeAndValidate(schema);\n  }\n","date":"2019-11-21 07:59:34","endLine":169,"groupId":"108","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMixedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ab/ad3c542cb52a38e284bdc6123fc1b5d0da30da.src","preCode":"  public void testMixedTypes() throws IOException {\n    Schema schema = new Schema(\n        required(0, \"id\", LongType.get()),\n        optional(1, \"list_of_maps\",\n            ListType.ofOptional(2, MapType.ofOptional(3, 4,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))),\n        optional(5, \"map_of_lists\",\n            MapType.ofOptional(6, 7,\n                Types.StringType.get(),\n                ListType.ofOptional(8, SUPPORTED_PRIMITIVES))),\n        required(9, \"list_of_lists\",\n            ListType.ofOptional(10, ListType.ofOptional(11, SUPPORTED_PRIMITIVES))),\n        required(12, \"map_of_maps\",\n            MapType.ofOptional(13, 14,\n                Types.StringType.get(),\n                MapType.ofOptional(15, 16,\n                    Types.StringType.get(),\n                    SUPPORTED_PRIMITIVES))),\n        required(17, \"list_of_struct_of_nested_types\", ListType.ofOptional(19, StructType.of(\n            Types.NestedField.required(20, \"m1\", MapType.ofOptional(21, 22,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(23, \"l1\", ListType.ofRequired(24, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.required(25, \"l2\", ListType.ofRequired(26, SUPPORTED_PRIMITIVES)),\n            Types.NestedField.optional(27, \"m2\", MapType.ofOptional(28, 29,\n                Types.StringType.get(),\n                SUPPORTED_PRIMITIVES))\n        )))\n    );\n\n    writeAndValidate(schema);\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/DataTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"8b41ee5e34b5d79e7a04b3c810d7073cfed01a3a","commitMessage":"@@@Add schema field ID validation (#619)\n\n","date":"2019-11-21 07:59:34","modifiedFileCount":"8","status":"M","submitter":"Chen Junjie"}]
