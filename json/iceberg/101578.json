[{"authorTime":"2021-01-07 03:21:21","codes":[{"authorDate":"2021-01-07 03:21:21","commitOrder":1,"curCode":"  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" (customer_id BIGINT, first_name STRING) PARTITIONED BY (last_name STRING) \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier);\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","date":"2021-01-07 03:21:21","endLine":249,"groupId":"4534","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithColumnSpecificationPartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/33/203f921ba7d3407547b24191ad7625bdfeee58.src","preCode":"  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" (customer_id BIGINT, first_name STRING) PARTITIONED BY (last_name STRING) \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier);\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"},{"authorDate":"2021-01-07 03:21:21","commitOrder":1,"curCode":"  public void testCreatePartitionedTableByProperty() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" +\n        \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\";\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","date":"2021-01-07 03:21:21","endLine":267,"groupId":"4534","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePartitionedTableByProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/33/203f921ba7d3407547b24191ad7625bdfeee58.src","preCode":"  public void testCreatePartitionedTableByProperty() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" +\n        \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\";\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"B"}],"commitId":"9c5948fd23aa664e649b3ab81a999b89f68b6857","commitMessage":"@@@Hive: Run fewer combinations in TestHiveIcebergStorageHandler (#1924) (#2030)\n\n","date":"2021-01-07 03:21:21","modifiedFileCount":"0","status":"B","submitter":"pvary"},{"authorTime":"2021-01-07 03:21:21","codes":[{"authorDate":"2021-01-23 02:21:56","commitOrder":2,"curCode":"  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" (customer_id BIGINT, first_name STRING COMMENT 'This is first name') \" +\n        \"PARTITIONED BY (last_name STRING COMMENT 'This is last name') STORED BY \" +\n         \"'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier);\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","date":"2021-01-23 02:21:56","endLine":273,"groupId":"4534","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithColumnSpecificationPartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d6/d42449d17b8216f172e2e6d1117a3fd106ad86.src","preCode":"  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" (customer_id BIGINT, first_name STRING) PARTITIONED BY (last_name STRING) \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier);\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2021-01-07 03:21:21","commitOrder":2,"curCode":"  public void testCreatePartitionedTableByProperty() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" +\n        \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\";\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","date":"2021-01-07 03:21:21","endLine":267,"groupId":"4534","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePartitionedTableByProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/33/203f921ba7d3407547b24191ad7625bdfeee58.src","preCode":"  public void testCreatePartitionedTableByProperty() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" +\n        \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\";\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"f8dfc1449040a057e869f47148f0a3374982f073","commitMessage":"@@@Hive: Support field comments in schema conversion (#2086)\n\n","date":"2021-01-23 02:21:56","modifiedFileCount":"9","status":"M","submitter":"L?szl? Pint?r"},{"authorTime":"2021-04-12 15:36:22","codes":[{"authorDate":"2021-04-12 15:36:22","commitOrder":3,"curCode":"  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" (customer_id BIGINT, first_name STRING COMMENT 'This is first name') \" +\n        \"PARTITIONED BY (last_name STRING COMMENT 'This is last name') STORED BY \" +\n         \"'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        testTables.propertiesForCreateTableSQL(ImmutableMap.of());\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","date":"2021-04-12 15:36:22","endLine":276,"groupId":"4534","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithColumnSpecificationPartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/97/c2c31aa4b292f0021f4b959922bde148ffec5f.src","preCode":"  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" (customer_id BIGINT, first_name STRING COMMENT 'This is first name') \" +\n        \"PARTITIONED BY (last_name STRING COMMENT 'This is last name') STORED BY \" +\n         \"'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier);\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2021-04-12 15:36:22","commitOrder":3,"curCode":"  public void testCreatePartitionedTableByProperty() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" +\n        \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \"  +\n        \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\";\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","date":"2021-04-12 15:36:22","endLine":295,"groupId":"4534","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePartitionedTableByProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/97/c2c31aa4b292f0021f4b959922bde148ffec5f.src","preCode":"  public void testCreatePartitionedTableByProperty() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" +\n        \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\";\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"db8248c16e99c435ff7eed8fa86bc3913af2756a","commitMessage":"@@@Hive: Configure catalog type on table level. (#2129)\n\n","date":"2021-04-12 15:36:22","modifiedFileCount":"14","status":"M","submitter":"L?szl? Pint?r"},{"authorTime":"2021-05-18 19:23:16","codes":[{"authorDate":"2021-04-12 15:36:22","commitOrder":4,"curCode":"  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" (customer_id BIGINT, first_name STRING COMMENT 'This is first name') \" +\n        \"PARTITIONED BY (last_name STRING COMMENT 'This is last name') STORED BY \" +\n         \"'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        testTables.propertiesForCreateTableSQL(ImmutableMap.of());\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","date":"2021-04-12 15:36:22","endLine":276,"groupId":"101578","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithColumnSpecificationPartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/97/c2c31aa4b292f0021f4b959922bde148ffec5f.src","preCode":"  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" (customer_id BIGINT, first_name STRING COMMENT 'This is first name') \" +\n        \"PARTITIONED BY (last_name STRING COMMENT 'This is last name') STORED BY \" +\n         \"'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        testTables.propertiesForCreateTableSQL(ImmutableMap.of());\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"},{"authorDate":"2021-05-18 19:23:16","commitOrder":4,"curCode":"  public void testCreatePartitionedTableByProperty() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" +\n        \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \"  +\n        \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + testTables.catalogName() + \"')\";\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","date":"2021-05-18 19:23:16","endLine":294,"groupId":"101578","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testCreatePartitionedTableByProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/dd/cb17e6aa9673b9d955cafa82f0a57d46548418.src","preCode":"  public void testCreatePartitionedTableByProperty() throws IOException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n    PartitionSpec spec =\n        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(\"last_name\").build();\n    Map<StructLike, List<Record>> data = ImmutableMap.of(\n        Row.of(\"Brown\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(0)),\n        Row.of(\"Green\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(1)),\n        Row.of(\"Pink\"), Collections.singletonList(HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS.get(2)));\n    String createSql = \"CREATE EXTERNAL TABLE \" + identifier +\n        \" STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" + PartitionSpecParser.toJson(spec) + \"', \" +\n        \"'\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \"  +\n        \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\";\n    runCreateAndReadTest(identifier, createSql, HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, spec, data);\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"324b11a02b8b3062cf555e0eb97bbe93ece57e31","commitMessage":"@@@Hive: unify catalog experience across engines (#2565)\n\n","date":"2021-05-18 19:23:16","modifiedFileCount":"9","status":"M","submitter":"Jack Ye"}]
