[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType d = (DecimalType) current;\n        Preconditions.checkArgument(d.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", d.scale(), decimal.scale());\n        Preconditions.checkArgument(d.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            d.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","date":"2019-03-21 07:25:05","endLine":241,"groupId":"2952","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d3/5a423fc211931c263e74e7b8b2fb444a637b4b.src","preCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType d = (DecimalType) current;\n        Preconditions.checkArgument(d.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", d.scale(), decimal.scale());\n        Preconditions.checkArgument(d.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            d.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType d = (DecimalType) current;\n        Preconditions.checkArgument(d.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", d.scale(), decimal.scale());\n        Preconditions.checkArgument(d.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            d.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","date":"2019-03-21 07:25:05","endLine":215,"groupId":"2952","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/6c/773740f067f11e13ae9bb94425d445fb55f2e3.src","preCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType d = (DecimalType) current;\n        Preconditions.checkArgument(d.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", d.scale(), decimal.scale());\n        Preconditions.checkArgument(d.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            d.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithoutReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-06-24 23:57:49","codes":[{"authorDate":"2019-06-24 23:57:49","commitOrder":2,"curCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType requestedDecimal = (DecimalType) current;\n        Preconditions.checkArgument(requestedDecimal.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", requestedDecimal.scale(), decimal.scale());\n        Preconditions.checkArgument(requestedDecimal.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            requestedDecimal.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","date":"2019-06-24 23:57:49","endLine":241,"groupId":"4158","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ed/be39015c429c30f69e858fc15ea407d35fcbc3.src","preCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType d = (DecimalType) current;\n        Preconditions.checkArgument(d.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", d.scale(), decimal.scale());\n        Preconditions.checkArgument(d.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            d.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"},{"authorDate":"2019-06-24 23:57:49","commitOrder":2,"curCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType requestedDecimal = (DecimalType) current;\n        Preconditions.checkArgument(requestedDecimal.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", requestedDecimal.scale(), decimal.scale());\n        Preconditions.checkArgument(requestedDecimal.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            requestedDecimal.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","date":"2019-06-24 23:57:49","endLine":215,"groupId":"4158","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1c/75b524f60ceef8c11cc8427e464f662e6a10c3.src","preCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType d = (DecimalType) current;\n        Preconditions.checkArgument(d.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", d.scale(), decimal.scale());\n        Preconditions.checkArgument(d.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            d.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithoutReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"5f6fc3be3400cfae858a938213ba8516acc983a5","commitMessage":"@@@[Baseline] Apply Baseline plugin to iceberg-spark (#226)\n\n","date":"2019-06-24 23:57:49","modifiedFileCount":"36","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2021-07-16 01:06:44","codes":[{"authorDate":"2019-06-24 23:57:49","commitOrder":3,"curCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType requestedDecimal = (DecimalType) current;\n        Preconditions.checkArgument(requestedDecimal.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", requestedDecimal.scale(), decimal.scale());\n        Preconditions.checkArgument(requestedDecimal.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            requestedDecimal.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","date":"2019-06-24 23:57:49","endLine":241,"groupId":"10532","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ed/be39015c429c30f69e858fc15ea407d35fcbc3.src","preCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType requestedDecimal = (DecimalType) current;\n        Preconditions.checkArgument(requestedDecimal.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", requestedDecimal.scale(), decimal.scale());\n        Preconditions.checkArgument(requestedDecimal.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            requestedDecimal.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"N"},{"authorDate":"2021-07-16 01:06:44","commitOrder":3,"curCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType requestedDecimal = (DecimalType) current;\n        Preconditions.checkArgument(requestedDecimal.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", requestedDecimal.scale(), decimal.scale());\n        Preconditions.checkArgument(requestedDecimal.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            requestedDecimal.precision(), decimal.precision());\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","date":"2021-07-16 01:06:44","endLine":209,"groupId":"10532","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c6/984e2fe8cd3f3ab80e59cf60a20664e11f8fd5.src","preCode":"  public Type primitive(Type.PrimitiveType primitive) {\n    Class<? extends DataType> expectedType = TYPES.get(primitive.typeId());\n    Preconditions.checkArgument(expectedType != null && expectedType.isInstance(current),\n        \"Cannot project %s to incompatible type: %s\", primitive, current);\n\n    \r\n    switch (primitive.typeId()) {\n      case DECIMAL:\n        Types.DecimalType decimal = (Types.DecimalType) primitive;\n        DecimalType requestedDecimal = (DecimalType) current;\n        Preconditions.checkArgument(requestedDecimal.scale() == decimal.scale(),\n            \"Cannot project decimal with incompatible scale: %s != %s\", requestedDecimal.scale(), decimal.scale());\n        Preconditions.checkArgument(requestedDecimal.precision() >= decimal.precision(),\n            \"Cannot project decimal with incompatible precision: %s < %s\",\n            requestedDecimal.precision(), decimal.precision());\n        break;\n      case TIMESTAMP:\n        Types.TimestampType timestamp = (Types.TimestampType) primitive;\n        Preconditions.checkArgument(timestamp.shouldAdjustToUTC(),\n            \"Cannot project timestamp (without time zone) as timestamptz (with time zone)\");\n        break;\n      default:\n    }\n\n    return primitive;\n  }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/PruneColumnsWithoutReordering.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"9a0d154b0ba5e6d10d79e30470295c91c89c1e09","commitMessage":"@@@Add support for reading/writing timestamps without timezone.  (#2757)\n\nPreviously Spark could not handle Iceberg tables which contained Timestamp.withoutTimeZone. New parameters are introduced to allow Timestamp without TimeZone to be treated as Timestamp with Timezone.  \n\nCo-authored-by: bkahloon <kahlonbakht@gmail.com>\nCo-authored-by: shardulm94 ","date":"2021-07-16 01:06:44","modifiedFileCount":"15","status":"M","submitter":"sshkvar"}]
