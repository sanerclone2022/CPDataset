[{"authorTime":"2021-03-26 02:36:51","codes":[{"authorDate":"2020-08-11 06:39:00","commitOrder":2,"curCode":"  public static void assertEquals(DataFile expected, DataFile actual) {\n    Assert.assertEquals(\"Should match the serialized record path\",\n        expected.path(), actual.path());\n    Assert.assertEquals(\"Should match the serialized record format\",\n        expected.format(), actual.format());\n    Assert.assertEquals(\"Should match the serialized record partition\",\n        expected.partition().get(0, Object.class), actual.partition().get(0, Object.class));\n    Assert.assertEquals(\"Should match the serialized record count\",\n        expected.recordCount(), actual.recordCount());\n    Assert.assertEquals(\"Should match the serialized record size\",\n        expected.fileSizeInBytes(), actual.fileSizeInBytes());\n    Assert.assertEquals(\"Should match the serialized record value counts\",\n        expected.valueCounts(), actual.valueCounts());\n    Assert.assertEquals(\"Should match the serialized record null value counts\",\n        expected.nullValueCounts(), actual.nullValueCounts());\n    Assert.assertEquals(\"Should match the serialized record lower bounds\",\n        expected.lowerBounds(), actual.lowerBounds());\n    Assert.assertEquals(\"Should match the serialized record upper bounds\",\n        expected.upperBounds(), actual.upperBounds());\n    Assert.assertEquals(\"Should match the serialized record key metadata\",\n        expected.keyMetadata(), actual.keyMetadata());\n    Assert.assertEquals(\"Should match the serialized record offsets\",\n        expected.splitOffsets(), actual.splitOffsets());\n    Assert.assertEquals(\"Should match the serialized record offsets\",\n        expected.keyMetadata(), actual.keyMetadata());\n  }\n","date":"2020-08-11 06:39:00","endLine":85,"groupId":"1512","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"assertEquals","params":"(DataFileexpected@DataFileactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/99/396647ee3ebd8459644e533571cbd28c6cc357.src","preCode":"  public static void assertEquals(DataFile expected, DataFile actual) {\n    Assert.assertEquals(\"Should match the serialized record path\",\n        expected.path(), actual.path());\n    Assert.assertEquals(\"Should match the serialized record format\",\n        expected.format(), actual.format());\n    Assert.assertEquals(\"Should match the serialized record partition\",\n        expected.partition().get(0, Object.class), actual.partition().get(0, Object.class));\n    Assert.assertEquals(\"Should match the serialized record count\",\n        expected.recordCount(), actual.recordCount());\n    Assert.assertEquals(\"Should match the serialized record size\",\n        expected.fileSizeInBytes(), actual.fileSizeInBytes());\n    Assert.assertEquals(\"Should match the serialized record value counts\",\n        expected.valueCounts(), actual.valueCounts());\n    Assert.assertEquals(\"Should match the serialized record null value counts\",\n        expected.nullValueCounts(), actual.nullValueCounts());\n    Assert.assertEquals(\"Should match the serialized record lower bounds\",\n        expected.lowerBounds(), actual.lowerBounds());\n    Assert.assertEquals(\"Should match the serialized record upper bounds\",\n        expected.upperBounds(), actual.upperBounds());\n    Assert.assertEquals(\"Should match the serialized record key metadata\",\n        expected.keyMetadata(), actual.keyMetadata());\n    Assert.assertEquals(\"Should match the serialized record offsets\",\n        expected.splitOffsets(), actual.splitOffsets());\n    Assert.assertEquals(\"Should match the serialized record offsets\",\n        expected.keyMetadata(), actual.keyMetadata());\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/TaskCheckHelper.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"NB"},{"authorDate":"2021-03-26 02:36:51","commitOrder":2,"curCode":"  public static void assertEquals(ContentFile<?> expected, ContentFile<?> actual) {\n    if (expected == actual) {\n      return;\n    }\n    Assert.assertTrue(\"Shouldn't be null.\", expected != null && actual != null);\n    Assert.assertEquals(\"SpecId\", expected.specId(), actual.specId());\n    Assert.assertEquals(\"Content\", expected.content(), actual.content());\n    Assert.assertEquals(\"Path\", expected.path(), actual.path());\n    Assert.assertEquals(\"Format\", expected.format(), actual.format());\n    for (int i = 0; i < expected.partition().size(); i++) {\n      Assert.assertEquals(\"Partition data at index \" + i,\n          expected.partition().get(i, Object.class),\n          actual.partition().get(i, Object.class));\n    }\n    Assert.assertEquals(\"Record count\", expected.recordCount(), actual.recordCount());\n    Assert.assertEquals(\"File size in bytes\", expected.fileSizeInBytes(), actual.fileSizeInBytes());\n    Assert.assertEquals(\"Column sizes\", expected.columnSizes(), actual.columnSizes());\n    Assert.assertEquals(\"Value counts\", expected.valueCounts(), actual.valueCounts());\n    Assert.assertEquals(\"Null value counts\", expected.nullValueCounts(), actual.nullValueCounts());\n    Assert.assertEquals(\"Lower bounds\", expected.lowerBounds(), actual.lowerBounds());\n    Assert.assertEquals(\"Upper bounds\", expected.upperBounds(), actual.upperBounds());\n    Assert.assertEquals(\"Key metadata\", expected.keyMetadata(), actual.keyMetadata());\n    Assert.assertEquals(\"Split offsets\", expected.splitOffsets(), actual.splitOffsets());\n    Assert.assertEquals(\"Equality field id list\", actual.equalityFieldIds(), expected.equalityFieldIds());\n  }\n","date":"2021-03-26 02:36:51","endLine":343,"groupId":"5003","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEquals","params":"(ContentFile<?>expected@ContentFile<?>actual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/3f/b4f0a5a255b611e117ad1c1ec7ace4e5de6f3e.src","preCode":"  public static void assertEquals(ContentFile<?> expected, ContentFile<?> actual) {\n    if (expected == actual) {\n      return;\n    }\n    Assert.assertTrue(\"Shouldn't be null.\", expected != null && actual != null);\n    Assert.assertEquals(\"SpecId\", expected.specId(), actual.specId());\n    Assert.assertEquals(\"Content\", expected.content(), actual.content());\n    Assert.assertEquals(\"Path\", expected.path(), actual.path());\n    Assert.assertEquals(\"Format\", expected.format(), actual.format());\n    for (int i = 0; i < expected.partition().size(); i++) {\n      Assert.assertEquals(\"Partition data at index \" + i,\n          expected.partition().get(i, Object.class),\n          actual.partition().get(i, Object.class));\n    }\n    Assert.assertEquals(\"Record count\", expected.recordCount(), actual.recordCount());\n    Assert.assertEquals(\"File size in bytes\", expected.fileSizeInBytes(), actual.fileSizeInBytes());\n    Assert.assertEquals(\"Column sizes\", expected.columnSizes(), actual.columnSizes());\n    Assert.assertEquals(\"Value counts\", expected.valueCounts(), actual.valueCounts());\n    Assert.assertEquals(\"Null value counts\", expected.nullValueCounts(), actual.nullValueCounts());\n    Assert.assertEquals(\"Lower bounds\", expected.lowerBounds(), actual.lowerBounds());\n    Assert.assertEquals(\"Upper bounds\", expected.upperBounds(), actual.upperBounds());\n    Assert.assertEquals(\"Key metadata\", expected.keyMetadata(), actual.keyMetadata());\n    Assert.assertEquals(\"Split offsets\", expected.splitOffsets(), actual.splitOffsets());\n    Assert.assertEquals(\"Equality field id list\", actual.equalityFieldIds(), expected.equalityFieldIds());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"B"}],"commitId":"c9e76633ca4eb85d5a867d09237ce4c6000f4d9e","commitMessage":"@@@Flink: Fix manifest serialization with Kryo (#2349)\n\n","date":"2021-03-26 02:36:51","modifiedFileCount":"4","status":"M","submitter":"openinx"},{"authorTime":"2021-03-31 01:56:52","codes":[{"authorDate":"2020-08-11 06:39:00","commitOrder":3,"curCode":"  public static void assertEquals(DataFile expected, DataFile actual) {\n    Assert.assertEquals(\"Should match the serialized record path\",\n        expected.path(), actual.path());\n    Assert.assertEquals(\"Should match the serialized record format\",\n        expected.format(), actual.format());\n    Assert.assertEquals(\"Should match the serialized record partition\",\n        expected.partition().get(0, Object.class), actual.partition().get(0, Object.class));\n    Assert.assertEquals(\"Should match the serialized record count\",\n        expected.recordCount(), actual.recordCount());\n    Assert.assertEquals(\"Should match the serialized record size\",\n        expected.fileSizeInBytes(), actual.fileSizeInBytes());\n    Assert.assertEquals(\"Should match the serialized record value counts\",\n        expected.valueCounts(), actual.valueCounts());\n    Assert.assertEquals(\"Should match the serialized record null value counts\",\n        expected.nullValueCounts(), actual.nullValueCounts());\n    Assert.assertEquals(\"Should match the serialized record lower bounds\",\n        expected.lowerBounds(), actual.lowerBounds());\n    Assert.assertEquals(\"Should match the serialized record upper bounds\",\n        expected.upperBounds(), actual.upperBounds());\n    Assert.assertEquals(\"Should match the serialized record key metadata\",\n        expected.keyMetadata(), actual.keyMetadata());\n    Assert.assertEquals(\"Should match the serialized record offsets\",\n        expected.splitOffsets(), actual.splitOffsets());\n    Assert.assertEquals(\"Should match the serialized record offsets\",\n        expected.keyMetadata(), actual.keyMetadata());\n  }\n","date":"2020-08-11 06:39:00","endLine":85,"groupId":"12430","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertEquals","params":"(DataFileexpected@DataFileactual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/99/396647ee3ebd8459644e533571cbd28c6cc357.src","preCode":"  public static void assertEquals(DataFile expected, DataFile actual) {\n    Assert.assertEquals(\"Should match the serialized record path\",\n        expected.path(), actual.path());\n    Assert.assertEquals(\"Should match the serialized record format\",\n        expected.format(), actual.format());\n    Assert.assertEquals(\"Should match the serialized record partition\",\n        expected.partition().get(0, Object.class), actual.partition().get(0, Object.class));\n    Assert.assertEquals(\"Should match the serialized record count\",\n        expected.recordCount(), actual.recordCount());\n    Assert.assertEquals(\"Should match the serialized record size\",\n        expected.fileSizeInBytes(), actual.fileSizeInBytes());\n    Assert.assertEquals(\"Should match the serialized record value counts\",\n        expected.valueCounts(), actual.valueCounts());\n    Assert.assertEquals(\"Should match the serialized record null value counts\",\n        expected.nullValueCounts(), actual.nullValueCounts());\n    Assert.assertEquals(\"Should match the serialized record lower bounds\",\n        expected.lowerBounds(), actual.lowerBounds());\n    Assert.assertEquals(\"Should match the serialized record upper bounds\",\n        expected.upperBounds(), actual.upperBounds());\n    Assert.assertEquals(\"Should match the serialized record key metadata\",\n        expected.keyMetadata(), actual.keyMetadata());\n    Assert.assertEquals(\"Should match the serialized record offsets\",\n        expected.splitOffsets(), actual.splitOffsets());\n    Assert.assertEquals(\"Should match the serialized record offsets\",\n        expected.keyMetadata(), actual.keyMetadata());\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/TaskCheckHelper.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-03-31 01:56:52","commitOrder":3,"curCode":"  public static void assertEquals(ContentFile<?> expected, ContentFile<?> actual) {\n    if (expected == actual) {\n      return;\n    }\n    Assert.assertTrue(\"Shouldn't be null.\", expected != null && actual != null);\n    Assert.assertEquals(\"SpecId\", expected.specId(), actual.specId());\n    Assert.assertEquals(\"Content\", expected.content(), actual.content());\n    Assert.assertEquals(\"Path\", expected.path(), actual.path());\n    Assert.assertEquals(\"Format\", expected.format(), actual.format());\n    Assert.assertEquals(\"Partition size\", expected.partition().size(), actual.partition().size());\n    for (int i = 0; i < expected.partition().size(); i++) {\n      Assert.assertEquals(\"Partition data at index \" + i,\n          expected.partition().get(i, Object.class),\n          actual.partition().get(i, Object.class));\n    }\n    Assert.assertEquals(\"Record count\", expected.recordCount(), actual.recordCount());\n    Assert.assertEquals(\"File size in bytes\", expected.fileSizeInBytes(), actual.fileSizeInBytes());\n    Assert.assertEquals(\"Column sizes\", expected.columnSizes(), actual.columnSizes());\n    Assert.assertEquals(\"Value counts\", expected.valueCounts(), actual.valueCounts());\n    Assert.assertEquals(\"Null value counts\", expected.nullValueCounts(), actual.nullValueCounts());\n    Assert.assertEquals(\"Lower bounds\", expected.lowerBounds(), actual.lowerBounds());\n    Assert.assertEquals(\"Upper bounds\", expected.upperBounds(), actual.upperBounds());\n    Assert.assertEquals(\"Key metadata\", expected.keyMetadata(), actual.keyMetadata());\n    Assert.assertEquals(\"Split offsets\", expected.splitOffsets(), actual.splitOffsets());\n    Assert.assertEquals(\"Equality field id list\", actual.equalityFieldIds(), expected.equalityFieldIds());\n  }\n","date":"2021-03-31 01:56:52","endLine":344,"groupId":"12430","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEquals","params":"(ContentFile<?>expected@ContentFile<?>actual)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ca/304d49733095edfc8b7d46b969d00e315c9999.src","preCode":"  public static void assertEquals(ContentFile<?> expected, ContentFile<?> actual) {\n    if (expected == actual) {\n      return;\n    }\n    Assert.assertTrue(\"Shouldn't be null.\", expected != null && actual != null);\n    Assert.assertEquals(\"SpecId\", expected.specId(), actual.specId());\n    Assert.assertEquals(\"Content\", expected.content(), actual.content());\n    Assert.assertEquals(\"Path\", expected.path(), actual.path());\n    Assert.assertEquals(\"Format\", expected.format(), actual.format());\n    for (int i = 0; i < expected.partition().size(); i++) {\n      Assert.assertEquals(\"Partition data at index \" + i,\n          expected.partition().get(i, Object.class),\n          actual.partition().get(i, Object.class));\n    }\n    Assert.assertEquals(\"Record count\", expected.recordCount(), actual.recordCount());\n    Assert.assertEquals(\"File size in bytes\", expected.fileSizeInBytes(), actual.fileSizeInBytes());\n    Assert.assertEquals(\"Column sizes\", expected.columnSizes(), actual.columnSizes());\n    Assert.assertEquals(\"Value counts\", expected.valueCounts(), actual.valueCounts());\n    Assert.assertEquals(\"Null value counts\", expected.nullValueCounts(), actual.nullValueCounts());\n    Assert.assertEquals(\"Lower bounds\", expected.lowerBounds(), actual.lowerBounds());\n    Assert.assertEquals(\"Upper bounds\", expected.upperBounds(), actual.upperBounds());\n    Assert.assertEquals(\"Key metadata\", expected.keyMetadata(), actual.keyMetadata());\n    Assert.assertEquals(\"Split offsets\", expected.splitOffsets(), actual.splitOffsets());\n    Assert.assertEquals(\"Equality field id list\", actual.equalityFieldIds(), expected.equalityFieldIds());\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"19295fcdedd4dd2cab36e58183ee94c871e644d5","commitMessage":"@@@Core: Fix Kryo serialization for DataFile and DeleteFile (#2343)\n\n","date":"2021-03-31 01:56:52","modifiedFileCount":"2","status":"M","submitter":"openinx"}]
