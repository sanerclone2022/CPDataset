[{"authorTime":"2020-05-26 01:15:35","codes":[{"authorDate":"2020-05-26 01:15:35","commitOrder":1,"curCode":"  public void createOrcInputFile() throws IOException {\n    if (orcFile.exists()) {\n      Assert.assertTrue(orcFile.delete());\n    }\n\n    OutputFile outFile = Files.localOutput(orcFile);\n    try (FileAppender<GenericRecord> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      GenericRecord record = GenericRecord.create(FILE_SCHEMA);\n      \r\n      for (int i = 0; i < INT_MAX_VALUE - INT_MIN_VALUE + 1; i += 1) {\n        record.setField(\"_id\", INT_MIN_VALUE + i); \r\n        record.setField(\"_no_stats_parquet\", TOO_LONG_FOR_STATS_PARQUET); \r\n                                                                          \r\n        record.setField(\"_required\", \"req\"); \r\n        record.setField(\"_all_nulls\", null); \r\n        record.setField(\"_some_nulls\", (i % 10 == 0) ? null : \"some\"); \r\n        record.setField(\"_no_nulls\", \"\"); \r\n        record.setField(\"_str\", i + \"str\" + i);\n\n        GenericRecord structNotNull = GenericRecord.create(_structFieldType);\n        structNotNull.setField(\"_int_field\", INT_MIN_VALUE + i);\n        record.setField(\"_struct_not_null\", structNotNull); \r\n\n        appender.add(record);\n      }\n    }\n\n    InputFile inFile = Files.localInput(orcFile);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    orcFile.deleteOnExit();\n  }\n","date":"2020-05-26 01:15:35","endLine":207,"groupId":"3543","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createOrcInputFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/8f/a4caee610f5c2e6dd4a158f7b405c730067ff0.src","preCode":"  public void createOrcInputFile() throws IOException {\n    if (orcFile.exists()) {\n      Assert.assertTrue(orcFile.delete());\n    }\n\n    OutputFile outFile = Files.localOutput(orcFile);\n    try (FileAppender<GenericRecord> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      GenericRecord record = GenericRecord.create(FILE_SCHEMA);\n      \r\n      for (int i = 0; i < INT_MAX_VALUE - INT_MIN_VALUE + 1; i += 1) {\n        record.setField(\"_id\", INT_MIN_VALUE + i); \r\n        record.setField(\"_no_stats_parquet\", TOO_LONG_FOR_STATS_PARQUET); \r\n                                                                          \r\n        record.setField(\"_required\", \"req\"); \r\n        record.setField(\"_all_nulls\", null); \r\n        record.setField(\"_some_nulls\", (i % 10 == 0) ? null : \"some\"); \r\n        record.setField(\"_no_nulls\", \"\"); \r\n        record.setField(\"_str\", i + \"str\" + i);\n\n        GenericRecord structNotNull = GenericRecord.create(_structFieldType);\n        structNotNull.setField(\"_int_field\", INT_MIN_VALUE + i);\n        record.setField(\"_struct_not_null\", structNotNull); \r\n\n        appender.add(record);\n      }\n    }\n\n    InputFile inFile = Files.localInput(orcFile);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    orcFile.deleteOnExit();\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"},{"authorDate":"2020-05-26 01:15:35","commitOrder":1,"curCode":"  public void createOrcInputFile(List<Record> records) throws IOException {\n    if (ORC_FILE.exists()) {\n      Assert.assertTrue(ORC_FILE.delete());\n    }\n\n    OutputFile outFile = Files.localOutput(ORC_FILE);\n    try (FileAppender<Record> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      appender.addAll(records);\n    }\n\n    InputFile inFile = Files.localInput(ORC_FILE);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    ORC_FILE.deleteOnExit();\n  }\n","date":"2020-05-26 01:15:35","endLine":195,"groupId":"3543","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createOrcInputFile","params":"(List<Record>records)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/86/47a9c7dee02b6ce46ecee97a74de7421cd16f4.src","preCode":"  public void createOrcInputFile(List<Record> records) throws IOException {\n    if (ORC_FILE.exists()) {\n      Assert.assertTrue(ORC_FILE.delete());\n    }\n\n    OutputFile outFile = Files.localOutput(ORC_FILE);\n    try (FileAppender<Record> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      appender.addAll(records);\n    }\n\n    InputFile inFile = Files.localInput(ORC_FILE);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    ORC_FILE.deleteOnExit();\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilterTypes.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"}],"commitId":"e8f7379ffe253623e9dd27a1ada7d4421af8b937","commitMessage":"@@@ORC: Push down Iceberg filters (#973)\n\n","date":"2020-05-26 01:15:35","modifiedFileCount":"6","status":"B","submitter":"Shardul Mahadik"},{"authorTime":"2020-05-26 01:15:35","codes":[{"authorDate":"2020-10-09 23:46:12","commitOrder":2,"curCode":"  public void createOrcInputFile() throws IOException {\n    this.orcFile = temp.newFile();\n    Assert.assertTrue(orcFile.delete());\n\n    OutputFile outFile = Files.localOutput(orcFile);\n    try (FileAppender<GenericRecord> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      GenericRecord record = GenericRecord.create(FILE_SCHEMA);\n      \r\n      for (int i = 0; i < INT_MAX_VALUE - INT_MIN_VALUE + 1; i += 1) {\n        record.setField(\"_id\", INT_MIN_VALUE + i); \r\n        record.setField(\"_no_stats_parquet\", TOO_LONG_FOR_STATS_PARQUET); \r\n                                                                          \r\n        record.setField(\"_required\", \"req\"); \r\n        record.setField(\"_all_nulls\", null); \r\n        record.setField(\"_some_nulls\", (i % 10 == 0) ? null : \"some\"); \r\n        record.setField(\"_no_nulls\", \"\"); \r\n        record.setField(\"_str\", i + \"str\" + i);\n\n        GenericRecord structNotNull = GenericRecord.create(_structFieldType);\n        structNotNull.setField(\"_int_field\", INT_MIN_VALUE + i);\n        record.setField(\"_struct_not_null\", structNotNull); \r\n\n        appender.add(record);\n      }\n    }\n\n    InputFile inFile = Files.localInput(orcFile);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    orcFile.deleteOnExit();\n  }\n","date":"2020-10-09 23:46:12","endLine":202,"groupId":"3543","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createOrcInputFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d4/13f476504abbe1ede3d3771a911de415ceaa6c.src","preCode":"  public void createOrcInputFile() throws IOException {\n    if (orcFile.exists()) {\n      Assert.assertTrue(orcFile.delete());\n    }\n\n    OutputFile outFile = Files.localOutput(orcFile);\n    try (FileAppender<GenericRecord> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      GenericRecord record = GenericRecord.create(FILE_SCHEMA);\n      \r\n      for (int i = 0; i < INT_MAX_VALUE - INT_MIN_VALUE + 1; i += 1) {\n        record.setField(\"_id\", INT_MIN_VALUE + i); \r\n        record.setField(\"_no_stats_parquet\", TOO_LONG_FOR_STATS_PARQUET); \r\n                                                                          \r\n        record.setField(\"_required\", \"req\"); \r\n        record.setField(\"_all_nulls\", null); \r\n        record.setField(\"_some_nulls\", (i % 10 == 0) ? null : \"some\"); \r\n        record.setField(\"_no_nulls\", \"\"); \r\n        record.setField(\"_str\", i + \"str\" + i);\n\n        GenericRecord structNotNull = GenericRecord.create(_structFieldType);\n        structNotNull.setField(\"_int_field\", INT_MIN_VALUE + i);\n        record.setField(\"_struct_not_null\", structNotNull); \r\n\n        appender.add(record);\n      }\n    }\n\n    InputFile inFile = Files.localInput(orcFile);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    orcFile.deleteOnExit();\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2020-05-26 01:15:35","commitOrder":2,"curCode":"  public void createOrcInputFile(List<Record> records) throws IOException {\n    if (ORC_FILE.exists()) {\n      Assert.assertTrue(ORC_FILE.delete());\n    }\n\n    OutputFile outFile = Files.localOutput(ORC_FILE);\n    try (FileAppender<Record> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      appender.addAll(records);\n    }\n\n    InputFile inFile = Files.localInput(ORC_FILE);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    ORC_FILE.deleteOnExit();\n  }\n","date":"2020-05-26 01:15:35","endLine":195,"groupId":"3543","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createOrcInputFile","params":"(List<Record>records)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/86/47a9c7dee02b6ce46ecee97a74de7421cd16f4.src","preCode":"  public void createOrcInputFile(List<Record> records) throws IOException {\n    if (ORC_FILE.exists()) {\n      Assert.assertTrue(ORC_FILE.delete());\n    }\n\n    OutputFile outFile = Files.localOutput(ORC_FILE);\n    try (FileAppender<Record> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      appender.addAll(records);\n    }\n\n    InputFile inFile = Files.localInput(ORC_FILE);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    ORC_FILE.deleteOnExit();\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilterTypes.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"N"}],"commitId":"29c245471b9b9244e944953a2d6e556a347573ad","commitMessage":"@@@Parquet: Remove hard-coded file paths from tests (#1562)\n\n* Remove hard-coded file paths from tests.\n\n* Fix checkstyle in tests.","date":"2020-10-09 23:46:12","modifiedFileCount":"2","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-05-26 01:15:35","codes":[{"authorDate":"2020-12-06 09:14:27","commitOrder":3,"curCode":"  public void createOrcInputFile() throws IOException {\n    this.orcFile = temp.newFile();\n    Assert.assertTrue(orcFile.delete());\n\n    OutputFile outFile = Files.localOutput(orcFile);\n    try (FileAppender<GenericRecord> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      GenericRecord record = GenericRecord.create(FILE_SCHEMA);\n      \r\n      for (int i = 0; i < INT_MAX_VALUE - INT_MIN_VALUE + 1; i += 1) {\n        record.setField(\"_id\", INT_MIN_VALUE + i); \r\n        record.setField(\"_no_stats_parquet\", TOO_LONG_FOR_STATS_PARQUET); \r\n                                                                          \r\n        record.setField(\"_required\", \"req\"); \r\n        record.setField(\"_all_nulls\", null); \r\n        record.setField(\"_some_nulls\", (i % 10 == 0) ? null : \"some\"); \r\n        record.setField(\"_no_nulls\", \"\"); \r\n        record.setField(\"_str\", i + \"str\" + i);\n        record.setField(\"_all_nans\", Double.NaN); \r\n        record.setField(\"_some_nans\", (i % 10 == 0) ? Float.NaN : 2F); \r\n        record.setField(\"_no_nans\", 3D); \r\n\n        GenericRecord structNotNull = GenericRecord.create(_structFieldType);\n        structNotNull.setField(\"_int_field\", INT_MIN_VALUE + i);\n        record.setField(\"_struct_not_null\", structNotNull); \r\n\n        appender.add(record);\n      }\n    }\n\n    InputFile inFile = Files.localInput(orcFile);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    orcFile.deleteOnExit();\n  }\n","date":"2020-12-06 09:14:27","endLine":214,"groupId":"10580","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createOrcInputFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b8/2d6eb663d5a242a3e36e0413c2888e180e76d6.src","preCode":"  public void createOrcInputFile() throws IOException {\n    this.orcFile = temp.newFile();\n    Assert.assertTrue(orcFile.delete());\n\n    OutputFile outFile = Files.localOutput(orcFile);\n    try (FileAppender<GenericRecord> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      GenericRecord record = GenericRecord.create(FILE_SCHEMA);\n      \r\n      for (int i = 0; i < INT_MAX_VALUE - INT_MIN_VALUE + 1; i += 1) {\n        record.setField(\"_id\", INT_MIN_VALUE + i); \r\n        record.setField(\"_no_stats_parquet\", TOO_LONG_FOR_STATS_PARQUET); \r\n                                                                          \r\n        record.setField(\"_required\", \"req\"); \r\n        record.setField(\"_all_nulls\", null); \r\n        record.setField(\"_some_nulls\", (i % 10 == 0) ? null : \"some\"); \r\n        record.setField(\"_no_nulls\", \"\"); \r\n        record.setField(\"_str\", i + \"str\" + i);\n\n        GenericRecord structNotNull = GenericRecord.create(_structFieldType);\n        structNotNull.setField(\"_int_field\", INT_MIN_VALUE + i);\n        record.setField(\"_struct_not_null\", structNotNull); \r\n\n        appender.add(record);\n      }\n    }\n\n    InputFile inFile = Files.localInput(orcFile);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    orcFile.deleteOnExit();\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2020-05-26 01:15:35","commitOrder":3,"curCode":"  public void createOrcInputFile(List<Record> records) throws IOException {\n    if (ORC_FILE.exists()) {\n      Assert.assertTrue(ORC_FILE.delete());\n    }\n\n    OutputFile outFile = Files.localOutput(ORC_FILE);\n    try (FileAppender<Record> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      appender.addAll(records);\n    }\n\n    InputFile inFile = Files.localInput(ORC_FILE);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    ORC_FILE.deleteOnExit();\n  }\n","date":"2020-05-26 01:15:35","endLine":195,"groupId":"10580","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createOrcInputFile","params":"(List<Record>records)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/86/47a9c7dee02b6ce46ecee97a74de7421cd16f4.src","preCode":"  public void createOrcInputFile(List<Record> records) throws IOException {\n    if (ORC_FILE.exists()) {\n      Assert.assertTrue(ORC_FILE.delete());\n    }\n\n    OutputFile outFile = Files.localOutput(ORC_FILE);\n    try (FileAppender<Record> appender = ORC.write(outFile)\n        .schema(FILE_SCHEMA)\n        .createWriterFunc(GenericOrcWriter::buildWriter)\n        .build()) {\n      appender.addAll(records);\n    }\n\n    InputFile inFile = Files.localInput(ORC_FILE);\n    try (Reader reader = OrcFile.createReader(new Path(inFile.location()),\n        OrcFile.readerOptions(new Configuration()))) {\n      Assert.assertEquals(\"Should create only one stripe\", 1, reader.getStripes().size());\n    }\n\n    ORC_FILE.deleteOnExit();\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilterTypes.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"N"}],"commitId":"fab4a5f2db140fdb132205e78934a145e646758b","commitMessage":"@@@API: add isNaN and notNaN predicates (#1747)\n\n","date":"2020-12-06 09:14:27","modifiedFileCount":"27","status":"M","submitter":"yyanyy"}]
