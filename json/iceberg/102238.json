[{"authorTime":"2021-01-14 12:35:25","codes":[{"authorDate":"2021-01-14 12:35:25","commitOrder":1,"curCode":"  public void testProcessAllRecords() throws Exception {\n    List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(10);\n\n    List<FlinkInputSplit> splits = generateSplits();\n    Assert.assertEquals(\"Should have 10 splits\", 10, splits.size());\n\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      harness.open();\n\n      SteppingMailboxProcessor processor = createLocalMailbox(harness);\n\n      List<Record> expected = Lists.newArrayList();\n      for (int i = 0; i < splits.size(); i++) {\n        \r\n        harness.processElement(splits.get(i), -1);\n\n        \r\n        Assert.assertTrue(\"Should processed 1 split\", processor.runMailboxStep());\n\n        \r\n        expected.addAll(expectedRecords.get(i));\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n    }\n  }\n","date":"2021-01-14 12:35:25","endLine":112,"groupId":"2939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessAllRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/11/2f02167674c508ca5d9450628c87993241a3e6.src","preCode":"  public void testProcessAllRecords() throws Exception {\n    List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(10);\n\n    List<FlinkInputSplit> splits = generateSplits();\n    Assert.assertEquals(\"Should have 10 splits\", 10, splits.size());\n\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      harness.open();\n\n      SteppingMailboxProcessor processor = createLocalMailbox(harness);\n\n      List<Record> expected = Lists.newArrayList();\n      for (int i = 0; i < splits.size(); i++) {\n        \r\n        harness.processElement(splits.get(i), -1);\n\n        \r\n        Assert.assertTrue(\"Should processed 1 split\", processor.runMailboxStep());\n\n        \r\n        expected.addAll(expectedRecords.get(i));\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestStreamingReaderOperator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2021-01-14 12:35:25","commitOrder":1,"curCode":"  public void testCheckpointRestore() throws Exception {\n    List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(15);\n\n    List<FlinkInputSplit> splits = generateSplits();\n    Assert.assertEquals(\"Should have 10 splits\", 15, splits.size());\n\n    OperatorSubtaskState state;\n    List<Record> expected = Lists.newArrayList();\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      harness.open();\n\n      \r\n      for (FlinkInputSplit split : splits) {\n        harness.processElement(split, -1);\n      }\n\n      \r\n      SteppingMailboxProcessor localMailbox = createLocalMailbox(harness);\n      for (int i = 0; i < 5; i++) {\n        expected.addAll(expectedRecords.get(i));\n        Assert.assertTrue(\"Should have processed the split#\" + i, localMailbox.runMailboxStep());\n\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n\n      \r\n      state = harness.snapshot(1, 1);\n    }\n\n    expected.clear();\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      \r\n      harness.initializeState(state);\n      harness.open();\n\n      SteppingMailboxProcessor localMailbox = createLocalMailbox(harness);\n\n      for (int i = 5; i < 10; i++) {\n        expected.addAll(expectedRecords.get(i));\n        Assert.assertTrue(\"Should have processed one split#\" + i, localMailbox.runMailboxStep());\n\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n\n      \r\n      for (int i = 10; i < 15; i++) {\n        expected.addAll(expectedRecords.get(i));\n        harness.processElement(splits.get(i), 1);\n\n        Assert.assertTrue(\"Should have processed the split#\" + i, localMailbox.runMailboxStep());\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n    }\n  }\n","date":"2021-01-14 12:35:25","endLine":210,"groupId":"2941","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/11/2f02167674c508ca5d9450628c87993241a3e6.src","preCode":"  public void testCheckpointRestore() throws Exception {\n    List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(15);\n\n    List<FlinkInputSplit> splits = generateSplits();\n    Assert.assertEquals(\"Should have 10 splits\", 15, splits.size());\n\n    OperatorSubtaskState state;\n    List<Record> expected = Lists.newArrayList();\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      harness.open();\n\n      \r\n      for (FlinkInputSplit split : splits) {\n        harness.processElement(split, -1);\n      }\n\n      \r\n      SteppingMailboxProcessor localMailbox = createLocalMailbox(harness);\n      for (int i = 0; i < 5; i++) {\n        expected.addAll(expectedRecords.get(i));\n        Assert.assertTrue(\"Should have processed the split#\" + i, localMailbox.runMailboxStep());\n\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n\n      \r\n      state = harness.snapshot(1, 1);\n    }\n\n    expected.clear();\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      \r\n      harness.initializeState(state);\n      harness.open();\n\n      SteppingMailboxProcessor localMailbox = createLocalMailbox(harness);\n\n      for (int i = 5; i < 10; i++) {\n        expected.addAll(expectedRecords.get(i));\n        Assert.assertTrue(\"Should have processed one split#\" + i, localMailbox.runMailboxStep());\n\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n\n      \r\n      for (int i = 10; i < 15; i++) {\n        expected.addAll(expectedRecords.get(i));\n        harness.processElement(splits.get(i), 1);\n\n        Assert.assertTrue(\"Should have processed the split#\" + i, localMailbox.runMailboxStep());\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestStreamingReaderOperator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"}],"commitId":"14331c4e5f61e14cdc527a567f5dafc7fd95c3e7","commitMessage":"@@@Flink: Support streaming reader. (#1793)\n\n","date":"2021-01-14 12:35:25","modifiedFileCount":"8","status":"B","submitter":"openinx"},{"authorTime":"2021-03-05 11:21:11","codes":[{"authorDate":"2021-03-05 11:21:11","commitOrder":2,"curCode":"  public void testProcessAllRecords() throws Exception {\n    List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(10);\n\n    List<FlinkInputSplit> splits = generateSplits();\n    Assert.assertEquals(\"Should have 10 splits\", 10, splits.size());\n\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      harness.open();\n\n      SteppingMailboxProcessor processor = createLocalMailbox(harness);\n\n      List<Record> expected = Lists.newArrayList();\n      for (int i = 0; i < splits.size(); i++) {\n        \r\n        harness.processElement(splits.get(i), -1);\n\n        \r\n        Assert.assertTrue(\"Should processed 1 split\", processor.runMailboxStep());\n\n        \r\n        expected.addAll(expectedRecords.get(i));\n        TestHelpers.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n    }\n  }\n","date":"2021-03-05 11:21:11","endLine":113,"groupId":"102238","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testProcessAllRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/5d6e1e4975b0cc841e2ff0cb40a4f6b1ceeff0.src","preCode":"  public void testProcessAllRecords() throws Exception {\n    List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(10);\n\n    List<FlinkInputSplit> splits = generateSplits();\n    Assert.assertEquals(\"Should have 10 splits\", 10, splits.size());\n\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      harness.open();\n\n      SteppingMailboxProcessor processor = createLocalMailbox(harness);\n\n      List<Record> expected = Lists.newArrayList();\n      for (int i = 0; i < splits.size(); i++) {\n        \r\n        harness.processElement(splits.get(i), -1);\n\n        \r\n        Assert.assertTrue(\"Should processed 1 split\", processor.runMailboxStep());\n\n        \r\n        expected.addAll(expectedRecords.get(i));\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestStreamingReaderOperator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2021-03-05 11:21:11","commitOrder":2,"curCode":"  public void testCheckpointRestore() throws Exception {\n    List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(15);\n\n    List<FlinkInputSplit> splits = generateSplits();\n    Assert.assertEquals(\"Should have 10 splits\", 15, splits.size());\n\n    OperatorSubtaskState state;\n    List<Record> expected = Lists.newArrayList();\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      harness.open();\n\n      \r\n      for (FlinkInputSplit split : splits) {\n        harness.processElement(split, -1);\n      }\n\n      \r\n      SteppingMailboxProcessor localMailbox = createLocalMailbox(harness);\n      for (int i = 0; i < 5; i++) {\n        expected.addAll(expectedRecords.get(i));\n        Assert.assertTrue(\"Should have processed the split#\" + i, localMailbox.runMailboxStep());\n\n        TestHelpers.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n\n      \r\n      state = harness.snapshot(1, 1);\n    }\n\n    expected.clear();\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      \r\n      harness.initializeState(state);\n      harness.open();\n\n      SteppingMailboxProcessor localMailbox = createLocalMailbox(harness);\n\n      for (int i = 5; i < 10; i++) {\n        expected.addAll(expectedRecords.get(i));\n        Assert.assertTrue(\"Should have processed one split#\" + i, localMailbox.runMailboxStep());\n\n        TestHelpers.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n\n      \r\n      for (int i = 10; i < 15; i++) {\n        expected.addAll(expectedRecords.get(i));\n        harness.processElement(splits.get(i), 1);\n\n        Assert.assertTrue(\"Should have processed the split#\" + i, localMailbox.runMailboxStep());\n        TestHelpers.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n    }\n  }\n","date":"2021-03-05 11:21:11","endLine":211,"groupId":"102238","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testCheckpointRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/5d6e1e4975b0cc841e2ff0cb40a4f6b1ceeff0.src","preCode":"  public void testCheckpointRestore() throws Exception {\n    List<List<Record>> expectedRecords = generateRecordsAndCommitTxn(15);\n\n    List<FlinkInputSplit> splits = generateSplits();\n    Assert.assertEquals(\"Should have 10 splits\", 15, splits.size());\n\n    OperatorSubtaskState state;\n    List<Record> expected = Lists.newArrayList();\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      harness.open();\n\n      \r\n      for (FlinkInputSplit split : splits) {\n        harness.processElement(split, -1);\n      }\n\n      \r\n      SteppingMailboxProcessor localMailbox = createLocalMailbox(harness);\n      for (int i = 0; i < 5; i++) {\n        expected.addAll(expectedRecords.get(i));\n        Assert.assertTrue(\"Should have processed the split#\" + i, localMailbox.runMailboxStep());\n\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n\n      \r\n      state = harness.snapshot(1, 1);\n    }\n\n    expected.clear();\n    try (OneInputStreamOperatorTestHarness<FlinkInputSplit, RowData> harness = createReader()) {\n      harness.setup();\n      \r\n      harness.initializeState(state);\n      harness.open();\n\n      SteppingMailboxProcessor localMailbox = createLocalMailbox(harness);\n\n      for (int i = 5; i < 10; i++) {\n        expected.addAll(expectedRecords.get(i));\n        Assert.assertTrue(\"Should have processed one split#\" + i, localMailbox.runMailboxStep());\n\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n\n      \r\n      for (int i = 10; i < 15; i++) {\n        expected.addAll(expectedRecords.get(i));\n        harness.processElement(splits.get(i), 1);\n\n        Assert.assertTrue(\"Should have processed the split#\" + i, localMailbox.runMailboxStep());\n        TestFlinkScan.assertRecords(readOutputValues(harness), expected, SCHEMA);\n      }\n    }\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestStreamingReaderOperator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"343104c8e40bbcacbf6297445cc9dfc82769afe8","commitMessage":"@@@Flink: Refactor flink source tests for FLIP-27 unified source. (#2047)\n\n","date":"2021-03-05 11:21:11","modifiedFileCount":"8","status":"M","submitter":"Steven Zhen Wu"}]
