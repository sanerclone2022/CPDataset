[{"authorTime":"2021-01-07 03:21:21","codes":[{"authorDate":"2021-01-07 03:21:21","commitOrder":1,"curCode":"  public void testCreateTableWithoutSpec() throws TException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\");\n\n    \r\n    org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier);\n    Assert.assertEquals(PartitionSpec.unpartitioned(), icebergTable.spec());\n\n    \r\n    org.apache.hadoop.hive.metastore.api.Table hmsTable =\n        shell.metastore().clientPool().run(client -> client.getTable(\"default\", \"customers\"));\n\n    Map<String, String> hmsParams = hmsTable.getParameters();\n    IGNORED_PARAMS.forEach(hmsParams::remove);\n\n    \r\n    Assert.assertNull(hmsParams.get(InputFormatConfig.PARTITION_SPEC));\n\n    if (Catalogs.hiveCatalog(shell.getHiveConf())) {\n      Assert.assertEquals(6, hmsParams.size());\n    } else {\n      Assert.assertEquals(5, hmsParams.size());\n    }\n  }\n","date":"2021-01-07 03:21:21","endLine":265,"groupId":"555","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithoutSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/09/6c9b40d58b6d08e34aedb986c1d4b9d06ccb89.src","preCode":"  public void testCreateTableWithoutSpec() throws TException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\");\n\n    \r\n    org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier);\n    Assert.assertEquals(PartitionSpec.unpartitioned(), icebergTable.spec());\n\n    \r\n    org.apache.hadoop.hive.metastore.api.Table hmsTable =\n        shell.metastore().clientPool().run(client -> client.getTable(\"default\", \"customers\"));\n\n    Map<String, String> hmsParams = hmsTable.getParameters();\n    IGNORED_PARAMS.forEach(hmsParams::remove);\n\n    \r\n    Assert.assertNull(hmsParams.get(InputFormatConfig.PARTITION_SPEC));\n\n    if (Catalogs.hiveCatalog(shell.getHiveConf())) {\n      Assert.assertEquals(6, hmsParams.size());\n    } else {\n      Assert.assertEquals(5, hmsParams.size());\n    }\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"},{"authorDate":"2021-01-07 03:21:21","commitOrder":1,"curCode":"  public void testDeleteBackingTable() throws TException, IOException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" +\n        \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE')\");\n\n    if (!Catalogs.hiveCatalog(shell.getHiveConf())) {\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      testTables.loadTable(identifier);\n    } else {\n      \r\n      org.apache.hadoop.hive.metastore.api.Table hmsTable =\n          shell.metastore().clientPool().run(client -> client.getTable(\"default\", \"customers\"));\n      Path hmsTableLocation = new Path(hmsTable.getSd().getLocation());\n\n      \r\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      AssertHelpers.assertThrows(\"should throw exception\", NoSuchTableException.class,\n          \"Table does not exist\", () -> {\n            testTables.loadTable(identifier);\n          }\n      );\n\n      \r\n      FileSystem fs = Util.getFs(hmsTableLocation, shell.getHiveConf());\n      Assert.assertEquals(1, fs.listStatus(hmsTableLocation).length);\n      Assert.assertEquals(1, fs.listStatus(new Path(hmsTableLocation, \"metadata\")).length);\n    }\n  }\n","date":"2021-01-07 03:21:21","endLine":337,"groupId":"5122","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteBackingTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/09/6c9b40d58b6d08e34aedb986c1d4b9d06ccb89.src","preCode":"  public void testDeleteBackingTable() throws TException, IOException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" +\n        \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE')\");\n\n    if (!Catalogs.hiveCatalog(shell.getHiveConf())) {\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      testTables.loadTable(identifier);\n    } else {\n      \r\n      org.apache.hadoop.hive.metastore.api.Table hmsTable =\n          shell.metastore().clientPool().run(client -> client.getTable(\"default\", \"customers\"));\n      Path hmsTableLocation = new Path(hmsTable.getSd().getLocation());\n\n      \r\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      AssertHelpers.assertThrows(\"should throw exception\", NoSuchTableException.class,\n          \"Table does not exist\", () -> {\n            testTables.loadTable(identifier);\n          }\n      );\n\n      \r\n      FileSystem fs = Util.getFs(hmsTableLocation, shell.getHiveConf());\n      Assert.assertEquals(1, fs.listStatus(hmsTableLocation).length);\n      Assert.assertEquals(1, fs.listStatus(new Path(hmsTableLocation, \"metadata\")).length);\n    }\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"}],"commitId":"9c5948fd23aa664e649b3ab81a999b89f68b6857","commitMessage":"@@@Hive: Run fewer combinations in TestHiveIcebergStorageHandler (#1924) (#2030)\n\n","date":"2021-01-07 03:21:21","modifiedFileCount":"0","status":"B","submitter":"pvary"},{"authorTime":"2021-01-25 22:41:20","codes":[{"authorDate":"2021-01-25 22:41:20","commitOrder":2,"curCode":"  public void testCreateTableWithoutSpec() {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\");\n\n    \r\n    org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier);\n    Assert.assertEquals(PartitionSpec.unpartitioned(), icebergTable.spec());\n  }\n","date":"2021-01-25 22:41:20","endLine":218,"groupId":"555","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithoutSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/73/11bb828263d2415430f114ee4adb81f19ae156.src","preCode":"  public void testCreateTableWithoutSpec() throws TException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\");\n\n    \r\n    org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier);\n    Assert.assertEquals(PartitionSpec.unpartitioned(), icebergTable.spec());\n\n    \r\n    org.apache.hadoop.hive.metastore.api.Table hmsTable =\n        shell.metastore().clientPool().run(client -> client.getTable(\"default\", \"customers\"));\n\n    Map<String, String> hmsParams = hmsTable.getParameters();\n    IGNORED_PARAMS.forEach(hmsParams::remove);\n\n    \r\n    Assert.assertNull(hmsParams.get(InputFormatConfig.PARTITION_SPEC));\n\n    if (Catalogs.hiveCatalog(shell.getHiveConf())) {\n      Assert.assertEquals(6, hmsParams.size());\n    } else {\n      Assert.assertEquals(5, hmsParams.size());\n    }\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"},{"authorDate":"2021-01-25 22:41:20","commitOrder":2,"curCode":"  public void testDeleteBackingTable() throws TException, IOException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" +\n        \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE')\");\n\n    if (!Catalogs.hiveCatalog(shell.getHiveConf())) {\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      testTables.loadTable(identifier);\n    } else {\n      \r\n      org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\", \"customers\");\n      Path hmsTableLocation = new Path(hmsTable.getSd().getLocation());\n\n      \r\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      AssertHelpers.assertThrows(\"should throw exception\", NoSuchTableException.class,\n          \"Table does not exist\", () -> {\n            testTables.loadTable(identifier);\n          }\n      );\n\n      \r\n      FileSystem fs = Util.getFs(hmsTableLocation, shell.getHiveConf());\n      Assert.assertEquals(1, fs.listStatus(hmsTableLocation).length);\n      Assert.assertEquals(1, fs.listStatus(new Path(hmsTableLocation, \"metadata\")).length);\n    }\n  }\n","date":"2021-01-25 22:41:20","endLine":274,"groupId":"556","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteBackingTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/73/11bb828263d2415430f114ee4adb81f19ae156.src","preCode":"  public void testDeleteBackingTable() throws TException, IOException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" +\n        \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE')\");\n\n    if (!Catalogs.hiveCatalog(shell.getHiveConf())) {\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      testTables.loadTable(identifier);\n    } else {\n      \r\n      org.apache.hadoop.hive.metastore.api.Table hmsTable =\n          shell.metastore().clientPool().run(client -> client.getTable(\"default\", \"customers\"));\n      Path hmsTableLocation = new Path(hmsTable.getSd().getLocation());\n\n      \r\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      AssertHelpers.assertThrows(\"should throw exception\", NoSuchTableException.class,\n          \"Table does not exist\", () -> {\n            testTables.loadTable(identifier);\n          }\n      );\n\n      \r\n      FileSystem fs = Util.getFs(hmsTableLocation, shell.getHiveConf());\n      Assert.assertEquals(1, fs.listStatus(hmsTableLocation).length);\n      Assert.assertEquals(1, fs.listStatus(new Path(hmsTableLocation, \"metadata\")).length);\n    }\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"c7ff6d51377eaae7f476e0c0730dea3b5a84fabb","commitMessage":"@@@Hive: Push Iceberg table property values to HMS table properties (#2123)\n\n","date":"2021-01-25 22:41:20","modifiedFileCount":"4","status":"M","submitter":"Marton Bod"},{"authorTime":"2021-04-12 15:36:22","codes":[{"authorDate":"2021-04-12 15:36:22","commitOrder":3,"curCode":"  public void testCreateTableWithoutSpec() {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"','\" +\n        InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\");\n\n    \r\n    org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier);\n    Assert.assertEquals(PartitionSpec.unpartitioned(), icebergTable.spec());\n  }\n","date":"2021-04-12 15:36:22","endLine":256,"groupId":"3027","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithoutSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9a/ce48946f15a58c6dfa35db5f484be3d968da9d.src","preCode":"  public void testCreateTableWithoutSpec() {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"')\");\n\n    \r\n    org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier);\n    Assert.assertEquals(PartitionSpec.unpartitioned(), icebergTable.spec());\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2021-04-12 15:36:22","commitOrder":3,"curCode":"  public void testDeleteBackingTable() throws TException, IOException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" +\n        \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE', \" +\n        \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\");\n\n    org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\", \"customers\");\n    Properties tableProperties = new Properties();\n    hmsTable.getParameters().entrySet().stream()\n            .filter(e -> !IGNORED_PARAMS.contains(e.getKey()))\n            .forEach(e -> tableProperties.put(e.getKey(), e.getValue()));\n    if (!Catalogs.hiveCatalog(shell.getHiveConf(), tableProperties)) {\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      testTables.loadTable(identifier);\n    } else {\n      \r\n      Path hmsTableLocation = new Path(hmsTable.getSd().getLocation());\n\n      \r\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      AssertHelpers.assertThrows(\"should throw exception\", NoSuchTableException.class,\n          \"Table does not exist\", () -> {\n            testTables.loadTable(identifier);\n          }\n      );\n\n      \r\n      FileSystem fs = Util.getFs(hmsTableLocation, shell.getHiveConf());\n      Assert.assertEquals(1, fs.listStatus(hmsTableLocation).length);\n      Assert.assertEquals(1, fs.listStatus(new Path(hmsTableLocation, \"metadata\")).length);\n    }\n  }\n","date":"2021-04-12 15:36:22","endLine":317,"groupId":"4112","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteBackingTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9a/ce48946f15a58c6dfa35db5f484be3d968da9d.src","preCode":"  public void testDeleteBackingTable() throws TException, IOException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" +\n        \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE')\");\n\n    if (!Catalogs.hiveCatalog(shell.getHiveConf())) {\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      testTables.loadTable(identifier);\n    } else {\n      \r\n      org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\", \"customers\");\n      Path hmsTableLocation = new Path(hmsTable.getSd().getLocation());\n\n      \r\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      AssertHelpers.assertThrows(\"should throw exception\", NoSuchTableException.class,\n          \"Table does not exist\", () -> {\n            testTables.loadTable(identifier);\n          }\n      );\n\n      \r\n      FileSystem fs = Util.getFs(hmsTableLocation, shell.getHiveConf());\n      Assert.assertEquals(1, fs.listStatus(hmsTableLocation).length);\n      Assert.assertEquals(1, fs.listStatus(new Path(hmsTableLocation, \"metadata\")).length);\n    }\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"db8248c16e99c435ff7eed8fa86bc3913af2756a","commitMessage":"@@@Hive: Configure catalog type on table level. (#2129)\n\n","date":"2021-04-12 15:36:22","modifiedFileCount":"14","status":"M","submitter":"L?szl? Pint?r"},{"authorTime":"2021-05-18 19:23:16","codes":[{"authorDate":"2021-05-18 19:23:16","commitOrder":4,"curCode":"  public void testCreateTableWithoutSpec() {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"','\" +\n        InputFormatConfig.CATALOG_NAME + \"'='\" + testTables.catalogName() + \"')\");\n\n    \r\n    org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier);\n    Assert.assertEquals(PartitionSpec.unpartitioned(), icebergTable.spec());\n  }\n","date":"2021-05-18 19:23:16","endLine":256,"groupId":"101594","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithoutSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c0/40cfc5f2b72b4435957f358f169f0189945053.src","preCode":"  public void testCreateTableWithoutSpec() {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"','\" +\n        InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\");\n\n    \r\n    org.apache.iceberg.Table icebergTable = testTables.loadTable(identifier);\n    Assert.assertEquals(PartitionSpec.unpartitioned(), icebergTable.spec());\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2021-05-18 19:23:16","commitOrder":4,"curCode":"  public void testDeleteBackingTable() throws TException, IOException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" +\n        \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE', \" +\n        \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + testTables.catalogName() + \"')\");\n\n    org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\", \"customers\");\n    Properties tableProperties = new Properties();\n    hmsTable.getParameters().entrySet().stream()\n            .filter(e -> !IGNORED_PARAMS.contains(e.getKey()))\n            .forEach(e -> tableProperties.put(e.getKey(), e.getValue()));\n    if (!Catalogs.hiveCatalog(shell.getHiveConf(), tableProperties)) {\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      testTables.loadTable(identifier);\n    } else {\n      \r\n      Path hmsTableLocation = new Path(hmsTable.getSd().getLocation());\n\n      \r\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      AssertHelpers.assertThrows(\"should throw exception\", NoSuchTableException.class,\n          \"Table does not exist\", () -> {\n            testTables.loadTable(identifier);\n          }\n      );\n\n      \r\n      FileSystem fs = Util.getFs(hmsTableLocation, shell.getHiveConf());\n      Assert.assertEquals(1, fs.listStatus(hmsTableLocation).length);\n      Assert.assertEquals(1, fs.listStatus(new Path(hmsTableLocation, \"metadata\")).length);\n    }\n  }\n","date":"2021-05-18 19:23:16","endLine":317,"groupId":"101594","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteBackingTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c0/40cfc5f2b72b4435957f358f169f0189945053.src","preCode":"  public void testDeleteBackingTable() throws TException, IOException, InterruptedException {\n    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n\n    shell.executeStatement(\"CREATE EXTERNAL TABLE customers \" +\n        \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n        testTables.locationForCreateTableSQL(identifier) +\n        \"TBLPROPERTIES ('\" + InputFormatConfig.TABLE_SCHEMA + \"'='\" +\n        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + \"', \" +\n        \"'\" + InputFormatConfig.EXTERNAL_TABLE_PURGE + \"'='FALSE', \" +\n        \"'\" + InputFormatConfig.CATALOG_NAME + \"'='\" + Catalogs.ICEBERG_DEFAULT_CATALOG_NAME + \"')\");\n\n    org.apache.hadoop.hive.metastore.api.Table hmsTable = shell.metastore().getTable(\"default\", \"customers\");\n    Properties tableProperties = new Properties();\n    hmsTable.getParameters().entrySet().stream()\n            .filter(e -> !IGNORED_PARAMS.contains(e.getKey()))\n            .forEach(e -> tableProperties.put(e.getKey(), e.getValue()));\n    if (!Catalogs.hiveCatalog(shell.getHiveConf(), tableProperties)) {\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      testTables.loadTable(identifier);\n    } else {\n      \r\n      Path hmsTableLocation = new Path(hmsTable.getSd().getLocation());\n\n      \r\n      shell.executeStatement(\"DROP TABLE customers\");\n\n      \r\n      AssertHelpers.assertThrows(\"should throw exception\", NoSuchTableException.class,\n          \"Table does not exist\", () -> {\n            testTables.loadTable(identifier);\n          }\n      );\n\n      \r\n      FileSystem fs = Util.getFs(hmsTableLocation, shell.getHiveConf());\n      Assert.assertEquals(1, fs.listStatus(hmsTableLocation).length);\n      Assert.assertEquals(1, fs.listStatus(new Path(hmsTableLocation, \"metadata\")).length);\n    }\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"324b11a02b8b3062cf555e0eb97bbe93ece57e31","commitMessage":"@@@Hive: unify catalog experience across engines (#2565)\n\n","date":"2021-05-18 19:23:16","modifiedFileCount":"9","status":"M","submitter":"Jack Ye"}]
