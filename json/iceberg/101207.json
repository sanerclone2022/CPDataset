[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testSchema() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(3, \"preferences\", Types.StructType.of(\n            required(8, \"feature1\", Types.BooleanType.get()),\n            optional(9, \"feature2\", Types.BooleanType.get())\n        )),\n        required(4, \"locations\", Types.MapType.ofRequired(10, 11,\n            Types.StringType.get(),\n            Types.StructType.of(\n                required(12, \"lat\", Types.FloatType.get()),\n                required(13, \"long\", Types.FloatType.get())\n            ))),\n        optional(5, \"points\", Types.ListType.ofOptional(14,\n            Types.StructType.of(\n                required(15, \"x\", Types.LongType.get()),\n                required(16, \"y\", Types.LongType.get())\n            ))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17,\n            Types.DoubleType.get()\n        )),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19,\n            Types.StringType.get(),\n            Types.StringType.get()\n        )),\n        required(8, \"complex_key_map\", Types.MapType.ofOptional(20, 21,\n            Types.StructType.of(\n                required(22, \"x\", Types.LongType.get()),\n                optional(23, \"y\", Types.LongType.get())),\n            Types.StringType.get()))\n    );\n\n    Assert.assertEquals(\"Schema serialziation should be equal to starting schema\",\n        schema.asStruct(), TestHelpers.roundTripSerialize(schema).asStruct());\n  }\n","date":"2019-03-21 07:25:05","endLine":154,"groupId":"3419","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/82/e0636e415889c335cedfb7245ad7ea297326a6.src","preCode":"  public void testSchema() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(3, \"preferences\", Types.StructType.of(\n            required(8, \"feature1\", Types.BooleanType.get()),\n            optional(9, \"feature2\", Types.BooleanType.get())\n        )),\n        required(4, \"locations\", Types.MapType.ofRequired(10, 11,\n            Types.StringType.get(),\n            Types.StructType.of(\n                required(12, \"lat\", Types.FloatType.get()),\n                required(13, \"long\", Types.FloatType.get())\n            ))),\n        optional(5, \"points\", Types.ListType.ofOptional(14,\n            Types.StructType.of(\n                required(15, \"x\", Types.LongType.get()),\n                required(16, \"y\", Types.LongType.get())\n            ))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17,\n            Types.DoubleType.get()\n        )),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19,\n            Types.StringType.get(),\n            Types.StringType.get()\n        )),\n        required(8, \"complex_key_map\", Types.MapType.ofOptional(20, 21,\n            Types.StructType.of(\n                required(22, \"x\", Types.LongType.get()),\n                optional(23, \"y\", Types.LongType.get())),\n            Types.StringType.get()))\n    );\n\n    Assert.assertEquals(\"Schema serialziation should be equal to starting schema\",\n        schema.asStruct(), TestHelpers.roundTripSerialize(schema).asStruct());\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/types/TestSerializableTypes.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testComplexSchema() {\n    org.apache.iceberg.Schema schema = new org.apache.iceberg.Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(\n            3,\n            \"preferences\",\n            Types.StructType\n                .of(required(8, \"feature1\", Types.BooleanType.get()), optional(9, \"feature2\", Types.BooleanType.get()))),\n        required(\n            4,\n            \"locations\",\n            Types.MapType.ofRequired(\n                10,\n                11,\n                Types.StructType.of(\n                    required(20, \"address\", Types.StringType.get()),\n                    required(21, \"city\", Types.StringType.get()),\n                    required(22, \"state\", Types.StringType.get()),\n                    required(23, \"zip\", Types.IntegerType.get())\n                ),\n                Types.StructType.of(required(12, \"lat\", Types.FloatType.get()), required(13, \"long\", Types.FloatType.get()))\n            )\n        ),\n        optional(\n            5,\n            \"points\",\n            Types.ListType.ofOptional(\n                14,\n                Types.StructType.of(required(15, \"x\", Types.LongType.get()), required(16, \"y\", Types.LongType.get())))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17, Types.DoubleType.get())),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19, Types.StringType.get(), Types.StringType.get())));\n\n    AvroSchemaUtil.convert(schema, \"newTableName\").toString(true);\n  }\n","date":"2019-03-21 07:25:05","endLine":263,"groupId":"4437","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/44/62e0152ea896990298209d213ce7bdf51637fb.src","preCode":"  public void testComplexSchema() {\n    org.apache.iceberg.Schema schema = new org.apache.iceberg.Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(\n            3,\n            \"preferences\",\n            Types.StructType\n                .of(required(8, \"feature1\", Types.BooleanType.get()), optional(9, \"feature2\", Types.BooleanType.get()))),\n        required(\n            4,\n            \"locations\",\n            Types.MapType.ofRequired(\n                10,\n                11,\n                Types.StructType.of(\n                    required(20, \"address\", Types.StringType.get()),\n                    required(21, \"city\", Types.StringType.get()),\n                    required(22, \"state\", Types.StringType.get()),\n                    required(23, \"zip\", Types.IntegerType.get())\n                ),\n                Types.StructType.of(required(12, \"lat\", Types.FloatType.get()), required(13, \"long\", Types.FloatType.get()))\n            )\n        ),\n        optional(\n            5,\n            \"points\",\n            Types.ListType.ofOptional(\n                14,\n                Types.StructType.of(required(15, \"x\", Types.LongType.get()), required(16, \"y\", Types.LongType.get())))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17, Types.DoubleType.get())),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19, Types.StringType.get(), Types.StringType.get())));\n\n    AvroSchemaUtil.convert(schema, \"newTableName\").toString(true);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/TestSchemaConversions.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-11-21 07:59:34","commitOrder":2,"curCode":"  public void testSchema() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(3, \"preferences\", Types.StructType.of(\n            required(8, \"feature1\", Types.BooleanType.get()),\n            optional(9, \"feature2\", Types.BooleanType.get())\n        )),\n        required(4, \"locations\", Types.MapType.ofRequired(10, 11,\n            Types.StringType.get(),\n            Types.StructType.of(\n                required(12, \"lat\", Types.FloatType.get()),\n                required(13, \"long\", Types.FloatType.get())\n            ))),\n        optional(5, \"points\", Types.ListType.ofOptional(14,\n            Types.StructType.of(\n                required(15, \"x\", Types.LongType.get()),\n                required(16, \"y\", Types.LongType.get())\n            ))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17,\n            Types.DoubleType.get()\n        )),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19,\n            Types.StringType.get(),\n            Types.StringType.get()\n        )),\n        required(20, \"complex_key_map\", Types.MapType.ofOptional(21, 22,\n            Types.StructType.of(\n                required(23, \"x\", Types.LongType.get()),\n                optional(24, \"y\", Types.LongType.get())),\n            Types.StringType.get()))\n    );\n\n    Assert.assertEquals(\"Schema serialziation should be equal to starting schema\",\n        schema.asStruct(), TestHelpers.roundTripSerialize(schema).asStruct());\n  }\n","date":"2019-11-21 07:59:34","endLine":154,"groupId":"3419","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/14/247cbe5b48c24980b8a6980edb48de2b22c5c2.src","preCode":"  public void testSchema() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(3, \"preferences\", Types.StructType.of(\n            required(8, \"feature1\", Types.BooleanType.get()),\n            optional(9, \"feature2\", Types.BooleanType.get())\n        )),\n        required(4, \"locations\", Types.MapType.ofRequired(10, 11,\n            Types.StringType.get(),\n            Types.StructType.of(\n                required(12, \"lat\", Types.FloatType.get()),\n                required(13, \"long\", Types.FloatType.get())\n            ))),\n        optional(5, \"points\", Types.ListType.ofOptional(14,\n            Types.StructType.of(\n                required(15, \"x\", Types.LongType.get()),\n                required(16, \"y\", Types.LongType.get())\n            ))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17,\n            Types.DoubleType.get()\n        )),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19,\n            Types.StringType.get(),\n            Types.StringType.get()\n        )),\n        required(8, \"complex_key_map\", Types.MapType.ofOptional(20, 21,\n            Types.StructType.of(\n                required(22, \"x\", Types.LongType.get()),\n                optional(23, \"y\", Types.LongType.get())),\n            Types.StringType.get()))\n    );\n\n    Assert.assertEquals(\"Schema serialziation should be equal to starting schema\",\n        schema.asStruct(), TestHelpers.roundTripSerialize(schema).asStruct());\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/types/TestSerializableTypes.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public void testComplexSchema() {\n    org.apache.iceberg.Schema schema = new org.apache.iceberg.Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(\n            3,\n            \"preferences\",\n            Types.StructType\n                .of(required(8, \"feature1\", Types.BooleanType.get()), optional(9, \"feature2\", Types.BooleanType.get()))),\n        required(\n            4,\n            \"locations\",\n            Types.MapType.ofRequired(\n                10,\n                11,\n                Types.StructType.of(\n                    required(20, \"address\", Types.StringType.get()),\n                    required(21, \"city\", Types.StringType.get()),\n                    required(22, \"state\", Types.StringType.get()),\n                    required(23, \"zip\", Types.IntegerType.get())\n                ),\n                Types.StructType.of(required(12, \"lat\", Types.FloatType.get()), required(13, \"long\", Types.FloatType.get()))\n            )\n        ),\n        optional(\n            5,\n            \"points\",\n            Types.ListType.ofOptional(\n                14,\n                Types.StructType.of(required(15, \"x\", Types.LongType.get()), required(16, \"y\", Types.LongType.get())))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17, Types.DoubleType.get())),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19, Types.StringType.get(), Types.StringType.get())));\n\n    AvroSchemaUtil.convert(schema, \"newTableName\").toString(true);\n  }\n","date":"2019-03-21 07:25:05","endLine":263,"groupId":"4437","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/44/62e0152ea896990298209d213ce7bdf51637fb.src","preCode":"  public void testComplexSchema() {\n    org.apache.iceberg.Schema schema = new org.apache.iceberg.Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(\n            3,\n            \"preferences\",\n            Types.StructType\n                .of(required(8, \"feature1\", Types.BooleanType.get()), optional(9, \"feature2\", Types.BooleanType.get()))),\n        required(\n            4,\n            \"locations\",\n            Types.MapType.ofRequired(\n                10,\n                11,\n                Types.StructType.of(\n                    required(20, \"address\", Types.StringType.get()),\n                    required(21, \"city\", Types.StringType.get()),\n                    required(22, \"state\", Types.StringType.get()),\n                    required(23, \"zip\", Types.IntegerType.get())\n                ),\n                Types.StructType.of(required(12, \"lat\", Types.FloatType.get()), required(13, \"long\", Types.FloatType.get()))\n            )\n        ),\n        optional(\n            5,\n            \"points\",\n            Types.ListType.ofOptional(\n                14,\n                Types.StructType.of(required(15, \"x\", Types.LongType.get()), required(16, \"y\", Types.LongType.get())))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17, Types.DoubleType.get())),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19, Types.StringType.get(), Types.StringType.get())));\n\n    AvroSchemaUtil.convert(schema, \"newTableName\").toString(true);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/TestSchemaConversions.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"}],"commitId":"8b41ee5e34b5d79e7a04b3c810d7073cfed01a3a","commitMessage":"@@@Add schema field ID validation (#619)\n\n","date":"2019-11-21 07:59:34","modifiedFileCount":"8","status":"M","submitter":"Chen Junjie"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2020-03-31 00:29:35","commitOrder":3,"curCode":"  public void testSchema() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(3, \"preferences\", Types.StructType.of(\n            required(8, \"feature1\", Types.BooleanType.get()),\n            optional(9, \"feature2\", Types.BooleanType.get())\n        )),\n        required(4, \"locations\", Types.MapType.ofRequired(10, 11,\n            Types.StringType.get(),\n            Types.StructType.of(\n                required(12, \"lat\", Types.FloatType.get()),\n                required(13, \"long\", Types.FloatType.get())\n            ))),\n        optional(5, \"points\", Types.ListType.ofOptional(14,\n            Types.StructType.of(\n                required(15, \"x\", Types.LongType.get()),\n                required(16, \"y\", Types.LongType.get())\n            ))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17,\n            Types.DoubleType.get()\n        )),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19,\n            Types.StringType.get(),\n            Types.StringType.get()\n        )),\n        required(20, \"complex_key_map\", Types.MapType.ofOptional(21, 22,\n            Types.StructType.of(\n                required(23, \"x\", Types.LongType.get()),\n                optional(24, \"y\", Types.LongType.get())),\n            Types.StringType.get()))\n    );\n\n    Assert.assertEquals(\"Schema serialization should be equal to starting schema\",\n        schema.asStruct(), TestHelpers.roundTripSerialize(schema).asStruct());\n  }\n","date":"2020-03-31 00:29:35","endLine":154,"groupId":"101207","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/8c/d6a95b152049bf848340556add6251f84c19cd.src","preCode":"  public void testSchema() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(3, \"preferences\", Types.StructType.of(\n            required(8, \"feature1\", Types.BooleanType.get()),\n            optional(9, \"feature2\", Types.BooleanType.get())\n        )),\n        required(4, \"locations\", Types.MapType.ofRequired(10, 11,\n            Types.StringType.get(),\n            Types.StructType.of(\n                required(12, \"lat\", Types.FloatType.get()),\n                required(13, \"long\", Types.FloatType.get())\n            ))),\n        optional(5, \"points\", Types.ListType.ofOptional(14,\n            Types.StructType.of(\n                required(15, \"x\", Types.LongType.get()),\n                required(16, \"y\", Types.LongType.get())\n            ))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17,\n            Types.DoubleType.get()\n        )),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19,\n            Types.StringType.get(),\n            Types.StringType.get()\n        )),\n        required(20, \"complex_key_map\", Types.MapType.ofOptional(21, 22,\n            Types.StructType.of(\n                required(23, \"x\", Types.LongType.get()),\n                optional(24, \"y\", Types.LongType.get())),\n            Types.StringType.get()))\n    );\n\n    Assert.assertEquals(\"Schema serialziation should be equal to starting schema\",\n        schema.asStruct(), TestHelpers.roundTripSerialize(schema).asStruct());\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/types/TestSerializableTypes.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":3,"curCode":"  public void testComplexSchema() {\n    org.apache.iceberg.Schema schema = new org.apache.iceberg.Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(\n            3,\n            \"preferences\",\n            Types.StructType\n                .of(required(8, \"feature1\", Types.BooleanType.get()), optional(9, \"feature2\", Types.BooleanType.get()))),\n        required(\n            4,\n            \"locations\",\n            Types.MapType.ofRequired(\n                10,\n                11,\n                Types.StructType.of(\n                    required(20, \"address\", Types.StringType.get()),\n                    required(21, \"city\", Types.StringType.get()),\n                    required(22, \"state\", Types.StringType.get()),\n                    required(23, \"zip\", Types.IntegerType.get())\n                ),\n                Types.StructType.of(required(12, \"lat\", Types.FloatType.get()), required(13, \"long\", Types.FloatType.get()))\n            )\n        ),\n        optional(\n            5,\n            \"points\",\n            Types.ListType.ofOptional(\n                14,\n                Types.StructType.of(required(15, \"x\", Types.LongType.get()), required(16, \"y\", Types.LongType.get())))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17, Types.DoubleType.get())),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19, Types.StringType.get(), Types.StringType.get())));\n\n    AvroSchemaUtil.convert(schema, \"newTableName\").toString(true);\n  }\n","date":"2019-03-21 07:25:05","endLine":263,"groupId":"101207","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/44/62e0152ea896990298209d213ce7bdf51637fb.src","preCode":"  public void testComplexSchema() {\n    org.apache.iceberg.Schema schema = new org.apache.iceberg.Schema(\n        required(1, \"id\", Types.IntegerType.get()),\n        optional(2, \"data\", Types.StringType.get()),\n        optional(\n            3,\n            \"preferences\",\n            Types.StructType\n                .of(required(8, \"feature1\", Types.BooleanType.get()), optional(9, \"feature2\", Types.BooleanType.get()))),\n        required(\n            4,\n            \"locations\",\n            Types.MapType.ofRequired(\n                10,\n                11,\n                Types.StructType.of(\n                    required(20, \"address\", Types.StringType.get()),\n                    required(21, \"city\", Types.StringType.get()),\n                    required(22, \"state\", Types.StringType.get()),\n                    required(23, \"zip\", Types.IntegerType.get())\n                ),\n                Types.StructType.of(required(12, \"lat\", Types.FloatType.get()), required(13, \"long\", Types.FloatType.get()))\n            )\n        ),\n        optional(\n            5,\n            \"points\",\n            Types.ListType.ofOptional(\n                14,\n                Types.StructType.of(required(15, \"x\", Types.LongType.get()), required(16, \"y\", Types.LongType.get())))),\n        required(6, \"doubles\", Types.ListType.ofRequired(17, Types.DoubleType.get())),\n        optional(7, \"properties\", Types.MapType.ofOptional(18, 19, Types.StringType.get(), Types.StringType.get())));\n\n    AvroSchemaUtil.convert(schema, \"newTableName\").toString(true);\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/TestSchemaConversions.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"}],"commitId":"8ade6e38a4baebf305f82961ddbee8fa66f5b31f","commitMessage":"@@@Fix typos in internal APIs (#880)\n\n","date":"2020-03-31 00:29:35","modifiedFileCount":"11","status":"M","submitter":"jun-he"}]
