[{"authorTime":"2021-02-23 08:16:04","codes":[{"authorDate":"2021-05-20 10:14:59","commitOrder":2,"curCode":"  public String json() {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n      generator.writeStartObject();\n      generator.writeNumberField(VERSION, CURR_VERSION);\n      generator.writeNumberField(SNAPSHOT_ID, snapshotId);\n      generator.writeNumberField(POSITION, position);\n      generator.writeBooleanField(SCAN_ALL_FILES, scanAllFiles);\n      generator.writeEndObject();\n      generator.flush();\n\n    } catch (IOException e) {\n      throw new UncheckedIOException(\"Failed to write StreamingOffset to json\", e);\n    }\n\n    return writer.toString();\n  }\n","date":"2021-05-20 10:14:59","endLine":99,"groupId":"1018","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"json","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f4/3578ada310fc1a95bbb416cb0a7784119d1994.src","preCode":"  public String json() {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n      generator.writeStartObject();\n      generator.writeNumberField(VERSION, CURR_VERSION);\n      generator.writeNumberField(SNAPSHOT_ID, snapshotId);\n      generator.writeNumberField(POSITION, position);\n      generator.writeBooleanField(SCAN_ALL_FILES, scanAllFiles);\n      generator.writeEndObject();\n      generator.flush();\n\n    } catch (IOException e) {\n      throw new UncheckedIOException(\"Failed to write StreamingOffset to json\", e);\n    }\n\n    return writer.toString();\n  }\n","realPath":"spark3/src/main/java/org/apache/iceberg/spark/source/StreamingOffset.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"},{"authorDate":"2021-02-23 08:16:04","commitOrder":2,"curCode":"  private static String toJsonWithoutSpecAndSchemaList(TableMetadata metadata) {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n\n      generator.writeStartObject(); \r\n\n      generator.writeNumberField(FORMAT_VERSION, 1);\n      generator.writeStringField(LOCATION, metadata.location());\n      generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n      generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n      \r\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n\n      \r\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n\n      generator.writeObjectFieldStart(PROPERTIES);\n      for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n        generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n      }\n      generator.writeEndObject();\n\n      generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n          metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n      generator.writeArrayFieldStart(SNAPSHOTS);\n      for (Snapshot snapshot : metadata.snapshots()) {\n        SnapshotParser.toJson(snapshot, generator);\n      }\n      generator.writeEndArray();\n      \r\n\n      generator.writeEndObject(); \r\n\n      generator.flush();\n    } catch (IOException e) {\n      throw new UncheckedIOException(String.format(\"Failed to write json for: %s\", metadata), e);\n    }\n    return writer.toString();\n  }\n","date":"2021-02-23 08:16:04","endLine":271,"groupId":"3875","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toJsonWithoutSpecAndSchemaList","params":"(TableMetadatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/42/c46076b134ca1e739d7d5f5ee0248ff23851c4.src","preCode":"  private static String toJsonWithoutSpecAndSchemaList(TableMetadata metadata) {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n\n      generator.writeStartObject(); \r\n\n      generator.writeNumberField(FORMAT_VERSION, 1);\n      generator.writeStringField(LOCATION, metadata.location());\n      generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n      generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n      \r\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n\n      \r\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n\n      generator.writeObjectFieldStart(PROPERTIES);\n      for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n        generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n      }\n      generator.writeEndObject();\n\n      generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n          metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n      generator.writeArrayFieldStart(SNAPSHOTS);\n      for (Snapshot snapshot : metadata.snapshots()) {\n        SnapshotParser.toJson(snapshot, generator);\n      }\n      generator.writeEndArray();\n      \r\n\n      generator.writeEndObject(); \r\n\n      generator.flush();\n    } catch (IOException e) {\n      throw new UncheckedIOException(String.format(\"Failed to write json for: %s\", metadata), e);\n    }\n    return writer.toString();\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"NB"}],"commitId":"848797d7a1068b4b613c3bd4bd4991a20b2991ad","commitMessage":"@@@Spark: Create Spark2 and Spark3 StreamingOffset classes (#2615)\n\n* Make a Copy of StreamingOffset implementation from Spark2 into Spark3 to avoid naming conflicts\n* Move Spark2 implementation of StreamingOffset from iceberg-spark to iceberg-Spark2","date":"2021-05-20 10:14:59","modifiedFileCount":"0","status":"M","submitter":"Sreeram Garlapati"},{"authorTime":"2021-06-29 08:24:47","codes":[{"authorDate":"2021-05-20 10:14:59","commitOrder":3,"curCode":"  public String json() {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n      generator.writeStartObject();\n      generator.writeNumberField(VERSION, CURR_VERSION);\n      generator.writeNumberField(SNAPSHOT_ID, snapshotId);\n      generator.writeNumberField(POSITION, position);\n      generator.writeBooleanField(SCAN_ALL_FILES, scanAllFiles);\n      generator.writeEndObject();\n      generator.flush();\n\n    } catch (IOException e) {\n      throw new UncheckedIOException(\"Failed to write StreamingOffset to json\", e);\n    }\n\n    return writer.toString();\n  }\n","date":"2021-05-20 10:14:59","endLine":99,"groupId":"10861","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"json","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f4/3578ada310fc1a95bbb416cb0a7784119d1994.src","preCode":"  public String json() {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n      generator.writeStartObject();\n      generator.writeNumberField(VERSION, CURR_VERSION);\n      generator.writeNumberField(SNAPSHOT_ID, snapshotId);\n      generator.writeNumberField(POSITION, position);\n      generator.writeBooleanField(SCAN_ALL_FILES, scanAllFiles);\n      generator.writeEndObject();\n      generator.flush();\n\n    } catch (IOException e) {\n      throw new UncheckedIOException(\"Failed to write StreamingOffset to json\", e);\n    }\n\n    return writer.toString();\n  }\n","realPath":"spark3/src/main/java/org/apache/iceberg/spark/source/StreamingOffset.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"},{"authorDate":"2021-06-29 08:24:47","commitOrder":3,"curCode":"  private static String toJsonWithoutSpecAndSchemaList(TableMetadata metadata) {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n\n      generator.writeStartObject(); \r\n\n      generator.writeNumberField(FORMAT_VERSION, 1);\n      generator.writeStringField(LOCATION, metadata.location());\n      generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n      generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n      \r\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema().asStruct(), generator);\n\n      \r\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n\n      generator.writeObjectFieldStart(PROPERTIES);\n      for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n        generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n      }\n      generator.writeEndObject();\n\n      generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n          metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n      generator.writeArrayFieldStart(SNAPSHOTS);\n      for (Snapshot snapshot : metadata.snapshots()) {\n        SnapshotParser.toJson(snapshot, generator);\n      }\n      generator.writeEndArray();\n      \r\n\n      generator.writeEndObject(); \r\n\n      generator.flush();\n    } catch (IOException e) {\n      throw new UncheckedIOException(String.format(\"Failed to write json for: %s\", metadata), e);\n    }\n    return writer.toString();\n  }\n","date":"2021-06-29 08:24:47","endLine":284,"groupId":"10861","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toJsonWithoutSpecAndSchemaList","params":"(TableMetadatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d3/cebec1f3287b4f19ba6b60d947d8babf685be1.src","preCode":"  private static String toJsonWithoutSpecAndSchemaList(TableMetadata metadata) {\n    StringWriter writer = new StringWriter();\n    try {\n      JsonGenerator generator = JsonUtil.factory().createGenerator(writer);\n\n      generator.writeStartObject(); \r\n\n      generator.writeNumberField(FORMAT_VERSION, 1);\n      generator.writeStringField(LOCATION, metadata.location());\n      generator.writeNumberField(LAST_UPDATED_MILLIS, metadata.lastUpdatedMillis());\n      generator.writeNumberField(LAST_COLUMN_ID, metadata.lastColumnId());\n\n      \r\n      generator.writeFieldName(SCHEMA);\n      SchemaParser.toJson(metadata.schema(), generator);\n\n      \r\n      generator.writeFieldName(PARTITION_SPEC);\n      PartitionSpecParser.toJsonFields(metadata.spec(), generator);\n\n      generator.writeObjectFieldStart(PROPERTIES);\n      for (Map.Entry<String, String> keyValue : metadata.properties().entrySet()) {\n        generator.writeStringField(keyValue.getKey(), keyValue.getValue());\n      }\n      generator.writeEndObject();\n\n      generator.writeNumberField(CURRENT_SNAPSHOT_ID,\n          metadata.currentSnapshot() != null ? metadata.currentSnapshot().snapshotId() : -1);\n\n      generator.writeArrayFieldStart(SNAPSHOTS);\n      for (Snapshot snapshot : metadata.snapshots()) {\n        SnapshotParser.toJson(snapshot, generator);\n      }\n      generator.writeEndArray();\n      \r\n\n      generator.writeEndObject(); \r\n\n      generator.flush();\n    } catch (IOException e) {\n      throw new UncheckedIOException(String.format(\"Failed to write json for: %s\", metadata), e);\n    }\n    return writer.toString();\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestTableMetadata.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"d4d376bb559e8dc83da3cb7ecbb8ff9205d68f21","commitMessage":"@@@Core: Add schema-id to snapshots (#2275)\n\n","date":"2021-06-29 08:24:47","modifiedFileCount":"13","status":"M","submitter":"yyanyy"}]
