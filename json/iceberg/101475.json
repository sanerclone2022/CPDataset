[{"authorTime":"2020-09-04 13:48:01","codes":[{"authorDate":"2019-10-11 01:42:57","commitOrder":4,"curCode":"  static void checkCompatibility(PartitionSpec spec, Schema schema) {\n    for (PartitionField field : spec.fields) {\n      Type sourceType = schema.findType(field.sourceId());\n      ValidationException.check(sourceType != null,\n          \"Cannot find source column for partition field: %s\", field);\n      ValidationException.check(sourceType.isPrimitiveType(),\n          \"Cannot partition by non-primitive source field: %s\", sourceType);\n      ValidationException.check(\n          field.transform().canTransform(sourceType),\n          \"Invalid source type %s for transform: %s\",\n          sourceType, field.transform());\n    }\n  }\n","date":"2019-10-11 01:42:57","endLine":494,"groupId":"2390","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkCompatibility","params":"(PartitionSpecspec@Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b9/36ad50d53465eac9a5f5c423332fdd4e6c9a63.src","preCode":"  static void checkCompatibility(PartitionSpec spec, Schema schema) {\n    for (PartitionField field : spec.fields) {\n      Type sourceType = schema.findType(field.sourceId());\n      ValidationException.check(sourceType != null,\n          \"Cannot find source column for partition field: %s\", field);\n      ValidationException.check(sourceType.isPrimitiveType(),\n          \"Cannot partition by non-primitive source field: %s\", sourceType);\n      ValidationException.check(\n          field.transform().canTransform(sourceType),\n          \"Invalid source type %s for transform: %s\",\n          sourceType, field.transform());\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/PartitionSpec.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"NB"},{"authorDate":"2020-09-04 13:48:01","commitOrder":4,"curCode":"  static void checkCompatibility(SortOrder sortOrder, Schema schema) {\n    for (SortField field : sortOrder.fields) {\n      Type sourceType = schema.findType(field.sourceId());\n      ValidationException.check(\n          sourceType != null,\n          \"Cannot find source column for sort field: %s\", field);\n      ValidationException.check(\n          sourceType.isPrimitiveType(),\n          \"Cannot sort by non-primitive source field: %s\", sourceType);\n      ValidationException.check(\n          field.transform().canTransform(sourceType),\n          \"Invalid source type %s for transform: %s\",\n          sourceType, field.transform());\n    }\n  }\n","date":"2020-09-04 13:48:01","endLine":297,"groupId":"2390","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkCompatibility","params":"(SortOrdersortOrder@Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/be/7553e861b4c9558fe458191cdf1ea5a6439532.src","preCode":"  static void checkCompatibility(SortOrder sortOrder, Schema schema) {\n    for (SortField field : sortOrder.fields) {\n      Type sourceType = schema.findType(field.sourceId());\n      ValidationException.check(\n          sourceType != null,\n          \"Cannot find source column for sort field: %s\", field);\n      ValidationException.check(\n          sourceType.isPrimitiveType(),\n          \"Cannot sort by non-primitive source field: %s\", sourceType);\n      ValidationException.check(\n          field.transform().canTransform(sourceType),\n          \"Invalid source type %s for transform: %s\",\n          sourceType, field.transform());\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/SortOrder.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"B"}],"commitId":"454101c3573acb9cd94d6d9a306ed99a5a324ed9","commitMessage":"@@@API: Implement SortOrder (#1373)\n\nThis commit extends Iceberg metadata with a sort order that defines how data and delete files should be ordered.","date":"2020-09-04 13:48:01","modifiedFileCount":"17","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2021-07-21 21:47:00","codes":[{"authorDate":"2019-10-11 01:42:57","commitOrder":5,"curCode":"  static void checkCompatibility(PartitionSpec spec, Schema schema) {\n    for (PartitionField field : spec.fields) {\n      Type sourceType = schema.findType(field.sourceId());\n      ValidationException.check(sourceType != null,\n          \"Cannot find source column for partition field: %s\", field);\n      ValidationException.check(sourceType.isPrimitiveType(),\n          \"Cannot partition by non-primitive source field: %s\", sourceType);\n      ValidationException.check(\n          field.transform().canTransform(sourceType),\n          \"Invalid source type %s for transform: %s\",\n          sourceType, field.transform());\n    }\n  }\n","date":"2019-10-11 01:42:57","endLine":494,"groupId":"101475","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkCompatibility","params":"(PartitionSpecspec@Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b9/36ad50d53465eac9a5f5c423332fdd4e6c9a63.src","preCode":"  static void checkCompatibility(PartitionSpec spec, Schema schema) {\n    for (PartitionField field : spec.fields) {\n      Type sourceType = schema.findType(field.sourceId());\n      ValidationException.check(sourceType != null,\n          \"Cannot find source column for partition field: %s\", field);\n      ValidationException.check(sourceType.isPrimitiveType(),\n          \"Cannot partition by non-primitive source field: %s\", sourceType);\n      ValidationException.check(\n          field.transform().canTransform(sourceType),\n          \"Invalid source type %s for transform: %s\",\n          sourceType, field.transform());\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/PartitionSpec.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"N"},{"authorDate":"2021-07-21 21:47:00","commitOrder":5,"curCode":"  public static void checkCompatibility(SortOrder sortOrder, Schema schema) {\n    for (SortField field : sortOrder.fields) {\n      Type sourceType = schema.findType(field.sourceId());\n      ValidationException.check(\n          sourceType != null,\n          \"Cannot find source column for sort field: %s\", field);\n      ValidationException.check(\n          sourceType.isPrimitiveType(),\n          \"Cannot sort by non-primitive source field: %s\", sourceType);\n      ValidationException.check(\n          field.transform().canTransform(sourceType),\n          \"Invalid source type %s for transform: %s\",\n          sourceType, field.transform());\n    }\n  }\n","date":"2021-07-21 21:47:00","endLine":303,"groupId":"101475","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"checkCompatibility","params":"(SortOrdersortOrder@Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/27/74aaf85698636d0d1a0eed2c4081e8f22d0538.src","preCode":"  static void checkCompatibility(SortOrder sortOrder, Schema schema) {\n    for (SortField field : sortOrder.fields) {\n      Type sourceType = schema.findType(field.sourceId());\n      ValidationException.check(\n          sourceType != null,\n          \"Cannot find source column for sort field: %s\", field);\n      ValidationException.check(\n          sourceType.isPrimitiveType(),\n          \"Cannot sort by non-primitive source field: %s\", sourceType);\n      ValidationException.check(\n          field.transform().canTransform(sourceType),\n          \"Invalid source type %s for transform: %s\",\n          sourceType, field.transform());\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/SortOrder.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"2a39712c371a9b97f4de88d533acea36d7fe2852","commitMessage":"@@@Core: Adds SortRewriteStrategy (#2609)\n\nA rewrite strategy for data files which aims to reorder data with data files to optimally lay them out\nin relation to a column. For example.  if the Sort strategy is used on a set of files which is ordered\nby column x and original has files File A (x: 0 - 50).  File B ( x: 10 - 40) and File C ( x: 30 - 60). \nthis Strategy will attempt to rewrite those files into File A' (x: 0-20).  File B' (x: 21 - 40). \nFile C' (x: 41 - 60).","date":"2021-07-21 21:47:00","modifiedFileCount":"2","status":"M","submitter":"Russell Spitzer"}]
