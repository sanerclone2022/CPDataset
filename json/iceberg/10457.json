[{"authorTime":"2020-08-20 08:36:46","codes":[{"authorDate":"2019-06-24 23:57:49","commitOrder":3,"curCode":"    public ParquetValueReader<?> map(Types.MapType expectedMap, GroupType map,\n                                     ParquetValueReader<?> keyReader,\n                                     ParquetValueReader<?> valueReader) {\n      GroupType repeatedKeyValue = map.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type keyType = repeatedKeyValue.getType(0);\n      int keyD = type.getMaxDefinitionLevel(path(keyType.getName())) - 1;\n      Type valueType = repeatedKeyValue.getType(1);\n      int valueD = type.getMaxDefinitionLevel(path(valueType.getName())) - 1;\n\n      return new MapReader<>(repeatedD, repeatedR,\n          ParquetValueReaders.option(keyType, keyD, keyReader),\n          ParquetValueReaders.option(valueType, valueD, valueReader));\n    }\n","date":"2019-06-24 23:57:49","endLine":195,"groupId":"350","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"map","params":"(Types.MapTypeexpectedMap@GroupTypemap@ParquetValueReader<?>keyReader@ParquetValueReader<?>valueReader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9a/36266ffdf222c4dac237d44b43c458ba5bfe9b.src","preCode":"    public ParquetValueReader<?> map(Types.MapType expectedMap, GroupType map,\n                                     ParquetValueReader<?> keyReader,\n                                     ParquetValueReader<?> valueReader) {\n      GroupType repeatedKeyValue = map.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type keyType = repeatedKeyValue.getType(0);\n      int keyD = type.getMaxDefinitionLevel(path(keyType.getName())) - 1;\n      Type valueType = repeatedKeyValue.getType(1);\n      int valueD = type.getMaxDefinitionLevel(path(valueType.getName())) - 1;\n\n      return new MapReader<>(repeatedD, repeatedR,\n          ParquetValueReaders.option(keyType, keyD, keyReader),\n          ParquetValueReaders.option(valueType, valueD, valueReader));\n    }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/data/SparkParquetReaders.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"NB"},{"authorDate":"2020-08-20 08:36:46","commitOrder":3,"curCode":"    public ParquetValueReader<?> map(Types.MapType expectedMap, GroupType map,\n                                     ParquetValueReader<?> keyReader,\n                                     ParquetValueReader<?> valueReader) {\n      GroupType repeatedKeyValue = map.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type keyType = repeatedKeyValue.getType(0);\n      int keyD = type.getMaxDefinitionLevel(path(keyType.getName())) - 1;\n      Type valueType = repeatedKeyValue.getType(1);\n      int valueD = type.getMaxDefinitionLevel(path(valueType.getName())) - 1;\n\n      return new MapReader<>(repeatedD, repeatedR,\n          ParquetValueReaders.option(keyType, keyD, keyReader),\n          ParquetValueReaders.option(valueType, valueD, valueReader));\n    }\n","date":"2020-08-20 08:36:46","endLine":163,"groupId":"350","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"map","params":"(Types.MapTypeexpectedMap@GroupTypemap@ParquetValueReader<?>keyReader@ParquetValueReader<?>valueReader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/30/12544cba8367880b92039dd5d6a9552d50f001.src","preCode":"    public ParquetValueReader<?> map(Types.MapType expectedMap, GroupType map,\n                                     ParquetValueReader<?> keyReader,\n                                     ParquetValueReader<?> valueReader) {\n      GroupType repeatedKeyValue = map.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type keyType = repeatedKeyValue.getType(0);\n      int keyD = type.getMaxDefinitionLevel(path(keyType.getName())) - 1;\n      Type valueType = repeatedKeyValue.getType(1);\n      int valueD = type.getMaxDefinitionLevel(path(valueType.getName())) - 1;\n\n      return new MapReader<>(repeatedD, repeatedR,\n          ParquetValueReaders.option(keyType, keyD, keyReader),\n          ParquetValueReaders.option(valueType, valueD, valueReader));\n    }\n","realPath":"flink/src/main/java/org/apache/iceberg/flink/data/FlinkParquetReaders.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"6cb2db7acb06891502ac4af1845b239ed7cb521d","commitMessage":"@@@Flink: Read Parquet as RowData using a schema visitor (#1266)\n\n","date":"2020-08-20 08:36:46","modifiedFileCount":"5","status":"M","submitter":"Chen Junjie"},{"authorTime":"2020-12-08 10:16:47","codes":[{"authorDate":"2019-06-24 23:57:49","commitOrder":4,"curCode":"    public ParquetValueReader<?> map(Types.MapType expectedMap, GroupType map,\n                                     ParquetValueReader<?> keyReader,\n                                     ParquetValueReader<?> valueReader) {\n      GroupType repeatedKeyValue = map.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type keyType = repeatedKeyValue.getType(0);\n      int keyD = type.getMaxDefinitionLevel(path(keyType.getName())) - 1;\n      Type valueType = repeatedKeyValue.getType(1);\n      int valueD = type.getMaxDefinitionLevel(path(valueType.getName())) - 1;\n\n      return new MapReader<>(repeatedD, repeatedR,\n          ParquetValueReaders.option(keyType, keyD, keyReader),\n          ParquetValueReaders.option(valueType, valueD, valueReader));\n    }\n","date":"2019-06-24 23:57:49","endLine":195,"groupId":"10457","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"map","params":"(Types.MapTypeexpectedMap@GroupTypemap@ParquetValueReader<?>keyReader@ParquetValueReader<?>valueReader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9a/36266ffdf222c4dac237d44b43c458ba5bfe9b.src","preCode":"    public ParquetValueReader<?> map(Types.MapType expectedMap, GroupType map,\n                                     ParquetValueReader<?> keyReader,\n                                     ParquetValueReader<?> valueReader) {\n      GroupType repeatedKeyValue = map.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type keyType = repeatedKeyValue.getType(0);\n      int keyD = type.getMaxDefinitionLevel(path(keyType.getName())) - 1;\n      Type valueType = repeatedKeyValue.getType(1);\n      int valueD = type.getMaxDefinitionLevel(path(valueType.getName())) - 1;\n\n      return new MapReader<>(repeatedD, repeatedR,\n          ParquetValueReaders.option(keyType, keyD, keyReader),\n          ParquetValueReaders.option(valueType, valueD, valueReader));\n    }\n","realPath":"spark/src/main/java/org/apache/iceberg/spark/data/SparkParquetReaders.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2020-12-08 10:16:47","commitOrder":4,"curCode":"    public ParquetValueReader<?> map(Types.MapType expectedMap, GroupType map,\n                                     ParquetValueReader<?> keyReader,\n                                     ParquetValueReader<?> valueReader) {\n      if (expectedMap == null) {\n        return null;\n      }\n\n      GroupType repeatedKeyValue = map.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type keyType = repeatedKeyValue.getType(0);\n      int keyD = type.getMaxDefinitionLevel(path(keyType.getName())) - 1;\n      Type valueType = repeatedKeyValue.getType(1);\n      int valueD = type.getMaxDefinitionLevel(path(valueType.getName())) - 1;\n\n      return new MapReader<>(repeatedD, repeatedR,\n          ParquetValueReaders.option(keyType, keyD, keyReader),\n          ParquetValueReaders.option(valueType, valueD, valueReader));\n    }\n","date":"2020-12-08 10:16:47","endLine":177,"groupId":"10457","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"map","params":"(Types.MapTypeexpectedMap@GroupTypemap@ParquetValueReader<?>keyReader@ParquetValueReader<?>valueReader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/6f/95d652ceab5aa73312fb1adc5c22471d9a946d.src","preCode":"    public ParquetValueReader<?> map(Types.MapType expectedMap, GroupType map,\n                                     ParquetValueReader<?> keyReader,\n                                     ParquetValueReader<?> valueReader) {\n      GroupType repeatedKeyValue = map.getFields().get(0).asGroupType();\n      String[] repeatedPath = currentPath();\n\n      int repeatedD = type.getMaxDefinitionLevel(repeatedPath) - 1;\n      int repeatedR = type.getMaxRepetitionLevel(repeatedPath) - 1;\n\n      Type keyType = repeatedKeyValue.getType(0);\n      int keyD = type.getMaxDefinitionLevel(path(keyType.getName())) - 1;\n      Type valueType = repeatedKeyValue.getType(1);\n      int valueD = type.getMaxDefinitionLevel(path(valueType.getName())) - 1;\n\n      return new MapReader<>(repeatedD, repeatedR,\n          ParquetValueReaders.option(keyType, keyD, keyReader),\n          ParquetValueReaders.option(valueType, valueD, valueReader));\n    }\n","realPath":"flink/src/main/java/org/apache/iceberg/flink/data/FlinkParquetReaders.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"c3dd3e19a766b2111fb8378eb7834587dd65eb1d","commitMessage":"@@@Flink: fix projection NPE caused by timestamp type (#1882)\n\n","date":"2020-12-08 10:16:47","modifiedFileCount":"2","status":"M","submitter":"Chen Junjie"}]
