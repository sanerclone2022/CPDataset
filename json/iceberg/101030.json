[{"authorTime":"2020-12-05 03:28:59","codes":[{"authorDate":"2020-12-05 03:28:59","commitOrder":1,"curCode":"  public void testDeleteWithNotInSubquery() throws NoSuchTableException {\n    createAndInitUnpartitionedTable();\n\n    append(new Employee(1, \"hr\"), new Employee(2, \"hardware\"), new Employee(null, \"hr\"));\n\n    createOrReplaceView(\"deleted_id\", Arrays.asList(-1, -2, null), Encoders.INT());\n    createOrReplaceView(\"deleted_dep\", Arrays.asList(\"software\", \"hr\"), Encoders.STRING());\n\n    \r\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id WHERE value IS NOT NULL)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'hr'), (2, 'hardware'), (null, 'hr')\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id) OR dep IN ('software', 'hr')\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n  }\n","date":"2020-12-05 03:28:59","endLine":457,"groupId":"5112","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWithNotInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1a/affa115e58fe10a4bc45b0fac4978b82072697.src","preCode":"  public void testDeleteWithNotInSubquery() throws NoSuchTableException {\n    createAndInitUnpartitionedTable();\n\n    append(new Employee(1, \"hr\"), new Employee(2, \"hardware\"), new Employee(null, \"hr\"));\n\n    createOrReplaceView(\"deleted_id\", Arrays.asList(-1, -2, null), Encoders.INT());\n    createOrReplaceView(\"deleted_dep\", Arrays.asList(\"software\", \"hr\"), Encoders.STRING());\n\n    \r\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id WHERE value IS NOT NULL)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'hr'), (2, 'hardware'), (null, 'hr')\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id) OR dep IN ('software', 'hr')\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"B"},{"authorDate":"2020-12-05 03:28:59","commitOrder":1,"curCode":"  public void testDeleteWithExistSubquery() throws NoSuchTableException {\n    createAndInitUnpartitionedTable();\n\n    append(new Employee(1, \"hr\"), new Employee(2, \"hardware\"), new Employee(null, \"hr\"));\n\n    createOrReplaceView(\"deleted_id\", Arrays.asList(-1, -2, null), Encoders.INT());\n    createOrReplaceView(\"deleted_dep\", Arrays.asList(\"software\", \"hr\"), Encoders.STRING());\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value + 2)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value) OR t.id IS NULL\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","date":"2020-12-05 03:28:59","endLine":495,"groupId":"5112","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWithExistSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1a/affa115e58fe10a4bc45b0fac4978b82072697.src","preCode":"  public void testDeleteWithExistSubquery() throws NoSuchTableException {\n    createAndInitUnpartitionedTable();\n\n    append(new Employee(1, \"hr\"), new Employee(2, \"hardware\"), new Employee(null, \"hr\"));\n\n    createOrReplaceView(\"deleted_id\", Arrays.asList(-1, -2, null), Encoders.INT());\n    createOrReplaceView(\"deleted_dep\", Arrays.asList(\"software\", \"hr\"), Encoders.STRING());\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value + 2)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value) OR t.id IS NULL\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"B"}],"commitId":"af5f60068c75195c0bb41ca85065e05282fe2fe8","commitMessage":"@@@Spark: Implement copy-on-write DELETE (#1862)\n\n","date":"2020-12-05 03:28:59","modifiedFileCount":"6","status":"B","submitter":"Anton Okolnychyi"},{"authorTime":"2021-02-04 06:42:49","codes":[{"authorDate":"2021-02-04 06:42:49","commitOrder":2,"curCode":"  public void testDeleteWithNotInSubquery() throws NoSuchTableException {\n    createAndInitUnpartitionedTable();\n\n    append(new Employee(1, \"hr\"), new Employee(2, \"hardware\"), new Employee(null, \"hr\"));\n\n    createOrReplaceView(\"deleted_id\", Arrays.asList(-1, -2, null), Encoders.INT());\n    createOrReplaceView(\"deleted_dep\", Arrays.asList(\"software\", \"hr\"), Encoders.STRING());\n\n    \r\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id WHERE value IS NOT NULL)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'hr'), (2, 'hardware'), (null, 'hr')\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id) OR dep IN ('software', 'hr')\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE \" +\n        \"id NOT IN (SELECT * FROM deleted_id WHERE value IS NOT NULL) AND \" +\n        \"EXISTS (SELECT 1 FROM FROM deleted_dep WHERE t.dep = deleted_dep.value)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE \" +\n        \"id NOT IN (SELECT * FROM deleted_id WHERE value IS NOT NULL) OR \" +\n        \"EXISTS (SELECT 1 FROM FROM deleted_dep WHERE t.dep = deleted_dep.value)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n  }\n","date":"2021-02-04 06:42:49","endLine":467,"groupId":"101030","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWithNotInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c3/c6eafaa7a7854c2ff63cb6b25e7db19ec9582f.src","preCode":"  public void testDeleteWithNotInSubquery() throws NoSuchTableException {\n    createAndInitUnpartitionedTable();\n\n    append(new Employee(1, \"hr\"), new Employee(2, \"hardware\"), new Employee(null, \"hr\"));\n\n    createOrReplaceView(\"deleted_id\", Arrays.asList(-1, -2, null), Encoders.INT());\n    createOrReplaceView(\"deleted_dep\", Arrays.asList(\"software\", \"hr\"), Encoders.STRING());\n\n    \r\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id WHERE value IS NOT NULL)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"INSERT INTO TABLE %s VALUES (1, 'hr'), (2, 'hardware'), (null, 'hr')\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s WHERE id NOT IN (SELECT * FROM deleted_id) OR dep IN ('software', 'hr')\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"M"},{"authorDate":"2021-02-04 06:42:49","commitOrder":2,"curCode":"  public void testDeleteWithExistSubquery() throws NoSuchTableException {\n    createAndInitUnpartitionedTable();\n\n    append(new Employee(1, \"hr\"), new Employee(2, \"hardware\"), new Employee(null, \"hr\"));\n\n    createOrReplaceView(\"deleted_id\", Arrays.asList(-1, -2, null), Encoders.INT());\n    createOrReplaceView(\"deleted_dep\", Arrays.asList(\"software\", \"hr\"), Encoders.STRING());\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value + 2)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value) OR t.id IS NULL\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE \" +\n        \"EXISTS (SELECT 1 FROM deleted_id di WHERE t.id = di.value) AND \" +\n        \"EXISTS (SELECT 1 FROM deleted_dep dd WHERE t.dep = dd.value)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","date":"2021-02-04 06:42:49","endLine":521,"groupId":"101030","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWithExistSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c3/c6eafaa7a7854c2ff63cb6b25e7db19ec9582f.src","preCode":"  public void testDeleteWithExistSubquery() throws NoSuchTableException {\n    createAndInitUnpartitionedTable();\n\n    append(new Employee(1, \"hr\"), new Employee(2, \"hardware\"), new Employee(null, \"hr\"));\n\n    createOrReplaceView(\"deleted_id\", Arrays.asList(-1, -2, null), Encoders.INT());\n    createOrReplaceView(\"deleted_dep\", Arrays.asList(\"software\", \"hr\"), Encoders.STRING());\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(1, \"hr\"), row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value + 2)\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\"), row(null, \"hr\")),\n        sql(\"SELECT * FROM %s ORDER BY id ASC NULLS LAST\", tableName));\n\n    sql(\"DELETE FROM %s t WHERE EXISTS (SELECT 1 FROM deleted_id d WHERE t.id = d.value) OR t.id IS NULL\", tableName);\n    assertEquals(\"Should have expected rows\",\n        ImmutableList.of(row(2, \"hardware\")),\n        sql(\"SELECT * FROM %s\", tableName));\n  }\n","realPath":"spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"M"}],"commitId":"4212714b495d4d0f602bc2be1545c3198824441d","commitMessage":"@@@Spark: Add more tests with multiple subqueries in DELETE (#2205)\n\n","date":"2021-02-04 06:42:49","modifiedFileCount":"1","status":"M","submitter":"Anton Okolnychyi"}]
