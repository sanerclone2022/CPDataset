[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testIntegerLtEq() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 5)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range below lower bound (5 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 29)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range below lower bound (29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 30)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: many possible ids\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":211,"groupId":"2742","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntegerLtEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/60/14ce6ff9ac57ade8b67ec8c9fbf733dab9e8c7.src","preCode":"  public void testIntegerLtEq() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 5)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range below lower bound (5 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 29)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range below lower bound (29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 30)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: many possible ids\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 85)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 80)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 75)).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":241,"groupId":"2742","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerGtEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/60/14ce6ff9ac57ade8b67ec8c9fbf733dab9e8c7.src","preCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 85)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 80)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 75)).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-12-28 05:07:53","codes":[{"authorDate":"2019-12-28 05:07:53","commitOrder":2,"curCode":"  public void testIntegerLtEq() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", INT_MIN_VALUE - 25)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range below lower bound (5 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", INT_MIN_VALUE - 1)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range below lower bound (29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", INT_MIN_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", INT_MAX_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: many possible ids\", shouldRead);\n  }\n","date":"2019-12-28 05:07:53","endLine":271,"groupId":"101285","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntegerLtEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1f/90cf1c130864f149b47d34706fd3b45bbe7ad4.src","preCode":"  public void testIntegerLtEq() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 5)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range below lower bound (5 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 29)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range below lower bound (29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 30)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, lessThanOrEqual(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: many possible ids\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2019-12-28 05:07:53","commitOrder":2,"curCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", INT_MAX_VALUE + 6)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", INT_MAX_VALUE + 1)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", INT_MAX_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", INT_MAX_VALUE - 4)).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","date":"2019-12-28 05:07:53","endLine":301,"groupId":"101285","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerGtEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1f/90cf1c130864f149b47d34706fd3b45bbe7ad4.src","preCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 85)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 80)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, greaterThanOrEqual(\"id\", 75)).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"33e675331e221af0b2618815addbdb4fb29c9083","commitMessage":"@@@Implement in and notIn in multiple visitors (#600)\n\n","date":"2019-12-28 05:07:53","modifiedFileCount":"10","status":"M","submitter":"jun-he"}]
