[{"authorTime":"2020-05-30 03:26:56","codes":[{"authorDate":"2020-04-15 07:40:48","commitOrder":3,"curCode":"  public GenericManifestFile(org.apache.avro.Schema avroSchema) {\n    this.avroSchema = avroSchema;\n\n    List<Types.NestedField> fields = AvroSchemaUtil.convert(avroSchema).asStructType().fields();\n    List<Types.NestedField> allFields = ManifestFile.schema().asStruct().fields();\n\n    this.fromProjectionPos = new int[fields.size()];\n    for (int i = 0; i < fromProjectionPos.length; i += 1) {\n      boolean found = false;\n      for (int j = 0; j < allFields.size(); j += 1) {\n        if (fields.get(i).fieldId() == allFields.get(j).fieldId()) {\n          found = true;\n          fromProjectionPos[i] = j;\n        }\n      }\n\n      if (!found) {\n        throw new IllegalArgumentException(\"Cannot find projected field: \" + fields.get(i));\n      }\n    }\n  }\n","date":"2020-04-15 07:40:48","endLine":83,"groupId":"4452","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"GenericManifestFile","params":"(org.apache.avro.SchemaavroSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/26/f7153f81af90c7f61080b22ba77851d0f74308.src","preCode":"  public GenericManifestFile(org.apache.avro.Schema avroSchema) {\n    this.avroSchema = avroSchema;\n\n    List<Types.NestedField> fields = AvroSchemaUtil.convert(avroSchema).asStructType().fields();\n    List<Types.NestedField> allFields = ManifestFile.schema().asStruct().fields();\n\n    this.fromProjectionPos = new int[fields.size()];\n    for (int i = 0; i < fromProjectionPos.length; i += 1) {\n      boolean found = false;\n      for (int j = 0; j < allFields.size(); j += 1) {\n        if (fields.get(i).fieldId() == allFields.get(j).fieldId()) {\n          found = true;\n          fromProjectionPos[i] = j;\n        }\n      }\n\n      if (!found) {\n        throw new IllegalArgumentException(\"Cannot find projected field: \" + fields.get(i));\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/GenericManifestFile.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"},{"authorDate":"2020-05-30 03:26:56","commitOrder":3,"curCode":"  BaseFile(Schema avroSchema) {\n    this.avroSchema = avroSchema;\n\n    Types.StructType schema = AvroSchemaUtil.convert(avroSchema).asNestedType().asStructType();\n\n    \r\n    Type partType = schema.fieldType(\"partition\");\n    if (partType != null) {\n      this.partitionType = partType.asNestedType().asStructType();\n    } else {\n      this.partitionType = EMPTY_STRUCT_TYPE;\n    }\n\n    List<Types.NestedField> fields = schema.fields();\n    List<Types.NestedField> allFields = DataFile.getType(partitionType).fields();\n    this.fromProjectionPos = new int[fields.size()];\n    for (int i = 0; i < fromProjectionPos.length; i += 1) {\n      boolean found = false;\n      for (int j = 0; j < allFields.size(); j += 1) {\n        if (fields.get(i).fieldId() == allFields.get(j).fieldId()) {\n          found = true;\n          fromProjectionPos[i] = j;\n        }\n      }\n\n      if (!found) {\n        throw new IllegalArgumentException(\"Cannot find projected field: \" + fields.get(i));\n      }\n    }\n\n    this.partitionData = new PartitionData(partitionType);\n  }\n","date":"2020-05-30 03:26:56","endLine":109,"groupId":"4452","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"BaseFile","params":"(SchemaavroSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7b/0341831a1004f21a78959fd26b3e592b2b9cfd.src","preCode":"  BaseFile(Schema avroSchema) {\n    this.avroSchema = avroSchema;\n\n    Types.StructType schema = AvroSchemaUtil.convert(avroSchema).asNestedType().asStructType();\n\n    \r\n    Type partType = schema.fieldType(\"partition\");\n    if (partType != null) {\n      this.partitionType = partType.asNestedType().asStructType();\n    } else {\n      this.partitionType = EMPTY_STRUCT_TYPE;\n    }\n\n    List<Types.NestedField> fields = schema.fields();\n    List<Types.NestedField> allFields = DataFile.getType(partitionType).fields();\n    this.fromProjectionPos = new int[fields.size()];\n    for (int i = 0; i < fromProjectionPos.length; i += 1) {\n      boolean found = false;\n      for (int j = 0; j < allFields.size(); j += 1) {\n        if (fields.get(i).fieldId() == allFields.get(j).fieldId()) {\n          found = true;\n          fromProjectionPos[i] = j;\n        }\n      }\n\n      if (!found) {\n        throw new IllegalArgumentException(\"Cannot find projected field: \" + fields.get(i));\n      }\n    }\n\n    this.partitionData = new PartitionData(partitionType);\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/BaseFile.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"527240b445b23cef1a655eccbb3b2c0eb7d178c1","commitMessage":"@@@Add DeleteFile and manifest reader and writer for deletes (#1064)\n\n","date":"2020-05-30 03:26:56","modifiedFileCount":"28","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-11-11 05:36:13","codes":[{"authorDate":"2020-04-15 07:40:48","commitOrder":4,"curCode":"  public GenericManifestFile(org.apache.avro.Schema avroSchema) {\n    this.avroSchema = avroSchema;\n\n    List<Types.NestedField> fields = AvroSchemaUtil.convert(avroSchema).asStructType().fields();\n    List<Types.NestedField> allFields = ManifestFile.schema().asStruct().fields();\n\n    this.fromProjectionPos = new int[fields.size()];\n    for (int i = 0; i < fromProjectionPos.length; i += 1) {\n      boolean found = false;\n      for (int j = 0; j < allFields.size(); j += 1) {\n        if (fields.get(i).fieldId() == allFields.get(j).fieldId()) {\n          found = true;\n          fromProjectionPos[i] = j;\n        }\n      }\n\n      if (!found) {\n        throw new IllegalArgumentException(\"Cannot find projected field: \" + fields.get(i));\n      }\n    }\n  }\n","date":"2020-04-15 07:40:48","endLine":83,"groupId":"122100","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"GenericManifestFile","params":"(org.apache.avro.SchemaavroSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/26/f7153f81af90c7f61080b22ba77851d0f74308.src","preCode":"  public GenericManifestFile(org.apache.avro.Schema avroSchema) {\n    this.avroSchema = avroSchema;\n\n    List<Types.NestedField> fields = AvroSchemaUtil.convert(avroSchema).asStructType().fields();\n    List<Types.NestedField> allFields = ManifestFile.schema().asStruct().fields();\n\n    this.fromProjectionPos = new int[fields.size()];\n    for (int i = 0; i < fromProjectionPos.length; i += 1) {\n      boolean found = false;\n      for (int j = 0; j < allFields.size(); j += 1) {\n        if (fields.get(i).fieldId() == allFields.get(j).fieldId()) {\n          found = true;\n          fromProjectionPos[i] = j;\n        }\n      }\n\n      if (!found) {\n        throw new IllegalArgumentException(\"Cannot find projected field: \" + fields.get(i));\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/GenericManifestFile.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-11-11 05:36:13","commitOrder":4,"curCode":"  BaseFile(Schema avroSchema) {\n    this.avroSchema = avroSchema;\n\n    Types.StructType schema = AvroSchemaUtil.convert(avroSchema).asNestedType().asStructType();\n\n    \r\n    Type partType = schema.fieldType(\"partition\");\n    if (partType != null) {\n      this.partitionType = partType.asNestedType().asStructType();\n    } else {\n      this.partitionType = EMPTY_STRUCT_TYPE;\n    }\n\n    List<Types.NestedField> fields = schema.fields();\n    List<Types.NestedField> allFields = Lists.newArrayList();\n    allFields.addAll(DataFile.getType(partitionType).fields());\n    allFields.add(MetadataColumns.ROW_POSITION);\n\n    this.fromProjectionPos = new int[fields.size()];\n    for (int i = 0; i < fromProjectionPos.length; i += 1) {\n      boolean found = false;\n      for (int j = 0; j < allFields.size(); j += 1) {\n        if (fields.get(i).fieldId() == allFields.get(j).fieldId()) {\n          found = true;\n          fromProjectionPos[i] = j;\n        }\n      }\n\n      if (!found) {\n        throw new IllegalArgumentException(\"Cannot find projected field: \" + fields.get(i));\n      }\n    }\n\n    this.partitionData = new PartitionData(partitionType);\n  }\n","date":"2020-11-11 05:36:13","endLine":116,"groupId":"122100","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"BaseFile","params":"(SchemaavroSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9f/b79c807f0a1abbdb9b6ae2faf138a68b2bdf4e.src","preCode":"  BaseFile(Schema avroSchema) {\n    this.avroSchema = avroSchema;\n\n    Types.StructType schema = AvroSchemaUtil.convert(avroSchema).asNestedType().asStructType();\n\n    \r\n    Type partType = schema.fieldType(\"partition\");\n    if (partType != null) {\n      this.partitionType = partType.asNestedType().asStructType();\n    } else {\n      this.partitionType = EMPTY_STRUCT_TYPE;\n    }\n\n    List<Types.NestedField> fields = schema.fields();\n    List<Types.NestedField> allFields = DataFile.getType(partitionType).fields();\n    this.fromProjectionPos = new int[fields.size()];\n    for (int i = 0; i < fromProjectionPos.length; i += 1) {\n      boolean found = false;\n      for (int j = 0; j < allFields.size(); j += 1) {\n        if (fields.get(i).fieldId() == allFields.get(j).fieldId()) {\n          found = true;\n          fromProjectionPos[i] = j;\n        }\n      }\n\n      if (!found) {\n        throw new IllegalArgumentException(\"Cannot find projected field: \" + fields.get(i));\n      }\n    }\n\n    this.partitionData = new PartitionData(partitionType);\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/BaseFile.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"7c3b0d750ecef76e0c9a33b66938d0d8602857b8","commitMessage":"@@@Core: Add position in manifest to DataFile and DeleteFile (#1723)\n\n","date":"2020-11-11 05:36:13","modifiedFileCount":"10","status":"M","submitter":"Ryan Blue"}]
