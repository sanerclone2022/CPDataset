[{"authorTime":"2021-09-21 06:13:46","codes":[{"authorDate":"2021-09-21 06:13:46","commitOrder":1,"curCode":"  public void testRollingEqualityDeleteWriterSplitDeletes() throws IOException {\n    List<Integer> equalityFieldIds = ImmutableList.of(table.schema().findField(\"id\").fieldId());\n    Schema equalityDeleteRowSchema = table.schema().select(\"id\");\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema(), equalityFieldIds, equalityDeleteRowSchema);\n    RollingEqualityDeleteWriter<T> writer = new RollingEqualityDeleteWriter<>(\n        writerFactory, fileFactory, table.io(),\n        SMALL_FILE_SIZE, table.spec(), partition);\n\n    List<T> deletes = Lists.newArrayListWithExpectedSize(4 * FILE_SIZE_CHECK_ROWS_DIVISOR);\n    for (int index = 0; index < 4 * FILE_SIZE_CHECK_ROWS_DIVISOR; index++) {\n      deletes.add(toRow(index, PARTITION_VALUE));\n    }\n\n    try (RollingEqualityDeleteWriter<T> closeableWriter = writer) {\n      closeableWriter.write(deletes);\n    }\n\n    \r\n    writer.close();\n\n    DeleteWriteResult result = writer.result();\n    Assert.assertEquals(4, result.deleteFiles().size());\n    Assert.assertEquals(0, result.referencedDataFiles().size());\n    Assert.assertFalse(result.referencesDataFiles());\n  }\n","date":"2021-09-21 06:13:46","endLine":195,"groupId":"3172","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRollingEqualityDeleteWriterSplitDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e1/1e0a7e60dcaf7230ce5d84e91b6e5f40c1b6de.src","preCode":"  public void testRollingEqualityDeleteWriterSplitDeletes() throws IOException {\n    List<Integer> equalityFieldIds = ImmutableList.of(table.schema().findField(\"id\").fieldId());\n    Schema equalityDeleteRowSchema = table.schema().select(\"id\");\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema(), equalityFieldIds, equalityDeleteRowSchema);\n    RollingEqualityDeleteWriter<T> writer = new RollingEqualityDeleteWriter<>(\n        writerFactory, fileFactory, table.io(),\n        SMALL_FILE_SIZE, table.spec(), partition);\n\n    List<T> deletes = Lists.newArrayListWithExpectedSize(4 * FILE_SIZE_CHECK_ROWS_DIVISOR);\n    for (int index = 0; index < 4 * FILE_SIZE_CHECK_ROWS_DIVISOR; index++) {\n      deletes.add(toRow(index, PARTITION_VALUE));\n    }\n\n    try (RollingEqualityDeleteWriter<T> closeableWriter = writer) {\n      closeableWriter.write(deletes);\n    }\n\n    \r\n    writer.close();\n\n    DeleteWriteResult result = writer.result();\n    Assert.assertEquals(4, result.deleteFiles().size());\n    Assert.assertEquals(0, result.referencedDataFiles().size());\n    Assert.assertFalse(result.referencesDataFiles());\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/io/TestRollingFileWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"},{"authorDate":"2021-09-21 06:13:46","commitOrder":1,"curCode":"  public void testRollingPositionDeleteWriterSplitDeletes() throws IOException {\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    RollingPositionDeleteWriter<T> writer = new RollingPositionDeleteWriter<>(\n        writerFactory, fileFactory, table.io(),\n        SMALL_FILE_SIZE, table.spec(), partition);\n\n    List<PositionDelete<T>> deletes = Lists.newArrayListWithExpectedSize(4 * FILE_SIZE_CHECK_ROWS_DIVISOR);\n    for (int index = 0; index < 4 * FILE_SIZE_CHECK_ROWS_DIVISOR; index++) {\n      deletes.add(new PositionDelete<T>().set(\"path/to/data/file-1.parquet\", index, null));\n    }\n\n    try (RollingPositionDeleteWriter<T> closeableWriter = writer) {\n      closeableWriter.write(deletes);\n    }\n\n    \r\n    writer.close();\n\n    DeleteWriteResult result = writer.result();\n    Assert.assertEquals(4, result.deleteFiles().size());\n    Assert.assertEquals(1, result.referencedDataFiles().size());\n    Assert.assertTrue(result.referencesDataFiles());\n  }\n","date":"2021-09-21 06:13:46","endLine":238,"groupId":"3175","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRollingPositionDeleteWriterSplitDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e1/1e0a7e60dcaf7230ce5d84e91b6e5f40c1b6de.src","preCode":"  public void testRollingPositionDeleteWriterSplitDeletes() throws IOException {\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    RollingPositionDeleteWriter<T> writer = new RollingPositionDeleteWriter<>(\n        writerFactory, fileFactory, table.io(),\n        SMALL_FILE_SIZE, table.spec(), partition);\n\n    List<PositionDelete<T>> deletes = Lists.newArrayListWithExpectedSize(4 * FILE_SIZE_CHECK_ROWS_DIVISOR);\n    for (int index = 0; index < 4 * FILE_SIZE_CHECK_ROWS_DIVISOR; index++) {\n      deletes.add(new PositionDelete<T>().set(\"path/to/data/file-1.parquet\", index, null));\n    }\n\n    try (RollingPositionDeleteWriter<T> closeableWriter = writer) {\n      closeableWriter.write(deletes);\n    }\n\n    \r\n    writer.close();\n\n    DeleteWriteResult result = writer.result();\n    Assert.assertEquals(4, result.deleteFiles().size());\n    Assert.assertEquals(1, result.referencedDataFiles().size());\n    Assert.assertTrue(result.referencesDataFiles());\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/io/TestRollingFileWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"B"}],"commitId":"7eeeada0dc027025664310c1ca619e9b44fec764","commitMessage":"@@@Core: Add new rolling file writers (#3158)\n\n","date":"2021-09-21 06:13:46","modifiedFileCount":"1","status":"B","submitter":"Anton Okolnychyi"},{"authorTime":"2021-09-24 07:25:33","codes":[{"authorDate":"2021-09-21 06:13:46","commitOrder":2,"curCode":"  public void testRollingEqualityDeleteWriterSplitDeletes() throws IOException {\n    List<Integer> equalityFieldIds = ImmutableList.of(table.schema().findField(\"id\").fieldId());\n    Schema equalityDeleteRowSchema = table.schema().select(\"id\");\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema(), equalityFieldIds, equalityDeleteRowSchema);\n    RollingEqualityDeleteWriter<T> writer = new RollingEqualityDeleteWriter<>(\n        writerFactory, fileFactory, table.io(),\n        SMALL_FILE_SIZE, table.spec(), partition);\n\n    List<T> deletes = Lists.newArrayListWithExpectedSize(4 * FILE_SIZE_CHECK_ROWS_DIVISOR);\n    for (int index = 0; index < 4 * FILE_SIZE_CHECK_ROWS_DIVISOR; index++) {\n      deletes.add(toRow(index, PARTITION_VALUE));\n    }\n\n    try (RollingEqualityDeleteWriter<T> closeableWriter = writer) {\n      closeableWriter.write(deletes);\n    }\n\n    \r\n    writer.close();\n\n    DeleteWriteResult result = writer.result();\n    Assert.assertEquals(4, result.deleteFiles().size());\n    Assert.assertEquals(0, result.referencedDataFiles().size());\n    Assert.assertFalse(result.referencesDataFiles());\n  }\n","date":"2021-09-21 06:13:46","endLine":195,"groupId":"10681","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRollingEqualityDeleteWriterSplitDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e1/1e0a7e60dcaf7230ce5d84e91b6e5f40c1b6de.src","preCode":"  public void testRollingEqualityDeleteWriterSplitDeletes() throws IOException {\n    List<Integer> equalityFieldIds = ImmutableList.of(table.schema().findField(\"id\").fieldId());\n    Schema equalityDeleteRowSchema = table.schema().select(\"id\");\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema(), equalityFieldIds, equalityDeleteRowSchema);\n    RollingEqualityDeleteWriter<T> writer = new RollingEqualityDeleteWriter<>(\n        writerFactory, fileFactory, table.io(),\n        SMALL_FILE_SIZE, table.spec(), partition);\n\n    List<T> deletes = Lists.newArrayListWithExpectedSize(4 * FILE_SIZE_CHECK_ROWS_DIVISOR);\n    for (int index = 0; index < 4 * FILE_SIZE_CHECK_ROWS_DIVISOR; index++) {\n      deletes.add(toRow(index, PARTITION_VALUE));\n    }\n\n    try (RollingEqualityDeleteWriter<T> closeableWriter = writer) {\n      closeableWriter.write(deletes);\n    }\n\n    \r\n    writer.close();\n\n    DeleteWriteResult result = writer.result();\n    Assert.assertEquals(4, result.deleteFiles().size());\n    Assert.assertEquals(0, result.referencedDataFiles().size());\n    Assert.assertFalse(result.referencesDataFiles());\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/io/TestRollingFileWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"N"},{"authorDate":"2021-09-24 07:25:33","commitOrder":2,"curCode":"  public void testRollingPositionDeleteWriterSplitDeletes() throws IOException {\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    RollingPositionDeleteWriter<T> writer = new RollingPositionDeleteWriter<>(\n        writerFactory, fileFactory, table.io(),\n        SMALL_FILE_SIZE, table.spec(), partition);\n\n    List<PositionDelete<T>> deletes = Lists.newArrayListWithExpectedSize(4 * FILE_SIZE_CHECK_ROWS_DIVISOR);\n    for (int index = 0; index < 4 * FILE_SIZE_CHECK_ROWS_DIVISOR; index++) {\n      deletes.add(positionDelete(\"path/to/data/file-1.parquet\", index, null));\n    }\n\n    try (RollingPositionDeleteWriter<T> closeableWriter = writer) {\n      closeableWriter.write(deletes);\n    }\n\n    \r\n    writer.close();\n\n    DeleteWriteResult result = writer.result();\n    Assert.assertEquals(4, result.deleteFiles().size());\n    Assert.assertEquals(1, result.referencedDataFiles().size());\n    Assert.assertTrue(result.referencesDataFiles());\n  }\n","date":"2021-09-24 07:25:33","endLine":219,"groupId":"10681","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testRollingPositionDeleteWriterSplitDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a6/2ac3e7aa3eecb5d7f86db00036d9def3eaeb4b.src","preCode":"  public void testRollingPositionDeleteWriterSplitDeletes() throws IOException {\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    RollingPositionDeleteWriter<T> writer = new RollingPositionDeleteWriter<>(\n        writerFactory, fileFactory, table.io(),\n        SMALL_FILE_SIZE, table.spec(), partition);\n\n    List<PositionDelete<T>> deletes = Lists.newArrayListWithExpectedSize(4 * FILE_SIZE_CHECK_ROWS_DIVISOR);\n    for (int index = 0; index < 4 * FILE_SIZE_CHECK_ROWS_DIVISOR; index++) {\n      deletes.add(new PositionDelete<T>().set(\"path/to/data/file-1.parquet\", index, null));\n    }\n\n    try (RollingPositionDeleteWriter<T> closeableWriter = writer) {\n      closeableWriter.write(deletes);\n    }\n\n    \r\n    writer.close();\n\n    DeleteWriteResult result = writer.result();\n    Assert.assertEquals(4, result.deleteFiles().size());\n    Assert.assertEquals(1, result.referencedDataFiles().size());\n    Assert.assertTrue(result.referencesDataFiles());\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/io/TestRollingFileWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"11f327a2f08d95fdf8fea68412f0ae1687a3b63f","commitMessage":"@@@Core: Add PartitioningWriter (#3164)\n\n","date":"2021-09-24 07:25:33","modifiedFileCount":"8","status":"M","submitter":"Anton Okolnychyi"}]
