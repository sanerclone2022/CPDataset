[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema) {\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    return copy;\n  }\n","date":"2019-03-21 07:25:05","endLine":188,"groupId":"2247","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f5/c7e251b8607d40507bfc4de90000da14f1f8a0.src","preCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema) {\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  static Schema.Field copyField(Schema.Field field, Schema newSchema, String newName) {\n    Schema.Field copy = new Schema.Field(newName,\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (!newName.equals(field.name())) {\n      copy.addAlias(field.name());\n    }\n\n    return copy;\n  }\n","date":"2019-03-21 07:25:05","endLine":274,"groupId":"2281","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema@StringnewName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7d/94f1c1f0c4cda0faeff490ecec02eca781bc81.src","preCode":"  static Schema.Field copyField(Schema.Field field, Schema newSchema, String newName) {\n    Schema.Field copy = new Schema.Field(newName,\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (!newName.equals(field.name())) {\n      copy.addAlias(field.name());\n    }\n\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/AvroSchemaUtil.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-10-23 01:47:52","commitOrder":2,"curCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (AvroSchemaUtil.hasFieldId(field)) {\n      int existingFieldId = AvroSchemaUtil.getFieldId(field);\n      Preconditions.checkArgument(existingFieldId == fieldId,\n          \"Existing field does match with that fetched from name mapping\");\n    } else {\n      \r\n      copy.addProp(AvroSchemaUtil.FIELD_ID_PROP, fieldId);\n    }\n\n    return copy;\n  }\n","date":"2019-10-23 01:47:52","endLine":267,"groupId":"2247","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema@IntegerfieldId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/d52124d7e38c2fdd9e10dada36575a55371b08.src","preCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema) {\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  static Schema.Field copyField(Schema.Field field, Schema newSchema, String newName) {\n    Schema.Field copy = new Schema.Field(newName,\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (!newName.equals(field.name())) {\n      copy.addAlias(field.name());\n    }\n\n    return copy;\n  }\n","date":"2019-03-21 07:25:05","endLine":274,"groupId":"2281","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema@StringnewName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7d/94f1c1f0c4cda0faeff490ecec02eca781bc81.src","preCode":"  static Schema.Field copyField(Schema.Field field, Schema newSchema, String newName) {\n    Schema.Field copy = new Schema.Field(newName,\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (!newName.equals(field.name())) {\n      copy.addAlias(field.name());\n    }\n\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/AvroSchemaUtil.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"9f1598e7f9c3409e2ce38365f928ad6d5d58e485","commitMessage":"@@@Avro: Add name to ID mapping for files with name-based schemas (#207)\n\nFixes #40.","date":"2019-10-23 01:47:52","modifiedFileCount":"7","status":"M","submitter":"Ratandeep Ratti"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2020-06-24 07:27:01","commitOrder":3,"curCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n    Schema newSchemaReordered;\n    \r\n    if (isOptionSchemaWithNonNullFirstOption(newSchema)) {\n      newSchemaReordered = AvroSchemaUtil.toOption(AvroSchemaUtil.fromOption(newSchema));\n    } else {\n      newSchemaReordered = newSchema;\n    }\n    \r\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchemaReordered, field.doc(),\n        AvroSchemaUtil.isOptionSchema(newSchemaReordered) ? JsonProperties.NULL_VALUE : null, field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (AvroSchemaUtil.hasFieldId(field)) {\n      int existingFieldId = AvroSchemaUtil.getFieldId(field);\n      Preconditions.checkArgument(existingFieldId == fieldId,\n          \"Existing field does match with that fetched from name mapping\");\n    } else {\n      \r\n      copy.addProp(AvroSchemaUtil.FIELD_ID_PROP, fieldId);\n    }\n\n    return copy;\n  }\n","date":"2020-06-24 07:27:01","endLine":284,"groupId":"10124","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema@IntegerfieldId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/de/cca0384ba142ec53c616657ca74c346b37e31b.src","preCode":"  private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n    Schema.Field copy = new Schema.Field(field.name(),\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (AvroSchemaUtil.hasFieldId(field)) {\n      int existingFieldId = AvroSchemaUtil.getFieldId(field);\n      Preconditions.checkArgument(existingFieldId == fieldId,\n          \"Existing field does match with that fetched from name mapping\");\n    } else {\n      \r\n      copy.addProp(AvroSchemaUtil.FIELD_ID_PROP, fieldId);\n    }\n\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":3,"curCode":"  static Schema.Field copyField(Schema.Field field, Schema newSchema, String newName) {\n    Schema.Field copy = new Schema.Field(newName,\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (!newName.equals(field.name())) {\n      copy.addAlias(field.name());\n    }\n\n    return copy;\n  }\n","date":"2019-03-21 07:25:05","endLine":274,"groupId":"10124","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"copyField","params":"(Schema.Fieldfield@SchemanewSchema@StringnewName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7d/94f1c1f0c4cda0faeff490ecec02eca781bc81.src","preCode":"  static Schema.Field copyField(Schema.Field field, Schema newSchema, String newName) {\n    Schema.Field copy = new Schema.Field(newName,\n        newSchema, field.doc(), field.defaultVal(), field.order());\n\n    for (Map.Entry<String, Object> prop : field.getObjectProps().entrySet()) {\n      copy.addProp(prop.getKey(), prop.getValue());\n    }\n\n    if (!newName.equals(field.name())) {\n      copy.addAlias(field.name());\n    }\n\n    return copy;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/AvroSchemaUtil.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"d1ba7b62abdad6b9fd8f3ec98f789ca53e9cf7b4","commitMessage":"@@@Avro: Fix errors when reading options with non-null defaults (#1132)\n\n","date":"2020-06-24 07:27:01","modifiedFileCount":"1","status":"M","submitter":"Shardul Mahadik"}]
