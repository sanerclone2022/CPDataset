[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 85)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 80)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 75)).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":221,"groupId":"1462","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntegerGtEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c6/2d32c261a8e4e2f814e0a162075cac0e3ff30f.src","preCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 85)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 80)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 75)).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testIntegerEq() {\n    boolean shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 5)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 29)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 30)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 75)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 80)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 85)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n  }\n","date":"2019-03-21 07:25:05","endLine":245,"groupId":"3934","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c6/2d32c261a8e4e2f814e0a162075cac0e3ff30f.src","preCode":"  public void testIntegerEq() {\n    boolean shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 5)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 29)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 30)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 75)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 80)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 85)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-07-13 03:55:36","codes":[{"authorDate":"2019-07-13 03:55:36","commitOrder":2,"curCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", 85), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", 80), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", 79), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", 75), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","date":"2019-07-13 03:55:36","endLine":217,"groupId":"2077","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntegerGtEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/38/59f0074c73cd6ed7b477e84c5b7698a9a904b6.src","preCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 85)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 80)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(\n        SPEC, greaterThanOrEqual(\"id\", 75)).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2019-07-13 03:55:36","commitOrder":2,"curCode":"  public void testIntegerEq() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 5), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 29), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 30), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 75), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 79), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 80), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 85), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n  }\n","date":"2019-07-13 03:55:36","endLine":241,"groupId":"2079","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/38/59f0074c73cd6ed7b477e84c5b7698a9a904b6.src","preCode":"  public void testIntegerEq() {\n    boolean shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 5)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 29)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 30)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 75)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 79)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 80)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n\n    shouldRead = new InclusiveManifestEvaluator(SPEC, equal(\"id\", 85)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"e4c6fb979003b1629961b0c950ec6acec994de3b","commitMessage":"@@@Add metadata tables (#252)\n\nThis commit adds metadata tables:\n* history -- the snapshot log\n* snapshots -- known snapshots\n* manifests -- manifest files for a snapshot\n* files -- data files for a snapshot\n* entries -- manifest entries for a snapshot","date":"2019-07-13 03:55:36","modifiedFileCount":"23","status":"M","submitter":"Ryan Blue"},{"authorTime":"2019-12-28 05:07:53","codes":[{"authorDate":"2019-12-28 05:07:53","commitOrder":3,"curCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = ManifestEvaluator\n        .forRowFilter(greaterThanOrEqual(\"id\", INT_MAX_VALUE + 6), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", INT_MAX_VALUE + 1), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", INT_MAX_VALUE), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", INT_MAX_VALUE - 4), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","date":"2019-12-28 05:07:53","endLine":233,"groupId":"101298","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntegerGtEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b9/a476ffa5d7969e55cfe5badb8dcff7cabe5bd2.src","preCode":"  public void testIntegerGtEq() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", 85), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (85 < 79)\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", 80), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id range above upper bound (80 > 79)\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", 79), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: one possible id\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(greaterThanOrEqual(\"id\", 75), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: may possible ids\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2019-12-28 05:07:53","commitOrder":3,"curCode":"  public void testIntegerEq() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", INT_MIN_VALUE - 25), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", INT_MIN_VALUE - 1), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", INT_MIN_VALUE), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", INT_MAX_VALUE - 4), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", INT_MAX_VALUE), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", INT_MAX_VALUE + 1), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", INT_MAX_VALUE + 6), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n  }\n","date":"2019-12-28 05:07:53","endLine":257,"groupId":"101298","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerEq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b9/a476ffa5d7969e55cfe5badb8dcff7cabe5bd2.src","preCode":"  public void testIntegerEq() {\n    boolean shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 5), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 29), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 30), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 75), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 79), SPEC, true).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 80), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n\n    shouldRead = ManifestEvaluator.forRowFilter(equal(\"id\", 85), SPEC, true).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveManifestEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"33e675331e221af0b2618815addbdb4fb29c9083","commitMessage":"@@@Implement in and notIn in multiple visitors (#600)\n\n","date":"2019-12-28 05:07:53","modifiedFileCount":"10","status":"M","submitter":"jun-he"}]
