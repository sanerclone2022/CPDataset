[{"authorTime":"2020-08-06 04:22:25","codes":[{"authorDate":"2020-08-06 04:22:25","commitOrder":1,"curCode":"  public void testUnpartitionedTableScan() throws IOException {\n    File location = temp.newFolder();\n    Assert.assertTrue(location.delete());\n\n    Table unpartitioned = TestTables.create(location, \"unpartitioned\", SCHEMA, PartitionSpec.unpartitioned(), 2);\n\n    unpartitioned.newAppend()\n        .appendFile(UNPARTITIONED_FILE)\n        .commit();\n\n    \r\n    unpartitioned.newRowDelta()\n        .addDeletes(UNPARTITIONED_POS_DELETES)\n        .commit();\n\n    List<FileScanTask> tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    Assert.assertEquals(\"Should have one task\", 1, tasks.size());\n\n    FileScanTask task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        UNPARTITIONED_FILE.path(), task.file().path());\n    Assert.assertEquals(\"Should have one associated delete file\",\n        1, task.deletes().size());\n    Assert.assertEquals(\"Should have expected delete file\",\n        UNPARTITIONED_POS_DELETES.path(), task.deletes().get(0).path());\n\n    \r\n    unpartitioned.newRowDelta()\n        .addDeletes(UNPARTITIONED_EQ_DELETES)\n        .commit();\n\n    tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        UNPARTITIONED_FILE.path(), task.file().path());\n    Assert.assertEquals(\"Should have two associated delete files\",\n        2, task.deletes().size());\n    Assert.assertEquals(\"Should have expected delete files\",\n        Sets.newHashSet(UNPARTITIONED_POS_DELETES.path(), UNPARTITIONED_EQ_DELETES.path()),\n        Sets.newHashSet(Iterables.transform(task.deletes(), ContentFile::path)));\n  }\n","date":"2020-08-06 04:22:25","endLine":176,"groupId":"3366","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnpartitionedTableScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/40/d8363cc3202da93979634f4a473092758c95b2.src","preCode":"  public void testUnpartitionedTableScan() throws IOException {\n    File location = temp.newFolder();\n    Assert.assertTrue(location.delete());\n\n    Table unpartitioned = TestTables.create(location, \"unpartitioned\", SCHEMA, PartitionSpec.unpartitioned(), 2);\n\n    unpartitioned.newAppend()\n        .appendFile(UNPARTITIONED_FILE)\n        .commit();\n\n    \r\n    unpartitioned.newRowDelta()\n        .addDeletes(UNPARTITIONED_POS_DELETES)\n        .commit();\n\n    List<FileScanTask> tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    Assert.assertEquals(\"Should have one task\", 1, tasks.size());\n\n    FileScanTask task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        UNPARTITIONED_FILE.path(), task.file().path());\n    Assert.assertEquals(\"Should have one associated delete file\",\n        1, task.deletes().size());\n    Assert.assertEquals(\"Should have expected delete file\",\n        UNPARTITIONED_POS_DELETES.path(), task.deletes().get(0).path());\n\n    \r\n    unpartitioned.newRowDelta()\n        .addDeletes(UNPARTITIONED_EQ_DELETES)\n        .commit();\n\n    tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        UNPARTITIONED_FILE.path(), task.file().path());\n    Assert.assertEquals(\"Should have two associated delete files\",\n        2, task.deletes().size());\n    Assert.assertEquals(\"Should have expected delete files\",\n        Sets.newHashSet(UNPARTITIONED_POS_DELETES.path(), UNPARTITIONED_EQ_DELETES.path()),\n        Sets.newHashSet(Iterables.transform(task.deletes(), ContentFile::path)));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"},{"authorDate":"2020-08-06 04:22:25","commitOrder":1,"curCode":"  public void testUnpartitionedTableSequenceNumbers() throws IOException {\n    File location = temp.newFolder();\n    Assert.assertTrue(location.delete());\n\n    Table unpartitioned = TestTables.create(location, \"unpartitioned\", SCHEMA, PartitionSpec.unpartitioned(), 2);\n\n    \r\n    \r\n    unpartitioned.newRowDelta()\n        .addRows(UNPARTITIONED_FILE)\n        .addDeletes(UNPARTITIONED_POS_DELETES)\n        .addDeletes(UNPARTITIONED_EQ_DELETES)\n        .commit();\n\n    Assert.assertEquals(\"Table should contain 2 delete files\",\n        2, (long) unpartitioned.currentSnapshot().deleteManifests().get(0).addedFilesCount());\n\n    List<FileScanTask> tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    Assert.assertEquals(\"Should have one task\", 1, tasks.size());\n\n    FileScanTask task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        UNPARTITIONED_FILE.path(), task.file().path());\n    Assert.assertEquals(\"Should have one associated delete file\",\n        1, task.deletes().size());\n    Assert.assertEquals(\"Should have only pos delete file\",\n        UNPARTITIONED_POS_DELETES.path(), task.deletes().get(0).path());\n  }\n","date":"2020-08-06 04:22:25","endLine":371,"groupId":"3366","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnpartitionedTableSequenceNumbers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/40/d8363cc3202da93979634f4a473092758c95b2.src","preCode":"  public void testUnpartitionedTableSequenceNumbers() throws IOException {\n    File location = temp.newFolder();\n    Assert.assertTrue(location.delete());\n\n    Table unpartitioned = TestTables.create(location, \"unpartitioned\", SCHEMA, PartitionSpec.unpartitioned(), 2);\n\n    \r\n    \r\n    unpartitioned.newRowDelta()\n        .addRows(UNPARTITIONED_FILE)\n        .addDeletes(UNPARTITIONED_POS_DELETES)\n        .addDeletes(UNPARTITIONED_EQ_DELETES)\n        .commit();\n\n    Assert.assertEquals(\"Table should contain 2 delete files\",\n        2, (long) unpartitioned.currentSnapshot().deleteManifests().get(0).addedFilesCount());\n\n    List<FileScanTask> tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    Assert.assertEquals(\"Should have one task\", 1, tasks.size());\n\n    FileScanTask task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        UNPARTITIONED_FILE.path(), task.file().path());\n    Assert.assertEquals(\"Should have one associated delete file\",\n        1, task.deletes().size());\n    Assert.assertEquals(\"Should have only pos delete file\",\n        UNPARTITIONED_POS_DELETES.path(), task.deletes().get(0).path());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"B"}],"commitId":"0cd284978c3800a30d44aa2454dd5730b9bebfa7","commitMessage":"@@@Update scan planning with DeleteFiles in each task (#1288)\n\nThis adds `DeleteFileIndex` to scan delete manifests and index delete files.  updates `ManifestGroup` to use the index when planning tasks.  and adds delete files to `FileScanTask`.\n\nThe `DeleteFileIndex` uses a map keyed by partition spec ID and partition tuple. Values of the map are sorted list of sequence numbers and corresponding `DeleteFile` instances. When looking up a `DataFile`.  the potentially matching delete files are fetched using its partition tuple.  then the sequence numbers are binary searched to find the matching set of delete files with sequence numbers higher than the data file.\n\nThe index also supports global equality delete files. If an equality delete file is added to the table with an unpartitioned spec.  it will be returned for all data files with a lower sequence number.  regardless of partition.","date":"2020-08-06 04:22:25","modifiedFileCount":"11","status":"B","submitter":"Ryan Blue"},{"authorTime":"2021-03-30 08:24:02","codes":[{"authorDate":"2021-03-30 08:24:02","commitOrder":2,"curCode":"  public void testUnpartitionedTableScan() throws IOException {\n    File location = temp.newFolder();\n    Assert.assertTrue(location.delete());\n\n    Table unpartitioned = TestTables.create(location, \"unpartitioned\", SCHEMA, PartitionSpec.unpartitioned(), 2);\n\n    DataFile unpartitionedFile = unpartitionedFile(unpartitioned.spec());\n    unpartitioned.newAppend()\n        .appendFile(unpartitionedFile)\n        .commit();\n\n    \r\n    DeleteFile unpartitionedPosDeletes = unpartitionedPosDeletes(unpartitioned.spec());\n    unpartitioned.newRowDelta()\n        .addDeletes(unpartitionedPosDeletes)\n        .commit();\n\n    List<FileScanTask> tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    Assert.assertEquals(\"Should have one task\", 1, tasks.size());\n\n    FileScanTask task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        unpartitionedFile.path(), task.file().path());\n    Assert.assertEquals(\"Should have one associated delete file\",\n        1, task.deletes().size());\n    Assert.assertEquals(\"Should have expected delete file\",\n        unpartitionedPosDeletes.path(), task.deletes().get(0).path());\n\n    \r\n    DeleteFile unpartitionedEqDeletes = unpartitionedEqDeletes(unpartitioned.spec());\n    unpartitioned.newRowDelta()\n        .addDeletes(unpartitionedEqDeletes)\n        .commit();\n\n    tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        unpartitionedFile.path(), task.file().path());\n    Assert.assertEquals(\"Should have two associated delete files\",\n        2, task.deletes().size());\n    Assert.assertEquals(\"Should have expected delete files\",\n        Sets.newHashSet(unpartitionedPosDeletes.path(), unpartitionedEqDeletes.path()),\n        Sets.newHashSet(Iterables.transform(task.deletes(), ContentFile::path)));\n  }\n","date":"2021-03-30 08:24:02","endLine":200,"groupId":"101909","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testUnpartitionedTableScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/17/91eaaf67d2732357c6cfd6d591c2099814cd30.src","preCode":"  public void testUnpartitionedTableScan() throws IOException {\n    File location = temp.newFolder();\n    Assert.assertTrue(location.delete());\n\n    Table unpartitioned = TestTables.create(location, \"unpartitioned\", SCHEMA, PartitionSpec.unpartitioned(), 2);\n\n    unpartitioned.newAppend()\n        .appendFile(UNPARTITIONED_FILE)\n        .commit();\n\n    \r\n    unpartitioned.newRowDelta()\n        .addDeletes(UNPARTITIONED_POS_DELETES)\n        .commit();\n\n    List<FileScanTask> tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    Assert.assertEquals(\"Should have one task\", 1, tasks.size());\n\n    FileScanTask task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        UNPARTITIONED_FILE.path(), task.file().path());\n    Assert.assertEquals(\"Should have one associated delete file\",\n        1, task.deletes().size());\n    Assert.assertEquals(\"Should have expected delete file\",\n        UNPARTITIONED_POS_DELETES.path(), task.deletes().get(0).path());\n\n    \r\n    unpartitioned.newRowDelta()\n        .addDeletes(UNPARTITIONED_EQ_DELETES)\n        .commit();\n\n    tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        UNPARTITIONED_FILE.path(), task.file().path());\n    Assert.assertEquals(\"Should have two associated delete files\",\n        2, task.deletes().size());\n    Assert.assertEquals(\"Should have expected delete files\",\n        Sets.newHashSet(UNPARTITIONED_POS_DELETES.path(), UNPARTITIONED_EQ_DELETES.path()),\n        Sets.newHashSet(Iterables.transform(task.deletes(), ContentFile::path)));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2021-03-30 08:24:02","commitOrder":2,"curCode":"  public void testUnpartitionedTableSequenceNumbers() throws IOException {\n    File location = temp.newFolder();\n    Assert.assertTrue(location.delete());\n\n    Table unpartitioned = TestTables.create(location, \"unpartitioned\", SCHEMA, PartitionSpec.unpartitioned(), 2);\n\n    \r\n    \r\n    DataFile unpartitionedFile = unpartitionedFile(unpartitioned.spec());\n    DeleteFile unpartitionedPosDeleteFile = unpartitionedPosDeletes(unpartitioned.spec());\n    unpartitioned.newRowDelta()\n        .addRows(unpartitionedFile)\n        .addDeletes(unpartitionedPosDeleteFile)\n        .addDeletes(unpartitionedEqDeletes(unpartitioned.spec()))\n        .commit();\n\n    Assert.assertEquals(\"Table should contain 2 delete files\",\n        2, (long) unpartitioned.currentSnapshot().deleteManifests().get(0).addedFilesCount());\n\n    List<FileScanTask> tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    Assert.assertEquals(\"Should have one task\", 1, tasks.size());\n\n    FileScanTask task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        unpartitionedFile.path(), task.file().path());\n    Assert.assertEquals(\"Should have one associated delete file\",\n        1, task.deletes().size());\n    Assert.assertEquals(\"Should have only pos delete file\",\n        unpartitionedPosDeleteFile.path(), task.deletes().get(0).path());\n  }\n","date":"2021-03-30 08:24:02","endLine":399,"groupId":"101909","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testUnpartitionedTableSequenceNumbers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/17/91eaaf67d2732357c6cfd6d591c2099814cd30.src","preCode":"  public void testUnpartitionedTableSequenceNumbers() throws IOException {\n    File location = temp.newFolder();\n    Assert.assertTrue(location.delete());\n\n    Table unpartitioned = TestTables.create(location, \"unpartitioned\", SCHEMA, PartitionSpec.unpartitioned(), 2);\n\n    \r\n    \r\n    unpartitioned.newRowDelta()\n        .addRows(UNPARTITIONED_FILE)\n        .addDeletes(UNPARTITIONED_POS_DELETES)\n        .addDeletes(UNPARTITIONED_EQ_DELETES)\n        .commit();\n\n    Assert.assertEquals(\"Table should contain 2 delete files\",\n        2, (long) unpartitioned.currentSnapshot().deleteManifests().get(0).addedFilesCount());\n\n    List<FileScanTask> tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator());\n    Assert.assertEquals(\"Should have one task\", 1, tasks.size());\n\n    FileScanTask task = tasks.get(0);\n    Assert.assertEquals(\"Should have the correct data file path\",\n        UNPARTITIONED_FILE.path(), task.file().path());\n    Assert.assertEquals(\"Should have one associated delete file\",\n        1, task.deletes().size());\n    Assert.assertEquals(\"Should have only pos delete file\",\n        UNPARTITIONED_POS_DELETES.path(), task.deletes().get(0).path());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestDeleteFileIndex.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"aba898b1a2ea15fd091228626b6887a5a72800c0","commitMessage":"@@@Spark: Fix RewriteDataFilesAction with custom outputSpecId (#2293)\n\n","date":"2021-03-30 08:24:02","modifiedFileCount":"7","status":"M","submitter":"Edgar Rodriguez"}]
