[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(fromOption(\n        fromOption(record.getSchema().getField(\"points\").schema()).getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.get(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should project null y\", projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n    Assert.assertNull(\"Should project null z\", projectedP2.get(\"z\"));\n\n    Schema zAdded = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get()),\n                Types.NestedField.optional(20, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"z_added\", writeSchema, zAdded, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    Assert.assertNull(\"Should contain null z\", projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should project null y\", projectedP2.get(\"y\"));\n    Assert.assertNull(\"Should contain null z\", projectedP2.get(\"z\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":567,"groupId":"2913","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testListOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0c/e4f180ad131a18e53b87a76fc14671429d4970.src","preCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(fromOption(\n        fromOption(record.getSchema().getField(\"points\").schema()).getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.get(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should project null y\", projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n    Assert.assertNull(\"Should project null z\", projectedP2.get(\"z\"));\n\n    Schema zAdded = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get()),\n                Types.NestedField.optional(20, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"z_added\", writeSchema, zAdded, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    Assert.assertNull(\"Should contain null z\", projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should project null y\", projectedP2.get(\"y\"));\n    Assert.assertNull(\"Should contain null z\", projectedP2.get(\"z\"));\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = GenericRecord.create(writeSchema.asStruct());\n    record.setField(\"id\", 34L);\n    Record p1 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType());\n    p1.setField(\"x\", 1);\n    p1.setField(\"y\", 2);\n    Record p2 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType());\n    p2.setField(\"x\", 3);\n    p2.setField(\"y\", null);\n    record.setField(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.getField(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.getField(\"points\"), projected.getField(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    List<Record> points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.getField(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.getField(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.getField(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.getField(\"z\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":522,"groupId":"4693","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/54/b76d8c8647b7c4b03aeeaf6105db31e797b41e.src","preCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = GenericRecord.create(writeSchema.asStruct());\n    record.setField(\"id\", 34L);\n    Record p1 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType());\n    p1.setField(\"x\", 1);\n    p1.setField(\"y\", 2);\n    Record p2 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType());\n    p2.setField(\"x\", 3);\n    p2.setField(\"y\", null);\n    record.setField(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.getField(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.getField(\"points\"), projected.getField(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    List<Record> points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.getField(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.getField(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.getField(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.getField(\"z\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2020-04-10 00:11:46","commitOrder":2,"curCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = GenericRecord.create(writeSchema);\n    record.setField(\"id\", 34L);\n    Record p1 = GenericRecord.create(writeSchema.findType(\"points.element\").asStructType());\n    p1.setField(\"x\", 1);\n    p1.setField(\"y\", 2);\n    Record p2 = GenericRecord.create(p1.struct());\n    p2.setField(\"x\", 3);\n    p2.setField(\"y\", null);\n    record.setField(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.getField(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.getField(\"points\"), projected.getField(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    List<Record> points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.getField(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should project null y\", projectedP2.getField(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.getField(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n    Assert.assertNull(\"Should project null z\", projectedP2.getField(\"z\"));\n\n    Schema zAdded = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get()),\n                Types.NestedField.optional(20, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"z_added\", writeSchema, zAdded, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.getField(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.getField(\"y\"));\n    Assert.assertNull(\"Should contain null z\", projectedP1.getField(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should project null y\", projectedP2.getField(\"y\"));\n    Assert.assertNull(\"Should contain null z\", projectedP2.getField(\"z\"));\n  }\n","date":"2020-04-10 00:11:46","endLine":565,"groupId":"10314","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testListOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/4f/955a7d1ee5947423ec86a729d29e93fba8bd8d.src","preCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record p1 = new Record(fromOption(\n        fromOption(record.getSchema().getField(\"points\").schema()).getElementType()));\n    p1.put(\"x\", 1);\n    p1.put(\"y\", 2);\n    Record p2 = new Record(p1.getSchema());\n    p2.put(\"x\", 3);\n    p2.put(\"y\", null);\n    record.put(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.get(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.get(\"points\"), projected.get(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    List<Record> points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should project null y\", projectedP2.get(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.get(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.get(\"y\"));\n    Assert.assertNull(\"Should project null z\", projectedP2.get(\"z\"));\n\n    Schema zAdded = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get()),\n                Types.NestedField.optional(20, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"z_added\", writeSchema, zAdded, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.get(\"points\"));\n    points = (List<Record>) projected.get(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.get(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.get(\"y\"));\n    Assert.assertNull(\"Should contain null z\", projectedP1.get(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.get(\"x\"));\n    Assert.assertNull(\"Should project null y\", projectedP2.get(\"y\"));\n    Assert.assertNull(\"Should contain null z\", projectedP2.get(\"z\"));\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = GenericRecord.create(writeSchema.asStruct());\n    record.setField(\"id\", 34L);\n    Record p1 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType());\n    p1.setField(\"x\", 1);\n    p1.setField(\"y\", 2);\n    Record p2 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType());\n    p2.setField(\"x\", 3);\n    p2.setField(\"y\", null);\n    record.setField(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.getField(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.getField(\"points\"), projected.getField(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    List<Record> points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.getField(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.getField(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.getField(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.getField(\"z\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":522,"groupId":"10314","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/54/b76d8c8647b7c4b03aeeaf6105db31e797b41e.src","preCode":"  public void testListOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.required(19, \"x\", Types.IntegerType.get()),\n                Types.NestedField.optional(18, \"y\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    Record record = GenericRecord.create(writeSchema.asStruct());\n    record.setField(\"id\", 34L);\n    Record p1 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType());\n    p1.setField(\"x\", 1);\n    p1.setField(\"y\", 2);\n    Record p2 = GenericRecord.create(writeSchema.findType(\"points\").asListType().elementType().asStructType());\n    p2.setField(\"x\", 3);\n    p2.setField(\"y\", null);\n    record.setField(\"points\", ImmutableList.of(p1, p2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.getField(\"id\"));\n    Assert.assertNull(\"Should not project points list\", projected.getField(\"points\"));\n\n    projected = writeAndRead(\"all_points\", writeSchema, writeSchema.select(\"points\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertEquals(\"Should project points list\",\n        record.getField(\"points\"), projected.getField(\"points\"));\n\n    projected = writeAndRead(\"x_only\", writeSchema, writeSchema.select(\"points.x\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    List<Record> points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    Record projectedP1 = points.get(0);\n    Assert.assertEquals(\"Should project x\", 1, (int) projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Record projectedP2 = points.get(1);\n    Assert.assertEquals(\"Should project x\", 3, (int) projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n\n    projected = writeAndRead(\"y_only\", writeSchema, writeSchema.select(\"points.y\"), record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertEquals(\"Should project y\", 2, (int) projectedP1.getField(\"y\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertEquals(\"Should project null y\", null, projectedP2.getField(\"y\"));\n\n    Schema yRenamed = new Schema(\n        Types.NestedField.optional(22, \"points\",\n            Types.ListType.ofOptional(21, Types.StructType.of(\n                Types.NestedField.optional(18, \"z\", Types.IntegerType.get())\n            ))\n        )\n    );\n\n    projected = writeAndRead(\"y_renamed\", writeSchema, yRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.getField(\"id\"));\n    Assert.assertNotNull(\"Should project points list\", projected.getField(\"points\"));\n    points = (List<Record>) projected.getField(\"points\");\n    Assert.assertEquals(\"Should read 2 points\", 2, points.size());\n    projectedP1 = points.get(0);\n    Assert.assertNull(\"Should not project x\", projectedP1.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP1.getField(\"y\"));\n    Assert.assertEquals(\"Should project z\", 2, (int) projectedP1.getField(\"z\"));\n    projectedP2 = points.get(1);\n    Assert.assertNull(\"Should not project x\", projectedP2.getField(\"x\"));\n    Assert.assertNull(\"Should not project y\", projectedP2.getField(\"y\"));\n    Assert.assertEquals(\"Should project null z\", null, projectedP2.getField(\"z\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"N"}],"commitId":"898c122118ba99847216c80ca7e0d12821133a8a","commitMessage":"@@@Spark: Add ORC to parameterized tests (#892)\n\n* Spark: Add ORC to parameterized tests.\n\n* Fix GenericsHelpers.\n\n* Build: Increase JVM heap size.\n\n* Fix review comments.\n\n* Revert \"Build: Increase JVM heap size.\"\n\nThis reverts commit 1f0996113923c5d279a5877a03af2db7b7e4e076.\n\n* Avoid keeping records in memory for TestDataFrameWrites.","date":"2020-04-10 00:11:46","modifiedFileCount":"6","status":"M","submitter":"Ryan Blue"}]
