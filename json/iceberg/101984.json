[{"authorTime":"2020-02-05 05:49:56","codes":[{"authorDate":"2020-02-05 05:49:56","commitOrder":1,"curCode":"  public void testWithCommitsBetweenCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .set(\"wap.id\", \"987654321\")\n        .stageOnly()\n        .commit();\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n    Snapshot wap2Snapshot = base.snapshots().get(2);\n\n    Assert.assertEquals(\"Should have three snapshots\", 3, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Should have second wap id in summary\", \"987654321\",\n        wap2Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Parent snapshot id should be same for second WAP snapshot\",\n        firstSnapshotId, wap2Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_D)\n        .commit();\n    base = readMetadata();\n\n    Assert.assertEquals(\"Should have four snapshots\", 4, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should carry over the parent snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Should contain manifests for two files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have five snapshots\", 5, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for three files\", 3,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 3,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap2Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have all the snapshots\", 6, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for four files\", 4,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 4,\n        base.snapshotLog().size());\n  }\n","date":"2020-02-05 05:49:56","endLine":458,"groupId":"1046","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithCommitsBetweenCherryPicking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f1/1363d0446606394d9e1e6243b992fc221d3488.src","preCode":"  public void testWithCommitsBetweenCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .set(\"wap.id\", \"987654321\")\n        .stageOnly()\n        .commit();\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n    Snapshot wap2Snapshot = base.snapshots().get(2);\n\n    Assert.assertEquals(\"Should have three snapshots\", 3, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Should have second wap id in summary\", \"987654321\",\n        wap2Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Parent snapshot id should be same for second WAP snapshot\",\n        firstSnapshotId, wap2Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_D)\n        .commit();\n    base = readMetadata();\n\n    Assert.assertEquals(\"Should have four snapshots\", 4, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should carry over the parent snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Should contain manifests for two files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have five snapshots\", 5, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for three files\", 3,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 3,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap2Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have all the snapshots\", 6, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for four files\", 4,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 4,\n        base.snapshotLog().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestWapWorkflow.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"B"},{"authorDate":"2020-02-05 05:49:56","commitOrder":1,"curCode":"  public void testWithCherryPickingWithCommitRetry() {\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n    \r\n\n    Assert.assertEquals(\"Should have three snapshots\", 2, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    \r\n    \r\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    \r\n    \r\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    base = readMetadata();\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.ops().failCommits(3);\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\n        \"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1,\n        base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for both files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should not contain redundant append due to retry\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should change to latest snapshot before commit\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n  }\n","date":"2020-02-05 05:49:56","endLine":526,"groupId":"1048","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithCherryPickingWithCommitRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f1/1363d0446606394d9e1e6243b992fc221d3488.src","preCode":"  public void testWithCherryPickingWithCommitRetry() {\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n    \r\n\n    Assert.assertEquals(\"Should have three snapshots\", 2, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    \r\n    \r\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    \r\n    \r\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    base = readMetadata();\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.ops().failCommits(3);\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\n        \"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1,\n        base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for both files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should not contain redundant append due to retry\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should change to latest snapshot before commit\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestWapWorkflow.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"B"}],"commitId":"a0ff334f2a9b0e1a429ccf69a85a12e8c255ed33","commitMessage":"@@@Add SnapshotManager to roll back and cherry-pick snapshots (#695)\n\n","date":"2020-02-05 05:49:56","modifiedFileCount":"10","status":"B","submitter":"Gautam"},{"authorTime":"2020-04-29 08:56:28","codes":[{"authorDate":"2020-02-05 05:49:56","commitOrder":2,"curCode":"  public void testWithCommitsBetweenCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .set(\"wap.id\", \"987654321\")\n        .stageOnly()\n        .commit();\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n    Snapshot wap2Snapshot = base.snapshots().get(2);\n\n    Assert.assertEquals(\"Should have three snapshots\", 3, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Should have second wap id in summary\", \"987654321\",\n        wap2Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Parent snapshot id should be same for second WAP snapshot\",\n        firstSnapshotId, wap2Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_D)\n        .commit();\n    base = readMetadata();\n\n    Assert.assertEquals(\"Should have four snapshots\", 4, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should carry over the parent snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Should contain manifests for two files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have five snapshots\", 5, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for three files\", 3,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 3,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap2Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have all the snapshots\", 6, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for four files\", 4,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 4,\n        base.snapshotLog().size());\n  }\n","date":"2020-02-05 05:49:56","endLine":458,"groupId":"1046","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithCommitsBetweenCherryPicking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f1/1363d0446606394d9e1e6243b992fc221d3488.src","preCode":"  public void testWithCommitsBetweenCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .set(\"wap.id\", \"987654321\")\n        .stageOnly()\n        .commit();\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n    Snapshot wap2Snapshot = base.snapshots().get(2);\n\n    Assert.assertEquals(\"Should have three snapshots\", 3, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Should have second wap id in summary\", \"987654321\",\n        wap2Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Parent snapshot id should be same for second WAP snapshot\",\n        firstSnapshotId, wap2Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_D)\n        .commit();\n    base = readMetadata();\n\n    Assert.assertEquals(\"Should have four snapshots\", 4, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should carry over the parent snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Should contain manifests for two files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have five snapshots\", 5, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for three files\", 3,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 3,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap2Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have all the snapshots\", 6, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for four files\", 4,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 4,\n        base.snapshotLog().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestWapWorkflow.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"N"},{"authorDate":"2020-04-29 08:56:28","commitOrder":2,"curCode":"  public void testWithCherryPickingWithCommitRetry() {\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n\n    Assert.assertEquals(\"Should have two snapshots\", 2, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    base = readMetadata();\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.ops().failCommits(3);\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\n        \"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1,\n        base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for both files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should not contain redundant append due to retry\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should change to latest snapshot before commit\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n  }\n","date":"2020-04-29 08:56:28","endLine":588,"groupId":"1048","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithCherryPickingWithCommitRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e4/aceaf714c51ce107decc872ea69ebfa44eaf29.src","preCode":"  public void testWithCherryPickingWithCommitRetry() {\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n    \r\n\n    Assert.assertEquals(\"Should have three snapshots\", 2, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    \r\n    \r\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    \r\n    \r\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    base = readMetadata();\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.ops().failCommits(3);\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\n        \"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1,\n        base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for both files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should not contain redundant append due to retry\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should change to latest snapshot before commit\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestWapWorkflow.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"M"}],"commitId":"f02ba32b368975f310438915f89b415ff6ff8cbc","commitMessage":"@@@Clean up TestWapWorkflow (#982)\n\n","date":"2020-04-29 08:56:28","modifiedFileCount":"1","status":"M","submitter":"Ratandeep Ratti"},{"authorTime":"2020-06-03 03:43:03","codes":[{"authorDate":"2020-06-03 03:43:03","commitOrder":3,"curCode":"  public void testWithCommitsBetweenCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .set(\"wap.id\", \"987654321\")\n        .stageOnly()\n        .commit();\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n    Snapshot wap2Snapshot = base.snapshots().get(2);\n\n    Assert.assertEquals(\"Should have three snapshots\", 3, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Should have second wap id in summary\", \"987654321\",\n        wap2Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Parent snapshot id should be same for second WAP snapshot\",\n        firstSnapshotId, wap2Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_D)\n        .commit();\n    base = readMetadata();\n\n    Assert.assertEquals(\"Should have four snapshots\", 4, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should carry over the parent snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Should contain manifests for two files\", 2,\n        base.currentSnapshot().allManifests().size());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have five snapshots\", 5, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for three files\", 3,\n        base.currentSnapshot().allManifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 3,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap2Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have all the snapshots\", 6, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for four files\", 4,\n        base.currentSnapshot().allManifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 4,\n        base.snapshotLog().size());\n  }\n","date":"2020-06-03 03:43:03","endLine":531,"groupId":"101984","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithCommitsBetweenCherryPicking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7a/7754f7d8a89333e9a36fc83bb77618d0d19d21.src","preCode":"  public void testWithCommitsBetweenCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .set(\"wap.id\", \"987654321\")\n        .stageOnly()\n        .commit();\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n    Snapshot wap2Snapshot = base.snapshots().get(2);\n\n    Assert.assertEquals(\"Should have three snapshots\", 3, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Should have second wap id in summary\", \"987654321\",\n        wap2Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Parent snapshot id should be same for second WAP snapshot\",\n        firstSnapshotId, wap2Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_D)\n        .commit();\n    base = readMetadata();\n\n    Assert.assertEquals(\"Should have four snapshots\", 4, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should carry over the parent snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Should contain manifests for two files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have five snapshots\", 5, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for three files\", 3,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 3,\n        base.snapshotLog().size());\n\n    \r\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.manageSnapshots().cherrypick(wap2Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\"Should have all the snapshots\", 6, base.snapshots().size());\n    Assert.assertEquals(\"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for four files\", 4,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should contain append from last commit\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should point to same snapshot\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 4,\n        base.snapshotLog().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestWapWorkflow.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":433,"status":"M"},{"authorDate":"2020-06-03 03:43:03","commitOrder":3,"curCode":"  public void testWithCherryPickingWithCommitRetry() {\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n\n    Assert.assertEquals(\"Should have two snapshots\", 2, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    base = readMetadata();\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.ops().failCommits(3);\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\n        \"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1,\n        base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for both files\", 2,\n        base.currentSnapshot().allManifests().size());\n    Assert.assertEquals(\"Should not contain redundant append due to retry\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should change to latest snapshot before commit\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n  }\n","date":"2020-06-03 03:43:03","endLine":588,"groupId":"101984","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithCherryPickingWithCommitRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7a/7754f7d8a89333e9a36fc83bb77618d0d19d21.src","preCode":"  public void testWithCherryPickingWithCommitRetry() {\n\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    TableMetadata base = readMetadata();\n    \r\n    Snapshot parentSnapshot = base.currentSnapshot();\n    long firstSnapshotId = parentSnapshot.snapshotId();\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_B)\n        .set(\"wap.id\", \"123456789\")\n        .stageOnly()\n        .commit();\n\n    base = readMetadata();\n\n    \r\n    Snapshot wap1Snapshot = base.snapshots().get(1);\n\n    Assert.assertEquals(\"Should have two snapshots\", 2, base.snapshots().size());\n    Assert.assertEquals(\"Should have first wap id in summary\", \"123456789\",\n        wap1Snapshot.summary().get(\"wap.id\"));\n    Assert.assertEquals(\"Current snapshot should be first commit's snapshot\",\n        firstSnapshotId, base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Parent snapshot id should be same for first WAP snapshot\",\n        firstSnapshotId, wap1Snapshot.parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 1,\n        base.snapshotLog().size());\n\n    \r\n    base = readMetadata();\n    parentSnapshot = base.currentSnapshot();\n    \r\n    table.ops().failCommits(3);\n    table.manageSnapshots().cherrypick(wap1Snapshot.snapshotId()).commit();\n    base = readMetadata();\n\n    \r\n    \r\n    Assert.assertEquals(\n        \"Current snapshot should be set to one after wap snapshot\",\n        parentSnapshot.snapshotId() + 1,\n        base.currentSnapshot().snapshotId());\n    Assert.assertEquals(\"Should contain manifests for both files\", 2,\n        base.currentSnapshot().manifests().size());\n    Assert.assertEquals(\"Should not contain redundant append due to retry\", 1,\n        Iterables.size(base.currentSnapshot().addedFiles()));\n    Assert.assertEquals(\"Parent snapshot id should change to latest snapshot before commit\",\n        parentSnapshot.snapshotId(), base.currentSnapshot().parentId().longValue());\n    Assert.assertEquals(\"Snapshot log should indicate number of snapshots committed\", 2,\n        base.snapshotLog().size());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestWapWorkflow.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"M"}],"commitId":"482f420141486f5b7b02bd62dc14cdb94b9a9cca","commitMessage":"@@@Split Snapshot.manifests into dataManifests and deleteManifests (#1080)\n\nThis replaces all calls to Snapshot.manifests with calls to one of 3 new methods:\n\n* `Snapshot.allManifests` returns both delete and data manifests\n* `Snapshot.deleteManifests` returns only delete manifests\n* `Snapshot.dataManifests` returns only data manifests\n\nExisting references mostly use either `allManifests` or `dataManifests`.  depending on the context. For example.  tests with assertions for the number of manifests use `allManifests` because the test cases should validate there are no new delete manifests.  but other tests that validate rewritten manifests are deleted use `dataManifests` because only data manifests are rewritten and deleted.\n\nThis tries to make minimal changes that preserve the current behavior. Operations are not updated to support delete manifests (rewrite still only rewrites data manifests).  but will carry through the list of delete manifests correctly.","date":"2020-06-03 03:43:03","modifiedFileCount":"46","status":"M","submitter":"Ryan Blue"}]
