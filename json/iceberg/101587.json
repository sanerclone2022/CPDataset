[{"authorTime":"2021-01-17 03:53:07","codes":[{"authorDate":"2021-01-17 03:53:07","commitOrder":1,"curCode":"  public void testIcebergUUIDObjectInspector() {\n    IcebergUUIDObjectInspector oi = IcebergUUIDObjectInspector.get();\n\n    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.STRING, oi.getPrimitiveCategory());\n\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo, oi.getTypeInfo());\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.getTypeName(), oi.getTypeName());\n\n    Assert.assertEquals(String.class, oi.getJavaPrimitiveClass());\n    Assert.assertEquals(Text.class, oi.getPrimitiveWritableClass());\n\n    Assert.assertNull(oi.copyObject(null));\n    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n    Assert.assertNull(oi.convert(null));\n\n    String uuid = UUID.randomUUID().toString();\n    Text text = new Text(uuid);\n\n    Assert.assertEquals(uuid, oi.getPrimitiveJavaObject(text));\n    Assert.assertEquals(text, oi.getPrimitiveWritableObject(uuid));\n    Assert.assertEquals(uuid, oi.convert(text));\n\n    Text copy = (Text) oi.copyObject(text);\n\n    Assert.assertEquals(text, copy);\n    Assert.assertNotSame(text, copy);\n\n    Assert.assertFalse(oi.preferWritable());\n  }\n","date":"2021-01-17 03:53:07","endLine":63,"groupId":"1490","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIcebergUUIDObjectInspector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/da/13b32a5d7133d84fcabedf8fe41dc3969bfed3.src","preCode":"  public void testIcebergUUIDObjectInspector() {\n    IcebergUUIDObjectInspector oi = IcebergUUIDObjectInspector.get();\n\n    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.STRING, oi.getPrimitiveCategory());\n\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo, oi.getTypeInfo());\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.getTypeName(), oi.getTypeName());\n\n    Assert.assertEquals(String.class, oi.getJavaPrimitiveClass());\n    Assert.assertEquals(Text.class, oi.getPrimitiveWritableClass());\n\n    Assert.assertNull(oi.copyObject(null));\n    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n    Assert.assertNull(oi.convert(null));\n\n    String uuid = UUID.randomUUID().toString();\n    Text text = new Text(uuid);\n\n    Assert.assertEquals(uuid, oi.getPrimitiveJavaObject(text));\n    Assert.assertEquals(text, oi.getPrimitiveWritableObject(uuid));\n    Assert.assertEquals(uuid, oi.convert(text));\n\n    Text copy = (Text) oi.copyObject(text);\n\n    Assert.assertEquals(text, copy);\n    Assert.assertNotSame(text, copy);\n\n    Assert.assertFalse(oi.preferWritable());\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergUUIDObjectInspector.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2021-01-17 03:53:07","commitOrder":1,"curCode":"  public void testIcebergTimeObjectInspector() {\n\n    IcebergTimeObjectInspector oi = IcebergTimeObjectInspector.get();\n\n    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.STRING, oi.getPrimitiveCategory());\n\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo, oi.getTypeInfo());\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.getTypeName(), oi.getTypeName());\n\n    Assert.assertEquals(String.class, oi.getJavaPrimitiveClass());\n    Assert.assertEquals(Text.class, oi.getPrimitiveWritableClass());\n\n    Assert.assertNull(oi.copyObject(null));\n    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n    Assert.assertNull(oi.convert(null));\n\n    String time = LocalTime.now().toString();\n    Text text = new Text(time);\n\n    Assert.assertEquals(time, oi.getPrimitiveJavaObject(text));\n    Assert.assertEquals(text, oi.getPrimitiveWritableObject(time));\n    Assert.assertEquals(time, oi.convert(text));\n\n    Text copy = (Text) oi.copyObject(text);\n\n    Assert.assertEquals(text, copy);\n    Assert.assertNotSame(text, copy);\n\n    Assert.assertFalse(oi.preferWritable());\n  }\n","date":"2021-01-17 03:53:07","endLine":64,"groupId":"1490","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIcebergTimeObjectInspector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/5c/a5fe68b3dcc4a9bb74eaa9e180d75d48fbad3c.src","preCode":"  public void testIcebergTimeObjectInspector() {\n\n    IcebergTimeObjectInspector oi = IcebergTimeObjectInspector.get();\n\n    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.STRING, oi.getPrimitiveCategory());\n\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo, oi.getTypeInfo());\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.getTypeName(), oi.getTypeName());\n\n    Assert.assertEquals(String.class, oi.getJavaPrimitiveClass());\n    Assert.assertEquals(Text.class, oi.getPrimitiveWritableClass());\n\n    Assert.assertNull(oi.copyObject(null));\n    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n    Assert.assertNull(oi.convert(null));\n\n    String time = LocalTime.now().toString();\n    Text text = new Text(time);\n\n    Assert.assertEquals(time, oi.getPrimitiveJavaObject(text));\n    Assert.assertEquals(text, oi.getPrimitiveWritableObject(time));\n    Assert.assertEquals(time, oi.convert(text));\n\n    Text copy = (Text) oi.copyObject(text);\n\n    Assert.assertEquals(text, copy);\n    Assert.assertNotSame(text, copy);\n\n    Assert.assertFalse(oi.preferWritable());\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimeObjectInspector.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"}],"commitId":"9ed321672cb8518616194fe6eae18bdfee5247af","commitMessage":"@@@Hive: Add inspectors for UUID.  Fixed.  and Time types (#2077)\n\n","date":"2021-01-17 03:53:07","modifiedFileCount":"7","status":"B","submitter":"L?szl? Pint?r"},{"authorTime":"2021-01-25 22:33:15","codes":[{"authorDate":"2021-01-25 22:33:15","commitOrder":2,"curCode":"  public void testIcebergUUIDObjectInspector() {\n    IcebergUUIDObjectInspector oi = IcebergUUIDObjectInspector.get();\n\n    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.STRING, oi.getPrimitiveCategory());\n\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo, oi.getTypeInfo());\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.getTypeName(), oi.getTypeName());\n\n    Assert.assertEquals(String.class, oi.getJavaPrimitiveClass());\n    Assert.assertEquals(Text.class, oi.getPrimitiveWritableClass());\n\n    Assert.assertNull(oi.copyObject(null));\n    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n    Assert.assertNull(oi.convert(null));\n\n    UUID uuid = UUID.randomUUID();\n    String uuidStr = uuid.toString();\n    Text text = new Text(uuidStr);\n\n    Assert.assertEquals(uuidStr, oi.getPrimitiveJavaObject(text));\n    Assert.assertEquals(text, oi.getPrimitiveWritableObject(uuidStr));\n    Assert.assertEquals(uuid, oi.convert(uuidStr));\n\n    Text copy = (Text) oi.copyObject(text);\n\n    Assert.assertEquals(text, copy);\n    Assert.assertNotSame(text, copy);\n\n    Assert.assertFalse(oi.preferWritable());\n  }\n","date":"2021-01-25 22:33:15","endLine":64,"groupId":"101587","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testIcebergUUIDObjectInspector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/cb/f55e3f38833216aaca4d7b4060a5fcad80fb7c.src","preCode":"  public void testIcebergUUIDObjectInspector() {\n    IcebergUUIDObjectInspector oi = IcebergUUIDObjectInspector.get();\n\n    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.STRING, oi.getPrimitiveCategory());\n\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo, oi.getTypeInfo());\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.getTypeName(), oi.getTypeName());\n\n    Assert.assertEquals(String.class, oi.getJavaPrimitiveClass());\n    Assert.assertEquals(Text.class, oi.getPrimitiveWritableClass());\n\n    Assert.assertNull(oi.copyObject(null));\n    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n    Assert.assertNull(oi.convert(null));\n\n    String uuid = UUID.randomUUID().toString();\n    Text text = new Text(uuid);\n\n    Assert.assertEquals(uuid, oi.getPrimitiveJavaObject(text));\n    Assert.assertEquals(text, oi.getPrimitiveWritableObject(uuid));\n    Assert.assertEquals(uuid, oi.convert(text));\n\n    Text copy = (Text) oi.copyObject(text);\n\n    Assert.assertEquals(text, copy);\n    Assert.assertNotSame(text, copy);\n\n    Assert.assertFalse(oi.preferWritable());\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergUUIDObjectInspector.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2021-01-25 22:33:15","commitOrder":2,"curCode":"  public void testIcebergTimeObjectInspector() {\n\n    IcebergTimeObjectInspector oi = IcebergTimeObjectInspector.get();\n\n    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.STRING, oi.getPrimitiveCategory());\n\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo, oi.getTypeInfo());\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.getTypeName(), oi.getTypeName());\n\n    Assert.assertEquals(String.class, oi.getJavaPrimitiveClass());\n    Assert.assertEquals(Text.class, oi.getPrimitiveWritableClass());\n\n    Assert.assertNull(oi.copyObject(null));\n    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n    Assert.assertNull(oi.convert(null));\n\n    LocalTime localTime = LocalTime.now();\n    String time = localTime.toString();\n    Text text = new Text(time);\n\n    Assert.assertEquals(time, oi.getPrimitiveJavaObject(text));\n    Assert.assertEquals(text, oi.getPrimitiveWritableObject(time));\n    Assert.assertEquals(localTime, oi.convert(time));\n\n    Text copy = (Text) oi.copyObject(text);\n\n    Assert.assertEquals(text, copy);\n    Assert.assertNotSame(text, copy);\n\n    Assert.assertFalse(oi.preferWritable());\n  }\n","date":"2021-01-25 22:33:15","endLine":65,"groupId":"101587","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testIcebergTimeObjectInspector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c6/35920ed4ca45108a6ebf4998a720b5a17a6218.src","preCode":"  public void testIcebergTimeObjectInspector() {\n\n    IcebergTimeObjectInspector oi = IcebergTimeObjectInspector.get();\n\n    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.STRING, oi.getPrimitiveCategory());\n\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo, oi.getTypeInfo());\n    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.getTypeName(), oi.getTypeName());\n\n    Assert.assertEquals(String.class, oi.getJavaPrimitiveClass());\n    Assert.assertEquals(Text.class, oi.getPrimitiveWritableClass());\n\n    Assert.assertNull(oi.copyObject(null));\n    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n    Assert.assertNull(oi.convert(null));\n\n    String time = LocalTime.now().toString();\n    Text text = new Text(time);\n\n    Assert.assertEquals(time, oi.getPrimitiveJavaObject(text));\n    Assert.assertEquals(text, oi.getPrimitiveWritableObject(time));\n    Assert.assertEquals(time, oi.convert(text));\n\n    Text copy = (Text) oi.copyObject(text);\n\n    Assert.assertEquals(text, copy);\n    Assert.assertNotSame(text, copy);\n\n    Assert.assertFalse(oi.preferWritable());\n  }\n","realPath":"mr/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimeObjectInspector.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"5ed15d061d07874c8d11bcbad269e4b67e26d83d","commitMessage":"@@@Hive: Fix writing of Date.  Decimal.  Time and UUID types. (#2126)\n\n","date":"2021-01-25 22:33:15","modifiedFileCount":"8","status":"M","submitter":"L?szl? Pint?r"}]
