[{"authorTime":"2021-06-22 05:48:49","codes":[{"authorDate":"2020-09-04 02:04:52","commitOrder":2,"curCode":"  public void testCreateTableWithCaching() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n    ImmutableMap<String, String> properties = ImmutableMap.of(\"key1\", \"value1\", \"key2\", \"value2\");\n    Catalog cachingCatalog = CachingCatalog.wrap(catalog);\n\n    try {\n      Table table = cachingCatalog.createTable(tableIdent, schema, spec, location, properties);\n\n      Assert.assertEquals(location, table.location());\n      Assert.assertEquals(2, table.schema().columns().size());\n      Assert.assertEquals(1, table.spec().fields().size());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      cachingCatalog.dropTable(tableIdent);\n    }\n  }\n","date":"2020-09-04 02:04:52","endLine":114,"groupId":"1798","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/06/1c43783c6044f86b80e3cab81f6c8736221abf.src","preCode":"  public void testCreateTableWithCaching() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n    ImmutableMap<String, String> properties = ImmutableMap.of(\"key1\", \"value1\", \"key2\", \"value2\");\n    Catalog cachingCatalog = CachingCatalog.wrap(catalog);\n\n    try {\n      Table table = cachingCatalog.createTable(tableIdent, schema, spec, location, properties);\n\n      Assert.assertEquals(location, table.location());\n      Assert.assertEquals(2, table.schema().columns().size());\n      Assert.assertEquals(1, table.spec().fields().size());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      cachingCatalog.dropTable(tableIdent);\n    }\n  }\n","realPath":"hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"NB"},{"authorDate":"2021-06-22 05:48:49","commitOrder":2,"curCode":"  public void testReplaceTxnBuilder() {\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n\n    final DataFile fileA = DataFiles.builder(PARTITION_SPEC)\n        .withPath(\"/path/to/data-a.parquet\")\n        .withFileSizeInBytes(0)\n        .withPartitionPath(\"data_bucket=0\") \r\n        .withRecordCount(2) \r\n        .build();\n\n    Transaction createTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(PARTITION_SPEC)\n        .withProperty(\"key1\", \"value1\")\n        .createOrReplaceTransaction();\n\n    createTxn.newAppend()\n        .appendFile(fileA)\n        .commit();\n\n    createTxn.commitTransaction();\n\n    Table table = catalog.loadTable(tableIdent);\n    Assert.assertNotNull(table.currentSnapshot());\n\n    Transaction replaceTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withProperty(\"key2\", \"value2\")\n        .replaceTransaction();\n    replaceTxn.commitTransaction();\n\n    table = catalog.loadTable(tableIdent);\n    Assert.assertNull(table.currentSnapshot());\n    Assert.assertTrue(table.spec().isUnpartitioned());\n    Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n    Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n  }\n","date":"2021-06-22 05:48:49","endLine":201,"groupId":"4079","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReplaceTxnBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/52/92e3146ec7b62ace8bae2b79228ba020929c5b.src","preCode":"  public void testReplaceTxnBuilder() {\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n\n    final DataFile fileA = DataFiles.builder(PARTITION_SPEC)\n        .withPath(\"/path/to/data-a.parquet\")\n        .withFileSizeInBytes(0)\n        .withPartitionPath(\"data_bucket=0\") \r\n        .withRecordCount(2) \r\n        .build();\n\n    Transaction createTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(PARTITION_SPEC)\n        .withProperty(\"key1\", \"value1\")\n        .createOrReplaceTransaction();\n\n    createTxn.newAppend()\n        .appendFile(fileA)\n        .commit();\n\n    createTxn.commitTransaction();\n\n    Table table = catalog.loadTable(tableIdent);\n    Assert.assertNotNull(table.currentSnapshot());\n\n    Transaction replaceTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withProperty(\"key2\", \"value2\")\n        .replaceTransaction();\n    replaceTxn.commitTransaction();\n\n    table = catalog.loadTable(tableIdent);\n    Assert.assertNull(table.currentSnapshot());\n    Assert.assertTrue(table.spec().isUnpartitioned());\n    Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n    Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"}],"commitId":"0c784fae03e792d98aee46f4c71da5e180611f10","commitMessage":"@@@Core: Add JDBC catalog implementation (#1870)\n\n","date":"2021-06-22 05:48:49","modifiedFileCount":"2","status":"M","submitter":"ismail simsek"},{"authorTime":"2021-08-03 22:39:58","codes":[{"authorDate":"2020-09-04 02:04:52","commitOrder":3,"curCode":"  public void testCreateTableWithCaching() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n    ImmutableMap<String, String> properties = ImmutableMap.of(\"key1\", \"value1\", \"key2\", \"value2\");\n    Catalog cachingCatalog = CachingCatalog.wrap(catalog);\n\n    try {\n      Table table = cachingCatalog.createTable(tableIdent, schema, spec, location, properties);\n\n      Assert.assertEquals(location, table.location());\n      Assert.assertEquals(2, table.schema().columns().size());\n      Assert.assertEquals(1, table.spec().fields().size());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      cachingCatalog.dropTable(tableIdent);\n    }\n  }\n","date":"2020-09-04 02:04:52","endLine":114,"groupId":"10909","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableWithCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/06/1c43783c6044f86b80e3cab81f6c8736221abf.src","preCode":"  public void testCreateTableWithCaching() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n    ImmutableMap<String, String> properties = ImmutableMap.of(\"key1\", \"value1\", \"key2\", \"value2\");\n    Catalog cachingCatalog = CachingCatalog.wrap(catalog);\n\n    try {\n      Table table = cachingCatalog.createTable(tableIdent, schema, spec, location, properties);\n\n      Assert.assertEquals(location, table.location());\n      Assert.assertEquals(2, table.schema().columns().size());\n      Assert.assertEquals(1, table.spec().fields().size());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      cachingCatalog.dropTable(tableIdent);\n    }\n  }\n","realPath":"hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2021-08-03 22:39:58","commitOrder":3,"curCode":"  public void testReplaceTxnBuilder() {\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n\n    final DataFile fileA = DataFiles.builder(PARTITION_SPEC)\n        .withPath(\"/path/to/data-a.parquet\")\n        .withFileSizeInBytes(0)\n        .withPartitionPath(\"data_bucket=0\") \r\n        .withRecordCount(2) \r\n        .build();\n\n    Transaction createTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(PARTITION_SPEC)\n        .withProperty(\"key1\", \"value1\")\n        .createOrReplaceTransaction();\n\n    createTxn.newAppend()\n        .appendFile(fileA)\n        .commit();\n\n    createTxn.commitTransaction();\n\n    Table table = catalog.loadTable(tableIdent);\n    Assert.assertNotNull(table.currentSnapshot());\n\n    Transaction replaceTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withProperty(\"key2\", \"value2\")\n        .replaceTransaction();\n    replaceTxn.commitTransaction();\n\n    table = catalog.loadTable(tableIdent);\n    Assert.assertNull(table.currentSnapshot());\n    PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema())\n        .alwaysNull(\"data\", \"data_bucket\")\n        .withSpecId(1)\n        .build();\n    Assert.assertEquals(\"Table should have a spec with one void field\",\n        v1Expected, table.spec());\n\n    Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n    Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n  }\n","date":"2021-08-03 22:39:58","endLine":207,"groupId":"10909","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testReplaceTxnBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7a/71b0f134ab301f18f75b4d3d041151d55b9ff0.src","preCode":"  public void testReplaceTxnBuilder() {\n    TableIdentifier tableIdent = TableIdentifier.of(\"db\", \"ns1\", \"ns2\", \"tbl\");\n\n    final DataFile fileA = DataFiles.builder(PARTITION_SPEC)\n        .withPath(\"/path/to/data-a.parquet\")\n        .withFileSizeInBytes(0)\n        .withPartitionPath(\"data_bucket=0\") \r\n        .withRecordCount(2) \r\n        .build();\n\n    Transaction createTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withPartitionSpec(PARTITION_SPEC)\n        .withProperty(\"key1\", \"value1\")\n        .createOrReplaceTransaction();\n\n    createTxn.newAppend()\n        .appendFile(fileA)\n        .commit();\n\n    createTxn.commitTransaction();\n\n    Table table = catalog.loadTable(tableIdent);\n    Assert.assertNotNull(table.currentSnapshot());\n\n    Transaction replaceTxn = catalog.buildTable(tableIdent, SCHEMA)\n        .withProperty(\"key2\", \"value2\")\n        .replaceTransaction();\n    replaceTxn.commitTransaction();\n\n    table = catalog.loadTable(tableIdent);\n    Assert.assertNull(table.currentSnapshot());\n    Assert.assertTrue(table.spec().isUnpartitioned());\n    Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n    Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"a42a546a5e0b32fc5634626e28d10f0c29f838fe","commitMessage":"@@@Core: Fix partition field IDs in table replacement (#2906)\n\nCo-authored-by: Jun He <jun-he@users.noreply.github.com>","date":"2021-08-03 22:39:58","modifiedFileCount":"7","status":"M","submitter":"Ryan Blue"}]
