[{"authorTime":"2020-11-20 02:23:35","codes":[{"authorDate":"2020-11-20 02:23:35","commitOrder":1,"curCode":"  public void listTables_pagination() {\n    AtomicInteger counter = new AtomicInteger(10);\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Mockito.doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (counter.decrementAndGet() > 0) {\n          return GetTablesResponse.builder()\n              .tableList(\n                  Table.builder().databaseName(\"db1\").name(\n                      UUID.randomUUID().toString().replace(\"-\", \"\")).build()\n              )\n              .nextToken(\"token\")\n              .build();\n        } else {\n          return GetTablesResponse.builder()\n              .tableList(Table.builder().databaseName(\"db1\").name(\"tb1\").build())\n              .build();\n        }\n      }\n    }).when(glue).getTables(Mockito.any(GetTablesRequest.class));\n    Assert.assertEquals(10, glueCatalog.listTables(Namespace.of(\"db1\")).size());\n  }\n","date":"2020-11-20 02:23:35","endLine":161,"groupId":"282","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listTables_pagination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a8/0b168f77bb5bfe9b297ee0c51b74cfbb323a36.src","preCode":"  public void listTables_pagination() {\n    AtomicInteger counter = new AtomicInteger(10);\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Mockito.doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (counter.decrementAndGet() > 0) {\n          return GetTablesResponse.builder()\n              .tableList(\n                  Table.builder().databaseName(\"db1\").name(\n                      UUID.randomUUID().toString().replace(\"-\", \"\")).build()\n              )\n              .nextToken(\"token\")\n              .build();\n        } else {\n          return GetTablesResponse.builder()\n              .tableList(Table.builder().databaseName(\"db1\").name(\"tb1\").build())\n              .build();\n        }\n      }\n    }).when(glue).getTables(Mockito.any(GetTablesRequest.class));\n    Assert.assertEquals(10, glueCatalog.listTables(Namespace.of(\"db1\")).size());\n  }\n","realPath":"aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2020-11-20 02:23:35","commitOrder":1,"curCode":"  public void listNamespaces_pagination() {\n    AtomicInteger counter = new AtomicInteger(10);\n    Mockito.doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (counter.decrementAndGet() > 0) {\n          return GetDatabasesResponse.builder()\n              .databaseList(\n                  Database.builder().name(UUID.randomUUID().toString().replace(\"-\", \"\")).build()\n              )\n              .nextToken(\"token\")\n              .build();\n        } else {\n          return GetDatabasesResponse.builder()\n              .databaseList(Database.builder().name(\"db\").build())\n              .build();\n        }\n      }\n    }).when(glue).getDatabases(Mockito.any(GetDatabasesRequest.class));\n    Assert.assertEquals(10, glueCatalog.listNamespaces().size());\n  }\n","date":"2020-11-20 02:23:35","endLine":266,"groupId":"282","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listNamespaces_pagination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a8/0b168f77bb5bfe9b297ee0c51b74cfbb323a36.src","preCode":"  public void listNamespaces_pagination() {\n    AtomicInteger counter = new AtomicInteger(10);\n    Mockito.doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (counter.decrementAndGet() > 0) {\n          return GetDatabasesResponse.builder()\n              .databaseList(\n                  Database.builder().name(UUID.randomUUID().toString().replace(\"-\", \"\")).build()\n              )\n              .nextToken(\"token\")\n              .build();\n        } else {\n          return GetDatabasesResponse.builder()\n              .databaseList(Database.builder().name(\"db\").build())\n              .build();\n        }\n      }\n    }).when(glue).getDatabases(Mockito.any(GetDatabasesRequest.class));\n    Assert.assertEquals(10, glueCatalog.listNamespaces().size());\n  }\n","realPath":"aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"B"}],"commitId":"0beb7d663694d78e6edecb241a008e9834c82d8c","commitMessage":"@@@AWS: Add Glue catalog and table operations (#1633)\n\n","date":"2020-11-20 02:23:35","modifiedFileCount":"3","status":"B","submitter":"jackye1995"},{"authorTime":"2020-11-20 02:23:35","codes":[{"authorDate":"2021-03-04 08:23:29","commitOrder":2,"curCode":"  public void listTables_pagination() {\n    AtomicInteger counter = new AtomicInteger(10);\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Mockito.doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (counter.decrementAndGet() > 0) {\n          return GetTablesResponse.builder()\n              .tableList(\n                  Table.builder()\n                      .databaseName(\"db1\")\n                      .name(UUID.randomUUID().toString().replace(\"-\", \"\"))\n                      .parameters(ImmutableMap.of(\n                          BaseMetastoreTableOperations.TABLE_TYPE_PROP,\n                          BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE\n                      ))\n                      .build()\n              )\n              .nextToken(\"token\")\n              .build();\n        } else {\n          return GetTablesResponse.builder()\n              .tableList(Table.builder().databaseName(\"db1\").name(\"tb1\").parameters(ImmutableMap.of(\n                  BaseMetastoreTableOperations.TABLE_TYPE_PROP,\n                  BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE\n              )).build())\n              .build();\n        }\n      }\n    }).when(glue).getTables(Mockito.any(GetTablesRequest.class));\n    Assert.assertEquals(10, glueCatalog.listTables(Namespace.of(\"db1\")).size());\n  }\n","date":"2021-03-04 08:23:29","endLine":195,"groupId":"101647","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"listTables_pagination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/66/9a73e30b5edc218a6d92991e4e34e36c35659e.src","preCode":"  public void listTables_pagination() {\n    AtomicInteger counter = new AtomicInteger(10);\n    Mockito.doReturn(GetDatabaseResponse.builder()\n        .database(Database.builder().name(\"db1\").build()).build())\n        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n    Mockito.doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (counter.decrementAndGet() > 0) {\n          return GetTablesResponse.builder()\n              .tableList(\n                  Table.builder().databaseName(\"db1\").name(\n                      UUID.randomUUID().toString().replace(\"-\", \"\")).build()\n              )\n              .nextToken(\"token\")\n              .build();\n        } else {\n          return GetTablesResponse.builder()\n              .tableList(Table.builder().databaseName(\"db1\").name(\"tb1\").build())\n              .build();\n        }\n      }\n    }).when(glue).getTables(Mockito.any(GetTablesRequest.class));\n    Assert.assertEquals(10, glueCatalog.listTables(Namespace.of(\"db1\")).size());\n  }\n","realPath":"aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2020-11-20 02:23:35","commitOrder":2,"curCode":"  public void listNamespaces_pagination() {\n    AtomicInteger counter = new AtomicInteger(10);\n    Mockito.doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (counter.decrementAndGet() > 0) {\n          return GetDatabasesResponse.builder()\n              .databaseList(\n                  Database.builder().name(UUID.randomUUID().toString().replace(\"-\", \"\")).build()\n              )\n              .nextToken(\"token\")\n              .build();\n        } else {\n          return GetDatabasesResponse.builder()\n              .databaseList(Database.builder().name(\"db\").build())\n              .build();\n        }\n      }\n    }).when(glue).getDatabases(Mockito.any(GetDatabasesRequest.class));\n    Assert.assertEquals(10, glueCatalog.listNamespaces().size());\n  }\n","date":"2020-11-20 02:23:35","endLine":266,"groupId":"101647","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listNamespaces_pagination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a8/0b168f77bb5bfe9b297ee0c51b74cfbb323a36.src","preCode":"  public void listNamespaces_pagination() {\n    AtomicInteger counter = new AtomicInteger(10);\n    Mockito.doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (counter.decrementAndGet() > 0) {\n          return GetDatabasesResponse.builder()\n              .databaseList(\n                  Database.builder().name(UUID.randomUUID().toString().replace(\"-\", \"\")).build()\n              )\n              .nextToken(\"token\")\n              .build();\n        } else {\n          return GetDatabasesResponse.builder()\n              .databaseList(Database.builder().name(\"db\").build())\n              .build();\n        }\n      }\n    }).when(glue).getDatabases(Mockito.any(GetDatabasesRequest.class));\n    Assert.assertEquals(10, glueCatalog.listNamespaces().size());\n  }\n","realPath":"aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"}],"commitId":"ef6de31a805783bce87efb51d2e5843c192e6822","commitMessage":"@@@AWS: Do not list non-iceberg table in GlueCatalog (#2267)\n\n","date":"2021-03-04 08:23:29","modifiedFileCount":"3","status":"M","submitter":"Jack Ye"}]
