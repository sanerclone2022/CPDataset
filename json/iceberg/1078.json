[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"locations\").schema())\n            .getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.get(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":410,"groupId":"432","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/d18d0ce9108879420cd44e6c3ec52aa1390fe6.src","preCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"locations\").schema())\n            .getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.get(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"locations\").schema())\n            .getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.get(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n  }\n","date":"2019-03-21 07:25:05","endLine":410,"groupId":"432","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/d18d0ce9108879420cd44e6c3ec52aa1390fe6.src","preCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"locations\").schema())\n            .getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.get(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2021-07-13 23:59:22","codes":[{"authorDate":"2021-07-13 23:59:22","commitOrder":2,"curCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"locations\").schema())\n            .getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    TestHelpers.assertEmptyAvroField(projected, \"locations\");\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    TestHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    TestHelpers.assertEmptyAvroField(projected, \"id\");\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    TestHelpers.assertEmptyAvroField(projectedL1, \"long\");\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    TestHelpers.assertEmptyAvroField(projectedL2, \"long\");\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    TestHelpers.assertEmptyAvroField(projected, \"id\");\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    TestHelpers.assertEmptyAvroField(projectedL1, \"lat\");\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    TestHelpers.assertEmptyAvroField(projectedL2, \"lat\");\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    TestHelpers.assertEmptyAvroField(projected, \"id\");\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    TestHelpers.assertEmptyAvroField(projectedL1, \"lat\");\n    TestHelpers.assertEmptyAvroField(projectedL1, \"long\");\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    TestHelpers.assertEmptyAvroField(projectedL2, \"lat\");\n    TestHelpers.assertEmptyAvroField(projectedL2, \"long\");\n  }\n","date":"2021-07-13 23:59:22","endLine":410,"groupId":"1078","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testMapOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/68/5d4ee88f195a823aa551f19ac18900355fe9bc.src","preCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"locations\").schema())\n            .getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.get(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n  }\n","realPath":"parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2021-07-13 23:59:22","commitOrder":2,"curCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"locations\").schema())\n            .getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    AssertHelpers.assertEmptyAvroField(projected, \"locations\");\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    AssertHelpers.assertEmptyAvroField(projectedL1, \"long\");\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    AssertHelpers.assertEmptyAvroField(projectedL2, \"y\");\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    AssertHelpers.assertEmptyAvroField(projectedL1, \"lat\");\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    AssertHelpers.assertEmptyAvroField(projectedL2, \"lat\");\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    AssertHelpers.assertEmptyAvroField(projectedL1, \"lat\");\n    AssertHelpers.assertEmptyAvroField(projectedL1, \"long\");\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    AssertHelpers.assertEmptyAvroField(projectedL2, \"lat\");\n    AssertHelpers.assertEmptyAvroField(projectedL2, \"long\");\n  }\n","date":"2021-07-13 23:59:22","endLine":410,"groupId":"1078","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testMapOfStructsProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/e7/1034483bdc072c811dba91af1923893d561906.src","preCode":"  public void testMapOfStructsProjection() throws IOException {\n    Schema writeSchema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"lat\", Types.FloatType.get()),\n                Types.NestedField.required(2, \"long\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(writeSchema, \"table\"));\n    record.put(\"id\", 34L);\n    Record l1 = new Record(AvroSchemaUtil.fromOption(\n        AvroSchemaUtil.fromOption(record.getSchema().getField(\"locations\").schema())\n            .getValueType()));\n    l1.put(\"lat\", 53.992811f);\n    l1.put(\"long\", -1.542616f);\n    Record l2 = new Record(l1.getSchema());\n    l2.put(\"lat\", 52.995143f);\n    l2.put(\"long\", -1.539054f);\n    record.put(\"locations\", ImmutableMap.of(\"L1\", l1, \"L2\", l2));\n\n    Schema idOnly = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"id_only\", writeSchema, idOnly, record);\n    Assert.assertEquals(\"Should contain the correct id value\", 34L, (long) projected.get(\"id\"));\n    Assert.assertNull(\"Should not project locations map\", projected.get(\"locations\"));\n\n    projected = writeAndRead(\"all_locations\", writeSchema, writeSchema.select(\"locations\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Assert.assertEquals(\"Should project locations map\",\n        record.get(\"locations\"), toStringMap((Map) projected.get(\"locations\")));\n\n    projected = writeAndRead(\"lat_only\",\n        writeSchema, writeSchema.select(\"locations.lat\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    Map<String, ?> locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    Record projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain lat\",\n        53.992811f, (float) projectedL1.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    Record projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain lat\",\n        52.995143f, (float) projectedL2.get(\"lat\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n\n    projected = writeAndRead(\"long_only\",\n        writeSchema, writeSchema.select(\"locations.long\"), record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertEquals(\"L1 should contain long\",\n        -1.542616f, (float) projectedL1.get(\"long\"), 0.000001);\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertEquals(\"L2 should contain long\",\n        -1.539054f, (float) projectedL2.get(\"long\"), 0.000001);\n\n    Schema latitiudeRenamed = new Schema(\n        Types.NestedField.optional(5, \"locations\", Types.MapType.ofOptional(6, 7,\n            Types.StringType.get(),\n            Types.StructType.of(\n                Types.NestedField.required(1, \"latitude\", Types.FloatType.get())\n            )\n        ))\n    );\n\n    projected = writeAndRead(\"latitude_renamed\", writeSchema, latitiudeRenamed, record);\n    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n    locations = toStringMap((Map) projected.get(\"locations\"));\n    Assert.assertNotNull(\"Should project locations map\", locations);\n    Assert.assertEquals(\"Should contain L1 and L2\",\n        Sets.newHashSet(\"L1\", \"L2\"), locations.keySet());\n    projectedL1 = (Record) locations.get(\"L1\");\n    Assert.assertNotNull(\"L1 should not be null\", projectedL1);\n    Assert.assertEquals(\"L1 should contain latitude\",\n        53.992811f, (float) projectedL1.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L1 should not contain lat\", projectedL1.get(\"lat\"));\n    Assert.assertNull(\"L1 should not contain long\", projectedL1.get(\"long\"));\n    projectedL2 = (Record) locations.get(\"L2\");\n    Assert.assertNotNull(\"L2 should not be null\", projectedL2);\n    Assert.assertEquals(\"L2 should contain latitude\",\n        52.995143f, (float) projectedL2.get(\"latitude\"), 0.000001);\n    Assert.assertNull(\"L2 should not contain lat\", projectedL2.get(\"lat\"));\n    Assert.assertNull(\"L2 should not contain long\", projectedL2.get(\"long\"));\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"}],"commitId":"b3fb81a19e9632608b2bd4cdede4bbfcbd26bc8e","commitMessage":"@@@Core: Use Avro 1.10.1 (#1648)\n\nCo-authored-by: Fokko Driesprong <fdriesprong@ebay.com>","date":"2021-07-13 23:59:22","modifiedFileCount":"6","status":"M","submitter":"Fokko Driesprong"}]
