[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public static void assertEqualsSafe(Types.StructType struct, Record rec, Row row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.get(i);\n\n      assertEqualsSafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":75,"groupId":"116","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEqualsSafe","params":"(Types.StructTypestruct@Recordrec@Rowrow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a7/60455ba076b1aec03ff58ae18586130f09e552.src","preCode":"  public static void assertEqualsSafe(Types.StructType struct, Record rec, Row row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.get(i);\n\n      assertEqualsSafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":202,"groupId":"116","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEqualsUnsafe","params":"(Types.StructTypestruct@Recordrec@InternalRowrow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a7/60455ba076b1aec03ff58ae18586130f09e552.src","preCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2020-06-16 06:16:19","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public static void assertEqualsSafe(Types.StructType struct, Record rec, Row row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.get(i);\n\n      assertEqualsSafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":75,"groupId":"12265","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertEqualsSafe","params":"(Types.StructTypestruct@Recordrec@Rowrow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a7/60455ba076b1aec03ff58ae18586130f09e552.src","preCode":"  public static void assertEqualsSafe(Types.StructType struct, Record rec, Row row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.get(i);\n\n      assertEqualsSafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2020-06-16 06:16:19","commitOrder":2,"curCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.isNullAt(i) ? null : row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","date":"2020-06-16 06:16:19","endLine":233,"groupId":"12265","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertEqualsUnsafe","params":"(Types.StructTypestruct@Recordrec@InternalRowrow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f6/03757c2c44f8039610a085288f86650147a1f5.src","preCode":"  public static void assertEqualsUnsafe(Types.StructType struct, Record rec, InternalRow row) {\n    List<Types.NestedField> fields = struct.fields();\n    for (int i = 0; i < fields.size(); i += 1) {\n      Type fieldType = fields.get(i).type();\n\n      Object expectedValue = rec.get(i);\n      Object actualValue = row.get(i, convert(fieldType));\n\n      assertEqualsUnsafe(fieldType, expectedValue, actualValue);\n    }\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"ffdcf09027e09460b7d7505e65aea119107934a3","commitMessage":"@@@Spark: Support vectorized Parquet reads for flat projections (#828)\n\n","date":"2020-06-16 06:16:19","modifiedFileCount":"21","status":"M","submitter":"Samarth Jain"}]
