[{"authorTime":"2020-06-03 06:39:25","codes":[{"authorDate":"2020-06-03 06:39:25","commitOrder":1,"curCode":"  public void testCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = snap1.manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend()\n        .appendFile(FILE_B)\n        .stageOnly()\n        .commit();\n\n    Snapshot snap2 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    \r\n    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, stagedSnapshot.sequenceNumber());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Snapshot snap3 = table.currentSnapshot();\n    long commitId3 = snap3.snapshotId();\n    manifestFile = snap3.manifests().get(0);\n    validateManifest(manifestFile, seqs(3), ids(commitId3), files(FILE_C));\n    validateSnapshot(snap2, snap3, 3, FILE_C);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 3\", 3, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 3\", 3, readMetadata().lastSequenceNumber());\n\n    \r\n    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n    Snapshot snap4 = table.currentSnapshot();\n    long commitId4 = snap4.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateManifest(manifestFile, seqs(4), ids(commitId4), files(FILE_B));\n    validateSnapshot(snap3, snap4, 4, FILE_B);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 4\", 4, snap4.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 4\", 4, readMetadata().lastSequenceNumber());\n  }\n","date":"2020-06-03 06:39:25","endLine":413,"groupId":"4830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCherryPicking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7b/e092a1aba8d03ccbdbbb3aef755a4e2ded33bf.src","preCode":"  public void testCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = snap1.manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend()\n        .appendFile(FILE_B)\n        .stageOnly()\n        .commit();\n\n    Snapshot snap2 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    \r\n    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, stagedSnapshot.sequenceNumber());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Snapshot snap3 = table.currentSnapshot();\n    long commitId3 = snap3.snapshotId();\n    manifestFile = snap3.manifests().get(0);\n    validateManifest(manifestFile, seqs(3), ids(commitId3), files(FILE_C));\n    validateSnapshot(snap2, snap3, 3, FILE_C);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 3\", 3, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 3\", 3, readMetadata().lastSequenceNumber());\n\n    \r\n    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n    Snapshot snap4 = table.currentSnapshot();\n    long commitId4 = snap4.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateManifest(manifestFile, seqs(4), ids(commitId4), files(FILE_B));\n    validateSnapshot(snap3, snap4, 4, FILE_B);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 4\", 4, snap4.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 4\", 4, readMetadata().lastSequenceNumber());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"},{"authorDate":"2020-06-03 06:39:25","commitOrder":1,"curCode":"  public void testCherryPickFastForward() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = snap1.manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend()\n        .appendFile(FILE_B)\n        .stageOnly()\n        .commit();\n    Snapshot snap2 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    \r\n    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, stagedSnapshot.sequenceNumber());\n\n    \r\n    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n    Snapshot snap3 = table.currentSnapshot();\n    long commitId3 = snap3.snapshotId();\n    manifestFile = snap3.manifests().get(0);\n    validateManifest(manifestFile, seqs(2), ids(commitId3), files(FILE_B));\n    validateSnapshot(snap2, snap3, 2, FILE_B);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n  }\n","date":"2020-06-03 06:39:25","endLine":449,"groupId":"4830","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCherryPickFastForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7b/e092a1aba8d03ccbdbbb3aef755a4e2ded33bf.src","preCode":"  public void testCherryPickFastForward() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = snap1.manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend()\n        .appendFile(FILE_B)\n        .stageOnly()\n        .commit();\n    Snapshot snap2 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    \r\n    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, stagedSnapshot.sequenceNumber());\n\n    \r\n    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n    Snapshot snap3 = table.currentSnapshot();\n    long commitId3 = snap3.snapshotId();\n    manifestFile = snap3.manifests().get(0);\n    validateManifest(manifestFile, seqs(2), ids(commitId3), files(FILE_B));\n    validateSnapshot(snap2, snap3, 2, FILE_B);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"B"}],"commitId":"e1399fd4c78a4d06e7840afc9aa9a3d45ca548d5","commitMessage":"@@@Add unit tests for sequence numbers (#974)\n\n","date":"2020-06-03 06:39:25","modifiedFileCount":"4","status":"B","submitter":"Chen Junjie"},{"authorTime":"2020-06-03 09:11:14","codes":[{"authorDate":"2020-06-03 09:11:14","commitOrder":2,"curCode":"  public void testCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = snap1.allManifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend()\n        .appendFile(FILE_B)\n        .stageOnly()\n        .commit();\n\n    Snapshot snap2 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    \r\n    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, stagedSnapshot.sequenceNumber());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Snapshot snap3 = table.currentSnapshot();\n    long commitId3 = snap3.snapshotId();\n    manifestFile = snap3.allManifests().get(0);\n    validateManifest(manifestFile, seqs(3), ids(commitId3), files(FILE_C));\n    validateSnapshot(snap2, snap3, 3, FILE_C);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 3\", 3, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 3\", 3, readMetadata().lastSequenceNumber());\n\n    \r\n    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n    Snapshot snap4 = table.currentSnapshot();\n    long commitId4 = snap4.snapshotId();\n    manifestFile = table.currentSnapshot().allManifests().get(0);\n    validateManifest(manifestFile, seqs(4), ids(commitId4), files(FILE_B));\n    validateSnapshot(snap3, snap4, 4, FILE_B);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 4\", 4, snap4.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 4\", 4, readMetadata().lastSequenceNumber());\n  }\n","date":"2020-06-03 09:11:14","endLine":413,"groupId":"101741","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCherryPicking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/55/cefcfe7a2e2a599c054fa59cc579db2f2376fb.src","preCode":"  public void testCherryPicking() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = snap1.manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend()\n        .appendFile(FILE_B)\n        .stageOnly()\n        .commit();\n\n    Snapshot snap2 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    \r\n    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, stagedSnapshot.sequenceNumber());\n\n    \r\n    table.newAppend()\n        .appendFile(FILE_C)\n        .commit();\n\n    Snapshot snap3 = table.currentSnapshot();\n    long commitId3 = snap3.snapshotId();\n    manifestFile = snap3.manifests().get(0);\n    validateManifest(manifestFile, seqs(3), ids(commitId3), files(FILE_C));\n    validateSnapshot(snap2, snap3, 3, FILE_C);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 3\", 3, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 3\", 3, readMetadata().lastSequenceNumber());\n\n    \r\n    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n    Snapshot snap4 = table.currentSnapshot();\n    long commitId4 = snap4.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateManifest(manifestFile, seqs(4), ids(commitId4), files(FILE_B));\n    validateSnapshot(snap3, snap4, 4, FILE_B);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 4\", 4, snap4.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 4\", 4, readMetadata().lastSequenceNumber());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"},{"authorDate":"2020-06-03 09:11:14","commitOrder":2,"curCode":"  public void testCherryPickFastForward() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = snap1.allManifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend()\n        .appendFile(FILE_B)\n        .stageOnly()\n        .commit();\n    Snapshot snap2 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    \r\n    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, stagedSnapshot.sequenceNumber());\n\n    \r\n    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n    Snapshot snap3 = table.currentSnapshot();\n    long commitId3 = snap3.snapshotId();\n    manifestFile = snap3.allManifests().get(0);\n    validateManifest(manifestFile, seqs(2), ids(commitId3), files(FILE_B));\n    validateSnapshot(snap2, snap3, 2, FILE_B);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n  }\n","date":"2020-06-03 09:11:14","endLine":449,"groupId":"101741","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCherryPickFastForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/55/cefcfe7a2e2a599c054fa59cc579db2f2376fb.src","preCode":"  public void testCherryPickFastForward() {\n    table.newAppend()\n        .appendFile(FILE_A)\n        .commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = snap1.manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend()\n        .appendFile(FILE_B)\n        .stageOnly()\n        .commit();\n    Snapshot snap2 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    \r\n    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, stagedSnapshot.sequenceNumber());\n\n    \r\n    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n    Snapshot snap3 = table.currentSnapshot();\n    long commitId3 = snap3.snapshotId();\n    manifestFile = snap3.manifests().get(0);\n    validateManifest(manifestFile, seqs(2), ids(commitId3), files(FILE_B));\n    validateSnapshot(snap2, snap3, 2, FILE_B);\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"}],"commitId":"509ab5683c860906d80a074d8c66d13edf4fdaf6","commitMessage":"@@@Update sequence number tests to use allManifests (#1087)\n\n","date":"2020-06-03 09:11:14","modifiedFileCount":"1","status":"M","submitter":"Ryan Blue"}]
