[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case STRING:\n          return ((UTF8String) result).toString();\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        case DECIMAL:\n          return ((Decimal) result).toJavaBigDecimal();\n        default:\n          return result;\n      }\n    }\n","date":"2019-03-21 07:25:05","endLine":201,"groupId":"1242","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/65/158a62212d96320fd84c6b3bec6a77b961725c.src","preCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case STRING:\n          return ((UTF8String) result).toString();\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        case DECIMAL:\n          return ((Decimal) result).toJavaBigDecimal();\n        default:\n          return result;\n      }\n    }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/RandomData.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        default:\n          return result;\n      }\n    }\n","date":"2019-03-21 07:25:05","endLine":154,"groupId":"1242","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/a6/86cfa5e323a2610fe21f1bfde498975159e7a1.src","preCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        default:\n          return result;\n      }\n    }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/RandomAvroData.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2020-06-11 01:14:39","codes":[{"authorDate":"2020-06-11 01:14:39","commitOrder":2,"curCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = RandomUtil.generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        default:\n          return result;\n      }\n    }\n","date":"2020-06-11 01:14:39","endLine":200,"groupId":"1242","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b5/f0b7153b7a77ca9ba4ca2c0c10aa23678fae80.src","preCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case STRING:\n          return ((UTF8String) result).toString();\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        case DECIMAL:\n          return ((Decimal) result).toJavaBigDecimal();\n        default:\n          return result;\n      }\n    }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/RandomData.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-06-11 01:14:39","commitOrder":2,"curCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = RandomUtil.generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case STRING:\n          return new Utf8((String) result);\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        default:\n          return result;\n      }\n    }\n","date":"2020-06-11 01:14:39","endLine":158,"groupId":"1242","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1c/3d9adf26dc8e121f707dd55eb43e311c14a4db.src","preCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        default:\n          return result;\n      }\n    }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/RandomAvroData.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"35dd7def31f86c7b3cd15a0cec2b2e4abb3d33ee","commitMessage":"@@@Refactor RandomData classes to extract common methods (#1102)\n\n","date":"2020-06-11 01:14:39","modifiedFileCount":"3","status":"M","submitter":"openinx"},{"authorTime":"2020-06-11 01:14:39","codes":[{"authorDate":"2020-06-16 06:16:19","commitOrder":3,"curCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = randomValue(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        default:\n          return result;\n      }\n    }\n","date":"2020-06-16 06:16:19","endLine":231,"groupId":"12278","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f9/9c0fccb89c4208d661ef47bcec51a05dbcb534.src","preCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = RandomUtil.generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        default:\n          return result;\n      }\n    }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/data/RandomData.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"},{"authorDate":"2020-06-11 01:14:39","commitOrder":3,"curCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = RandomUtil.generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case STRING:\n          return new Utf8((String) result);\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        default:\n          return result;\n      }\n    }\n","date":"2020-06-11 01:14:39","endLine":158,"groupId":"12278","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"primitive","params":"(Type.PrimitiveTypeprimitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1c/3d9adf26dc8e121f707dd55eb43e311c14a4db.src","preCode":"    public Object primitive(Type.PrimitiveType primitive) {\n      Object result = RandomUtil.generatePrimitive(primitive, random);\n      \r\n      \r\n      switch (primitive.typeId()) {\n        case STRING:\n          return new Utf8((String) result);\n        case FIXED:\n          return new GenericData.Fixed(typeToSchema.get(primitive),\n              (byte[]) result);\n        case BINARY:\n          return ByteBuffer.wrap((byte[]) result);\n        case UUID:\n          return UUID.nameUUIDFromBytes((byte[]) result);\n        default:\n          return result;\n      }\n    }\n","realPath":"core/src/test/java/org/apache/iceberg/avro/RandomAvroData.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"}],"commitId":"ffdcf09027e09460b7d7505e65aea119107934a3","commitMessage":"@@@Spark: Support vectorized Parquet reads for flat projections (#828)\n\n","date":"2020-06-16 06:16:19","modifiedFileCount":"21","status":"M","submitter":"Samarth Jain"}]
