[{"authorTime":"2019-12-28 05:07:53","codes":[{"authorDate":"2019-12-28 05:07:53","commitOrder":1,"curCode":"  public void testIntegerIn() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 25, INT_MIN_VALUE - 24)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound (5 < 30, 6 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 2, INT_MIN_VALUE - 1)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound (28 < 30, 29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 1, INT_MIN_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound (30 == 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE - 4, INT_MAX_VALUE - 3)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds (30 < 75 < 79, 30 < 76 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE, INT_MAX_VALUE + 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound (79 == 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE + 1, INT_MAX_VALUE + 2)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound (80 > 79, 81 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE + 6, INT_MAX_VALUE + 7)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound (85 > 79, 86 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"all_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: in on all nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"some_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: in on some nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"no_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: in on no nulls column\", shouldRead);\n  }\n","date":"2019-12-28 05:07:53","endLine":487,"groupId":"4804","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntegerIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1f/90cf1c130864f149b47d34706fd3b45bbe7ad4.src","preCode":"  public void testIntegerIn() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 25, INT_MIN_VALUE - 24)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound (5 < 30, 6 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 2, INT_MIN_VALUE - 1)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound (28 < 30, 29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 1, INT_MIN_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound (30 == 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE - 4, INT_MAX_VALUE - 3)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds (30 < 75 < 79, 30 < 76 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE, INT_MAX_VALUE + 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound (79 == 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE + 1, INT_MAX_VALUE + 2)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound (80 > 79, 81 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE + 6, INT_MAX_VALUE + 7)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound (85 > 79, 86 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"all_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: in on all nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"some_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: in on some nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"no_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: in on no nulls column\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"B"},{"authorDate":"2019-12-28 05:07:53","commitOrder":1,"curCode":"  public void testIntegerNotIn() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 25, INT_MIN_VALUE - 24)).eval(FILE);\n    Assert.assertTrue(\"Should read: id below lower bound (5 < 30, 6 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 2, INT_MIN_VALUE - 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id below lower bound (28 < 30, 29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 1, INT_MIN_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound (30 == 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE - 4, INT_MAX_VALUE - 3)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds (30 < 75 < 79, 30 < 76 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE, INT_MAX_VALUE + 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound (79 == 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE + 1, INT_MAX_VALUE + 2)).eval(FILE);\n    Assert.assertTrue(\"Should read: id above upper bound (80 > 79, 81 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE + 6, INT_MAX_VALUE + 7)).eval(FILE);\n    Assert.assertTrue(\"Should read: id above upper bound (85 > 79, 86 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"all_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on all nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"some_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on some nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"no_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on no nulls column\", shouldRead);\n\n  }\n","date":"2019-12-28 05:07:53","endLine":531,"groupId":"445","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerNotIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1f/90cf1c130864f149b47d34706fd3b45bbe7ad4.src","preCode":"  public void testIntegerNotIn() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 25, INT_MIN_VALUE - 24)).eval(FILE);\n    Assert.assertTrue(\"Should read: id below lower bound (5 < 30, 6 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 2, INT_MIN_VALUE - 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id below lower bound (28 < 30, 29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 1, INT_MIN_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound (30 == 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE - 4, INT_MAX_VALUE - 3)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds (30 < 75 < 79, 30 < 76 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE, INT_MAX_VALUE + 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound (79 == 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE + 1, INT_MAX_VALUE + 2)).eval(FILE);\n    Assert.assertTrue(\"Should read: id above upper bound (80 > 79, 81 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE + 6, INT_MAX_VALUE + 7)).eval(FILE);\n    Assert.assertTrue(\"Should read: id above upper bound (85 > 79, 86 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"all_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on all nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"some_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on some nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"no_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on no nulls column\", shouldRead);\n\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"B"}],"commitId":"33e675331e221af0b2618815addbdb4fb29c9083","commitMessage":"@@@Implement in and notIn in multiple visitors (#600)\n\n","date":"2019-12-28 05:07:53","modifiedFileCount":"10","status":"B","submitter":"jun-he"},{"authorTime":"2019-12-28 05:07:53","codes":[{"authorDate":"2020-10-29 06:57:56","commitOrder":2,"curCode":"  public void testIntegerIn() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 25, INT_MIN_VALUE - 24)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound (5 < 30, 6 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 2, INT_MIN_VALUE - 1)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound (28 < 30, 29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 1, INT_MIN_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound (30 == 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE - 4, INT_MAX_VALUE - 3)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds (30 < 75 < 79, 30 < 76 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE, INT_MAX_VALUE + 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound (79 == 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE + 1, INT_MAX_VALUE + 2)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound (80 > 79, 81 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE + 6, INT_MAX_VALUE + 7)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound (85 > 79, 86 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"all_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: in on all nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"some_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: in on some nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"no_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: in on no nulls column\", shouldRead);\n\n    \r\n    List<Integer> ids = Lists.newArrayListWithExpectedSize(400);\n    for (int id = -400; id <= 0; id++) {\n      ids.add(id);\n    }\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, in(\"id\", ids)).eval(FILE);\n    Assert.assertTrue(\"Should read: large in expression\", shouldRead);\n  }\n","date":"2020-10-29 06:57:56","endLine":497,"groupId":"101277","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntegerIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/38/63261e788c0892883f547c3f13ffe797c102e3.src","preCode":"  public void testIntegerIn() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 25, INT_MIN_VALUE - 24)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound (5 < 30, 6 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 2, INT_MIN_VALUE - 1)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id below lower bound (28 < 30, 29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MIN_VALUE - 1, INT_MIN_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound (30 == 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE - 4, INT_MAX_VALUE - 3)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds (30 < 75 < 79, 30 < 76 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE, INT_MAX_VALUE + 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound (79 == 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE + 1, INT_MAX_VALUE + 2)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound (80 > 79, 81 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"id\", INT_MAX_VALUE + 6, INT_MAX_VALUE + 7)).eval(FILE);\n    Assert.assertFalse(\"Should not read: id above upper bound (85 > 79, 86 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"all_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertFalse(\"Should skip: in on all nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"some_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: in on some nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        in(\"no_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: in on no nulls column\", shouldRead);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"M"},{"authorDate":"2019-12-28 05:07:53","commitOrder":2,"curCode":"  public void testIntegerNotIn() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 25, INT_MIN_VALUE - 24)).eval(FILE);\n    Assert.assertTrue(\"Should read: id below lower bound (5 < 30, 6 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 2, INT_MIN_VALUE - 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id below lower bound (28 < 30, 29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 1, INT_MIN_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound (30 == 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE - 4, INT_MAX_VALUE - 3)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds (30 < 75 < 79, 30 < 76 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE, INT_MAX_VALUE + 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound (79 == 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE + 1, INT_MAX_VALUE + 2)).eval(FILE);\n    Assert.assertTrue(\"Should read: id above upper bound (80 > 79, 81 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE + 6, INT_MAX_VALUE + 7)).eval(FILE);\n    Assert.assertTrue(\"Should read: id above upper bound (85 > 79, 86 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"all_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on all nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"some_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on some nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"no_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on no nulls column\", shouldRead);\n\n  }\n","date":"2019-12-28 05:07:53","endLine":531,"groupId":"101277","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerNotIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1f/90cf1c130864f149b47d34706fd3b45bbe7ad4.src","preCode":"  public void testIntegerNotIn() {\n    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 25, INT_MIN_VALUE - 24)).eval(FILE);\n    Assert.assertTrue(\"Should read: id below lower bound (5 < 30, 6 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 2, INT_MIN_VALUE - 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id below lower bound (28 < 30, 29 < 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MIN_VALUE - 1, INT_MIN_VALUE)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to lower bound (30 == 30)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE - 4, INT_MAX_VALUE - 3)).eval(FILE);\n    Assert.assertTrue(\"Should read: id between lower and upper bounds (30 < 75 < 79, 30 < 76 < 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE, INT_MAX_VALUE + 1)).eval(FILE);\n    Assert.assertTrue(\"Should read: id equal to upper bound (79 == 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE + 1, INT_MAX_VALUE + 2)).eval(FILE);\n    Assert.assertTrue(\"Should read: id above upper bound (80 > 79, 81 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"id\", INT_MAX_VALUE + 6, INT_MAX_VALUE + 7)).eval(FILE);\n    Assert.assertTrue(\"Should read: id above upper bound (85 > 79, 86 > 79)\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"all_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on all nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"some_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on some nulls column\", shouldRead);\n\n    shouldRead = new InclusiveMetricsEvaluator(SCHEMA,\n        notIn(\"no_nulls\", \"abc\", \"def\")).eval(FILE);\n    Assert.assertTrue(\"Should read: notIn on no nulls column\", shouldRead);\n\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"N"}],"commitId":"444779d86ba7fc21a1754aa21610aa7d1dc3ea23","commitMessage":"@@@Fix IN predicate performance (#1672)\n\n","date":"2020-10-29 06:57:56","modifiedFileCount":"5","status":"M","submitter":"Anton Okolnychyi"}]
