[{"authorTime":"2020-09-25 09:05:47","codes":[{"authorDate":"2020-09-25 09:05:47","commitOrder":1,"curCode":"  public void testProjection() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n    List<Record> inputRecords = RandomGenericData.generate(SCHEMA, 1, 0L);\n    new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER).appendToTable(\n        org.apache.iceberg.TestHelpers.Row.of(\"2020-03-20\", 0), inputRecords);\n    assertRows(execute(table, Collections.singletonList(\"data\")), Row.of(inputRecords.get(0).get(0)));\n  }\n","date":"2020-09-25 09:05:47","endLine":155,"groupId":"1190","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/1dbf9dcb29caaa374cfce8437ebea222d6763c.src","preCode":"  public void testProjection() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n    List<Record> inputRecords = RandomGenericData.generate(SCHEMA, 1, 0L);\n    new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER).appendToTable(\n        org.apache.iceberg.TestHelpers.Row.of(\"2020-03-20\", 0), inputRecords);\n    assertRows(execute(table, Collections.singletonList(\"data\")), Row.of(inputRecords.get(0).get(0)));\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2020-09-25 09:05:47","commitOrder":1,"curCode":"  public void testFilterExp() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n\n    List<Record> expectedRecords = RandomGenericData.generate(SCHEMA, 2, 0L);\n    expectedRecords.get(0).set(2, \"2020-03-20\");\n    expectedRecords.get(1).set(2, \"2020-03-20\");\n\n    GenericAppenderHelper helper = new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER);\n    DataFile dataFile1 = helper.writeFile(TestHelpers.Row.of(\"2020-03-20\", 0), expectedRecords);\n    DataFile dataFile2 = helper.writeFile(TestHelpers.Row.of(\"2020-03-21\", 0),\n        RandomGenericData.generate(SCHEMA, 2, 0L));\n    helper.appendToTable(dataFile1, dataFile2);\n    List<Expression> filters = Collections.singletonList(Expressions.equal(\"dt\", \"2020-03-20\"));\n    assertRecords(execute(table, filters, \"dt='2020-03-20'\"), expectedRecords, SCHEMA);\n  }\n","date":"2020-09-25 09:05:47","endLine":292,"groupId":"1198","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterExp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/1dbf9dcb29caaa374cfce8437ebea222d6763c.src","preCode":"  public void testFilterExp() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n\n    List<Record> expectedRecords = RandomGenericData.generate(SCHEMA, 2, 0L);\n    expectedRecords.get(0).set(2, \"2020-03-20\");\n    expectedRecords.get(1).set(2, \"2020-03-20\");\n\n    GenericAppenderHelper helper = new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER);\n    DataFile dataFile1 = helper.writeFile(TestHelpers.Row.of(\"2020-03-20\", 0), expectedRecords);\n    DataFile dataFile2 = helper.writeFile(TestHelpers.Row.of(\"2020-03-21\", 0),\n        RandomGenericData.generate(SCHEMA, 2, 0L));\n    helper.appendToTable(dataFile1, dataFile2);\n    List<Expression> filters = Collections.singletonList(Expressions.equal(\"dt\", \"2020-03-20\"));\n    assertRecords(execute(table, filters, \"dt='2020-03-20'\"), expectedRecords, SCHEMA);\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"B"}],"commitId":"1a797cd986c9193f2e422fec295aaf25ce7e1916","commitMessage":"@@@Flink: Introduce Flink InputFormat (#1346)\n\n","date":"2020-09-25 09:05:47","modifiedFileCount":"5","status":"B","submitter":"Jingsong Lee"},{"authorTime":"2020-09-30 01:02:03","codes":[{"authorDate":"2020-09-30 01:02:03","commitOrder":2,"curCode":"  public void testProjection() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n    List<Record> inputRecords = RandomGenericData.generate(SCHEMA, 1, 0L);\n    new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER).appendToTable(\n        org.apache.iceberg.TestHelpers.Row.of(\"2020-03-20\", 0), inputRecords);\n    assertRows(runWithProjection(\"data\"), Row.of(inputRecords.get(0).get(0)));\n  }\n","date":"2020-09-30 01:02:03","endLine":171,"groupId":"1190","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/6d/113890651e44ad58d662e4d586046e0148f040.src","preCode":"  public void testProjection() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n    List<Record> inputRecords = RandomGenericData.generate(SCHEMA, 1, 0L);\n    new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER).appendToTable(\n        org.apache.iceberg.TestHelpers.Row.of(\"2020-03-20\", 0), inputRecords);\n    assertRows(execute(table, Collections.singletonList(\"data\")), Row.of(inputRecords.get(0).get(0)));\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2020-09-30 01:02:03","commitOrder":2,"curCode":"  public void testFilterExp() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n\n    List<Record> expectedRecords = RandomGenericData.generate(SCHEMA, 2, 0L);\n    expectedRecords.get(0).set(2, \"2020-03-20\");\n    expectedRecords.get(1).set(2, \"2020-03-20\");\n\n    GenericAppenderHelper helper = new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER);\n    DataFile dataFile1 = helper.writeFile(TestHelpers.Row.of(\"2020-03-20\", 0), expectedRecords);\n    DataFile dataFile2 = helper.writeFile(TestHelpers.Row.of(\"2020-03-21\", 0),\n        RandomGenericData.generate(SCHEMA, 2, 0L));\n    helper.appendToTable(dataFile1, dataFile2);\n    assertRecords(runWithFilter(Expressions.equal(\"dt\", \"2020-03-20\"), \"where dt='2020-03-20'\"), expectedRecords,\n        SCHEMA);\n  }\n","date":"2020-09-30 01:02:03","endLine":306,"groupId":"1198","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterExp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/6d/113890651e44ad58d662e4d586046e0148f040.src","preCode":"  public void testFilterExp() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n\n    List<Record> expectedRecords = RandomGenericData.generate(SCHEMA, 2, 0L);\n    expectedRecords.get(0).set(2, \"2020-03-20\");\n    expectedRecords.get(1).set(2, \"2020-03-20\");\n\n    GenericAppenderHelper helper = new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER);\n    DataFile dataFile1 = helper.writeFile(TestHelpers.Row.of(\"2020-03-20\", 0), expectedRecords);\n    DataFile dataFile2 = helper.writeFile(TestHelpers.Row.of(\"2020-03-21\", 0),\n        RandomGenericData.generate(SCHEMA, 2, 0L));\n    helper.appendToTable(dataFile1, dataFile2);\n    List<Expression> filters = Collections.singletonList(Expressions.equal(\"dt\", \"2020-03-20\"));\n    assertRecords(execute(table, filters, \"dt='2020-03-20'\"), expectedRecords, SCHEMA);\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"9d9f6775e0c0a5c6fe9334a65e82880d69adacf5","commitMessage":"@@@Flink: Integrate Flink reader to SQL (#1509)\n\n","date":"2020-09-30 01:02:03","modifiedFileCount":"7","status":"M","submitter":"Jingsong Lee"},{"authorTime":"2021-03-05 11:21:11","codes":[{"authorDate":"2021-03-05 11:21:11","commitOrder":3,"curCode":"  public void testProjection() throws Exception {\n    Table table = catalog.createTable(TestFixtures.TABLE_IDENTIFIER, TestFixtures.SCHEMA, TestFixtures.SPEC);\n    List<Record> inputRecords = RandomGenericData.generate(TestFixtures.SCHEMA, 1, 0L);\n    new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER).appendToTable(\n        org.apache.iceberg.TestHelpers.Row.of(\"2020-03-20\", 0), inputRecords);\n    assertRows(runWithProjection(\"data\"), Row.of(inputRecords.get(0).get(0)));\n  }\n","date":"2021-03-05 11:21:11","endLine":140,"groupId":"102242","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b9/c7d2c20ba45a6b0800e00d00527721566572ec.src","preCode":"  public void testProjection() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n    List<Record> inputRecords = RandomGenericData.generate(SCHEMA, 1, 0L);\n    new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER).appendToTable(\n        org.apache.iceberg.TestHelpers.Row.of(\"2020-03-20\", 0), inputRecords);\n    assertRows(runWithProjection(\"data\"), Row.of(inputRecords.get(0).get(0)));\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2021-03-05 11:21:11","commitOrder":3,"curCode":"  public void testFilterExp() throws Exception {\n    Table table = catalog.createTable(TestFixtures.TABLE_IDENTIFIER, TestFixtures.SCHEMA, TestFixtures.SPEC);\n\n    List<Record> expectedRecords = RandomGenericData.generate(TestFixtures.SCHEMA, 2, 0L);\n    expectedRecords.get(0).set(2, \"2020-03-20\");\n    expectedRecords.get(1).set(2, \"2020-03-20\");\n\n    GenericAppenderHelper helper = new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER);\n    DataFile dataFile1 = helper.writeFile(org.apache.iceberg.TestHelpers.Row.of(\"2020-03-20\", 0), expectedRecords);\n    DataFile dataFile2 = helper.writeFile(org.apache.iceberg.TestHelpers.Row.of(\"2020-03-21\", 0),\n        RandomGenericData.generate(TestFixtures.SCHEMA, 2, 0L));\n    helper.appendToTable(dataFile1, dataFile2);\n    TestHelpers.assertRecords(runWithFilter(\n        Expressions.equal(\"dt\", \"2020-03-20\"), \"where dt='2020-03-20'\"),\n        expectedRecords,\n        TestFixtures.SCHEMA);\n  }\n","date":"2021-03-05 11:21:11","endLine":277,"groupId":"102242","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testFilterExp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b9/c7d2c20ba45a6b0800e00d00527721566572ec.src","preCode":"  public void testFilterExp() throws Exception {\n    Table table = catalog.createTable(TableIdentifier.of(\"default\", \"t\"), SCHEMA, SPEC);\n\n    List<Record> expectedRecords = RandomGenericData.generate(SCHEMA, 2, 0L);\n    expectedRecords.get(0).set(2, \"2020-03-20\");\n    expectedRecords.get(1).set(2, \"2020-03-20\");\n\n    GenericAppenderHelper helper = new GenericAppenderHelper(table, fileFormat, TEMPORARY_FOLDER);\n    DataFile dataFile1 = helper.writeFile(TestHelpers.Row.of(\"2020-03-20\", 0), expectedRecords);\n    DataFile dataFile2 = helper.writeFile(TestHelpers.Row.of(\"2020-03-21\", 0),\n        RandomGenericData.generate(SCHEMA, 2, 0L));\n    helper.appendToTable(dataFile1, dataFile2);\n    assertRecords(runWithFilter(Expressions.equal(\"dt\", \"2020-03-20\"), \"where dt='2020-03-20'\"), expectedRecords,\n        SCHEMA);\n  }\n","realPath":"flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"343104c8e40bbcacbf6297445cc9dfc82769afe8","commitMessage":"@@@Flink: Refactor flink source tests for FLIP-27 unified source. (#2047)\n\n","date":"2021-03-05 11:21:11","modifiedFileCount":"8","status":"M","submitter":"Steven Zhen Wu"}]
