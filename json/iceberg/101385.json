[{"authorTime":"2019-07-27 05:06:30","codes":[{"authorDate":"2019-07-27 05:06:30","commitOrder":1,"curCode":"  public void assertProjectionStrict(PartitionSpec spec, UnboundPredicate<?> filter,\n                                     Expression.Operation expectedOp, String expectedLiteral) {\n\n    Expression projection = Projections.strict(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(expectedOp, predicate.op());\n\n    Literal literal = predicate.literal();\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    String output = transform.toHumanString((int) literal.value());\n    Assert.assertEquals(expectedLiteral, output);\n  }\n","date":"2019-07-27 05:06:30","endLine":57,"groupId":"3593","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertProjectionStrict","params":"(PartitionSpecspec@UnboundPredicate<?>filter@Expression.OperationexpectedOp@StringexpectedLiteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/5d/3c5b09085fbd00e905c5bae6cd2eb0eeb252ad.src","preCode":"  public void assertProjectionStrict(PartitionSpec spec, UnboundPredicate<?> filter,\n                                     Expression.Operation expectedOp, String expectedLiteral) {\n\n    Expression projection = Projections.strict(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(expectedOp, predicate.op());\n\n    Literal literal = predicate.literal();\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    String output = transform.toHumanString((int) literal.value());\n    Assert.assertEquals(expectedLiteral, output);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2019-07-27 05:06:30","commitOrder":1,"curCode":"  public void assertProjectionInclusive(PartitionSpec spec, UnboundPredicate<?> filter,\n                                        Expression.Operation expectedOp, String expectedLiteral) {\n    Expression projection = Projections.inclusive(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(predicate.op(), expectedOp);\n\n    Literal literal = predicate.literal();\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    String output = transform.toHumanString((int) literal.value());\n    Assert.assertEquals(expectedLiteral, output);\n  }\n","date":"2019-07-27 05:06:30","endLine":84,"groupId":"5020","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertProjectionInclusive","params":"(PartitionSpecspec@UnboundPredicate<?>filter@Expression.OperationexpectedOp@StringexpectedLiteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/5d/3c5b09085fbd00e905c5bae6cd2eb0eeb252ad.src","preCode":"  public void assertProjectionInclusive(PartitionSpec spec, UnboundPredicate<?> filter,\n                                        Expression.Operation expectedOp, String expectedLiteral) {\n    Expression projection = Projections.inclusive(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(predicate.op(), expectedOp);\n\n    Literal literal = predicate.literal();\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    String output = transform.toHumanString((int) literal.value());\n    Assert.assertEquals(expectedLiteral, output);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"daf062053a87b2333bf2c0d2cd3c3676ab264989","commitMessage":"@@@Add projectStrict for Dates and Timestamps (#283)\n\n","date":"2019-07-27 05:06:30","modifiedFileCount":"5","status":"B","submitter":"moulimukherjee"},{"authorTime":"2019-12-28 05:09:55","codes":[{"authorDate":"2019-12-28 05:09:55","commitOrder":2,"curCode":"  public void assertProjectionStrict(PartitionSpec spec, UnboundPredicate<?> filter,\n                                     Expression.Operation expectedOp, String expectedLiteral) {\n\n    Expression projection = Projections.strict(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(expectedOp, predicate.op());\n\n    Assert.assertNotEquals(\"Strict projection never runs for IN\", Expression.Operation.IN, predicate.op());\n\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    if (predicate.op() == Expression.Operation.NOT_IN) {\n      Iterable<?> values = Iterables.transform(predicate.literals(), Literal::value);\n      String actual = Lists.newArrayList(values).stream().sorted()\n          .map(v -> transform.toHumanString((Integer) v)).collect(Collectors.toList()).toString();\n      Assert.assertEquals(expectedLiteral, actual);\n    } else {\n      Literal literal = predicate.literal();\n      String output = transform.toHumanString((int) literal.value());\n      Assert.assertEquals(expectedLiteral, output);\n    }\n  }\n","date":"2019-12-28 05:09:55","endLine":71,"groupId":"2365","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertProjectionStrict","params":"(PartitionSpecspec@UnboundPredicate<?>filter@Expression.OperationexpectedOp@StringexpectedLiteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ad/86b8a75024cf97defc18bb35e79a8b673005df.src","preCode":"  public void assertProjectionStrict(PartitionSpec spec, UnboundPredicate<?> filter,\n                                     Expression.Operation expectedOp, String expectedLiteral) {\n\n    Expression projection = Projections.strict(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(expectedOp, predicate.op());\n\n    Literal literal = predicate.literal();\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    String output = transform.toHumanString((int) literal.value());\n    Assert.assertEquals(expectedLiteral, output);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-12-28 05:09:55","commitOrder":2,"curCode":"  public void assertProjectionInclusive(PartitionSpec spec, UnboundPredicate<?> filter,\n                                        Expression.Operation expectedOp, String expectedLiteral) {\n    Expression projection = Projections.inclusive(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(predicate.op(), expectedOp);\n\n    Assert.assertNotEquals(\"Inclusive projection never runs for NOT_IN\", Expression.Operation.NOT_IN, predicate.op());\n\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    if (predicate.op() == Expression.Operation.IN) {\n      Iterable<?> values = Iterables.transform(predicate.literals(), Literal::value);\n      String actual = Lists.newArrayList(values).stream().sorted()\n          .map(v -> transform.toHumanString((Integer) v)).collect(Collectors.toList()).toString();\n      Assert.assertEquals(expectedLiteral, actual);\n    } else {\n      Literal literal = predicate.literal();\n      String output = transform.toHumanString((int) literal.value());\n      Assert.assertEquals(expectedLiteral, output);\n    }\n  }\n","date":"2019-12-28 05:09:55","endLine":107,"groupId":"2365","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertProjectionInclusive","params":"(PartitionSpecspec@UnboundPredicate<?>filter@Expression.OperationexpectedOp@StringexpectedLiteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ad/86b8a75024cf97defc18bb35e79a8b673005df.src","preCode":"  public void assertProjectionInclusive(PartitionSpec spec, UnboundPredicate<?> filter,\n                                        Expression.Operation expectedOp, String expectedLiteral) {\n    Expression projection = Projections.inclusive(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(predicate.op(), expectedOp);\n\n    Literal literal = predicate.literal();\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    String output = transform.toHumanString((int) literal.value());\n    Assert.assertEquals(expectedLiteral, output);\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"79e88c64613219b7ed249d13d11bc1fca8e55178","commitMessage":"@@@Update project and projectStrict for set predicates (#628)\n\n","date":"2019-12-28 05:09:55","modifiedFileCount":"8","status":"M","submitter":"jun-he"},{"authorTime":"2021-01-22 09:14:39","codes":[{"authorDate":"2019-12-28 05:09:55","commitOrder":3,"curCode":"  public void assertProjectionStrict(PartitionSpec spec, UnboundPredicate<?> filter,\n                                     Expression.Operation expectedOp, String expectedLiteral) {\n\n    Expression projection = Projections.strict(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(expectedOp, predicate.op());\n\n    Assert.assertNotEquals(\"Strict projection never runs for IN\", Expression.Operation.IN, predicate.op());\n\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    if (predicate.op() == Expression.Operation.NOT_IN) {\n      Iterable<?> values = Iterables.transform(predicate.literals(), Literal::value);\n      String actual = Lists.newArrayList(values).stream().sorted()\n          .map(v -> transform.toHumanString((Integer) v)).collect(Collectors.toList()).toString();\n      Assert.assertEquals(expectedLiteral, actual);\n    } else {\n      Literal literal = predicate.literal();\n      String output = transform.toHumanString((int) literal.value());\n      Assert.assertEquals(expectedLiteral, output);\n    }\n  }\n","date":"2019-12-28 05:09:55","endLine":71,"groupId":"101385","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertProjectionStrict","params":"(PartitionSpecspec@UnboundPredicate<?>filter@Expression.OperationexpectedOp@StringexpectedLiteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/ad/86b8a75024cf97defc18bb35e79a8b673005df.src","preCode":"  public void assertProjectionStrict(PartitionSpec spec, UnboundPredicate<?> filter,\n                                     Expression.Operation expectedOp, String expectedLiteral) {\n\n    Expression projection = Projections.strict(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(expectedOp, predicate.op());\n\n    Assert.assertNotEquals(\"Strict projection never runs for IN\", Expression.Operation.IN, predicate.op());\n\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    if (predicate.op() == Expression.Operation.NOT_IN) {\n      Iterable<?> values = Iterables.transform(predicate.literals(), Literal::value);\n      String actual = Lists.newArrayList(values).stream().sorted()\n          .map(v -> transform.toHumanString((Integer) v)).collect(Collectors.toList()).toString();\n      Assert.assertEquals(expectedLiteral, actual);\n    } else {\n      Literal literal = predicate.literal();\n      String output = transform.toHumanString((int) literal.value());\n      Assert.assertEquals(expectedLiteral, output);\n    }\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2021-01-22 09:14:39","commitOrder":3,"curCode":"  public void assertProjectionInclusive(PartitionSpec spec, UnboundPredicate<?> filter,\n                                        Expression.Operation expectedOp, String expectedLiteral) {\n    Expression projection = Projections.inclusive(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(expectedOp, predicate.op());\n\n    Assert.assertNotEquals(\"Inclusive projection never runs for NOT_IN\", Expression.Operation.NOT_IN, predicate.op());\n\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    if (predicate.op() == Expression.Operation.IN) {\n      Iterable<?> values = Iterables.transform(predicate.literals(), Literal::value);\n      String actual = Lists.newArrayList(values).stream().sorted()\n          .map(v -> transform.toHumanString((Integer) v)).collect(Collectors.toList()).toString();\n      Assert.assertEquals(expectedLiteral, actual);\n    } else {\n      Literal literal = predicate.literal();\n      String output = transform.toHumanString((int) literal.value());\n      Assert.assertEquals(expectedLiteral, output);\n    }\n  }\n","date":"2021-01-22 09:14:39","endLine":107,"groupId":"101385","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"assertProjectionInclusive","params":"(PartitionSpecspec@UnboundPredicate<?>filter@Expression.OperationexpectedOp@StringexpectedLiteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d5/9ecf00ac11fe06eae6201b04ceb589a261d46d.src","preCode":"  public void assertProjectionInclusive(PartitionSpec spec, UnboundPredicate<?> filter,\n                                        Expression.Operation expectedOp, String expectedLiteral) {\n    Expression projection = Projections.inclusive(spec).project(filter);\n    UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n\n    Assert.assertEquals(predicate.op(), expectedOp);\n\n    Assert.assertNotEquals(\"Inclusive projection never runs for NOT_IN\", Expression.Operation.NOT_IN, predicate.op());\n\n    Timestamps transform = (Timestamps) spec.getFieldsBySourceId(1).get(0).transform();\n    if (predicate.op() == Expression.Operation.IN) {\n      Iterable<?> values = Iterables.transform(predicate.literals(), Literal::value);\n      String actual = Lists.newArrayList(values).stream().sorted()\n          .map(v -> transform.toHumanString((Integer) v)).collect(Collectors.toList()).toString();\n      Assert.assertEquals(expectedLiteral, actual);\n    } else {\n      Literal literal = predicate.literal();\n      String output = transform.toHumanString((int) literal.value());\n      Assert.assertEquals(expectedLiteral, output);\n    }\n  }\n","realPath":"api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"ae96c325239505bccde5eaeec42dbdde4df5fa6a","commitMessage":"@@@API: Fix date and timestamp transforms (#1981)\n\n","date":"2021-01-22 09:14:39","modifiedFileCount":"9","status":"M","submitter":"Ryan Blue"}]
