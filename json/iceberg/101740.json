[{"authorTime":"2020-06-03 06:39:25","codes":[{"authorDate":"2020-06-03 06:39:25","commitOrder":1,"curCode":"  public void testRollBack() {\n    table.newFastAppend().appendFile(FILE_A).commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newFastAppend().appendFile(FILE_B).commit();\n    Snapshot snap2 = table.currentSnapshot();\n    long commitId2 = snap2.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(snap1, snap2, 2, FILE_B);\n    validateManifest(manifestFile, seqs(2), ids(commitId2), files(FILE_B));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    table.manageSnapshots().rollbackTo(commitId1).commit();\n    Snapshot snap3 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    table.newFastAppend().appendFile(FILE_C).commit();\n    Snapshot snap4 = table.currentSnapshot();\n    long commitId4 = snap4.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(snap3, snap4, 3, FILE_C);\n    validateManifest(manifestFile, seqs(3), ids(commitId4), files(FILE_C));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 3, snap4.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 3\", 3, readMetadata().lastSequenceNumber());\n  }\n","date":"2020-06-03 06:39:25","endLine":212,"groupId":"4483","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRollBack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7b/e092a1aba8d03ccbdbbb3aef755a4e2ded33bf.src","preCode":"  public void testRollBack() {\n    table.newFastAppend().appendFile(FILE_A).commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newFastAppend().appendFile(FILE_B).commit();\n    Snapshot snap2 = table.currentSnapshot();\n    long commitId2 = snap2.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(snap1, snap2, 2, FILE_B);\n    validateManifest(manifestFile, seqs(2), ids(commitId2), files(FILE_B));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    table.manageSnapshots().rollbackTo(commitId1).commit();\n    Snapshot snap3 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    table.newFastAppend().appendFile(FILE_C).commit();\n    Snapshot snap4 = table.currentSnapshot();\n    long commitId4 = snap4.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(snap3, snap4, 3, FILE_C);\n    validateManifest(manifestFile, seqs(3), ids(commitId4), files(FILE_C));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 3, snap4.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 3\", 3, readMetadata().lastSequenceNumber());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2020-06-03 06:39:25","commitOrder":1,"curCode":"  public void testExpirationInTransaction() {\n    table.newFastAppend().appendFile(FILE_A).commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend().appendFile(FILE_B).commit();\n    Snapshot snap2 = table.currentSnapshot();\n    long commitId2 = snap2.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(snap1, snap2, 2, FILE_B);\n    validateManifest(manifestFile, seqs(2), ids(commitId2), files(FILE_B));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    Transaction txn = table.newTransaction();\n    txn.expireSnapshots().expireSnapshotId(commitId1).commit();\n    txn.commitTransaction();\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n  }\n","date":"2020-06-03 06:39:25","endLine":334,"groupId":"3534","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpirationInTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7b/e092a1aba8d03ccbdbbb3aef755a4e2ded33bf.src","preCode":"  public void testExpirationInTransaction() {\n    table.newFastAppend().appendFile(FILE_A).commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend().appendFile(FILE_B).commit();\n    Snapshot snap2 = table.currentSnapshot();\n    long commitId2 = snap2.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(snap1, snap2, 2, FILE_B);\n    validateManifest(manifestFile, seqs(2), ids(commitId2), files(FILE_B));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    Transaction txn = table.newTransaction();\n    txn.expireSnapshots().expireSnapshotId(commitId1).commit();\n    txn.commitTransaction();\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"B"}],"commitId":"e1399fd4c78a4d06e7840afc9aa9a3d45ca548d5","commitMessage":"@@@Add unit tests for sequence numbers (#974)\n\n","date":"2020-06-03 06:39:25","modifiedFileCount":"4","status":"B","submitter":"Chen Junjie"},{"authorTime":"2020-06-03 09:11:14","codes":[{"authorDate":"2020-06-03 09:11:14","commitOrder":2,"curCode":"  public void testRollBack() {\n    table.newFastAppend().appendFile(FILE_A).commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = table.currentSnapshot().allManifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newFastAppend().appendFile(FILE_B).commit();\n    Snapshot snap2 = table.currentSnapshot();\n    long commitId2 = snap2.snapshotId();\n    manifestFile = table.currentSnapshot().allManifests().get(0);\n    validateSnapshot(snap1, snap2, 2, FILE_B);\n    validateManifest(manifestFile, seqs(2), ids(commitId2), files(FILE_B));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    table.manageSnapshots().rollbackTo(commitId1).commit();\n    Snapshot snap3 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    table.newFastAppend().appendFile(FILE_C).commit();\n    Snapshot snap4 = table.currentSnapshot();\n    long commitId4 = snap4.snapshotId();\n    manifestFile = table.currentSnapshot().allManifests().get(0);\n    validateSnapshot(snap3, snap4, 3, FILE_C);\n    validateManifest(manifestFile, seqs(3), ids(commitId4), files(FILE_C));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 3, snap4.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 3\", 3, readMetadata().lastSequenceNumber());\n  }\n","date":"2020-06-03 09:11:14","endLine":212,"groupId":"101740","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRollBack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/55/cefcfe7a2e2a599c054fa59cc579db2f2376fb.src","preCode":"  public void testRollBack() {\n    table.newFastAppend().appendFile(FILE_A).commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newFastAppend().appendFile(FILE_B).commit();\n    Snapshot snap2 = table.currentSnapshot();\n    long commitId2 = snap2.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(snap1, snap2, 2, FILE_B);\n    validateManifest(manifestFile, seqs(2), ids(commitId2), files(FILE_B));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    table.manageSnapshots().rollbackTo(commitId1).commit();\n    Snapshot snap3 = table.currentSnapshot();\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap3.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    table.newFastAppend().appendFile(FILE_C).commit();\n    Snapshot snap4 = table.currentSnapshot();\n    long commitId4 = snap4.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(snap3, snap4, 3, FILE_C);\n    validateManifest(manifestFile, seqs(3), ids(commitId4), files(FILE_C));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 3, snap4.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 3\", 3, readMetadata().lastSequenceNumber());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2020-06-03 09:11:14","commitOrder":2,"curCode":"  public void testExpirationInTransaction() {\n    table.newFastAppend().appendFile(FILE_A).commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = table.currentSnapshot().allManifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend().appendFile(FILE_B).commit();\n    Snapshot snap2 = table.currentSnapshot();\n    long commitId2 = snap2.snapshotId();\n    manifestFile = table.currentSnapshot().allManifests().get(0);\n    validateSnapshot(snap1, snap2, 2, FILE_B);\n    validateManifest(manifestFile, seqs(2), ids(commitId2), files(FILE_B));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    Transaction txn = table.newTransaction();\n    txn.expireSnapshots().expireSnapshotId(commitId1).commit();\n    txn.commitTransaction();\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n  }\n","date":"2020-06-03 09:11:14","endLine":334,"groupId":"101740","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpirationInTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/55/cefcfe7a2e2a599c054fa59cc579db2f2376fb.src","preCode":"  public void testExpirationInTransaction() {\n    table.newFastAppend().appendFile(FILE_A).commit();\n    Snapshot snap1 = table.currentSnapshot();\n    long commitId1 = snap1.snapshotId();\n    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(null, snap1, 1, FILE_A);\n    validateManifest(manifestFile, seqs(1), ids(commitId1), files(FILE_A));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n\n    table.newAppend().appendFile(FILE_B).commit();\n    Snapshot snap2 = table.currentSnapshot();\n    long commitId2 = snap2.snapshotId();\n    manifestFile = table.currentSnapshot().manifests().get(0);\n    validateSnapshot(snap1, snap2, 2, FILE_B);\n    validateManifest(manifestFile, seqs(2), ids(commitId2), files(FILE_B));\n    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n\n    Transaction txn = table.newTransaction();\n    txn.expireSnapshots().expireSnapshotId(commitId1).commit();\n    txn.commitTransaction();\n    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, readMetadata().lastSequenceNumber());\n  }\n","realPath":"core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"}],"commitId":"509ab5683c860906d80a074d8c66d13edf4fdaf6","commitMessage":"@@@Update sequence number tests to use allManifests (#1087)\n\n","date":"2020-06-03 09:11:14","modifiedFileCount":"1","status":"M","submitter":"Ryan Blue"}]
