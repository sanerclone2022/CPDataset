[{"authorTime":"2021-09-24 07:25:33","codes":[{"authorDate":"2021-09-24 07:25:33","commitOrder":1,"curCode":"  public void testClusteredDataWriterOutOfOrderPartitions() throws IOException {\n    table.updateSpec()\n        .addField(Expressions.ref(\"data\"))\n        .commit();\n\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    ClusteredDataWriter<T> writer = new ClusteredDataWriter<>(\n        writerFactory, fileFactory, table.io(),\n        fileFormat, TARGET_FILE_SIZE);\n\n    PartitionSpec spec = table.spec();\n\n    writer.write(toRow(1, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(2, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(3, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(4, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(5, \"ccc\"), spec, partitionKey(spec, \"ccc\"));\n\n    AssertHelpers.assertThrows(\"Should fail to write out of order partitions\",\n        IllegalStateException.class, \"Encountered records that belong to already closed files\",\n        () -> {\n          try {\n            writer.write(toRow(6, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n          } catch (IOException e) {\n            throw new UncheckedIOException(e);\n          }\n        });\n\n    writer.close();\n  }\n","date":"2021-09-24 07:25:33","endLine":164,"groupId":"1106","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusteredDataWriterOutOfOrderPartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/1ccc5af621bb5c52d308dcdeca6e6e0d3e4515.src","preCode":"  public void testClusteredDataWriterOutOfOrderPartitions() throws IOException {\n    table.updateSpec()\n        .addField(Expressions.ref(\"data\"))\n        .commit();\n\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    ClusteredDataWriter<T> writer = new ClusteredDataWriter<>(\n        writerFactory, fileFactory, table.io(),\n        fileFormat, TARGET_FILE_SIZE);\n\n    PartitionSpec spec = table.spec();\n\n    writer.write(toRow(1, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(2, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(3, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(4, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(5, \"ccc\"), spec, partitionKey(spec, \"ccc\"));\n\n    AssertHelpers.assertThrows(\"Should fail to write out of order partitions\",\n        IllegalStateException.class, \"Encountered records that belong to already closed files\",\n        () -> {\n          try {\n            writer.write(toRow(6, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n          } catch (IOException e) {\n            throw new UncheckedIOException(e);\n          }\n        });\n\n    writer.close();\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/io/TestPartitioningWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"},{"authorDate":"2021-09-24 07:25:33","commitOrder":1,"curCode":"  public void testFanoutDataWriterMultiplePartitions() throws IOException {\n    table.updateSpec()\n        .addField(Expressions.ref(\"data\"))\n        .commit();\n\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    FanoutDataWriter<T> writer = new FanoutDataWriter<>(\n        writerFactory, fileFactory, table.io(),\n        fileFormat, TARGET_FILE_SIZE);\n\n    PartitionSpec spec = table.spec();\n\n    writer.write(toRow(1, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(3, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(2, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(4, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(5, \"ccc\"), spec, partitionKey(spec, \"ccc\"));\n\n    writer.close();\n\n    DataWriteResult result = writer.result();\n    Assert.assertEquals(\"Must be 3 data files\", 3, result.dataFiles().size());\n\n    RowDelta rowDelta = table.newRowDelta();\n    result.dataFiles().forEach(rowDelta::addRows);\n    rowDelta.commit();\n\n    List<T> expectedRows = ImmutableList.of(\n        toRow(1, \"aaa\"),\n        toRow(2, \"aaa\"),\n        toRow(3, \"bbb\"),\n        toRow(4, \"bbb\"),\n        toRow(5, \"ccc\")\n    );\n    Assert.assertEquals(\"Records should match\", toSet(expectedRows), actualRowSet(\"*\"));\n  }\n","date":"2021-09-24 07:25:33","endLine":534,"groupId":"1113","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFanoutDataWriterMultiplePartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/1ccc5af621bb5c52d308dcdeca6e6e0d3e4515.src","preCode":"  public void testFanoutDataWriterMultiplePartitions() throws IOException {\n    table.updateSpec()\n        .addField(Expressions.ref(\"data\"))\n        .commit();\n\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    FanoutDataWriter<T> writer = new FanoutDataWriter<>(\n        writerFactory, fileFactory, table.io(),\n        fileFormat, TARGET_FILE_SIZE);\n\n    PartitionSpec spec = table.spec();\n\n    writer.write(toRow(1, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(3, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(2, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(4, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(5, \"ccc\"), spec, partitionKey(spec, \"ccc\"));\n\n    writer.close();\n\n    DataWriteResult result = writer.result();\n    Assert.assertEquals(\"Must be 3 data files\", 3, result.dataFiles().size());\n\n    RowDelta rowDelta = table.newRowDelta();\n    result.dataFiles().forEach(rowDelta::addRows);\n    rowDelta.commit();\n\n    List<T> expectedRows = ImmutableList.of(\n        toRow(1, \"aaa\"),\n        toRow(2, \"aaa\"),\n        toRow(3, \"bbb\"),\n        toRow(4, \"bbb\"),\n        toRow(5, \"ccc\")\n    );\n    Assert.assertEquals(\"Records should match\", toSet(expectedRows), actualRowSet(\"*\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/io/TestPartitioningWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":499,"status":"B"}],"commitId":"11f327a2f08d95fdf8fea68412f0ae1687a3b63f","commitMessage":"@@@Core: Add PartitioningWriter (#3164)\n\n","date":"2021-09-24 07:25:33","modifiedFileCount":"8","status":"B","submitter":"Anton Okolnychyi"},{"authorTime":"2021-09-24 07:25:33","codes":[{"authorDate":"2021-09-24 10:58:57","commitOrder":2,"curCode":"  public void testClusteredDataWriterOutOfOrderPartitions() throws IOException {\n    table.updateSpec()\n        .addField(Expressions.ref(\"data\"))\n        .commit();\n\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    ClusteredDataWriter<T> writer = new ClusteredDataWriter<>(\n        writerFactory, fileFactory, table.io(),\n        fileFormat, TARGET_FILE_SIZE);\n\n    PartitionSpec spec = table.spec();\n\n    writer.write(toRow(1, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(2, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(3, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(4, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(5, \"ccc\"), spec, partitionKey(spec, \"ccc\"));\n\n    AssertHelpers.assertThrows(\"Should fail to write out of order partitions\",\n        IllegalStateException.class, \"Encountered records that belong to already closed files\",\n        () -> writer.write(toRow(6, \"aaa\"), spec, partitionKey(spec, \"aaa\")));\n\n    writer.close();\n  }\n","date":"2021-09-24 10:58:57","endLine":157,"groupId":"10669","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testClusteredDataWriterOutOfOrderPartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/05/4881af458b70b574f08b11bf2da91526aa247b.src","preCode":"  public void testClusteredDataWriterOutOfOrderPartitions() throws IOException {\n    table.updateSpec()\n        .addField(Expressions.ref(\"data\"))\n        .commit();\n\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    ClusteredDataWriter<T> writer = new ClusteredDataWriter<>(\n        writerFactory, fileFactory, table.io(),\n        fileFormat, TARGET_FILE_SIZE);\n\n    PartitionSpec spec = table.spec();\n\n    writer.write(toRow(1, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(2, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(3, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(4, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(5, \"ccc\"), spec, partitionKey(spec, \"ccc\"));\n\n    AssertHelpers.assertThrows(\"Should fail to write out of order partitions\",\n        IllegalStateException.class, \"Encountered records that belong to already closed files\",\n        () -> {\n          try {\n            writer.write(toRow(6, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n          } catch (IOException e) {\n            throw new UncheckedIOException(e);\n          }\n        });\n\n    writer.close();\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/io/TestPartitioningWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2021-09-24 07:25:33","commitOrder":2,"curCode":"  public void testFanoutDataWriterMultiplePartitions() throws IOException {\n    table.updateSpec()\n        .addField(Expressions.ref(\"data\"))\n        .commit();\n\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    FanoutDataWriter<T> writer = new FanoutDataWriter<>(\n        writerFactory, fileFactory, table.io(),\n        fileFormat, TARGET_FILE_SIZE);\n\n    PartitionSpec spec = table.spec();\n\n    writer.write(toRow(1, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(3, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(2, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(4, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(5, \"ccc\"), spec, partitionKey(spec, \"ccc\"));\n\n    writer.close();\n\n    DataWriteResult result = writer.result();\n    Assert.assertEquals(\"Must be 3 data files\", 3, result.dataFiles().size());\n\n    RowDelta rowDelta = table.newRowDelta();\n    result.dataFiles().forEach(rowDelta::addRows);\n    rowDelta.commit();\n\n    List<T> expectedRows = ImmutableList.of(\n        toRow(1, \"aaa\"),\n        toRow(2, \"aaa\"),\n        toRow(3, \"bbb\"),\n        toRow(4, \"bbb\"),\n        toRow(5, \"ccc\")\n    );\n    Assert.assertEquals(\"Records should match\", toSet(expectedRows), actualRowSet(\"*\"));\n  }\n","date":"2021-09-24 07:25:33","endLine":534,"groupId":"10669","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFanoutDataWriterMultiplePartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b0/1ccc5af621bb5c52d308dcdeca6e6e0d3e4515.src","preCode":"  public void testFanoutDataWriterMultiplePartitions() throws IOException {\n    table.updateSpec()\n        .addField(Expressions.ref(\"data\"))\n        .commit();\n\n    FileWriterFactory<T> writerFactory = newWriterFactory(table.schema());\n    FanoutDataWriter<T> writer = new FanoutDataWriter<>(\n        writerFactory, fileFactory, table.io(),\n        fileFormat, TARGET_FILE_SIZE);\n\n    PartitionSpec spec = table.spec();\n\n    writer.write(toRow(1, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(3, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(2, \"aaa\"), spec, partitionKey(spec, \"aaa\"));\n    writer.write(toRow(4, \"bbb\"), spec, partitionKey(spec, \"bbb\"));\n    writer.write(toRow(5, \"ccc\"), spec, partitionKey(spec, \"ccc\"));\n\n    writer.close();\n\n    DataWriteResult result = writer.result();\n    Assert.assertEquals(\"Must be 3 data files\", 3, result.dataFiles().size());\n\n    RowDelta rowDelta = table.newRowDelta();\n    result.dataFiles().forEach(rowDelta::addRows);\n    rowDelta.commit();\n\n    List<T> expectedRows = ImmutableList.of(\n        toRow(1, \"aaa\"),\n        toRow(2, \"aaa\"),\n        toRow(3, \"bbb\"),\n        toRow(4, \"bbb\"),\n        toRow(5, \"ccc\")\n    );\n    Assert.assertEquals(\"Records should match\", toSet(expectedRows), actualRowSet(\"*\"));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/io/TestPartitioningWriters.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":499,"status":"N"}],"commitId":"31efe350218a52a0db14993284425109f0529b61","commitMessage":"@@@Core: Avoid throwing IOException in new write methods (#3170)\n\n","date":"2021-09-24 10:58:57","modifiedFileCount":"9","status":"M","submitter":"Anton Okolnychyi"}]
