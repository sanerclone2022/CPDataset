[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testReorderedProjection() throws Exception {\n\r\n\r\n\r\n\n    Schema schema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(schema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema reordered = new Schema(\n        Types.NestedField.optional(2, \"missing_1\", Types.StringType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get()),\n        Types.NestedField.optional(3, \"missing_2\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"reordered_projection\", schema, reordered, record);\n\n    Assert.assertNull(\"Should contain the correct 0 value\", projected.get(0));\n    Assert.assertEquals(\"Should contain the correct 1 value\", \"test\", projected.get(1).toString());\n    Assert.assertNull(\"Should contain the correct 2 value\", projected.get(2));\n  }\n","date":"2019-03-21 07:25:05","endLine":129,"groupId":"426","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReorderedProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0c/e4f180ad131a18e53b87a76fc14671429d4970.src","preCode":"  public void testReorderedProjection() throws Exception {\n\r\n\r\n\r\n\n    Schema schema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(schema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema reordered = new Schema(\n        Types.NestedField.optional(2, \"missing_1\", Types.StringType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get()),\n        Types.NestedField.optional(3, \"missing_2\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"reordered_projection\", schema, reordered, record);\n\n    Assert.assertNull(\"Should contain the correct 0 value\", projected.get(0));\n    Assert.assertEquals(\"Should contain the correct 1 value\", \"test\", projected.get(1).toString());\n    Assert.assertNull(\"Should contain the correct 2 value\", projected.get(2));\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public void testReorderedProjection() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = GenericRecord.create(schema.asStruct());\n    record.setField(\"id\", 34L);\n    record.setField(\"data\", \"test\");\n\n    Schema reordered = new Schema(\n        Types.NestedField.optional(2, \"missing_1\", Types.StringType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get()),\n        Types.NestedField.optional(3, \"missing_2\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"full_projection\", schema, reordered, record);\n\n    Assert.assertNull(\"Should contain the correct 0 value\", projected.get(0));\n    Assert.assertEquals(\"Should contain the correct 1 value\", \"test\", projected.get(1).toString());\n    Assert.assertNull(\"Should contain the correct 2 value\", projected.get(2));\n  }\n","date":"2019-03-21 07:25:05","endLine":110,"groupId":"570","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderedProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/54/b76d8c8647b7c4b03aeeaf6105db31e797b41e.src","preCode":"  public void testReorderedProjection() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = GenericRecord.create(schema.asStruct());\n    record.setField(\"id\", 34L);\n    record.setField(\"data\", \"test\");\n\n    Schema reordered = new Schema(\n        Types.NestedField.optional(2, \"missing_1\", Types.StringType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get()),\n        Types.NestedField.optional(3, \"missing_2\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"full_projection\", schema, reordered, record);\n\n    Assert.assertNull(\"Should contain the correct 0 value\", projected.get(0));\n    Assert.assertEquals(\"Should contain the correct 1 value\", \"test\", projected.get(1).toString());\n    Assert.assertNull(\"Should contain the correct 2 value\", projected.get(2));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2020-04-10 00:11:46","commitOrder":2,"curCode":"  public void testReorderedProjection() throws Exception {\n\r\n\r\n\r\n\n    Schema schema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = GenericRecord.create(schema);\n    record.setField(\"id\", 34L);\n    record.setField(\"data\", \"test\");\n\n    Schema reordered = new Schema(\n        Types.NestedField.optional(2, \"missing_1\", Types.StringType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get()),\n        Types.NestedField.optional(3, \"missing_2\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"reordered_projection\", schema, reordered, record);\n\n    Assert.assertNull(\"Should contain the correct 0 value\", projected.get(0));\n    Assert.assertEquals(\"Should contain the correct 1 value\", \"test\", projected.get(1).toString());\n    Assert.assertNull(\"Should contain the correct 2 value\", projected.get(2));\n  }\n","date":"2020-04-10 00:11:46","endLine":129,"groupId":"10299","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReorderedProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/4f/955a7d1ee5947423ec86a729d29e93fba8bd8d.src","preCode":"  public void testReorderedProjection() throws Exception {\n\r\n\r\n\r\n\n    Schema schema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = new Record(AvroSchemaUtil.convert(schema, \"table\"));\n    record.put(\"id\", 34L);\n    record.put(\"data\", \"test\");\n\n    Schema reordered = new Schema(\n        Types.NestedField.optional(2, \"missing_1\", Types.StringType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get()),\n        Types.NestedField.optional(3, \"missing_2\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"reordered_projection\", schema, reordered, record);\n\n    Assert.assertNull(\"Should contain the correct 0 value\", projected.get(0));\n    Assert.assertEquals(\"Should contain the correct 1 value\", \"test\", projected.get(1).toString());\n    Assert.assertNull(\"Should contain the correct 2 value\", projected.get(2));\n  }\n","realPath":"spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public void testReorderedProjection() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = GenericRecord.create(schema.asStruct());\n    record.setField(\"id\", 34L);\n    record.setField(\"data\", \"test\");\n\n    Schema reordered = new Schema(\n        Types.NestedField.optional(2, \"missing_1\", Types.StringType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get()),\n        Types.NestedField.optional(3, \"missing_2\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"full_projection\", schema, reordered, record);\n\n    Assert.assertNull(\"Should contain the correct 0 value\", projected.get(0));\n    Assert.assertEquals(\"Should contain the correct 1 value\", \"test\", projected.get(1).toString());\n    Assert.assertNull(\"Should contain the correct 2 value\", projected.get(2));\n  }\n","date":"2019-03-21 07:25:05","endLine":110,"groupId":"10299","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderedProjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/54/b76d8c8647b7c4b03aeeaf6105db31e797b41e.src","preCode":"  public void testReorderedProjection() throws Exception {\n    Schema schema = new Schema(\n        Types.NestedField.required(0, \"id\", Types.LongType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get())\n    );\n\n    Record record = GenericRecord.create(schema.asStruct());\n    record.setField(\"id\", 34L);\n    record.setField(\"data\", \"test\");\n\n    Schema reordered = new Schema(\n        Types.NestedField.optional(2, \"missing_1\", Types.StringType.get()),\n        Types.NestedField.optional(1, \"data\", Types.StringType.get()),\n        Types.NestedField.optional(3, \"missing_2\", Types.LongType.get())\n    );\n\n    Record projected = writeAndRead(\"full_projection\", schema, reordered, record);\n\n    Assert.assertNull(\"Should contain the correct 0 value\", projected.get(0));\n    Assert.assertEquals(\"Should contain the correct 1 value\", \"test\", projected.get(1).toString());\n    Assert.assertNull(\"Should contain the correct 2 value\", projected.get(2));\n  }\n","realPath":"data/src/test/java/org/apache/iceberg/data/TestReadProjection.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"}],"commitId":"898c122118ba99847216c80ca7e0d12821133a8a","commitMessage":"@@@Spark: Add ORC to parameterized tests (#892)\n\n* Spark: Add ORC to parameterized tests.\n\n* Fix GenericsHelpers.\n\n* Build: Increase JVM heap size.\n\n* Fix review comments.\n\n* Revert \"Build: Increase JVM heap size.\"\n\nThis reverts commit 1f0996113923c5d279a5877a03af2db7b7e4e076.\n\n* Avoid keeping records in memory for TestDataFrameWrites.","date":"2020-04-10 00:11:46","modifiedFileCount":"6","status":"M","submitter":"Ryan Blue"}]
