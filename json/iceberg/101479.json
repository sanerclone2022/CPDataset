[{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public Type list(Types.ListType list, Supplier<Type> elementTypeFuture) {\n    Preconditions.checkArgument(sourceType.isListType(), \"Not a list: \" + sourceType);\n\n    Types.ListType sourceList = sourceType.asListType();\n    int sourceElementId = sourceList.elementId();\n\n    this.sourceType = sourceList.elementType();\n    try {\n      if (list.isElementOptional()) {\n        return Types.ListType.ofOptional(sourceElementId, elementTypeFuture.get());\n      } else {\n        return Types.ListType.ofRequired(sourceElementId, elementTypeFuture.get());\n      }\n\n    } finally {\n      this.sourceType = sourceList;\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":103,"groupId":"206","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(Types.ListTypelist@Supplier<Type>elementTypeFuture)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/98/cced66c38cf88c0543cacf44c96668de9aa3d4.src","preCode":"  public Type list(Types.ListType list, Supplier<Type> elementTypeFuture) {\n    Preconditions.checkArgument(sourceType.isListType(), \"Not a list: \" + sourceType);\n\n    Types.ListType sourceList = sourceType.asListType();\n    int sourceElementId = sourceList.elementId();\n\n    this.sourceType = sourceList.elementType();\n    try {\n      if (list.isElementOptional()) {\n        return Types.ListType.ofOptional(sourceElementId, elementTypeFuture.get());\n      } else {\n        return Types.ListType.ofRequired(sourceElementId, elementTypeFuture.get());\n      }\n\n    } finally {\n      this.sourceType = sourceList;\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/types/ReassignIds.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2019-03-21 07:25:05","commitOrder":1,"curCode":"  public Type list(Types.ListType list, Supplier<Type> future) {\n    int newId = nextId.get();\n    if (list.isElementOptional()) {\n      return Types.ListType.ofOptional(newId, future.get());\n    } else {\n      return Types.ListType.ofRequired(newId, future.get());\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":78,"groupId":"206","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(Types.ListTypelist@Supplier<Type>future)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c8/006da3710f2bc50c0e2108d07119066a011620.src","preCode":"  public Type list(Types.ListType list, Supplier<Type> future) {\n    int newId = nextId.get();\n    if (list.isElementOptional()) {\n      return Types.ListType.ofOptional(newId, future.get());\n    } else {\n      return Types.ListType.ofRequired(newId, future.get());\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/types/AssignFreshIds.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"c20927801a369104e5ea510470e1cf7c8e28b808","commitMessage":"@@@Rename packages to org.apache.iceberg (#138)\n\n* Move all packages by directory (but don't change references)\n* Rename all references from com.netflix.iceberg to org.apache.iceberg\n* Reorganize all imports due to new package name.\n  Previous commit only did a string find-replace.  which made all the imports out of order. Use an IDE to auto-sort all imports.\n\n","date":"2019-03-21 07:25:05","modifiedFileCount":"0","status":"B","submitter":"mccheah"},{"authorTime":"2019-03-21 07:25:05","codes":[{"authorDate":"2019-04-04 00:12:28","commitOrder":2,"curCode":"  public Type list(Types.ListType list, Supplier<Type> elementTypeFuture) {\n    Preconditions.checkArgument(sourceType.isListType(), \"Not a list: %s\", sourceType);\n\n    Types.ListType sourceList = sourceType.asListType();\n    int sourceElementId = sourceList.elementId();\n\n    this.sourceType = sourceList.elementType();\n    try {\n      if (list.isElementOptional()) {\n        return Types.ListType.ofOptional(sourceElementId, elementTypeFuture.get());\n      } else {\n        return Types.ListType.ofRequired(sourceElementId, elementTypeFuture.get());\n      }\n\n    } finally {\n      this.sourceType = sourceList;\n    }\n  }\n","date":"2019-04-04 00:12:28","endLine":103,"groupId":"206","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(Types.ListTypelist@Supplier<Type>elementTypeFuture)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/2a/7314570061f47145790fc6790d689d718cfbe5.src","preCode":"  public Type list(Types.ListType list, Supplier<Type> elementTypeFuture) {\n    Preconditions.checkArgument(sourceType.isListType(), \"Not a list: \" + sourceType);\n\n    Types.ListType sourceList = sourceType.asListType();\n    int sourceElementId = sourceList.elementId();\n\n    this.sourceType = sourceList.elementType();\n    try {\n      if (list.isElementOptional()) {\n        return Types.ListType.ofOptional(sourceElementId, elementTypeFuture.get());\n      } else {\n        return Types.ListType.ofRequired(sourceElementId, elementTypeFuture.get());\n      }\n\n    } finally {\n      this.sourceType = sourceList;\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/types/ReassignIds.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2019-03-21 07:25:05","commitOrder":2,"curCode":"  public Type list(Types.ListType list, Supplier<Type> future) {\n    int newId = nextId.get();\n    if (list.isElementOptional()) {\n      return Types.ListType.ofOptional(newId, future.get());\n    } else {\n      return Types.ListType.ofRequired(newId, future.get());\n    }\n  }\n","date":"2019-03-21 07:25:05","endLine":78,"groupId":"206","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"list","params":"(Types.ListTypelist@Supplier<Type>future)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c8/006da3710f2bc50c0e2108d07119066a011620.src","preCode":"  public Type list(Types.ListType list, Supplier<Type> future) {\n    int newId = nextId.get();\n    if (list.isElementOptional()) {\n      return Types.ListType.ofOptional(newId, future.get());\n    } else {\n      return Types.ListType.ofRequired(newId, future.get());\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/types/AssignFreshIds.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"439a20d077f1746564f2e203e5904cd314ea8550","commitMessage":"@@@Applies the Baseline plugin for iceberg-api only. (#143)\n\n","date":"2019-04-04 00:12:28","modifiedFileCount":"45","status":"M","submitter":"mccheah"},{"authorTime":"2020-09-24 00:20:34","codes":[{"authorDate":"2019-04-04 00:12:28","commitOrder":3,"curCode":"  public Type list(Types.ListType list, Supplier<Type> elementTypeFuture) {\n    Preconditions.checkArgument(sourceType.isListType(), \"Not a list: %s\", sourceType);\n\n    Types.ListType sourceList = sourceType.asListType();\n    int sourceElementId = sourceList.elementId();\n\n    this.sourceType = sourceList.elementType();\n    try {\n      if (list.isElementOptional()) {\n        return Types.ListType.ofOptional(sourceElementId, elementTypeFuture.get());\n      } else {\n        return Types.ListType.ofRequired(sourceElementId, elementTypeFuture.get());\n      }\n\n    } finally {\n      this.sourceType = sourceList;\n    }\n  }\n","date":"2019-04-04 00:12:28","endLine":103,"groupId":"101479","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"list","params":"(Types.ListTypelist@Supplier<Type>elementTypeFuture)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/2a/7314570061f47145790fc6790d689d718cfbe5.src","preCode":"  public Type list(Types.ListType list, Supplier<Type> elementTypeFuture) {\n    Preconditions.checkArgument(sourceType.isListType(), \"Not a list: %s\", sourceType);\n\n    Types.ListType sourceList = sourceType.asListType();\n    int sourceElementId = sourceList.elementId();\n\n    this.sourceType = sourceList.elementType();\n    try {\n      if (list.isElementOptional()) {\n        return Types.ListType.ofOptional(sourceElementId, elementTypeFuture.get());\n      } else {\n        return Types.ListType.ofRequired(sourceElementId, elementTypeFuture.get());\n      }\n\n    } finally {\n      this.sourceType = sourceList;\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/types/ReassignIds.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2020-09-24 00:20:34","commitOrder":3,"curCode":"  public Type list(Types.ListType list, Supplier<Type> future) {\n    int newId = idFor(name(list.elementId()));\n    if (list.isElementOptional()) {\n      return Types.ListType.ofOptional(newId, future.get());\n    } else {\n      return Types.ListType.ofRequired(newId, future.get());\n    }\n  }\n","date":"2020-09-24 00:20:34","endLine":115,"groupId":"101479","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"list","params":"(Types.ListTypelist@Supplier<Type>future)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d5/5514ab270eee68e09f5aa23bbefeb6469506d8.src","preCode":"  public Type list(Types.ListType list, Supplier<Type> future) {\n    int newId = nextId.get();\n    if (list.isElementOptional()) {\n      return Types.ListType.ofOptional(newId, future.get());\n    } else {\n      return Types.ListType.ofRequired(newId, future.get());\n    }\n  }\n","realPath":"api/src/main/java/org/apache/iceberg/types/AssignFreshIds.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"2f2f461d5f280dff4de486fc54d0123591f0fe0a","commitMessage":"@@@Core: Fix table replacement by preserving existing field IDs (#1475)\n\n","date":"2020-09-24 00:20:34","modifiedFileCount":"4","status":"M","submitter":"Ryan Blue"}]
