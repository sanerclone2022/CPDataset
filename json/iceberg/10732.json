[{"authorTime":"2020-06-20 09:02:23","codes":[{"authorDate":"2020-06-30 08:56:05","commitOrder":2,"curCode":"  private List<Record> testRecords(org.apache.avro.Schema avroSchema) {\n    return Lists.newArrayList(\n        record(avroSchema, 0L, timestamp(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(avroSchema, 1L, timestamp(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(avroSchema, 2L, timestamp(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(avroSchema, 3L, timestamp(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(avroSchema, 4L, timestamp(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(avroSchema, 5L, timestamp(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(avroSchema, 6L, timestamp(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(avroSchema, 7L, timestamp(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(avroSchema, 8L, timestamp(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(avroSchema, 9L, timestamp(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","date":"2020-06-30 08:56:05","endLine":550,"groupId":"1394","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecords","params":"(org.apache.avro.SchemaavroSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7d/d308dcbed19b9615af2fe851dd00df86c8c855.src","preCode":"  private List<Record> testRecords(org.apache.avro.Schema avroSchema) {\n    return Lists.newArrayList(\n        record(avroSchema, 0L, timestamp(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(avroSchema, 1L, timestamp(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(avroSchema, 2L, timestamp(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(avroSchema, 3L, timestamp(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(avroSchema, 4L, timestamp(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(avroSchema, 5L, timestamp(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(avroSchema, 6L, timestamp(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(avroSchema, 7L, timestamp(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(avroSchema, 8L, timestamp(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(avroSchema, 9L, timestamp(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","realPath":"spark3/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"B"},{"authorDate":"2020-06-20 09:02:23","commitOrder":2,"curCode":"  private List<Record> testRecords(Schema schema) {\n    return Lists.newArrayList(\n        record(schema, 0L, parse(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(schema, 1L, parse(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(schema, 2L, parse(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(schema, 3L, parse(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(schema, 4L, parse(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(schema, 5L, parse(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(schema, 6L, parse(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(schema, 7L, parse(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(schema, 8L, parse(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(schema, 9L, parse(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","date":"2020-06-20 09:02:23","endLine":609,"groupId":"4963","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecords","params":"(Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c0/d676ec8aa99c9101f89d24d70e070468572cda.src","preCode":"  private List<Record> testRecords(Schema schema) {\n    return Lists.newArrayList(\n        record(schema, 0L, parse(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(schema, 1L, parse(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(schema, 2L, parse(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(schema, 3L, parse(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(schema, 4L, parse(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(schema, 5L, parse(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(schema, 6L, parse(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(schema, 7L, parse(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(schema, 8L, parse(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(schema, 9L, parse(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","realPath":"spark2/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"NB"}],"commitId":"51c930e33867e54b3d7e0159b11d6b9c4bc81f1a","commitMessage":"@@@Spark: Add Spark 3 data source classes (#1124)\n\n","date":"2020-06-30 08:56:05","modifiedFileCount":"7","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-06-20 09:02:23","codes":[{"authorDate":"2020-07-14 05:27:36","commitOrder":3,"curCode":"  private List<Record> testRecords(Schema schema) {\n    return Lists.newArrayList(\n        record(schema, 0L, parse(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(schema, 1L, parse(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(schema, 2L, parse(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(schema, 3L, parse(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(schema, 4L, parse(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(schema, 5L, parse(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(schema, 6L, parse(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(schema, 7L, parse(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(schema, 8L, parse(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(schema, 9L, parse(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","date":"2020-07-14 05:27:36","endLine":569,"groupId":"4963","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecords","params":"(Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/9b/e99383873ff072f8b9a1577c9034bf17a6d465.src","preCode":"  private List<Record> testRecords(org.apache.avro.Schema avroSchema) {\n    return Lists.newArrayList(\n        record(avroSchema, 0L, timestamp(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(avroSchema, 1L, timestamp(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(avroSchema, 2L, timestamp(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(avroSchema, 3L, timestamp(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(avroSchema, 4L, timestamp(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(avroSchema, 5L, timestamp(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(avroSchema, 6L, timestamp(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(avroSchema, 7L, timestamp(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(avroSchema, 8L, timestamp(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(avroSchema, 9L, timestamp(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","realPath":"spark3/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":556,"status":"M"},{"authorDate":"2020-06-20 09:02:23","commitOrder":3,"curCode":"  private List<Record> testRecords(Schema schema) {\n    return Lists.newArrayList(\n        record(schema, 0L, parse(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(schema, 1L, parse(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(schema, 2L, parse(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(schema, 3L, parse(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(schema, 4L, parse(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(schema, 5L, parse(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(schema, 6L, parse(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(schema, 7L, parse(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(schema, 8L, parse(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(schema, 9L, parse(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","date":"2020-06-20 09:02:23","endLine":609,"groupId":"4963","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecords","params":"(Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c0/d676ec8aa99c9101f89d24d70e070468572cda.src","preCode":"  private List<Record> testRecords(Schema schema) {\n    return Lists.newArrayList(\n        record(schema, 0L, parse(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(schema, 1L, parse(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(schema, 2L, parse(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(schema, 3L, parse(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(schema, 4L, parse(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(schema, 5L, parse(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(schema, 6L, parse(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(schema, 7L, parse(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(schema, 8L, parse(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(schema, 9L, parse(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","realPath":"spark2/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"N"}],"commitId":"6fab8f57bdb7e5fe7eadc3ff41558581338e1b69","commitMessage":"@@@Spark: Support ORC vectorized reads (#1189)\n\n","date":"2020-07-14 05:27:36","modifiedFileCount":"25","status":"M","submitter":"Shardul Mahadik"},{"authorTime":"2021-01-17 03:48:59","codes":[{"authorDate":"2021-01-17 03:48:59","commitOrder":4,"curCode":"  private List<Record> testRecords(Schema schema) {\n    return Lists.newArrayList(\n        record(schema, 0L, parse(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(schema, 1L, parse(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(schema, 2L, parse(\"2017-12-22T06:02:09.243857+00:00\"), \"\"),\n        record(schema, 3L, parse(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(schema, 4L, parse(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(schema, 5L, parse(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(schema, 6L, parse(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(schema, 7L, parse(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(schema, 8L, parse(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(schema, 9L, parse(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","date":"2021-01-17 03:48:59","endLine":541,"groupId":"10732","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecords","params":"(Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b2/93e30dcd3865d187458d5f64f652eed32603c6.src","preCode":"  private List<Record> testRecords(Schema schema) {\n    return Lists.newArrayList(\n        record(schema, 0L, parse(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(schema, 1L, parse(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(schema, 2L, parse(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(schema, 3L, parse(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(schema, 4L, parse(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(schema, 5L, parse(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(schema, 6L, parse(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(schema, 7L, parse(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(schema, 8L, parse(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(schema, 9L, parse(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","realPath":"spark3/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"M"},{"authorDate":"2021-01-17 03:48:59","commitOrder":4,"curCode":"  private List<Record> testRecords(Schema schema) {\n    return Lists.newArrayList(\n        record(schema, 0L, parse(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(schema, 1L, parse(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(schema, 2L, parse(\"2017-12-22T06:02:09.243857+00:00\"), \"\"),\n        record(schema, 3L, parse(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(schema, 4L, parse(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(schema, 5L, parse(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(schema, 6L, parse(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(schema, 7L, parse(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(schema, 8L, parse(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(schema, 9L, parse(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","date":"2021-01-17 03:48:59","endLine":587,"groupId":"10732","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecords","params":"(Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/22/e023f9efd3f72d62fe92c09efec7b401b0414e.src","preCode":"  private List<Record> testRecords(Schema schema) {\n    return Lists.newArrayList(\n        record(schema, 0L, parse(\"2017-12-22T09:20:44.294658+00:00\"), \"junction\"),\n        record(schema, 1L, parse(\"2017-12-22T07:15:34.582910+00:00\"), \"alligator\"),\n        record(schema, 2L, parse(\"2017-12-22T06:02:09.243857+00:00\"), \"forrest\"),\n        record(schema, 3L, parse(\"2017-12-22T03:10:11.134509+00:00\"), \"clapping\"),\n        record(schema, 4L, parse(\"2017-12-22T00:34:00.184671+00:00\"), \"brush\"),\n        record(schema, 5L, parse(\"2017-12-21T22:20:08.935889+00:00\"), \"trap\"),\n        record(schema, 6L, parse(\"2017-12-21T21:55:30.589712+00:00\"), \"element\"),\n        record(schema, 7L, parse(\"2017-12-21T17:31:14.532797+00:00\"), \"limited\"),\n        record(schema, 8L, parse(\"2017-12-21T15:21:51.237521+00:00\"), \"global\"),\n        record(schema, 9L, parse(\"2017-12-21T15:02:15.230570+00:00\"), \"goldfish\")\n    );\n  }\n","realPath":"spark2/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"a59a1690d87f119cd7db48c34ebac7d76fe4842d","commitMessage":"@@@Core: Fix truncate with zero-length strings (#2081)\n\n","date":"2021-01-17 03:48:59","modifiedFileCount":"5","status":"M","submitter":"Kyle Bendickson"}]
