[{"authorTime":"2020-09-04 02:04:52","codes":[{"authorDate":"2020-09-04 02:04:52","commitOrder":1,"curCode":"  public void testCreateTableBuilder() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n\n    try {\n      Table table = catalog.buildTable(tableIdent, schema)\n          .withPartitionSpec(spec)\n          .withLocation(location)\n          .withProperty(\"key1\", \"value1\")\n          .withProperty(\"key2\", \"value2\")\n          .create();\n\n      Assert.assertEquals(location, table.location());\n      Assert.assertEquals(2, table.schema().columns().size());\n      Assert.assertEquals(1, table.spec().fields().size());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","date":"2020-09-04 02:04:52","endLine":87,"groupId":"1798","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/06/1c43783c6044f86b80e3cab81f6c8736221abf.src","preCode":"  public void testCreateTableBuilder() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n\n    try {\n      Table table = catalog.buildTable(tableIdent, schema)\n          .withPartitionSpec(spec)\n          .withLocation(location)\n          .withProperty(\"key1\", \"value1\")\n          .withProperty(\"key2\", \"value2\")\n          .create();\n\n      Assert.assertEquals(location, table.location());\n      Assert.assertEquals(2, table.schema().columns().size());\n      Assert.assertEquals(1, table.spec().fields().size());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","realPath":"hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2020-09-04 02:04:52","commitOrder":1,"curCode":"  public void testReplaceTxnBuilder() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n\n    try {\n      Transaction createTxn = catalog.buildTable(tableIdent, schema)\n          .withPartitionSpec(spec)\n          .withLocation(location)\n          .withProperty(\"key1\", \"value1\")\n          .createOrReplaceTransaction();\n      createTxn.commitTransaction();\n\n      Table table = catalog.loadTable(tableIdent);\n      Assert.assertEquals(1, table.spec().fields().size());\n\n      String newLocation = temp.newFolder(\"tbl-2\").toString();\n\n      Transaction replaceTxn = catalog.buildTable(tableIdent, schema)\n          .withProperty(\"key2\", \"value2\")\n          .withLocation(newLocation)\n          .replaceTransaction();\n      replaceTxn.commitTransaction();\n\n      table = catalog.loadTable(tableIdent);\n      Assert.assertEquals(newLocation, table.location());\n      Assert.assertNull(table.currentSnapshot());\n      Assert.assertTrue(table.spec().isUnpartitioned());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","date":"2020-09-04 02:04:52","endLine":180,"groupId":"1800","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReplaceTxnBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/06/1c43783c6044f86b80e3cab81f6c8736221abf.src","preCode":"  public void testReplaceTxnBuilder() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n\n    try {\n      Transaction createTxn = catalog.buildTable(tableIdent, schema)\n          .withPartitionSpec(spec)\n          .withLocation(location)\n          .withProperty(\"key1\", \"value1\")\n          .createOrReplaceTransaction();\n      createTxn.commitTransaction();\n\n      Table table = catalog.loadTable(tableIdent);\n      Assert.assertEquals(1, table.spec().fields().size());\n\n      String newLocation = temp.newFolder(\"tbl-2\").toString();\n\n      Transaction replaceTxn = catalog.buildTable(tableIdent, schema)\n          .withProperty(\"key2\", \"value2\")\n          .withLocation(newLocation)\n          .replaceTransaction();\n      replaceTxn.commitTransaction();\n\n      table = catalog.loadTable(tableIdent);\n      Assert.assertEquals(newLocation, table.location());\n      Assert.assertNull(table.currentSnapshot());\n      Assert.assertTrue(table.spec().isUnpartitioned());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","realPath":"hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"594f4615f5eccbef467303c9ed56b9fc3e1ddde3","commitMessage":"@@@API: Introduce a builder API in Catalog (#1409)\n\n","date":"2020-09-04 02:04:52","modifiedFileCount":"5","status":"B","submitter":"Anton Okolnychyi"},{"authorTime":"2021-08-03 22:39:58","codes":[{"authorDate":"2020-09-04 02:04:52","commitOrder":2,"curCode":"  public void testCreateTableBuilder() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n\n    try {\n      Table table = catalog.buildTable(tableIdent, schema)\n          .withPartitionSpec(spec)\n          .withLocation(location)\n          .withProperty(\"key1\", \"value1\")\n          .withProperty(\"key2\", \"value2\")\n          .create();\n\n      Assert.assertEquals(location, table.location());\n      Assert.assertEquals(2, table.schema().columns().size());\n      Assert.assertEquals(1, table.spec().fields().size());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","date":"2020-09-04 02:04:52","endLine":87,"groupId":"10903","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateTableBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/06/1c43783c6044f86b80e3cab81f6c8736221abf.src","preCode":"  public void testCreateTableBuilder() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n\n    try {\n      Table table = catalog.buildTable(tableIdent, schema)\n          .withPartitionSpec(spec)\n          .withLocation(location)\n          .withProperty(\"key1\", \"value1\")\n          .withProperty(\"key2\", \"value2\")\n          .create();\n\n      Assert.assertEquals(location, table.location());\n      Assert.assertEquals(2, table.schema().columns().size());\n      Assert.assertEquals(1, table.spec().fields().size());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","realPath":"hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-08-03 22:39:58","commitOrder":2,"curCode":"  public void testReplaceTxnBuilder() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n\n    try {\n      Transaction createTxn = catalog.buildTable(tableIdent, schema)\n          .withPartitionSpec(spec)\n          .withLocation(location)\n          .withProperty(\"key1\", \"value1\")\n          .createOrReplaceTransaction();\n      createTxn.commitTransaction();\n\n      Table table = catalog.loadTable(tableIdent);\n      Assert.assertEquals(1, table.spec().fields().size());\n\n      String newLocation = temp.newFolder(\"tbl-2\").toString();\n\n      Transaction replaceTxn = catalog.buildTable(tableIdent, schema)\n          .withProperty(\"key2\", \"value2\")\n          .withLocation(newLocation)\n          .replaceTransaction();\n      replaceTxn.commitTransaction();\n\n      table = catalog.loadTable(tableIdent);\n      Assert.assertEquals(newLocation, table.location());\n      Assert.assertNull(table.currentSnapshot());\n      PartitionSpec v1Expected = PartitionSpec.builderFor(table.schema())\n          .alwaysNull(\"data\", \"data_bucket\")\n          .withSpecId(1)\n          .build();\n      Assert.assertEquals(\"Table should have a spec with one void field\",\n          v1Expected, table.spec());\n\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","date":"2021-08-03 22:39:58","endLine":191,"groupId":"10903","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testReplaceTxnBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/37/55e5f39017ce392c63f0b65ab9ade0b5505718.src","preCode":"  public void testReplaceTxnBuilder() throws Exception {\n    Schema schema = new Schema(\n        required(1, \"id\", Types.IntegerType.get(), \"unique ID\"),\n        required(2, \"data\", Types.StringType.get())\n    );\n    PartitionSpec spec = PartitionSpec.builderFor(schema)\n        .bucket(\"data\", 16)\n        .build();\n    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, \"tbl\");\n    String location = temp.newFolder(\"tbl\").toString();\n\n    try {\n      Transaction createTxn = catalog.buildTable(tableIdent, schema)\n          .withPartitionSpec(spec)\n          .withLocation(location)\n          .withProperty(\"key1\", \"value1\")\n          .createOrReplaceTransaction();\n      createTxn.commitTransaction();\n\n      Table table = catalog.loadTable(tableIdent);\n      Assert.assertEquals(1, table.spec().fields().size());\n\n      String newLocation = temp.newFolder(\"tbl-2\").toString();\n\n      Transaction replaceTxn = catalog.buildTable(tableIdent, schema)\n          .withProperty(\"key2\", \"value2\")\n          .withLocation(newLocation)\n          .replaceTransaction();\n      replaceTxn.commitTransaction();\n\n      table = catalog.loadTable(tableIdent);\n      Assert.assertEquals(newLocation, table.location());\n      Assert.assertNull(table.currentSnapshot());\n      Assert.assertTrue(table.spec().isUnpartitioned());\n      Assert.assertEquals(\"value1\", table.properties().get(\"key1\"));\n      Assert.assertEquals(\"value2\", table.properties().get(\"key2\"));\n    } finally {\n      catalog.dropTable(tableIdent);\n    }\n  }\n","realPath":"hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"a42a546a5e0b32fc5634626e28d10f0c29f838fe","commitMessage":"@@@Core: Fix partition field IDs in table replacement (#2906)\n\nCo-authored-by: Jun He <jun-he@users.noreply.github.com>","date":"2021-08-03 22:39:58","modifiedFileCount":"7","status":"M","submitter":"Ryan Blue"}]
