[{"authorTime":"2020-02-18 02:11:32","codes":[{"authorDate":"2020-02-18 05:52:41","commitOrder":3,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = AllDataFilesTable.allManifestFiles(ops.current().snapshots());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n\n      return CloseableIterable.transform(manifests, manifest -> new BaseFileScanTask(\n          DataFiles.fromManifest(manifest), schemaString, specString, ResidualEvaluator.unpartitioned(rowFilter)));\n    }\n","date":"2020-02-18 05:52:41","endLine":113,"groupId":"1419","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c1/616b297655597c1947a52a5676f3fce9c9cf12.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = AllDataFilesTable.allManifestFiles(ops.current().snapshots());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n\n      return CloseableIterable.transform(manifests, manifest -> new BaseFileScanTask(\n          DataFiles.fromManifest(manifest), schemaString, specString, ResidualEvaluator.unpartitioned(rowFilter)));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/AllEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"},{"authorDate":"2020-02-18 02:11:32","commitOrder":3,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.manifests());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n\n      return CloseableIterable.transform(manifests, manifest -> new BaseFileScanTask(\n          DataFiles.fromManifest(manifest), schemaString, specString, ResidualEvaluator.unpartitioned(rowFilter)));\n    }\n","date":"2020-02-18 02:11:32","endLine":113,"groupId":"1419","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/11/b430ebf1b550d7fb5e87c4b819d5e98d68f8bd.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.manifests());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n\n      return CloseableIterable.transform(manifests, manifest -> new BaseFileScanTask(\n          DataFiles.fromManifest(manifest), schemaString, specString, ResidualEvaluator.unpartitioned(rowFilter)));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/ManifestEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"NB"}],"commitId":"65095c149c2489ac3230d0d20328e492919d9d4f","commitMessage":"@@@Add all_data_files.  all_manifests.  and all_entries metadata tables (#805)\n\n","date":"2020-02-18 05:52:41","modifiedFileCount":"9","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-04-23 01:52:01","codes":[{"authorDate":"2020-02-18 05:52:41","commitOrder":4,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = AllDataFilesTable.allManifestFiles(ops.current().snapshots());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n\n      return CloseableIterable.transform(manifests, manifest -> new BaseFileScanTask(\n          DataFiles.fromManifest(manifest), schemaString, specString, ResidualEvaluator.unpartitioned(rowFilter)));\n    }\n","date":"2020-02-18 05:52:41","endLine":113,"groupId":"1419","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c1/616b297655597c1947a52a5676f3fce9c9cf12.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = AllDataFilesTable.allManifestFiles(ops.current().snapshots());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n\n      return CloseableIterable.transform(manifests, manifest -> new BaseFileScanTask(\n          DataFiles.fromManifest(manifest), schemaString, specString, ResidualEvaluator.unpartitioned(rowFilter)));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/AllEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"},{"authorDate":"2020-04-23 01:52:01","commitOrder":4,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.manifests());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","date":"2020-04-23 01:52:01","endLine":112,"groupId":"1419","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d2/458f80a93cf86cae86c730904970b499616e67.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.manifests());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n\n      return CloseableIterable.transform(manifests, manifest -> new BaseFileScanTask(\n          DataFiles.fromManifest(manifest), schemaString, specString, ResidualEvaluator.unpartitioned(rowFilter)));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/ManifestEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"b655d40e8e6956640163d30700c8f20e4d571fbf","commitMessage":"@@@Inherit snapshot id and sequence number in entries metadata table (#951)\n\n","date":"2020-04-23 01:52:01","modifiedFileCount":"5","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2020-04-23 01:52:01","codes":[{"authorDate":"2020-05-24 03:10:42","commitOrder":5,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = AllDataFilesTable.allManifestFiles(ops.current().snapshots());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","date":"2020-05-24 03:10:42","endLine":110,"groupId":"1419","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d4/8ec76205936915d56d47f86f7134dd8a918b0c.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = AllDataFilesTable.allManifestFiles(ops.current().snapshots());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n\n      return CloseableIterable.transform(manifests, manifest -> new BaseFileScanTask(\n          DataFiles.fromManifest(manifest), schemaString, specString, ResidualEvaluator.unpartitioned(rowFilter)));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/AllEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-04-23 01:52:01","commitOrder":5,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.manifests());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","date":"2020-04-23 01:52:01","endLine":112,"groupId":"1419","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/d2/458f80a93cf86cae86c730904970b499616e67.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.manifests());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/ManifestEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"}],"commitId":"01d1462756db20a14a9ac67166e5bf56966861b4","commitMessage":"@@@Add content types to DataFile and ManifestFile (#1030)\n\n","date":"2020-05-24 03:10:42","modifiedFileCount":"14","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-06-03 03:43:03","codes":[{"authorDate":"2020-06-03 03:43:03","commitOrder":6,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = allManifestFiles(ops.current().snapshots());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","date":"2020-06-03 03:43:03","endLine":116,"groupId":"1419","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/3d/84373527d79ec8e5c72744a12dc3753f5d2d2a.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = AllDataFilesTable.allManifestFiles(ops.current().snapshots());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/AllEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-06-03 03:43:03","commitOrder":6,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      \r\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.allManifests());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","date":"2020-06-03 03:43:03","endLine":113,"groupId":"1419","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/f2/536ec427c9f991884daa8810d0f361a4e620e9.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.manifests());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/ManifestEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"482f420141486f5b7b02bd62dc14cdb94b9a9cca","commitMessage":"@@@Split Snapshot.manifests into dataManifests and deleteManifests (#1080)\n\nThis replaces all calls to Snapshot.manifests with calls to one of 3 new methods:\n\n* `Snapshot.allManifests` returns both delete and data manifests\n* `Snapshot.deleteManifests` returns only delete manifests\n* `Snapshot.dataManifests` returns only data manifests\n\nExisting references mostly use either `allManifests` or `dataManifests`.  depending on the context. For example.  tests with assertions for the number of manifests use `allManifests` because the test cases should validate there are no new delete manifests.  but other tests that validate rewritten manifests are deleted use `dataManifests` because only data manifests are rewritten and deleted.\n\nThis tries to make minimal changes that preserve the current behavior. Operations are not updated to support delete manifests (rewrite still only rewrites data manifests).  but will carry through the list of delete manifests correctly.","date":"2020-06-03 03:43:03","modifiedFileCount":"46","status":"M","submitter":"Ryan Blue"},{"authorTime":"2020-06-06 00:17:36","codes":[{"authorDate":"2020-06-06 00:17:36","commitOrder":7,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = allManifestFiles(ops.current().snapshots());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","date":"2020-06-06 00:17:36","endLine":122,"groupId":"3312","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleanignoreResiduals@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/47/34c8529b94a226f0e3d08039ba2b4e7fe75feb.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = allManifestFiles(ops.current().snapshots());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/AllEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2020-06-06 00:17:36","commitOrder":7,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      \r\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.allManifests());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","date":"2020-06-06 00:17:36","endLine":119,"groupId":"3312","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleanignoreResiduals@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/52/0f113a322e3367a3aa87c67a16be42e12dfe9a.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter, boolean caseSensitive, boolean colStats) {\n      \r\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.allManifests());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(rowFilter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/ManifestEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"c299b45bb6ec9a0f2f18451a16136bde9110b5b0","commitMessage":"@@@Add ignoreResiduals option to TableScan (#1094)\n\n","date":"2020-06-06 00:17:36","modifiedFileCount":"15","status":"M","submitter":"Anton Okolnychyi"},{"authorTime":"2020-05-29 22:36:46","codes":[{"authorDate":"2020-05-29 22:36:46","commitOrder":8,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = allManifestFiles(ops.current().snapshots());\n      Type fileProjection = schema().findType(\"data_file\");\n      Schema fileSchema = fileProjection != null ? new Schema(fileProjection.asStructType().fields()) : new Schema();\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","date":"2020-07-09 08:57:39","endLine":113,"groupId":"3312","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleanignoreResiduals@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1a/b918d3c6859247b479bb06379d5caebe8c8f32.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = allManifestFiles(ops.current().snapshots());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/AllEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-05-29 22:36:46","commitOrder":8,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      \r\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.allManifests());\n      Type fileProjection = schema().findType(\"data_file\");\n      Schema fileSchema = fileProjection != null ? new Schema(fileProjection.asStructType().fields()) : new Schema();\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","date":"2020-07-09 08:57:39","endLine":110,"groupId":"3312","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleanignoreResiduals@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/3c/43fc40bda16f787304f7b9bb0c7014f64bbdfe.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      \r\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.allManifests());\n      Schema fileSchema = new Schema(schema().findType(\"data_file\").asStructType().fields());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/ManifestEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"ca468d569231e2cd5d502003586d5a49f53de470","commitMessage":"@@@Fix NPE when counting entries (#1077)\n\nCloses #1077\n","date":"2020-07-09 08:57:39","modifiedFileCount":"4","status":"M","submitter":"Xiang Li"},{"authorTime":"2020-10-30 02:51:18","codes":[{"authorDate":"2020-10-30 02:51:18","commitOrder":9,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = allManifestFiles(ops.current().snapshots());\n      Type fileProjection = schema().findType(\"data_file\");\n      Schema fileSchema = fileProjection != null ? new Schema(fileProjection.asStructType().fields()) : new Schema();\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals, ops.current().specsById()));\n    }\n","date":"2020-10-30 02:51:18","endLine":119,"groupId":"3312","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleanignoreResiduals@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/b6/368fa59b74c02730446e6f0f90df4f5789844b.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = allManifestFiles(ops.current().snapshots());\n      Type fileProjection = schema().findType(\"data_file\");\n      Schema fileSchema = fileProjection != null ? new Schema(fileProjection.asStructType().fields()) : new Schema();\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/AllEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-10-30 02:51:18","commitOrder":9,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      \r\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.allManifests());\n      Type fileProjection = schema().findType(\"data_file\");\n      Schema fileSchema = fileProjection != null ? new Schema(fileProjection.asStructType().fields()) : new Schema();\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals,\n              ops.current().specsById()));\n    }\n","date":"2020-10-30 02:51:18","endLine":118,"groupId":"3312","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleanignoreResiduals@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/33/cc668f640d8896e2fdc66431902fcb3b38c874.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      \r\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.allManifests());\n      Type fileProjection = schema().findType(\"data_file\");\n      Schema fileSchema = fileProjection != null ? new Schema(fileProjection.asStructType().fields()) : new Schema();\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/ManifestEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"43a7427874ab01c6811979b3b97e6c97fe074184","commitMessage":"@@@Core: Fix entries metadata tables with delete manifests (#1673)\n\n","date":"2020-10-30 02:51:18","modifiedFileCount":"3","status":"M","submitter":"Russell Spitzer"},{"authorTime":"2021-08-05 20:23:07","codes":[{"authorDate":"2021-08-05 20:23:07","commitOrder":10,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = allManifestFiles(ops.current().snapshots());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, schema(), schemaString, specString, residuals, ops.current().specsById()));\n    }\n","date":"2021-08-05 20:23:07","endLine":111,"groupId":"102079","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleanignoreResiduals@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/c1/b714534def76baf553296889d4ce3e81369f9d.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      CloseableIterable<ManifestFile> manifests = allManifestFiles(ops.current().snapshots());\n      Type fileProjection = schema().findType(\"data_file\");\n      Schema fileSchema = fileProjection != null ? new Schema(fileProjection.asStructType().fields()) : new Schema();\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest -> new ManifestEntriesTable.ManifestReadTask(\n          ops.io(), manifest, fileSchema, schemaString, specString, residuals, ops.current().specsById()));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/AllEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2021-08-05 20:23:07","commitOrder":10,"curCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      \r\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.allManifests());\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, schema(), schemaString, specString, residuals,\n              ops.current().specsById()));\n    }\n","date":"2021-08-05 20:23:07","endLine":119,"groupId":"102079","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"planFiles","params":"(TableOperationsops@Snapshotsnapshot@ExpressionrowFilter@booleanignoreResiduals@booleancaseSensitive@booleancolStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/7b/ae3491a7875ebdbaf180edd1fb355825d43393.src","preCode":"    protected CloseableIterable<FileScanTask> planFiles(\n        TableOperations ops, Snapshot snapshot, Expression rowFilter,\n        boolean ignoreResiduals, boolean caseSensitive, boolean colStats) {\n      \r\n      CloseableIterable<ManifestFile> manifests = CloseableIterable.withNoopClose(snapshot.allManifests());\n      Type fileProjection = schema().findType(\"data_file\");\n      Schema fileSchema = fileProjection != null ? new Schema(fileProjection.asStructType().fields()) : new Schema();\n      String schemaString = SchemaParser.toJson(schema());\n      String specString = PartitionSpecParser.toJson(PartitionSpec.unpartitioned());\n      Expression filter = ignoreResiduals ? Expressions.alwaysTrue() : rowFilter;\n      ResidualEvaluator residuals = ResidualEvaluator.unpartitioned(filter);\n\n      return CloseableIterable.transform(manifests, manifest ->\n          new ManifestReadTask(ops.io(), manifest, fileSchema, schemaString, specString, residuals,\n              ops.current().specsById()));\n    }\n","realPath":"core/src/main/java/org/apache/iceberg/ManifestEntriesTable.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"68091037944ff7e9de91e7b619f313a8e98c1adc","commitMessage":"@@@Spark: Fix nested struct pruning (#2877)\n\n* Spark: Support Nested Struct Pruning in DataTasks\n\nPreviously DataTasks would return full schemas for some tables and pruned schemas for others and would rely on the underlying framework to do the actual projection. This moves projection and pruning into the core responsibility of the task. This fixes an issue where Spark would be able to pushdown some nested struct predicates to a metadata table but we wouldn't recognize this when trying to do the projection in the framework. StaticDataTasks now support projection in their creation but only if it does not require pruning fields from within a struct which is an element of a List or Map.\n","date":"2021-08-05 20:23:07","modifiedFileCount":"12","status":"M","submitter":"Russell Spitzer"}]
