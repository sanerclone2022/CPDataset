[{"authorTime":"2019-10-23 01:47:52","codes":[{"authorDate":"2019-10-23 01:47:52","commitOrder":3,"curCode":"  public Schema array(Schema array, Schema element) {\n    if (array.getLogicalType() instanceof LogicalMap || AvroSchemaUtil.isKeyValueSchema(array.getElementType())) {\n      Schema keyValue = array.getElementType();\n      Integer keyId = AvroSchemaUtil.getFieldId(keyValue.getField(\"key\"), nameMapping, fieldNames());\n      Integer valueId = AvroSchemaUtil.getFieldId(keyValue.getField(\"value\"), nameMapping, fieldNames());\n      if (keyId == null || valueId == null) {\n        if (keyId != null || valueId != null) {\n          LOG.warn(\"Map schema {} should have both key and value ids set or both unset\", array);\n        }\n        return null;\n      }\n\n      \r\n      if (selectedIds.contains(keyId) || selectedIds.contains(valueId)) {\n        return complexMapWithIds(array, keyId, valueId);\n      } else if (element != null) {\n        Schema keyProjection = element.getField(\"key\").schema();\n        Schema valueProjection = element.getField(\"value\").schema();\n        \r\n        if (keyValue.getField(\"key\").schema() != keyProjection) {\n          Preconditions.checkState(\n              SchemaNormalization.parsingFingerprint64(keyValue.getField(\"key\").schema()) ==\n                  SchemaNormalization.parsingFingerprint64(keyProjection), \"Map keys should not be projected\");\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else if (keyValue.getField(\"value\").schema() != valueProjection) {\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else {\n          return complexMapWithIds(array, keyId, valueId);\n        }\n      }\n\n    } else {\n      Integer elementId = AvroSchemaUtil.getElementId(array, nameMapping, fieldNames());\n      if (elementId == null) {\n        return null;\n      }\n\n      if (selectedIds.contains(elementId)) {\n        return arrayWithId(array, elementId);\n      } else if (element != null) {\n        if (element != array.getElementType()) {\n          \r\n          return arrayWithId(Schema.createArray(element), elementId);\n        }\n        return arrayWithId(array, elementId);\n      }\n    }\n\n    return null;\n  }\n","date":"2019-10-23 01:47:52","endLine":172,"groupId":"2925","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"array","params":"(Schemaarray@Schemaelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/d52124d7e38c2fdd9e10dada36575a55371b08.src","preCode":"  public Schema array(Schema array, Schema element) {\n    if (array.getLogicalType() instanceof LogicalMap || AvroSchemaUtil.isKeyValueSchema(array.getElementType())) {\n      Schema keyValue = array.getElementType();\n      Integer keyId = AvroSchemaUtil.getFieldId(keyValue.getField(\"key\"), nameMapping, fieldNames());\n      Integer valueId = AvroSchemaUtil.getFieldId(keyValue.getField(\"value\"), nameMapping, fieldNames());\n      if (keyId == null || valueId == null) {\n        if (keyId != null || valueId != null) {\n          LOG.warn(\"Map schema {} should have both key and value ids set or both unset\", array);\n        }\n        return null;\n      }\n\n      \r\n      if (selectedIds.contains(keyId) || selectedIds.contains(valueId)) {\n        return complexMapWithIds(array, keyId, valueId);\n      } else if (element != null) {\n        Schema keyProjection = element.getField(\"key\").schema();\n        Schema valueProjection = element.getField(\"value\").schema();\n        \r\n        if (keyValue.getField(\"key\").schema() != keyProjection) {\n          Preconditions.checkState(\n              SchemaNormalization.parsingFingerprint64(keyValue.getField(\"key\").schema()) ==\n                  SchemaNormalization.parsingFingerprint64(keyProjection), \"Map keys should not be projected\");\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else if (keyValue.getField(\"value\").schema() != valueProjection) {\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else {\n          return complexMapWithIds(array, keyId, valueId);\n        }\n      }\n\n    } else {\n      Integer elementId = AvroSchemaUtil.getElementId(array, nameMapping, fieldNames());\n      if (elementId == null) {\n        return null;\n      }\n\n      if (selectedIds.contains(elementId)) {\n        return arrayWithId(array, elementId);\n      } else if (element != null) {\n        if (element != array.getElementType()) {\n          \r\n          return arrayWithId(Schema.createArray(element), elementId);\n        }\n        return arrayWithId(array, elementId);\n      }\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"MB"},{"authorDate":"2019-10-23 01:47:52","commitOrder":3,"curCode":"  private Schema complexMapWithIds(Schema map, Integer keyId, Integer valueId) {\n    Schema keyValue = map.getElementType();\n    if (!AvroSchemaUtil.hasFieldId(keyValue.getField(\"key\")) ||\n        !AvroSchemaUtil.hasFieldId(keyValue.getField(\"value\"))) {\n      return AvroSchemaUtil.createMap(\n          keyId, keyValue.getField(\"key\").schema(),\n          valueId, keyValue.getField(\"value\").schema());\n    }\n    return map;\n  }\n","date":"2019-10-23 01:47:52","endLine":219,"groupId":"2495","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"complexMapWithIds","params":"(Schemamap@IntegerkeyId@IntegervalueId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/d52124d7e38c2fdd9e10dada36575a55371b08.src","preCode":"  private Schema complexMapWithIds(Schema map, Integer keyId, Integer valueId) {\n    Schema keyValue = map.getElementType();\n    if (!AvroSchemaUtil.hasFieldId(keyValue.getField(\"key\")) ||\n        !AvroSchemaUtil.hasFieldId(keyValue.getField(\"value\"))) {\n      return AvroSchemaUtil.createMap(\n          keyId, keyValue.getField(\"key\").schema(),\n          valueId, keyValue.getField(\"value\").schema());\n    }\n    return map;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"}],"commitId":"9f1598e7f9c3409e2ce38365f928ad6d5d58e485","commitMessage":"@@@Avro: Add name to ID mapping for files with name-based schemas (#207)\n\nFixes #40.","date":"2019-10-23 01:47:52","modifiedFileCount":"7","status":"M","submitter":"Ratandeep Ratti"},{"authorTime":"2019-10-23 01:47:52","codes":[{"authorDate":"2019-11-09 09:24:29","commitOrder":4,"curCode":"  public Schema array(Schema array, Schema element) {\n    if (array.getLogicalType() instanceof LogicalMap) {\n      Schema keyValue = array.getElementType();\n      Integer keyId = AvroSchemaUtil.getFieldId(keyValue.getField(\"key\"), nameMapping, fieldNames());\n      Integer valueId = AvroSchemaUtil.getFieldId(keyValue.getField(\"value\"), nameMapping, fieldNames());\n      if (keyId == null || valueId == null) {\n        if (keyId != null || valueId != null) {\n          LOG.warn(\"Map schema {} should have both key and value ids set or both unset\", array);\n        }\n        return null;\n      }\n\n      \r\n      if (selectedIds.contains(keyId) || selectedIds.contains(valueId)) {\n        return complexMapWithIds(array, keyId, valueId);\n      } else if (element != null) {\n        Schema keyProjection = element.getField(\"key\").schema();\n        Schema valueProjection = element.getField(\"value\").schema();\n        \r\n        if (keyValue.getField(\"key\").schema() != keyProjection) {\n          Preconditions.checkState(\n              SchemaNormalization.parsingFingerprint64(keyValue.getField(\"key\").schema()) ==\n                  SchemaNormalization.parsingFingerprint64(keyProjection), \"Map keys should not be projected\");\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else if (keyValue.getField(\"value\").schema() != valueProjection) {\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else {\n          return complexMapWithIds(array, keyId, valueId);\n        }\n      }\n\n    } else {\n      Integer elementId = AvroSchemaUtil.getElementId(array, nameMapping, fieldNames());\n      if (elementId == null) {\n        return null;\n      }\n\n      if (selectedIds.contains(elementId)) {\n        return arrayWithId(array, elementId);\n      } else if (element != null) {\n        if (element != array.getElementType()) {\n          \r\n          return arrayWithId(Schema.createArray(element), elementId);\n        }\n        return arrayWithId(array, elementId);\n      }\n    }\n\n    return null;\n  }\n","date":"2019-11-09 09:24:29","endLine":172,"groupId":"2925","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"array","params":"(Schemaarray@Schemaelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/eb/13b4bd65a9c75aed62f27ebca524b186640477.src","preCode":"  public Schema array(Schema array, Schema element) {\n    if (array.getLogicalType() instanceof LogicalMap || AvroSchemaUtil.isKeyValueSchema(array.getElementType())) {\n      Schema keyValue = array.getElementType();\n      Integer keyId = AvroSchemaUtil.getFieldId(keyValue.getField(\"key\"), nameMapping, fieldNames());\n      Integer valueId = AvroSchemaUtil.getFieldId(keyValue.getField(\"value\"), nameMapping, fieldNames());\n      if (keyId == null || valueId == null) {\n        if (keyId != null || valueId != null) {\n          LOG.warn(\"Map schema {} should have both key and value ids set or both unset\", array);\n        }\n        return null;\n      }\n\n      \r\n      if (selectedIds.contains(keyId) || selectedIds.contains(valueId)) {\n        return complexMapWithIds(array, keyId, valueId);\n      } else if (element != null) {\n        Schema keyProjection = element.getField(\"key\").schema();\n        Schema valueProjection = element.getField(\"value\").schema();\n        \r\n        if (keyValue.getField(\"key\").schema() != keyProjection) {\n          Preconditions.checkState(\n              SchemaNormalization.parsingFingerprint64(keyValue.getField(\"key\").schema()) ==\n                  SchemaNormalization.parsingFingerprint64(keyProjection), \"Map keys should not be projected\");\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else if (keyValue.getField(\"value\").schema() != valueProjection) {\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else {\n          return complexMapWithIds(array, keyId, valueId);\n        }\n      }\n\n    } else {\n      Integer elementId = AvroSchemaUtil.getElementId(array, nameMapping, fieldNames());\n      if (elementId == null) {\n        return null;\n      }\n\n      if (selectedIds.contains(elementId)) {\n        return arrayWithId(array, elementId);\n      } else if (element != null) {\n        if (element != array.getElementType()) {\n          \r\n          return arrayWithId(Schema.createArray(element), elementId);\n        }\n        return arrayWithId(array, elementId);\n      }\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2019-10-23 01:47:52","commitOrder":4,"curCode":"  private Schema complexMapWithIds(Schema map, Integer keyId, Integer valueId) {\n    Schema keyValue = map.getElementType();\n    if (!AvroSchemaUtil.hasFieldId(keyValue.getField(\"key\")) ||\n        !AvroSchemaUtil.hasFieldId(keyValue.getField(\"value\"))) {\n      return AvroSchemaUtil.createMap(\n          keyId, keyValue.getField(\"key\").schema(),\n          valueId, keyValue.getField(\"value\").schema());\n    }\n    return map;\n  }\n","date":"2019-10-23 01:47:52","endLine":219,"groupId":"2495","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"complexMapWithIds","params":"(Schemamap@IntegerkeyId@IntegervalueId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/d52124d7e38c2fdd9e10dada36575a55371b08.src","preCode":"  private Schema complexMapWithIds(Schema map, Integer keyId, Integer valueId) {\n    Schema keyValue = map.getElementType();\n    if (!AvroSchemaUtil.hasFieldId(keyValue.getField(\"key\")) ||\n        !AvroSchemaUtil.hasFieldId(keyValue.getField(\"value\"))) {\n      return AvroSchemaUtil.createMap(\n          keyId, keyValue.getField(\"key\").schema(),\n          valueId, keyValue.getField(\"value\").schema());\n    }\n    return map;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"f1cba908f7e7aae26f901b89879fff0bd4278efa","commitMessage":"@@@Fix reading Avro with arrays of structs with 2 fields (#618)\n\nFixes #605","date":"2019-11-09 09:24:29","modifiedFileCount":"4","status":"M","submitter":"Ratandeep Ratti"},{"authorTime":"2019-10-23 01:47:52","codes":[{"authorDate":"2020-08-15 04:22:55","commitOrder":5,"curCode":"  public Schema array(Schema array, Schema element) {\n    if (array.getLogicalType() instanceof LogicalMap) {\n      Schema keyValue = array.getElementType();\n      Integer keyId = AvroSchemaUtil.getFieldId(keyValue.getField(\"key\"), nameMapping, fieldNames());\n      Integer valueId = AvroSchemaUtil.getFieldId(keyValue.getField(\"value\"), nameMapping, fieldNames());\n      if (keyId == null || valueId == null) {\n        if (keyId != null || valueId != null) {\n          LOG.warn(\"Map schema {} should have both key and value ids set or both unset\", array);\n        }\n        return null;\n      }\n\n      \r\n      if (selectedIds.contains(keyId) || selectedIds.contains(valueId)) {\n        return complexMapWithIds(array, keyId, valueId);\n      } else if (element != null) {\n        Schema.Field keyProjectionField = element.getField(\"key\");\n        Schema valueProjection = element.getField(\"value\").schema();\n        \r\n        \r\n        if (keyProjectionField != null && keyValue.getField(\"key\").schema() != keyProjectionField.schema()) {\n          Preconditions.checkState(\n              SchemaNormalization.parsingFingerprint64(keyValue.getField(\"key\").schema()) ==\n                  SchemaNormalization.parsingFingerprint64(keyProjectionField.schema()),\n                  \"Map keys should not be projected\");\n          return AvroSchemaUtil.createMap(keyId, keyProjectionField.schema(), valueId, valueProjection);\n        } else if (keyValue.getField(\"value\").schema() != valueProjection) {\n          return AvroSchemaUtil.createMap(keyId, keyValue.getField(\"key\").schema(), valueId, valueProjection);\n        } else {\n          return complexMapWithIds(array, keyId, valueId);\n        }\n      }\n\n    } else {\n      Integer elementId = AvroSchemaUtil.getElementId(array, nameMapping, fieldNames());\n      if (elementId == null) {\n        return null;\n      }\n\n      if (selectedIds.contains(elementId)) {\n        return arrayWithId(array, elementId);\n      } else if (element != null) {\n        if (element != array.getElementType()) {\n          \r\n          return arrayWithId(Schema.createArray(element), elementId);\n        }\n        return arrayWithId(array, elementId);\n      }\n    }\n\n    return null;\n  }\n","date":"2020-08-15 04:22:55","endLine":182,"groupId":"4808","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"array","params":"(Schemaarray@Schemaelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/1e/899542aec8b142b15e33cd8dc10682ce6575c6.src","preCode":"  public Schema array(Schema array, Schema element) {\n    if (array.getLogicalType() instanceof LogicalMap) {\n      Schema keyValue = array.getElementType();\n      Integer keyId = AvroSchemaUtil.getFieldId(keyValue.getField(\"key\"), nameMapping, fieldNames());\n      Integer valueId = AvroSchemaUtil.getFieldId(keyValue.getField(\"value\"), nameMapping, fieldNames());\n      if (keyId == null || valueId == null) {\n        if (keyId != null || valueId != null) {\n          LOG.warn(\"Map schema {} should have both key and value ids set or both unset\", array);\n        }\n        return null;\n      }\n\n      \r\n      if (selectedIds.contains(keyId) || selectedIds.contains(valueId)) {\n        return complexMapWithIds(array, keyId, valueId);\n      } else if (element != null) {\n        Schema keyProjection = element.getField(\"key\").schema();\n        Schema valueProjection = element.getField(\"value\").schema();\n        \r\n        if (keyValue.getField(\"key\").schema() != keyProjection) {\n          Preconditions.checkState(\n              SchemaNormalization.parsingFingerprint64(keyValue.getField(\"key\").schema()) ==\n                  SchemaNormalization.parsingFingerprint64(keyProjection), \"Map keys should not be projected\");\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else if (keyValue.getField(\"value\").schema() != valueProjection) {\n          return AvroSchemaUtil.createMap(keyId, keyProjection, valueId, valueProjection);\n        } else {\n          return complexMapWithIds(array, keyId, valueId);\n        }\n      }\n\n    } else {\n      Integer elementId = AvroSchemaUtil.getElementId(array, nameMapping, fieldNames());\n      if (elementId == null) {\n        return null;\n      }\n\n      if (selectedIds.contains(elementId)) {\n        return arrayWithId(array, elementId);\n      } else if (element != null) {\n        if (element != array.getElementType()) {\n          \r\n          return arrayWithId(Schema.createArray(element), elementId);\n        }\n        return arrayWithId(array, elementId);\n      }\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2019-10-23 01:47:52","commitOrder":5,"curCode":"  private Schema complexMapWithIds(Schema map, Integer keyId, Integer valueId) {\n    Schema keyValue = map.getElementType();\n    if (!AvroSchemaUtil.hasFieldId(keyValue.getField(\"key\")) ||\n        !AvroSchemaUtil.hasFieldId(keyValue.getField(\"value\"))) {\n      return AvroSchemaUtil.createMap(\n          keyId, keyValue.getField(\"key\").schema(),\n          valueId, keyValue.getField(\"value\").schema());\n    }\n    return map;\n  }\n","date":"2019-10-23 01:47:52","endLine":219,"groupId":"2495","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"complexMapWithIds","params":"(Schemamap@IntegerkeyId@IntegervalueId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/d52124d7e38c2fdd9e10dada36575a55371b08.src","preCode":"  private Schema complexMapWithIds(Schema map, Integer keyId, Integer valueId) {\n    Schema keyValue = map.getElementType();\n    if (!AvroSchemaUtil.hasFieldId(keyValue.getField(\"key\")) ||\n        !AvroSchemaUtil.hasFieldId(keyValue.getField(\"value\"))) {\n      return AvroSchemaUtil.createMap(\n          keyId, keyValue.getField(\"key\").schema(),\n          valueId, keyValue.getField(\"value\").schema());\n    }\n    return map;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"14ad4db0914763711a9e9dacd4a99a9bd53ff87c","commitMessage":"@@@Avro: Fix pruning columns when a logical-map array's value type is nested (#1321)\n\n","date":"2020-08-15 04:22:55","modifiedFileCount":"3","status":"M","submitter":"Xingyuan Lin"},{"authorTime":"2019-10-23 01:47:52","codes":[{"authorDate":"2021-06-25 07:17:58","commitOrder":6,"curCode":"  public Schema array(Schema array, Schema element) {\n    if (array.getLogicalType() instanceof LogicalMap) {\n      Schema keyValue = array.getElementType();\n      Integer keyId = AvroSchemaUtil.getFieldId(keyValue.getField(\"key\"), nameMapping, fieldNames());\n      Integer valueId = AvroSchemaUtil.getFieldId(keyValue.getField(\"value\"), nameMapping, fieldNames());\n      if (keyId == null || valueId == null) {\n        if (keyId != null || valueId != null) {\n          LOG.warn(\"Map schema {} should have both key and value ids set or both unset\", array);\n        }\n        return null;\n      }\n\n      \r\n      if (selectedIds.contains(keyId) || selectedIds.contains(valueId)) {\n        return complexMapWithIds(array, keyId, valueId);\n      } else if (element != null) {\n        Schema.Field keyProjectionField = element.getField(\"key\");\n        Schema valueProjection = element.getField(\"value\").schema();\n        \r\n        \r\n        if (keyProjectionField != null &&\n            !Objects.equals(keyValue.getField(\"key\").schema(), keyProjectionField.schema())) {\n          Preconditions.checkState(\n              SchemaNormalization.parsingFingerprint64(keyValue.getField(\"key\").schema()) ==\n                  SchemaNormalization.parsingFingerprint64(keyProjectionField.schema()),\n              \"Map keys should not be projected\");\n          return AvroSchemaUtil.createMap(keyId, keyProjectionField.schema(), valueId, valueProjection);\n        } else if (!Objects.equals(keyValue.getField(\"value\").schema(), valueProjection)) {\n          return AvroSchemaUtil.createMap(keyId, keyValue.getField(\"key\").schema(), valueId, valueProjection);\n        } else {\n          return complexMapWithIds(array, keyId, valueId);\n        }\n      }\n\n    } else {\n      Integer elementId = AvroSchemaUtil.getElementId(array, nameMapping, fieldNames());\n      if (elementId == null) {\n        return null;\n      }\n\n      if (selectedIds.contains(elementId)) {\n        return arrayWithId(array, elementId);\n      } else if (element != null) {\n        if (!Objects.equals(element, array.getElementType())) {\n          \r\n          return arrayWithId(Schema.createArray(element), elementId);\n        }\n        return arrayWithId(array, elementId);\n      }\n    }\n\n    return null;\n  }\n","date":"2021-06-25 07:17:58","endLine":185,"groupId":"102109","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"array","params":"(Schemaarray@Schemaelement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/57/e2c2709137873a4e116c93eac0992cae2a36ac.src","preCode":"  public Schema array(Schema array, Schema element) {\n    if (array.getLogicalType() instanceof LogicalMap) {\n      Schema keyValue = array.getElementType();\n      Integer keyId = AvroSchemaUtil.getFieldId(keyValue.getField(\"key\"), nameMapping, fieldNames());\n      Integer valueId = AvroSchemaUtil.getFieldId(keyValue.getField(\"value\"), nameMapping, fieldNames());\n      if (keyId == null || valueId == null) {\n        if (keyId != null || valueId != null) {\n          LOG.warn(\"Map schema {} should have both key and value ids set or both unset\", array);\n        }\n        return null;\n      }\n\n      \r\n      if (selectedIds.contains(keyId) || selectedIds.contains(valueId)) {\n        return complexMapWithIds(array, keyId, valueId);\n      } else if (element != null) {\n        Schema.Field keyProjectionField = element.getField(\"key\");\n        Schema valueProjection = element.getField(\"value\").schema();\n        \r\n        \r\n        if (keyProjectionField != null && keyValue.getField(\"key\").schema() != keyProjectionField.schema()) {\n          Preconditions.checkState(\n              SchemaNormalization.parsingFingerprint64(keyValue.getField(\"key\").schema()) ==\n                  SchemaNormalization.parsingFingerprint64(keyProjectionField.schema()),\n                  \"Map keys should not be projected\");\n          return AvroSchemaUtil.createMap(keyId, keyProjectionField.schema(), valueId, valueProjection);\n        } else if (keyValue.getField(\"value\").schema() != valueProjection) {\n          return AvroSchemaUtil.createMap(keyId, keyValue.getField(\"key\").schema(), valueId, valueProjection);\n        } else {\n          return complexMapWithIds(array, keyId, valueId);\n        }\n      }\n\n    } else {\n      Integer elementId = AvroSchemaUtil.getElementId(array, nameMapping, fieldNames());\n      if (elementId == null) {\n        return null;\n      }\n\n      if (selectedIds.contains(elementId)) {\n        return arrayWithId(array, elementId);\n      } else if (element != null) {\n        if (element != array.getElementType()) {\n          \r\n          return arrayWithId(Schema.createArray(element), elementId);\n        }\n        return arrayWithId(array, elementId);\n      }\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2019-10-23 01:47:52","commitOrder":6,"curCode":"  private Schema complexMapWithIds(Schema map, Integer keyId, Integer valueId) {\n    Schema keyValue = map.getElementType();\n    if (!AvroSchemaUtil.hasFieldId(keyValue.getField(\"key\")) ||\n        !AvroSchemaUtil.hasFieldId(keyValue.getField(\"value\"))) {\n      return AvroSchemaUtil.createMap(\n          keyId, keyValue.getField(\"key\").schema(),\n          valueId, keyValue.getField(\"value\").schema());\n    }\n    return map;\n  }\n","date":"2019-10-23 01:47:52","endLine":219,"groupId":"102109","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"complexMapWithIds","params":"(Schemamap@IntegerkeyId@IntegervalueId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-iceberg-10-0.7/blobInfo/CC_OUT/blobs/0f/d52124d7e38c2fdd9e10dada36575a55371b08.src","preCode":"  private Schema complexMapWithIds(Schema map, Integer keyId, Integer valueId) {\n    Schema keyValue = map.getElementType();\n    if (!AvroSchemaUtil.hasFieldId(keyValue.getField(\"key\")) ||\n        !AvroSchemaUtil.hasFieldId(keyValue.getField(\"value\"))) {\n      return AvroSchemaUtil.createMap(\n          keyId, keyValue.getField(\"key\").schema(),\n          valueId, keyValue.getField(\"value\").schema());\n    }\n    return map;\n  }\n","realPath":"core/src/main/java/org/apache/iceberg/avro/PruneColumns.java","repoName":"iceberg","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"98da9749edee574b8ed673d69e0ef80ce7ae0272","commitMessage":"@@@API: Use equals instead of reference equality (#2716)\n\n","date":"2021-06-25 07:17:58","modifiedFileCount":"10","status":"M","submitter":"Eduard Tudenh?fner"}]
