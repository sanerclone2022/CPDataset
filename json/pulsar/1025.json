[{"authorTime":"2021-05-23 10:24:55","codes":[{"authorDate":"2021-03-17 10:08:38","commitOrder":5,"curCode":"    public void testResetRate() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        rate.tryAcquire(permits);\n        assertEquals(rate.getAvailablePermits(), 0);\n        \r\n        Thread.sleep(rateTimeMSec * 2);\n        assertEquals(rate.getAvailablePermits(), permits);\n\n        \r\n        rate.setRate(permits, 5 * rateTimeMSec, TimeUnit.MILLISECONDS, null);\n        assertEquals(rate.getAvailablePermits(), 100);\n        assertTrue(rate.tryAcquire(permits));\n        assertEquals(rate.getAvailablePermits(), 0);\n        \r\n        Thread.sleep(rateTimeMSec);\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        rate.close();\n    }\n","date":"2021-03-17 10:08:38","endLine":165,"groupId":"8082","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetRate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/89/1609dbee7cb1256e34900c8b07438a372942a4.src","preCode":"    public void testResetRate() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        rate.tryAcquire(permits);\n        assertEquals(rate.getAvailablePermits(), 0);\n        \r\n        Thread.sleep(rateTimeMSec * 2);\n        assertEquals(rate.getAvailablePermits(), permits);\n\n        \r\n        rate.setRate(permits, 5 * rateTimeMSec, TimeUnit.MILLISECONDS, null);\n        assertEquals(rate.getAvailablePermits(), 100);\n        assertTrue(rate.tryAcquire(permits));\n        assertEquals(rate.getAvailablePermits(), 0);\n        \r\n        Thread.sleep(rateTimeMSec);\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"NB"},{"authorDate":"2021-05-23 10:24:55","commitOrder":5,"curCode":"    public void testDispatchRate() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        RateLimiter rate = new RateLimiter(null, permits, rateTimeMSec, TimeUnit.MILLISECONDS, null, true);\n        rate.tryAcquire(100);\n        rate.tryAcquire(100);\n        rate.tryAcquire(100);\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        Thread.sleep(rateTimeMSec * 2);\n        \r\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        Thread.sleep(rateTimeMSec);\n        \r\n        assertEquals(rate.getAvailablePermits() > 0, true);\n\n        rate.close();\n    }\n","date":"2021-05-23 10:24:55","endLine":186,"groupId":"8083","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchRate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/61/336f4210b8b0db500c79a16c05f5dc51aacbd0.src","preCode":"    public void testDispatchRate() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        RateLimiter rate = new RateLimiter(null, permits, rateTimeMSec, TimeUnit.MILLISECONDS, null, true);\n        rate.tryAcquire(100);\n        rate.tryAcquire(100);\n        rate.tryAcquire(100);\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        Thread.sleep(rateTimeMSec * 2);\n        \r\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        Thread.sleep(rateTimeMSec);\n        \r\n        assertEquals(rate.getAvailablePermits() > 0, true);\n\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"}],"commitId":"02fc06e78583aa763772490650faabd4fc220e6c","commitMessage":"@@@[Issue 8599] Fix DispatchRateLimiter does not take effect (#8611)\n\nFixes #8599\nFixes #4777\n\n\n Motivation\n\nPulsar current support topic level and subscription level dispatch rate limiter by using `DispatchRateLimiter`.  When consumers connected to broker and start reading entry.  broker judge whether rate limit is exceeded before reading.  and increasing the permits after reading finished by call tryAcquire().  When there are multi consumers using one `DispatchRateLimiter`.  these consumers could start reading together and may increasing the `acquiredPermits` far more than `permits` after reading finished. As `acquiredPermits` will reset to 0 every second.  all consumers could start reading in the next second and dispatch rate limiter will take no effect in such case.\n\n\n Modifications\n\nThis PR change the behaviour of `DispatchRateLimiter`.  minus `permits` every second instead of reset `acquiredPermits` to 0.  and the reading will stop for a while until `acquiredPermits` return to a value less than  `permits` .\n\n\n Verifying this change\nRateLimiterTest.testDispatchRate()\n","date":"2021-05-23 10:24:55","modifiedFileCount":"4","status":"M","submitter":"WangJialing"},{"authorTime":"2021-08-10 00:32:09","codes":[{"authorDate":"2021-08-10 00:32:09","commitOrder":6,"curCode":"    public void testResetRate() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        RateLimiter rate = RateLimiter.builder().permits(permits).rateTime(rateTimeMSec).timeUnit(TimeUnit.MILLISECONDS)\n                .build();\n        rate.tryAcquire(permits);\n        assertEquals(rate.getAvailablePermits(), 0);\n        \r\n        Thread.sleep(rateTimeMSec * 2);\n        assertEquals(rate.getAvailablePermits(), permits);\n\n        \r\n        rate.setRate(permits, 5 * rateTimeMSec, TimeUnit.MILLISECONDS, null);\n        assertEquals(rate.getAvailablePermits(), 100);\n        assertTrue(rate.tryAcquire(permits));\n        assertEquals(rate.getAvailablePermits(), 0);\n        \r\n        Thread.sleep(rateTimeMSec);\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        rate.close();\n    }\n","date":"2021-08-10 00:32:09","endLine":172,"groupId":"1025","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testResetRate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/78/8ab749390db2acda52417772afca8792c5397c.src","preCode":"    public void testResetRate() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        rate.tryAcquire(permits);\n        assertEquals(rate.getAvailablePermits(), 0);\n        \r\n        Thread.sleep(rateTimeMSec * 2);\n        assertEquals(rate.getAvailablePermits(), permits);\n\n        \r\n        rate.setRate(permits, 5 * rateTimeMSec, TimeUnit.MILLISECONDS, null);\n        assertEquals(rate.getAvailablePermits(), 100);\n        assertTrue(rate.tryAcquire(permits));\n        assertEquals(rate.getAvailablePermits(), 0);\n        \r\n        Thread.sleep(rateTimeMSec);\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-08-10 00:32:09","commitOrder":6,"curCode":"    public void testDispatchRate() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        RateLimiter rate = RateLimiter.builder().permits(permits).rateTime(rateTimeMSec).timeUnit(TimeUnit.MILLISECONDS)\n                .isDispatchOrPrecisePublishRateLimiter(true)\n                .build();\n        rate.tryAcquire(100);\n        rate.tryAcquire(100);\n        rate.tryAcquire(100);\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        Thread.sleep(rateTimeMSec * 2);\n        \r\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        Thread.sleep(rateTimeMSec);\n        \r\n        assertEquals(rate.getAvailablePermits() > 0, true);\n\n        rate.close();\n    }\n","date":"2021-08-10 00:32:09","endLine":195,"groupId":"1025","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDispatchRate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/78/8ab749390db2acda52417772afca8792c5397c.src","preCode":"    public void testDispatchRate() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        RateLimiter rate = new RateLimiter(null, permits, rateTimeMSec, TimeUnit.MILLISECONDS, null, true);\n        rate.tryAcquire(100);\n        rate.tryAcquire(100);\n        rate.tryAcquire(100);\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        Thread.sleep(rateTimeMSec * 2);\n        \r\n        assertEquals(rate.getAvailablePermits(), 0);\n\n        Thread.sleep(rateTimeMSec);\n        \r\n        assertEquals(rate.getAvailablePermits() > 0, true);\n\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"fcd3336c083f359e9f5a5d624edffb21df62d9d1","commitMessage":"@@@Remove RateLimiter constructors and replace with builder usage (#11599)\n\n","date":"2021-08-10 00:32:09","modifiedFileCount":"8","status":"M","submitter":"Lari Hotari"}]
