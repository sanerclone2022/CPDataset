[{"authorTime":"2020-12-23 01:53:27","codes":[{"authorDate":"2020-06-04 14:23:49","commitOrder":4,"curCode":"    void testCompressDecompress(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","date":"2020-06-04 14:23:49","endLine":84,"groupId":"12031","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompressDecompress","params":"(CompressionTypetype@StringcompressedText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/46/e57188bb1ce26d65aecb4ad10868181e4bceaf.src","preCode":"    void testCompressDecompress(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"NB"},{"authorDate":"2020-12-23 01:53:27","commitOrder":4,"curCode":"    void testDecompressReadonlyByteBuf(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n        \r\n        \r\n        ByteBuf compressedComplexByteBuf = compressed.asReadOnly();\n        ByteBuf uncompressed = codec.decode(compressedComplexByteBuf, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","date":"2020-12-23 01:53:27","endLine":115,"groupId":"8728","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDecompressReadonlyByteBuf","params":"(CompressionTypetype@StringcompressedText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ec/84741b25f068ab54b6dbec59d7e9b9d718f359.src","preCode":"    void testDecompressReadonlyByteBuf(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n        \r\n        \r\n        ByteBuf compressedComplexByteBuf = compressed.asReadOnly();\n        ByteBuf uncompressed = codec.decode(compressedComplexByteBuf, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"}],"commitId":"cbc606b0b0e836c1238ea1ba92400b3f14e5b349","commitMessage":"@@@Issue 8974: Peeking at compressed messages throws an exception (Readonly buffers not supported by Airlift) (#8990)\n\nFixes #8974 \n\n\n Motivation\nIn certain cases peeking messages on compresses topics return an error.  see #8974 because Airlift does not support readonly ByteBuffers.  because they do not give access to the underlying array)\n\n\n Modifications\n\nCopy the ByteByffer in case of unsupported buffer type\n\n\n Verifying this change\n\nThis change adds new tests that reproduce the error and demonstrate that the problem is fixed.","date":"2020-12-23 01:53:27","modifiedFileCount":"4","status":"M","submitter":"Enrico Olivelli"},{"authorTime":"2021-02-22 20:40:10","codes":[{"authorDate":"2021-02-22 20:40:10","commitOrder":5,"curCode":"    void testCompressDecompress(CompressionType type, String sourceText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = sourceText.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","date":"2021-02-22 20:40:10","endLine":102,"groupId":"10176","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCompressDecompress","params":"(CompressionTypetype@StringsourceText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/55/18df5cd6205b8e8488f7e676b175f57f62a924.src","preCode":"    void testCompressDecompress(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-02-22 20:40:10","commitOrder":5,"curCode":"    void testDecompressReadonlyByteBuf(CompressionType type, String sourceText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = sourceText.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n        \r\n        \r\n        ByteBuf compressedComplexByteBuf = compressed.asReadOnly();\n        ByteBuf uncompressed = codec.decode(compressedComplexByteBuf, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","date":"2021-02-22 20:40:10","endLine":133,"groupId":"10176","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDecompressReadonlyByteBuf","params":"(CompressionTypetype@StringsourceText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/55/18df5cd6205b8e8488f7e676b175f57f62a924.src","preCode":"    void testDecompressReadonlyByteBuf(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n        \r\n        \r\n        ByteBuf compressedComplexByteBuf = compressed.asReadOnly();\n        ByteBuf uncompressed = codec.decode(compressedComplexByteBuf, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"aa65220fa496add95b04971c29400446157c43b4","commitMessage":"@@@[Compression] Fix ByteBuffer allocate error in the AirliftUtils (#9667)\n\nFixes #9666\n\n\n Motivation\n\nThe compressed data length may be bigger than the original data length (e.g. the source text is not repeated.  such as \"abcde\").  so we can't use the uncompressed length as the allocated length to initial the ByteBuffer.\n\n\n Modifications\n\nUse the capacity of the ByteBuffer instead of the uncompressed length as the allocated length.\n\n\n Verifying this change\n\nUpdate the existing tests.","date":"2021-02-22 20:40:10","modifiedFileCount":"5","status":"M","submitter":"ran"}]
