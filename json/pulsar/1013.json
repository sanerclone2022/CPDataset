[{"authorTime":"2021-04-27 15:51:48","codes":[{"authorDate":"2021-04-27 15:51:48","commitOrder":1,"curCode":"    public void testMakeLocalPoliciesImmutableSerializationCompatibility() throws IOException {\n\n        \r\n        MutableLocalPolicies mutableLocalPolicies = new MutableLocalPolicies();\n        LocalPolicies immutableLocalPolicies = new LocalPolicies();\n\n        \r\n        byte[] data = ObjectMapperFactory.getThreadLocal().writeValueAsBytes(mutableLocalPolicies);\n        LocalPolicies mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies);\n\n\n\n\n        \r\n        BookieAffinityGroupData bookieAffinityGroupData = new BookieAffinityGroupData(\"aaa\",\"bbb\");\n        String namespaceAntiAffinityGroup = \"namespace1,namespace2\";\n\n        mutableLocalPolicies.bookieAffinityGroup = bookieAffinityGroupData;\n        mutableLocalPolicies.namespaceAntiAffinityGroup = namespaceAntiAffinityGroup;\n        LocalPolicies immutableLocalPolicies2 = new LocalPolicies(defaultBundle(),bookieAffinityGroupData,namespaceAntiAffinityGroup);\n\n        \r\n        data = ObjectMapperFactory.getThreadLocal().writeValueAsBytes(mutableLocalPolicies);\n        mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies2);\n\n    }\n","date":"2021-04-27 15:51:48","endLine":120,"groupId":"1840","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMakeLocalPoliciesImmutableSerializationCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/41/746cbc95958a841130336fb43ad297c3dc89b7.src","preCode":"    public void testMakeLocalPoliciesImmutableSerializationCompatibility() throws IOException {\n\n        \r\n        MutableLocalPolicies mutableLocalPolicies = new MutableLocalPolicies();\n        LocalPolicies immutableLocalPolicies = new LocalPolicies();\n\n        \r\n        byte[] data = ObjectMapperFactory.getThreadLocal().writeValueAsBytes(mutableLocalPolicies);\n        LocalPolicies mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies);\n\n\n\n\n        \r\n        BookieAffinityGroupData bookieAffinityGroupData = new BookieAffinityGroupData(\"aaa\",\"bbb\");\n        String namespaceAntiAffinityGroup = \"namespace1,namespace2\";\n\n        mutableLocalPolicies.bookieAffinityGroup = bookieAffinityGroupData;\n        mutableLocalPolicies.namespaceAntiAffinityGroup = namespaceAntiAffinityGroup;\n        LocalPolicies immutableLocalPolicies2 = new LocalPolicies(defaultBundle(),bookieAffinityGroupData,namespaceAntiAffinityGroup);\n\n        \r\n        data = ObjectMapperFactory.getThreadLocal().writeValueAsBytes(mutableLocalPolicies);\n        mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies2);\n\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/LocalPolicesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2021-04-27 15:51:48","commitOrder":1,"curCode":"    public void testMakeLocalPoliciesImmutableStringSerializationCompatibility() throws IOException {\n\n        \r\n        MutableLocalPolicies mutableLocalPolicies = new MutableLocalPolicies();\n        LocalPolicies immutableLocalPolicies = new LocalPolicies();\n\n        \r\n        String data = ObjectMapperFactory.getThreadLocal().writeValueAsString(mutableLocalPolicies);\n        LocalPolicies mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies);\n\n\n\n\n        \r\n        BookieAffinityGroupData bookieAffinityGroupData = new BookieAffinityGroupData(\"aaa\",\"bbb\");\n        String namespaceAntiAffinityGroup = \"namespace1,namespace2\";\n\n        mutableLocalPolicies.bookieAffinityGroup = bookieAffinityGroupData;\n        mutableLocalPolicies.namespaceAntiAffinityGroup = namespaceAntiAffinityGroup;\n        LocalPolicies immutableLocalPolicies2 = new LocalPolicies(defaultBundle(),bookieAffinityGroupData,namespaceAntiAffinityGroup);\n\n        \r\n        data = ObjectMapperFactory.getThreadLocal().writeValueAsString(mutableLocalPolicies);\n        mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies2);\n\n    }\n","date":"2021-04-27 15:51:48","endLine":152,"groupId":"1840","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMakeLocalPoliciesImmutableStringSerializationCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/41/746cbc95958a841130336fb43ad297c3dc89b7.src","preCode":"    public void testMakeLocalPoliciesImmutableStringSerializationCompatibility() throws IOException {\n\n        \r\n        MutableLocalPolicies mutableLocalPolicies = new MutableLocalPolicies();\n        LocalPolicies immutableLocalPolicies = new LocalPolicies();\n\n        \r\n        String data = ObjectMapperFactory.getThreadLocal().writeValueAsString(mutableLocalPolicies);\n        LocalPolicies mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies);\n\n\n\n\n        \r\n        BookieAffinityGroupData bookieAffinityGroupData = new BookieAffinityGroupData(\"aaa\",\"bbb\");\n        String namespaceAntiAffinityGroup = \"namespace1,namespace2\";\n\n        mutableLocalPolicies.bookieAffinityGroup = bookieAffinityGroupData;\n        mutableLocalPolicies.namespaceAntiAffinityGroup = namespaceAntiAffinityGroup;\n        LocalPolicies immutableLocalPolicies2 = new LocalPolicies(defaultBundle(),bookieAffinityGroupData,namespaceAntiAffinityGroup);\n\n        \r\n        data = ObjectMapperFactory.getThreadLocal().writeValueAsString(mutableLocalPolicies);\n        mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies2);\n\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/LocalPolicesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"bbd4e5d546397c982e4eff7d7ae3440c7c2a79fb","commitMessage":"@@@Make `LocalPolicies` immutable to avoid concurrent modify inconsistent. (#9598)\n\n* #9595 make `LocalPolicies` immutable to avoid concurrent modify inconsistent.\n\n`NamespaceService.updateNamespaceBundles` is not thread safe.\nwhen split the same namespace concurrently. \nboth 2 thread can get the same `LocalPolicies` instance from pulsar.getLocalZkCacheService().policiesCache()\n\nand `updateNamespaceBundles` change the LocalPolicies.bundles without\nconcurrent protect. which can cause the param `NamespaceBundles` is inconsistent with the serialized data.\n\n* fix checkstyle\n\n* use lombok `ToString` and `EqualsAndHashCode` on `LocalPolicies`\n\n* 1. avoid change `LocalPolicies`.`namespaceAntiAffinityGroup`\ndefault value in default constructor.\n\n2. add timestamp in `ReplicatorTest.testConcurrentReplicator` to\navoid namespace create got namespace already exist.\n\n* add serialization compatibility test.\n\n* add serialization string compatibility test.","date":"2021-04-27 15:51:48","modifiedFileCount":"5","status":"B","submitter":"WJL3333"},{"authorTime":"2021-06-06 12:37:53","codes":[{"authorDate":"2021-06-06 12:37:53","commitOrder":2,"curCode":"    public void testMakeLocalPoliciesImmutableSerializationCompatibility() throws IOException {\n\n        \r\n        MutableLocalPolicies mutableLocalPolicies = new MutableLocalPolicies();\n        LocalPolicies immutableLocalPolicies = new LocalPolicies();\n\n        \r\n        byte[] data = ObjectMapperFactory.getThreadLocal().writeValueAsBytes(mutableLocalPolicies);\n        LocalPolicies mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies);\n\n\n\n\n        \r\n        BookieAffinityGroupData bookieAffinityGroupData = BookieAffinityGroupData.builder()\n                .bookkeeperAffinityGroupPrimary(\"aaa\")\n                .bookkeeperAffinityGroupSecondary(\"bbb\")\n                .build();\n        String namespaceAntiAffinityGroup = \"namespace1,namespace2\";\n\n        mutableLocalPolicies.bookieAffinityGroup = bookieAffinityGroupData;\n        mutableLocalPolicies.namespaceAntiAffinityGroup = namespaceAntiAffinityGroup;\n        LocalPolicies immutableLocalPolicies2 = new LocalPolicies(defaultBundle(),bookieAffinityGroupData,namespaceAntiAffinityGroup);\n\n        \r\n        data = ObjectMapperFactory.getThreadLocal().writeValueAsBytes(mutableLocalPolicies);\n        mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies2);\n\n    }\n","date":"2021-06-06 12:37:53","endLine":129,"groupId":"1013","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testMakeLocalPoliciesImmutableSerializationCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/47923db38460f4289dcdfd3afe1ffa364f3c7d.src","preCode":"    public void testMakeLocalPoliciesImmutableSerializationCompatibility() throws IOException {\n\n        \r\n        MutableLocalPolicies mutableLocalPolicies = new MutableLocalPolicies();\n        LocalPolicies immutableLocalPolicies = new LocalPolicies();\n\n        \r\n        byte[] data = ObjectMapperFactory.getThreadLocal().writeValueAsBytes(mutableLocalPolicies);\n        LocalPolicies mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies);\n\n\n\n\n        \r\n        BookieAffinityGroupData bookieAffinityGroupData = new BookieAffinityGroupData(\"aaa\",\"bbb\");\n        String namespaceAntiAffinityGroup = \"namespace1,namespace2\";\n\n        mutableLocalPolicies.bookieAffinityGroup = bookieAffinityGroupData;\n        mutableLocalPolicies.namespaceAntiAffinityGroup = namespaceAntiAffinityGroup;\n        LocalPolicies immutableLocalPolicies2 = new LocalPolicies(defaultBundle(),bookieAffinityGroupData,namespaceAntiAffinityGroup);\n\n        \r\n        data = ObjectMapperFactory.getThreadLocal().writeValueAsBytes(mutableLocalPolicies);\n        mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies2);\n\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/LocalPolicesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-06-06 12:37:53","commitOrder":2,"curCode":"    public void testMakeLocalPoliciesImmutableStringSerializationCompatibility() throws IOException {\n\n        \r\n        MutableLocalPolicies mutableLocalPolicies = new MutableLocalPolicies();\n        LocalPolicies immutableLocalPolicies = new LocalPolicies();\n\n        \r\n        String data = ObjectMapperFactory.getThreadLocal().writeValueAsString(mutableLocalPolicies);\n        LocalPolicies mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies);\n\n\n\n\n        \r\n        BookieAffinityGroupData bookieAffinityGroupData = BookieAffinityGroupData.builder()\n                .bookkeeperAffinityGroupPrimary(\"aaa\")\n                .bookkeeperAffinityGroupSecondary(\"bbb\")\n                .build();\n        String namespaceAntiAffinityGroup = \"namespace1,namespace2\";\n\n        mutableLocalPolicies.bookieAffinityGroup = bookieAffinityGroupData;\n        mutableLocalPolicies.namespaceAntiAffinityGroup = namespaceAntiAffinityGroup;\n        LocalPolicies immutableLocalPolicies2 = new LocalPolicies(defaultBundle(),bookieAffinityGroupData,namespaceAntiAffinityGroup);\n\n        \r\n        data = ObjectMapperFactory.getThreadLocal().writeValueAsString(mutableLocalPolicies);\n        mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies2);\n\n    }\n","date":"2021-06-06 12:37:53","endLine":164,"groupId":"1013","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testMakeLocalPoliciesImmutableStringSerializationCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/47923db38460f4289dcdfd3afe1ffa364f3c7d.src","preCode":"    public void testMakeLocalPoliciesImmutableStringSerializationCompatibility() throws IOException {\n\n        \r\n        MutableLocalPolicies mutableLocalPolicies = new MutableLocalPolicies();\n        LocalPolicies immutableLocalPolicies = new LocalPolicies();\n\n        \r\n        String data = ObjectMapperFactory.getThreadLocal().writeValueAsString(mutableLocalPolicies);\n        LocalPolicies mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies);\n\n\n\n\n        \r\n        BookieAffinityGroupData bookieAffinityGroupData = new BookieAffinityGroupData(\"aaa\",\"bbb\");\n        String namespaceAntiAffinityGroup = \"namespace1,namespace2\";\n\n        mutableLocalPolicies.bookieAffinityGroup = bookieAffinityGroupData;\n        mutableLocalPolicies.namespaceAntiAffinityGroup = namespaceAntiAffinityGroup;\n        LocalPolicies immutableLocalPolicies2 = new LocalPolicies(defaultBundle(),bookieAffinityGroupData,namespaceAntiAffinityGroup);\n\n        \r\n        data = ObjectMapperFactory.getThreadLocal().writeValueAsString(mutableLocalPolicies);\n        mutableDeserializedPolicies = ObjectMapperFactory.getThreadLocal().readValue(data, LocalPolicies.class);\n\n        Assert.assertEquals(mutableDeserializedPolicies,immutableLocalPolicies2);\n\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/LocalPolicesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"da71ec2b2a6682ffbab60843756f638bedbd4460","commitMessage":"@@@Make client-admin-api to use interfaces with builders instead of POJOs (#10818)\n\n\n Motivation\n\nInstead of using POJOs types in the Java client-admin API.  use interfaces \n\n\n Modifications\n * Converted more POJOs into interfaces\n * Added builders to construct instances of the interfaces without directly using the implementation classes\n\nNote: for easier reviewing.  there are 2 commits in this PR: \n * https://github.com/apache/pulsar/commit/f14ce733f69633143bd3bf4b4f3ae99a2ea93551 includes the changes to production code\n * https://github.com/apache/pulsar/commit/23b6f74c608cefc5da14ce1d2b29f34efde6870f changes to the unit tests\n","date":"2021-06-06 12:37:53","modifiedFileCount":"275","status":"M","submitter":"Matteo Merli"}]
