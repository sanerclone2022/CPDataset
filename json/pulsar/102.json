[{"authorTime":"2019-07-24 09:50:27","codes":[{"authorDate":"2019-07-24 09:50:27","commitOrder":1,"curCode":"    public void testTxnCommitMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits);\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","date":"2019-07-24 09:50:27","endLine":133,"groupId":"4977","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxnCommitMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/79/5c8cadf592cdfedaa983198f689cd49ee7addf.src","preCode":"    public void testTxnCommitMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits);\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"},{"authorDate":"2019-07-24 09:50:27","commitOrder":1,"curCode":"    public void testTxnAbortMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits);\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","date":"2019-07-24 09:50:27","endLine":149,"groupId":"4977","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnAbortMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/79/5c8cadf592cdfedaa983198f689cd49ee7addf.src","preCode":"    public void testTxnAbortMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits);\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"}],"commitId":"e8a95e5ba57107c1e08a2610b7c55361a09f812b","commitMessage":"@@@[Transaction][Buffer]Add new marker to show which message belongs to transaction (#4776)\n\n* [Transaction][Buffer]Add new marker to show which message belongs to transaction\n---\n\n*Motivation*\n\nAdd new message type in the transaction including data and commit and abort maker in the transaction log.\n\n*Modifications*\n\nAdd two new types of transaction messages.\nTXN_COMMIT is the commit marker of the transaction.\nTXN_ABORT is the abort marker of the transaction.\n\n","date":"2019-07-24 09:50:27","modifiedFileCount":"4","status":"B","submitter":"Yong Zhang"},{"authorTime":"2019-07-24 09:50:27","codes":[{"authorDate":"2019-07-30 22:48:13","commitOrder":2,"curCode":"    public void testTxnCommitMarker() throws IOException {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits,\n                                                 MessageIdData.newBuilder().setLedgerId(10).setEntryId(11).build());\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n\n        PulsarMarkers.TxnCommitMarker marker = Markers.parseCommitMarker(buf);\n        assertEquals(marker.getMessageId().getLedgerId(), 10);\n        assertEquals(marker.getMessageId().getEntryId(), 11);\n    }\n","date":"2019-07-30 22:48:13","endLine":139,"groupId":"4977","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxnCommitMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/14/27f8635400cdbd292c80339acee7f215527240.src","preCode":"    public void testTxnCommitMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits);\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2019-07-24 09:50:27","commitOrder":2,"curCode":"    public void testTxnAbortMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits);\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","date":"2019-07-24 09:50:27","endLine":149,"groupId":"4977","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnAbortMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/79/5c8cadf592cdfedaa983198f689cd49ee7addf.src","preCode":"    public void testTxnAbortMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits);\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"N"}],"commitId":"3a06c97a10cc4dcf42b62f41a6add0d6ffa01ca4","commitMessage":"@@@[Transaction][buffer] Add data ledger position in txn commit marker (#4826)\n\n* [Transaction][buffer] Add data ledger position in txn commit marker\n---\n\n*Motivation*\n\nAdd the data ledger position into the commit marker of the transaction log.\n\n*Modifications*\n\nCreate a new TxnCommitMarker in the proto.\n\n","date":"2019-07-30 22:48:13","modifiedFileCount":"3","status":"M","submitter":"Yong Zhang"},{"authorTime":"2020-10-30 09:21:22","codes":[{"authorDate":"2020-10-30 09:21:22","commitOrder":3,"curCode":"    public void testTxnCommitMarker() throws IOException {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        List<String> messageIdInfoList = new ArrayList<>();\n        List<MessageIdData> messageIdDataList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            long entryId = i + 1;\n            messageIdInfoList.add(i + \":\" + entryId);\n            messageIdDataList.add(MessageIdData.newBuilder().setLedgerId(i).setEntryId(entryId).build());\n        }\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits, messageIdDataList);\n        for (MessageIdData messageIdData : messageIdDataList) {\n            try {\n                messageIdData.recycle();\n                fail(\"message id data should be recycled after create the marker bytebuf.\");\n            } catch (Exception e) {\n                assertTrue(e instanceof java.lang.IllegalStateException);\n            }\n        }\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n\n        PulsarMarkers.TxnCommitMarker marker = Markers.parseCommitMarker(buf);\n        assertEquals(marker.getMessageIdList().size(), messageIdInfoList.size());\n        for (int i = 0; i < marker.getMessageIdCount(); i++) {\n            MessageIdData messageIdData = marker.getMessageIdList().get(i);\n            assertEquals(messageIdData.getLedgerId() + \":\" + messageIdData.getEntryId(), messageIdInfoList.get(i));\n        }\n    }\n","date":"2020-10-30 09:21:22","endLine":163,"groupId":"528","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxnCommitMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/62/0cb35e56122f7ae80ae981bc88e4e4c64fc4b7.src","preCode":"    public void testTxnCommitMarker() throws IOException {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits,\n                                                 MessageIdData.newBuilder().setLedgerId(10).setEntryId(11).build());\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n\n        PulsarMarkers.TxnCommitMarker marker = Markers.parseCommitMarker(buf);\n        assertEquals(marker.getMessageId().getLedgerId(), 10);\n        assertEquals(marker.getMessageId().getEntryId(), 11);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2020-10-30 09:21:22","commitOrder":3,"curCode":"    public void testTxnAbortMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits, Collections.emptyList());\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","date":"2020-10-30 09:21:22","endLine":179,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnAbortMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/62/0cb35e56122f7ae80ae981bc88e4e4c64fc4b7.src","preCode":"    public void testTxnAbortMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits);\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"91731743fc64712fabbc62e00c674c42586bb985","commitMessage":"@@@[Transaction] TransactionBuffer Refactor (#8347)\n\nFix https://github.com/streamnative/pulsar/issues/1575\nFix issue #8378 \n\n\n Motivation\n\n![image](https://user-images.githubusercontent.com/15029908/96908159-d38d3f80-14ce-11eb-9e52-ee066434d960.png)\n\nUse the above approach instead of the sidecar approach.\n\n\n Modifications\n\n1. Produce transaction messages to the topic partition.\n2. The commit marker needs to record the related message-id list of its transaction.\n3. When the dispatcher read a transaction marker.  get the messages of the transaction by message-id list in the marker and send them to the consumer.\n2. TransactionBuffer doesn't maintain any index data.","date":"2020-10-30 09:21:22","modifiedFileCount":"44","status":"M","submitter":"ran"},{"authorTime":"2021-01-06 08:42:31","codes":[{"authorDate":"2021-01-06 08:42:31","commitOrder":4,"curCode":"    public void testTxnCommitMarker() throws IOException {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        List<String> messageIdInfoList = new ArrayList<>();\n        List<MarkersMessageIdData> messageIdDataList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            long entryId = i + 1;\n            messageIdInfoList.add(i + \":\" + entryId);\n            messageIdDataList.add(new MarkersMessageIdData().setLedgerId(i).setEntryId(entryId));\n        }\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits, messageIdDataList);\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n\n        TxnCommitMarker marker = Markers.parseCommitMarker(buf);\n        assertEquals(marker.getMessageIdsList().size(), messageIdInfoList.size());\n        for (int i = 0; i < marker.getMessageIdsCount(); i++) {\n            MarkersMessageIdData messageIdData = marker.getMessageIdAt(i);\n            assertEquals(messageIdData.getLedgerId() + \":\" + messageIdData.getEntryId(), messageIdInfoList.get(i));\n        }\n    }\n","date":"2021-01-06 08:42:31","endLine":152,"groupId":"528","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxnCommitMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/26/874716f246ea539d025b5d77ce794f447373e3.src","preCode":"    public void testTxnCommitMarker() throws IOException {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        List<String> messageIdInfoList = new ArrayList<>();\n        List<MessageIdData> messageIdDataList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            long entryId = i + 1;\n            messageIdInfoList.add(i + \":\" + entryId);\n            messageIdDataList.add(MessageIdData.newBuilder().setLedgerId(i).setEntryId(entryId).build());\n        }\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits, messageIdDataList);\n        for (MessageIdData messageIdData : messageIdDataList) {\n            try {\n                messageIdData.recycle();\n                fail(\"message id data should be recycled after create the marker bytebuf.\");\n            } catch (Exception e) {\n                assertTrue(e instanceof java.lang.IllegalStateException);\n            }\n        }\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n\n        PulsarMarkers.TxnCommitMarker marker = Markers.parseCommitMarker(buf);\n        assertEquals(marker.getMessageIdList().size(), messageIdInfoList.size());\n        for (int i = 0; i < marker.getMessageIdCount(); i++) {\n            MessageIdData messageIdData = marker.getMessageIdList().get(i);\n            assertEquals(messageIdData.getLedgerId() + \":\" + messageIdData.getEntryId(), messageIdInfoList.get(i));\n        }\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2021-01-06 08:42:31","commitOrder":4,"curCode":"    public void testTxnAbortMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits, Collections.emptyList());\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","date":"2021-01-06 08:42:31","endLine":168,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnAbortMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/26/874716f246ea539d025b5d77ce794f447373e3.src","preCode":"    public void testTxnAbortMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits, Collections.emptyList());\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), PulsarMarkers.MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"c12765a0530bcefca8e840d2f8f43383d7478778","commitMessage":"@@@PIP-75: Perform serialization/deserialization with LightProto (#9046)\n\n","date":"2021-01-06 08:42:31","modifiedFileCount":"185","status":"M","submitter":"Matteo Merli"},{"authorTime":"2021-01-18 17:25:09","codes":[{"authorDate":"2021-01-18 17:25:09","commitOrder":5,"curCode":"    public void testTxnCommitMarker() throws IOException {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits);\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","date":"2021-01-18 17:25:09","endLine":133,"groupId":"102","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testTxnCommitMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3e/b0cfb726d6ae0d509f7ccf30c3b4f08bd34666.src","preCode":"    public void testTxnCommitMarker() throws IOException {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        List<String> messageIdInfoList = new ArrayList<>();\n        List<MarkersMessageIdData> messageIdDataList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            long entryId = i + 1;\n            messageIdInfoList.add(i + \":\" + entryId);\n            messageIdDataList.add(new MarkersMessageIdData().setLedgerId(i).setEntryId(entryId));\n        }\n\n        ByteBuf buf = Markers.newTxnCommitMarker(sequenceId, mostBits, leastBits, messageIdDataList);\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), MarkerType.TXN_COMMIT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n\n        TxnCommitMarker marker = Markers.parseCommitMarker(buf);\n        assertEquals(marker.getMessageIdsList().size(), messageIdInfoList.size());\n        for (int i = 0; i < marker.getMessageIdsCount(); i++) {\n            MarkersMessageIdData messageIdData = marker.getMessageIdAt(i);\n            assertEquals(messageIdData.getLedgerId() + \":\" + messageIdData.getEntryId(), messageIdInfoList.get(i));\n        }\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2021-01-18 17:25:09","commitOrder":5,"curCode":"    public void testTxnAbortMarker() throws IOException {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits);\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","date":"2021-01-18 17:25:09","endLine":149,"groupId":"102","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testTxnAbortMarker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3e/b0cfb726d6ae0d509f7ccf30c3b4f08bd34666.src","preCode":"    public void testTxnAbortMarker() {\n        long sequenceId = 1L;\n        long mostBits = 1234L;\n        long leastBits = 2345L;\n\n        ByteBuf buf = Markers.newTxnAbortMarker(sequenceId, mostBits, leastBits, Collections.emptyList());\n\n        MessageMetadata msgMetadata = Commands.parseMessageMetadata(buf);\n\n        assertEquals(msgMetadata.getMarkerType(), MarkerType.TXN_ABORT_VALUE);\n        assertEquals(msgMetadata.getSequenceId(), sequenceId);\n        assertEquals(msgMetadata.getTxnidMostBits(), mostBits);\n        assertEquals(msgMetadata.getTxnidLeastBits(), leastBits);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/MarkersTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"ed5d94ccfdf4eba77678454945a2c3719dce2268","commitMessage":"@@@[Transaction] Transaction buffer stable position and lowWaterMark implementation. (#9195)\n\n## Motivation\nTransaction buffer stable position and lowWaterMark implementation.\n\n## implement\nDetails view https://github.com/streamnative/community/pull/3","date":"2021-01-18 17:25:09","modifiedFileCount":"51","status":"M","submitter":"congbo"}]
