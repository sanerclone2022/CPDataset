[{"authorTime":"2018-04-14 04:17:20","codes":[{"authorDate":"2018-03-06 05:49:50","commitOrder":2,"curCode":"    void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\", Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n    }\n","date":"2018-03-06 05:49:50","endLine":181,"groupId":"14608","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"clusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/46/fa7f7c26097b161cc95f2f4e0d0a32dd693dec.src","preCode":"    void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\", Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"NB"},{"authorDate":"2018-04-14 04:17:20","commitOrder":2,"curCode":"    void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","date":"2018-04-14 04:17:20","endLine":442,"groupId":"14614","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"namespaceIsolationPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d0/81ccf2e4e931657d0c706ade8f21fbc488d29e.src","preCode":"    void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"B"}],"commitId":"fc67fe2c98eeb7c47023ff2dd29144972a4a693f","commitMessage":"@@@Introduce admin api to get broker and namespace-isolation policy map (#1565)\n\n* Introduce admin api to get broker and namespace-isolation policy map\n\n* add missed commit\n","date":"2018-04-14 04:17:20","modifiedFileCount":"14","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-05-29 16:47:16","commitOrder":3,"curCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\", Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n    }\n","date":"2020-05-29 16:47:16","endLine":219,"groupId":"14608","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"clusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\", Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":3,"curCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","date":"2020-05-29 16:47:16","endLine":640,"groupId":"14614","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"namespaceIsolationPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"M"}],"commitId":"5cb32e9e3dbb9721bdd1a6e7776ace80954dfa8a","commitMessage":"@@@Remove double @Test annotations (#7063)\n\nSome tests had @Test at the class level and also at the method\nlevel. This resulted in these tests running twice.\n\nCo-authored-by: Ivan Kelly <ikelly@splunk.com>","date":"2020-05-29 16:47:16","modifiedFileCount":"40","status":"M","submitter":"Matteo Merli"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2021-01-09 01:35:18","commitOrder":4,"curCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\", Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n\n        \r\n        clusters = new CmdClusters(admin);\n\n        clusters.run(split(\"create my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"update my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-secure-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-secure-cluster\");\n    }\n","date":"2021-01-09 01:35:18","endLine":231,"groupId":"14608","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"clusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/49/126a94ef4d671503cd6720b53c57686790cd25.src","preCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\", Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":4,"curCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","date":"2020-05-29 16:47:16","endLine":640,"groupId":"14614","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"namespaceIsolationPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"N"}],"commitId":"3e35af5096a32a46b410a4b32c8d8722e42f4865","commitMessage":"@@@set service-url required to false.  service-url is not required if ena? (#9127)\n\nFixes #9126\n\n\n Motivation\nthere is ` --url ` required restriction for adding cluster if TLS is enabled.  here we only need the --url-secure/--broker-url-secure params\n\n\n Modifications\nset `service-url` required to false.  `service-url` is not required if enable TLS for pulsar cluster.\n","date":"2021-01-09 01:35:18","modifiedFileCount":"2","status":"M","submitter":"dockerzhang"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-01-29 03:06:36","commitOrder":5,"curCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\", Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"create my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"update my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-secure-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-secure-cluster\");\n    }\n","date":"2021-01-29 03:06:36","endLine":231,"groupId":"4087","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"clusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\", Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n\n        \r\n        clusters = new CmdClusters(admin);\n\n        clusters.run(split(\"create my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"update my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-secure-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-secure-cluster\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":5,"curCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(() -> admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","date":"2021-01-29 03:06:36","endLine":696,"groupId":"14614","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"namespaceIsolationPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"M"}],"commitId":"232b32439687995dd3102d8c281cf50b7b91e0bf","commitMessage":"@@@Lazily init PulsarAdmin in PulsarAdminTool (#9312)\n\n\n Motivation\npulsar-admin (PulsarAdminTool) initialises eagerly the PulsarAdmin object and some of the the underlying REST API intefaces.\nThis initialisation process triggers lot of resource loading (like SSL/RESTAPI classes....) that slows down the JVM even for stuff that is not needed.\nAlso there are shutdown hooks that are useless by they are executed while existing from the command.\n\nRemoving initialisation of useless stuff helps in having a better bootstrap time.  especially in case that you are not performing API calls.  like when you are learning the tool and you make lots of syntax errors. \n\n\n Modifications\n- Initialise as lazily as possible PulsarAdmin \n- Make PulsarAdminTool#main \"testable\" by allowing it to not call System.exit\n- Use halt instead of exit in order to not trigger shutdown hooks\n\n\n Verifying this change\nThis change is a trivial rework / code cleanup.  but I have added tests for parts that have been touched and had not unit tests.\n","date":"2021-01-29 03:06:36","modifiedFileCount":"27","status":"M","submitter":"Enrico Olivelli"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-06-01 22:55:28","commitOrder":6,"curCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\",\n                Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"create my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"update my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-secure-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-secure-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n        clusters.run(split(\"create my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-enable-keystore --tls-trust-store-type JKS --tls-trust-store /var/private/tls/client.truststore.jks \"\n                + \"--tls-trust-store-pwd clientpw\"));\n        ClusterData data = new ClusterData(null, \"https://my-service.url:4443\");\n        data.setBrokerClientTlsEnabled(true)\n                .setBrokerClientTlsEnabledWithKeyStore(true)\n                .setBrokerClientTlsTrustStoreType(\"JKS\")\n                .setBrokerClientTlsTrustStore(\"/var/private/tls/client.truststore.jks\")\n                .setBrokerClientTlsTrustStorePassword(\"clientpw\");\n        verify(mockClusters).createCluster(\"my-tls-cluster\", data);\n\n        clusters.run(split(\"update my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-trust-certs-filepath /path/to/ca.cert.pem\"));\n        data.setBrokerClientTlsEnabledWithKeyStore(false)\n                .setBrokerClientTlsTrustStore(null)\n                .setBrokerClientTlsTrustStorePassword(null)\n                .setBrokerClientTrustCertsFilePath(\"/path/to/ca.cert.pem\");\n        verify(mockClusters).updateCluster(\"my-tls-cluster\", data);\n    }\n","date":"2021-06-01 22:55:28","endLine":273,"groupId":"4087","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"clusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/01/4977d831aa3a2513f9f17094e3308cfe2e3d93.src","preCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\",\n                Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"create my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"update my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-secure-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-secure-cluster\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":6,"curCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(() -> admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","date":"2021-01-29 03:06:36","endLine":696,"groupId":"14614","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"namespaceIsolationPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(() -> admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"N"}],"commitId":"6fffeb190a61611a0db5980aba879c86ed63a93a","commitMessage":"@@@[issue 10693] use unify configuration from remote cluster for geo-replicator (#10710)\n\nFixes #10693\n\n\n Motivation\nuse unify configuration from remote cluster for geo-replicator","date":"2021-06-01 22:55:28","modifiedFileCount":"4","status":"M","submitter":"linlinnn"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-06-03 05:17:04","commitOrder":7,"curCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterDataImpl(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterDataImpl(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomainImpl domain = new FailureDomainImpl();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterDataImpl(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterDataImpl(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\",\n                Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"create my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-secure-cluster\", new ClusterDataImpl(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"update my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-secure-cluster\", new ClusterDataImpl(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-secure-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-secure-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n        clusters.run(split(\"create my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-enable-keystore --tls-trust-store-type JKS --tls-trust-store /var/private/tls/client.truststore.jks \"\n                + \"--tls-trust-store-pwd clientpw\"));\n        ClusterData data = new ClusterDataImpl(null, \"https://my-service.url:4443\");\n        data.setBrokerClientTlsEnabled(true)\n                .setBrokerClientTlsEnabledWithKeyStore(true)\n                .setBrokerClientTlsTrustStoreType(\"JKS\")\n                .setBrokerClientTlsTrustStore(\"/var/private/tls/client.truststore.jks\")\n                .setBrokerClientTlsTrustStorePassword(\"clientpw\");\n        verify(mockClusters).createCluster(\"my-tls-cluster\", data);\n\n        clusters.run(split(\"update my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-trust-certs-filepath /path/to/ca.cert.pem\"));\n        data.setBrokerClientTlsEnabledWithKeyStore(false)\n                .setBrokerClientTlsTrustStore(null)\n                .setBrokerClientTlsTrustStorePassword(null)\n                .setBrokerClientTrustCertsFilePath(\"/path/to/ca.cert.pem\");\n        verify(mockClusters).updateCluster(\"my-tls-cluster\", data);\n    }\n","date":"2021-06-03 05:17:04","endLine":275,"groupId":"4087","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"clusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/18/0c8fe6627c626cce12b1d20a4b6242f759143a.src","preCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterData(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = new FailureDomain();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterData(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\",\n                Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"create my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"update my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-secure-cluster\", new ClusterData(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-secure-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-secure-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n        clusters.run(split(\"create my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-enable-keystore --tls-trust-store-type JKS --tls-trust-store /var/private/tls/client.truststore.jks \"\n                + \"--tls-trust-store-pwd clientpw\"));\n        ClusterData data = new ClusterData(null, \"https://my-service.url:4443\");\n        data.setBrokerClientTlsEnabled(true)\n                .setBrokerClientTlsEnabledWithKeyStore(true)\n                .setBrokerClientTlsTrustStoreType(\"JKS\")\n                .setBrokerClientTlsTrustStore(\"/var/private/tls/client.truststore.jks\")\n                .setBrokerClientTlsTrustStorePassword(\"clientpw\");\n        verify(mockClusters).createCluster(\"my-tls-cluster\", data);\n\n        clusters.run(split(\"update my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-trust-certs-filepath /path/to/ca.cert.pem\"));\n        data.setBrokerClientTlsEnabledWithKeyStore(false)\n                .setBrokerClientTlsTrustStore(null)\n                .setBrokerClientTlsTrustStorePassword(null)\n                .setBrokerClientTrustCertsFilePath(\"/path/to/ca.cert.pem\");\n        verify(mockClusters).updateCluster(\"my-tls-cluster\", data);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":7,"curCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(() -> admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","date":"2021-01-29 03:06:36","endLine":696,"groupId":"14614","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"namespaceIsolationPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(() -> admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"N"}],"commitId":"301a76435ce918520f1b70b95b7ebed9bf1b08b5","commitMessage":"@@@Remove pulsar-client-admin-api dependency : pulsar-common (#10774)\n\n* remove gson from admin api Topics.java\n\n* Bookies.java\n\n* Brokers.java\n\n* BrokerStats.java\n\n* fix PulsarAdminException\n\n* Clusters.java\n\n* Tenants.java\n\n* minor fix on ResourceGroups\n\n* Namespaces.java & OffloadPolicies\n\n* temp remove JsonProperty in OffloadPolicies\n\n* Topics & NonPersistentTopics\n\n* ResourceQuotas with MixIn class\n\n* Functions\n\n* Sources.java\n\n* Sinks.java\n\n* Schemas.java\n\n* resolve checkstyle\n\n* minor fix\n\n* Transactions.java\n\n* fix stylecheck\n\n* set ObjectMapper module\n\n* fix ci\n\n* fix PulsarAdminException\n\n* remove gson\n\n* remove swagger\n\n* merge master\n\n* remove swagger\n\n* remove io.swagger\n\n* remove commons-lang3\n\n* use Objects.requireNonNull\n\n* remove commons-lang3\n\n* fix interface mapping\n\n* fix ci\n\n* extract OffloadPoliciesInterface\n\n* extract FunctionStats interfaces\n\n* fix unit test\n\n* fix shaded class\n\n* add object mapper mixin tests\n\n* fix ci\n\n* fix admin exception ci error\n\n* UpdateOptions\n\n* AutoFailoverPolicyData\n\n* BrokerNamespaceIsolationData\n\n* ClusterData\n\n* FailureDomain\n\n* FunctionInstanceStats\n\n* NamespaceIsolationData\n\n* OffloadPolicies\n\n* TenantInfo\n\n* FunctionStats\n\n* fix stylecheck\n\n* Fixed interface\n\n* Fixed ClusterData equals method\n\n* Fixed merge issue\n\n* Fixed another merge issue\n\n* Fixed test issue after merge\n\nCo-authored-by: Rui Fu <freelz@gmail.com>","date":"2021-06-03 05:17:04","modifiedFileCount":"266","status":"M","submitter":"Matteo Merli"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-06-06 12:37:53","commitOrder":8,"curCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", ClusterData.builder().serviceUrl(\"http://my-service.url:8080\").build());\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", ClusterData.builder().serviceUrl(\"http://my-service.url:8080\").build());\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomain domain = FailureDomain.builder()\n                .brokers(Collections.singleton(\"b1\"))\n                .build();\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                ClusterData.builder()\n                        .serviceUrl(\"http://my-service.url:8080\")\n                        .serviceUrlTls(\"https://my-service.url:4443\")\n                        .build());\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                ClusterData.builder()\n                        .serviceUrl(\"http://my-service.url:8080\")\n                        .serviceUrlTls(\"https://my-service.url:4443\")\n                        .build());\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\",\n                Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"create my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-secure-cluster\",\n                ClusterData.builder()\n                        .serviceUrlTls(\"https://my-service.url:4443\")\n                        .build());\n\n        clusters.run(split(\"update my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-secure-cluster\",\n                ClusterData.builder()\n                        .serviceUrlTls(\"https://my-service.url:4443\")\n                        .build());\n\n        clusters.run(split(\"delete my-secure-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-secure-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n        clusters.run(split(\"create my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-enable-keystore --tls-trust-store-type JKS --tls-trust-store /var/private/tls/client.truststore.jks \"\n                + \"--tls-trust-store-pwd clientpw\"));\n        ClusterData.Builder data = ClusterData.builder()\n                .serviceUrlTls(\"https://my-service.url:4443\")\n                .brokerClientTlsEnabled(true)\n                .brokerClientTlsEnabledWithKeyStore(true)\n                .brokerClientTlsTrustStoreType(\"JKS\")\n                .brokerClientTlsTrustStore(\"/var/private/tls/client.truststore.jks\")\n                .brokerClientTlsTrustStorePassword(\"clientpw\");\n        verify(mockClusters).createCluster(\"my-tls-cluster\", data.build());\n\n        clusters.run(split(\"update my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-trust-certs-filepath /path/to/ca.cert.pem\"));\n        data.brokerClientTlsEnabledWithKeyStore(false)\n                .brokerClientTlsTrustStore(null)\n                .brokerClientTlsTrustStorePassword(null)\n                .brokerClientTrustCertsFilePath(\"/path/to/ca.cert.pem\");\n        verify(mockClusters).updateCluster(\"my-tls-cluster\", data.build());\n    }\n","date":"2021-06-06 12:37:53","endLine":290,"groupId":"10280","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"clusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0d/19d9ae8d4e1e4305e09d6175b199e5a0c88131.src","preCode":"    public void clusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdClusters clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"list\"));\n        verify(mockClusters).getClusters();\n\n        clusters.run(split(\"get use\"));\n        verify(mockClusters).getCluster(\"use\");\n\n        clusters.run(split(\"create use --url http://my-service.url:8080\"));\n        verify(mockClusters).createCluster(\"use\", new ClusterDataImpl(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"update use --url http://my-service.url:8080\"));\n        verify(mockClusters).updateCluster(\"use\", new ClusterDataImpl(\"http://my-service.url:8080\", null));\n\n        clusters.run(split(\"delete use\"));\n        verify(mockClusters).deleteCluster(\"use\");\n\n        clusters.run(split(\"list-failure-domains use\"));\n        verify(mockClusters).getFailureDomains(\"use\");\n\n        clusters.run(split(\"get-failure-domain use --domain-name domain\"));\n        verify(mockClusters).getFailureDomain(\"use\", \"domain\");\n\n        clusters.run(split(\"create-failure-domain use --domain-name domain --broker-list b1\"));\n        FailureDomainImpl domain = new FailureDomainImpl();\n        domain.setBrokers(Sets.newHashSet(\"b1\"));\n        verify(mockClusters).createFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"update-failure-domain use --domain-name domain --broker-list b1\"));\n        verify(mockClusters).updateFailureDomain(\"use\", \"domain\", domain);\n\n        clusters.run(split(\"delete-failure-domain use --domain-name domain\"));\n        verify(mockClusters).deleteFailureDomain(\"use\", \"domain\");\n\n\n        \r\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(\n                split(\"create my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-cluster\",\n                new ClusterDataImpl(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(\n                split(\"update my-cluster --url http://my-service.url:8080 --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-cluster\",\n                new ClusterDataImpl(\"http://my-service.url:8080\", \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-cluster\");\n\n        clusters.run(split(\"update-peer-clusters my-cluster --peer-clusters c1,c2\"));\n        verify(mockClusters).updatePeerClusterNames(\"my-cluster\",\n                Sets.newLinkedHashSet(Lists.newArrayList(\"c1\", \"c2\")));\n\n        clusters.run(split(\"get-peer-clusters my-cluster\"));\n        verify(mockClusters).getPeerClusterNames(\"my-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n\n        clusters.run(split(\"create my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).createCluster(\"my-secure-cluster\", new ClusterDataImpl(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"update my-secure-cluster --url-secure https://my-service.url:4443\"));\n        verify(mockClusters).updateCluster(\"my-secure-cluster\", new ClusterDataImpl(null, \"https://my-service.url:4443\"));\n\n        clusters.run(split(\"delete my-secure-cluster\"));\n        verify(mockClusters).deleteCluster(\"my-secure-cluster\");\n\n        \r\n        clusters = new CmdClusters(() -> admin);\n        clusters.run(split(\"create my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-enable-keystore --tls-trust-store-type JKS --tls-trust-store /var/private/tls/client.truststore.jks \"\n                + \"--tls-trust-store-pwd clientpw\"));\n        ClusterData data = new ClusterDataImpl(null, \"https://my-service.url:4443\");\n        data.setBrokerClientTlsEnabled(true)\n                .setBrokerClientTlsEnabledWithKeyStore(true)\n                .setBrokerClientTlsTrustStoreType(\"JKS\")\n                .setBrokerClientTlsTrustStore(\"/var/private/tls/client.truststore.jks\")\n                .setBrokerClientTlsTrustStorePassword(\"clientpw\");\n        verify(mockClusters).createCluster(\"my-tls-cluster\", data);\n\n        clusters.run(split(\"update my-tls-cluster --url-secure https://my-service.url:4443 --tls-enable \"\n                + \"--tls-trust-certs-filepath /path/to/ca.cert.pem\"));\n        data.setBrokerClientTlsEnabledWithKeyStore(false)\n                .setBrokerClientTlsTrustStore(null)\n                .setBrokerClientTlsTrustStorePassword(null)\n                .setBrokerClientTrustCertsFilePath(\"/path/to/ca.cert.pem\");\n        verify(mockClusters).updateCluster(\"my-tls-cluster\", data);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":8,"curCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(() -> admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","date":"2021-01-29 03:06:36","endLine":696,"groupId":"10280","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"namespaceIsolationPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespaceIsolationPolicy() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Clusters mockClusters = mock(Clusters.class);\n        when(admin.clusters()).thenReturn(mockClusters);\n\n        CmdNamespaceIsolationPolicy nsIsolationPoliciesCmd = new CmdNamespaceIsolationPolicy(() -> admin);\n\n        nsIsolationPoliciesCmd.run(split(\"brokers use\"));\n        verify(mockClusters).getBrokersWithNamespaceIsolationPolicy(\"use\");\n\n        nsIsolationPoliciesCmd.run(split(\"broker use --broker my-broker\"));\n        verify(mockClusters).getBrokerWithNamespaceIsolationPolicy(\"use\", \"my-broker\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"N"}],"commitId":"da71ec2b2a6682ffbab60843756f638bedbd4460","commitMessage":"@@@Make client-admin-api to use interfaces with builders instead of POJOs (#10818)\n\n\n Motivation\n\nInstead of using POJOs types in the Java client-admin API.  use interfaces \n\n\n Modifications\n * Converted more POJOs into interfaces\n * Added builders to construct instances of the interfaces without directly using the implementation classes\n\nNote: for easier reviewing.  there are 2 commits in this PR: \n * https://github.com/apache/pulsar/commit/f14ce733f69633143bd3bf4b4f3ae99a2ea93551 includes the changes to production code\n * https://github.com/apache/pulsar/commit/23b6f74c608cefc5da14ce1d2b29f34efde6870f changes to the unit tests\n","date":"2021-06-06 12:37:53","modifiedFileCount":"275","status":"M","submitter":"Matteo Merli"}]
