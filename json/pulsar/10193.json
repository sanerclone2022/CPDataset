[{"authorTime":"2019-06-07 04:18:29","codes":[{"authorDate":"2019-06-07 04:18:29","commitOrder":1,"curCode":"    public static ByteBuf newReplicatedSubscriptionsSnapshotResponse(String snapshotId, String replyToCluster,\n            String cluster, long ledgerId, long entryId) {\n        ReplicatedSubscriptionsSnapshotResponse.Builder builder = ReplicatedSubscriptionsSnapshotResponse.newBuilder();\n        builder.setSnapshotId(snapshotId);\n\n        MessageIdData.Builder msgIdBuilder = MessageIdData.newBuilder();\n        msgIdBuilder.setLedgerId(ledgerId);\n        msgIdBuilder.setEntryId(entryId);\n\n        ClusterMessageId.Builder clusterMessageIdBuilder = ClusterMessageId.newBuilder();\n        clusterMessageIdBuilder.setCluster(cluster);\n        clusterMessageIdBuilder.setMessageId(msgIdBuilder);\n\n        builder.setCluster(clusterMessageIdBuilder);\n        ReplicatedSubscriptionsSnapshotResponse response = builder.build();\n\n        int size = response.getSerializedSize();\n\n        ByteBuf payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n        try {\n            response.writeTo(outStream);\n            return newMessage(MarkerType.REPLICATED_SUBSCRIPTION_SNAPSHOT_RESPONSE, Optional.of(replyToCluster),\n                    payload);\n        } finally {\n            msgIdBuilder.recycle();\n            clusterMessageIdBuilder.recycle();\n            payload.release();\n            builder.recycle();\n            response.recycle();\n            outStream.recycle();\n        }\n    }\n","date":"2019-06-07 04:18:29","endLine":142,"groupId":"1987","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newReplicatedSubscriptionsSnapshotResponse","params":"(StringsnapshotId@StringreplyToCluster@Stringcluster@longledgerId@longentryId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/48/843489a8fe965031ace4d63e266c59a1a35f4d.src","preCode":"    public static ByteBuf newReplicatedSubscriptionsSnapshotResponse(String snapshotId, String replyToCluster,\n            String cluster, long ledgerId, long entryId) {\n        ReplicatedSubscriptionsSnapshotResponse.Builder builder = ReplicatedSubscriptionsSnapshotResponse.newBuilder();\n        builder.setSnapshotId(snapshotId);\n\n        MessageIdData.Builder msgIdBuilder = MessageIdData.newBuilder();\n        msgIdBuilder.setLedgerId(ledgerId);\n        msgIdBuilder.setEntryId(entryId);\n\n        ClusterMessageId.Builder clusterMessageIdBuilder = ClusterMessageId.newBuilder();\n        clusterMessageIdBuilder.setCluster(cluster);\n        clusterMessageIdBuilder.setMessageId(msgIdBuilder);\n\n        builder.setCluster(clusterMessageIdBuilder);\n        ReplicatedSubscriptionsSnapshotResponse response = builder.build();\n\n        int size = response.getSerializedSize();\n\n        ByteBuf payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n        try {\n            response.writeTo(outStream);\n            return newMessage(MarkerType.REPLICATED_SUBSCRIPTION_SNAPSHOT_RESPONSE, Optional.of(replyToCluster),\n                    payload);\n        } finally {\n            msgIdBuilder.recycle();\n            clusterMessageIdBuilder.recycle();\n            payload.release();\n            builder.recycle();\n            response.recycle();\n            outStream.recycle();\n        }\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"},{"authorDate":"2019-06-07 04:18:29","commitOrder":1,"curCode":"    public static ByteBuf newReplicatedSubscriptionsSnapshot(String snapshotId, String sourceCluster, long ledgerId,\n            long entryId, Map<String, MessageIdData> clusterIds) {\n        ReplicatedSubscriptionsSnapshot.Builder builder = ReplicatedSubscriptionsSnapshot.newBuilder();\n        builder.setSnapshotId(snapshotId);\n\n        MessageIdData.Builder msgIdBuilder = MessageIdData.newBuilder();\n        msgIdBuilder.setLedgerId(ledgerId);\n        msgIdBuilder.setEntryId(entryId);\n        builder.setLocalMessageId(msgIdBuilder);\n\n        clusterIds.forEach((cluster, msgId) -> {\n            ClusterMessageId.Builder clusterMessageIdBuilder = ClusterMessageId.newBuilder()\n                    .setCluster(cluster)\n                    .setMessageId(msgId);\n            builder.addClusters(clusterMessageIdBuilder);\n            clusterMessageIdBuilder.recycle();\n        });\n\n        ReplicatedSubscriptionsSnapshot snapshot = builder.build();\n\n        int size = snapshot.getSerializedSize();\n\n        ByteBuf payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n        try {\n            snapshot.writeTo(outStream);\n            return newMessage(MarkerType.REPLICATED_SUBSCRIPTION_SNAPSHOT, Optional.of(sourceCluster), payload);\n        } finally {\n            payload.release();\n            builder.recycle();\n            snapshot.recycle();\n            outStream.recycle();\n        }\n    }\n","date":"2019-06-07 04:18:29","endLine":192,"groupId":"10074","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newReplicatedSubscriptionsSnapshot","params":"(StringsnapshotId@StringsourceCluster@longledgerId@longentryId@Map<String@MessageIdData>clusterIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/48/843489a8fe965031ace4d63e266c59a1a35f4d.src","preCode":"    public static ByteBuf newReplicatedSubscriptionsSnapshot(String snapshotId, String sourceCluster, long ledgerId,\n            long entryId, Map<String, MessageIdData> clusterIds) {\n        ReplicatedSubscriptionsSnapshot.Builder builder = ReplicatedSubscriptionsSnapshot.newBuilder();\n        builder.setSnapshotId(snapshotId);\n\n        MessageIdData.Builder msgIdBuilder = MessageIdData.newBuilder();\n        msgIdBuilder.setLedgerId(ledgerId);\n        msgIdBuilder.setEntryId(entryId);\n        builder.setLocalMessageId(msgIdBuilder);\n\n        clusterIds.forEach((cluster, msgId) -> {\n            ClusterMessageId.Builder clusterMessageIdBuilder = ClusterMessageId.newBuilder()\n                    .setCluster(cluster)\n                    .setMessageId(msgId);\n            builder.addClusters(clusterMessageIdBuilder);\n            clusterMessageIdBuilder.recycle();\n        });\n\n        ReplicatedSubscriptionsSnapshot snapshot = builder.build();\n\n        int size = snapshot.getSerializedSize();\n\n        ByteBuf payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n        try {\n            snapshot.writeTo(outStream);\n            return newMessage(MarkerType.REPLICATED_SUBSCRIPTION_SNAPSHOT, Optional.of(sourceCluster), payload);\n        } finally {\n            payload.release();\n            builder.recycle();\n            snapshot.recycle();\n            outStream.recycle();\n        }\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"}],"commitId":"dfdfdb4efa46662e7ec8cb027fdfe854d45caec5","commitMessage":"@@@Include pulsar-client-api in shaded client artifacts (#4445)\n\n* o.a.p.c.api -> o.a.p.c.protocol\n\nClasses in pulsar-common module were moved to avoid jpms split-package\nconflict between the pulsar-client-api and pulsar-common modules.\n\n* o.a.p.c.schema -> o.a.p.c.protocol.schema\n\nClasses in pulsar-common module were moved to avoid jpms split-package\nconflict between the pulsar-client-api and pulsar-common modules.\n","date":"2019-06-07 04:18:29","modifiedFileCount":"91","status":"B","submitter":"Kim Christian Gaarder"},{"authorTime":"2021-01-06 08:42:31","codes":[{"authorDate":"2021-01-06 08:42:31","commitOrder":2,"curCode":"    public static ByteBuf newReplicatedSubscriptionsSnapshotResponse(String snapshotId, String replyToCluster,\n            String cluster, long ledgerId, long entryId) {\n        ReplicatedSubscriptionsSnapshotResponse response = LOCAL_SNAPSHOT_RESPONSE.get()\n                .clear()\n                .setSnapshotId(snapshotId);\n        response\n                .setCluster()\n                .setCluster(cluster)\n                .setMessageId()\n                .setLedgerId(ledgerId)\n                .setEntryId(entryId);\n\n        ByteBuf payload = PooledByteBufAllocator.DEFAULT.buffer(response.getSerializedSize());\n        try {\n            response.writeTo(payload);\n            return newMessage(MarkerType.REPLICATED_SUBSCRIPTION_SNAPSHOT_RESPONSE, Optional.of(replyToCluster),\n                    payload);\n        } finally {\n            payload.release();\n        }\n    }\n","date":"2021-01-06 08:42:31","endLine":154,"groupId":"10193","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newReplicatedSubscriptionsSnapshotResponse","params":"(StringsnapshotId@StringreplyToCluster@Stringcluster@longledgerId@longentryId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3f/68a5245e6644f3f6963393970dddcc34240f97.src","preCode":"    public static ByteBuf newReplicatedSubscriptionsSnapshotResponse(String snapshotId, String replyToCluster,\n            String cluster, long ledgerId, long entryId) {\n        ReplicatedSubscriptionsSnapshotResponse.Builder builder = ReplicatedSubscriptionsSnapshotResponse.newBuilder();\n        builder.setSnapshotId(snapshotId);\n\n        MessageIdData.Builder msgIdBuilder = MessageIdData.newBuilder();\n        msgIdBuilder.setLedgerId(ledgerId);\n        msgIdBuilder.setEntryId(entryId);\n\n        ClusterMessageId.Builder clusterMessageIdBuilder = ClusterMessageId.newBuilder();\n        clusterMessageIdBuilder.setCluster(cluster);\n        clusterMessageIdBuilder.setMessageId(msgIdBuilder);\n\n        builder.setCluster(clusterMessageIdBuilder);\n        ReplicatedSubscriptionsSnapshotResponse response = builder.build();\n\n        int size = response.getSerializedSize();\n\n        ByteBuf payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n        try {\n            response.writeTo(outStream);\n            return newMessage(MarkerType.REPLICATED_SUBSCRIPTION_SNAPSHOT_RESPONSE, Optional.of(replyToCluster),\n                    payload);\n        } finally {\n            msgIdBuilder.recycle();\n            clusterMessageIdBuilder.recycle();\n            payload.release();\n            builder.recycle();\n            response.recycle();\n            outStream.recycle();\n        }\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2021-01-06 08:42:31","commitOrder":2,"curCode":"    public static ByteBuf newReplicatedSubscriptionsSnapshot(String snapshotId, String sourceCluster, long ledgerId,\n            long entryId, Map<String, MarkersMessageIdData> clusterIds) {\n        ReplicatedSubscriptionsSnapshot snapshot = LOCAL_SNAPSHOT.get()\n                .clear()\n                .setSnapshotId(snapshotId);\n        snapshot.setLocalMessageId()\n                .setLedgerId(ledgerId)\n                .setEntryId(entryId);\n\n        clusterIds.forEach((cluster, msgId) -> {\n            snapshot.addCluster()\n                    .setCluster(cluster)\n                    .setMessageId().copyFrom(msgId);\n        });\n\n        int size = snapshot.getSerializedSize();\n        ByteBuf payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n        try {\n            snapshot.writeTo(payload);\n            return newMessage(MarkerType.REPLICATED_SUBSCRIPTION_SNAPSHOT, Optional.of(sourceCluster), payload);\n        } finally {\n            payload.release();\n        }\n    }\n","date":"2021-01-06 08:42:31","endLine":187,"groupId":"10193","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newReplicatedSubscriptionsSnapshot","params":"(StringsnapshotId@StringsourceCluster@longledgerId@longentryId@Map<String@MarkersMessageIdData>clusterIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3f/68a5245e6644f3f6963393970dddcc34240f97.src","preCode":"    public static ByteBuf newReplicatedSubscriptionsSnapshot(String snapshotId, String sourceCluster, long ledgerId,\n            long entryId, Map<String, MessageIdData> clusterIds) {\n        ReplicatedSubscriptionsSnapshot.Builder builder = ReplicatedSubscriptionsSnapshot.newBuilder();\n        builder.setSnapshotId(snapshotId);\n\n        MessageIdData.Builder msgIdBuilder = MessageIdData.newBuilder();\n        msgIdBuilder.setLedgerId(ledgerId);\n        msgIdBuilder.setEntryId(entryId);\n        builder.setLocalMessageId(msgIdBuilder);\n\n        clusterIds.forEach((cluster, msgId) -> {\n            ClusterMessageId.Builder clusterMessageIdBuilder = ClusterMessageId.newBuilder()\n                    .setCluster(cluster)\n                    .setMessageId(msgId);\n            builder.addClusters(clusterMessageIdBuilder);\n            clusterMessageIdBuilder.recycle();\n        });\n\n        ReplicatedSubscriptionsSnapshot snapshot = builder.build();\n\n        int size = snapshot.getSerializedSize();\n\n        ByteBuf payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n        try {\n            snapshot.writeTo(outStream);\n            return newMessage(MarkerType.REPLICATED_SUBSCRIPTION_SNAPSHOT, Optional.of(sourceCluster), payload);\n        } finally {\n            payload.release();\n            builder.recycle();\n            snapshot.recycle();\n            outStream.recycle();\n        }\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"c12765a0530bcefca8e840d2f8f43383d7478778","commitMessage":"@@@PIP-75: Perform serialization/deserialization with LightProto (#9046)\n\n","date":"2021-01-06 08:42:31","modifiedFileCount":"185","status":"M","submitter":"Matteo Merli"}]
