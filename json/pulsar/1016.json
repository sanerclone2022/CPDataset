[{"authorTime":"2020-10-28 16:53:31","codes":[{"authorDate":"2020-10-28 16:53:31","commitOrder":1,"curCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","date":"2020-10-28 16:53:31","endLine":71,"groupId":"11162","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testS3Configuration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/cb/5bc78dde1aa14e8a660a26cb884c9ed45b6a59.src","preCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2020-10-28 16:53:31","commitOrder":1,"curCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n    }\n","date":"2020-10-28 16:53:31","endLine":102,"groupId":"11162","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGcsConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/cb/5bc78dde1aa14e8a660a26cb884c9ed45b6a59.src","preCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"a8eaeb5eb6ddabcbc59030ea14207b43ca76237a","commitMessage":"@@@[Offload] Make the field name in `OffloadPolicies` match with config file (#8310)\n\nFixes #8220 \n\n\n Motivation\n\nCurrently.  the fields' values couldn't be set properly by the Pulsar broker config file(`broker.conf` or `standalone.conf`). \n\n\n Modifications\n\nchanged fields in `OffloadPolicies`\n\n1. managedLedgerOffloadAutoTriggerSizeThresholdBytes\n2. managedLedgerOffloadDeletionLagMs\n","date":"2020-10-28 16:53:31","modifiedFileCount":"13","status":"B","submitter":"ran"},{"authorTime":"2020-11-06 13:01:28","codes":[{"authorDate":"2020-11-06 13:01:28","commitOrder":2,"curCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","date":"2020-11-06 13:01:28","endLine":75,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testS3Configuration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d8/7887dfe9d02d028566fae521db62d75aa5c81c.src","preCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2020-11-06 13:01:28","commitOrder":2,"curCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n    }\n","date":"2020-11-06 13:01:28","endLine":110,"groupId":"11162","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGcsConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d8/7887dfe9d02d028566fae521db62d75aa5c81c.src","preCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"2530177dac83124ea06194e0de788c53c34cf3e6","commitMessage":"@@@[Issue 7949][Tiered Storage] support aws creds per offload policies (#7950)\n\nFixes #7949 \n\n\n Motivation\n\nProvide different s3 credentials per offloadpolicies on each ns.\n\n\n Modifications\n\nAdd awsId/awsSecret in OffloadPolicies.\n\n\n Does this pull request potentially affect one of the following parts:\n\n  - The rest endpoints: yes it adds options\n  - The admin cli options: yes it adds options\n\n\n Documentation\n\n  - Does this pull request introduce a new feature? yes\n  - If yes.  how is the feature documented? docs\n","date":"2020-11-06 13:01:28","modifiedFileCount":"8","status":"M","submitter":"Alexandre DUVAL"},{"authorTime":"2021-01-08 13:01:17","codes":[{"authorDate":"2021-01-08 13:01:17","commitOrder":3,"curCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                OffloadedReadPriority.TIERED_STORAGE_FIRST\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","date":"2021-01-08 13:01:17","endLine":77,"groupId":"6802","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testS3Configuration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a8/9409c0ec526209048b41ce6be00185c4b89ab4.src","preCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2021-01-08 13:01:17","commitOrder":3,"curCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n        final OffloadedReadPriority readPriority = OffloadedReadPriority.TIERED_STORAGE_FIRST;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                readPriority\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadedReadPriority(), readPriority);\n    }\n","date":"2021-01-08 13:01:17","endLine":115,"groupId":"6804","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGcsConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a8/9409c0ec526209048b41ce6be00185c4b89ab4.src","preCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"7c09f5ce649edcca0be792198d97573197c5a272","commitMessage":"@@@Configurable data source for offloaded messages (#8717)\n\nFix issue: https://github.com/apache/pulsar/issues/8591\n\nThis PR include:\n* API change in command tools \n* Related implementation with tests\n* Related docs in cookbook\n\nBy the way  log4j dependency is removed for module `managed-ledger` because now the whole project use log4j2 as the default logger framework.","date":"2021-01-08 13:01:17","modifiedFileCount":"12","status":"M","submitter":"Renkai Ge"},{"authorTime":"2021-05-07 05:12:56","codes":[{"authorDate":"2021-05-07 05:12:56","commitOrder":4,"curCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String role = \"test-role\";\n        final String roleSessionName = \"test-role-session-name\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                role,\n                roleSessionName,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                OffloadedReadPriority.TIERED_STORAGE_FIRST\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","date":"2021-05-07 05:12:56","endLine":81,"groupId":"9052","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testS3Configuration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c4/aacc1e7704ca71bc0d6e0a56c057d4704a634f.src","preCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                OffloadedReadPriority.TIERED_STORAGE_FIRST\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2021-05-07 05:12:56","commitOrder":4,"curCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final String role = \"test-role\";\n        final String roleSessionName = \"test-role-session-name\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n        final OffloadedReadPriority readPriority = OffloadedReadPriority.TIERED_STORAGE_FIRST;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                role,\n                roleSessionName,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                readPriority\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadedReadPriority(), readPriority);\n    }\n","date":"2021-05-07 05:12:56","endLine":123,"groupId":"9051","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGcsConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c4/aacc1e7704ca71bc0d6e0a56c057d4704a634f.src","preCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n        final OffloadedReadPriority readPriority = OffloadedReadPriority.TIERED_STORAGE_FIRST;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                readPriority\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadedReadPriority(), readPriority);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"0355a63731299655acb4dce4f123074b608bdd81","commitMessage":"@@@[Issue 8894][Offloader] Fix AWS credentials usages (#8950)\n\n* support both STS and default aws creds\n\n* checkstyle\n\n* use provider\n\n* pass creds to properties\n\n* add tests","date":"2021-05-07 05:12:56","modifiedFileCount":"12","status":"M","submitter":"Alexandre DUVAL"},{"authorTime":"2021-06-03 05:17:04","codes":[{"authorDate":"2021-06-03 05:17:04","commitOrder":5,"curCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String role = \"test-role\";\n        final String roleSessionName = \"test-role-session-name\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPoliciesImpl offloadPolicies = OffloadPoliciesImpl.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                role,\n                roleSessionName,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                OffloadedReadPriority.TIERED_STORAGE_FIRST\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","date":"2021-06-03 05:17:04","endLine":80,"groupId":"1016","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testS3Configuration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/86/a3e39a68a00b7e27e5363b2620884d9c5cce13.src","preCode":"    public void testS3Configuration() {\n        final String driver = \"aws-s3\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String role = \"test-role\";\n        final String roleSessionName = \"test-role-session-name\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final String endPoint = \"test-endpoint\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 10L * M;\n        final Long offloadDeletionLagInMillis = 5L * MIN;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                role,\n                roleSessionName,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                OffloadedReadPriority.TIERED_STORAGE_FIRST\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadServiceEndpoint(), endPoint);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getS3ManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(),\n                offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(),\n                new Long(offloadDeletionLagInMillis));\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2021-06-03 05:17:04","commitOrder":5,"curCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final String role = \"test-role\";\n        final String roleSessionName = \"test-role-session-name\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n        final OffloadedReadPriority readPriority = OffloadedReadPriority.TIERED_STORAGE_FIRST;\n\n        OffloadPoliciesImpl offloadPolicies = OffloadPoliciesImpl.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                role,\n                roleSessionName,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                readPriority\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadedReadPriority(), readPriority);\n    }\n","date":"2021-06-03 05:17:04","endLine":122,"groupId":"1016","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testGcsConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/86/a3e39a68a00b7e27e5363b2620884d9c5cce13.src","preCode":"    public void testGcsConfiguration() {\n        final String driver = \"google-cloud-storage\";\n        final String region = \"test-region\";\n        final String bucket = \"test-bucket\";\n        final String endPoint = \"test-endpoint\";\n        final String role = \"test-role\";\n        final String roleSessionName = \"test-role-session-name\";\n        final String credentialId = \"test-credential-id\";\n        final String credentialSecret = \"test-credential-secret\";\n        final Integer maxBlockSizeInBytes = 5 * M;\n        final Integer readBufferSizeInBytes = 2 * M;\n        final Long offloadThresholdInBytes = 0L;\n        final Long offloadDeletionLagInMillis = 5 * MIN;\n        final OffloadedReadPriority readPriority = OffloadedReadPriority.TIERED_STORAGE_FIRST;\n\n        OffloadPolicies offloadPolicies = OffloadPolicies.create(\n                driver,\n                region,\n                bucket,\n                endPoint,\n                role,\n                roleSessionName,\n                credentialId,\n                credentialSecret,\n                maxBlockSizeInBytes,\n                readBufferSizeInBytes,\n                offloadThresholdInBytes,\n                offloadDeletionLagInMillis,\n                readPriority\n        );\n\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDriver(), driver);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadRegion(), region);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadBucket(), bucket);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadMaxBlockSizeInBytes(), maxBlockSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getGcsManagedLedgerOffloadReadBufferSizeInBytes(), readBufferSizeInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadThresholdInBytes(), offloadThresholdInBytes);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadDeletionLagInMillis(), offloadDeletionLagInMillis);\n        Assert.assertEquals(offloadPolicies.getManagedLedgerOffloadedReadPriority(), readPriority);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/OffloadPoliciesTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"301a76435ce918520f1b70b95b7ebed9bf1b08b5","commitMessage":"@@@Remove pulsar-client-admin-api dependency : pulsar-common (#10774)\n\n* remove gson from admin api Topics.java\n\n* Bookies.java\n\n* Brokers.java\n\n* BrokerStats.java\n\n* fix PulsarAdminException\n\n* Clusters.java\n\n* Tenants.java\n\n* minor fix on ResourceGroups\n\n* Namespaces.java & OffloadPolicies\n\n* temp remove JsonProperty in OffloadPolicies\n\n* Topics & NonPersistentTopics\n\n* ResourceQuotas with MixIn class\n\n* Functions\n\n* Sources.java\n\n* Sinks.java\n\n* Schemas.java\n\n* resolve checkstyle\n\n* minor fix\n\n* Transactions.java\n\n* fix stylecheck\n\n* set ObjectMapper module\n\n* fix ci\n\n* fix PulsarAdminException\n\n* remove gson\n\n* remove swagger\n\n* merge master\n\n* remove swagger\n\n* remove io.swagger\n\n* remove commons-lang3\n\n* use Objects.requireNonNull\n\n* remove commons-lang3\n\n* fix interface mapping\n\n* fix ci\n\n* extract OffloadPoliciesInterface\n\n* extract FunctionStats interfaces\n\n* fix unit test\n\n* fix shaded class\n\n* add object mapper mixin tests\n\n* fix ci\n\n* fix admin exception ci error\n\n* UpdateOptions\n\n* AutoFailoverPolicyData\n\n* BrokerNamespaceIsolationData\n\n* ClusterData\n\n* FailureDomain\n\n* FunctionInstanceStats\n\n* NamespaceIsolationData\n\n* OffloadPolicies\n\n* TenantInfo\n\n* FunctionStats\n\n* fix stylecheck\n\n* Fixed interface\n\n* Fixed ClusterData equals method\n\n* Fixed merge issue\n\n* Fixed another merge issue\n\n* Fixed test issue after merge\n\nCo-authored-by: Rui Fu <freelz@gmail.com>","date":"2021-06-03 05:17:04","modifiedFileCount":"266","status":"M","submitter":"Matteo Merli"}]
