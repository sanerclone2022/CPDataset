[{"authorTime":"2017-06-24 02:22:49","codes":[{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"    public void testComputeIfAbsent() {\n        ConcurrentLongHashMap<Integer> map = new ConcurrentLongHashMap<>(16, 1);\n        AtomicInteger counter = new AtomicInteger();\n        LongFunction<Integer> provider = new LongFunction<Integer>() {\n            public Integer apply(long key) {\n                return counter.getAndIncrement();\n            }\n        };\n\n        assertEquals(map.computeIfAbsent(0, provider).intValue(), 0);\n        assertEquals(map.get(0).intValue(), 0);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(2, provider).intValue(), 2);\n        assertEquals(map.get(2).intValue(), 2);\n    }\n","date":"2017-06-24 04:41:32","endLine":345,"groupId":"5192","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputeIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c4/215f3408a20565416b4ab4611d3230eae2f077.src","preCode":"    public void testComputeIfAbsent() {\n        ConcurrentLongHashMap<Integer> map = new ConcurrentLongHashMap<>(16, 1);\n        AtomicInteger counter = new AtomicInteger();\n        LongFunction<Integer> provider = new LongFunction<Integer>() {\n            public Integer apply(long key) {\n                return counter.getAndIncrement();\n            }\n        };\n\n        assertEquals(map.computeIfAbsent(0, provider).intValue(), 0);\n        assertEquals(map.get(0).intValue(), 0);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(2, provider).intValue(), 2);\n        assertEquals(map.get(2).intValue(), 2);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/collections/ConcurrentLongHashMapTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"B"},{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"    public void testComputeIfAbsent() {\n        ConcurrentOpenHashMap<Integer, Integer> map = new ConcurrentOpenHashMap<>(16, 1);\n        AtomicInteger counter = new AtomicInteger();\n        Function<Integer, Integer> provider = key -> counter.getAndIncrement();\n\n        assertEquals(map.computeIfAbsent(0, provider).intValue(), 0);\n        assertEquals(map.get(0).intValue(), 0);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(2, provider).intValue(), 2);\n        assertEquals(map.get(2).intValue(), 2);\n    }\n","date":"2017-06-24 04:41:32","endLine":327,"groupId":"5192","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testComputeIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3c/a8e9e1af1ef734c07b30d84066d5bd1279a213.src","preCode":"    public void testComputeIfAbsent() {\n        ConcurrentOpenHashMap<Integer, Integer> map = new ConcurrentOpenHashMap<>(16, 1);\n        AtomicInteger counter = new AtomicInteger();\n        Function<Integer, Integer> provider = key -> counter.getAndIncrement();\n\n        assertEquals(map.computeIfAbsent(0, provider).intValue(), 0);\n        assertEquals(map.get(0).intValue(), 0);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(2, provider).intValue(), 2);\n        assertEquals(map.get(2).intValue(), 2);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/collections/ConcurrentOpenHashMapTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"B"}],"commitId":"70da31b082ea0ff7466cdf740fc0d6b443d21861","commitMessage":"@@@Renamed Java packages from com.yahoo.pulsar to org.apache.pulsar (#524)\n","date":"2017-06-24 04:41:32","modifiedFileCount":"5","status":"B","submitter":"Matteo Merli"},{"authorTime":"2017-06-24 02:22:49","codes":[{"authorDate":"2019-07-22 07:28:29","commitOrder":2,"curCode":"    public void testComputeIfAbsent() {\n        ConcurrentLongHashMap<Integer> map = new ConcurrentLongHashMap<>(16, 1);\n        AtomicInteger counter = new AtomicInteger();\n        LongFunction<Integer> provider = key -> counter.getAndIncrement();\n\n        assertEquals(map.computeIfAbsent(0, provider).intValue(), 0);\n        assertEquals(map.get(0).intValue(), 0);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(2, provider).intValue(), 2);\n        assertEquals(map.get(2).intValue(), 2);\n    }\n","date":"2019-07-22 07:28:29","endLine":392,"groupId":"10120","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputeIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/5a/9f49be38a9f2e0dcb7aef54029d8094b7e2db3.src","preCode":"    public void testComputeIfAbsent() {\n        ConcurrentLongHashMap<Integer> map = new ConcurrentLongHashMap<>(16, 1);\n        AtomicInteger counter = new AtomicInteger();\n        LongFunction<Integer> provider = new LongFunction<Integer>() {\n            public Integer apply(long key) {\n                return counter.getAndIncrement();\n            }\n        };\n\n        assertEquals(map.computeIfAbsent(0, provider).intValue(), 0);\n        assertEquals(map.get(0).intValue(), 0);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(2, provider).intValue(), 2);\n        assertEquals(map.get(2).intValue(), 2);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/collections/ConcurrentLongHashMapTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"},{"authorDate":"2017-06-24 02:22:49","commitOrder":2,"curCode":"    public void testComputeIfAbsent() {\n        ConcurrentOpenHashMap<Integer, Integer> map = new ConcurrentOpenHashMap<>(16, 1);\n        AtomicInteger counter = new AtomicInteger();\n        Function<Integer, Integer> provider = key -> counter.getAndIncrement();\n\n        assertEquals(map.computeIfAbsent(0, provider).intValue(), 0);\n        assertEquals(map.get(0).intValue(), 0);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(2, provider).intValue(), 2);\n        assertEquals(map.get(2).intValue(), 2);\n    }\n","date":"2017-06-24 04:41:32","endLine":327,"groupId":"10120","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testComputeIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3c/a8e9e1af1ef734c07b30d84066d5bd1279a213.src","preCode":"    public void testComputeIfAbsent() {\n        ConcurrentOpenHashMap<Integer, Integer> map = new ConcurrentOpenHashMap<>(16, 1);\n        AtomicInteger counter = new AtomicInteger();\n        Function<Integer, Integer> provider = key -> counter.getAndIncrement();\n\n        assertEquals(map.computeIfAbsent(0, provider).intValue(), 0);\n        assertEquals(map.get(0).intValue(), 0);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(1, provider).intValue(), 1);\n        assertEquals(map.get(1).intValue(), 1);\n\n        assertEquals(map.computeIfAbsent(2, provider).intValue(), 2);\n        assertEquals(map.get(2).intValue(), 2);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/collections/ConcurrentOpenHashMapTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"N"}],"commitId":"84364ddc10394f7361083a3505b34f0dc5710316","commitMessage":"@@@Convert anonymous classes to lambda (#4703)\n\n* Convert anonymous functions to lambda\n\n* Replacing lambda with anonymous implementation.  because lambda cannot be mocked\n","date":"2019-07-22 07:28:29","modifiedFileCount":"28","status":"M","submitter":"vzhikserg"}]
