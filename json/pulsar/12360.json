[{"authorTime":"2020-09-05 21:20:50","codes":[{"authorDate":"2020-07-28 14:25:58","commitOrder":2,"curCode":"        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            admin.namespaces().setInactiveTopicPolicies(namespace, new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","date":"2020-07-28 14:25:58","endLine":1077,"groupId":"14088","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/66/1a56ad46795b4fddfaa6f7fd6b1a76ef9af360.src","preCode":"        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            admin.namespaces().setInactiveTopicPolicies(namespace, new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1063,"status":"NB"},{"authorDate":"2020-09-05 21:20:50","commitOrder":2,"curCode":"        void run() throws PulsarAdminException {\n            String persistentTopic = validatePersistentTopic(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            admin.topics().setInactiveTopicPolicies(persistentTopic,\n                    new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","date":"2020-09-05 21:20:50","endLine":1552,"groupId":"11758","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f5/ccaa16897fc21670441520e7ac0ea3d1c6ce94.src","preCode":"        void run() throws PulsarAdminException {\n            String persistentTopic = validatePersistentTopic(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            admin.topics().setInactiveTopicPolicies(persistentTopic,\n                    new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1537,"status":"B"}],"commitId":"4a441db363efe1adeefcfca83cade5232c5b1666","commitMessage":"@@@Support topic-level inactiveTopicPolicies (#7986)\n\n\n Motivation\nSupport topic-level inactiveTopicPolicies\n\n\n Modifications\nSupport set/get/remove inactiveTopicPolicies policy on topic level.","date":"2020-09-05 21:20:50","modifiedFileCount":"9","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-01-29 03:06:36","commitOrder":3,"curCode":"        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            getAdmin().namespaces().setInactiveTopicPolicies(namespace, new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","date":"2021-01-29 03:06:36","endLine":1171,"groupId":"14088","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ec/636499520574781a4fcbea12fc708c94530242.src","preCode":"        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            admin.namespaces().setInactiveTopicPolicies(namespace, new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1157,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":3,"curCode":"        void run() throws PulsarAdminException {\n            String persistentTopic = validatePersistentTopic(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            getAdmin().topics().setInactiveTopicPolicies(persistentTopic,\n                    new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","date":"2021-01-29 03:06:36","endLine":2032,"groupId":"11758","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0c/610c2779cd4584c2874daaace658aee5f2b9db.src","preCode":"        void run() throws PulsarAdminException {\n            String persistentTopic = validatePersistentTopic(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            admin.topics().setInactiveTopicPolicies(persistentTopic,\n                    new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":2017,"status":"M"}],"commitId":"232b32439687995dd3102d8c281cf50b7b91e0bf","commitMessage":"@@@Lazily init PulsarAdmin in PulsarAdminTool (#9312)\n\n\n Motivation\npulsar-admin (PulsarAdminTool) initialises eagerly the PulsarAdmin object and some of the the underlying REST API intefaces.\nThis initialisation process triggers lot of resource loading (like SSL/RESTAPI classes....) that slows down the JVM even for stuff that is not needed.\nAlso there are shutdown hooks that are useless by they are executed while existing from the command.\n\nRemoving initialisation of useless stuff helps in having a better bootstrap time.  especially in case that you are not performing API calls.  like when you are learning the tool and you make lots of syntax errors. \n\n\n Modifications\n- Initialise as lazily as possible PulsarAdmin \n- Make PulsarAdminTool#main \"testable\" by allowing it to not call System.exit\n- Use halt instead of exit in order to not trigger shutdown hooks\n\n\n Verifying this change\nThis change is a trivial rework / code cleanup.  but I have added tests for parts that have been touched and had not unit tests.\n","date":"2021-01-29 03:06:36","modifiedFileCount":"27","status":"M","submitter":"Enrico Olivelli"},{"authorTime":"2021-04-15 23:59:11","codes":[{"authorDate":"2021-01-29 03:06:36","commitOrder":4,"curCode":"        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            getAdmin().namespaces().setInactiveTopicPolicies(namespace, new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","date":"2021-01-29 03:06:36","endLine":1171,"groupId":"12360","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ec/636499520574781a4fcbea12fc708c94530242.src","preCode":"        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            getAdmin().namespaces().setInactiveTopicPolicies(namespace, new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1157,"status":"N"},{"authorDate":"2021-04-15 23:59:11","commitOrder":4,"curCode":"        void run() throws PulsarAdminException {\n            String persistentTopic = validatePersistentTopic(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            getTopics().setInactiveTopicPolicies(persistentTopic,\n                    new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","date":"2021-04-15 23:59:11","endLine":2142,"groupId":"12360","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d6/4d98aed4396b8d058faaf570c2fdad3237e29b.src","preCode":"        void run() throws PulsarAdminException {\n            String persistentTopic = validatePersistentTopic(params);\n            long maxInactiveDurationInSeconds = TimeUnit.SECONDS.toSeconds(RelativeTimeUtil.parseRelativeTimeInSeconds(deleteInactiveTopicsMaxInactiveDuration));\n\n            if (enableDeleteWhileInactive == disableDeleteWhileInactive) {\n                throw new ParameterException(\"Need to specify either enable-delete-while-inactive or disable-delete-while-inactive\");\n            }\n            InactiveTopicDeleteMode deleteMode = null;\n            try {\n                deleteMode = InactiveTopicDeleteMode.valueOf(inactiveTopicDeleteMode);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(\"delete mode can only be set to delete_when_no_subscriptions or delete_when_subscriptions_caught_up\");\n            }\n            getAdmin().topics().setInactiveTopicPolicies(persistentTopic,\n                    new InactiveTopicPolicies(deleteMode, (int) maxInactiveDurationInSeconds, enableDeleteWhileInactive));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":2127,"status":"M"}],"commitId":"2e305277c0ad89106beac260e9c3d5b517c10ab0","commitMessage":"@@@[ISSUE 10176] fix npe in CmdTopics (#10178)\n\n* [cmd] fix npe in CmdTopics\n\n* add unit tests\n\n* accept suggestion\n\nCo-authored-by: linjunhua <linjh1@jiguang.cn>","date":"2021-04-15 23:59:11","modifiedFileCount":"2","status":"M","submitter":"linlinnn"}]
