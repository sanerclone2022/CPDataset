[{"authorTime":"2020-05-30 13:24:29","codes":[{"authorDate":"2020-05-30 13:24:29","commitOrder":1,"curCode":"    public static <T> T createInstance(String userClassName,\n                                       Class<T> xface,\n                                       ClassLoader classLoader) {\n        Class<?> theCls;\n        try {\n            theCls = Class.forName(userClassName, true, classLoader);\n        } catch (ClassNotFoundException | NoClassDefFoundError cnfe) {\n            throw new RuntimeException(\"User class must be in class path\", cnfe);\n        }\n        if (!xface.isAssignableFrom(theCls)) {\n            throw new RuntimeException(userClassName + \" does not implement \" + xface.getName());\n        }\n        Class<T> tCls = (Class<T>) theCls.asSubclass(xface);\n        T result;\n        try {\n            Constructor<T> meth = (Constructor<T>) constructorCache.get(theCls);\n            if (null == meth) {\n                meth = tCls.getDeclaredConstructor();\n                meth.setAccessible(true);\n                constructorCache.put(theCls, meth);\n            }\n            result = meth.newInstance();\n        } catch (InstantiationException ie) {\n            throw new RuntimeException(\"User class must be concrete\", ie);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"User class must have a no-arg constructor\", e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"User class must a public constructor\", e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(\"User class constructor throws exception\", e);\n        }\n        return result;\n\n    }\n","date":"2020-05-30 13:24:29","endLine":93,"groupId":"13457","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createInstance","params":"(StringuserClassName@Class<T>xface@ClassLoaderclassLoader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/e1/713ba243c670444e8bfab3bbbc0891ecd645c0.src","preCode":"    public static <T> T createInstance(String userClassName,\n                                       Class<T> xface,\n                                       ClassLoader classLoader) {\n        Class<?> theCls;\n        try {\n            theCls = Class.forName(userClassName, true, classLoader);\n        } catch (ClassNotFoundException | NoClassDefFoundError cnfe) {\n            throw new RuntimeException(\"User class must be in class path\", cnfe);\n        }\n        if (!xface.isAssignableFrom(theCls)) {\n            throw new RuntimeException(userClassName + \" does not implement \" + xface.getName());\n        }\n        Class<T> tCls = (Class<T>) theCls.asSubclass(xface);\n        T result;\n        try {\n            Constructor<T> meth = (Constructor<T>) constructorCache.get(theCls);\n            if (null == meth) {\n                meth = tCls.getDeclaredConstructor();\n                meth.setAccessible(true);\n                constructorCache.put(theCls, meth);\n            }\n            result = meth.newInstance();\n        } catch (InstantiationException ie) {\n            throw new RuntimeException(\"User class must be concrete\", ie);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"User class must have a no-arg constructor\", e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"User class must a public constructor\", e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(\"User class constructor throws exception\", e);\n        }\n        return result;\n\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/util/Reflections.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2020-05-30 13:24:29","commitOrder":1,"curCode":"    public static Object createInstance(String userClassName,\n                                        ClassLoader classLoader, Object[] params, Class[] paramTypes) {\n        if (params.length != paramTypes.length) {\n            throw new RuntimeException(\n                    \"Unequal number of params and paramTypes. Each param must have a corresponding param type\");\n        }\n        Class<?> theCls;\n        try {\n            theCls = Class.forName(userClassName, true, classLoader);\n        } catch (ClassNotFoundException | NoClassDefFoundError cnfe) {\n            throw new RuntimeException(\"User class must be in class path\", cnfe);\n        }\n        Object result;\n        try {\n            Constructor<?> meth = constructorCache.get(theCls);\n            if (null == meth) {\n                meth = theCls.getDeclaredConstructor(paramTypes);\n                meth.setAccessible(true);\n                constructorCache.put(theCls, meth);\n            }\n            result = meth.newInstance(params);\n        } catch (InstantiationException ie) {\n            throw new RuntimeException(\"User class must be concrete\", ie);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"User class doesn't have such method\", e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"User class must have a no-arg constructor\", e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(\"User class constructor throws exception\", e);\n        }\n        return result;\n\n    }\n","date":"2020-05-30 13:24:29","endLine":164,"groupId":"14703","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createInstance","params":"(StringuserClassName@ClassLoaderclassLoader@Object[]params@Class[]paramTypes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/e1/713ba243c670444e8bfab3bbbc0891ecd645c0.src","preCode":"    public static Object createInstance(String userClassName,\n                                        ClassLoader classLoader, Object[] params, Class[] paramTypes) {\n        if (params.length != paramTypes.length) {\n            throw new RuntimeException(\n                    \"Unequal number of params and paramTypes. Each param must have a corresponding param type\");\n        }\n        Class<?> theCls;\n        try {\n            theCls = Class.forName(userClassName, true, classLoader);\n        } catch (ClassNotFoundException | NoClassDefFoundError cnfe) {\n            throw new RuntimeException(\"User class must be in class path\", cnfe);\n        }\n        Object result;\n        try {\n            Constructor<?> meth = constructorCache.get(theCls);\n            if (null == meth) {\n                meth = theCls.getDeclaredConstructor(paramTypes);\n                meth.setAccessible(true);\n                constructorCache.put(theCls, meth);\n            }\n            result = meth.newInstance(params);\n        } catch (InstantiationException ie) {\n            throw new RuntimeException(\"User class must be concrete\", ie);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"User class doesn't have such method\", e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"User class must have a no-arg constructor\", e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(\"User class constructor throws exception\", e);\n        }\n        return result;\n\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/util/Reflections.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"}],"commitId":"e451be300e5a0e718c444dd3a5b3a80a16734974","commitMessage":"@@@Moved ClassLoading and Reflections Helper functions to common (#7103)\n\n* Moved ClassLoading and Reflections Helper functions to common\n\n* Fix tests\n\n* Fix test\n\nCo-authored-by: Sanjeev Kulkarni <sanjeevk@splunk.com>","date":"2020-05-30 13:24:29","modifiedFileCount":"27","status":"B","submitter":"Sanjeev Kulkarni"},{"authorTime":"2020-05-30 13:24:29","codes":[{"authorDate":"2020-11-08 16:45:12","commitOrder":2,"curCode":"    public static <T> T createInstance(String userClassName,\n                                       Class<T> xface,\n                                       ClassLoader classLoader) {\n        Class<?> theCls;\n        try {\n            theCls = Class.forName(userClassName, true, classLoader);\n        } catch (ClassNotFoundException | NoClassDefFoundError cnfe) {\n            throw new RuntimeException(\"User class must be in class path\", cnfe);\n        }\n        if (!xface.isAssignableFrom(theCls)) {\n            throw new RuntimeException(userClassName + \" does not implement \" + xface.getName());\n        }\n        Class<T> tCls = (Class<T>) theCls.asSubclass(xface);\n        T result;\n        try {\n            Constructor<T> meth = (Constructor<T>) constructorCache.get(theCls);\n            if (null == meth) {\n                meth = tCls.getDeclaredConstructor();\n                meth.setAccessible(true);\n                constructorCache.put(theCls, meth);\n            }\n            result = meth.newInstance();\n        } catch (InstantiationException ie) {\n            throw new RuntimeException(\"User class must be concrete\", ie);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"User class must have a no-arg constructor\", e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"User class must have a public constructor\", e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(\"User class constructor throws exception\", e);\n        }\n        return result;\n\n    }\n","date":"2020-11-08 16:45:12","endLine":97,"groupId":"11206","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createInstance","params":"(StringuserClassName@Class<T>xface@ClassLoaderclassLoader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0d/4c2b49c55f3d5346c40b599c18a740a419d9cf.src","preCode":"    public static <T> T createInstance(String userClassName,\n                                       Class<T> xface,\n                                       ClassLoader classLoader) {\n        Class<?> theCls;\n        try {\n            theCls = Class.forName(userClassName, true, classLoader);\n        } catch (ClassNotFoundException | NoClassDefFoundError cnfe) {\n            throw new RuntimeException(\"User class must be in class path\", cnfe);\n        }\n        if (!xface.isAssignableFrom(theCls)) {\n            throw new RuntimeException(userClassName + \" does not implement \" + xface.getName());\n        }\n        Class<T> tCls = (Class<T>) theCls.asSubclass(xface);\n        T result;\n        try {\n            Constructor<T> meth = (Constructor<T>) constructorCache.get(theCls);\n            if (null == meth) {\n                meth = tCls.getDeclaredConstructor();\n                meth.setAccessible(true);\n                constructorCache.put(theCls, meth);\n            }\n            result = meth.newInstance();\n        } catch (InstantiationException ie) {\n            throw new RuntimeException(\"User class must be concrete\", ie);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"User class must have a no-arg constructor\", e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"User class must a public constructor\", e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(\"User class constructor throws exception\", e);\n        }\n        return result;\n\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/util/Reflections.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2020-05-30 13:24:29","commitOrder":2,"curCode":"    public static Object createInstance(String userClassName,\n                                        ClassLoader classLoader, Object[] params, Class[] paramTypes) {\n        if (params.length != paramTypes.length) {\n            throw new RuntimeException(\n                    \"Unequal number of params and paramTypes. Each param must have a corresponding param type\");\n        }\n        Class<?> theCls;\n        try {\n            theCls = Class.forName(userClassName, true, classLoader);\n        } catch (ClassNotFoundException | NoClassDefFoundError cnfe) {\n            throw new RuntimeException(\"User class must be in class path\", cnfe);\n        }\n        Object result;\n        try {\n            Constructor<?> meth = constructorCache.get(theCls);\n            if (null == meth) {\n                meth = theCls.getDeclaredConstructor(paramTypes);\n                meth.setAccessible(true);\n                constructorCache.put(theCls, meth);\n            }\n            result = meth.newInstance(params);\n        } catch (InstantiationException ie) {\n            throw new RuntimeException(\"User class must be concrete\", ie);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"User class doesn't have such method\", e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"User class must have a no-arg constructor\", e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(\"User class constructor throws exception\", e);\n        }\n        return result;\n\n    }\n","date":"2020-05-30 13:24:29","endLine":164,"groupId":"11206","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createInstance","params":"(StringuserClassName@ClassLoaderclassLoader@Object[]params@Class[]paramTypes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/e1/713ba243c670444e8bfab3bbbc0891ecd645c0.src","preCode":"    public static Object createInstance(String userClassName,\n                                        ClassLoader classLoader, Object[] params, Class[] paramTypes) {\n        if (params.length != paramTypes.length) {\n            throw new RuntimeException(\n                    \"Unequal number of params and paramTypes. Each param must have a corresponding param type\");\n        }\n        Class<?> theCls;\n        try {\n            theCls = Class.forName(userClassName, true, classLoader);\n        } catch (ClassNotFoundException | NoClassDefFoundError cnfe) {\n            throw new RuntimeException(\"User class must be in class path\", cnfe);\n        }\n        Object result;\n        try {\n            Constructor<?> meth = constructorCache.get(theCls);\n            if (null == meth) {\n                meth = theCls.getDeclaredConstructor(paramTypes);\n                meth.setAccessible(true);\n                constructorCache.put(theCls, meth);\n            }\n            result = meth.newInstance(params);\n        } catch (InstantiationException ie) {\n            throw new RuntimeException(\"User class must be concrete\", ie);\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"User class doesn't have such method\", e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"User class must have a no-arg constructor\", e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(\"User class constructor throws exception\", e);\n        }\n        return result;\n\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/util/Reflections.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"N"}],"commitId":"2c9fe27038768b0b2747a712646c5a6556b6f7e6","commitMessage":"@@@[Issue 8382][Pulsar Function] Enable e2e encryption for Pulsar Function (#8432)\n\nFixes #8382 \n\n\n\n Motivation\n\nAdd the e2e encryption support for Pulsar Functions\n\n\n Modifications\n\n- Add `CryptoConfig` the encapsulate all the crypto related configs set by user\n- Add `CryptoSpec` to `Function` protobuf to container crypto information internally\n- Add `CryptoUtils` to help create instance.  convert between `CryptoConfig` and `CryptoSpec`\n- Add crypto validation method in `ValidatorUtils` to ensure the provided `CryptoKeyReader` Class has a ctor with `Map` arg\n- Updated the cli to allow user set crypto for consumer/producer when submitting the function\n- Update `PulsarSource`.  `PulsarSink` to use the crypto config if provided\n\n\n Verifying this change\n\n- [x] Make sure that the change passes the CI checks.","date":"2020-11-08 16:45:12","modifiedFileCount":"14","status":"M","submitter":"Neng Lu"}]
