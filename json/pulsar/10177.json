[{"authorTime":"2017-06-24 02:22:49","codes":[{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"    void testCompressDecompress(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PooledByteBufAllocator.DEFAULT.buffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","date":"2017-06-24 04:41:32","endLine":72,"groupId":"12031","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompressDecompress","params":"(CompressionTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/65/4623d852f17eb75dfb0b8a2d92bf552a41ca83.src","preCode":"    void testCompressDecompress(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PooledByteBufAllocator.DEFAULT.buffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"    void testMultpileUsages(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n\n        for (int i = 0; i < 5; i++) {\n            ByteBuf raw = PooledByteBufAllocator.DEFAULT.buffer();\n            raw.writeBytes(data);\n            ByteBuf compressed = codec.encode(raw);\n            assertEquals(raw.readableBytes(), data.length);\n\n            int compressedSize = compressed.readableBytes();\n\n            ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n            assertEquals(compressed.readableBytes(), compressedSize);\n\n            assertEquals(uncompressed.readableBytes(), data.length);\n            assertEquals(uncompressed, raw);\n\n            raw.release();\n            compressed.release();\n            uncompressed.release();\n        }\n    }\n","date":"2017-06-24 04:41:32","endLine":108,"groupId":"12031","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultpileUsages","params":"(CompressionTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/65/4623d852f17eb75dfb0b8a2d92bf552a41ca83.src","preCode":"    void testMultpileUsages(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n\n        for (int i = 0; i < 5; i++) {\n            ByteBuf raw = PooledByteBufAllocator.DEFAULT.buffer();\n            raw.writeBytes(data);\n            ByteBuf compressed = codec.encode(raw);\n            assertEquals(raw.readableBytes(), data.length);\n\n            int compressedSize = compressed.readableBytes();\n\n            ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n            assertEquals(compressed.readableBytes(), compressedSize);\n\n            assertEquals(uncompressed.readableBytes(), data.length);\n            assertEquals(uncompressed, raw);\n\n            raw.release();\n            compressed.release();\n            uncompressed.release();\n        }\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"70da31b082ea0ff7466cdf740fc0d6b443d21861","commitMessage":"@@@Renamed Java packages from com.yahoo.pulsar to org.apache.pulsar (#524)\n","date":"2017-06-24 04:41:32","modifiedFileCount":"5","status":"B","submitter":"Matteo Merli"},{"authorTime":"2019-05-29 23:31:47","codes":[{"authorDate":"2019-05-29 23:31:47","commitOrder":2,"curCode":"    void testCompressDecompress(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","date":"2019-05-29 23:31:47","endLine":70,"groupId":"12031","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompressDecompress","params":"(CompressionTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/51/5bb3c033942a3b44483a4d9173baea46e03a48.src","preCode":"    void testCompressDecompress(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PooledByteBufAllocator.DEFAULT.buffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2019-05-29 23:31:47","commitOrder":2,"curCode":"    void testMultpileUsages(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n\n        for (int i = 0; i < 5; i++) {\n            ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n            raw.writeBytes(data);\n            ByteBuf compressed = codec.encode(raw);\n            assertEquals(raw.readableBytes(), data.length);\n\n            int compressedSize = compressed.readableBytes();\n\n            ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n            assertEquals(compressed.readableBytes(), compressedSize);\n\n            assertEquals(uncompressed.readableBytes(), data.length);\n            assertEquals(uncompressed, raw);\n\n            raw.release();\n            compressed.release();\n            uncompressed.release();\n        }\n    }\n","date":"2019-05-29 23:31:47","endLine":106,"groupId":"12031","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultpileUsages","params":"(CompressionTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/51/5bb3c033942a3b44483a4d9173baea46e03a48.src","preCode":"    void testMultpileUsages(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n\n        for (int i = 0; i < 5; i++) {\n            ByteBuf raw = PooledByteBufAllocator.DEFAULT.buffer();\n            raw.writeBytes(data);\n            ByteBuf compressed = codec.encode(raw);\n            assertEquals(raw.readableBytes(), data.length);\n\n            int compressedSize = compressed.readableBytes();\n\n            ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n            assertEquals(compressed.readableBytes(), compressedSize);\n\n            assertEquals(uncompressed.readableBytes(), data.length);\n            assertEquals(uncompressed, raw);\n\n            raw.release();\n            compressed.release();\n            uncompressed.release();\n        }\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"3b33c668e194421aed23873c26e9b7e8bcbd9d9f","commitMessage":"@@@Configure static PulsarByteBufAllocator to handle OOM errors (#4196)\n\n* Configure static PulsarByteBufAllocator to handle OOM errors\n\n* Always specify `pulsar.allocator.exit_on_oom` when starting pulsar services\n\n* Reverted metrics back\n\n* Fixed compression tests\n\n* Explicitely set the underlying allocator to netty default\n\n* Fixed shading\n","date":"2019-05-29 23:31:47","modifiedFileCount":"29","status":"M","submitter":"Matteo Merli"},{"authorTime":"2020-06-04 14:23:49","codes":[{"authorDate":"2020-06-04 14:23:49","commitOrder":3,"curCode":"    void testCompressDecompress(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","date":"2020-06-04 14:23:49","endLine":84,"groupId":"12031","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompressDecompress","params":"(CompressionTypetype@StringcompressedText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/46/e57188bb1ce26d65aecb4ad10868181e4bceaf.src","preCode":"    void testCompressDecompress(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-06-04 14:23:49","commitOrder":3,"curCode":"    void testMultpileUsages(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n\n        for (int i = 0; i < 5; i++) {\n            ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n            raw.writeBytes(data);\n            ByteBuf compressed = codec.encode(raw);\n            assertEquals(raw.readableBytes(), data.length);\n\n            int compressedSize = compressed.readableBytes();\n\n            ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n            assertEquals(compressed.readableBytes(), compressedSize);\n\n            assertEquals(uncompressed.readableBytes(), data.length);\n            assertEquals(uncompressed, raw);\n\n            raw.release();\n            compressed.release();\n            uncompressed.release();\n        }\n    }\n","date":"2020-06-04 14:23:49","endLine":120,"groupId":"12031","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultpileUsages","params":"(CompressionTypetype@StringcompressedText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/46/e57188bb1ce26d65aecb4ad10868181e4bceaf.src","preCode":"    void testMultpileUsages(CompressionType type) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n\n        for (int i = 0; i < 5; i++) {\n            ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n            raw.writeBytes(data);\n            ByteBuf compressed = codec.encode(raw);\n            assertEquals(raw.readableBytes(), data.length);\n\n            int compressedSize = compressed.readableBytes();\n\n            ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n            assertEquals(compressed.readableBytes(), compressedSize);\n\n            assertEquals(uncompressed.readableBytes(), data.length);\n            assertEquals(uncompressed, raw);\n\n            raw.release();\n            compressed.release();\n            uncompressed.release();\n        }\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"b22b32313d95d3ad2518d49352d985a149ebaf31","commitMessage":"@@@Use pure-java Air-Compressor instead of JNI based libraries (#5390)\n\n* Use pure-java Air-Compressor instead of JNI based libraries\n\n* Fixed license files\n\n* Fixed non-needed exclusion\n\n* Added compat tests with JNI implementations\n\n* Ensure direct buffer is used in the test\n\n* Ensure direct bytebuf for both compression and decompression test\n\nCo-authored-by: penghui <penghui@apache.org>","date":"2020-06-04 14:23:49","modifiedFileCount":"4","status":"M","submitter":"Matteo Merli"},{"authorTime":"2021-02-22 20:40:10","codes":[{"authorDate":"2021-02-22 20:40:10","commitOrder":4,"curCode":"    void testCompressDecompress(CompressionType type, String sourceText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = sourceText.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","date":"2021-02-22 20:40:10","endLine":102,"groupId":"10177","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCompressDecompress","params":"(CompressionTypetype@StringsourceText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/55/18df5cd6205b8e8488f7e676b175f57f62a924.src","preCode":"    void testCompressDecompress(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n        ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n        raw.writeBytes(data);\n\n        ByteBuf compressed = codec.encode(raw);\n        assertEquals(raw.readableBytes(), data.length);\n\n        int compressedSize = compressed.readableBytes();\n\n        ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n        assertEquals(compressed.readableBytes(), compressedSize);\n\n        assertEquals(uncompressed.readableBytes(), data.length);\n        assertEquals(uncompressed, raw);\n\n        raw.release();\n        compressed.release();\n        uncompressed.release();\n\n        \r\n        assertEquals(raw.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n        assertEquals(compressed.refCnt(), 0);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-02-22 20:40:10","commitOrder":4,"curCode":"    void testMultpileUsages(CompressionType type, String sourceText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = sourceText.getBytes();\n\n        for (int i = 0; i < 5; i++) {\n            ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n            raw.writeBytes(data);\n            ByteBuf compressed = codec.encode(raw);\n            assertEquals(raw.readableBytes(), data.length);\n\n            int compressedSize = compressed.readableBytes();\n\n            ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n            assertEquals(compressed.readableBytes(), compressedSize);\n\n            assertEquals(uncompressed.readableBytes(), data.length);\n            assertEquals(uncompressed, raw);\n\n            raw.release();\n            compressed.release();\n            uncompressed.release();\n        }\n    }\n","date":"2021-02-22 20:40:10","endLine":169,"groupId":"10177","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testMultpileUsages","params":"(CompressionTypetype@StringsourceText)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/55/18df5cd6205b8e8488f7e676b175f57f62a924.src","preCode":"    void testMultpileUsages(CompressionType type, String compressedText) throws IOException {\n        CompressionCodec codec = CompressionCodecProvider.getCompressionCodec(type);\n        byte[] data = text.getBytes();\n\n        for (int i = 0; i < 5; i++) {\n            ByteBuf raw = PulsarByteBufAllocator.DEFAULT.directBuffer();\n            raw.writeBytes(data);\n            ByteBuf compressed = codec.encode(raw);\n            assertEquals(raw.readableBytes(), data.length);\n\n            int compressedSize = compressed.readableBytes();\n\n            ByteBuf uncompressed = codec.decode(compressed, data.length);\n\n            assertEquals(compressed.readableBytes(), compressedSize);\n\n            assertEquals(uncompressed.readableBytes(), data.length);\n            assertEquals(uncompressed, raw);\n\n            raw.release();\n            compressed.release();\n            uncompressed.release();\n        }\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/compression/CompressorCodecTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"aa65220fa496add95b04971c29400446157c43b4","commitMessage":"@@@[Compression] Fix ByteBuffer allocate error in the AirliftUtils (#9667)\n\nFixes #9666\n\n\n Motivation\n\nThe compressed data length may be bigger than the original data length (e.g. the source text is not repeated.  such as \"abcde\").  so we can't use the uncompressed length as the allocated length to initial the ByteBuffer.\n\n\n Modifications\n\nUse the capacity of the ByteBuffer instead of the uncompressed length as the allocated length.\n\n\n Verifying this change\n\nUpdate the existing tests.","date":"2021-02-22 20:40:10","modifiedFileCount":"5","status":"M","submitter":"ran"}]
