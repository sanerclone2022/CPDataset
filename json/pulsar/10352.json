[{"authorTime":"2017-06-24 02:22:49","codes":[{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.serviceURL == null || this.serviceURL.isEmpty())\n            throw (new ParameterException(\"Broker URL is not provided.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesConsumed = 0;\n        int returnCode = 0;\n\n        try {\n            ConsumerConfiguration consumerConf = new ConsumerConfiguration();\n            consumerConf.setSubscriptionType(this.subscriptionType);\n            PulsarClient client = PulsarClient.create(this.serviceURL, this.clientConfig);\n            Consumer consumer = client.subscribe(topic, this.subscriptionName, consumerConf);\n\n            RateLimiter limiter = (this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n            while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n                if (limiter != null) {\n                    limiter.acquire();\n                }\n\n                Message msg = consumer.receive(5, TimeUnit.SECONDS);\n                if (msg == null) {\n                    LOG.warn(\"No message to consume after waiting for 20 seconds.\");\n                } else {\n                    numMessagesConsumed += 1;\n                    System.out.println(MESSAGE_BOUNDARY);\n                    String output = this.interpretMessage(msg, displayHex);\n                    System.out.println(output);\n                    consumer.acknowledge(msg);\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while consuming messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully consumed\", numMessagesConsumed);\n        }\n\n        return returnCode;\n    }\n","date":"2017-06-24 04:41:32","endLine":161,"groupId":"12814","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/76/424ca7ffd6977226c22d3f03d0b55c3cfccede.src","preCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.serviceURL == null || this.serviceURL.isEmpty())\n            throw (new ParameterException(\"Broker URL is not provided.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesConsumed = 0;\n        int returnCode = 0;\n\n        try {\n            ConsumerConfiguration consumerConf = new ConsumerConfiguration();\n            consumerConf.setSubscriptionType(this.subscriptionType);\n            PulsarClient client = PulsarClient.create(this.serviceURL, this.clientConfig);\n            Consumer consumer = client.subscribe(topic, this.subscriptionName, consumerConf);\n\n            RateLimiter limiter = (this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n            while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n                if (limiter != null) {\n                    limiter.acquire();\n                }\n\n                Message msg = consumer.receive(5, TimeUnit.SECONDS);\n                if (msg == null) {\n                    LOG.warn(\"No message to consume after waiting for 20 seconds.\");\n                } else {\n                    numMessagesConsumed += 1;\n                    System.out.println(MESSAGE_BOUNDARY);\n                    String output = this.interpretMessage(msg, displayHex);\n                    System.out.println(output);\n                    consumer.acknowledge(msg);\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while consuming messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully consumed\", numMessagesConsumed);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdConsume.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"},{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.serviceURL == null || this.serviceURL.isEmpty())\n            throw (new ParameterException(\"Broker URL is not provided.\"));\n        if (this.numTimesProduce <= 0)\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        if (messages.size() == 0 && messageFileNames.size() == 0)\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesSent = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = PulsarClient.create(this.serviceURL, this.clientConfig);\n            Producer producer = client.createProducer(topic);\n\n            List<byte[]> messageBodies = generateMessageBodies(this.messages, this.messageFileNames);\n            RateLimiter limiter = (this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;\n            for (int i = 0; i < this.numTimesProduce; i++) {\n                List<Message> messages = generateMessages(messageBodies);\n                for (Message msg : messages) {\n                    if (limiter != null)\n                        limiter.acquire();\n\n                    producer.send(msg);\n                    numMessagesSent++;\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while producing messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully produced\", numMessagesSent);\n        }\n\n        return returnCode;\n    }\n","date":"2017-06-24 04:41:32","endLine":197,"groupId":"10042","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4d/5b6e24157f394804f681ef5acc5a1763ecd5d6.src","preCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.serviceURL == null || this.serviceURL.isEmpty())\n            throw (new ParameterException(\"Broker URL is not provided.\"));\n        if (this.numTimesProduce <= 0)\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        if (messages.size() == 0 && messageFileNames.size() == 0)\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesSent = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = PulsarClient.create(this.serviceURL, this.clientConfig);\n            Producer producer = client.createProducer(topic);\n\n            List<byte[]> messageBodies = generateMessageBodies(this.messages, this.messageFileNames);\n            RateLimiter limiter = (this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;\n            for (int i = 0; i < this.numTimesProduce; i++) {\n                List<Message> messages = generateMessages(messageBodies);\n                for (Message msg : messages) {\n                    if (limiter != null)\n                        limiter.acquire();\n\n                    producer.send(msg);\n                    numMessagesSent++;\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while producing messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully produced\", numMessagesSent);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdProduce.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"70da31b082ea0ff7466cdf740fc0d6b443d21861","commitMessage":"@@@Renamed Java packages from com.yahoo.pulsar to org.apache.pulsar (#524)\n","date":"2017-06-24 04:41:32","modifiedFileCount":"5","status":"B","submitter":"Matteo Merli"},{"authorTime":"2018-03-05 01:10:18","codes":[{"authorDate":"2018-03-05 01:10:18","commitOrder":2,"curCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesConsumed = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Consumer<byte[]> consumer = client.newConsumer().topic(topic).subscriptionName(this.subscriptionName).subscriptionType(subscriptionType).subscribe();\n\n            RateLimiter limiter = (this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n            while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n                if (limiter != null) {\n                    limiter.acquire();\n                }\n\n                Message<byte[]> msg = consumer.receive(5, TimeUnit.SECONDS);\n                if (msg == null) {\n                    LOG.warn(\"No message to consume after waiting for 20 seconds.\");\n                } else {\n                    numMessagesConsumed += 1;\n                    System.out.println(MESSAGE_BOUNDARY);\n                    String output = this.interpretMessage(msg, displayHex);\n                    System.out.println(output);\n                    consumer.acknowledge(msg);\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while consuming messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully consumed\", numMessagesConsumed);\n        }\n\n        return returnCode;\n    }\n","date":"2018-03-05 01:10:18","endLine":154,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ca/a2a12e77833ddcbcd8454f5e50a520b74041a1.src","preCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.serviceURL == null || this.serviceURL.isEmpty())\n            throw (new ParameterException(\"Broker URL is not provided.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesConsumed = 0;\n        int returnCode = 0;\n\n        try {\n            ConsumerConfiguration consumerConf = new ConsumerConfiguration();\n            consumerConf.setSubscriptionType(this.subscriptionType);\n            PulsarClient client = PulsarClient.create(this.serviceURL, this.clientConfig);\n            Consumer consumer = client.subscribe(topic, this.subscriptionName, consumerConf);\n\n            RateLimiter limiter = (this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n            while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n                if (limiter != null) {\n                    limiter.acquire();\n                }\n\n                Message msg = consumer.receive(5, TimeUnit.SECONDS);\n                if (msg == null) {\n                    LOG.warn(\"No message to consume after waiting for 20 seconds.\");\n                } else {\n                    numMessagesConsumed += 1;\n                    System.out.println(MESSAGE_BOUNDARY);\n                    String output = this.interpretMessage(msg, displayHex);\n                    System.out.println(output);\n                    consumer.acknowledge(msg);\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while consuming messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully consumed\", numMessagesConsumed);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdConsume.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2018-03-05 01:10:18","commitOrder":2,"curCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.numTimesProduce <= 0)\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        if (messages.size() == 0 && messageFileNames.size() == 0)\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesSent = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Producer<byte[]> producer = client.newProducer().topic(topic).create();\n\n            List<byte[]> messageBodies = generateMessageBodies(this.messages, this.messageFileNames);\n            RateLimiter limiter = (this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;\n            for (int i = 0; i < this.numTimesProduce; i++) {\n                List<Message<byte[]>> messages = generateMessages(messageBodies);\n                for (Message<byte[]> msg : messages) {\n                    if (limiter != null)\n                        limiter.acquire();\n\n                    producer.send(msg);\n                    numMessagesSent++;\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while producing messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully produced\", numMessagesSent);\n        }\n\n        return returnCode;\n    }\n","date":"2018-03-05 01:10:18","endLine":193,"groupId":"10042","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/65/cceeb69df8b3696de1d41da653570d3ef4152e.src","preCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.serviceURL == null || this.serviceURL.isEmpty())\n            throw (new ParameterException(\"Broker URL is not provided.\"));\n        if (this.numTimesProduce <= 0)\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        if (messages.size() == 0 && messageFileNames.size() == 0)\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesSent = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = PulsarClient.create(this.serviceURL, this.clientConfig);\n            Producer producer = client.createProducer(topic);\n\n            List<byte[]> messageBodies = generateMessageBodies(this.messages, this.messageFileNames);\n            RateLimiter limiter = (this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;\n            for (int i = 0; i < this.numTimesProduce; i++) {\n                List<Message> messages = generateMessages(messageBodies);\n                for (Message msg : messages) {\n                    if (limiter != null)\n                        limiter.acquire();\n\n                    producer.send(msg);\n                    numMessagesSent++;\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while producing messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully produced\", numMessagesSent);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdProduce.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"052814d516adb429d2c0fca030920f26770a52ac","commitMessage":"@@@Refactored all unit tests to use new typed API with builders for configuration (#1320)\n\n* Refactored all unit tests to use new typed API with builders for configuration\n\n* Did conversion in pulsar-client tool\n\n* Refactoring typo fixes\n","date":"2018-03-05 01:10:18","modifiedFileCount":"122","status":"M","submitter":"Matteo Merli"},{"authorTime":"2018-05-01 05:03:06","codes":[{"authorDate":"2018-03-05 01:10:18","commitOrder":3,"curCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesConsumed = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Consumer<byte[]> consumer = client.newConsumer().topic(topic).subscriptionName(this.subscriptionName).subscriptionType(subscriptionType).subscribe();\n\n            RateLimiter limiter = (this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n            while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n                if (limiter != null) {\n                    limiter.acquire();\n                }\n\n                Message<byte[]> msg = consumer.receive(5, TimeUnit.SECONDS);\n                if (msg == null) {\n                    LOG.warn(\"No message to consume after waiting for 20 seconds.\");\n                } else {\n                    numMessagesConsumed += 1;\n                    System.out.println(MESSAGE_BOUNDARY);\n                    String output = this.interpretMessage(msg, displayHex);\n                    System.out.println(output);\n                    consumer.acknowledge(msg);\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while consuming messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully consumed\", numMessagesConsumed);\n        }\n\n        return returnCode;\n    }\n","date":"2018-03-05 01:10:18","endLine":154,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ca/a2a12e77833ddcbcd8454f5e50a520b74041a1.src","preCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesConsumed = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Consumer<byte[]> consumer = client.newConsumer().topic(topic).subscriptionName(this.subscriptionName).subscriptionType(subscriptionType).subscribe();\n\n            RateLimiter limiter = (this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n            while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n                if (limiter != null) {\n                    limiter.acquire();\n                }\n\n                Message<byte[]> msg = consumer.receive(5, TimeUnit.SECONDS);\n                if (msg == null) {\n                    LOG.warn(\"No message to consume after waiting for 20 seconds.\");\n                } else {\n                    numMessagesConsumed += 1;\n                    System.out.println(MESSAGE_BOUNDARY);\n                    String output = this.interpretMessage(msg, displayHex);\n                    System.out.println(output);\n                    consumer.acknowledge(msg);\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while consuming messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully consumed\", numMessagesConsumed);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdConsume.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2018-05-01 05:03:06","commitOrder":3,"curCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.numTimesProduce <= 0)\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        if (messages.size() == 0 && messageFileNames.size() == 0)\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesSent = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Producer<byte[]> producer = client.newProducer().topic(topic).create();\n\n            List<byte[]> messageBodies = generateMessageBodies(this.messages, this.messageFileNames);\n            RateLimiter limiter = (this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;\n            for (int i = 0; i < this.numTimesProduce; i++) {\n                for (byte[] content : messageBodies) {\n                    if (limiter != null) {\n                        limiter.acquire();\n                    }\n\n                    producer.send(content);\n                    numMessagesSent++;\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while producing messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully produced\", numMessagesSent);\n        }\n\n        return returnCode;\n    }\n","date":"2018-05-01 05:03:06","endLine":166,"groupId":"10042","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c5/59494ea37a4851cb0210271e051b7b0638803b.src","preCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.numTimesProduce <= 0)\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        if (messages.size() == 0 && messageFileNames.size() == 0)\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesSent = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Producer<byte[]> producer = client.newProducer().topic(topic).create();\n\n            List<byte[]> messageBodies = generateMessageBodies(this.messages, this.messageFileNames);\n            RateLimiter limiter = (this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;\n            for (int i = 0; i < this.numTimesProduce; i++) {\n                List<Message<byte[]>> messages = generateMessages(messageBodies);\n                for (Message<byte[]> msg : messages) {\n                    if (limiter != null)\n                        limiter.acquire();\n\n                    producer.send(msg);\n                    numMessagesSent++;\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while producing messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully produced\", numMessagesSent);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdProduce.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"0f2f478c1ffc4028d7fd271a1bc523b3342a07af","commitMessage":"@@@Introduced TypedMessageBuilder (#1683)\n\n* Introduced TypedMessageBuilder\n\n* Converted parts of the tests to use TypedMessageBuilder\n\n* Fixed tests\n","date":"2018-05-01 05:03:06","modifiedFileCount":"17","status":"M","submitter":"Matteo Merli"},{"authorTime":"2018-05-01 05:03:06","codes":[{"authorDate":"2018-06-22 00:26:53","commitOrder":4,"curCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesConsumed = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Consumer<byte[]> consumer = client.newConsumer().topic(topic).subscriptionName(this.subscriptionName).subscriptionType(subscriptionType).subscribe();\n\n            RateLimiter limiter = (this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n            while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n                if (limiter != null) {\n                    limiter.acquire();\n                }\n\n                Message<byte[]> msg = consumer.receive(5, TimeUnit.SECONDS);\n                if (msg == null) {\n                    LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n                } else {\n                    numMessagesConsumed += 1;\n                    System.out.println(MESSAGE_BOUNDARY);\n                    String output = this.interpretMessage(msg, displayHex);\n                    System.out.println(output);\n                    consumer.acknowledge(msg);\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while consuming messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully consumed\", numMessagesConsumed);\n        }\n\n        return returnCode;\n    }\n","date":"2018-06-22 00:26:53","endLine":154,"groupId":"14747","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f1/9e6a5008344d9a5ec6db95b97f0357e5f0e0c3.src","preCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesConsumed = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Consumer<byte[]> consumer = client.newConsumer().topic(topic).subscriptionName(this.subscriptionName).subscriptionType(subscriptionType).subscribe();\n\n            RateLimiter limiter = (this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n            while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n                if (limiter != null) {\n                    limiter.acquire();\n                }\n\n                Message<byte[]> msg = consumer.receive(5, TimeUnit.SECONDS);\n                if (msg == null) {\n                    LOG.warn(\"No message to consume after waiting for 20 seconds.\");\n                } else {\n                    numMessagesConsumed += 1;\n                    System.out.println(MESSAGE_BOUNDARY);\n                    String output = this.interpretMessage(msg, displayHex);\n                    System.out.println(output);\n                    consumer.acknowledge(msg);\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while consuming messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully consumed\", numMessagesConsumed);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdConsume.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2018-05-01 05:03:06","commitOrder":4,"curCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.numTimesProduce <= 0)\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        if (messages.size() == 0 && messageFileNames.size() == 0)\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesSent = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Producer<byte[]> producer = client.newProducer().topic(topic).create();\n\n            List<byte[]> messageBodies = generateMessageBodies(this.messages, this.messageFileNames);\n            RateLimiter limiter = (this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;\n            for (int i = 0; i < this.numTimesProduce; i++) {\n                for (byte[] content : messageBodies) {\n                    if (limiter != null) {\n                        limiter.acquire();\n                    }\n\n                    producer.send(content);\n                    numMessagesSent++;\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while producing messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully produced\", numMessagesSent);\n        }\n\n        return returnCode;\n    }\n","date":"2018-05-01 05:03:06","endLine":166,"groupId":"10042","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c5/59494ea37a4851cb0210271e051b7b0638803b.src","preCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.numTimesProduce <= 0)\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        if (messages.size() == 0 && messageFileNames.size() == 0)\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesSent = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Producer<byte[]> producer = client.newProducer().topic(topic).create();\n\n            List<byte[]> messageBodies = generateMessageBodies(this.messages, this.messageFileNames);\n            RateLimiter limiter = (this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;\n            for (int i = 0; i < this.numTimesProduce; i++) {\n                for (byte[] content : messageBodies) {\n                    if (limiter != null) {\n                        limiter.acquire();\n                    }\n\n                    producer.send(content);\n                    numMessagesSent++;\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while producing messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully produced\", numMessagesSent);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdProduce.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"b7e3fdd0976b4703cc858ddebf7e9db17d9a9fd8","commitMessage":"@@@Downgrade pulsar-client CLI consume warning message (#1485) (#2012)\n\nPreviously this log would spam the stdout if there were no messages\ncoming in. The message wasn't even factually correct.  as the timeout\nhad changed.\n\nI've downgraded the log warn to debug can corrected the factual error.","date":"2018-06-22 00:26:53","modifiedFileCount":"1","status":"M","submitter":"Ivan Kelly"},{"authorTime":"2019-03-20 01:37:29","codes":[{"authorDate":"2019-03-20 01:37:29","commitOrder":5,"curCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        \n        if(this.serviceURL.startsWith(\"ws\")) {\n            return consumeFromWebSocket(topic);\n        }else {\n            return consume(topic);\n        }\n    }\n","date":"2019-03-20 01:37:29","endLine":153,"groupId":"14747","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4f/86556e9e9a416de0bf644d3831488d1724f012.src","preCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesConsumed = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Consumer<byte[]> consumer = client.newConsumer().topic(topic).subscriptionName(this.subscriptionName).subscriptionType(subscriptionType).subscribe();\n\n            RateLimiter limiter = (this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;\n            while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {\n                if (limiter != null) {\n                    limiter.acquire();\n                }\n\n                Message<byte[]> msg = consumer.receive(5, TimeUnit.SECONDS);\n                if (msg == null) {\n                    LOG.debug(\"No message to consume after waiting for 5 seconds.\");\n                } else {\n                    numMessagesConsumed += 1;\n                    System.out.println(MESSAGE_BOUNDARY);\n                    String output = this.interpretMessage(msg, displayHex);\n                    System.out.println(output);\n                    consumer.acknowledge(msg);\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while consuming messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully consumed\", numMessagesConsumed);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdConsume.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2019-03-20 01:37:29","commitOrder":5,"curCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1) {\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        }\n        if (this.numTimesProduce <= 0) {\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        }\n        if (messages.size() == 0 && messageFileNames.size() == 0) {\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n        }\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n\n        if (this.serviceURL.startsWith(\"ws\")) {\n            return publishToWebSocket(totalMessages, topic);\n        } else {\n            return publish(totalMessages, topic);\n        }\n    }\n","date":"2019-03-20 01:37:29","endLine":171,"groupId":"10042","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/99/0ac257026f82f500714938934c4a281a60458c.src","preCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.numTimesProduce <= 0)\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        if (messages.size() == 0 && messageFileNames.size() == 0)\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n        int numMessagesSent = 0;\n        int returnCode = 0;\n\n        try {\n            PulsarClient client = clientBuilder.build();\n            Producer<byte[]> producer = client.newProducer().topic(topic).create();\n\n            List<byte[]> messageBodies = generateMessageBodies(this.messages, this.messageFileNames);\n            RateLimiter limiter = (this.publishRate > 0) ? RateLimiter.create(this.publishRate) : null;\n            for (int i = 0; i < this.numTimesProduce; i++) {\n                for (byte[] content : messageBodies) {\n                    if (limiter != null) {\n                        limiter.acquire();\n                    }\n\n                    producer.send(content);\n                    numMessagesSent++;\n                }\n            }\n            client.close();\n        } catch (Exception e) {\n            LOG.error(\"Error while producing messages\");\n            LOG.error(e.getMessage(), e);\n            returnCode = -1;\n        } finally {\n            LOG.info(\"{} messages successfully produced\", numMessagesSent);\n        }\n\n        return returnCode;\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdProduce.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"9bc0d268608bce7957dbc9a3207c90ccae697c39","commitMessage":"@@@[pulsar-client-tools] Add support for websocket produce/consume command (#3835)\n\n* [pulsar-client-tools] Add support for websocket produce/consume command\n\n* remove comments\n","date":"2019-03-20 01:37:29","modifiedFileCount":"3","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2019-06-29 23:19:03","codes":[{"authorDate":"2019-03-20 01:37:29","commitOrder":6,"curCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        \n        if(this.serviceURL.startsWith(\"ws\")) {\n            return consumeFromWebSocket(topic);\n        }else {\n            return consume(topic);\n        }\n    }\n","date":"2019-03-20 01:37:29","endLine":153,"groupId":"14747","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4f/86556e9e9a416de0bf644d3831488d1724f012.src","preCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        \n        if(this.serviceURL.startsWith(\"ws\")) {\n            return consumeFromWebSocket(topic);\n        }else {\n            return consume(topic);\n        }\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdConsume.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2019-06-29 23:19:03","commitOrder":6,"curCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1) {\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        }\n        if (this.numTimesProduce <= 0) {\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        }\n        if (messages.size() == 0 && messageFileNames.size() == 0) {\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n        }\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n\n        if (this.serviceURL.startsWith(\"ws\")) {\n            return publishToWebSocket(topic);\n        } else {\n            return publish(topic);\n        }\n    }\n","date":"2019-06-29 23:19:03","endLine":168,"groupId":"10042","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/00/6be6c5ccc4d730963462dc43f886ab1e4a6212.src","preCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1) {\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        }\n        if (this.numTimesProduce <= 0) {\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        }\n        if (messages.size() == 0 && messageFileNames.size() == 0) {\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n        }\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n\n        if (this.serviceURL.startsWith(\"ws\")) {\n            return publishToWebSocket(totalMessages, topic);\n        } else {\n            return publish(totalMessages, topic);\n        }\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdProduce.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"7a24136cedf28559acf0e2b08eed594c4f3264eb","commitMessage":"@@@Remove redundant parameter totalMessages (#4583)\n\nRemove redundant parameter ```totalMessages``` for publish method. ","date":"2019-06-29 23:19:03","modifiedFileCount":"1","status":"M","submitter":"Like"},{"authorTime":"2019-09-13 13:31:54","codes":[{"authorDate":"2019-03-20 01:37:29","commitOrder":7,"curCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        \n        if(this.serviceURL.startsWith(\"ws\")) {\n            return consumeFromWebSocket(topic);\n        }else {\n            return consume(topic);\n        }\n    }\n","date":"2019-03-20 01:37:29","endLine":153,"groupId":"14747","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4f/86556e9e9a416de0bf644d3831488d1724f012.src","preCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        \n        if(this.serviceURL.startsWith(\"ws\")) {\n            return consumeFromWebSocket(topic);\n        }else {\n            return consume(topic);\n        }\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdConsume.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2019-09-13 13:31:54","commitOrder":7,"curCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1) {\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        }\n        if (this.numTimesProduce <= 0) {\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        }\n\n        if (messages.size() > 0){\n            messages = Collections.unmodifiableList(Arrays.asList(messages.get(0).split(separator)));\n        }\n\n        if (messages.size() == 0 && messageFileNames.size() == 0) {\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n        }\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n\n        if (this.serviceURL.startsWith(\"ws\")) {\n            return publishToWebSocket(topic);\n        } else {\n            return publish(topic);\n        }\n    }\n","date":"2019-09-13 13:31:54","endLine":182,"groupId":"10042","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0a/aec8ad4a236303e53692cfaab232ad161b2829.src","preCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1) {\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        }\n        if (this.numTimesProduce <= 0) {\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        }\n        if (messages.size() == 0 && messageFileNames.size() == 0) {\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n        }\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n\n        if (this.serviceURL.startsWith(\"ws\")) {\n            return publishToWebSocket(topic);\n        } else {\n            return publish(topic);\n        }\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdProduce.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"c04945e7c6f1daf356846c95a6b7f3ae363adf11","commitMessage":"@@@Add option to customize splitter character (#5187)\n\n","date":"2019-09-13 13:31:54","modifiedFileCount":"1","status":"M","submitter":"Ali Ahmed"},{"authorTime":"2021-08-14 07:24:45","codes":[{"authorDate":"2019-03-20 01:37:29","commitOrder":8,"curCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        \n        if(this.serviceURL.startsWith(\"ws\")) {\n            return consumeFromWebSocket(topic);\n        }else {\n            return consume(topic);\n        }\n    }\n","date":"2019-03-20 01:37:29","endLine":153,"groupId":"10352","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4f/86556e9e9a416de0bf644d3831488d1724f012.src","preCode":"    public int run() throws PulsarClientException, IOException {\n        if (mainOptions.size() != 1)\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        if (this.subscriptionName == null || this.subscriptionName.isEmpty())\n            throw (new ParameterException(\"Subscription name is not provided.\"));\n        if (this.numMessagesToConsume < 0)\n            throw (new ParameterException(\"Number of messages should be zero or positive.\"));\n\n        String topic = this.mainOptions.get(0);\n        \n        if(this.serviceURL.startsWith(\"ws\")) {\n            return consumeFromWebSocket(topic);\n        }else {\n            return consume(topic);\n        }\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdConsume.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2021-08-14 07:24:45","commitOrder":8,"curCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1) {\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        }\n        if (this.numTimesProduce <= 0) {\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        }\n\n        if (messages.size() > 0){\n            messages = Collections.unmodifiableList(Arrays.asList(messages.get(0).split(separator)));\n        }\n\n        if (messages.size() == 0 && messageFileNames.size() == 0) {\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n        }\n\n        if (keyValueEncodingType == null) {\n            keyValueEncodingType = KEY_VALUE_ENCODING_TYPE_NOT_SET;\n        } else {\n            switch (keyValueEncodingType) {\n                case KEY_VALUE_ENCODING_TYPE_SEPARATED:\n                case KEY_VALUE_ENCODING_TYPE_INLINE:\n                    break;\n                default:\n                    throw (new ParameterException(\"--key-value-encoding-type \"+keyValueEncodingType+\" is not valid, only 'separated' or 'inline'\"));\n            }\n        }\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n\n        if (this.serviceURL.startsWith(\"ws\")) {\n            return publishToWebSocket(topic);\n        } else {\n            return publish(topic);\n        }\n    }\n","date":"2021-08-14 07:24:45","endLine":237,"groupId":"10352","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/52/d0b2541a093b9dd169d726857bc4b5590ecd62.src","preCode":"    public int run() throws PulsarClientException {\n        if (mainOptions.size() != 1) {\n            throw (new ParameterException(\"Please provide one and only one topic name.\"));\n        }\n        if (this.numTimesProduce <= 0) {\n            throw (new ParameterException(\"Number of times need to be positive number.\"));\n        }\n\n        if (messages.size() > 0){\n            messages = Collections.unmodifiableList(Arrays.asList(messages.get(0).split(separator)));\n        }\n\n        if (messages.size() == 0 && messageFileNames.size() == 0) {\n            throw (new ParameterException(\"Please supply message content with either --messages or --files\"));\n        }\n\n        int totalMessages = (messages.size() + messageFileNames.size()) * numTimesProduce;\n        if (totalMessages > MAX_MESSAGES) {\n            String msg = \"Attempting to send \" + totalMessages + \" messages. Please do not send more than \"\n                    + MAX_MESSAGES + \" messages\";\n            throw new ParameterException(msg);\n        }\n\n        String topic = this.mainOptions.get(0);\n\n        if (this.serviceURL.startsWith(\"ws\")) {\n            return publishToWebSocket(topic);\n        } else {\n            return publish(topic);\n        }\n    }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/client/cli/CmdProduce.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"17ab040bbd71161df3860613ddcd253b3af24f59","commitMessage":"@@@[tools] Pulsar Client: add ability to produce KV messages (#11303)\n\n\n Motivation\n\nCurrently (Pulsar 2.8.0) it is not easy to produce messages with KeyValue encoding.  because command line tools do not provide such support.\nWith this change the user will be able to set the schema while using `pulsar-client produce` \n\nWe are adding three parameters:\n* \"--key-schema\" : this is the schema for the Key (default :\"string\")\n* \"--value-schema\": this is the schema for the Value (default: \"bytes\")\n* \"--key-value-encoding-type\": this is the type of encoding with values: none. separated. inline\nwith key-value-encoding-type=node (default behaviour) we are not using KV encoding\n\nThe command is 100% compatible with previous versions\n\n\n Modifications\n\nAdd support for the properties listed above.\nWe are using \"Schema.AUTO_PRODUCE_BYTES\" in order to deal with the Schema registry.\nThe user will pass the raw value as message and we are passing it without modifications to Pulsar.\n\nExample command to send a KV message with JSON key and value:\n`bin/pulsar-client produce --key-value-encoding-type separated -k '{\"a\":\"b\"}' -m '{\"a\":\"b\"}' --key-schema 'json:{\"type\": \"record\". \"namespace\": \"com.example\". \"name\": \"FullName\".  \"fields\": [{ \"name\": \"a\".  \"type\": \"string\" }]} '  --value-schema 'json:{\"type\": \"record\". \"namespace\": \"com.example\". \"name\": \"FullName\".  \"fields\": [{ \"name\": \"a\".  \"type\": \"string\" }]} ' test`\n\nfor AVRO and JSON the schema is written inline after the prefix \"avro:\" and \"json:\"\n\n\n Verifying this change\n\nThis change added unit tests","date":"2021-08-14 07:24:45","modifiedFileCount":"2","status":"M","submitter":"Enrico Olivelli"}]
